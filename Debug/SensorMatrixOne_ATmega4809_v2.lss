
SensorMatrixOne_ATmega4809_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00802800  000080f4  000081a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007fae  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000146  0000bfae  00007fae  00008062  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000121  0080280e  0080280e  000081b6  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000081b6  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008214  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000b30  00000000  00000000  00008258  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000cc26  00000000  00000000  00008d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000432c  00000000  00000000  000159ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000075a2  00000000  00000000  00019cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003064  00000000  00000000  0002127c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000591f  00000000  00000000  000242e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000688d  00000000  00000000  00029bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ab8  00000000  00000000  0003048c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__ctors_end>
       4:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       8:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       c:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__vector_3>
      10:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      14:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      18:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      1c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      20:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      24:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      28:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      2c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      30:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      34:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      38:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      3c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      40:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      44:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      48:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      4c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      50:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      54:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      58:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      5c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      60:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__vector_24>
      64:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      68:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      6c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      70:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      74:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      78:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      7c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      80:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      84:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      88:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      8c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      90:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      94:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      98:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      9c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      a0:	21 1c       	adc	r2, r1
      a2:	1a 1c       	adc	r1, r10
      a4:	2f 1c       	adc	r2, r15
      a6:	28 1c       	adc	r2, r8
      a8:	44 1c       	adc	r4, r4
      aa:	36 1c       	adc	r3, r6
      ac:	3d 1c       	adc	r3, r13
      ae:	ec 2a       	or	r14, r28
      b0:	ec 2a       	or	r14, r28
      b2:	36 2b       	or	r19, r22
      b4:	c2 2a       	or	r12, r18
      b6:	d7 2a       	or	r13, r23
      b8:	dd 2a       	or	r13, r29
      ba:	0d 2b       	or	r16, r29
      bc:	0d 2b       	or	r16, r29
      be:	66 2b       	or	r22, r22
      c0:	ac 2a       	or	r10, r28
      c2:	98 2b       	or	r25, r24
      c4:	98 2b       	or	r25, r24
      c6:	98 2b       	or	r25, r24
      c8:	98 2b       	or	r25, r24
      ca:	e3 2a       	or	r14, r19

000000cc <__trampolines_end>:
      cc:	00 09       	sbc	r16, r0
      ce:	12 1b       	sub	r17, r18
      d0:	24 2d       	mov	r18, r4
      d2:	36 3f       	cpi	r19, 0xF6	; 246
      d4:	48 41       	sbci	r20, 0x18	; 24
      d6:	5a 53       	subi	r21, 0x3A	; 58
      d8:	6c 65       	ori	r22, 0x5C	; 92
      da:	7e 77       	andi	r23, 0x7E	; 126
      dc:	19 10       	cpse	r1, r9
      de:	0b 02       	muls	r16, r27
      e0:	3d 34       	cpi	r19, 0x4D	; 77
      e2:	2f 26       	eor	r2, r31
      e4:	51 58       	subi	r21, 0x81	; 129
      e6:	43 4a       	sbci	r20, 0xA3	; 163
      e8:	75 7c       	andi	r23, 0xC5	; 197
      ea:	67 6e       	ori	r22, 0xE7	; 231
      ec:	32 3b       	cpi	r19, 0xB2	; 178
      ee:	20 29       	or	r18, r0
      f0:	16 1f       	adc	r17, r22
      f2:	04 0d       	add	r16, r4
      f4:	7a 73       	andi	r23, 0x3A	; 58
      f6:	68 61       	ori	r22, 0x18	; 24
      f8:	5e 57       	subi	r21, 0x7E	; 126
      fa:	4c 45       	sbci	r20, 0x5C	; 92
      fc:	2b 22       	and	r2, r27
      fe:	39 30       	cpi	r19, 0x09	; 9
     100:	0f 06       	cpc	r0, r31
     102:	1d 14       	cp	r1, r13
     104:	63 6a       	ori	r22, 0xA3	; 163
     106:	71 78       	andi	r23, 0x81	; 129
     108:	47 4e       	sbci	r20, 0xE7	; 231
     10a:	55 5c       	subi	r21, 0xC5	; 197
     10c:	64 6d       	ori	r22, 0xD4	; 212
     10e:	76 7f       	andi	r23, 0xF6	; 246
     110:	40 49       	sbci	r20, 0x90	; 144
     112:	52 5b       	subi	r21, 0xB2	; 178
     114:	2c 25       	eor	r18, r12
     116:	3e 37       	cpi	r19, 0x7E	; 126
     118:	08 01       	movw	r0, r16
     11a:	1a 13       	cpse	r17, r26
     11c:	7d 74       	andi	r23, 0x4D	; 77
     11e:	6f 66       	ori	r22, 0x6F	; 111
     120:	59 50       	subi	r21, 0x09	; 9
     122:	4b 42       	sbci	r20, 0x2B	; 43
     124:	35 3c       	cpi	r19, 0xC5	; 197
     126:	27 2e       	mov	r2, r23
     128:	11 18       	sub	r1, r1
     12a:	03 0a       	sbc	r0, r19
     12c:	56 5f       	subi	r21, 0xF6	; 246
     12e:	44 4d       	sbci	r20, 0xD4	; 212
     130:	72 7b       	andi	r23, 0xB2	; 178
     132:	60 69       	ori	r22, 0x90	; 144
     134:	1e 17       	cp	r17, r30
     136:	0c 05       	cpc	r16, r12
     138:	3a 33       	cpi	r19, 0x3A	; 58
     13a:	28 21       	and	r18, r8
     13c:	4f 46       	sbci	r20, 0x6F	; 111
     13e:	5d 54       	subi	r21, 0x4D	; 77
     140:	6b 62       	ori	r22, 0x2B	; 43
     142:	79 70       	andi	r23, 0x09	; 9
     144:	07 0e       	add	r0, r23
     146:	15 1c       	adc	r1, r5
     148:	23 2a       	or	r2, r19
     14a:	31 38       	cpi	r19, 0x81	; 129
     14c:	41 48       	sbci	r20, 0x81	; 129
     14e:	53 5a       	subi	r21, 0xA3	; 163
     150:	65 6c       	ori	r22, 0xC5	; 197
     152:	77 7e       	andi	r23, 0xE7	; 231
     154:	09 00       	.word	0x0009	; ????
     156:	1b 12       	cpse	r1, r27
     158:	2d 24       	eor	r2, r13
     15a:	3f 36       	cpi	r19, 0x6F	; 111
     15c:	58 51       	subi	r21, 0x18	; 24
     15e:	4a 43       	sbci	r20, 0x3A	; 58
     160:	7c 75       	andi	r23, 0x5C	; 92
     162:	6e 67       	ori	r22, 0x7E	; 126
     164:	10 19       	sub	r17, r0
     166:	02 0b       	sbc	r16, r18
     168:	34 3d       	cpi	r19, 0xD4	; 212
     16a:	26 2f       	mov	r18, r22
     16c:	73 7a       	andi	r23, 0xA3	; 163
     16e:	61 68       	ori	r22, 0x81	; 129
     170:	57 5e       	subi	r21, 0xE7	; 231
     172:	45 4c       	sbci	r20, 0xC5	; 197
     174:	3b 32       	cpi	r19, 0x2B	; 43
     176:	29 20       	and	r2, r9
     178:	1f 16       	cp	r1, r31
     17a:	0d 04       	cpc	r0, r13
     17c:	6a 63       	ori	r22, 0x3A	; 58
     17e:	78 71       	andi	r23, 0x18	; 24
     180:	4e 47       	sbci	r20, 0x7E	; 126
     182:	5c 55       	subi	r21, 0x5C	; 92
     184:	22 2b       	or	r18, r18
     186:	30 39       	cpi	r19, 0x90	; 144
     188:	06 0f       	add	r16, r22
     18a:	14 1d       	adc	r17, r4
     18c:	25 2c       	mov	r2, r5
     18e:	37 3e       	cpi	r19, 0xE7	; 231
     190:	01 08       	sbc	r0, r1
     192:	13 1a       	sub	r1, r19
     194:	6d 64       	ori	r22, 0x4D	; 77
     196:	7f 76       	andi	r23, 0x6F	; 111
     198:	49 40       	sbci	r20, 0x09	; 9
     19a:	5b 52       	subi	r21, 0x2B	; 43
     19c:	3c 35       	cpi	r19, 0x5C	; 92
     19e:	2e 27       	eor	r18, r30
     1a0:	18 11       	cpse	r17, r8
     1a2:	0a 03       	fmul	r16, r18
     1a4:	74 7d       	andi	r23, 0xD4	; 212
     1a6:	66 6f       	ori	r22, 0xF6	; 246
     1a8:	50 59       	subi	r21, 0x90	; 144
     1aa:	42 4b       	sbci	r20, 0xB2	; 178
     1ac:	17 1e       	adc	r1, r23
     1ae:	05 0c       	add	r0, r5
     1b0:	33 3a       	cpi	r19, 0xA3	; 163
     1b2:	21 28       	or	r2, r1
     1b4:	5f 56       	subi	r21, 0x6F	; 111
     1b6:	4d 44       	sbci	r20, 0x4D	; 77
     1b8:	7b 72       	andi	r23, 0x2B	; 43
     1ba:	69 60       	ori	r22, 0x09	; 9
     1bc:	0e 07       	cpc	r16, r30
     1be:	1c 15       	cp	r17, r12
     1c0:	2a 23       	and	r18, r26
     1c2:	38 31       	cpi	r19, 0x18	; 24
     1c4:	46 4f       	sbci	r20, 0xF6	; 246
     1c6:	54 5d       	subi	r21, 0xD4	; 212
     1c8:	62 6b       	ori	r22, 0xB2	; 178
     1ca:	70 79       	andi	r23, 0x90	; 144

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	df e3       	ldi	r29, 0x3F	; 63
     1d6:	de bf       	out	0x3e, r29	; 62

000001d8 <__do_copy_data>:
     1d8:	18 e2       	ldi	r17, 0x28	; 40
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b8 e2       	ldi	r27, 0x28	; 40
     1de:	e4 ef       	ldi	r30, 0xF4	; 244
     1e0:	f0 e8       	ldi	r31, 0x80	; 128
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__do_copy_data+0x10>
     1e4:	05 90       	lpm	r0, Z+
     1e6:	0d 92       	st	X+, r0
     1e8:	ae 30       	cpi	r26, 0x0E	; 14
     1ea:	b1 07       	cpc	r27, r17
     1ec:	d9 f7       	brne	.-10     	; 0x1e4 <__do_copy_data+0xc>

000001ee <__do_clear_bss>:
     1ee:	29 e2       	ldi	r18, 0x29	; 41
     1f0:	ae e0       	ldi	r26, 0x0E	; 14
     1f2:	b8 e2       	ldi	r27, 0x28	; 40
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <.do_clear_bss_start>

000001f6 <.do_clear_bss_loop>:
     1f6:	1d 92       	st	X+, r1

000001f8 <.do_clear_bss_start>:
     1f8:	af 32       	cpi	r26, 0x2F	; 47
     1fa:	b2 07       	cpc	r27, r18
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <.do_clear_bss_loop>
     1fe:	0e 94 14 02 	call	0x428	; 0x428 <main>
     202:	0c 94 d5 3f 	jmp	0x7faa	; 0x7faa <_exit>

00000206 <__bad_interrupt>:
     206:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020a <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
	system_init();
     212:	0e 94 ab 0a 	call	0x1556	; 0x1556 <system_init>
}
     216:	00 00       	nop
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <PORTB_get_pin_level>:
 * \brief Get level on pin
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	1f 92       	push	r1
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
     228:	89 83       	std	Y+1, r24	; 0x01
	return VPORTB.IN & (1 << pin);
     22a:	84 e0       	ldi	r24, 0x04	; 4
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	fc 01       	movw	r30, r24
     230:	82 81       	ldd	r24, Z+2	; 0x02
     232:	28 2f       	mov	r18, r24
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	48 2f       	mov	r20, r24
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	02 c0       	rjmp	.+4      	; 0x246 <PORTB_get_pin_level+0x28>
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	4a 95       	dec	r20
     248:	e2 f7       	brpl	.-8      	; 0x242 <PORTB_get_pin_level+0x24>
     24a:	82 23       	and	r24, r18
     24c:	93 23       	and	r25, r19
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	89 2b       	or	r24, r25
     252:	09 f4       	brne	.+2      	; 0x256 <PORTB_get_pin_level+0x38>
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	82 2f       	mov	r24, r18
}
     258:	0f 90       	pop	r0
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <SW0_get_level>:
 * \brief Get level on SW0
 *
 * Reads the level on a pin
 */
static inline bool SW0_get_level()
{
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
	return PORTB_get_pin_level(2);
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	0e 94 0f 01 	call	0x21e	; 0x21e <PORTB_get_pin_level>
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <socketHandler>:




void socketHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
     280:	2a 97       	sbiw	r28, 0x0a	; 10
     282:	cd bf       	out	0x3d, r28	; 61
     284:	de bf       	out	0x3e, r29	; 62
     286:	8f 83       	std	Y+7, r24	; 0x07
     288:	68 87       	std	Y+8, r22	; 0x08
     28a:	49 87       	std	Y+9, r20	; 0x09
     28c:	5a 87       	std	Y+10, r21	; 0x0a
	switch (u8Msg) {
     28e:	88 85       	ldd	r24, Y+8	; 0x08
     290:	88 2f       	mov	r24, r24
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	86 30       	cpi	r24, 0x06	; 6
     296:	91 05       	cpc	r25, r1
     298:	69 f1       	breq	.+90     	; 0x2f4 <socketHandler+0x80>
     29a:	87 30       	cpi	r24, 0x07	; 7
     29c:	91 05       	cpc	r25, r1
     29e:	f1 f0       	breq	.+60     	; 0x2dc <socketHandler+0x68>
     2a0:	05 97       	sbiw	r24, 0x05	; 5
     2a2:	09 f0       	breq	.+2      	; 0x2a6 <socketHandler+0x32>
			
			break;
		}

		default:
		break;
     2a4:	74 c0       	rjmp	.+232    	; 0x38e <socketHandler+0x11a>
	switch (u8Msg) {
		
		/* Socket connected */
		case SOCKET_MSG_CONNECT:
		{
			tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
     2a6:	89 85       	ldd	r24, Y+9	; 0x09
     2a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     2aa:	8b 83       	std	Y+3, r24	; 0x03
     2ac:	9c 83       	std	Y+4, r25	; 0x04
			if (pstrConnect && pstrConnect->s8Error >= 0) {
     2ae:	8b 81       	ldd	r24, Y+3	; 0x03
     2b0:	9c 81       	ldd	r25, Y+4	; 0x04
     2b2:	89 2b       	or	r24, r25
     2b4:	59 f0       	breq	.+22     	; 0x2cc <socketHandler+0x58>
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	9c 81       	ldd	r25, Y+4	; 0x04
     2ba:	fc 01       	movw	r30, r24
     2bc:	81 81       	ldd	r24, Z+1	; 0x01
     2be:	88 23       	and	r24, r24
     2c0:	2c f0       	brlt	.+10     	; 0x2cc <socketHandler+0x58>
				
				/* socket_cb: connect success! */
				//send(tcp_client_socket, &msg_wifi_product, sizeof(t_msg_wifi_product), 0);
				socket_connected = 1;
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	80 93 0f 28 	sts	0x280F, r24	; 0x80280f <socket_connected>
				asm("NOP");
     2c8:	00 00       	nop
				/* socket_cb: connect error! */
				close(tcp_client_socket);
				tcp_client_socket = -1;
				
			}
			break;
     2ca:	61 c0       	rjmp	.+194    	; 0x38e <socketHandler+0x11a>
				asm("NOP");
				
				} else {
				
				/* socket_cb: connect error! */
				close(tcp_client_socket);
     2cc:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__data_start>
     2d0:	0e 94 cb 39 	call	0x7396	; 0x7396 <close>
				tcp_client_socket = -1;
     2d4:	8f ef       	ldi	r24, 0xFF	; 255
     2d6:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__data_start>
				
			}
			break;
     2da:	59 c0       	rjmp	.+178    	; 0x38e <socketHandler+0x11a>

		/* Message send */
		case SOCKET_MSG_SEND:
		{
			/* socket_cb: send success! */
			recv(tcp_client_socket, recv_buff, BUFF_SIZE, 0);
     2dc:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__data_start>
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	98 01       	movw	r18, r16
     2e6:	42 e3       	ldi	r20, 0x32	; 50
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	6e e2       	ldi	r22, 0x2E	; 46
     2ec:	78 e2       	ldi	r23, 0x28	; 40
     2ee:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <recv>
			
			break;
     2f2:	4d c0       	rjmp	.+154    	; 0x38e <socketHandler+0x11a>
		
		/* Message receive */
		case SOCKET_MSG_RECV:
		{
			
			tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
     2f4:	89 85       	ldd	r24, Y+9	; 0x09
     2f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     2f8:	8d 83       	std	Y+5, r24	; 0x05
     2fa:	9e 83       	std	Y+6, r25	; 0x06
			
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
     2fc:	8d 81       	ldd	r24, Y+5	; 0x05
     2fe:	9e 81       	ldd	r25, Y+6	; 0x06
     300:	89 2b       	or	r24, r25
     302:	e1 f1       	breq	.+120    	; 0x37c <socketHandler+0x108>
     304:	8d 81       	ldd	r24, Y+5	; 0x05
     306:	9e 81       	ldd	r25, Y+6	; 0x06
     308:	fc 01       	movw	r30, r24
     30a:	82 81       	ldd	r24, Z+2	; 0x02
     30c:	93 81       	ldd	r25, Z+3	; 0x03
     30e:	18 16       	cp	r1, r24
     310:	19 06       	cpc	r1, r25
     312:	a4 f5       	brge	.+104    	; 0x37c <socketHandler+0x108>
				
				/* socket_cb: recv success! */
				/* TCP Client Test Complete! */
				asm("NOP");
     314:	00 00       	nop
				
				for(uint16_t idx = 0; idx < pstrRecv->s16BufferSize; idx++) {
     316:	19 82       	std	Y+1, r1	; 0x01
     318:	1a 82       	std	Y+2, r1	; 0x02
     31a:	12 c0       	rjmp	.+36     	; 0x340 <socketHandler+0xcc>
					USART_0_write(pstrRecv->pu8Buffer[idx]);
     31c:	8d 81       	ldd	r24, Y+5	; 0x05
     31e:	9e 81       	ldd	r25, Y+6	; 0x06
     320:	fc 01       	movw	r30, r24
     322:	20 81       	ld	r18, Z
     324:	31 81       	ldd	r19, Z+1	; 0x01
     326:	89 81       	ldd	r24, Y+1	; 0x01
     328:	9a 81       	ldd	r25, Y+2	; 0x02
     32a:	82 0f       	add	r24, r18
     32c:	93 1f       	adc	r25, r19
     32e:	fc 01       	movw	r30, r24
     330:	80 81       	ld	r24, Z
     332:	0e 94 cd 10 	call	0x219a	; 0x219a <USART_0_write>
				
				/* socket_cb: recv success! */
				/* TCP Client Test Complete! */
				asm("NOP");
				
				for(uint16_t idx = 0; idx < pstrRecv->s16BufferSize; idx++) {
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	89 83       	std	Y+1, r24	; 0x01
     33e:	9a 83       	std	Y+2, r25	; 0x02
     340:	8d 81       	ldd	r24, Y+5	; 0x05
     342:	9e 81       	ldd	r25, Y+6	; 0x06
     344:	fc 01       	movw	r30, r24
     346:	82 81       	ldd	r24, Z+2	; 0x02
     348:	93 81       	ldd	r25, Z+3	; 0x03
     34a:	9c 01       	movw	r18, r24
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	9a 81       	ldd	r25, Y+2	; 0x02
     350:	82 17       	cp	r24, r18
     352:	93 07       	cpc	r25, r19
     354:	18 f3       	brcs	.-58     	; 0x31c <socketHandler+0xa8>
					USART_0_write(pstrRecv->pu8Buffer[idx]);
				}
				
				if(pstrRecv->u16RemainingSize > 0)
     356:	8d 81       	ldd	r24, Y+5	; 0x05
     358:	9e 81       	ldd	r25, Y+6	; 0x06
     35a:	fc 01       	movw	r30, r24
     35c:	84 81       	ldd	r24, Z+4	; 0x04
     35e:	95 81       	ldd	r25, Z+5	; 0x05
     360:	89 2b       	or	r24, r25
     362:	a1 f0       	breq	.+40     	; 0x38c <socketHandler+0x118>
					recv(tcp_client_socket, recv_buff, BUFF_SIZE, 0);
     364:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__data_start>
     368:	00 e0       	ldi	r16, 0x00	; 0
     36a:	10 e0       	ldi	r17, 0x00	; 0
     36c:	98 01       	movw	r18, r16
     36e:	42 e3       	ldi	r20, 0x32	; 50
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	6e e2       	ldi	r22, 0x2E	; 46
     374:	78 e2       	ldi	r23, 0x28	; 40
     376:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <recv>
				
				for(uint16_t idx = 0; idx < pstrRecv->s16BufferSize; idx++) {
					USART_0_write(pstrRecv->pu8Buffer[idx]);
				}
				
				if(pstrRecv->u16RemainingSize > 0)
     37a:	08 c0       	rjmp	.+16     	; 0x38c <socketHandler+0x118>
					recv(tcp_client_socket, recv_buff, BUFF_SIZE, 0);
					
				} else {
				
				/* socket_cb: recv error! */
				close(tcp_client_socket);
     37c:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__data_start>
     380:	0e 94 cb 39 	call	0x7396	; 0x7396 <close>
				tcp_client_socket = -1;
     384:	8f ef       	ldi	r24, 0xFF	; 255
     386:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__data_start>
				
			}
			
			break;
     38a:	00 c0       	rjmp	.+0      	; 0x38c <socketHandler+0x118>
     38c:	00 00       	nop
		}

		default:
		break;
	}
}
     38e:	00 00       	nop
     390:	2a 96       	adiw	r28, 0x0a	; 10
     392:	cd bf       	out	0x3d, r28	; 61
     394:	de bf       	out	0x3e, r29	; 62
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	08 95       	ret

000003a0 <wifiHandler>:

void wifiHandler(uint8_t u8MsgType, void *pvMsg) {
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
     3ac:	25 97       	sbiw	r28, 0x05	; 5
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	de bf       	out	0x3e, r29	; 62
     3b2:	8b 83       	std	Y+3, r24	; 0x03
     3b4:	6c 83       	std	Y+4, r22	; 0x04
     3b6:	7d 83       	std	Y+5, r23	; 0x05

	
	switch (u8MsgType) {
     3b8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ba:	88 2f       	mov	r24, r24
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	8c 32       	cpi	r24, 0x2C	; 44
     3c0:	91 05       	cpc	r25, r1
     3c2:	19 f0       	breq	.+6      	; 0x3ca <wifiHandler+0x2a>
     3c4:	c2 97       	sbiw	r24, 0x32	; 50
     3c6:	09 f1       	breq	.+66     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			break;
		}

		default:
		{
			break;
     3c8:	26 c0       	rjmp	.+76     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

	
	switch (u8MsgType) {
		case M2M_WIFI_RESP_CON_STATE_CHANGED:
		{
			tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
     3ca:	8c 81       	ldd	r24, Y+4	; 0x04
     3cc:	9d 81       	ldd	r25, Y+5	; 0x05
     3ce:	89 83       	std	Y+1, r24	; 0x01
     3d0:	9a 83       	std	Y+2, r25	; 0x02
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	9a 81       	ldd	r25, Y+2	; 0x02
     3d6:	fc 01       	movw	r30, r24
     3d8:	80 81       	ld	r24, Z
     3da:	81 30       	cpi	r24, 0x01	; 1
     3dc:	19 f4       	brne	.+6      	; 0x3e4 <wifiHandler+0x44>
				//printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
				m2m_wifi_request_dhcp_client();
     3de:	0e 94 80 21 	call	0x4300	; 0x4300 <m2m_wifi_request_dhcp_client>
				//printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
				wifi_connected = 0;
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}

			break;
     3e2:	18 c0       	rjmp	.+48     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		{
			tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
				//printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
				m2m_wifi_request_dhcp_client();
			} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	9a 81       	ldd	r25, Y+2	; 0x02
     3e8:	fc 01       	movw	r30, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	88 23       	and	r24, r24
     3ee:	91 f4       	brne	.+36     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
				//printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
				wifi_connected = 0;
     3f0:	10 92 0e 28 	sts	0x280E, r1	; 0x80280e <__data_end>
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
     3f4:	0f ef       	ldi	r16, 0xFF	; 255
     3f6:	10 e0       	ldi	r17, 0x00	; 0
     3f8:	2e ea       	ldi	r18, 0xAE	; 174
     3fa:	3f eb       	ldi	r19, 0xBF	; 191
     3fc:	42 e0       	ldi	r20, 0x02	; 2
     3fe:	69 e0       	ldi	r22, 0x09	; 9
     400:	88 eb       	ldi	r24, 0xB8	; 184
     402:	9f eb       	ldi	r25, 0xBF	; 191
     404:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <m2m_wifi_connect>
			}

			break;
     408:	05 c0       	rjmp	.+10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		}

		case M2M_WIFI_REQ_DHCP_CONF:
		{
			//uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
			wifi_connected = 1;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <__data_end>
			asm("NOP");
     410:	00 00       	nop
			//printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
			//pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
			break;
     412:	01 c0       	rjmp	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				//printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
				wifi_connected = 0;
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}

			break;
     414:	00 00       	nop
		default:
		{
			break;
		}
	}
}
     416:	00 00       	nop
     418:	25 96       	adiw	r28, 0x05	; 5
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	08 95       	ret

00000428 <main>:

int main(void)
{	
     428:	af 92       	push	r10
     42a:	bf 92       	push	r11
     42c:	cf 92       	push	r12
     42e:	df 92       	push	r13
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	cd b7       	in	r28, 0x3d	; 61
     43e:	de b7       	in	r29, 0x3e	; 62
     440:	ca 58       	subi	r28, 0x8A	; 138
     442:	d1 09       	sbc	r29, r1
     444:	cd bf       	out	0x3d, r28	; 61
     446:	de bf       	out	0x3e, r29	; 62
	char buff[BUFFSIZE];
	volatile uint8_t code;
	volatile search_return ret_code;
	
	bool test = true;
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	8a 83       	std	Y+2, r24	; 0x02
	bool hmm = false;
     44c:	19 82       	std	Y+1, r1	; 0x01
	volatile adc_result_t res = 0;
     44e:	ce 01       	movw	r24, r28
     450:	85 59       	subi	r24, 0x95	; 149
     452:	9f 4f       	sbci	r25, 0xFF	; 255
     454:	fc 01       	movw	r30, r24
     456:	10 82       	st	Z, r1
     458:	11 82       	std	Z+1, r1	; 0x01
	struct sockaddr_in addr;
	int8_t ret;
	
	
	ENABLE_INTERRUPTS();
     45a:	78 94       	sei
	atmel_start_init();
     45c:	0e 94 05 01 	call	0x20a	; 0x20a <atmel_start_init>
	ADC_0_enable();
     460:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ADC_0_enable>
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	aa e7       	ldi	r26, 0x7A	; 122
     46a:	b4 e4       	ldi	r27, 0x44	; 68
     46c:	89 8f       	std	Y+25, r24	; 0x19
     46e:	9a 8f       	std	Y+26, r25	; 0x1a
     470:	ab 8f       	std	Y+27, r26	; 0x1b
     472:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	30 e4       	ldi	r19, 0x40	; 64
     478:	4c e1       	ldi	r20, 0x1C	; 28
     47a:	55 e4       	ldi	r21, 0x45	; 69
     47c:	69 8d       	ldd	r22, Y+25	; 0x19
     47e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     480:	8b 8d       	ldd	r24, Y+27	; 0x1b
     482:	9c 8d       	ldd	r25, Y+28	; 0x1c
     484:	0e 94 1e 3c 	call	0x783c	; 0x783c <__mulsf3>
     488:	dc 01       	movw	r26, r24
     48a:	cb 01       	movw	r24, r22
     48c:	8d 8f       	std	Y+29, r24	; 0x1d
     48e:	9e 8f       	std	Y+30, r25	; 0x1e
     490:	af 8f       	std	Y+31, r26	; 0x1f
     492:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e8       	ldi	r20, 0x80	; 128
     49a:	5f e3       	ldi	r21, 0x3F	; 63
     49c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     49e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     4a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     4a2:	98 a1       	ldd	r25, Y+32	; 0x20
     4a4:	0e 94 98 3b 	call	0x7730	; 0x7730 <__cmpsf2>
     4a8:	88 23       	and	r24, r24
     4aa:	2c f4       	brge	.+10     	; 0x4b6 <main+0x8e>
		__ticks = 1;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	89 a3       	std	Y+33, r24	; 0x21
     4b2:	9a a3       	std	Y+34, r25	; 0x22
     4b4:	3f c0       	rjmp	.+126    	; 0x534 <main+0x10c>
	else if (__tmp > 65535)
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	3f ef       	ldi	r19, 0xFF	; 255
     4ba:	4f e7       	ldi	r20, 0x7F	; 127
     4bc:	57 e4       	ldi	r21, 0x47	; 71
     4be:	6d 8d       	ldd	r22, Y+29	; 0x1d
     4c0:	7e 8d       	ldd	r23, Y+30	; 0x1e
     4c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     4c4:	98 a1       	ldd	r25, Y+32	; 0x20
     4c6:	0e 94 19 3c 	call	0x7832	; 0x7832 <__gesf2>
     4ca:	18 16       	cp	r1, r24
     4cc:	4c f5       	brge	.+82     	; 0x520 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	40 e2       	ldi	r20, 0x20	; 32
     4d4:	51 e4       	ldi	r21, 0x41	; 65
     4d6:	69 8d       	ldd	r22, Y+25	; 0x19
     4d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     4da:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4de:	0e 94 1e 3c 	call	0x783c	; 0x783c <__mulsf3>
     4e2:	dc 01       	movw	r26, r24
     4e4:	cb 01       	movw	r24, r22
     4e6:	bc 01       	movw	r22, r24
     4e8:	cd 01       	movw	r24, r26
     4ea:	0e 94 9d 3b 	call	0x773a	; 0x773a <__fixunssfsi>
     4ee:	dc 01       	movw	r26, r24
     4f0:	cb 01       	movw	r24, r22
     4f2:	89 a3       	std	Y+33, r24	; 0x21
     4f4:	9a a3       	std	Y+34, r25	; 0x22
     4f6:	0f c0       	rjmp	.+30     	; 0x516 <main+0xee>
     4f8:	8a ef       	ldi	r24, 0xFA	; 250
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	8b a3       	std	Y+35, r24	; 0x23
     4fe:	9c a3       	std	Y+36, r25	; 0x24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     500:	8b a1       	ldd	r24, Y+35	; 0x23
     502:	9c a1       	ldd	r25, Y+36	; 0x24
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <main+0xdc>
     508:	8b a3       	std	Y+35, r24	; 0x23
     50a:	9c a3       	std	Y+36, r25	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     50c:	89 a1       	ldd	r24, Y+33	; 0x21
     50e:	9a a1       	ldd	r25, Y+34	; 0x22
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	89 a3       	std	Y+33, r24	; 0x21
     514:	9a a3       	std	Y+34, r25	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     516:	89 a1       	ldd	r24, Y+33	; 0x21
     518:	9a a1       	ldd	r25, Y+34	; 0x22
     51a:	89 2b       	or	r24, r25
     51c:	69 f7       	brne	.-38     	; 0x4f8 <main+0xd0>
     51e:	14 c0       	rjmp	.+40     	; 0x548 <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     520:	6d 8d       	ldd	r22, Y+29	; 0x1d
     522:	7e 8d       	ldd	r23, Y+30	; 0x1e
     524:	8f 8d       	ldd	r24, Y+31	; 0x1f
     526:	98 a1       	ldd	r25, Y+32	; 0x20
     528:	0e 94 9d 3b 	call	0x773a	; 0x773a <__fixunssfsi>
     52c:	dc 01       	movw	r26, r24
     52e:	cb 01       	movw	r24, r22
     530:	89 a3       	std	Y+33, r24	; 0x21
     532:	9a a3       	std	Y+34, r25	; 0x22
     534:	89 a1       	ldd	r24, Y+33	; 0x21
     536:	9a a1       	ldd	r25, Y+34	; 0x22
     538:	8d a3       	std	Y+37, r24	; 0x25
     53a:	9e a3       	std	Y+38, r25	; 0x26
     53c:	8d a1       	ldd	r24, Y+37	; 0x25
     53e:	9e a1       	ldd	r25, Y+38	; 0x26
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <main+0x118>
     544:	8d a3       	std	Y+37, r24	; 0x25
     546:	9e a3       	std	Y+38, r25	; 0x26

	_delay_ms(1000);
	
	/* Verify connection with fingerprint sensor */
	bool verify = send_handshake();
     548:	0e 94 48 0b 	call	0x1690	; 0x1690 <send_handshake>
     54c:	8f 83       	std	Y+7, r24	; 0x07
	
	if(!verify) {
     54e:	9f 81       	ldd	r25, Y+7	; 0x07
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	89 27       	eor	r24, r25
     554:	88 23       	and	r24, r24
     556:	09 f0       	breq	.+2      	; 0x55a <main+0x132>
		/* The connection with finger sensor failed */
		while (1);
     558:	ff cf       	rjmp	.-2      	; 0x558 <main+0x130>
	}
	
	//uart_puts("Passed!");
	
	nm_bsp_init();
     55a:	0e 94 4f 13 	call	0x269e	; 0x269e <nm_bsp_init>
	tstrWifiInitParam param;
	param.pfAppWifiCb = wifiHandler;
     55e:	ce 01       	movw	r24, r28
     560:	83 58       	subi	r24, 0x83	; 131
     562:	9f 4f       	sbci	r25, 0xFF	; 255
     564:	20 ed       	ldi	r18, 0xD0	; 208
     566:	31 e0       	ldi	r19, 0x01	; 1
     568:	fc 01       	movw	r30, r24
     56a:	20 83       	st	Z, r18
     56c:	31 83       	std	Z+1, r19	; 0x01
	
	
	if (M2M_SUCCESS != m2m_wifi_init(&param)) {
     56e:	ce 01       	movw	r24, r28
     570:	83 58       	subi	r24, 0x83	; 131
     572:	9f 4f       	sbci	r25, 0xFF	; 255
     574:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <m2m_wifi_init>
     578:	88 23       	and	r24, r24
     57a:	09 f0       	breq	.+2      	; 0x57e <main+0x156>
		while (1);
     57c:	ff cf       	rjmp	.-2      	; 0x57c <main+0x154>
	}

	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
     57e:	ce 01       	movw	r24, r28
     580:	83 59       	subi	r24, 0x93	; 147
     582:	9f 4f       	sbci	r25, 0xFF	; 255
     584:	22 e0       	ldi	r18, 0x02	; 2
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	fc 01       	movw	r30, r24
     58a:	20 83       	st	Z, r18
     58c:	31 83       	std	Z+1, r19	; 0x01
	addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
     58e:	ce 01       	movw	r24, r28
     590:	83 59       	subi	r24, 0x93	; 147
     592:	9f 4f       	sbci	r25, 0xFF	; 255
     594:	23 e2       	ldi	r18, 0x23	; 35
     596:	38 e2       	ldi	r19, 0x28	; 40
     598:	fc 01       	movw	r30, r24
     59a:	22 83       	std	Z+2, r18	; 0x02
     59c:	33 83       	std	Z+3, r19	; 0x03
	addr.sin_addr.s_addr = _htonl(MAIN_WIFI_M2M_SERVER_IP);
     59e:	9e 01       	movw	r18, r28
     5a0:	23 59       	subi	r18, 0x93	; 147
     5a2:	3f 4f       	sbci	r19, 0xFF	; 255
     5a4:	80 ec       	ldi	r24, 0xC0	; 192
     5a6:	98 ea       	ldi	r25, 0xA8	; 168
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b3 e3       	ldi	r27, 0x33	; 51
     5ac:	f9 01       	movw	r30, r18
     5ae:	84 83       	std	Z+4, r24	; 0x04
     5b0:	95 83       	std	Z+5, r25	; 0x05
     5b2:	a6 83       	std	Z+6, r26	; 0x06
     5b4:	b7 83       	std	Z+7, r27	; 0x07

	socketInit();
     5b6:	0e 94 77 36 	call	0x6cee	; 0x6cee <socketInit>
	registerSocketCallback(socketHandler, NULL);
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	8a e3       	ldi	r24, 0x3A	; 58
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 98 36 	call	0x6d30	; 0x6d30 <registerSocketCallback>

	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
     5c6:	0f ef       	ldi	r16, 0xFF	; 255
     5c8:	10 e0       	ldi	r17, 0x00	; 0
     5ca:	2e ea       	ldi	r18, 0xAE	; 174
     5cc:	3f eb       	ldi	r19, 0xBF	; 191
     5ce:	42 e0       	ldi	r20, 0x02	; 2
     5d0:	69 e0       	ldi	r22, 0x09	; 9
     5d2:	88 eb       	ldi	r24, 0xB8	; 184
     5d4:	9f eb       	ldi	r25, 0xBF	; 191
     5d6:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <m2m_wifi_connect>
			MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);

	while (1) {
		m2m_wifi_handle_events(NULL);
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <m2m_wifi_handle_events>
		
		if (wifi_connected == M2M_WIFI_CONNECTED) {
     5e2:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <__data_end>
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	c1 f7       	brne	.-16     	; 0x5da <main+0x1b2>
			/* Open client socket. */
			if (tcp_client_socket < 0) {
     5ea:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__data_start>
     5ee:	88 23       	and	r24, r24
     5f0:	14 f5       	brge	.+68     	; 0x636 <main+0x20e>
				
				if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
     5f2:	40 e0       	ldi	r20, 0x00	; 0
     5f4:	61 e0       	ldi	r22, 0x01	; 1
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 b5 36 	call	0x6d6a	; 0x6d6a <socket>
     5fe:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__data_start>
     602:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__data_start>
     606:	88 23       	and	r24, r24
     608:	0c f4       	brge	.+2      	; 0x60c <main+0x1e4>
     60a:	db c4       	rjmp	.+2486   	; 0xfc2 <main+0xb9a>
					//printf("main: failed to create TCP client socket error!\r\n");
					continue;
				}

				/* Connect server */
				ret = connect(tcp_client_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
     60c:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__data_start>
     610:	ce 01       	movw	r24, r28
     612:	83 59       	subi	r24, 0x93	; 147
     614:	9f 4f       	sbci	r25, 0xFF	; 255
     616:	40 e1       	ldi	r20, 0x10	; 16
     618:	bc 01       	movw	r22, r24
     61a:	82 2f       	mov	r24, r18
     61c:	0e 94 97 37 	call	0x6f2e	; 0x6f2e <connect>
     620:	88 87       	std	Y+8, r24	; 0x08
				
				if (ret < 0) {
     622:	88 85       	ldd	r24, Y+8	; 0x08
     624:	88 23       	and	r24, r24
     626:	3c f4       	brge	.+14     	; 0x636 <main+0x20e>
					close(tcp_client_socket);
     628:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__data_start>
     62c:	0e 94 cb 39 	call	0x7396	; 0x7396 <close>
					tcp_client_socket = -1;
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__data_start>
				
				
			}
			
			
			if (socket_connected) {
     636:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <socket_connected>
     63a:	88 23       	and	r24, r24
     63c:	71 f2       	breq	.-100    	; 0x5da <main+0x1b2>
					////while (!SW0_get_level());
					//_delay_ms(1000);
				//}
				
				
				asm("NOP");
     63e:	00 00       	nop
				if(!SW0_get_level()) {
     640:	0e 94 30 01 	call	0x260	; 0x260 <SW0_get_level>
     644:	98 2f       	mov	r25, r24
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	89 27       	eor	r24, r25
     64a:	88 23       	and	r24, r24
     64c:	31 f2       	breq	.-116    	; 0x5da <main+0x1b2>
					memset(buff, 0, BUFFSIZE);
     64e:	ce 01       	movw	r24, r28
     650:	87 5a       	subi	r24, 0xA7	; 167
     652:	9f 4f       	sbci	r25, 0xFF	; 255
     654:	4c e0       	ldi	r20, 0x0C	; 12
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	0e 94 e1 3c 	call	0x79c2	; 0x79c2 <memset>
					
					code = img();
     660:	0e 94 ed 0b 	call	0x17da	; 0x17da <img>
     664:	28 2f       	mov	r18, r24
     666:	ce 01       	movw	r24, r28
     668:	8b 59       	subi	r24, 0x9B	; 155
     66a:	9f 4f       	sbci	r25, 0xFF	; 255
     66c:	fc 01       	movw	r30, r24
     66e:	20 83       	st	Z, r18
					if(code != 0) {
     670:	ce 01       	movw	r24, r28
     672:	8b 59       	subi	r24, 0x9B	; 155
     674:	9f 4f       	sbci	r25, 0xFF	; 255
     676:	fc 01       	movw	r30, r24
     678:	80 81       	ld	r24, Z
     67a:	88 23       	and	r24, r24
     67c:	e9 f0       	breq	.+58     	; 0x6b8 <main+0x290>
						sprintf(buff, "Error while reading your fingerprint...\nPlease try again. Hold the finger on the sensor and press SW0.\n");
     67e:	ce 01       	movw	r24, r28
     680:	87 5a       	subi	r24, 0xA7	; 167
     682:	9f 4f       	sbci	r25, 0xFF	; 255
     684:	28 e6       	ldi	r18, 0x68	; 104
     686:	e1 ec       	ldi	r30, 0xC1	; 193
     688:	ff eb       	ldi	r31, 0xBF	; 191
     68a:	dc 01       	movw	r26, r24
     68c:	01 90       	ld	r0, Z+
     68e:	0d 92       	st	X+, r0
     690:	2a 95       	dec	r18
     692:	e1 f7       	brne	.-8      	; 0x68c <main+0x264>
						
						send(tcp_client_socket, buff, strlen(buff), 0);
     694:	ce 01       	movw	r24, r28
     696:	87 5a       	subi	r24, 0xA7	; 167
     698:	9f 4f       	sbci	r25, 0xFF	; 255
     69a:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <strlen>
     69e:	ac 01       	movw	r20, r24
     6a0:	e0 91 00 28 	lds	r30, 0x2800	; 0x802800 <__data_start>
     6a4:	ce 01       	movw	r24, r28
     6a6:	87 5a       	subi	r24, 0xA7	; 167
     6a8:	9f 4f       	sbci	r25, 0xFF	; 255
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	bc 01       	movw	r22, r24
     6b0:	8e 2f       	mov	r24, r30
     6b2:	0e 94 2e 38 	call	0x705c	; 0x705c <send>
     6b6:	cc c3       	rjmp	.+1944   	; 0xe50 <main+0xa28>
					} else {
						code = img_to_tz(0x01);
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	0e 94 8c 0c 	call	0x1918	; 0x1918 <img_to_tz>
     6be:	28 2f       	mov	r18, r24
     6c0:	ce 01       	movw	r24, r28
     6c2:	8b 59       	subi	r24, 0x9B	; 155
     6c4:	9f 4f       	sbci	r25, 0xFF	; 255
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 83       	st	Z, r18
						
						if(code != 0) {
     6ca:	ce 01       	movw	r24, r28
     6cc:	8b 59       	subi	r24, 0x9B	; 155
     6ce:	9f 4f       	sbci	r25, 0xFF	; 255
     6d0:	fc 01       	movw	r30, r24
     6d2:	80 81       	ld	r24, Z
     6d4:	88 23       	and	r24, r24
     6d6:	e9 f0       	breq	.+58     	; 0x712 <main+0x2ea>
							sprintf(buff, "Error while processing your fingerprint...\nPlease try again. Hold the finger on the sensor and press SW0.\n");
     6d8:	ce 01       	movw	r24, r28
     6da:	87 5a       	subi	r24, 0xA7	; 167
     6dc:	9f 4f       	sbci	r25, 0xFF	; 255
     6de:	2b e6       	ldi	r18, 0x6B	; 107
     6e0:	e9 e2       	ldi	r30, 0x29	; 41
     6e2:	f0 ec       	ldi	r31, 0xC0	; 192
     6e4:	dc 01       	movw	r26, r24
     6e6:	01 90       	ld	r0, Z+
     6e8:	0d 92       	st	X+, r0
     6ea:	2a 95       	dec	r18
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <main+0x2be>
							send(tcp_client_socket, buff, strlen(buff), 0);
     6ee:	ce 01       	movw	r24, r28
     6f0:	87 5a       	subi	r24, 0xA7	; 167
     6f2:	9f 4f       	sbci	r25, 0xFF	; 255
     6f4:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <strlen>
     6f8:	ac 01       	movw	r20, r24
     6fa:	e0 91 00 28 	lds	r30, 0x2800	; 0x802800 <__data_start>
     6fe:	ce 01       	movw	r24, r28
     700:	87 5a       	subi	r24, 0xA7	; 167
     702:	9f 4f       	sbci	r25, 0xFF	; 255
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	bc 01       	movw	r22, r24
     70a:	8e 2f       	mov	r24, r30
     70c:	0e 94 2e 38 	call	0x705c	; 0x705c <send>
     710:	9f c3       	rjmp	.+1854   	; 0xe50 <main+0xa28>
							} else {
							ret_code = search_library(0x01, 0, 10);
     712:	4a e0       	ldi	r20, 0x0A	; 10
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <search_library>
     720:	a2 2e       	mov	r10, r18
     722:	b3 2e       	mov	r11, r19
     724:	c4 2e       	mov	r12, r20
     726:	d5 2e       	mov	r13, r21
     728:	e6 2e       	mov	r14, r22
     72a:	f7 2e       	mov	r15, r23
     72c:	08 2f       	mov	r16, r24
     72e:	19 2f       	mov	r17, r25
     730:	2a 2d       	mov	r18, r10
     732:	3b 2d       	mov	r19, r11
     734:	4c 2d       	mov	r20, r12
     736:	5d 2d       	mov	r21, r13
     738:	6e 2d       	mov	r22, r14
     73a:	7f 2d       	mov	r23, r15
     73c:	80 2f       	mov	r24, r16
     73e:	91 2f       	mov	r25, r17
     740:	fe 01       	movw	r30, r28
     742:	ea 59       	subi	r30, 0x9A	; 154
     744:	ff 4f       	sbci	r31, 0xFF	; 255
     746:	20 83       	st	Z, r18
     748:	31 83       	std	Z+1, r19	; 0x01
     74a:	42 83       	std	Z+2, r20	; 0x02
     74c:	53 83       	std	Z+3, r21	; 0x03
     74e:	64 83       	std	Z+4, r22	; 0x04
							if(ret_code.confirmation_code != 0){
     750:	ce 01       	movw	r24, r28
     752:	8a 59       	subi	r24, 0x9A	; 154
     754:	9f 4f       	sbci	r25, 0xFF	; 255
     756:	fc 01       	movw	r30, r24
     758:	80 81       	ld	r24, Z
     75a:	88 23       	and	r24, r24
     75c:	09 f4       	brne	.+2      	; 0x760 <main+0x338>
     75e:	55 c0       	rjmp	.+170    	; 0x80a <main+0x3e2>
								if(ret_code.confirmation_code == 9) {
     760:	ce 01       	movw	r24, r28
     762:	8a 59       	subi	r24, 0x9A	; 154
     764:	9f 4f       	sbci	r25, 0xFF	; 255
     766:	fc 01       	movw	r30, r24
     768:	80 81       	ld	r24, Z
     76a:	89 30       	cpi	r24, 0x09	; 9
     76c:	e9 f4       	brne	.+58     	; 0x7a8 <main+0x380>
									sprintf(buff, "Go away, I don't know you! :|\n");
     76e:	ce 01       	movw	r24, r28
     770:	87 5a       	subi	r24, 0xA7	; 167
     772:	9f 4f       	sbci	r25, 0xFF	; 255
     774:	2f e1       	ldi	r18, 0x1F	; 31
     776:	e4 e9       	ldi	r30, 0x94	; 148
     778:	f0 ec       	ldi	r31, 0xC0	; 192
     77a:	dc 01       	movw	r26, r24
     77c:	01 90       	ld	r0, Z+
     77e:	0d 92       	st	X+, r0
     780:	2a 95       	dec	r18
     782:	e1 f7       	brne	.-8      	; 0x77c <main+0x354>
									send(tcp_client_socket, buff, strlen(buff), 0);
     784:	ce 01       	movw	r24, r28
     786:	87 5a       	subi	r24, 0xA7	; 167
     788:	9f 4f       	sbci	r25, 0xFF	; 255
     78a:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <strlen>
     78e:	ac 01       	movw	r20, r24
     790:	e0 91 00 28 	lds	r30, 0x2800	; 0x802800 <__data_start>
     794:	ce 01       	movw	r24, r28
     796:	87 5a       	subi	r24, 0xA7	; 167
     798:	9f 4f       	sbci	r25, 0xFF	; 255
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	bc 01       	movw	r22, r24
     7a0:	8e 2f       	mov	r24, r30
     7a2:	0e 94 2e 38 	call	0x705c	; 0x705c <send>
     7a6:	54 c3       	rjmp	.+1704   	; 0xe50 <main+0xa28>
								} else {
									sprintf(buff, "%i\n", ret_code.confirmation_code);
     7a8:	ce 01       	movw	r24, r28
     7aa:	8a 59       	subi	r24, 0x9A	; 154
     7ac:	9f 4f       	sbci	r25, 0xFF	; 255
     7ae:	fc 01       	movw	r30, r24
     7b0:	80 81       	ld	r24, Z
     7b2:	88 2f       	mov	r24, r24
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	29 2f       	mov	r18, r25
     7b8:	2f 93       	push	r18
     7ba:	8f 93       	push	r24
     7bc:	83 eb       	ldi	r24, 0xB3	; 179
     7be:	90 ec       	ldi	r25, 0xC0	; 192
     7c0:	89 2f       	mov	r24, r25
     7c2:	8f 93       	push	r24
     7c4:	83 eb       	ldi	r24, 0xB3	; 179
     7c6:	90 ec       	ldi	r25, 0xC0	; 192
     7c8:	8f 93       	push	r24
     7ca:	ce 01       	movw	r24, r28
     7cc:	87 5a       	subi	r24, 0xA7	; 167
     7ce:	9f 4f       	sbci	r25, 0xFF	; 255
     7d0:	29 2f       	mov	r18, r25
     7d2:	2f 93       	push	r18
     7d4:	8f 93       	push	r24
     7d6:	0e 94 f1 3c 	call	0x79e2	; 0x79e2 <sprintf>
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
									send(tcp_client_socket, buff, strlen(buff), 0);
     7e6:	ce 01       	movw	r24, r28
     7e8:	87 5a       	subi	r24, 0xA7	; 167
     7ea:	9f 4f       	sbci	r25, 0xFF	; 255
     7ec:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <strlen>
     7f0:	ac 01       	movw	r20, r24
     7f2:	e0 91 00 28 	lds	r30, 0x2800	; 0x802800 <__data_start>
     7f6:	ce 01       	movw	r24, r28
     7f8:	87 5a       	subi	r24, 0xA7	; 167
     7fa:	9f 4f       	sbci	r25, 0xFF	; 255
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	bc 01       	movw	r22, r24
     802:	8e 2f       	mov	r24, r30
     804:	0e 94 2e 38 	call	0x705c	; 0x705c <send>
     808:	23 c3       	rjmp	.+1606   	; 0xe50 <main+0xa28>
								}
							} else {
								
								if(ret_code.page_id == 3) {
     80a:	ce 01       	movw	r24, r28
     80c:	8a 59       	subi	r24, 0x9A	; 154
     80e:	9f 4f       	sbci	r25, 0xFF	; 255
     810:	fc 01       	movw	r30, r24
     812:	81 81       	ldd	r24, Z+1	; 0x01
     814:	92 81       	ldd	r25, Z+2	; 0x02
     816:	03 97       	sbiw	r24, 0x03	; 3
     818:	09 f0       	breq	.+2      	; 0x81c <main+0x3f4>
     81a:	51 c1       	rjmp	.+674    	; 0xabe <main+0x696>
									sprintf(buff, "Hey, Filip!\n");
     81c:	ce 01       	movw	r24, r28
     81e:	87 5a       	subi	r24, 0xA7	; 167
     820:	9f 4f       	sbci	r25, 0xFF	; 255
     822:	2d e0       	ldi	r18, 0x0D	; 13
     824:	e7 eb       	ldi	r30, 0xB7	; 183
     826:	f0 ec       	ldi	r31, 0xC0	; 192
     828:	dc 01       	movw	r26, r24
     82a:	01 90       	ld	r0, Z+
     82c:	0d 92       	st	X+, r0
     82e:	2a 95       	dec	r18
     830:	e1 f7       	brne	.-8      	; 0x82a <main+0x402>
									send(tcp_client_socket, buff, strlen(buff), 0);
     832:	ce 01       	movw	r24, r28
     834:	87 5a       	subi	r24, 0xA7	; 167
     836:	9f 4f       	sbci	r25, 0xFF	; 255
     838:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <strlen>
     83c:	ac 01       	movw	r20, r24
     83e:	e0 91 00 28 	lds	r30, 0x2800	; 0x802800 <__data_start>
     842:	ce 01       	movw	r24, r28
     844:	87 5a       	subi	r24, 0xA7	; 167
     846:	9f 4f       	sbci	r25, 0xFF	; 255
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	bc 01       	movw	r22, r24
     84e:	8e 2f       	mov	r24, r30
     850:	0e 94 2e 38 	call	0x705c	; 0x705c <send>
									hmm = false;
     854:	19 82       	std	Y+1, r1	; 0x01
									
									while(!hmm) {
     856:	2c c1       	rjmp	.+600    	; 0xab0 <main+0x688>
										res = ADC_0_get_conversion(ADC_MUXPOS_AIN6_gc);
     858:	86 e0       	ldi	r24, 0x06	; 6
     85a:	0e 94 36 08 	call	0x106c	; 0x106c <ADC_0_get_conversion>
     85e:	9c 01       	movw	r18, r24
     860:	ce 01       	movw	r24, r28
     862:	85 59       	subi	r24, 0x95	; 149
     864:	9f 4f       	sbci	r25, 0xFF	; 255
     866:	fc 01       	movw	r30, r24
     868:	20 83       	st	Z, r18
     86a:	31 83       	std	Z+1, r19	; 0x01
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	a8 e4       	ldi	r26, 0x48	; 72
     872:	b2 e4       	ldi	r27, 0x42	; 66
     874:	8b 83       	std	Y+3, r24	; 0x03
     876:	9c 83       	std	Y+4, r25	; 0x04
     878:	ad 83       	std	Y+5, r26	; 0x05
     87a:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e4       	ldi	r19, 0x40	; 64
     880:	4c e1       	ldi	r20, 0x1C	; 28
     882:	55 e4       	ldi	r21, 0x45	; 69
     884:	6b 81       	ldd	r22, Y+3	; 0x03
     886:	7c 81       	ldd	r23, Y+4	; 0x04
     888:	8d 81       	ldd	r24, Y+5	; 0x05
     88a:	9e 81       	ldd	r25, Y+6	; 0x06
     88c:	0e 94 1e 3c 	call	0x783c	; 0x783c <__mulsf3>
     890:	dc 01       	movw	r26, r24
     892:	cb 01       	movw	r24, r22
     894:	8f a3       	std	Y+39, r24	; 0x27
     896:	98 a7       	std	Y+40, r25	; 0x28
     898:	a9 a7       	std	Y+41, r26	; 0x29
     89a:	ba a7       	std	Y+42, r27	; 0x2a
	if (__tmp < 1.0)
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	40 e8       	ldi	r20, 0x80	; 128
     8a2:	5f e3       	ldi	r21, 0x3F	; 63
     8a4:	6f a1       	ldd	r22, Y+39	; 0x27
     8a6:	78 a5       	ldd	r23, Y+40	; 0x28
     8a8:	89 a5       	ldd	r24, Y+41	; 0x29
     8aa:	9a a5       	ldd	r25, Y+42	; 0x2a
     8ac:	0e 94 98 3b 	call	0x7730	; 0x7730 <__cmpsf2>
     8b0:	88 23       	and	r24, r24
     8b2:	2c f4       	brge	.+10     	; 0x8be <main+0x496>
		__ticks = 1;
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	8b a7       	std	Y+43, r24	; 0x2b
     8ba:	9c a7       	std	Y+44, r25	; 0x2c
     8bc:	3f c0       	rjmp	.+126    	; 0x93c <main+0x514>
	else if (__tmp > 65535)
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	3f ef       	ldi	r19, 0xFF	; 255
     8c2:	4f e7       	ldi	r20, 0x7F	; 127
     8c4:	57 e4       	ldi	r21, 0x47	; 71
     8c6:	6f a1       	ldd	r22, Y+39	; 0x27
     8c8:	78 a5       	ldd	r23, Y+40	; 0x28
     8ca:	89 a5       	ldd	r24, Y+41	; 0x29
     8cc:	9a a5       	ldd	r25, Y+42	; 0x2a
     8ce:	0e 94 19 3c 	call	0x7832	; 0x7832 <__gesf2>
     8d2:	18 16       	cp	r1, r24
     8d4:	4c f5       	brge	.+82     	; 0x928 <main+0x500>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e2       	ldi	r20, 0x20	; 32
     8dc:	51 e4       	ldi	r21, 0x41	; 65
     8de:	6b 81       	ldd	r22, Y+3	; 0x03
     8e0:	7c 81       	ldd	r23, Y+4	; 0x04
     8e2:	8d 81       	ldd	r24, Y+5	; 0x05
     8e4:	9e 81       	ldd	r25, Y+6	; 0x06
     8e6:	0e 94 1e 3c 	call	0x783c	; 0x783c <__mulsf3>
     8ea:	dc 01       	movw	r26, r24
     8ec:	cb 01       	movw	r24, r22
     8ee:	bc 01       	movw	r22, r24
     8f0:	cd 01       	movw	r24, r26
     8f2:	0e 94 9d 3b 	call	0x773a	; 0x773a <__fixunssfsi>
     8f6:	dc 01       	movw	r26, r24
     8f8:	cb 01       	movw	r24, r22
     8fa:	8b a7       	std	Y+43, r24	; 0x2b
     8fc:	9c a7       	std	Y+44, r25	; 0x2c
     8fe:	0f c0       	rjmp	.+30     	; 0x91e <main+0x4f6>
     900:	8a ef       	ldi	r24, 0xFA	; 250
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	8d a7       	std	Y+45, r24	; 0x2d
     906:	9e a7       	std	Y+46, r25	; 0x2e
     908:	8d a5       	ldd	r24, Y+45	; 0x2d
     90a:	9e a5       	ldd	r25, Y+46	; 0x2e
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <main+0x4e4>
     910:	8d a7       	std	Y+45, r24	; 0x2d
     912:	9e a7       	std	Y+46, r25	; 0x2e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     914:	8b a5       	ldd	r24, Y+43	; 0x2b
     916:	9c a5       	ldd	r25, Y+44	; 0x2c
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	8b a7       	std	Y+43, r24	; 0x2b
     91c:	9c a7       	std	Y+44, r25	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     91e:	8b a5       	ldd	r24, Y+43	; 0x2b
     920:	9c a5       	ldd	r25, Y+44	; 0x2c
     922:	89 2b       	or	r24, r25
     924:	69 f7       	brne	.-38     	; 0x900 <main+0x4d8>
     926:	14 c0       	rjmp	.+40     	; 0x950 <main+0x528>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     928:	6f a1       	ldd	r22, Y+39	; 0x27
     92a:	78 a5       	ldd	r23, Y+40	; 0x28
     92c:	89 a5       	ldd	r24, Y+41	; 0x29
     92e:	9a a5       	ldd	r25, Y+42	; 0x2a
     930:	0e 94 9d 3b 	call	0x773a	; 0x773a <__fixunssfsi>
     934:	dc 01       	movw	r26, r24
     936:	cb 01       	movw	r24, r22
     938:	8b a7       	std	Y+43, r24	; 0x2b
     93a:	9c a7       	std	Y+44, r25	; 0x2c
     93c:	8b a5       	ldd	r24, Y+43	; 0x2b
     93e:	9c a5       	ldd	r25, Y+44	; 0x2c
     940:	8f a7       	std	Y+47, r24	; 0x2f
     942:	98 ab       	std	Y+48, r25	; 0x30
     944:	8f a5       	ldd	r24, Y+47	; 0x2f
     946:	98 a9       	ldd	r25, Y+48	; 0x30
     948:	01 97       	sbiw	r24, 0x01	; 1
     94a:	f1 f7       	brne	.-4      	; 0x948 <main+0x520>
     94c:	8f a7       	std	Y+47, r24	; 0x2f
     94e:	98 ab       	std	Y+48, r25	; 0x30
										//asm("NOP");
										_delay_ms(50);
										memset(send_buff, 0, BUFF_SIZE);
     950:	42 e3       	ldi	r20, 0x32	; 50
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e6       	ldi	r24, 0x60	; 96
     95a:	98 e2       	ldi	r25, 0x28	; 40
     95c:	0e 94 e1 3c 	call	0x79c2	; 0x79c2 <memset>
										sprintf(send_buff, "%i", res);
     960:	ce 01       	movw	r24, r28
     962:	85 59       	subi	r24, 0x95	; 149
     964:	9f 4f       	sbci	r25, 0xFF	; 255
     966:	fc 01       	movw	r30, r24
     968:	80 81       	ld	r24, Z
     96a:	91 81       	ldd	r25, Z+1	; 0x01
     96c:	29 2f       	mov	r18, r25
     96e:	2f 93       	push	r18
     970:	8f 93       	push	r24
     972:	84 ec       	ldi	r24, 0xC4	; 196
     974:	90 ec       	ldi	r25, 0xC0	; 192
     976:	89 2f       	mov	r24, r25
     978:	8f 93       	push	r24
     97a:	84 ec       	ldi	r24, 0xC4	; 196
     97c:	90 ec       	ldi	r25, 0xC0	; 192
     97e:	8f 93       	push	r24
     980:	80 e6       	ldi	r24, 0x60	; 96
     982:	98 e2       	ldi	r25, 0x28	; 40
     984:	89 2f       	mov	r24, r25
     986:	8f 93       	push	r24
     988:	80 e6       	ldi	r24, 0x60	; 96
     98a:	98 e2       	ldi	r25, 0x28	; 40
     98c:	8f 93       	push	r24
     98e:	0e 94 f1 3c 	call	0x79e2	; 0x79e2 <sprintf>
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
									
										send(tcp_client_socket, send_buff, strlen(send_buff), 0);
     99e:	80 e6       	ldi	r24, 0x60	; 96
     9a0:	98 e2       	ldi	r25, 0x28	; 40
     9a2:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <strlen>
     9a6:	e0 91 00 28 	lds	r30, 0x2800	; 0x802800 <__data_start>
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	ac 01       	movw	r20, r24
     9b0:	60 e6       	ldi	r22, 0x60	; 96
     9b2:	78 e2       	ldi	r23, 0x28	; 40
     9b4:	8e 2f       	mov	r24, r30
     9b6:	0e 94 2e 38 	call	0x705c	; 0x705c <send>
										
										if(!SW0_get_level())
     9ba:	0e 94 30 01 	call	0x260	; 0x260 <SW0_get_level>
     9be:	98 2f       	mov	r25, r24
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	89 27       	eor	r24, r25
     9c4:	88 23       	and	r24, r24
     9c6:	11 f0       	breq	.+4      	; 0x9cc <main+0x5a4>
											hmm = true;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	89 83       	std	Y+1, r24	; 0x01
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	aa e7       	ldi	r26, 0x7A	; 122
     9d2:	b4 e4       	ldi	r27, 0x44	; 68
     9d4:	89 87       	std	Y+9, r24	; 0x09
     9d6:	9a 87       	std	Y+10, r25	; 0x0a
     9d8:	ab 87       	std	Y+11, r26	; 0x0b
     9da:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e4       	ldi	r19, 0x40	; 64
     9e0:	4c e1       	ldi	r20, 0x1C	; 28
     9e2:	55 e4       	ldi	r21, 0x45	; 69
     9e4:	69 85       	ldd	r22, Y+9	; 0x09
     9e6:	7a 85       	ldd	r23, Y+10	; 0x0a
     9e8:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ea:	9c 85       	ldd	r25, Y+12	; 0x0c
     9ec:	0e 94 1e 3c 	call	0x783c	; 0x783c <__mulsf3>
     9f0:	dc 01       	movw	r26, r24
     9f2:	cb 01       	movw	r24, r22
     9f4:	89 ab       	std	Y+49, r24	; 0x31
     9f6:	9a ab       	std	Y+50, r25	; 0x32
     9f8:	ab ab       	std	Y+51, r26	; 0x33
     9fa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e8       	ldi	r20, 0x80	; 128
     a02:	5f e3       	ldi	r21, 0x3F	; 63
     a04:	69 a9       	ldd	r22, Y+49	; 0x31
     a06:	7a a9       	ldd	r23, Y+50	; 0x32
     a08:	8b a9       	ldd	r24, Y+51	; 0x33
     a0a:	9c a9       	ldd	r25, Y+52	; 0x34
     a0c:	0e 94 98 3b 	call	0x7730	; 0x7730 <__cmpsf2>
     a10:	88 23       	and	r24, r24
     a12:	2c f4       	brge	.+10     	; 0xa1e <main+0x5f6>
		__ticks = 1;
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	8d ab       	std	Y+53, r24	; 0x35
     a1a:	9e ab       	std	Y+54, r25	; 0x36
     a1c:	3f c0       	rjmp	.+126    	; 0xa9c <main+0x674>
	else if (__tmp > 65535)
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	3f ef       	ldi	r19, 0xFF	; 255
     a22:	4f e7       	ldi	r20, 0x7F	; 127
     a24:	57 e4       	ldi	r21, 0x47	; 71
     a26:	69 a9       	ldd	r22, Y+49	; 0x31
     a28:	7a a9       	ldd	r23, Y+50	; 0x32
     a2a:	8b a9       	ldd	r24, Y+51	; 0x33
     a2c:	9c a9       	ldd	r25, Y+52	; 0x34
     a2e:	0e 94 19 3c 	call	0x7832	; 0x7832 <__gesf2>
     a32:	18 16       	cp	r1, r24
     a34:	4c f5       	brge	.+82     	; 0xa88 <main+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e2       	ldi	r20, 0x20	; 32
     a3c:	51 e4       	ldi	r21, 0x41	; 65
     a3e:	69 85       	ldd	r22, Y+9	; 0x09
     a40:	7a 85       	ldd	r23, Y+10	; 0x0a
     a42:	8b 85       	ldd	r24, Y+11	; 0x0b
     a44:	9c 85       	ldd	r25, Y+12	; 0x0c
     a46:	0e 94 1e 3c 	call	0x783c	; 0x783c <__mulsf3>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	bc 01       	movw	r22, r24
     a50:	cd 01       	movw	r24, r26
     a52:	0e 94 9d 3b 	call	0x773a	; 0x773a <__fixunssfsi>
     a56:	dc 01       	movw	r26, r24
     a58:	cb 01       	movw	r24, r22
     a5a:	8d ab       	std	Y+53, r24	; 0x35
     a5c:	9e ab       	std	Y+54, r25	; 0x36
     a5e:	0f c0       	rjmp	.+30     	; 0xa7e <main+0x656>
     a60:	8a ef       	ldi	r24, 0xFA	; 250
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8f ab       	std	Y+55, r24	; 0x37
     a66:	98 af       	std	Y+56, r25	; 0x38
     a68:	8f a9       	ldd	r24, Y+55	; 0x37
     a6a:	98 ad       	ldd	r25, Y+56	; 0x38
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <main+0x644>
     a70:	8f ab       	std	Y+55, r24	; 0x37
     a72:	98 af       	std	Y+56, r25	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a74:	8d a9       	ldd	r24, Y+53	; 0x35
     a76:	9e a9       	ldd	r25, Y+54	; 0x36
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	8d ab       	std	Y+53, r24	; 0x35
     a7c:	9e ab       	std	Y+54, r25	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a7e:	8d a9       	ldd	r24, Y+53	; 0x35
     a80:	9e a9       	ldd	r25, Y+54	; 0x36
     a82:	89 2b       	or	r24, r25
     a84:	69 f7       	brne	.-38     	; 0xa60 <main+0x638>
     a86:	14 c0       	rjmp	.+40     	; 0xab0 <main+0x688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a88:	69 a9       	ldd	r22, Y+49	; 0x31
     a8a:	7a a9       	ldd	r23, Y+50	; 0x32
     a8c:	8b a9       	ldd	r24, Y+51	; 0x33
     a8e:	9c a9       	ldd	r25, Y+52	; 0x34
     a90:	0e 94 9d 3b 	call	0x773a	; 0x773a <__fixunssfsi>
     a94:	dc 01       	movw	r26, r24
     a96:	cb 01       	movw	r24, r22
     a98:	8d ab       	std	Y+53, r24	; 0x35
     a9a:	9e ab       	std	Y+54, r25	; 0x36
     a9c:	8d a9       	ldd	r24, Y+53	; 0x35
     a9e:	9e a9       	ldd	r25, Y+54	; 0x36
     aa0:	89 af       	std	Y+57, r24	; 0x39
     aa2:	9a af       	std	Y+58, r25	; 0x3a
     aa4:	89 ad       	ldd	r24, Y+57	; 0x39
     aa6:	9a ad       	ldd	r25, Y+58	; 0x3a
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <main+0x680>
     aac:	89 af       	std	Y+57, r24	; 0x39
     aae:	9a af       	std	Y+58, r25	; 0x3a
								if(ret_code.page_id == 3) {
									sprintf(buff, "Hey, Filip!\n");
									send(tcp_client_socket, buff, strlen(buff), 0);
									hmm = false;
									
									while(!hmm) {
     ab0:	99 81       	ldd	r25, Y+1	; 0x01
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	89 27       	eor	r24, r25
     ab6:	88 23       	and	r24, r24
     ab8:	09 f0       	breq	.+2      	; 0xabc <main+0x694>
     aba:	ce ce       	rjmp	.-612    	; 0x858 <main+0x430>
     abc:	c9 c1       	rjmp	.+914    	; 0xe50 <main+0xa28>
										
										_delay_ms(1000);
									}
									
								} else {
									sprintf(buff, "Hey, I don't know you, but you are welcome!\n");
     abe:	ce 01       	movw	r24, r28
     ac0:	87 5a       	subi	r24, 0xA7	; 167
     ac2:	9f 4f       	sbci	r25, 0xFF	; 255
     ac4:	2d e2       	ldi	r18, 0x2D	; 45
     ac6:	e7 ec       	ldi	r30, 0xC7	; 199
     ac8:	f0 ec       	ldi	r31, 0xC0	; 192
     aca:	dc 01       	movw	r26, r24
     acc:	01 90       	ld	r0, Z+
     ace:	0d 92       	st	X+, r0
     ad0:	2a 95       	dec	r18
     ad2:	e1 f7       	brne	.-8      	; 0xacc <main+0x6a4>
									send(tcp_client_socket, buff, strlen(buff), 0);
     ad4:	ce 01       	movw	r24, r28
     ad6:	87 5a       	subi	r24, 0xA7	; 167
     ad8:	9f 4f       	sbci	r25, 0xFF	; 255
     ada:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <strlen>
     ade:	ac 01       	movw	r20, r24
     ae0:	e0 91 00 28 	lds	r30, 0x2800	; 0x802800 <__data_start>
     ae4:	ce 01       	movw	r24, r28
     ae6:	87 5a       	subi	r24, 0xA7	; 167
     ae8:	9f 4f       	sbci	r25, 0xFF	; 255
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	8e 2f       	mov	r24, r30
     af2:	0e 94 2e 38 	call	0x705c	; 0x705c <send>
									hmm = false;
     af6:	19 82       	std	Y+1, r1	; 0x01
									
									while(!hmm) {
     af8:	a5 c1       	rjmp	.+842    	; 0xe44 <main+0xa1c>
										res = ADC_0_get_conversion(ADC_MUXPOS_AIN6_gc);
     afa:	86 e0       	ldi	r24, 0x06	; 6
     afc:	0e 94 36 08 	call	0x106c	; 0x106c <ADC_0_get_conversion>
     b00:	9c 01       	movw	r18, r24
     b02:	ce 01       	movw	r24, r28
     b04:	85 59       	subi	r24, 0x95	; 149
     b06:	9f 4f       	sbci	r25, 0xFF	; 255
     b08:	fc 01       	movw	r30, r24
     b0a:	20 83       	st	Z, r18
     b0c:	31 83       	std	Z+1, r19	; 0x01
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	a8 e4       	ldi	r26, 0x48	; 72
     b14:	b2 e4       	ldi	r27, 0x42	; 66
     b16:	8d 87       	std	Y+13, r24	; 0x0d
     b18:	9e 87       	std	Y+14, r25	; 0x0e
     b1a:	af 87       	std	Y+15, r26	; 0x0f
     b1c:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e4       	ldi	r19, 0x40	; 64
     b22:	4c e1       	ldi	r20, 0x1C	; 28
     b24:	55 e4       	ldi	r21, 0x45	; 69
     b26:	6d 85       	ldd	r22, Y+13	; 0x0d
     b28:	7e 85       	ldd	r23, Y+14	; 0x0e
     b2a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b2c:	98 89       	ldd	r25, Y+16	; 0x10
     b2e:	0e 94 1e 3c 	call	0x783c	; 0x783c <__mulsf3>
     b32:	dc 01       	movw	r26, r24
     b34:	cb 01       	movw	r24, r22
     b36:	8b af       	std	Y+59, r24	; 0x3b
     b38:	9c af       	std	Y+60, r25	; 0x3c
     b3a:	ad af       	std	Y+61, r26	; 0x3d
     b3c:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e8       	ldi	r20, 0x80	; 128
     b44:	5f e3       	ldi	r21, 0x3F	; 63
     b46:	6b ad       	ldd	r22, Y+59	; 0x3b
     b48:	7c ad       	ldd	r23, Y+60	; 0x3c
     b4a:	8d ad       	ldd	r24, Y+61	; 0x3d
     b4c:	9e ad       	ldd	r25, Y+62	; 0x3e
     b4e:	0e 94 98 3b 	call	0x7730	; 0x7730 <__cmpsf2>
     b52:	88 23       	and	r24, r24
     b54:	44 f4       	brge	.+16     	; 0xb66 <main+0x73e>
		__ticks = 1;
     b56:	21 e0       	ldi	r18, 0x01	; 1
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	ce 01       	movw	r24, r28
     b5c:	cf 96       	adiw	r24, 0x3f	; 63
     b5e:	fc 01       	movw	r30, r24
     b60:	20 83       	st	Z, r18
     b62:	31 83       	std	Z+1, r19	; 0x01
     b64:	5f c0       	rjmp	.+190    	; 0xc24 <main+0x7fc>
	else if (__tmp > 65535)
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	3f ef       	ldi	r19, 0xFF	; 255
     b6a:	4f e7       	ldi	r20, 0x7F	; 127
     b6c:	57 e4       	ldi	r21, 0x47	; 71
     b6e:	6b ad       	ldd	r22, Y+59	; 0x3b
     b70:	7c ad       	ldd	r23, Y+60	; 0x3c
     b72:	8d ad       	ldd	r24, Y+61	; 0x3d
     b74:	9e ad       	ldd	r25, Y+62	; 0x3e
     b76:	0e 94 19 3c 	call	0x7832	; 0x7832 <__gesf2>
     b7a:	18 16       	cp	r1, r24
     b7c:	0c f0       	brlt	.+2      	; 0xb80 <main+0x758>
     b7e:	44 c0       	rjmp	.+136    	; 0xc08 <main+0x7e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	40 e2       	ldi	r20, 0x20	; 32
     b86:	51 e4       	ldi	r21, 0x41	; 65
     b88:	6d 85       	ldd	r22, Y+13	; 0x0d
     b8a:	7e 85       	ldd	r23, Y+14	; 0x0e
     b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b8e:	98 89       	ldd	r25, Y+16	; 0x10
     b90:	0e 94 1e 3c 	call	0x783c	; 0x783c <__mulsf3>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	bc 01       	movw	r22, r24
     b9a:	cd 01       	movw	r24, r26
     b9c:	0e 94 9d 3b 	call	0x773a	; 0x773a <__fixunssfsi>
     ba0:	dc 01       	movw	r26, r24
     ba2:	cb 01       	movw	r24, r22
     ba4:	9e 01       	movw	r18, r28
     ba6:	21 5c       	subi	r18, 0xC1	; 193
     ba8:	3f 4f       	sbci	r19, 0xFF	; 255
     baa:	f9 01       	movw	r30, r18
     bac:	80 83       	st	Z, r24
     bae:	91 83       	std	Z+1, r25	; 0x01
     bb0:	23 c0       	rjmp	.+70     	; 0xbf8 <main+0x7d0>
     bb2:	ce 01       	movw	r24, r28
     bb4:	8f 5b       	subi	r24, 0xBF	; 191
     bb6:	9f 4f       	sbci	r25, 0xFF	; 255
     bb8:	2a ef       	ldi	r18, 0xFA	; 250
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	fc 01       	movw	r30, r24
     bbe:	20 83       	st	Z, r18
     bc0:	31 83       	std	Z+1, r19	; 0x01
     bc2:	ce 01       	movw	r24, r28
     bc4:	8f 5b       	subi	r24, 0xBF	; 191
     bc6:	9f 4f       	sbci	r25, 0xFF	; 255
     bc8:	fc 01       	movw	r30, r24
     bca:	80 81       	ld	r24, Z
     bcc:	91 81       	ldd	r25, Z+1	; 0x01
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	f1 f7       	brne	.-4      	; 0xbce <main+0x7a6>
     bd2:	9e 01       	movw	r18, r28
     bd4:	2f 5b       	subi	r18, 0xBF	; 191
     bd6:	3f 4f       	sbci	r19, 0xFF	; 255
     bd8:	f9 01       	movw	r30, r18
     bda:	80 83       	st	Z, r24
     bdc:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bde:	ce 01       	movw	r24, r28
     be0:	cf 96       	adiw	r24, 0x3f	; 63
     be2:	fc 01       	movw	r30, r24
     be4:	80 81       	ld	r24, Z
     be6:	91 81       	ldd	r25, Z+1	; 0x01
     be8:	9c 01       	movw	r18, r24
     bea:	21 50       	subi	r18, 0x01	; 1
     bec:	31 09       	sbc	r19, r1
     bee:	ce 01       	movw	r24, r28
     bf0:	cf 96       	adiw	r24, 0x3f	; 63
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 83       	st	Z, r18
     bf6:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bf8:	ce 01       	movw	r24, r28
     bfa:	cf 96       	adiw	r24, 0x3f	; 63
     bfc:	fc 01       	movw	r30, r24
     bfe:	80 81       	ld	r24, Z
     c00:	91 81       	ldd	r25, Z+1	; 0x01
     c02:	89 2b       	or	r24, r25
     c04:	b1 f6       	brne	.-84     	; 0xbb2 <main+0x78a>
     c06:	28 c0       	rjmp	.+80     	; 0xc58 <main+0x830>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c08:	6b ad       	ldd	r22, Y+59	; 0x3b
     c0a:	7c ad       	ldd	r23, Y+60	; 0x3c
     c0c:	8d ad       	ldd	r24, Y+61	; 0x3d
     c0e:	9e ad       	ldd	r25, Y+62	; 0x3e
     c10:	0e 94 9d 3b 	call	0x773a	; 0x773a <__fixunssfsi>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	9e 01       	movw	r18, r28
     c1a:	21 5c       	subi	r18, 0xC1	; 193
     c1c:	3f 4f       	sbci	r19, 0xFF	; 255
     c1e:	f9 01       	movw	r30, r18
     c20:	80 83       	st	Z, r24
     c22:	91 83       	std	Z+1, r25	; 0x01
     c24:	ce 01       	movw	r24, r28
     c26:	8d 5b       	subi	r24, 0xBD	; 189
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	9e 01       	movw	r18, r28
     c2c:	21 5c       	subi	r18, 0xC1	; 193
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	f9 01       	movw	r30, r18
     c32:	20 81       	ld	r18, Z
     c34:	31 81       	ldd	r19, Z+1	; 0x01
     c36:	fc 01       	movw	r30, r24
     c38:	20 83       	st	Z, r18
     c3a:	31 83       	std	Z+1, r19	; 0x01
     c3c:	ce 01       	movw	r24, r28
     c3e:	8d 5b       	subi	r24, 0xBD	; 189
     c40:	9f 4f       	sbci	r25, 0xFF	; 255
     c42:	fc 01       	movw	r30, r24
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <main+0x820>
     c4c:	9e 01       	movw	r18, r28
     c4e:	2d 5b       	subi	r18, 0xBD	; 189
     c50:	3f 4f       	sbci	r19, 0xFF	; 255
     c52:	f9 01       	movw	r30, r18
     c54:	80 83       	st	Z, r24
     c56:	91 83       	std	Z+1, r25	; 0x01
										//asm("NOP");
										_delay_ms(50);
										memset(send_buff, 0, BUFF_SIZE);
     c58:	42 e3       	ldi	r20, 0x32	; 50
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	80 e6       	ldi	r24, 0x60	; 96
     c62:	98 e2       	ldi	r25, 0x28	; 40
     c64:	0e 94 e1 3c 	call	0x79c2	; 0x79c2 <memset>
										sprintf(send_buff, "%i", res);
     c68:	ce 01       	movw	r24, r28
     c6a:	85 59       	subi	r24, 0x95	; 149
     c6c:	9f 4f       	sbci	r25, 0xFF	; 255
     c6e:	fc 01       	movw	r30, r24
     c70:	80 81       	ld	r24, Z
     c72:	91 81       	ldd	r25, Z+1	; 0x01
     c74:	29 2f       	mov	r18, r25
     c76:	2f 93       	push	r18
     c78:	8f 93       	push	r24
     c7a:	84 ec       	ldi	r24, 0xC4	; 196
     c7c:	90 ec       	ldi	r25, 0xC0	; 192
     c7e:	89 2f       	mov	r24, r25
     c80:	8f 93       	push	r24
     c82:	84 ec       	ldi	r24, 0xC4	; 196
     c84:	90 ec       	ldi	r25, 0xC0	; 192
     c86:	8f 93       	push	r24
     c88:	80 e6       	ldi	r24, 0x60	; 96
     c8a:	98 e2       	ldi	r25, 0x28	; 40
     c8c:	89 2f       	mov	r24, r25
     c8e:	8f 93       	push	r24
     c90:	80 e6       	ldi	r24, 0x60	; 96
     c92:	98 e2       	ldi	r25, 0x28	; 40
     c94:	8f 93       	push	r24
     c96:	0e 94 f1 3c 	call	0x79e2	; 0x79e2 <sprintf>
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
										
										send(tcp_client_socket, send_buff, strlen(send_buff), 0);
     ca6:	80 e6       	ldi	r24, 0x60	; 96
     ca8:	98 e2       	ldi	r25, 0x28	; 40
     caa:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <strlen>
     cae:	e0 91 00 28 	lds	r30, 0x2800	; 0x802800 <__data_start>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	ac 01       	movw	r20, r24
     cb8:	60 e6       	ldi	r22, 0x60	; 96
     cba:	78 e2       	ldi	r23, 0x28	; 40
     cbc:	8e 2f       	mov	r24, r30
     cbe:	0e 94 2e 38 	call	0x705c	; 0x705c <send>
										
										if(!SW0_get_level())
     cc2:	0e 94 30 01 	call	0x260	; 0x260 <SW0_get_level>
     cc6:	98 2f       	mov	r25, r24
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	89 27       	eor	r24, r25
     ccc:	88 23       	and	r24, r24
     cce:	11 f0       	breq	.+4      	; 0xcd4 <main+0x8ac>
											hmm = true;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	89 83       	std	Y+1, r24	; 0x01
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	aa e7       	ldi	r26, 0x7A	; 122
     cda:	b4 e4       	ldi	r27, 0x44	; 68
     cdc:	89 8b       	std	Y+17, r24	; 0x11
     cde:	9a 8b       	std	Y+18, r25	; 0x12
     ce0:	ab 8b       	std	Y+19, r26	; 0x13
     ce2:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ce4:	8e 01       	movw	r16, r28
     ce6:	0b 5b       	subi	r16, 0xBB	; 187
     ce8:	1f 4f       	sbci	r17, 0xFF	; 255
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e4       	ldi	r19, 0x40	; 64
     cee:	4c e1       	ldi	r20, 0x1C	; 28
     cf0:	55 e4       	ldi	r21, 0x45	; 69
     cf2:	69 89       	ldd	r22, Y+17	; 0x11
     cf4:	7a 89       	ldd	r23, Y+18	; 0x12
     cf6:	8b 89       	ldd	r24, Y+19	; 0x13
     cf8:	9c 89       	ldd	r25, Y+20	; 0x14
     cfa:	0e 94 1e 3c 	call	0x783c	; 0x783c <__mulsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	f8 01       	movw	r30, r16
     d04:	80 83       	st	Z, r24
     d06:	91 83       	std	Z+1, r25	; 0x01
     d08:	a2 83       	std	Z+2, r26	; 0x02
     d0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d0c:	ce 01       	movw	r24, r28
     d0e:	8b 5b       	subi	r24, 0xBB	; 187
     d10:	9f 4f       	sbci	r25, 0xFF	; 255
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	40 e8       	ldi	r20, 0x80	; 128
     d18:	5f e3       	ldi	r21, 0x3F	; 63
     d1a:	fc 01       	movw	r30, r24
     d1c:	60 81       	ld	r22, Z
     d1e:	71 81       	ldd	r23, Z+1	; 0x01
     d20:	82 81       	ldd	r24, Z+2	; 0x02
     d22:	93 81       	ldd	r25, Z+3	; 0x03
     d24:	0e 94 98 3b 	call	0x7730	; 0x7730 <__cmpsf2>
     d28:	88 23       	and	r24, r24
     d2a:	4c f4       	brge	.+18     	; 0xd3e <main+0x916>
		__ticks = 1;
     d2c:	ce 01       	movw	r24, r28
     d2e:	87 5b       	subi	r24, 0xB7	; 183
     d30:	9f 4f       	sbci	r25, 0xFF	; 255
     d32:	21 e0       	ldi	r18, 0x01	; 1
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	fc 01       	movw	r30, r24
     d38:	20 83       	st	Z, r18
     d3a:	31 83       	std	Z+1, r19	; 0x01
     d3c:	69 c0       	rjmp	.+210    	; 0xe10 <main+0x9e8>
	else if (__tmp > 65535)
     d3e:	ce 01       	movw	r24, r28
     d40:	8b 5b       	subi	r24, 0xBB	; 187
     d42:	9f 4f       	sbci	r25, 0xFF	; 255
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	3f ef       	ldi	r19, 0xFF	; 255
     d48:	4f e7       	ldi	r20, 0x7F	; 127
     d4a:	57 e4       	ldi	r21, 0x47	; 71
     d4c:	fc 01       	movw	r30, r24
     d4e:	60 81       	ld	r22, Z
     d50:	71 81       	ldd	r23, Z+1	; 0x01
     d52:	82 81       	ldd	r24, Z+2	; 0x02
     d54:	93 81       	ldd	r25, Z+3	; 0x03
     d56:	0e 94 19 3c 	call	0x7832	; 0x7832 <__gesf2>
     d5a:	18 16       	cp	r1, r24
     d5c:	0c f0       	brlt	.+2      	; 0xd60 <main+0x938>
     d5e:	46 c0       	rjmp	.+140    	; 0xdec <main+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e2       	ldi	r20, 0x20	; 32
     d66:	51 e4       	ldi	r21, 0x41	; 65
     d68:	69 89       	ldd	r22, Y+17	; 0x11
     d6a:	7a 89       	ldd	r23, Y+18	; 0x12
     d6c:	8b 89       	ldd	r24, Y+19	; 0x13
     d6e:	9c 89       	ldd	r25, Y+20	; 0x14
     d70:	0e 94 1e 3c 	call	0x783c	; 0x783c <__mulsf3>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	8e 01       	movw	r16, r28
     d7a:	07 5b       	subi	r16, 0xB7	; 183
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	bc 01       	movw	r22, r24
     d80:	cd 01       	movw	r24, r26
     d82:	0e 94 9d 3b 	call	0x773a	; 0x773a <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	f8 01       	movw	r30, r16
     d8c:	80 83       	st	Z, r24
     d8e:	91 83       	std	Z+1, r25	; 0x01
     d90:	24 c0       	rjmp	.+72     	; 0xdda <main+0x9b2>
     d92:	ce 01       	movw	r24, r28
     d94:	85 5b       	subi	r24, 0xB5	; 181
     d96:	9f 4f       	sbci	r25, 0xFF	; 255
     d98:	2a ef       	ldi	r18, 0xFA	; 250
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	fc 01       	movw	r30, r24
     d9e:	20 83       	st	Z, r18
     da0:	31 83       	std	Z+1, r19	; 0x01
     da2:	ce 01       	movw	r24, r28
     da4:	85 5b       	subi	r24, 0xB5	; 181
     da6:	9f 4f       	sbci	r25, 0xFF	; 255
     da8:	fc 01       	movw	r30, r24
     daa:	80 81       	ld	r24, Z
     dac:	91 81       	ldd	r25, Z+1	; 0x01
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	f1 f7       	brne	.-4      	; 0xdae <main+0x986>
     db2:	9e 01       	movw	r18, r28
     db4:	25 5b       	subi	r18, 0xB5	; 181
     db6:	3f 4f       	sbci	r19, 0xFF	; 255
     db8:	f9 01       	movw	r30, r18
     dba:	80 83       	st	Z, r24
     dbc:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbe:	ce 01       	movw	r24, r28
     dc0:	87 5b       	subi	r24, 0xB7	; 183
     dc2:	9f 4f       	sbci	r25, 0xFF	; 255
     dc4:	9e 01       	movw	r18, r28
     dc6:	27 5b       	subi	r18, 0xB7	; 183
     dc8:	3f 4f       	sbci	r19, 0xFF	; 255
     dca:	f9 01       	movw	r30, r18
     dcc:	20 81       	ld	r18, Z
     dce:	31 81       	ldd	r19, Z+1	; 0x01
     dd0:	21 50       	subi	r18, 0x01	; 1
     dd2:	31 09       	sbc	r19, r1
     dd4:	fc 01       	movw	r30, r24
     dd6:	20 83       	st	Z, r18
     dd8:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dda:	ce 01       	movw	r24, r28
     ddc:	87 5b       	subi	r24, 0xB7	; 183
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	fc 01       	movw	r30, r24
     de2:	80 81       	ld	r24, Z
     de4:	91 81       	ldd	r25, Z+1	; 0x01
     de6:	89 2b       	or	r24, r25
     de8:	a1 f6       	brne	.-88     	; 0xd92 <main+0x96a>
     dea:	2c c0       	rjmp	.+88     	; 0xe44 <main+0xa1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dec:	8e 01       	movw	r16, r28
     dee:	07 5b       	subi	r16, 0xB7	; 183
     df0:	1f 4f       	sbci	r17, 0xFF	; 255
     df2:	ce 01       	movw	r24, r28
     df4:	8b 5b       	subi	r24, 0xBB	; 187
     df6:	9f 4f       	sbci	r25, 0xFF	; 255
     df8:	fc 01       	movw	r30, r24
     dfa:	60 81       	ld	r22, Z
     dfc:	71 81       	ldd	r23, Z+1	; 0x01
     dfe:	82 81       	ldd	r24, Z+2	; 0x02
     e00:	93 81       	ldd	r25, Z+3	; 0x03
     e02:	0e 94 9d 3b 	call	0x773a	; 0x773a <__fixunssfsi>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	f8 01       	movw	r30, r16
     e0c:	80 83       	st	Z, r24
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	ce 01       	movw	r24, r28
     e12:	83 5b       	subi	r24, 0xB3	; 179
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	9e 01       	movw	r18, r28
     e18:	27 5b       	subi	r18, 0xB7	; 183
     e1a:	3f 4f       	sbci	r19, 0xFF	; 255
     e1c:	f9 01       	movw	r30, r18
     e1e:	20 81       	ld	r18, Z
     e20:	31 81       	ldd	r19, Z+1	; 0x01
     e22:	fc 01       	movw	r30, r24
     e24:	20 83       	st	Z, r18
     e26:	31 83       	std	Z+1, r19	; 0x01
     e28:	ce 01       	movw	r24, r28
     e2a:	83 5b       	subi	r24, 0xB3	; 179
     e2c:	9f 4f       	sbci	r25, 0xFF	; 255
     e2e:	fc 01       	movw	r30, r24
     e30:	80 81       	ld	r24, Z
     e32:	91 81       	ldd	r25, Z+1	; 0x01
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <main+0xa0c>
     e38:	9e 01       	movw	r18, r28
     e3a:	23 5b       	subi	r18, 0xB3	; 179
     e3c:	3f 4f       	sbci	r19, 0xFF	; 255
     e3e:	f9 01       	movw	r30, r18
     e40:	80 83       	st	Z, r24
     e42:	91 83       	std	Z+1, r25	; 0x01
								} else {
									sprintf(buff, "Hey, I don't know you, but you are welcome!\n");
									send(tcp_client_socket, buff, strlen(buff), 0);
									hmm = false;
									
									while(!hmm) {
     e44:	99 81       	ldd	r25, Y+1	; 0x01
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	89 27       	eor	r24, r25
     e4a:	88 23       	and	r24, r24
     e4c:	09 f0       	breq	.+2      	; 0xe50 <main+0xa28>
     e4e:	55 ce       	rjmp	.-854    	; 0xafa <main+0x6d2>
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	af e2       	ldi	r26, 0x2F	; 47
     e56:	b4 e4       	ldi	r27, 0x44	; 68
     e58:	8d 8b       	std	Y+21, r24	; 0x15
     e5a:	9e 8b       	std	Y+22, r25	; 0x16
     e5c:	af 8b       	std	Y+23, r26	; 0x17
     e5e:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e60:	8e 01       	movw	r16, r28
     e62:	01 5b       	subi	r16, 0xB1	; 177
     e64:	1f 4f       	sbci	r17, 0xFF	; 255
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e4       	ldi	r19, 0x40	; 64
     e6a:	4c e1       	ldi	r20, 0x1C	; 28
     e6c:	55 e4       	ldi	r21, 0x45	; 69
     e6e:	6d 89       	ldd	r22, Y+21	; 0x15
     e70:	7e 89       	ldd	r23, Y+22	; 0x16
     e72:	8f 89       	ldd	r24, Y+23	; 0x17
     e74:	98 8d       	ldd	r25, Y+24	; 0x18
     e76:	0e 94 1e 3c 	call	0x783c	; 0x783c <__mulsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	f8 01       	movw	r30, r16
     e80:	80 83       	st	Z, r24
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	a2 83       	std	Z+2, r26	; 0x02
     e86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e88:	ce 01       	movw	r24, r28
     e8a:	81 5b       	subi	r24, 0xB1	; 177
     e8c:	9f 4f       	sbci	r25, 0xFF	; 255
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	40 e8       	ldi	r20, 0x80	; 128
     e94:	5f e3       	ldi	r21, 0x3F	; 63
     e96:	fc 01       	movw	r30, r24
     e98:	60 81       	ld	r22, Z
     e9a:	71 81       	ldd	r23, Z+1	; 0x01
     e9c:	82 81       	ldd	r24, Z+2	; 0x02
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	0e 94 98 3b 	call	0x7730	; 0x7730 <__cmpsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	4c f4       	brge	.+18     	; 0xeba <main+0xa92>
		__ticks = 1;
     ea8:	ce 01       	movw	r24, r28
     eaa:	8d 5a       	subi	r24, 0xAD	; 173
     eac:	9f 4f       	sbci	r25, 0xFF	; 255
     eae:	21 e0       	ldi	r18, 0x01	; 1
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	fc 01       	movw	r30, r24
     eb4:	20 83       	st	Z, r18
     eb6:	31 83       	std	Z+1, r19	; 0x01
     eb8:	69 c0       	rjmp	.+210    	; 0xf8c <main+0xb64>
	else if (__tmp > 65535)
     eba:	ce 01       	movw	r24, r28
     ebc:	81 5b       	subi	r24, 0xB1	; 177
     ebe:	9f 4f       	sbci	r25, 0xFF	; 255
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	3f ef       	ldi	r19, 0xFF	; 255
     ec4:	4f e7       	ldi	r20, 0x7F	; 127
     ec6:	57 e4       	ldi	r21, 0x47	; 71
     ec8:	fc 01       	movw	r30, r24
     eca:	60 81       	ld	r22, Z
     ecc:	71 81       	ldd	r23, Z+1	; 0x01
     ece:	82 81       	ldd	r24, Z+2	; 0x02
     ed0:	93 81       	ldd	r25, Z+3	; 0x03
     ed2:	0e 94 19 3c 	call	0x7832	; 0x7832 <__gesf2>
     ed6:	18 16       	cp	r1, r24
     ed8:	0c f0       	brlt	.+2      	; 0xedc <main+0xab4>
     eda:	46 c0       	rjmp	.+140    	; 0xf68 <main+0xb40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e2       	ldi	r20, 0x20	; 32
     ee2:	51 e4       	ldi	r21, 0x41	; 65
     ee4:	6d 89       	ldd	r22, Y+21	; 0x15
     ee6:	7e 89       	ldd	r23, Y+22	; 0x16
     ee8:	8f 89       	ldd	r24, Y+23	; 0x17
     eea:	98 8d       	ldd	r25, Y+24	; 0x18
     eec:	0e 94 1e 3c 	call	0x783c	; 0x783c <__mulsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	8e 01       	movw	r16, r28
     ef6:	0d 5a       	subi	r16, 0xAD	; 173
     ef8:	1f 4f       	sbci	r17, 0xFF	; 255
     efa:	bc 01       	movw	r22, r24
     efc:	cd 01       	movw	r24, r26
     efe:	0e 94 9d 3b 	call	0x773a	; 0x773a <__fixunssfsi>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	f8 01       	movw	r30, r16
     f08:	80 83       	st	Z, r24
     f0a:	91 83       	std	Z+1, r25	; 0x01
     f0c:	24 c0       	rjmp	.+72     	; 0xf56 <main+0xb2e>
     f0e:	ce 01       	movw	r24, r28
     f10:	8b 5a       	subi	r24, 0xAB	; 171
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
     f14:	2a ef       	ldi	r18, 0xFA	; 250
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	fc 01       	movw	r30, r24
     f1a:	20 83       	st	Z, r18
     f1c:	31 83       	std	Z+1, r19	; 0x01
     f1e:	ce 01       	movw	r24, r28
     f20:	8b 5a       	subi	r24, 0xAB	; 171
     f22:	9f 4f       	sbci	r25, 0xFF	; 255
     f24:	fc 01       	movw	r30, r24
     f26:	80 81       	ld	r24, Z
     f28:	91 81       	ldd	r25, Z+1	; 0x01
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <main+0xb02>
     f2e:	9e 01       	movw	r18, r28
     f30:	2b 5a       	subi	r18, 0xAB	; 171
     f32:	3f 4f       	sbci	r19, 0xFF	; 255
     f34:	f9 01       	movw	r30, r18
     f36:	80 83       	st	Z, r24
     f38:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3a:	ce 01       	movw	r24, r28
     f3c:	8d 5a       	subi	r24, 0xAD	; 173
     f3e:	9f 4f       	sbci	r25, 0xFF	; 255
     f40:	9e 01       	movw	r18, r28
     f42:	2d 5a       	subi	r18, 0xAD	; 173
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	f9 01       	movw	r30, r18
     f48:	20 81       	ld	r18, Z
     f4a:	31 81       	ldd	r19, Z+1	; 0x01
     f4c:	21 50       	subi	r18, 0x01	; 1
     f4e:	31 09       	sbc	r19, r1
     f50:	fc 01       	movw	r30, r24
     f52:	20 83       	st	Z, r18
     f54:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f56:	ce 01       	movw	r24, r28
     f58:	8d 5a       	subi	r24, 0xAD	; 173
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	fc 01       	movw	r30, r24
     f5e:	80 81       	ld	r24, Z
     f60:	91 81       	ldd	r25, Z+1	; 0x01
     f62:	89 2b       	or	r24, r25
     f64:	a1 f6       	brne	.-88     	; 0xf0e <main+0xae6>
     f66:	2e c0       	rjmp	.+92     	; 0xfc4 <main+0xb9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f68:	8e 01       	movw	r16, r28
     f6a:	0d 5a       	subi	r16, 0xAD	; 173
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	ce 01       	movw	r24, r28
     f70:	81 5b       	subi	r24, 0xB1	; 177
     f72:	9f 4f       	sbci	r25, 0xFF	; 255
     f74:	fc 01       	movw	r30, r24
     f76:	60 81       	ld	r22, Z
     f78:	71 81       	ldd	r23, Z+1	; 0x01
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	93 81       	ldd	r25, Z+3	; 0x03
     f7e:	0e 94 9d 3b 	call	0x773a	; 0x773a <__fixunssfsi>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	f8 01       	movw	r30, r16
     f88:	80 83       	st	Z, r24
     f8a:	91 83       	std	Z+1, r25	; 0x01
     f8c:	ce 01       	movw	r24, r28
     f8e:	89 5a       	subi	r24, 0xA9	; 169
     f90:	9f 4f       	sbci	r25, 0xFF	; 255
     f92:	9e 01       	movw	r18, r28
     f94:	2d 5a       	subi	r18, 0xAD	; 173
     f96:	3f 4f       	sbci	r19, 0xFF	; 255
     f98:	f9 01       	movw	r30, r18
     f9a:	20 81       	ld	r18, Z
     f9c:	31 81       	ldd	r19, Z+1	; 0x01
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 83       	st	Z, r18
     fa2:	31 83       	std	Z+1, r19	; 0x01
     fa4:	ce 01       	movw	r24, r28
     fa6:	89 5a       	subi	r24, 0xA9	; 169
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	fc 01       	movw	r30, r24
     fac:	80 81       	ld	r24, Z
     fae:	91 81       	ldd	r25, Z+1	; 0x01
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <main+0xb88>
     fb4:	9e 01       	movw	r18, r28
     fb6:	29 5a       	subi	r18, 0xA9	; 169
     fb8:	3f 4f       	sbci	r19, 0xFF	; 255
     fba:	f9 01       	movw	r30, r18
     fbc:	80 83       	st	Z, r24
     fbe:	91 83       	std	Z+1, r25	; 0x01
     fc0:	0c cb       	rjmp	.-2536   	; 0x5da <main+0x1b2>
			/* Open client socket. */
			if (tcp_client_socket < 0) {
				
				if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
					//printf("main: failed to create TCP client socket error!\r\n");
					continue;
     fc2:	00 00       	nop
					}
					_delay_ms(700);
				}
			}
		}
	}
     fc4:	0a cb       	rjmp	.-2540   	; 0x5da <main+0x1b2>

00000fc6 <ADC_0_init>:
 * \return Nothing
 */
void ADC_0_disable()
{
	ADC0.CTRLA &= ~ADC_ENABLE_bm;
}
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	96 e0       	ldi	r25, 0x06	; 6
     fd2:	21 e0       	ldi	r18, 0x01	; 1
     fd4:	fc 01       	movw	r30, r24
     fd6:	20 83       	st	Z, r18
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <ADC_0_enable>:
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	96 e0       	ldi	r25, 0x06	; 6
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	36 e0       	ldi	r19, 0x06	; 6
     ff0:	f9 01       	movw	r30, r18
     ff2:	20 81       	ld	r18, Z
     ff4:	21 60       	ori	r18, 0x01	; 1
     ff6:	fc 01       	movw	r30, r24
     ff8:	20 83       	st	Z, r18
     ffa:	00 00       	nop
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	08 95       	ret

00001002 <ADC_0_start_conversion>:
 * \param[in] channel The ADC channel to start conversion on
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	1f 92       	push	r1
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	89 83       	std	Y+1, r24	; 0x01
	ADC0.MUXPOS  = channel;
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	96 e0       	ldi	r25, 0x06	; 6
    1012:	29 81       	ldd	r18, Y+1	; 0x01
    1014:	fc 01       	movw	r30, r24
    1016:	26 83       	std	Z+6, r18	; 0x06
	ADC0.COMMAND = ADC_STCONV_bm;
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	96 e0       	ldi	r25, 0x06	; 6
    101c:	21 e0       	ldi	r18, 0x01	; 1
    101e:	fc 01       	movw	r30, r24
    1020:	20 87       	std	Z+8, r18	; 0x08
}
    1022:	00 00       	nop
    1024:	0f 90       	pop	r0
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	08 95       	ret

0000102c <ADC_0_is_conversion_done>:
 * \return The status of ADC converison done check
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	96 e0       	ldi	r25, 0x06	; 6
    1038:	fc 01       	movw	r30, r24
    103a:	83 85       	ldd	r24, Z+11	; 0x0b
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	81 70       	andi	r24, 0x01	; 1
    1042:	99 27       	eor	r25, r25
    1044:	21 e0       	ldi	r18, 0x01	; 1
    1046:	89 2b       	or	r24, r25
    1048:	09 f4       	brne	.+2      	; 0x104c <ADC_0_is_conversion_done+0x20>
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	82 2f       	mov	r24, r18
}
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <ADC_0_get_conversion_result>:
 * \brief Read a conversion result from ADC_0
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
	return (ADC0.RES);
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	96 e0       	ldi	r25, 0x06	; 6
    1060:	fc 01       	movw	r30, r24
    1062:	80 89       	ldd	r24, Z+16	; 0x10
    1064:	91 89       	ldd	r25, Z+17	; 0x11
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <ADC_0_get_conversion>:
 * \brief Start a conversion, wait until ready, and return the conversion result
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	00 d0       	rcall	.+0      	; 0x1072 <ADC_0_get_conversion+0x6>
    1072:	1f 92       	push	r1
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	8b 83       	std	Y+3, r24	; 0x03
	adc_result_t res;

	ADC_0_start_conversion(channel);
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	0e 94 01 08 	call	0x1002	; 0x1002 <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
    1080:	00 00       	nop
    1082:	0e 94 16 08 	call	0x102c	; 0x102c <ADC_0_is_conversion_done>
    1086:	98 2f       	mov	r25, r24
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	89 27       	eor	r24, r25
    108c:	88 23       	and	r24, r24
    108e:	c9 f7       	brne	.-14     	; 0x1082 <ADC_0_get_conversion+0x16>
		;
	res = ADC_0_get_conversion_result();
    1090:	0e 94 2a 08 	call	0x1054	; 0x1054 <ADC_0_get_conversion_result>
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	9a 83       	std	Y+2, r25	; 0x02
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	96 e0       	ldi	r25, 0x06	; 6
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	36 e0       	ldi	r19, 0x06	; 6
    10a0:	f9 01       	movw	r30, r18
    10a2:	23 85       	ldd	r18, Z+11	; 0x0b
    10a4:	21 60       	ori	r18, 0x01	; 1
    10a6:	fc 01       	movw	r30, r24
    10a8:	23 87       	std	Z+11, r18	; 0x0b
	return res;
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	9a 81       	ldd	r25, Y+2	; 0x02
}
    10ae:	23 96       	adiw	r28, 0x03	; 3
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret

000010ba <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <ccp_write_io+0x6>
    10c0:	1f 92       	push	r1
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	9a 83       	std	Y+2, r25	; 0x02
    10ca:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	4b 81       	ldd	r20, Y+3	; 0x03
    10d2:	68 ed       	ldi	r22, 0xD8	; 216
    10d4:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <protected_write_io>
}
    10d8:	00 00       	nop
    10da:	23 96       	adiw	r28, 0x03	; 3
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	08 95       	ret

000010e6 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
	//		 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */
	//		 | 0 << CLKCTRL_SEL_bp /* Select: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.OSC20MCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLB),
    10ee:	61 e0       	ldi	r22, 0x01	; 1
    10f0:	81 e6       	ldi	r24, 0x61	; 97
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
    10f8:	80 e0       	ldi	r24, 0x00	; 0
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <PORTB_set_pin_pull_mode>:
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_0_init();
}
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	00 d0       	rcall	.+0      	; 0x1106 <PORTB_set_pin_pull_mode+0x6>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <PORTB_set_pin_pull_mode+0x8>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	8b 83       	std	Y+3, r24	; 0x03
    110e:	6c 83       	std	Y+4, r22	; 0x04
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	80 5d       	subi	r24, 0xD0	; 208
    1118:	9b 4f       	sbci	r25, 0xFB	; 251
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	59 f4       	brne	.+22     	; 0x113a <PORTB_set_pin_pull_mode+0x3a>
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	9a 81       	ldd	r25, Y+2	; 0x02
    1128:	fc 01       	movw	r30, r24
    112a:	80 81       	ld	r24, Z
    112c:	28 2f       	mov	r18, r24
    112e:	28 60       	ori	r18, 0x08	; 8
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	fc 01       	movw	r30, r24
    1136:	20 83       	st	Z, r18
    1138:	0d c0       	rjmp	.+26     	; 0x1154 <PORTB_set_pin_pull_mode+0x54>
    113a:	8c 81       	ldd	r24, Y+4	; 0x04
    113c:	88 23       	and	r24, r24
    113e:	51 f4       	brne	.+20     	; 0x1154 <PORTB_set_pin_pull_mode+0x54>
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	9a 81       	ldd	r25, Y+2	; 0x02
    1144:	fc 01       	movw	r30, r24
    1146:	80 81       	ld	r24, Z
    1148:	28 2f       	mov	r18, r24
    114a:	27 7f       	andi	r18, 0xF7	; 247
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	fc 01       	movw	r30, r24
    1152:	20 83       	st	Z, r18
    1154:	00 00       	nop
    1156:	24 96       	adiw	r28, 0x04	; 4
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	08 95       	ret

00001162 <PORTB_set_pin_dir>:
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	00 d0       	rcall	.+0      	; 0x1168 <PORTB_set_pin_dir+0x6>
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	6a 83       	std	Y+2, r22	; 0x02
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	91 05       	cpc	r25, r1
    117a:	e1 f0       	breq	.+56     	; 0x11b4 <PORTB_set_pin_dir+0x52>
    117c:	82 30       	cpi	r24, 0x02	; 2
    117e:	91 05       	cpc	r25, r1
    1180:	71 f1       	breq	.+92     	; 0x11de <PORTB_set_pin_dir+0x7c>
    1182:	89 2b       	or	r24, r25
    1184:	09 f0       	breq	.+2      	; 0x1188 <PORTB_set_pin_dir+0x26>
    1186:	3b c0       	rjmp	.+118    	; 0x11fe <PORTB_set_pin_dir+0x9c>
    1188:	84 e0       	ldi	r24, 0x04	; 4
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	24 e0       	ldi	r18, 0x04	; 4
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	f9 01       	movw	r30, r18
    1192:	20 81       	ld	r18, Z
    1194:	62 2f       	mov	r22, r18
    1196:	29 81       	ldd	r18, Y+1	; 0x01
    1198:	42 2f       	mov	r20, r18
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	21 e0       	ldi	r18, 0x01	; 1
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <PORTB_set_pin_dir+0x44>
    11a2:	22 0f       	add	r18, r18
    11a4:	33 1f       	adc	r19, r19
    11a6:	4a 95       	dec	r20
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <PORTB_set_pin_dir+0x40>
    11aa:	20 95       	com	r18
    11ac:	26 23       	and	r18, r22
    11ae:	fc 01       	movw	r30, r24
    11b0:	20 83       	st	Z, r18
    11b2:	25 c0       	rjmp	.+74     	; 0x11fe <PORTB_set_pin_dir+0x9c>
    11b4:	84 e0       	ldi	r24, 0x04	; 4
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	24 e0       	ldi	r18, 0x04	; 4
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	f9 01       	movw	r30, r18
    11be:	20 81       	ld	r18, Z
    11c0:	62 2f       	mov	r22, r18
    11c2:	29 81       	ldd	r18, Y+1	; 0x01
    11c4:	42 2f       	mov	r20, r18
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <PORTB_set_pin_dir+0x70>
    11ce:	22 0f       	add	r18, r18
    11d0:	33 1f       	adc	r19, r19
    11d2:	4a 95       	dec	r20
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <PORTB_set_pin_dir+0x6c>
    11d6:	26 2b       	or	r18, r22
    11d8:	fc 01       	movw	r30, r24
    11da:	20 83       	st	Z, r18
    11dc:	10 c0       	rjmp	.+32     	; 0x11fe <PORTB_set_pin_dir+0x9c>
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	88 2f       	mov	r24, r24
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	80 5d       	subi	r24, 0xD0	; 208
    11e6:	9b 4f       	sbci	r25, 0xFB	; 251
    11e8:	29 81       	ldd	r18, Y+1	; 0x01
    11ea:	22 2f       	mov	r18, r18
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	20 5d       	subi	r18, 0xD0	; 208
    11f0:	3b 4f       	sbci	r19, 0xFB	; 251
    11f2:	f9 01       	movw	r30, r18
    11f4:	20 81       	ld	r18, Z
    11f6:	28 60       	ori	r18, 0x08	; 8
    11f8:	fc 01       	movw	r30, r24
    11fa:	20 83       	st	Z, r18
    11fc:	00 00       	nop
    11fe:	00 00       	nop
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <PORTB_set_pin_level>:
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	00 d0       	rcall	.+0      	; 0x1210 <PORTB_set_pin_level+0x6>
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	6a 83       	std	Y+2, r22	; 0x02
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	88 23       	and	r24, r24
    121c:	a9 f0       	breq	.+42     	; 0x1248 <PORTB_set_pin_level+0x3e>
    121e:	84 e0       	ldi	r24, 0x04	; 4
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	24 e0       	ldi	r18, 0x04	; 4
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	f9 01       	movw	r30, r18
    1228:	21 81       	ldd	r18, Z+1	; 0x01
    122a:	62 2f       	mov	r22, r18
    122c:	29 81       	ldd	r18, Y+1	; 0x01
    122e:	42 2f       	mov	r20, r18
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	21 e0       	ldi	r18, 0x01	; 1
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	02 c0       	rjmp	.+4      	; 0x123c <PORTB_set_pin_level+0x32>
    1238:	22 0f       	add	r18, r18
    123a:	33 1f       	adc	r19, r19
    123c:	4a 95       	dec	r20
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <PORTB_set_pin_level+0x2e>
    1240:	26 2b       	or	r18, r22
    1242:	fc 01       	movw	r30, r24
    1244:	21 83       	std	Z+1, r18	; 0x01
    1246:	15 c0       	rjmp	.+42     	; 0x1272 <PORTB_set_pin_level+0x68>
    1248:	84 e0       	ldi	r24, 0x04	; 4
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	24 e0       	ldi	r18, 0x04	; 4
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	f9 01       	movw	r30, r18
    1252:	21 81       	ldd	r18, Z+1	; 0x01
    1254:	62 2f       	mov	r22, r18
    1256:	29 81       	ldd	r18, Y+1	; 0x01
    1258:	42 2f       	mov	r20, r18
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	21 e0       	ldi	r18, 0x01	; 1
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <PORTB_set_pin_level+0x5c>
    1262:	22 0f       	add	r18, r18
    1264:	33 1f       	adc	r19, r19
    1266:	4a 95       	dec	r20
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <PORTB_set_pin_level+0x58>
    126a:	20 95       	com	r18
    126c:	26 23       	and	r18, r22
    126e:	fc 01       	movw	r30, r24
    1270:	21 83       	std	Z+1, r18	; 0x01
    1272:	00 00       	nop
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	08 95       	ret

0000127e <PORTD_set_pin_pull_mode>:
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	00 d0       	rcall	.+0      	; 0x1284 <PORTD_set_pin_pull_mode+0x6>
    1284:	00 d0       	rcall	.+0      	; 0x1286 <PORTD_set_pin_pull_mode+0x8>
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	8b 83       	std	Y+3, r24	; 0x03
    128c:	6c 83       	std	Y+4, r22	; 0x04
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	80 59       	subi	r24, 0x90	; 144
    1296:	9b 4f       	sbci	r25, 0xFB	; 251
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	9a 83       	std	Y+2, r25	; 0x02
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	59 f4       	brne	.+22     	; 0x12b8 <PORTD_set_pin_pull_mode+0x3a>
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	9a 81       	ldd	r25, Y+2	; 0x02
    12a6:	fc 01       	movw	r30, r24
    12a8:	80 81       	ld	r24, Z
    12aa:	28 2f       	mov	r18, r24
    12ac:	28 60       	ori	r18, 0x08	; 8
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	fc 01       	movw	r30, r24
    12b4:	20 83       	st	Z, r18
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <PORTD_set_pin_pull_mode+0x54>
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	88 23       	and	r24, r24
    12bc:	51 f4       	brne	.+20     	; 0x12d2 <PORTD_set_pin_pull_mode+0x54>
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	9a 81       	ldd	r25, Y+2	; 0x02
    12c2:	fc 01       	movw	r30, r24
    12c4:	80 81       	ld	r24, Z
    12c6:	28 2f       	mov	r18, r24
    12c8:	27 7f       	andi	r18, 0xF7	; 247
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	9a 81       	ldd	r25, Y+2	; 0x02
    12ce:	fc 01       	movw	r30, r24
    12d0:	20 83       	st	Z, r18
    12d2:	00 00       	nop
    12d4:	24 96       	adiw	r28, 0x04	; 4
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	08 95       	ret

000012e0 <PORTD_pin_set_isc>:
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <PORTD_pin_set_isc+0x6>
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <PORTD_pin_set_isc+0x8>
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	8b 83       	std	Y+3, r24	; 0x03
    12ee:	6c 83       	std	Y+4, r22	; 0x04
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	88 2f       	mov	r24, r24
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	80 59       	subi	r24, 0x90	; 144
    12f8:	9b 4f       	sbci	r25, 0xFB	; 251
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	9a 83       	std	Y+2, r25	; 0x02
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	9a 81       	ldd	r25, Y+2	; 0x02
    1302:	fc 01       	movw	r30, r24
    1304:	80 81       	ld	r24, Z
    1306:	98 2f       	mov	r25, r24
    1308:	98 7f       	andi	r25, 0xF8	; 248
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	89 2b       	or	r24, r25
    130e:	28 2f       	mov	r18, r24
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	9a 81       	ldd	r25, Y+2	; 0x02
    1314:	fc 01       	movw	r30, r24
    1316:	20 83       	st	Z, r18
    1318:	00 00       	nop
    131a:	24 96       	adiw	r28, 0x04	; 4
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	08 95       	ret

00001326 <PD6_set_pull_mode>:
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	1f 92       	push	r1
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	69 81       	ldd	r22, Y+1	; 0x01
    1334:	86 e0       	ldi	r24, 0x06	; 6
    1336:	0e 94 3f 09 	call	0x127e	; 0x127e <PORTD_set_pin_pull_mode>
    133a:	00 00       	nop
    133c:	0f 90       	pop	r0
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <PD6_set_isc>:
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	1f 92       	push	r1
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	69 81       	ldd	r22, Y+1	; 0x01
    1352:	86 e0       	ldi	r24, 0x06	; 6
    1354:	0e 94 70 09 	call	0x12e0	; 0x12e0 <PORTD_pin_set_isc>
    1358:	00 00       	nop
    135a:	0f 90       	pop	r0
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	08 95       	ret

00001362 <PB0_set_dir>:
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	1f 92       	push	r1
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	69 81       	ldd	r22, Y+1	; 0x01
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	0e 94 b1 08 	call	0x1162	; 0x1162 <PORTB_set_pin_dir>
    1376:	00 00       	nop
    1378:	0f 90       	pop	r0
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <PB0_set_level>:
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	1f 92       	push	r1
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	69 81       	ldd	r22, Y+1	; 0x01
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	0e 94 05 09 	call	0x120a	; 0x120a <PORTB_set_pin_level>
    1394:	00 00       	nop
    1396:	0f 90       	pop	r0
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	08 95       	ret

0000139e <PB1_set_pull_mode>:
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	1f 92       	push	r1
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	69 81       	ldd	r22, Y+1	; 0x01
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	0e 94 80 08 	call	0x1100	; 0x1100 <PORTB_set_pin_pull_mode>
    13b2:	00 00       	nop
    13b4:	0f 90       	pop	r0
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	08 95       	ret

000013bc <PB1_set_dir>:
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	1f 92       	push	r1
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	69 81       	ldd	r22, Y+1	; 0x01
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	0e 94 b1 08 	call	0x1162	; 0x1162 <PORTB_set_pin_dir>
    13d0:	00 00       	nop
    13d2:	0f 90       	pop	r0
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <mcu_init>:
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	26 97       	sbiw	r28, 0x06	; 6
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	19 82       	std	Y+1, r1	; 0x01
    13ea:	12 c0       	rjmp	.+36     	; 0x1410 <mcu_init+0x36>
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	88 2f       	mov	r24, r24
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	80 5f       	subi	r24, 0xF0	; 240
    13f4:	9b 4f       	sbci	r25, 0xFB	; 251
    13f6:	29 81       	ldd	r18, Y+1	; 0x01
    13f8:	22 2f       	mov	r18, r18
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	20 5f       	subi	r18, 0xF0	; 240
    13fe:	3b 4f       	sbci	r19, 0xFB	; 251
    1400:	f9 01       	movw	r30, r18
    1402:	20 81       	ld	r18, Z
    1404:	28 60       	ori	r18, 0x08	; 8
    1406:	fc 01       	movw	r30, r24
    1408:	20 83       	st	Z, r18
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	8f 5f       	subi	r24, 0xFF	; 255
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	88 30       	cpi	r24, 0x08	; 8
    1414:	58 f3       	brcs	.-42     	; 0x13ec <mcu_init+0x12>
    1416:	1a 82       	std	Y+2, r1	; 0x02
    1418:	12 c0       	rjmp	.+36     	; 0x143e <mcu_init+0x64>
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	80 5d       	subi	r24, 0xD0	; 208
    1422:	9b 4f       	sbci	r25, 0xFB	; 251
    1424:	2a 81       	ldd	r18, Y+2	; 0x02
    1426:	22 2f       	mov	r18, r18
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	20 5d       	subi	r18, 0xD0	; 208
    142c:	3b 4f       	sbci	r19, 0xFB	; 251
    142e:	f9 01       	movw	r30, r18
    1430:	20 81       	ld	r18, Z
    1432:	28 60       	ori	r18, 0x08	; 8
    1434:	fc 01       	movw	r30, r24
    1436:	20 83       	st	Z, r18
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	8f 5f       	subi	r24, 0xFF	; 255
    143c:	8a 83       	std	Y+2, r24	; 0x02
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	88 30       	cpi	r24, 0x08	; 8
    1442:	58 f3       	brcs	.-42     	; 0x141a <mcu_init+0x40>
    1444:	1b 82       	std	Y+3, r1	; 0x03
    1446:	12 c0       	rjmp	.+36     	; 0x146c <mcu_init+0x92>
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	80 5b       	subi	r24, 0xB0	; 176
    1450:	9b 4f       	sbci	r25, 0xFB	; 251
    1452:	2b 81       	ldd	r18, Y+3	; 0x03
    1454:	22 2f       	mov	r18, r18
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	20 5b       	subi	r18, 0xB0	; 176
    145a:	3b 4f       	sbci	r19, 0xFB	; 251
    145c:	f9 01       	movw	r30, r18
    145e:	20 81       	ld	r18, Z
    1460:	28 60       	ori	r18, 0x08	; 8
    1462:	fc 01       	movw	r30, r24
    1464:	20 83       	st	Z, r18
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	8f 5f       	subi	r24, 0xFF	; 255
    146a:	8b 83       	std	Y+3, r24	; 0x03
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	88 30       	cpi	r24, 0x08	; 8
    1470:	58 f3       	brcs	.-42     	; 0x1448 <mcu_init+0x6e>
    1472:	1c 82       	std	Y+4, r1	; 0x04
    1474:	12 c0       	rjmp	.+36     	; 0x149a <mcu_init+0xc0>
    1476:	8c 81       	ldd	r24, Y+4	; 0x04
    1478:	88 2f       	mov	r24, r24
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	80 59       	subi	r24, 0x90	; 144
    147e:	9b 4f       	sbci	r25, 0xFB	; 251
    1480:	2c 81       	ldd	r18, Y+4	; 0x04
    1482:	22 2f       	mov	r18, r18
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	20 59       	subi	r18, 0x90	; 144
    1488:	3b 4f       	sbci	r19, 0xFB	; 251
    148a:	f9 01       	movw	r30, r18
    148c:	20 81       	ld	r18, Z
    148e:	28 60       	ori	r18, 0x08	; 8
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	8f 5f       	subi	r24, 0xFF	; 255
    1498:	8c 83       	std	Y+4, r24	; 0x04
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	88 30       	cpi	r24, 0x08	; 8
    149e:	58 f3       	brcs	.-42     	; 0x1476 <mcu_init+0x9c>
    14a0:	1d 82       	std	Y+5, r1	; 0x05
    14a2:	12 c0       	rjmp	.+36     	; 0x14c8 <mcu_init+0xee>
    14a4:	8d 81       	ldd	r24, Y+5	; 0x05
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	80 57       	subi	r24, 0x70	; 112
    14ac:	9b 4f       	sbci	r25, 0xFB	; 251
    14ae:	2d 81       	ldd	r18, Y+5	; 0x05
    14b0:	22 2f       	mov	r18, r18
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	20 57       	subi	r18, 0x70	; 112
    14b6:	3b 4f       	sbci	r19, 0xFB	; 251
    14b8:	f9 01       	movw	r30, r18
    14ba:	20 81       	ld	r18, Z
    14bc:	28 60       	ori	r18, 0x08	; 8
    14be:	fc 01       	movw	r30, r24
    14c0:	20 83       	st	Z, r18
    14c2:	8d 81       	ldd	r24, Y+5	; 0x05
    14c4:	8f 5f       	subi	r24, 0xFF	; 255
    14c6:	8d 83       	std	Y+5, r24	; 0x05
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	88 30       	cpi	r24, 0x08	; 8
    14cc:	58 f3       	brcs	.-42     	; 0x14a4 <mcu_init+0xca>
    14ce:	1e 82       	std	Y+6, r1	; 0x06
    14d0:	12 c0       	rjmp	.+36     	; 0x14f6 <mcu_init+0x11c>
    14d2:	8e 81       	ldd	r24, Y+6	; 0x06
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	80 55       	subi	r24, 0x50	; 80
    14da:	9b 4f       	sbci	r25, 0xFB	; 251
    14dc:	2e 81       	ldd	r18, Y+6	; 0x06
    14de:	22 2f       	mov	r18, r18
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	20 55       	subi	r18, 0x50	; 80
    14e4:	3b 4f       	sbci	r19, 0xFB	; 251
    14e6:	f9 01       	movw	r30, r18
    14e8:	20 81       	ld	r18, Z
    14ea:	28 60       	ori	r18, 0x08	; 8
    14ec:	fc 01       	movw	r30, r24
    14ee:	20 83       	st	Z, r18
    14f0:	8e 81       	ldd	r24, Y+6	; 0x06
    14f2:	8f 5f       	subi	r24, 0xFF	; 255
    14f4:	8e 83       	std	Y+6, r24	; 0x06
    14f6:	8e 81       	ldd	r24, Y+6	; 0x06
    14f8:	88 30       	cpi	r24, 0x08	; 8
    14fa:	58 f3       	brcs	.-42     	; 0x14d2 <mcu_init+0xf8>
    14fc:	00 00       	nop
    14fe:	26 96       	adiw	r28, 0x06	; 6
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <USART_0_initialization>:
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	0e 94 de 09 	call	0x13bc	; 0x13bc <PB1_set_dir>
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	0e 94 cf 09 	call	0x139e	; 0x139e <PB1_set_pull_mode>
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	0e 94 b1 09 	call	0x1362	; 0x1362 <PB0_set_dir>
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	0e 94 c0 09 	call	0x1380	; 0x1380 <PB0_set_level>
    152a:	0e 94 a7 10 	call	0x214e	; 0x214e <USART_0_init>
    152e:	00 00       	nop
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	08 95       	ret

00001536 <ADC_0_initialization>:

void ADC_0_initialization(void)
{
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62

	// Disable digital input buffer
	PD6_set_isc(PORT_ISC_INPUT_DISABLE_gc);
    153e:	84 e0       	ldi	r24, 0x04	; 4
    1540:	0e 94 a2 09 	call	0x1344	; 0x1344 <PD6_set_isc>
	// Disable pull-up resistor
	PD6_set_pull_mode(PORT_PULL_OFF);
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	0e 94 93 09 	call	0x1326	; 0x1326 <PD6_set_pull_mode>

	ADC_0_init();
    154a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <ADC_0_init>
}
    154e:	00 00       	nop
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	08 95       	ret

00001556 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    155e:	0e 94 ed 09 	call	0x13da	; 0x13da <mcu_init>
	ADC_0_initialization();
    1562:	0e 94 9b 0a 	call	0x1536	; 0x1536 <ADC_0_initialization>


	CLKCTRL_init();
    1566:	0e 94 73 08 	call	0x10e6	; 0x10e6 <CLKCTRL_init>

//	scheduler_timeout_init();

	USART_0_initialization();
    156a:	0e 94 85 0a 	call	0x150a	; 0x150a <USART_0_initialization>
	return;
    156e:	00 00       	nop
	CPUINT_init();

	SLPCTRL_init();

	BOD_init();
}
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	08 95       	ret

00001576 <write_buffer>:
#define ntohs(n) NTOHS(n)

#define htonl(n) HTONL(n)
#define ntohl(n) NTOHL(n)

void write_buffer(uint8_t *buffer, uint8_t size) {
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	25 97       	sbiw	r28, 0x05	; 5
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	8b 83       	std	Y+3, r24	; 0x03
    1586:	9c 83       	std	Y+4, r25	; 0x04
    1588:	6d 83       	std	Y+5, r22	; 0x05
	
	int i = 0;
    158a:	19 82       	std	Y+1, r1	; 0x01
    158c:	1a 82       	std	Y+2, r1	; 0x02
	
	while(size > 0) {
    158e:	13 c0       	rjmp	.+38     	; 0x15b6 <write_buffer+0x40>
		USART_0_write(buffer[i++]);
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	9a 81       	ldd	r25, Y+2	; 0x02
    1594:	9c 01       	movw	r18, r24
    1596:	2f 5f       	subi	r18, 0xFF	; 255
    1598:	3f 4f       	sbci	r19, 0xFF	; 255
    159a:	29 83       	std	Y+1, r18	; 0x01
    159c:	3a 83       	std	Y+2, r19	; 0x02
    159e:	9c 01       	movw	r18, r24
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	82 0f       	add	r24, r18
    15a6:	93 1f       	adc	r25, r19
    15a8:	fc 01       	movw	r30, r24
    15aa:	80 81       	ld	r24, Z
    15ac:	0e 94 cd 10 	call	0x219a	; 0x219a <USART_0_write>
		size--;
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	81 50       	subi	r24, 0x01	; 1
    15b4:	8d 83       	std	Y+5, r24	; 0x05

void write_buffer(uint8_t *buffer, uint8_t size) {
	
	int i = 0;
	
	while(size > 0) {
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	88 23       	and	r24, r24
    15ba:	51 f7       	brne	.-44     	; 0x1590 <write_buffer+0x1a>
		USART_0_write(buffer[i++]);
		size--;
	}
}
    15bc:	00 00       	nop
    15be:	25 96       	adiw	r28, 0x05	; 5
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	08 95       	ret

000015ca <read_buffer>:

void read_buffer(uint8_t *buffer, uint8_t size) {
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	25 97       	sbiw	r28, 0x05	; 5
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	8b 83       	std	Y+3, r24	; 0x03
    15de:	9c 83       	std	Y+4, r25	; 0x04
    15e0:	6d 83       	std	Y+5, r22	; 0x05
	int i = 0;
    15e2:	19 82       	std	Y+1, r1	; 0x01
    15e4:	1a 82       	std	Y+2, r1	; 0x02
	
	while(size > 0){
    15e6:	15 c0       	rjmp	.+42     	; 0x1612 <read_buffer+0x48>
		buffer[i++] = USART_0_read();
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	9a 81       	ldd	r25, Y+2	; 0x02
    15ec:	9c 01       	movw	r18, r24
    15ee:	2f 5f       	subi	r18, 0xFF	; 255
    15f0:	3f 4f       	sbci	r19, 0xFF	; 255
    15f2:	29 83       	std	Y+1, r18	; 0x01
    15f4:	3a 83       	std	Y+2, r19	; 0x02
    15f6:	9c 01       	movw	r18, r24
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	8c 01       	movw	r16, r24
    15fe:	02 0f       	add	r16, r18
    1600:	13 1f       	adc	r17, r19
    1602:	0e 94 bb 10 	call	0x2176	; 0x2176 <USART_0_read>
    1606:	f8 01       	movw	r30, r16
    1608:	80 83       	st	Z, r24
		asm("nop");
    160a:	00 00       	nop
		size--;
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	81 50       	subi	r24, 0x01	; 1
    1610:	8d 83       	std	Y+5, r24	; 0x05
}

void read_buffer(uint8_t *buffer, uint8_t size) {
	int i = 0;
	
	while(size > 0){
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	88 23       	and	r24, r24
    1616:	41 f7       	brne	.-48     	; 0x15e8 <read_buffer+0x1e>
		buffer[i++] = USART_0_read();
		asm("nop");
		size--;
	}
}
    1618:	00 00       	nop
    161a:	25 96       	adiw	r28, 0x05	; 5
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	08 95       	ret

0000162a <copy_buffer>:

void copy_buffer(uint8_t *dest, uint8_t *src, uint8_t size) {
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	27 97       	sbiw	r28, 0x07	; 7
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	8b 83       	std	Y+3, r24	; 0x03
    163a:	9c 83       	std	Y+4, r25	; 0x04
    163c:	6d 83       	std	Y+5, r22	; 0x05
    163e:	7e 83       	std	Y+6, r23	; 0x06
    1640:	4f 83       	std	Y+7, r20	; 0x07
	
	for(int i = 0; i < size; ++i) {
    1642:	19 82       	std	Y+1, r1	; 0x01
    1644:	1a 82       	std	Y+2, r1	; 0x02
    1646:	15 c0       	rjmp	.+42     	; 0x1672 <copy_buffer+0x48>
		dest[i] = src[i];
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	9a 81       	ldd	r25, Y+2	; 0x02
    164c:	2b 81       	ldd	r18, Y+3	; 0x03
    164e:	3c 81       	ldd	r19, Y+4	; 0x04
    1650:	82 0f       	add	r24, r18
    1652:	93 1f       	adc	r25, r19
    1654:	29 81       	ldd	r18, Y+1	; 0x01
    1656:	3a 81       	ldd	r19, Y+2	; 0x02
    1658:	4d 81       	ldd	r20, Y+5	; 0x05
    165a:	5e 81       	ldd	r21, Y+6	; 0x06
    165c:	24 0f       	add	r18, r20
    165e:	35 1f       	adc	r19, r21
    1660:	f9 01       	movw	r30, r18
    1662:	20 81       	ld	r18, Z
    1664:	fc 01       	movw	r30, r24
    1666:	20 83       	st	Z, r18
	}
}

void copy_buffer(uint8_t *dest, uint8_t *src, uint8_t size) {
	
	for(int i = 0; i < size; ++i) {
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	9a 81       	ldd	r25, Y+2	; 0x02
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	9a 83       	std	Y+2, r25	; 0x02
    1672:	8f 81       	ldd	r24, Y+7	; 0x07
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	9a 81       	ldd	r25, Y+2	; 0x02
    167c:	82 17       	cp	r24, r18
    167e:	93 07       	cpc	r25, r19
    1680:	1c f3       	brlt	.-58     	; 0x1648 <copy_buffer+0x1e>
		dest[i] = src[i];
	}
}
    1682:	00 00       	nop
    1684:	27 96       	adiw	r28, 0x07	; 7
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret

00001690 <send_handshake>:

bool send_handshake() {
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	e2 97       	sbiw	r28, 0x32	; 50
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	de bf       	out	0x3e, r29	; 62
	handshake_ack ack;
	
	uint8_t recv_buffer[ACK_HANDSHAKE_BUFF_SIZE];
	
	/* Set data into the handshake structure in network format */
	h.header = htons(0xEF01);
    169e:	8f ee       	ldi	r24, 0xEF	; 239
    16a0:	91 e0       	ldi	r25, 0x01	; 1
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	9a 83       	std	Y+2, r25	; 0x02
	h.module_address = htonl(CHIP_ADDRESS);
    16a6:	8f ef       	ldi	r24, 0xFF	; 255
    16a8:	9f ef       	ldi	r25, 0xFF	; 255
    16aa:	dc 01       	movw	r26, r24
    16ac:	8b 83       	std	Y+3, r24	; 0x03
    16ae:	9c 83       	std	Y+4, r25	; 0x04
    16b0:	ad 83       	std	Y+5, r26	; 0x05
    16b2:	be 83       	std	Y+6, r27	; 0x06
	h.package_identifier = 0x01;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	8f 83       	std	Y+7, r24	; 0x07
	h.package_length = htons(0x0004);
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	94 e0       	ldi	r25, 0x04	; 4
    16bc:	88 87       	std	Y+8, r24	; 0x08
    16be:	99 87       	std	Y+9, r25	; 0x09
	h.instruction_code = 0x17;
    16c0:	87 e1       	ldi	r24, 0x17	; 23
    16c2:	8a 87       	std	Y+10, r24	; 0x0a
	h.control_code = 0;
    16c4:	1b 86       	std	Y+11, r1	; 0x0b
	h.check_sum = htons(0x001C);
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	9c e1       	ldi	r25, 0x1C	; 28
    16ca:	8c 87       	std	Y+12, r24	; 0x0c
    16cc:	9d 87       	std	Y+13, r25	; 0x0d
	
	uint8_t send_buffer[HANDSHAKE_BUFF_SIZE];
	memcpy(send_buffer, &h, HANDSHAKE_BUFF_SIZE);
    16ce:	2d e0       	ldi	r18, 0x0D	; 13
    16d0:	ce 01       	movw	r24, r28
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	fc 01       	movw	r30, r24
    16d6:	de 01       	movw	r26, r28
    16d8:	96 96       	adiw	r26, 0x26	; 38
    16da:	01 90       	ld	r0, Z+
    16dc:	0d 92       	st	X+, r0
    16de:	2a 95       	dec	r18
    16e0:	e1 f7       	brne	.-8      	; 0x16da <send_handshake+0x4a>
	
	/* Send the handshake until checksum is correct */
	do {
	/* write buffer */
	write_buffer(send_buffer, (HANDSHAKE_BUFF_SIZE) );
    16e2:	ce 01       	movw	r24, r28
    16e4:	86 96       	adiw	r24, 0x26	; 38
    16e6:	6d e0       	ldi	r22, 0x0D	; 13
    16e8:	0e 94 bb 0a 	call	0x1576	; 0x1576 <write_buffer>
	
	/* read buffer (ack) */
	read_buffer(recv_buffer, ACK_HANDSHAKE_BUFF_SIZE);
    16ec:	ce 01       	movw	r24, r28
    16ee:	4a 96       	adiw	r24, 0x1a	; 26
    16f0:	6c e0       	ldi	r22, 0x0C	; 12
    16f2:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <read_buffer>
	
	/* making the structure from recv_buffer */
	copy_buffer(&ack, recv_buffer, ACK_HANDSHAKE_BUFF_SIZE);
    16f6:	9e 01       	movw	r18, r28
    16f8:	26 5e       	subi	r18, 0xE6	; 230
    16fa:	3f 4f       	sbci	r19, 0xFF	; 255
    16fc:	ce 01       	movw	r24, r28
    16fe:	0e 96       	adiw	r24, 0x0e	; 14
    1700:	4c e0       	ldi	r20, 0x0C	; 12
    1702:	b9 01       	movw	r22, r18
    1704:	0e 94 15 0b 	call	0x162a	; 0x162a <copy_buffer>
	
	/* Convert from network to host */
	ack.header = ntohs(ack.header);
    1708:	8e 85       	ldd	r24, Y+14	; 0x0e
    170a:	9f 85       	ldd	r25, Y+15	; 0x0f
    170c:	98 27       	eor	r25, r24
    170e:	89 27       	eor	r24, r25
    1710:	98 27       	eor	r25, r24
    1712:	8e 87       	std	Y+14, r24	; 0x0e
    1714:	9f 87       	std	Y+15, r25	; 0x0f
	ack.module_address = ntohl(ack.module_address);
    1716:	88 89       	ldd	r24, Y+16	; 0x10
    1718:	99 89       	ldd	r25, Y+17	; 0x11
    171a:	aa 89       	ldd	r26, Y+18	; 0x12
    171c:	bb 89       	ldd	r27, Y+19	; 0x13
    171e:	58 2f       	mov	r21, r24
    1720:	44 27       	eor	r20, r20
    1722:	33 27       	eor	r19, r19
    1724:	22 27       	eor	r18, r18
    1726:	88 89       	ldd	r24, Y+16	; 0x10
    1728:	99 89       	ldd	r25, Y+17	; 0x11
    172a:	aa 89       	ldd	r26, Y+18	; 0x12
    172c:	bb 89       	ldd	r27, Y+19	; 0x13
    172e:	88 27       	eor	r24, r24
    1730:	aa 27       	eor	r26, r26
    1732:	bb 27       	eor	r27, r27
    1734:	ba 2f       	mov	r27, r26
    1736:	a9 2f       	mov	r26, r25
    1738:	98 2f       	mov	r25, r24
    173a:	88 27       	eor	r24, r24
    173c:	28 2b       	or	r18, r24
    173e:	39 2b       	or	r19, r25
    1740:	4a 2b       	or	r20, r26
    1742:	5b 2b       	or	r21, r27
    1744:	88 89       	ldd	r24, Y+16	; 0x10
    1746:	99 89       	ldd	r25, Y+17	; 0x11
    1748:	aa 89       	ldd	r26, Y+18	; 0x12
    174a:	bb 89       	ldd	r27, Y+19	; 0x13
    174c:	88 27       	eor	r24, r24
    174e:	99 27       	eor	r25, r25
    1750:	bb 27       	eor	r27, r27
    1752:	89 2f       	mov	r24, r25
    1754:	9a 2f       	mov	r25, r26
    1756:	ab 2f       	mov	r26, r27
    1758:	bb 27       	eor	r27, r27
    175a:	28 2b       	or	r18, r24
    175c:	39 2b       	or	r19, r25
    175e:	4a 2b       	or	r20, r26
    1760:	5b 2b       	or	r21, r27
    1762:	88 89       	ldd	r24, Y+16	; 0x10
    1764:	99 89       	ldd	r25, Y+17	; 0x11
    1766:	aa 89       	ldd	r26, Y+18	; 0x12
    1768:	bb 89       	ldd	r27, Y+19	; 0x13
    176a:	8b 2f       	mov	r24, r27
    176c:	99 27       	eor	r25, r25
    176e:	aa 27       	eor	r26, r26
    1770:	bb 27       	eor	r27, r27
    1772:	82 2b       	or	r24, r18
    1774:	93 2b       	or	r25, r19
    1776:	a4 2b       	or	r26, r20
    1778:	b5 2b       	or	r27, r21
    177a:	88 8b       	std	Y+16, r24	; 0x10
    177c:	99 8b       	std	Y+17, r25	; 0x11
    177e:	aa 8b       	std	Y+18, r26	; 0x12
    1780:	bb 8b       	std	Y+19, r27	; 0x13
	ack.package_length = ntohs(ack.package_length);
    1782:	8d 89       	ldd	r24, Y+21	; 0x15
    1784:	9e 89       	ldd	r25, Y+22	; 0x16
    1786:	98 27       	eor	r25, r24
    1788:	89 27       	eor	r24, r25
    178a:	98 27       	eor	r25, r24
    178c:	8d 8b       	std	Y+21, r24	; 0x15
    178e:	9e 8b       	std	Y+22, r25	; 0x16
	ack.check_sum = ntohs(ack.check_sum);
    1790:	88 8d       	ldd	r24, Y+24	; 0x18
    1792:	99 8d       	ldd	r25, Y+25	; 0x19
    1794:	98 27       	eor	r25, r24
    1796:	89 27       	eor	r24, r25
    1798:	98 27       	eor	r25, r24
    179a:	88 8f       	std	Y+24, r24	; 0x18
    179c:	99 8f       	std	Y+25, r25	; 0x19
	
	} while (ack.package_identifier + ack.package_length + ack.confirmation_code != ack.check_sum);
    179e:	8c 89       	ldd	r24, Y+20	; 0x14
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	8d 89       	ldd	r24, Y+21	; 0x15
    17a6:	9e 89       	ldd	r25, Y+22	; 0x16
    17a8:	28 0f       	add	r18, r24
    17aa:	39 1f       	adc	r19, r25
    17ac:	8f 89       	ldd	r24, Y+23	; 0x17
    17ae:	88 2f       	mov	r24, r24
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	28 0f       	add	r18, r24
    17b4:	39 1f       	adc	r19, r25
    17b6:	88 8d       	ldd	r24, Y+24	; 0x18
    17b8:	99 8d       	ldd	r25, Y+25	; 0x19
    17ba:	28 17       	cp	r18, r24
    17bc:	39 07       	cpc	r19, r25
    17be:	09 f0       	breq	.+2      	; 0x17c2 <send_handshake+0x132>
    17c0:	90 cf       	rjmp	.-224    	; 0x16e2 <send_handshake+0x52>

	if(ack.confirmation_code != 0x00)
    17c2:	8f 89       	ldd	r24, Y+23	; 0x17
    17c4:	88 23       	and	r24, r24
    17c6:	11 f0       	breq	.+4      	; 0x17cc <send_handshake+0x13c>
		return false;
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	01 c0       	rjmp	.+2      	; 0x17ce <send_handshake+0x13e>
		
	return true;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
}
    17ce:	e2 96       	adiw	r28, 0x32	; 50
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	08 95       	ret

000017da <img>:

uint8_t img() {
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	e0 97       	sbiw	r28, 0x30	; 48
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	de bf       	out	0x3e, r29	; 62
	get_img im;
	get_img_ack ack;
	
	uint8_t recv_buffer[ACK_GETIMG_BUFF_SIZE];
	
	im.header = htons(0xEF01);
    17e8:	8f ee       	ldi	r24, 0xEF	; 239
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	9a 83       	std	Y+2, r25	; 0x02
	im.module_address = htonl(CHIP_ADDRESS);
    17f0:	8f ef       	ldi	r24, 0xFF	; 255
    17f2:	9f ef       	ldi	r25, 0xFF	; 255
    17f4:	dc 01       	movw	r26, r24
    17f6:	8b 83       	std	Y+3, r24	; 0x03
    17f8:	9c 83       	std	Y+4, r25	; 0x04
    17fa:	ad 83       	std	Y+5, r26	; 0x05
    17fc:	be 83       	std	Y+6, r27	; 0x06
	im.package_identifier = 0x01;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	8f 83       	std	Y+7, r24	; 0x07
	im.package_length = htons(0x0003);
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	93 e0       	ldi	r25, 0x03	; 3
    1806:	88 87       	std	Y+8, r24	; 0x08
    1808:	99 87       	std	Y+9, r25	; 0x09
	im.instruction_code = 0x01;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	8a 87       	std	Y+10, r24	; 0x0a
	im.check_sum = htons(0x005);
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	95 e0       	ldi	r25, 0x05	; 5
    1812:	8b 87       	std	Y+11, r24	; 0x0b
    1814:	9c 87       	std	Y+12, r25	; 0x0c
	
	uint8_t send_buffer[GETIMG_BUFF_SIZE];
	memcpy(send_buffer, &im, GETIMG_BUFF_SIZE);
    1816:	2c e0       	ldi	r18, 0x0C	; 12
    1818:	ce 01       	movw	r24, r28
    181a:	01 96       	adiw	r24, 0x01	; 1
    181c:	fc 01       	movw	r30, r24
    181e:	de 01       	movw	r26, r28
    1820:	95 96       	adiw	r26, 0x25	; 37
    1822:	01 90       	ld	r0, Z+
    1824:	0d 92       	st	X+, r0
    1826:	2a 95       	dec	r18
    1828:	e1 f7       	brne	.-8      	; 0x1822 <img+0x48>
	
	/* Send the handshake until checksum is correct */
	do {
		/* write buffer */
		write_buffer(send_buffer, GETIMG_BUFF_SIZE);
    182a:	ce 01       	movw	r24, r28
    182c:	85 96       	adiw	r24, 0x25	; 37
    182e:	6c e0       	ldi	r22, 0x0C	; 12
    1830:	0e 94 bb 0a 	call	0x1576	; 0x1576 <write_buffer>
		
		/* read buffer (ack) */
		read_buffer(recv_buffer, ACK_GETIMG_BUFF_SIZE);
    1834:	ce 01       	movw	r24, r28
    1836:	49 96       	adiw	r24, 0x19	; 25
    1838:	6c e0       	ldi	r22, 0x0C	; 12
    183a:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <read_buffer>
		
		/* making the structure from recv_buffer */
		copy_buffer(&ack, recv_buffer, ACK_GETIMG_BUFF_SIZE);
    183e:	9e 01       	movw	r18, r28
    1840:	27 5e       	subi	r18, 0xE7	; 231
    1842:	3f 4f       	sbci	r19, 0xFF	; 255
    1844:	ce 01       	movw	r24, r28
    1846:	0d 96       	adiw	r24, 0x0d	; 13
    1848:	4c e0       	ldi	r20, 0x0C	; 12
    184a:	b9 01       	movw	r22, r18
    184c:	0e 94 15 0b 	call	0x162a	; 0x162a <copy_buffer>
		
		/* Convert from network to host */
		ack.header = ntohs(ack.header);
    1850:	8d 85       	ldd	r24, Y+13	; 0x0d
    1852:	9e 85       	ldd	r25, Y+14	; 0x0e
    1854:	98 27       	eor	r25, r24
    1856:	89 27       	eor	r24, r25
    1858:	98 27       	eor	r25, r24
    185a:	8d 87       	std	Y+13, r24	; 0x0d
    185c:	9e 87       	std	Y+14, r25	; 0x0e
		ack.module_address = ntohl(ack.module_address);
    185e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1860:	98 89       	ldd	r25, Y+16	; 0x10
    1862:	a9 89       	ldd	r26, Y+17	; 0x11
    1864:	ba 89       	ldd	r27, Y+18	; 0x12
    1866:	58 2f       	mov	r21, r24
    1868:	44 27       	eor	r20, r20
    186a:	33 27       	eor	r19, r19
    186c:	22 27       	eor	r18, r18
    186e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1870:	98 89       	ldd	r25, Y+16	; 0x10
    1872:	a9 89       	ldd	r26, Y+17	; 0x11
    1874:	ba 89       	ldd	r27, Y+18	; 0x12
    1876:	88 27       	eor	r24, r24
    1878:	aa 27       	eor	r26, r26
    187a:	bb 27       	eor	r27, r27
    187c:	ba 2f       	mov	r27, r26
    187e:	a9 2f       	mov	r26, r25
    1880:	98 2f       	mov	r25, r24
    1882:	88 27       	eor	r24, r24
    1884:	28 2b       	or	r18, r24
    1886:	39 2b       	or	r19, r25
    1888:	4a 2b       	or	r20, r26
    188a:	5b 2b       	or	r21, r27
    188c:	8f 85       	ldd	r24, Y+15	; 0x0f
    188e:	98 89       	ldd	r25, Y+16	; 0x10
    1890:	a9 89       	ldd	r26, Y+17	; 0x11
    1892:	ba 89       	ldd	r27, Y+18	; 0x12
    1894:	88 27       	eor	r24, r24
    1896:	99 27       	eor	r25, r25
    1898:	bb 27       	eor	r27, r27
    189a:	89 2f       	mov	r24, r25
    189c:	9a 2f       	mov	r25, r26
    189e:	ab 2f       	mov	r26, r27
    18a0:	bb 27       	eor	r27, r27
    18a2:	28 2b       	or	r18, r24
    18a4:	39 2b       	or	r19, r25
    18a6:	4a 2b       	or	r20, r26
    18a8:	5b 2b       	or	r21, r27
    18aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ac:	98 89       	ldd	r25, Y+16	; 0x10
    18ae:	a9 89       	ldd	r26, Y+17	; 0x11
    18b0:	ba 89       	ldd	r27, Y+18	; 0x12
    18b2:	8b 2f       	mov	r24, r27
    18b4:	99 27       	eor	r25, r25
    18b6:	aa 27       	eor	r26, r26
    18b8:	bb 27       	eor	r27, r27
    18ba:	82 2b       	or	r24, r18
    18bc:	93 2b       	or	r25, r19
    18be:	a4 2b       	or	r26, r20
    18c0:	b5 2b       	or	r27, r21
    18c2:	8f 87       	std	Y+15, r24	; 0x0f
    18c4:	98 8b       	std	Y+16, r25	; 0x10
    18c6:	a9 8b       	std	Y+17, r26	; 0x11
    18c8:	ba 8b       	std	Y+18, r27	; 0x12
		ack.package_length = ntohs(ack.package_length);
    18ca:	8c 89       	ldd	r24, Y+20	; 0x14
    18cc:	9d 89       	ldd	r25, Y+21	; 0x15
    18ce:	98 27       	eor	r25, r24
    18d0:	89 27       	eor	r24, r25
    18d2:	98 27       	eor	r25, r24
    18d4:	8c 8b       	std	Y+20, r24	; 0x14
    18d6:	9d 8b       	std	Y+21, r25	; 0x15
		ack.check_sum = ntohs(ack.check_sum);
    18d8:	8f 89       	ldd	r24, Y+23	; 0x17
    18da:	98 8d       	ldd	r25, Y+24	; 0x18
    18dc:	98 27       	eor	r25, r24
    18de:	89 27       	eor	r24, r25
    18e0:	98 27       	eor	r25, r24
    18e2:	8f 8b       	std	Y+23, r24	; 0x17
    18e4:	98 8f       	std	Y+24, r25	; 0x18
		
	} while (ack.package_identifier + ack.package_length + ack.confirmation_code != ack.check_sum);
    18e6:	8b 89       	ldd	r24, Y+19	; 0x13
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	8c 89       	ldd	r24, Y+20	; 0x14
    18ee:	9d 89       	ldd	r25, Y+21	; 0x15
    18f0:	28 0f       	add	r18, r24
    18f2:	39 1f       	adc	r19, r25
    18f4:	8e 89       	ldd	r24, Y+22	; 0x16
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	28 0f       	add	r18, r24
    18fc:	39 1f       	adc	r19, r25
    18fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1900:	98 8d       	ldd	r25, Y+24	; 0x18
    1902:	28 17       	cp	r18, r24
    1904:	39 07       	cpc	r19, r25
    1906:	09 f0       	breq	.+2      	; 0x190a <img+0x130>
    1908:	90 cf       	rjmp	.-224    	; 0x182a <img+0x50>

	return ack.confirmation_code;
    190a:	8e 89       	ldd	r24, Y+22	; 0x16
}
    190c:	e0 96       	adiw	r28, 0x30	; 48
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <img_to_tz>:

uint8_t img_to_tz(uint8_t buffer_id) {
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	e3 97       	sbiw	r28, 0x33	; 51
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	8b ab       	std	Y+51, r24	; 0x33
	img2tz im;
	img2tz_ack ack;
	
	uint8_t recv_buffer[ACK_IMG2TZ_BUFF_SIZE];
	
	im.header = htons(0xEF01);
    1928:	8f ee       	ldi	r24, 0xEF	; 239
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	9a 83       	std	Y+2, r25	; 0x02
	im.module_address = htonl(CHIP_ADDRESS);
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	9f ef       	ldi	r25, 0xFF	; 255
    1934:	dc 01       	movw	r26, r24
    1936:	8b 83       	std	Y+3, r24	; 0x03
    1938:	9c 83       	std	Y+4, r25	; 0x04
    193a:	ad 83       	std	Y+5, r26	; 0x05
    193c:	be 83       	std	Y+6, r27	; 0x06
	im.package_identifier = 0x01;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	8f 83       	std	Y+7, r24	; 0x07
	im.package_length = htons(0x0004);
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	94 e0       	ldi	r25, 0x04	; 4
    1946:	88 87       	std	Y+8, r24	; 0x08
    1948:	99 87       	std	Y+9, r25	; 0x09
	im.instruction_code = 0x02;
    194a:	82 e0       	ldi	r24, 0x02	; 2
    194c:	8a 87       	std	Y+10, r24	; 0x0a
	im.buffer_id = buffer_id;
    194e:	8b a9       	ldd	r24, Y+51	; 0x33
    1950:	8b 87       	std	Y+11, r24	; 0x0b
	im.check_sum = htons(0x01 + 0x0004 + 0x02 + buffer_id);
    1952:	8b a9       	ldd	r24, Y+51	; 0x33
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	07 96       	adiw	r24, 0x07	; 7
    195a:	98 27       	eor	r25, r24
    195c:	89 27       	eor	r24, r25
    195e:	98 27       	eor	r25, r24
    1960:	8c 87       	std	Y+12, r24	; 0x0c
    1962:	9d 87       	std	Y+13, r25	; 0x0d
	
	uint8_t send_buffer[IMG2TZ_BUFF_SIZE];
	memcpy(send_buffer, &im, IMG2TZ_BUFF_SIZE);
    1964:	2d e0       	ldi	r18, 0x0D	; 13
    1966:	ce 01       	movw	r24, r28
    1968:	01 96       	adiw	r24, 0x01	; 1
    196a:	fc 01       	movw	r30, r24
    196c:	de 01       	movw	r26, r28
    196e:	96 96       	adiw	r26, 0x26	; 38
    1970:	01 90       	ld	r0, Z+
    1972:	0d 92       	st	X+, r0
    1974:	2a 95       	dec	r18
    1976:	e1 f7       	brne	.-8      	; 0x1970 <img_to_tz+0x58>
	
	/* Send the handshake until checksum is correct */
	do {
		/* write buffer */
		write_buffer(send_buffer, IMG2TZ_BUFF_SIZE);
    1978:	ce 01       	movw	r24, r28
    197a:	86 96       	adiw	r24, 0x26	; 38
    197c:	6d e0       	ldi	r22, 0x0D	; 13
    197e:	0e 94 bb 0a 	call	0x1576	; 0x1576 <write_buffer>
		
		/* read buffer (ack) */
		read_buffer(recv_buffer, ACK_IMG2TZ_BUFF_SIZE);
    1982:	ce 01       	movw	r24, r28
    1984:	4a 96       	adiw	r24, 0x1a	; 26
    1986:	6c e0       	ldi	r22, 0x0C	; 12
    1988:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <read_buffer>
		
		/* making the structure from recv_buffer */
		copy_buffer(&ack, recv_buffer, ACK_IMG2TZ_BUFF_SIZE);
    198c:	9e 01       	movw	r18, r28
    198e:	26 5e       	subi	r18, 0xE6	; 230
    1990:	3f 4f       	sbci	r19, 0xFF	; 255
    1992:	ce 01       	movw	r24, r28
    1994:	0e 96       	adiw	r24, 0x0e	; 14
    1996:	4c e0       	ldi	r20, 0x0C	; 12
    1998:	b9 01       	movw	r22, r18
    199a:	0e 94 15 0b 	call	0x162a	; 0x162a <copy_buffer>
		
		/* Convert from network to host */
		ack.header = ntohs(ack.header);
    199e:	8e 85       	ldd	r24, Y+14	; 0x0e
    19a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    19a2:	98 27       	eor	r25, r24
    19a4:	89 27       	eor	r24, r25
    19a6:	98 27       	eor	r25, r24
    19a8:	8e 87       	std	Y+14, r24	; 0x0e
    19aa:	9f 87       	std	Y+15, r25	; 0x0f
		ack.module_address = ntohl(ack.module_address);
    19ac:	88 89       	ldd	r24, Y+16	; 0x10
    19ae:	99 89       	ldd	r25, Y+17	; 0x11
    19b0:	aa 89       	ldd	r26, Y+18	; 0x12
    19b2:	bb 89       	ldd	r27, Y+19	; 0x13
    19b4:	58 2f       	mov	r21, r24
    19b6:	44 27       	eor	r20, r20
    19b8:	33 27       	eor	r19, r19
    19ba:	22 27       	eor	r18, r18
    19bc:	88 89       	ldd	r24, Y+16	; 0x10
    19be:	99 89       	ldd	r25, Y+17	; 0x11
    19c0:	aa 89       	ldd	r26, Y+18	; 0x12
    19c2:	bb 89       	ldd	r27, Y+19	; 0x13
    19c4:	88 27       	eor	r24, r24
    19c6:	aa 27       	eor	r26, r26
    19c8:	bb 27       	eor	r27, r27
    19ca:	ba 2f       	mov	r27, r26
    19cc:	a9 2f       	mov	r26, r25
    19ce:	98 2f       	mov	r25, r24
    19d0:	88 27       	eor	r24, r24
    19d2:	28 2b       	or	r18, r24
    19d4:	39 2b       	or	r19, r25
    19d6:	4a 2b       	or	r20, r26
    19d8:	5b 2b       	or	r21, r27
    19da:	88 89       	ldd	r24, Y+16	; 0x10
    19dc:	99 89       	ldd	r25, Y+17	; 0x11
    19de:	aa 89       	ldd	r26, Y+18	; 0x12
    19e0:	bb 89       	ldd	r27, Y+19	; 0x13
    19e2:	88 27       	eor	r24, r24
    19e4:	99 27       	eor	r25, r25
    19e6:	bb 27       	eor	r27, r27
    19e8:	89 2f       	mov	r24, r25
    19ea:	9a 2f       	mov	r25, r26
    19ec:	ab 2f       	mov	r26, r27
    19ee:	bb 27       	eor	r27, r27
    19f0:	28 2b       	or	r18, r24
    19f2:	39 2b       	or	r19, r25
    19f4:	4a 2b       	or	r20, r26
    19f6:	5b 2b       	or	r21, r27
    19f8:	88 89       	ldd	r24, Y+16	; 0x10
    19fa:	99 89       	ldd	r25, Y+17	; 0x11
    19fc:	aa 89       	ldd	r26, Y+18	; 0x12
    19fe:	bb 89       	ldd	r27, Y+19	; 0x13
    1a00:	8b 2f       	mov	r24, r27
    1a02:	99 27       	eor	r25, r25
    1a04:	aa 27       	eor	r26, r26
    1a06:	bb 27       	eor	r27, r27
    1a08:	82 2b       	or	r24, r18
    1a0a:	93 2b       	or	r25, r19
    1a0c:	a4 2b       	or	r26, r20
    1a0e:	b5 2b       	or	r27, r21
    1a10:	88 8b       	std	Y+16, r24	; 0x10
    1a12:	99 8b       	std	Y+17, r25	; 0x11
    1a14:	aa 8b       	std	Y+18, r26	; 0x12
    1a16:	bb 8b       	std	Y+19, r27	; 0x13
		ack.package_length = ntohs(ack.package_length);
    1a18:	8d 89       	ldd	r24, Y+21	; 0x15
    1a1a:	9e 89       	ldd	r25, Y+22	; 0x16
    1a1c:	98 27       	eor	r25, r24
    1a1e:	89 27       	eor	r24, r25
    1a20:	98 27       	eor	r25, r24
    1a22:	8d 8b       	std	Y+21, r24	; 0x15
    1a24:	9e 8b       	std	Y+22, r25	; 0x16
		ack.check_sum = ntohs(ack.check_sum);
    1a26:	88 8d       	ldd	r24, Y+24	; 0x18
    1a28:	99 8d       	ldd	r25, Y+25	; 0x19
    1a2a:	98 27       	eor	r25, r24
    1a2c:	89 27       	eor	r24, r25
    1a2e:	98 27       	eor	r25, r24
    1a30:	88 8f       	std	Y+24, r24	; 0x18
    1a32:	99 8f       	std	Y+25, r25	; 0x19
		
	} while (ack.package_identifier + ack.package_length + ack.confirmation_code != ack.check_sum);
    1a34:	8c 89       	ldd	r24, Y+20	; 0x14
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	8d 89       	ldd	r24, Y+21	; 0x15
    1a3c:	9e 89       	ldd	r25, Y+22	; 0x16
    1a3e:	28 0f       	add	r18, r24
    1a40:	39 1f       	adc	r19, r25
    1a42:	8f 89       	ldd	r24, Y+23	; 0x17
    1a44:	88 2f       	mov	r24, r24
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	28 0f       	add	r18, r24
    1a4a:	39 1f       	adc	r19, r25
    1a4c:	88 8d       	ldd	r24, Y+24	; 0x18
    1a4e:	99 8d       	ldd	r25, Y+25	; 0x19
    1a50:	28 17       	cp	r18, r24
    1a52:	39 07       	cpc	r19, r25
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <img_to_tz+0x140>
    1a56:	90 cf       	rjmp	.-224    	; 0x1978 <img_to_tz+0x60>

	return ack.confirmation_code;
    1a58:	8f 89       	ldd	r24, Y+23	; 0x17
}
    1a5a:	e3 96       	adiw	r28, 0x33	; 51
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	de bf       	out	0x3e, r29	; 62
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	08 95       	ret

00001a66 <search_library>:

search_return search_library(uint8_t buffer_id, uint16_t start_page, uint16_t page_id) {
    1a66:	2f 92       	push	r2
    1a68:	3f 92       	push	r3
    1a6a:	4f 92       	push	r4
    1a6c:	5f 92       	push	r5
    1a6e:	6f 92       	push	r6
    1a70:	7f 92       	push	r7
    1a72:	8f 92       	push	r8
    1a74:	9f 92       	push	r9
    1a76:	af 92       	push	r10
    1a78:	bf 92       	push	r11
    1a7a:	cf 92       	push	r12
    1a7c:	df 92       	push	r13
    1a7e:	ef 92       	push	r14
    1a80:	ff 92       	push	r15
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	c3 55       	subi	r28, 0x53	; 83
    1a90:	d1 09       	sbc	r29, r1
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	9e 01       	movw	r18, r28
    1a98:	21 5b       	subi	r18, 0xB1	; 177
    1a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9c:	f9 01       	movw	r30, r18
    1a9e:	80 83       	st	Z, r24
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	80 5b       	subi	r24, 0xB0	; 176
    1aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	60 83       	st	Z, r22
    1aaa:	71 83       	std	Z+1, r23	; 0x01
    1aac:	ce 01       	movw	r24, r28
    1aae:	8e 5a       	subi	r24, 0xAE	; 174
    1ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	40 83       	st	Z, r20
    1ab6:	51 83       	std	Z+1, r21	; 0x01
	volatile search s;
	volatile search_ack ack;
	
	volatile uint8_t recv_buffer[ACK_SEARCH_BUFF_SIZE];
	
	s.header = htons(0xEF01);
    1ab8:	8f ee       	ldi	r24, 0xEF	; 239
    1aba:	91 e0       	ldi	r25, 0x01	; 1
    1abc:	8e 83       	std	Y+6, r24	; 0x06
    1abe:	9f 83       	std	Y+7, r25	; 0x07
	s.module_address = htonl(CHIP_ADDRESS);
    1ac0:	8f ef       	ldi	r24, 0xFF	; 255
    1ac2:	9f ef       	ldi	r25, 0xFF	; 255
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	88 87       	std	Y+8, r24	; 0x08
    1ac8:	99 87       	std	Y+9, r25	; 0x09
    1aca:	aa 87       	std	Y+10, r26	; 0x0a
    1acc:	bb 87       	std	Y+11, r27	; 0x0b
	s.package_identifier = 0x01;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	8c 87       	std	Y+12, r24	; 0x0c
	s.package_length = htons(0x0008);
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	98 e0       	ldi	r25, 0x08	; 8
    1ad6:	8d 87       	std	Y+13, r24	; 0x0d
    1ad8:	9e 87       	std	Y+14, r25	; 0x0e
	s.instruction_code = 0x04;
    1ada:	84 e0       	ldi	r24, 0x04	; 4
    1adc:	8f 87       	std	Y+15, r24	; 0x0f
	s.buffer_id = buffer_id;
    1ade:	ce 01       	movw	r24, r28
    1ae0:	81 5b       	subi	r24, 0xB1	; 177
    1ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	80 81       	ld	r24, Z
    1ae8:	88 8b       	std	Y+16, r24	; 0x10
	s.start_page = htons(start_page);
    1aea:	ce 01       	movw	r24, r28
    1aec:	80 5b       	subi	r24, 0xB0	; 176
    1aee:	9f 4f       	sbci	r25, 0xFF	; 255
    1af0:	fc 01       	movw	r30, r24
    1af2:	80 81       	ld	r24, Z
    1af4:	91 81       	ldd	r25, Z+1	; 0x01
    1af6:	98 27       	eor	r25, r24
    1af8:	89 27       	eor	r24, r25
    1afa:	98 27       	eor	r25, r24
    1afc:	89 8b       	std	Y+17, r24	; 0x11
    1afe:	9a 8b       	std	Y+18, r25	; 0x12
	s.page_id = htons(page_id);
    1b00:	ce 01       	movw	r24, r28
    1b02:	8e 5a       	subi	r24, 0xAE	; 174
    1b04:	9f 4f       	sbci	r25, 0xFF	; 255
    1b06:	fc 01       	movw	r30, r24
    1b08:	80 81       	ld	r24, Z
    1b0a:	91 81       	ldd	r25, Z+1	; 0x01
    1b0c:	98 27       	eor	r25, r24
    1b0e:	89 27       	eor	r24, r25
    1b10:	98 27       	eor	r25, r24
    1b12:	8b 8b       	std	Y+19, r24	; 0x13
    1b14:	9c 8b       	std	Y+20, r25	; 0x14
	volatile value = 0x01 + 0x0008 + 0x04 + buffer_id + start_page + page_id;
    1b16:	ce 01       	movw	r24, r28
    1b18:	81 5b       	subi	r24, 0xB1	; 177
    1b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	80 81       	ld	r24, Z
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	ce 01       	movw	r24, r28
    1b26:	80 5b       	subi	r24, 0xB0	; 176
    1b28:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	80 81       	ld	r24, Z
    1b2e:	91 81       	ldd	r25, Z+1	; 0x01
    1b30:	28 0f       	add	r18, r24
    1b32:	39 1f       	adc	r19, r25
    1b34:	ce 01       	movw	r24, r28
    1b36:	8e 5a       	subi	r24, 0xAE	; 174
    1b38:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	80 81       	ld	r24, Z
    1b3e:	91 81       	ldd	r25, Z+1	; 0x01
    1b40:	82 0f       	add	r24, r18
    1b42:	93 1f       	adc	r25, r19
    1b44:	0d 96       	adiw	r24, 0x0d	; 13
    1b46:	8f ab       	std	Y+55, r24	; 0x37
    1b48:	98 af       	std	Y+56, r25	; 0x38
	s.check_sum = htons(0x01 + 0x0008 + 0x04 + buffer_id + start_page + page_id);
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	81 5b       	subi	r24, 0xB1	; 177
    1b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b50:	fc 01       	movw	r30, r24
    1b52:	80 81       	ld	r24, Z
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	ce 01       	movw	r24, r28
    1b5a:	80 5b       	subi	r24, 0xB0	; 176
    1b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5e:	fc 01       	movw	r30, r24
    1b60:	80 81       	ld	r24, Z
    1b62:	91 81       	ldd	r25, Z+1	; 0x01
    1b64:	28 0f       	add	r18, r24
    1b66:	39 1f       	adc	r19, r25
    1b68:	ce 01       	movw	r24, r28
    1b6a:	8e 5a       	subi	r24, 0xAE	; 174
    1b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6e:	fc 01       	movw	r30, r24
    1b70:	80 81       	ld	r24, Z
    1b72:	91 81       	ldd	r25, Z+1	; 0x01
    1b74:	82 0f       	add	r24, r18
    1b76:	93 1f       	adc	r25, r19
    1b78:	0d 96       	adiw	r24, 0x0d	; 13
    1b7a:	98 27       	eor	r25, r24
    1b7c:	89 27       	eor	r24, r25
    1b7e:	98 27       	eor	r25, r24
    1b80:	8d 8b       	std	Y+21, r24	; 0x15
    1b82:	9e 8b       	std	Y+22, r25	; 0x16
	
	volatile uint8_t send_buffer[SEARCH_BUFF_SIZE];
	memcpy(send_buffer, &s, SEARCH_BUFF_SIZE);
    1b84:	81 e1       	ldi	r24, 0x11	; 17
    1b86:	fe 01       	movw	r30, r28
    1b88:	36 96       	adiw	r30, 0x06	; 6
    1b8a:	de 01       	movw	r26, r28
    1b8c:	d9 96       	adiw	r26, 0x39	; 57
    1b8e:	01 90       	ld	r0, Z+
    1b90:	0d 92       	st	X+, r0
    1b92:	8a 95       	dec	r24
    1b94:	e1 f7       	brne	.-8      	; 0x1b8e <search_library+0x128>
	
	/* Send the handshake until checksum is correct */
	do {
		/* write buffer */
		write_buffer(send_buffer, SEARCH_BUFF_SIZE);
    1b96:	ce 01       	movw	r24, r28
    1b98:	c9 96       	adiw	r24, 0x39	; 57
    1b9a:	61 e1       	ldi	r22, 0x11	; 17
    1b9c:	0e 94 bb 0a 	call	0x1576	; 0x1576 <write_buffer>
		
		/* read buffer (ack) */
		read_buffer(recv_buffer, ACK_SEARCH_BUFF_SIZE);
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	87 96       	adiw	r24, 0x27	; 39
    1ba4:	60 e1       	ldi	r22, 0x10	; 16
    1ba6:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <read_buffer>
		
		/* making the structure from recv_buffer */
		copy_buffer(&ack, recv_buffer, ACK_SEARCH_BUFF_SIZE);
    1baa:	9e 01       	movw	r18, r28
    1bac:	29 5d       	subi	r18, 0xD9	; 217
    1bae:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	47 96       	adiw	r24, 0x17	; 23
    1bb4:	40 e1       	ldi	r20, 0x10	; 16
    1bb6:	b9 01       	movw	r22, r18
    1bb8:	0e 94 15 0b 	call	0x162a	; 0x162a <copy_buffer>
		
		/* Convert from network to host */
		ack.header = ntohs(ack.header);
    1bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc0:	38 2f       	mov	r19, r24
    1bc2:	22 27       	eor	r18, r18
    1bc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc8:	89 2f       	mov	r24, r25
    1bca:	99 27       	eor	r25, r25
    1bcc:	82 2b       	or	r24, r18
    1bce:	93 2b       	or	r25, r19
    1bd0:	8f 8b       	std	Y+23, r24	; 0x17
    1bd2:	98 8f       	std	Y+24, r25	; 0x18
		ack.module_address = ntohl(ack.module_address);
    1bd4:	89 8d       	ldd	r24, Y+25	; 0x19
    1bd6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bd8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1bda:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1bdc:	58 2f       	mov	r21, r24
    1bde:	44 27       	eor	r20, r20
    1be0:	33 27       	eor	r19, r19
    1be2:	22 27       	eor	r18, r18
    1be4:	89 8d       	ldd	r24, Y+25	; 0x19
    1be6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1be8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1bea:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1bec:	88 27       	eor	r24, r24
    1bee:	aa 27       	eor	r26, r26
    1bf0:	bb 27       	eor	r27, r27
    1bf2:	ba 2f       	mov	r27, r26
    1bf4:	a9 2f       	mov	r26, r25
    1bf6:	98 2f       	mov	r25, r24
    1bf8:	88 27       	eor	r24, r24
    1bfa:	28 2b       	or	r18, r24
    1bfc:	39 2b       	or	r19, r25
    1bfe:	4a 2b       	or	r20, r26
    1c00:	5b 2b       	or	r21, r27
    1c02:	89 8d       	ldd	r24, Y+25	; 0x19
    1c04:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c06:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1c08:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1c0a:	88 27       	eor	r24, r24
    1c0c:	99 27       	eor	r25, r25
    1c0e:	bb 27       	eor	r27, r27
    1c10:	89 2f       	mov	r24, r25
    1c12:	9a 2f       	mov	r25, r26
    1c14:	ab 2f       	mov	r26, r27
    1c16:	bb 27       	eor	r27, r27
    1c18:	28 2b       	or	r18, r24
    1c1a:	39 2b       	or	r19, r25
    1c1c:	4a 2b       	or	r20, r26
    1c1e:	5b 2b       	or	r21, r27
    1c20:	89 8d       	ldd	r24, Y+25	; 0x19
    1c22:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c24:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1c26:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1c28:	8b 2f       	mov	r24, r27
    1c2a:	99 27       	eor	r25, r25
    1c2c:	aa 27       	eor	r26, r26
    1c2e:	bb 27       	eor	r27, r27
    1c30:	82 2b       	or	r24, r18
    1c32:	93 2b       	or	r25, r19
    1c34:	a4 2b       	or	r26, r20
    1c36:	b5 2b       	or	r27, r21
    1c38:	89 8f       	std	Y+25, r24	; 0x19
    1c3a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c3c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c3e:	bc 8f       	std	Y+28, r27	; 0x1c
		ack.package_length = ntohs(ack.package_length);
    1c40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c42:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c44:	38 2f       	mov	r19, r24
    1c46:	22 27       	eor	r18, r18
    1c48:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c4a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c4c:	89 2f       	mov	r24, r25
    1c4e:	99 27       	eor	r25, r25
    1c50:	82 2b       	or	r24, r18
    1c52:	93 2b       	or	r25, r19
    1c54:	8e 8f       	std	Y+30, r24	; 0x1e
    1c56:	9f 8f       	std	Y+31, r25	; 0x1f
		ack.page_id = ntohs(ack.page_id);
    1c58:	89 a1       	ldd	r24, Y+33	; 0x21
    1c5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c5c:	38 2f       	mov	r19, r24
    1c5e:	22 27       	eor	r18, r18
    1c60:	89 a1       	ldd	r24, Y+33	; 0x21
    1c62:	9a a1       	ldd	r25, Y+34	; 0x22
    1c64:	89 2f       	mov	r24, r25
    1c66:	99 27       	eor	r25, r25
    1c68:	82 2b       	or	r24, r18
    1c6a:	93 2b       	or	r25, r19
    1c6c:	89 a3       	std	Y+33, r24	; 0x21
    1c6e:	9a a3       	std	Y+34, r25	; 0x22
		ack.match_score = ntohs(ack.match_score);
    1c70:	8b a1       	ldd	r24, Y+35	; 0x23
    1c72:	9c a1       	ldd	r25, Y+36	; 0x24
    1c74:	38 2f       	mov	r19, r24
    1c76:	22 27       	eor	r18, r18
    1c78:	8b a1       	ldd	r24, Y+35	; 0x23
    1c7a:	9c a1       	ldd	r25, Y+36	; 0x24
    1c7c:	89 2f       	mov	r24, r25
    1c7e:	99 27       	eor	r25, r25
    1c80:	82 2b       	or	r24, r18
    1c82:	93 2b       	or	r25, r19
    1c84:	8b a3       	std	Y+35, r24	; 0x23
    1c86:	9c a3       	std	Y+36, r25	; 0x24
		ack.check_sum = ntohs(ack.check_sum);
    1c88:	8d a1       	ldd	r24, Y+37	; 0x25
    1c8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8c:	38 2f       	mov	r19, r24
    1c8e:	22 27       	eor	r18, r18
    1c90:	8d a1       	ldd	r24, Y+37	; 0x25
    1c92:	9e a1       	ldd	r25, Y+38	; 0x26
    1c94:	89 2f       	mov	r24, r25
    1c96:	99 27       	eor	r25, r25
    1c98:	82 2b       	or	r24, r18
    1c9a:	93 2b       	or	r25, r19
    1c9c:	8d a3       	std	Y+37, r24	; 0x25
    1c9e:	9e a3       	std	Y+38, r25	; 0x26
		
	} while (ack.package_identifier + ack.package_length + ack.confirmation_code + ack.page_id + ack.match_score != ack.check_sum);
    1ca0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ca8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1caa:	28 0f       	add	r18, r24
    1cac:	39 1f       	adc	r19, r25
    1cae:	88 a1       	ldd	r24, Y+32	; 0x20
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	28 0f       	add	r18, r24
    1cb6:	39 1f       	adc	r19, r25
    1cb8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cba:	9a a1       	ldd	r25, Y+34	; 0x22
    1cbc:	28 0f       	add	r18, r24
    1cbe:	39 1f       	adc	r19, r25
    1cc0:	8b a1       	ldd	r24, Y+35	; 0x23
    1cc2:	9c a1       	ldd	r25, Y+36	; 0x24
    1cc4:	28 0f       	add	r18, r24
    1cc6:	39 1f       	adc	r19, r25
    1cc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cca:	9e a1       	ldd	r25, Y+38	; 0x26
    1ccc:	28 17       	cp	r18, r24
    1cce:	39 07       	cpc	r19, r25
    1cd0:	09 f0       	breq	.+2      	; 0x1cd4 <search_library+0x26e>
    1cd2:	61 cf       	rjmp	.-318    	; 0x1b96 <search_library+0x130>


	search_return return_value;
	return_value.confirmation_code = ack.confirmation_code;
    1cd4:	28 a1       	ldd	r18, Y+32	; 0x20
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	86 5b       	subi	r24, 0xB6	; 182
    1cda:	9f 4f       	sbci	r25, 0xFF	; 255
    1cdc:	fc 01       	movw	r30, r24
    1cde:	20 83       	st	Z, r18
	return_value.page_id = ack.page_id;
    1ce0:	29 a1       	ldd	r18, Y+33	; 0x21
    1ce2:	3a a1       	ldd	r19, Y+34	; 0x22
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	86 5b       	subi	r24, 0xB6	; 182
    1ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cea:	fc 01       	movw	r30, r24
    1cec:	21 83       	std	Z+1, r18	; 0x01
    1cee:	32 83       	std	Z+2, r19	; 0x02
	return_value.match_score = ack.match_score;
    1cf0:	2b a1       	ldd	r18, Y+35	; 0x23
    1cf2:	3c a1       	ldd	r19, Y+36	; 0x24
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	86 5b       	subi	r24, 0xB6	; 182
    1cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	23 83       	std	Z+3, r18	; 0x03
    1cfe:	34 83       	std	Z+4, r19	; 0x04
	
	return return_value;
    1d00:	ce 01       	movw	r24, r28
    1d02:	86 5b       	subi	r24, 0xB6	; 182
    1d04:	9f 4f       	sbci	r25, 0xFF	; 255
    1d06:	25 e0       	ldi	r18, 0x05	; 5
    1d08:	fc 01       	movw	r30, r24
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	01 96       	adiw	r24, 0x01	; 1
    1d0e:	dc 01       	movw	r26, r24
    1d10:	01 90       	ld	r0, Z+
    1d12:	0d 92       	st	X+, r0
    1d14:	2a 95       	dec	r18
    1d16:	e1 f7       	brne	.-8      	; 0x1d10 <search_library+0x2aa>
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	49 81       	ldd	r20, Y+1	; 0x01
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	2b 81       	ldd	r18, Y+3	; 0x03
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9c 81       	ldd	r25, Y+4	; 0x04
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	24 2e       	mov	r2, r20
    1d2e:	33 2e       	mov	r3, r19
    1d30:	42 2e       	mov	r4, r18
    1d32:	59 2e       	mov	r5, r25
    1d34:	68 2e       	mov	r6, r24
    1d36:	a2 2c       	mov	r10, r2
    1d38:	b3 2c       	mov	r11, r3
    1d3a:	c4 2c       	mov	r12, r4
    1d3c:	d5 2c       	mov	r13, r5
    1d3e:	e6 2c       	mov	r14, r6
    1d40:	f7 2c       	mov	r15, r7
    1d42:	08 2d       	mov	r16, r8
    1d44:	19 2d       	mov	r17, r9
	
    1d46:	2a 2d       	mov	r18, r10
    1d48:	3b 2d       	mov	r19, r11
    1d4a:	4c 2d       	mov	r20, r12
    1d4c:	5d 2d       	mov	r21, r13
    1d4e:	6e 2d       	mov	r22, r14
    1d50:	7f 2d       	mov	r23, r15
    1d52:	80 2f       	mov	r24, r16
    1d54:	91 2f       	mov	r25, r17
    1d56:	cd 5a       	subi	r28, 0xAD	; 173
    1d58:	df 4f       	sbci	r29, 0xFF	; 255
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	ff 90       	pop	r15
    1d68:	ef 90       	pop	r14
    1d6a:	df 90       	pop	r13
    1d6c:	cf 90       	pop	r12
    1d6e:	bf 90       	pop	r11
    1d70:	af 90       	pop	r10
    1d72:	9f 90       	pop	r9
    1d74:	8f 90       	pop	r8
    1d76:	7f 90       	pop	r7
    1d78:	6f 90       	pop	r6
    1d7a:	5f 90       	pop	r5
    1d7c:	4f 90       	pop	r4
    1d7e:	3f 90       	pop	r3
    1d80:	2f 90       	pop	r2
    1d82:	08 95       	ret

00001d84 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    1d84:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    1d86:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    1d88:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    1d8a:	40 83       	st	Z, r20
	ret                             // Return to caller
    1d8c:	08 95       	ret

00001d8e <SPI_0_init>:
 * \return Nothing
 */
void SPI_0_disable()
{
	SPI0.CTRLA &= ~SPI_ENABLE_bm;
}
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	80 ec       	ldi	r24, 0xC0	; 192
    1d98:	98 e0       	ldi	r25, 0x08	; 8
    1d9a:	21 e3       	ldi	r18, 0x31	; 49
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	20 83       	st	Z, r18
    1da0:	10 92 10 28 	sts	0x2810, r1	; 0x802810 <SPI_0_desc>
    1da4:	00 00       	nop
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	08 95       	ret

00001dac <SPI_0_enable>:
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	80 ec       	ldi	r24, 0xC0	; 192
    1db6:	98 e0       	ldi	r25, 0x08	; 8
    1db8:	20 ec       	ldi	r18, 0xC0	; 192
    1dba:	38 e0       	ldi	r19, 0x08	; 8
    1dbc:	f9 01       	movw	r30, r18
    1dbe:	20 81       	ld	r18, Z
    1dc0:	21 60       	ori	r18, 0x01	; 1
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	20 83       	st	Z, r18
    1dc6:	00 00       	nop
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	08 95       	ret

00001dce <SPI_0_exchange_byte>:
 * \param[in] data The byte to transfer
 *
 * \return Received data byte.
 */
uint8_t SPI_0_exchange_byte(uint8_t data)
{
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	1f 92       	push	r1
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	89 83       	std	Y+1, r24	; 0x01
	// Blocking wait for SPI free makes the function work
	// seamlessly also with IRQ drivers.
	while (SPI_0_desc.status == SPI_BUSY)
    1dda:	00 00       	nop
    1ddc:	80 91 10 28 	lds	r24, 0x2810	; 0x802810 <SPI_0_desc>
    1de0:	82 30       	cpi	r24, 0x02	; 2
    1de2:	e1 f3       	breq	.-8      	; 0x1ddc <SPI_0_exchange_byte+0xe>
		;
	SPI0.DATA = data;
    1de4:	80 ec       	ldi	r24, 0xC0	; 192
    1de6:	98 e0       	ldi	r25, 0x08	; 8
    1de8:	29 81       	ldd	r18, Y+1	; 0x01
    1dea:	fc 01       	movw	r30, r24
    1dec:	24 83       	std	Z+4, r18	; 0x04
	while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
    1dee:	00 00       	nop
    1df0:	80 ec       	ldi	r24, 0xC0	; 192
    1df2:	98 e0       	ldi	r25, 0x08	; 8
    1df4:	fc 01       	movw	r30, r24
    1df6:	83 81       	ldd	r24, Z+3	; 0x03
    1df8:	88 23       	and	r24, r24
    1dfa:	d4 f7       	brge	.-12     	; 0x1df0 <SPI_0_exchange_byte+0x22>
		;
	return SPI0.DATA;
    1dfc:	80 ec       	ldi	r24, 0xC0	; 192
    1dfe:	98 e0       	ldi	r25, 0x08	; 8
    1e00:	fc 01       	movw	r30, r24
    1e02:	84 81       	ldd	r24, Z+4	; 0x04
}
    1e04:	0f 90       	pop	r0
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	08 95       	ret

00001e0c <scheduler_dummy_handler>:
		scheduler_start_timer_at_head();
	} else {
		if (scheduler_is_running)
			RTC.INTCTRL |= RTC_OVF_bm;
	}
}
    1e0c:	cf 93       	push	r28
    1e0e:	df 93       	push	r29
    1e10:	00 d0       	rcall	.+0      	; 0x1e12 <scheduler_dummy_handler+0x6>
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	9a 83       	std	Y+2, r25	; 0x02
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	dc 01       	movw	r26, r24
    1e20:	bc 01       	movw	r22, r24
    1e22:	cd 01       	movw	r24, r26
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	08 95       	ret

00001e2e <scheduler_stop_timeouts>:
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	80 e4       	ldi	r24, 0x40	; 64
    1e38:	91 e0       	ldi	r25, 0x01	; 1
    1e3a:	20 e4       	ldi	r18, 0x40	; 64
    1e3c:	31 e0       	ldi	r19, 0x01	; 1
    1e3e:	f9 01       	movw	r30, r18
    1e40:	22 81       	ldd	r18, Z+2	; 0x02
    1e42:	2e 7f       	andi	r18, 0xFE	; 254
    1e44:	fc 01       	movw	r30, r24
    1e46:	22 83       	std	Z+2, r18	; 0x02
    1e48:	10 92 15 28 	sts	0x2815, r1	; 0x802815 <scheduler_absolute_time_of_last_timeout>
    1e4c:	10 92 16 28 	sts	0x2816, r1	; 0x802816 <scheduler_absolute_time_of_last_timeout+0x1>
    1e50:	10 92 17 28 	sts	0x2817, r1	; 0x802817 <scheduler_absolute_time_of_last_timeout+0x2>
    1e54:	10 92 18 28 	sts	0x2818, r1	; 0x802818 <scheduler_absolute_time_of_last_timeout+0x3>
    1e58:	10 92 1d 28 	sts	0x281D, r1	; 0x80281d <scheduler_is_running>
    1e5c:	00 00       	nop
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	08 95       	ret

00001e64 <scheduler_set_timer_duration>:
    1e64:	ef 92       	push	r14
    1e66:	ff 92       	push	r15
    1e68:	0f 93       	push	r16
    1e6a:	1f 93       	push	r17
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <scheduler_set_timer_duration+0xe>
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <scheduler_set_timer_duration+0x10>
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	69 83       	std	Y+1, r22	; 0x01
    1e7a:	7a 83       	std	Y+2, r23	; 0x02
    1e7c:	8b 83       	std	Y+3, r24	; 0x03
    1e7e:	9c 83       	std	Y+4, r25	; 0x04
    1e80:	2f ef       	ldi	r18, 0xFF	; 255
    1e82:	3f ef       	ldi	r19, 0xFF	; 255
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8c:	ab 81       	ldd	r26, Y+3	; 0x03
    1e8e:	bc 81       	ldd	r27, Y+4	; 0x04
    1e90:	79 01       	movw	r14, r18
    1e92:	8a 01       	movw	r16, r20
    1e94:	e8 1a       	sub	r14, r24
    1e96:	f9 0a       	sbc	r15, r25
    1e98:	0a 0b       	sbc	r16, r26
    1e9a:	1b 0b       	sbc	r17, r27
    1e9c:	d8 01       	movw	r26, r16
    1e9e:	c7 01       	movw	r24, r14
    1ea0:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <scheduler_last_timer_load>
    1ea4:	90 93 1a 28 	sts	0x281A, r25	; 0x80281a <scheduler_last_timer_load+0x1>
    1ea8:	a0 93 1b 28 	sts	0x281B, r26	; 0x80281b <scheduler_last_timer_load+0x2>
    1eac:	b0 93 1c 28 	sts	0x281C, r27	; 0x80281c <scheduler_last_timer_load+0x3>
    1eb0:	20 e4       	ldi	r18, 0x40	; 64
    1eb2:	31 e0       	ldi	r19, 0x01	; 1
    1eb4:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <scheduler_last_timer_load>
    1eb8:	90 91 1a 28 	lds	r25, 0x281A	; 0x80281a <scheduler_last_timer_load+0x1>
    1ebc:	a0 91 1b 28 	lds	r26, 0x281B	; 0x80281b <scheduler_last_timer_load+0x2>
    1ec0:	b0 91 1c 28 	lds	r27, 0x281C	; 0x80281c <scheduler_last_timer_load+0x3>
    1ec4:	f9 01       	movw	r30, r18
    1ec6:	80 87       	std	Z+8, r24	; 0x08
    1ec8:	91 87       	std	Z+9, r25	; 0x09
    1eca:	00 00       	nop
    1ecc:	80 e4       	ldi	r24, 0x40	; 64
    1ece:	91 e0       	ldi	r25, 0x01	; 1
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	81 81       	ldd	r24, Z+1	; 0x01
    1ed4:	88 2f       	mov	r24, r24
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	82 70       	andi	r24, 0x02	; 2
    1eda:	99 27       	eor	r25, r25
    1edc:	89 2b       	or	r24, r25
    1ede:	b1 f7       	brne	.-20     	; 0x1ecc <scheduler_set_timer_duration+0x68>
    1ee0:	00 00       	nop
    1ee2:	24 96       	adiw	r28, 0x04	; 4
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	1f 91       	pop	r17
    1eee:	0f 91       	pop	r16
    1ef0:	ff 90       	pop	r15
    1ef2:	ef 90       	pop	r14
    1ef4:	08 95       	ret

00001ef6 <scheduler_start_timer_at_head>:
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <scheduler_start_timer_at_head+0x6>
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <scheduler_start_timer_at_head+0x8>
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	80 e4       	ldi	r24, 0x40	; 64
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	20 e4       	ldi	r18, 0x40	; 64
    1f08:	31 e0       	ldi	r19, 0x01	; 1
    1f0a:	f9 01       	movw	r30, r18
    1f0c:	22 81       	ldd	r18, Z+2	; 0x02
    1f0e:	2e 7f       	andi	r18, 0xFE	; 254
    1f10:	fc 01       	movw	r30, r24
    1f12:	22 83       	std	Z+2, r18	; 0x02
    1f14:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <scheduler_list_head>
    1f18:	90 91 12 28 	lds	r25, 0x2812	; 0x802812 <scheduler_list_head+0x1>
    1f1c:	89 2b       	or	r24, r25
    1f1e:	19 f4       	brne	.+6      	; 0x1f26 <scheduler_start_timer_at_head+0x30>
    1f20:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <scheduler_stop_timeouts>
    1f24:	68 c0       	rjmp	.+208    	; 0x1ff6 <scheduler_start_timer_at_head+0x100>
    1f26:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <scheduler_list_head>
    1f2a:	90 91 12 28 	lds	r25, 0x2812	; 0x802812 <scheduler_list_head+0x1>
    1f2e:	89 2b       	or	r24, r25
    1f30:	51 f0       	breq	.+20     	; 0x1f46 <scheduler_start_timer_at_head+0x50>
    1f32:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <scheduler_list_head>
    1f36:	90 91 12 28 	lds	r25, 0x2812	; 0x802812 <scheduler_list_head+0x1>
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	86 81       	ldd	r24, Z+6	; 0x06
    1f3e:	97 81       	ldd	r25, Z+7	; 0x07
    1f40:	a0 85       	ldd	r26, Z+8	; 0x08
    1f42:	b1 85       	ldd	r27, Z+9	; 0x09
    1f44:	03 c0       	rjmp	.+6      	; 0x1f4c <scheduler_start_timer_at_head+0x56>
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	20 91 15 28 	lds	r18, 0x2815	; 0x802815 <scheduler_absolute_time_of_last_timeout>
    1f50:	30 91 16 28 	lds	r19, 0x2816	; 0x802816 <scheduler_absolute_time_of_last_timeout+0x1>
    1f54:	40 91 17 28 	lds	r20, 0x2817	; 0x802817 <scheduler_absolute_time_of_last_timeout+0x2>
    1f58:	50 91 18 28 	lds	r21, 0x2818	; 0x802818 <scheduler_absolute_time_of_last_timeout+0x3>
    1f5c:	82 1b       	sub	r24, r18
    1f5e:	93 0b       	sbc	r25, r19
    1f60:	a4 0b       	sbc	r26, r20
    1f62:	b5 0b       	sbc	r27, r21
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	ab 83       	std	Y+3, r26	; 0x03
    1f6a:	bc 83       	std	Y+4, r27	; 0x04
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	ab 81       	ldd	r26, Y+3	; 0x03
    1f72:	bc 81       	ldd	r27, Y+4	; 0x04
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	a1 40       	sbci	r26, 0x01	; 1
    1f78:	b1 05       	cpc	r27, r1
    1f7a:	48 f1       	brcs	.+82     	; 0x1fce <scheduler_start_timer_at_head+0xd8>
    1f7c:	80 91 15 28 	lds	r24, 0x2815	; 0x802815 <scheduler_absolute_time_of_last_timeout>
    1f80:	90 91 16 28 	lds	r25, 0x2816	; 0x802816 <scheduler_absolute_time_of_last_timeout+0x1>
    1f84:	a0 91 17 28 	lds	r26, 0x2817	; 0x802817 <scheduler_absolute_time_of_last_timeout+0x2>
    1f88:	b0 91 18 28 	lds	r27, 0x2818	; 0x802818 <scheduler_absolute_time_of_last_timeout+0x3>
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	af 4f       	sbci	r26, 0xFF	; 255
    1f90:	bf 4f       	sbci	r27, 0xFF	; 255
    1f92:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <scheduler_dummy+0x6>
    1f96:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <scheduler_dummy+0x7>
    1f9a:	a0 93 09 28 	sts	0x2809, r26	; 0x802809 <scheduler_dummy+0x8>
    1f9e:	b0 93 0a 28 	sts	0x280A, r27	; 0x80280a <scheduler_dummy+0x9>
    1fa2:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <scheduler_list_head>
    1fa6:	90 91 12 28 	lds	r25, 0x2812	; 0x802812 <scheduler_list_head+0x1>
    1faa:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <scheduler_dummy+0x4>
    1fae:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <scheduler_dummy+0x5>
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	98 e2       	ldi	r25, 0x28	; 40
    1fb6:	80 93 11 28 	sts	0x2811, r24	; 0x802811 <scheduler_list_head>
    1fba:	90 93 12 28 	sts	0x2812, r25	; 0x802812 <scheduler_list_head+0x1>
    1fbe:	8f ef       	ldi	r24, 0xFF	; 255
    1fc0:	9f ef       	ldi	r25, 0xFF	; 255
    1fc2:	a0 e0       	ldi	r26, 0x00	; 0
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	9a 83       	std	Y+2, r25	; 0x02
    1fca:	ab 83       	std	Y+3, r26	; 0x03
    1fcc:	bc 83       	std	Y+4, r27	; 0x04
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	ab 81       	ldd	r26, Y+3	; 0x03
    1fd4:	bc 81       	ldd	r27, Y+4	; 0x04
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <scheduler_set_timer_duration>
    1fde:	80 e4       	ldi	r24, 0x40	; 64
    1fe0:	91 e0       	ldi	r25, 0x01	; 1
    1fe2:	20 e4       	ldi	r18, 0x40	; 64
    1fe4:	31 e0       	ldi	r19, 0x01	; 1
    1fe6:	f9 01       	movw	r30, r18
    1fe8:	22 81       	ldd	r18, Z+2	; 0x02
    1fea:	21 60       	ori	r18, 0x01	; 1
    1fec:	fc 01       	movw	r30, r24
    1fee:	22 83       	std	Z+2, r18	; 0x02
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <scheduler_is_running>
    1ff6:	24 96       	adiw	r28, 0x04	; 4
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	df 91       	pop	r29
    1ffe:	cf 91       	pop	r28
    2000:	08 95       	ret

00002002 <scheduler_enqueue_callback>:
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	00 d0       	rcall	.+0      	; 0x2008 <scheduler_enqueue_callback+0x6>
    2008:	00 d0       	rcall	.+0      	; 0x200a <scheduler_enqueue_callback+0x8>
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	8b 83       	std	Y+3, r24	; 0x03
    2010:	9c 83       	std	Y+4, r25	; 0x04
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	9c 81       	ldd	r25, Y+4	; 0x04
    2016:	fc 01       	movw	r30, r24
    2018:	14 82       	std	Z+4, r1	; 0x04
    201a:	15 82       	std	Z+5, r1	; 0x05
    201c:	80 91 13 28 	lds	r24, 0x2813	; 0x802813 <scheduler_execute_queue_head>
    2020:	90 91 14 28 	lds	r25, 0x2814	; 0x802814 <scheduler_execute_queue_head+0x1>
    2024:	89 2b       	or	r24, r25
    2026:	39 f4       	brne	.+14     	; 0x2036 <scheduler_enqueue_callback+0x34>
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	9c 81       	ldd	r25, Y+4	; 0x04
    202c:	80 93 13 28 	sts	0x2813, r24	; 0x802813 <scheduler_execute_queue_head>
    2030:	90 93 14 28 	sts	0x2814, r25	; 0x802814 <scheduler_execute_queue_head+0x1>
    2034:	1c c0       	rjmp	.+56     	; 0x206e <scheduler_enqueue_callback+0x6c>
    2036:	80 91 13 28 	lds	r24, 0x2813	; 0x802813 <scheduler_execute_queue_head>
    203a:	90 91 14 28 	lds	r25, 0x2814	; 0x802814 <scheduler_execute_queue_head+0x1>
    203e:	89 83       	std	Y+1, r24	; 0x01
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	07 c0       	rjmp	.+14     	; 0x2052 <scheduler_enqueue_callback+0x50>
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	fc 01       	movw	r30, r24
    204a:	84 81       	ldd	r24, Z+4	; 0x04
    204c:	95 81       	ldd	r25, Z+5	; 0x05
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	9a 83       	std	Y+2, r25	; 0x02
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	9a 81       	ldd	r25, Y+2	; 0x02
    2056:	fc 01       	movw	r30, r24
    2058:	84 81       	ldd	r24, Z+4	; 0x04
    205a:	95 81       	ldd	r25, Z+5	; 0x05
    205c:	89 2b       	or	r24, r25
    205e:	91 f7       	brne	.-28     	; 0x2044 <scheduler_enqueue_callback+0x42>
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	9a 81       	ldd	r25, Y+2	; 0x02
    2064:	2b 81       	ldd	r18, Y+3	; 0x03
    2066:	3c 81       	ldd	r19, Y+4	; 0x04
    2068:	fc 01       	movw	r30, r24
    206a:	24 83       	std	Z+4, r18	; 0x04
    206c:	35 83       	std	Z+5, r19	; 0x05
    206e:	24 96       	adiw	r28, 0x04	; 4
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	08 95       	ret

0000207a <__vector_3>:

// NOTE: assumes the callback completes before the next timer tick
ISR(RTC_CNT_vect)
{
    207a:	1f 92       	push	r1
    207c:	0f 92       	push	r0
    207e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2082:	0f 92       	push	r0
    2084:	11 24       	eor	r1, r1
    2086:	2f 93       	push	r18
    2088:	3f 93       	push	r19
    208a:	4f 93       	push	r20
    208c:	5f 93       	push	r21
    208e:	6f 93       	push	r22
    2090:	7f 93       	push	r23
    2092:	8f 93       	push	r24
    2094:	9f 93       	push	r25
    2096:	af 93       	push	r26
    2098:	bf 93       	push	r27
    209a:	ef 93       	push	r30
    209c:	ff 93       	push	r31
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <__vector_3+0x2a>
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
	timer_struct_t *next                    = scheduler_list_head->next;
    20a8:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <scheduler_list_head>
    20ac:	90 91 12 28 	lds	r25, 0x2812	; 0x802812 <scheduler_list_head+0x1>
    20b0:	fc 01       	movw	r30, r24
    20b2:	84 81       	ldd	r24, Z+4	; 0x04
    20b4:	95 81       	ldd	r25, Z+5	; 0x05
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	9a 83       	std	Y+2, r25	; 0x02
	scheduler_absolute_time_of_last_timeout = scheduler_list_head->absolute_time;
    20ba:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <scheduler_list_head>
    20be:	90 91 12 28 	lds	r25, 0x2812	; 0x802812 <scheduler_list_head+0x1>
    20c2:	fc 01       	movw	r30, r24
    20c4:	86 81       	ldd	r24, Z+6	; 0x06
    20c6:	97 81       	ldd	r25, Z+7	; 0x07
    20c8:	a0 85       	ldd	r26, Z+8	; 0x08
    20ca:	b1 85       	ldd	r27, Z+9	; 0x09
    20cc:	80 93 15 28 	sts	0x2815, r24	; 0x802815 <scheduler_absolute_time_of_last_timeout>
    20d0:	90 93 16 28 	sts	0x2816, r25	; 0x802816 <scheduler_absolute_time_of_last_timeout+0x1>
    20d4:	a0 93 17 28 	sts	0x2817, r26	; 0x802817 <scheduler_absolute_time_of_last_timeout+0x2>
    20d8:	b0 93 18 28 	sts	0x2818, r27	; 0x802818 <scheduler_absolute_time_of_last_timeout+0x3>
	scheduler_last_timer_load               = 0;
    20dc:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <scheduler_last_timer_load>
    20e0:	10 92 1a 28 	sts	0x281A, r1	; 0x80281a <scheduler_last_timer_load+0x1>
    20e4:	10 92 1b 28 	sts	0x281B, r1	; 0x80281b <scheduler_last_timer_load+0x2>
    20e8:	10 92 1c 28 	sts	0x281C, r1	; 0x80281c <scheduler_last_timer_load+0x3>

	if (scheduler_list_head != &scheduler_dummy)
    20ec:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <scheduler_list_head>
    20f0:	90 91 12 28 	lds	r25, 0x2812	; 0x802812 <scheduler_list_head+0x1>
    20f4:	81 50       	subi	r24, 0x01	; 1
    20f6:	98 42       	sbci	r25, 0x28	; 40
    20f8:	31 f0       	breq	.+12     	; 0x2106 <__vector_3+0x8c>
		scheduler_enqueue_callback(scheduler_list_head);
    20fa:	80 91 11 28 	lds	r24, 0x2811	; 0x802811 <scheduler_list_head>
    20fe:	90 91 12 28 	lds	r25, 0x2812	; 0x802812 <scheduler_list_head+0x1>
    2102:	0e 94 01 10 	call	0x2002	; 0x2002 <scheduler_enqueue_callback>

	// Remove expired timer for the list now (it is always the one at the head)
	scheduler_list_head = next;
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	80 93 11 28 	sts	0x2811, r24	; 0x802811 <scheduler_list_head>
    210e:	90 93 12 28 	sts	0x2812, r25	; 0x802812 <scheduler_list_head+0x1>

	scheduler_start_timer_at_head();
    2112:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <scheduler_start_timer_at_head>

	RTC.INTFLAGS = RTC_OVF_bm;
    2116:	80 e4       	ldi	r24, 0x40	; 64
    2118:	91 e0       	ldi	r25, 0x01	; 1
    211a:	21 e0       	ldi	r18, 0x01	; 1
    211c:	fc 01       	movw	r30, r24
    211e:	23 83       	std	Z+3, r18	; 0x03
}
    2120:	00 00       	nop
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	ff 91       	pop	r31
    212c:	ef 91       	pop	r30
    212e:	bf 91       	pop	r27
    2130:	af 91       	pop	r26
    2132:	9f 91       	pop	r25
    2134:	8f 91       	pop	r24
    2136:	7f 91       	pop	r23
    2138:	6f 91       	pop	r22
    213a:	5f 91       	pop	r21
    213c:	4f 91       	pop	r20
    213e:	3f 91       	pop	r19
    2140:	2f 91       	pop	r18
    2142:	0f 90       	pop	r0
    2144:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2148:	0f 90       	pop	r0
    214a:	1f 90       	pop	r1
    214c:	18 95       	reti

0000214e <USART_0_init>:
 * \retval false Data completely shifted out if the USART shift register
 */
bool USART_0_is_tx_busy()
{
	return (!(USART3.STATUS & USART_TXCIF_bm));
}
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	80 e6       	ldi	r24, 0x60	; 96
    2158:	98 e0       	ldi	r25, 0x08	; 8
    215a:	26 eb       	ldi	r18, 0xB6	; 182
    215c:	32 e0       	ldi	r19, 0x02	; 2
    215e:	fc 01       	movw	r30, r24
    2160:	20 87       	std	Z+8, r18	; 0x08
    2162:	31 87       	std	Z+9, r19	; 0x09
    2164:	80 e6       	ldi	r24, 0x60	; 96
    2166:	98 e0       	ldi	r25, 0x08	; 8
    2168:	20 ec       	ldi	r18, 0xC0	; 192
    216a:	fc 01       	movw	r30, r24
    216c:	26 83       	std	Z+6, r18	; 0x06
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	08 95       	ret

00002176 <USART_0_read>:
 * Function will block if a character is not available.
 *
 * \return Data read from the USART_0 module
 */
uint8_t USART_0_read()
{
    2176:	cf 93       	push	r28
    2178:	df 93       	push	r29
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
	while (!(USART3.STATUS & USART_RXCIF_bm))
    217e:	00 00       	nop
    2180:	80 e6       	ldi	r24, 0x60	; 96
    2182:	98 e0       	ldi	r25, 0x08	; 8
    2184:	fc 01       	movw	r30, r24
    2186:	84 81       	ldd	r24, Z+4	; 0x04
    2188:	88 23       	and	r24, r24
    218a:	d4 f7       	brge	.-12     	; 0x2180 <USART_0_read+0xa>
		;
	return USART3.RXDATAL;
    218c:	80 e6       	ldi	r24, 0x60	; 96
    218e:	98 e0       	ldi	r25, 0x08	; 8
    2190:	fc 01       	movw	r30, r24
    2192:	80 81       	ld	r24, Z
}
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	08 95       	ret

0000219a <USART_0_write>:
 * \param[in] data The character to write to the USART
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
    219a:	cf 93       	push	r28
    219c:	df 93       	push	r29
    219e:	1f 92       	push	r1
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	89 83       	std	Y+1, r24	; 0x01
	while (!(USART3.STATUS & USART_DREIF_bm))
    21a6:	00 00       	nop
    21a8:	80 e6       	ldi	r24, 0x60	; 96
    21aa:	98 e0       	ldi	r25, 0x08	; 8
    21ac:	fc 01       	movw	r30, r24
    21ae:	84 81       	ldd	r24, Z+4	; 0x04
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	80 72       	andi	r24, 0x20	; 32
    21b6:	99 27       	eor	r25, r25
    21b8:	89 2b       	or	r24, r25
    21ba:	b1 f3       	breq	.-20     	; 0x21a8 <USART_0_write+0xe>
		;
	USART3.TXDATAL = data;
    21bc:	80 e6       	ldi	r24, 0x60	; 96
    21be:	98 e0       	ldi	r25, 0x08	; 8
    21c0:	29 81       	ldd	r18, Y+1	; 0x01
    21c2:	fc 01       	movw	r30, r24
    21c4:	22 83       	std	Z+2, r18	; 0x02
}
    21c6:	00 00       	nop
    21c8:	0f 90       	pop	r0
    21ca:	df 91       	pop	r29
    21cc:	cf 91       	pop	r28
    21ce:	08 95       	ret

000021d0 <PORTA_set_pin_dir>:
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_deinit(void)
{
	return M2M_SUCCESS;
}
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <PORTA_set_pin_dir+0x6>
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	6a 83       	std	Y+2, r22	; 0x02
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	81 30       	cpi	r24, 0x01	; 1
    21e6:	91 05       	cpc	r25, r1
    21e8:	e1 f0       	breq	.+56     	; 0x2222 <PORTA_set_pin_dir+0x52>
    21ea:	82 30       	cpi	r24, 0x02	; 2
    21ec:	91 05       	cpc	r25, r1
    21ee:	71 f1       	breq	.+92     	; 0x224c <PORTA_set_pin_dir+0x7c>
    21f0:	89 2b       	or	r24, r25
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <PORTA_set_pin_dir+0x26>
    21f4:	3b c0       	rjmp	.+118    	; 0x226c <PORTA_set_pin_dir+0x9c>
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	fc 01       	movw	r30, r24
    2200:	80 81       	ld	r24, Z
    2202:	68 2f       	mov	r22, r24
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	48 2f       	mov	r20, r24
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <PORTA_set_pin_dir+0x44>
    2210:	88 0f       	add	r24, r24
    2212:	99 1f       	adc	r25, r25
    2214:	4a 95       	dec	r20
    2216:	e2 f7       	brpl	.-8      	; 0x2210 <PORTA_set_pin_dir+0x40>
    2218:	80 95       	com	r24
    221a:	86 23       	and	r24, r22
    221c:	f9 01       	movw	r30, r18
    221e:	80 83       	st	Z, r24
    2220:	25 c0       	rjmp	.+74     	; 0x226c <PORTA_set_pin_dir+0x9c>
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	fc 01       	movw	r30, r24
    222c:	80 81       	ld	r24, Z
    222e:	68 2f       	mov	r22, r24
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	48 2f       	mov	r20, r24
    2234:	50 e0       	ldi	r21, 0x00	; 0
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <PORTA_set_pin_dir+0x70>
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	4a 95       	dec	r20
    2242:	e2 f7       	brpl	.-8      	; 0x223c <PORTA_set_pin_dir+0x6c>
    2244:	86 2b       	or	r24, r22
    2246:	f9 01       	movw	r30, r18
    2248:	80 83       	st	Z, r24
    224a:	10 c0       	rjmp	.+32     	; 0x226c <PORTA_set_pin_dir+0x9c>
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	88 2f       	mov	r24, r24
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	80 5f       	subi	r24, 0xF0	; 240
    2254:	9b 4f       	sbci	r25, 0xFB	; 251
    2256:	29 81       	ldd	r18, Y+1	; 0x01
    2258:	22 2f       	mov	r18, r18
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	20 5f       	subi	r18, 0xF0	; 240
    225e:	3b 4f       	sbci	r19, 0xFB	; 251
    2260:	f9 01       	movw	r30, r18
    2262:	20 81       	ld	r18, Z
    2264:	28 60       	ori	r18, 0x08	; 8
    2266:	fc 01       	movw	r30, r24
    2268:	20 83       	st	Z, r18
    226a:	00 00       	nop
    226c:	00 00       	nop
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	08 95       	ret

00002278 <PORTA_set_pin_level>:
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
    227c:	00 d0       	rcall	.+0      	; 0x227e <PORTA_set_pin_level+0x6>
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	6a 83       	std	Y+2, r22	; 0x02
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	88 23       	and	r24, r24
    228a:	a9 f0       	breq	.+42     	; 0x22b6 <PORTA_set_pin_level+0x3e>
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	fc 01       	movw	r30, r24
    2296:	81 81       	ldd	r24, Z+1	; 0x01
    2298:	68 2f       	mov	r22, r24
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	48 2f       	mov	r20, r24
    229e:	50 e0       	ldi	r21, 0x00	; 0
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <PORTA_set_pin_level+0x32>
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	4a 95       	dec	r20
    22ac:	e2 f7       	brpl	.-8      	; 0x22a6 <PORTA_set_pin_level+0x2e>
    22ae:	86 2b       	or	r24, r22
    22b0:	f9 01       	movw	r30, r18
    22b2:	81 83       	std	Z+1, r24	; 0x01
    22b4:	15 c0       	rjmp	.+42     	; 0x22e0 <PORTA_set_pin_level+0x68>
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	fc 01       	movw	r30, r24
    22c0:	81 81       	ldd	r24, Z+1	; 0x01
    22c2:	68 2f       	mov	r22, r24
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	48 2f       	mov	r20, r24
    22c8:	50 e0       	ldi	r21, 0x00	; 0
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <PORTA_set_pin_level+0x5c>
    22d0:	88 0f       	add	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	4a 95       	dec	r20
    22d6:	e2 f7       	brpl	.-8      	; 0x22d0 <PORTA_set_pin_level+0x58>
    22d8:	80 95       	com	r24
    22da:	86 23       	and	r24, r22
    22dc:	f9 01       	movw	r30, r18
    22de:	81 83       	std	Z+1, r24	; 0x01
    22e0:	00 00       	nop
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	08 95       	ret

000022ec <PORTC_set_pin_pull_mode>:
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <PORTC_set_pin_pull_mode+0x6>
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <PORTC_set_pin_pull_mode+0x8>
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	8b 83       	std	Y+3, r24	; 0x03
    22fa:	6c 83       	std	Y+4, r22	; 0x04
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	88 2f       	mov	r24, r24
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	80 5b       	subi	r24, 0xB0	; 176
    2304:	9b 4f       	sbci	r25, 0xFB	; 251
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	9a 83       	std	Y+2, r25	; 0x02
    230a:	8c 81       	ldd	r24, Y+4	; 0x04
    230c:	81 30       	cpi	r24, 0x01	; 1
    230e:	59 f4       	brne	.+22     	; 0x2326 <PORTC_set_pin_pull_mode+0x3a>
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	9a 81       	ldd	r25, Y+2	; 0x02
    2314:	fc 01       	movw	r30, r24
    2316:	80 81       	ld	r24, Z
    2318:	28 2f       	mov	r18, r24
    231a:	28 60       	ori	r18, 0x08	; 8
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	9a 81       	ldd	r25, Y+2	; 0x02
    2320:	fc 01       	movw	r30, r24
    2322:	20 83       	st	Z, r18
    2324:	0d c0       	rjmp	.+26     	; 0x2340 <PORTC_set_pin_pull_mode+0x54>
    2326:	8c 81       	ldd	r24, Y+4	; 0x04
    2328:	88 23       	and	r24, r24
    232a:	51 f4       	brne	.+20     	; 0x2340 <PORTC_set_pin_pull_mode+0x54>
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	9a 81       	ldd	r25, Y+2	; 0x02
    2330:	fc 01       	movw	r30, r24
    2332:	80 81       	ld	r24, Z
    2334:	28 2f       	mov	r18, r24
    2336:	27 7f       	andi	r18, 0xF7	; 247
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	9a 81       	ldd	r25, Y+2	; 0x02
    233c:	fc 01       	movw	r30, r24
    233e:	20 83       	st	Z, r18
    2340:	00 00       	nop
    2342:	24 96       	adiw	r28, 0x04	; 4
    2344:	cd bf       	out	0x3d, r28	; 61
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	08 95       	ret

0000234e <PORTC_pin_set_isc>:
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	00 d0       	rcall	.+0      	; 0x2354 <PORTC_pin_set_isc+0x6>
    2354:	00 d0       	rcall	.+0      	; 0x2356 <PORTC_pin_set_isc+0x8>
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	8b 83       	std	Y+3, r24	; 0x03
    235c:	6c 83       	std	Y+4, r22	; 0x04
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	88 2f       	mov	r24, r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	80 5b       	subi	r24, 0xB0	; 176
    2366:	9b 4f       	sbci	r25, 0xFB	; 251
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	9a 81       	ldd	r25, Y+2	; 0x02
    2370:	fc 01       	movw	r30, r24
    2372:	80 81       	ld	r24, Z
    2374:	98 2f       	mov	r25, r24
    2376:	98 7f       	andi	r25, 0xF8	; 248
    2378:	8c 81       	ldd	r24, Y+4	; 0x04
    237a:	89 2b       	or	r24, r25
    237c:	28 2f       	mov	r18, r24
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	9a 81       	ldd	r25, Y+2	; 0x02
    2382:	fc 01       	movw	r30, r24
    2384:	20 83       	st	Z, r18
    2386:	00 00       	nop
    2388:	24 96       	adiw	r28, 0x04	; 4
    238a:	cd bf       	out	0x3d, r28	; 61
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	08 95       	ret

00002394 <PORTC_set_pin_dir>:
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	00 d0       	rcall	.+0      	; 0x239a <PORTC_set_pin_dir+0x6>
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	6a 83       	std	Y+2, r22	; 0x02
    23a2:	8a 81       	ldd	r24, Y+2	; 0x02
    23a4:	88 2f       	mov	r24, r24
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	81 30       	cpi	r24, 0x01	; 1
    23aa:	91 05       	cpc	r25, r1
    23ac:	e1 f0       	breq	.+56     	; 0x23e6 <PORTC_set_pin_dir+0x52>
    23ae:	82 30       	cpi	r24, 0x02	; 2
    23b0:	91 05       	cpc	r25, r1
    23b2:	71 f1       	breq	.+92     	; 0x2410 <PORTC_set_pin_dir+0x7c>
    23b4:	89 2b       	or	r24, r25
    23b6:	09 f0       	breq	.+2      	; 0x23ba <PORTC_set_pin_dir+0x26>
    23b8:	3b c0       	rjmp	.+118    	; 0x2430 <PORTC_set_pin_dir+0x9c>
    23ba:	88 e0       	ldi	r24, 0x08	; 8
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	28 e0       	ldi	r18, 0x08	; 8
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	f9 01       	movw	r30, r18
    23c4:	20 81       	ld	r18, Z
    23c6:	62 2f       	mov	r22, r18
    23c8:	29 81       	ldd	r18, Y+1	; 0x01
    23ca:	42 2f       	mov	r20, r18
    23cc:	50 e0       	ldi	r21, 0x00	; 0
    23ce:	21 e0       	ldi	r18, 0x01	; 1
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <PORTC_set_pin_dir+0x44>
    23d4:	22 0f       	add	r18, r18
    23d6:	33 1f       	adc	r19, r19
    23d8:	4a 95       	dec	r20
    23da:	e2 f7       	brpl	.-8      	; 0x23d4 <PORTC_set_pin_dir+0x40>
    23dc:	20 95       	com	r18
    23de:	26 23       	and	r18, r22
    23e0:	fc 01       	movw	r30, r24
    23e2:	20 83       	st	Z, r18
    23e4:	25 c0       	rjmp	.+74     	; 0x2430 <PORTC_set_pin_dir+0x9c>
    23e6:	88 e0       	ldi	r24, 0x08	; 8
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	28 e0       	ldi	r18, 0x08	; 8
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	f9 01       	movw	r30, r18
    23f0:	20 81       	ld	r18, Z
    23f2:	62 2f       	mov	r22, r18
    23f4:	29 81       	ldd	r18, Y+1	; 0x01
    23f6:	42 2f       	mov	r20, r18
    23f8:	50 e0       	ldi	r21, 0x00	; 0
    23fa:	21 e0       	ldi	r18, 0x01	; 1
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <PORTC_set_pin_dir+0x70>
    2400:	22 0f       	add	r18, r18
    2402:	33 1f       	adc	r19, r19
    2404:	4a 95       	dec	r20
    2406:	e2 f7       	brpl	.-8      	; 0x2400 <PORTC_set_pin_dir+0x6c>
    2408:	26 2b       	or	r18, r22
    240a:	fc 01       	movw	r30, r24
    240c:	20 83       	st	Z, r18
    240e:	10 c0       	rjmp	.+32     	; 0x2430 <PORTC_set_pin_dir+0x9c>
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	88 2f       	mov	r24, r24
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	80 5b       	subi	r24, 0xB0	; 176
    2418:	9b 4f       	sbci	r25, 0xFB	; 251
    241a:	29 81       	ldd	r18, Y+1	; 0x01
    241c:	22 2f       	mov	r18, r18
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	20 5b       	subi	r18, 0xB0	; 176
    2422:	3b 4f       	sbci	r19, 0xFB	; 251
    2424:	f9 01       	movw	r30, r18
    2426:	20 81       	ld	r18, Z
    2428:	28 60       	ori	r18, 0x08	; 8
    242a:	fc 01       	movw	r30, r24
    242c:	20 83       	st	Z, r18
    242e:	00 00       	nop
    2430:	00 00       	nop
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	08 95       	ret

0000243c <PORTC_set_pin_level>:
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	00 d0       	rcall	.+0      	; 0x2442 <PORTC_set_pin_level+0x6>
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	6a 83       	std	Y+2, r22	; 0x02
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	88 23       	and	r24, r24
    244e:	a9 f0       	breq	.+42     	; 0x247a <PORTC_set_pin_level+0x3e>
    2450:	88 e0       	ldi	r24, 0x08	; 8
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	28 e0       	ldi	r18, 0x08	; 8
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	f9 01       	movw	r30, r18
    245a:	21 81       	ldd	r18, Z+1	; 0x01
    245c:	62 2f       	mov	r22, r18
    245e:	29 81       	ldd	r18, Y+1	; 0x01
    2460:	42 2f       	mov	r20, r18
    2462:	50 e0       	ldi	r21, 0x00	; 0
    2464:	21 e0       	ldi	r18, 0x01	; 1
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	02 c0       	rjmp	.+4      	; 0x246e <PORTC_set_pin_level+0x32>
    246a:	22 0f       	add	r18, r18
    246c:	33 1f       	adc	r19, r19
    246e:	4a 95       	dec	r20
    2470:	e2 f7       	brpl	.-8      	; 0x246a <PORTC_set_pin_level+0x2e>
    2472:	26 2b       	or	r18, r22
    2474:	fc 01       	movw	r30, r24
    2476:	21 83       	std	Z+1, r18	; 0x01
    2478:	15 c0       	rjmp	.+42     	; 0x24a4 <PORTC_set_pin_level+0x68>
    247a:	88 e0       	ldi	r24, 0x08	; 8
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	28 e0       	ldi	r18, 0x08	; 8
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	f9 01       	movw	r30, r18
    2484:	21 81       	ldd	r18, Z+1	; 0x01
    2486:	62 2f       	mov	r22, r18
    2488:	29 81       	ldd	r18, Y+1	; 0x01
    248a:	42 2f       	mov	r20, r18
    248c:	50 e0       	ldi	r21, 0x00	; 0
    248e:	21 e0       	ldi	r18, 0x01	; 1
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <PORTC_set_pin_level+0x5c>
    2494:	22 0f       	add	r18, r18
    2496:	33 1f       	adc	r19, r19
    2498:	4a 95       	dec	r20
    249a:	e2 f7       	brpl	.-8      	; 0x2494 <PORTC_set_pin_level+0x58>
    249c:	20 95       	com	r18
    249e:	26 23       	and	r18, r22
    24a0:	fc 01       	movw	r30, r24
    24a2:	21 83       	std	Z+1, r18	; 0x01
    24a4:	00 00       	nop
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	08 95       	ret

000024b0 <PORTC_get_pin_level>:
    24b0:	cf 93       	push	r28
    24b2:	df 93       	push	r29
    24b4:	1f 92       	push	r1
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	89 83       	std	Y+1, r24	; 0x01
    24bc:	88 e0       	ldi	r24, 0x08	; 8
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	fc 01       	movw	r30, r24
    24c2:	82 81       	ldd	r24, Z+2	; 0x02
    24c4:	28 2f       	mov	r18, r24
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	48 2f       	mov	r20, r24
    24cc:	50 e0       	ldi	r21, 0x00	; 0
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <PORTC_get_pin_level+0x28>
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	4a 95       	dec	r20
    24da:	e2 f7       	brpl	.-8      	; 0x24d4 <PORTC_get_pin_level+0x24>
    24dc:	82 23       	and	r24, r18
    24de:	93 23       	and	r25, r19
    24e0:	21 e0       	ldi	r18, 0x01	; 1
    24e2:	89 2b       	or	r24, r25
    24e4:	09 f4       	brne	.+2      	; 0x24e8 <PORTC_get_pin_level+0x38>
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	82 2f       	mov	r24, r18
    24ea:	0f 90       	pop	r0
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	08 95       	ret

000024f2 <CONF_WIFI_M2M_RESET_PIN_set_dir>:
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
    24f6:	1f 92       	push	r1
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	89 83       	std	Y+1, r24	; 0x01
    24fe:	69 81       	ldd	r22, Y+1	; 0x01
    2500:	82 e0       	ldi	r24, 0x02	; 2
    2502:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <PORTA_set_pin_dir>
    2506:	00 00       	nop
    2508:	0f 90       	pop	r0
    250a:	df 91       	pop	r29
    250c:	cf 91       	pop	r28
    250e:	08 95       	ret

00002510 <CONF_WIFI_M2M_RESET_PIN_set_level>:
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	1f 92       	push	r1
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	69 81       	ldd	r22, Y+1	; 0x01
    251e:	82 e0       	ldi	r24, 0x02	; 2
    2520:	0e 94 3c 11 	call	0x2278	; 0x2278 <PORTA_set_pin_level>
    2524:	00 00       	nop
    2526:	0f 90       	pop	r0
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	08 95       	ret

0000252e <CONF_WIFI_M2M_WAKE_PIN_set_dir>:
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	1f 92       	push	r1
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	69 81       	ldd	r22, Y+1	; 0x01
    253c:	83 e0       	ldi	r24, 0x03	; 3
    253e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <PORTA_set_pin_dir>
    2542:	00 00       	nop
    2544:	0f 90       	pop	r0
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	08 95       	ret

0000254c <CONF_WIFI_M2M_INT_PIN_set_pull_mode>:
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	1f 92       	push	r1
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	89 83       	std	Y+1, r24	; 0x01
    2558:	69 81       	ldd	r22, Y+1	; 0x01
    255a:	86 e0       	ldi	r24, 0x06	; 6
    255c:	0e 94 76 11 	call	0x22ec	; 0x22ec <PORTC_set_pin_pull_mode>
    2560:	00 00       	nop
    2562:	0f 90       	pop	r0
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	08 95       	ret

0000256a <CONF_WIFI_M2M_INT_PIN_set_dir>:
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	1f 92       	push	r1
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	69 81       	ldd	r22, Y+1	; 0x01
    2578:	86 e0       	ldi	r24, 0x06	; 6
    257a:	0e 94 ca 11 	call	0x2394	; 0x2394 <PORTC_set_pin_dir>
    257e:	00 00       	nop
    2580:	0f 90       	pop	r0
    2582:	df 91       	pop	r29
    2584:	cf 91       	pop	r28
    2586:	08 95       	ret

00002588 <CONF_WIFI_M2M_INT_PIN_set_isc>:
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	1f 92       	push	r1
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	89 83       	std	Y+1, r24	; 0x01
    2594:	69 81       	ldd	r22, Y+1	; 0x01
    2596:	86 e0       	ldi	r24, 0x06	; 6
    2598:	0e 94 a7 11 	call	0x234e	; 0x234e <PORTC_pin_set_isc>
    259c:	00 00       	nop
    259e:	0f 90       	pop	r0
    25a0:	df 91       	pop	r29
    25a2:	cf 91       	pop	r28
    25a4:	08 95       	ret

000025a6 <CONF_WIFI_M2M_INT_PIN_get_level>:
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	86 e0       	ldi	r24, 0x06	; 6
    25b0:	0e 94 58 12 	call	0x24b0	; 0x24b0 <PORTC_get_pin_level>
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	08 95       	ret

000025ba <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>:
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    25be:	1f 92       	push	r1
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	89 83       	std	Y+1, r24	; 0x01
    25c6:	69 81       	ldd	r22, Y+1	; 0x01
    25c8:	87 e0       	ldi	r24, 0x07	; 7
    25ca:	0e 94 ca 11 	call	0x2394	; 0x2394 <PORTC_set_pin_dir>
    25ce:	00 00       	nop
    25d0:	0f 90       	pop	r0
    25d2:	df 91       	pop	r29
    25d4:	cf 91       	pop	r28
    25d6:	08 95       	ret

000025d8 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>:
    25d8:	cf 93       	push	r28
    25da:	df 93       	push	r29
    25dc:	1f 92       	push	r1
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	89 83       	std	Y+1, r24	; 0x01
    25e4:	69 81       	ldd	r22, Y+1	; 0x01
    25e6:	87 e0       	ldi	r24, 0x07	; 7
    25e8:	0e 94 1e 12 	call	0x243c	; 0x243c <PORTC_set_pin_level>
    25ec:	00 00       	nop
    25ee:	0f 90       	pop	r0
    25f0:	df 91       	pop	r29
    25f2:	cf 91       	pop	r28
    25f4:	08 95       	ret

000025f6 <__vector_24>:
    25f6:	1f 92       	push	r1
    25f8:	0f 92       	push	r0
    25fa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    25fe:	0f 92       	push	r0
    2600:	11 24       	eor	r1, r1
    2602:	2f 93       	push	r18
    2604:	3f 93       	push	r19
    2606:	4f 93       	push	r20
    2608:	5f 93       	push	r21
    260a:	6f 93       	push	r22
    260c:	7f 93       	push	r23
    260e:	8f 93       	push	r24
    2610:	9f 93       	push	r25
    2612:	af 93       	push	r26
    2614:	bf 93       	push	r27
    2616:	ef 93       	push	r30
    2618:	ff 93       	push	r31
    261a:	cf 93       	push	r28
    261c:	df 93       	push	r29
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <CONF_WIFI_M2M_INT_PIN_get_level>
    2626:	98 2f       	mov	r25, r24
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	89 27       	eor	r24, r25
    262c:	88 23       	and	r24, r24
    262e:	61 f0       	breq	.+24     	; 0x2648 <__vector_24+0x52>
    2630:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <gpfIsr>
    2634:	90 91 1f 28 	lds	r25, 0x281F	; 0x80281f <gpfIsr+0x1>
    2638:	89 2b       	or	r24, r25
    263a:	31 f0       	breq	.+12     	; 0x2648 <__vector_24+0x52>
    263c:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <gpfIsr>
    2640:	90 91 1f 28 	lds	r25, 0x281F	; 0x80281f <gpfIsr+0x1>
    2644:	fc 01       	movw	r30, r24
    2646:	09 95       	icall
    2648:	8b e0       	ldi	r24, 0x0B	; 11
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	20 ec       	ldi	r18, 0xC0	; 192
    264e:	fc 01       	movw	r30, r24
    2650:	20 83       	st	Z, r18
    2652:	00 00       	nop
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	ff 91       	pop	r31
    265a:	ef 91       	pop	r30
    265c:	bf 91       	pop	r27
    265e:	af 91       	pop	r26
    2660:	9f 91       	pop	r25
    2662:	8f 91       	pop	r24
    2664:	7f 91       	pop	r23
    2666:	6f 91       	pop	r22
    2668:	5f 91       	pop	r21
    266a:	4f 91       	pop	r20
    266c:	3f 91       	pop	r19
    266e:	2f 91       	pop	r18
    2670:	0f 90       	pop	r0
    2672:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2676:	0f 90       	pop	r0
    2678:	1f 90       	pop	r1
    267a:	18 95       	reti

0000267c <init_chip_pins>:
    267c:	cf 93       	push	r28
    267e:	df 93       	push	r29
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	0e 94 79 12 	call	0x24f2	; 0x24f2 <CONF_WIFI_M2M_RESET_PIN_set_dir>
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	0e 94 dd 12 	call	0x25ba	; 0x25ba <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	0e 94 97 12 	call	0x252e	; 0x252e <CONF_WIFI_M2M_WAKE_PIN_set_dir>
    2696:	00 00       	nop
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	08 95       	ret

0000269e <nm_bsp_init>:
    269e:	cf 93       	push	r28
    26a0:	df 93       	push	r29
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	10 92 1e 28 	sts	0x281E, r1	; 0x80281e <gpfIsr>
    26aa:	10 92 1f 28 	sts	0x281F, r1	; 0x80281f <gpfIsr+0x1>
    26ae:	0e 94 3e 13 	call	0x267c	; 0x267c <init_chip_pins>
    26b2:	0e 94 60 13 	call	0x26c0	; 0x26c0 <nm_bsp_reset>
    26b6:	78 94       	sei
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	08 95       	ret

000026c0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
	//ioport_set_pin_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, false);
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(false);
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>
	
	//ioport_set_pin_level(CONF_WIFI_M2M_RESET_PIN, false);
	CONF_WIFI_M2M_RESET_PIN_set_level(false);
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	0e 94 88 12 	call	0x2510	; 0x2510 <CONF_WIFI_M2M_RESET_PIN_set_level>
	
// 	asm volatile ("nop");
// 	PORTB_set_pin_level(5,true);
	nm_bsp_sleep(1);
    26d4:	61 e0       	ldi	r22, 0x01	; 1
    26d6:	70 e0       	ldi	r23, 0x00	; 0
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	0e 94 80 13 	call	0x2700	; 0x2700 <nm_bsp_sleep>
// 	PORTB_set_pin_level(5,false);
// 	asm volatile ("nop");

	//ioport_set_pin_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, true);
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(true);
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>
	
	nm_bsp_sleep(10);
    26e6:	6a e0       	ldi	r22, 0x0A	; 10
    26e8:	70 e0       	ldi	r23, 0x00	; 0
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	0e 94 80 13 	call	0x2700	; 0x2700 <nm_bsp_sleep>

	//ioport_set_pin_level(CONF_WIFI_M2M_RESET_PIN, true);
	CONF_WIFI_M2M_RESET_PIN_set_level(true);
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	0e 94 88 12 	call	0x2510	; 0x2510 <CONF_WIFI_M2M_RESET_PIN_set_level>
	
	//nm_bsp_sleep(100);
}
    26f8:	00 00       	nop
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	08 95       	ret

00002700 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	62 97       	sbiw	r28, 0x12	; 18
    270a:	cd bf       	out	0x3d, r28	; 61
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	6f 87       	std	Y+15, r22	; 0x0f
    2710:	78 8b       	std	Y+16, r23	; 0x10
    2712:	89 8b       	std	Y+17, r24	; 0x11
    2714:	9a 8b       	std	Y+18, r25	; 0x12
	while (u32TimeMsec--) {
    2716:	72 c0       	rjmp	.+228    	; 0x27fc <nm_bsp_sleep+0xfc>
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	a0 e8       	ldi	r26, 0x80	; 128
    271e:	bf e3       	ldi	r27, 0x3F	; 63
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	9a 83       	std	Y+2, r25	; 0x02
    2724:	ab 83       	std	Y+3, r26	; 0x03
    2726:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e4       	ldi	r19, 0x40	; 64
    272c:	4c e1       	ldi	r20, 0x1C	; 28
    272e:	55 e4       	ldi	r21, 0x45	; 69
    2730:	69 81       	ldd	r22, Y+1	; 0x01
    2732:	7a 81       	ldd	r23, Y+2	; 0x02
    2734:	8b 81       	ldd	r24, Y+3	; 0x03
    2736:	9c 81       	ldd	r25, Y+4	; 0x04
    2738:	0e 94 1e 3c 	call	0x783c	; 0x783c <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	8d 83       	std	Y+5, r24	; 0x05
    2742:	9e 83       	std	Y+6, r25	; 0x06
    2744:	af 83       	std	Y+7, r26	; 0x07
    2746:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	6d 81       	ldd	r22, Y+5	; 0x05
    2752:	7e 81       	ldd	r23, Y+6	; 0x06
    2754:	8f 81       	ldd	r24, Y+7	; 0x07
    2756:	98 85       	ldd	r25, Y+8	; 0x08
    2758:	0e 94 98 3b 	call	0x7730	; 0x7730 <__cmpsf2>
    275c:	88 23       	and	r24, r24
    275e:	2c f4       	brge	.+10     	; 0x276a <nm_bsp_sleep+0x6a>
		__ticks = 1;
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	89 87       	std	Y+9, r24	; 0x09
    2766:	9a 87       	std	Y+10, r25	; 0x0a
    2768:	3f c0       	rjmp	.+126    	; 0x27e8 <nm_bsp_sleep+0xe8>
	else if (__tmp > 65535)
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	3f ef       	ldi	r19, 0xFF	; 255
    276e:	4f e7       	ldi	r20, 0x7F	; 127
    2770:	57 e4       	ldi	r21, 0x47	; 71
    2772:	6d 81       	ldd	r22, Y+5	; 0x05
    2774:	7e 81       	ldd	r23, Y+6	; 0x06
    2776:	8f 81       	ldd	r24, Y+7	; 0x07
    2778:	98 85       	ldd	r25, Y+8	; 0x08
    277a:	0e 94 19 3c 	call	0x7832	; 0x7832 <__gesf2>
    277e:	18 16       	cp	r1, r24
    2780:	4c f5       	brge	.+82     	; 0x27d4 <nm_bsp_sleep+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	51 e4       	ldi	r21, 0x41	; 65
    278a:	69 81       	ldd	r22, Y+1	; 0x01
    278c:	7a 81       	ldd	r23, Y+2	; 0x02
    278e:	8b 81       	ldd	r24, Y+3	; 0x03
    2790:	9c 81       	ldd	r25, Y+4	; 0x04
    2792:	0e 94 1e 3c 	call	0x783c	; 0x783c <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	bc 01       	movw	r22, r24
    279c:	cd 01       	movw	r24, r26
    279e:	0e 94 9d 3b 	call	0x773a	; 0x773a <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	89 87       	std	Y+9, r24	; 0x09
    27a8:	9a 87       	std	Y+10, r25	; 0x0a
    27aa:	0f c0       	rjmp	.+30     	; 0x27ca <nm_bsp_sleep+0xca>
    27ac:	8a ef       	ldi	r24, 0xFA	; 250
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	8b 87       	std	Y+11, r24	; 0x0b
    27b2:	9c 87       	std	Y+12, r25	; 0x0c
    27b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    27b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <nm_bsp_sleep+0xb8>
    27bc:	8b 87       	std	Y+11, r24	; 0x0b
    27be:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c0:	89 85       	ldd	r24, Y+9	; 0x09
    27c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	89 87       	std	Y+9, r24	; 0x09
    27c8:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ca:	89 85       	ldd	r24, Y+9	; 0x09
    27cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ce:	89 2b       	or	r24, r25
    27d0:	69 f7       	brne	.-38     	; 0x27ac <nm_bsp_sleep+0xac>
    27d2:	14 c0       	rjmp	.+40     	; 0x27fc <nm_bsp_sleep+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d4:	6d 81       	ldd	r22, Y+5	; 0x05
    27d6:	7e 81       	ldd	r23, Y+6	; 0x06
    27d8:	8f 81       	ldd	r24, Y+7	; 0x07
    27da:	98 85       	ldd	r25, Y+8	; 0x08
    27dc:	0e 94 9d 3b 	call	0x773a	; 0x773a <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	89 87       	std	Y+9, r24	; 0x09
    27e6:	9a 87       	std	Y+10, r25	; 0x0a
    27e8:	89 85       	ldd	r24, Y+9	; 0x09
    27ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ec:	8d 87       	std	Y+13, r24	; 0x0d
    27ee:	9e 87       	std	Y+14, r25	; 0x0e
    27f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <nm_bsp_sleep+0xf4>
    27f8:	8d 87       	std	Y+13, r24	; 0x0d
    27fa:	9e 87       	std	Y+14, r25	; 0x0e
    27fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    27fe:	98 89       	ldd	r25, Y+16	; 0x10
    2800:	a9 89       	ldd	r26, Y+17	; 0x11
    2802:	ba 89       	ldd	r27, Y+18	; 0x12
    2804:	9c 01       	movw	r18, r24
    2806:	ad 01       	movw	r20, r26
    2808:	21 50       	subi	r18, 0x01	; 1
    280a:	31 09       	sbc	r19, r1
    280c:	41 09       	sbc	r20, r1
    280e:	51 09       	sbc	r21, r1
    2810:	2f 87       	std	Y+15, r18	; 0x0f
    2812:	38 8b       	std	Y+16, r19	; 0x10
    2814:	49 8b       	std	Y+17, r20	; 0x11
    2816:	5a 8b       	std	Y+18, r21	; 0x12
    2818:	89 2b       	or	r24, r25
    281a:	8a 2b       	or	r24, r26
    281c:	8b 2b       	or	r24, r27
    281e:	09 f0       	breq	.+2      	; 0x2822 <nm_bsp_sleep+0x122>
    2820:	7b cf       	rjmp	.-266    	; 0x2718 <nm_bsp_sleep+0x18>
		_delay_ms(1);
	}
}
    2822:	00 00       	nop
    2824:	62 96       	adiw	r28, 0x12	; 18
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	08 95       	ret

00002830 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	00 d0       	rcall	.+0      	; 0x2836 <nm_bsp_register_isr+0x6>
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	9a 83       	std	Y+2, r25	; 0x02
	gpfIsr = pfIsr;
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	9a 81       	ldd	r25, Y+2	; 0x02
    2842:	80 93 1e 28 	sts	0x281E, r24	; 0x80281e <gpfIsr>
    2846:	90 93 1f 28 	sts	0x281F, r25	; 0x80281f <gpfIsr+0x1>

	//ioport_configure_pin(CONF_WIFI_M2M_INT_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	CONF_WIFI_M2M_INT_PIN_set_dir(PORT_DIR_IN);
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	0e 94 b5 12 	call	0x256a	; 0x256a <CONF_WIFI_M2M_INT_PIN_set_dir>
	CONF_WIFI_M2M_INT_PIN_set_pull_mode(PORT_PULL_UP);
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	0e 94 a6 12 	call	0x254c	; 0x254c <CONF_WIFI_M2M_INT_PIN_set_pull_mode>
	CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    2856:	83 e0       	ldi	r24, 0x03	; 3
    2858:	0e 94 c4 12 	call	0x2588	; 0x2588 <CONF_WIFI_M2M_INT_PIN_set_isc>
	
	/* Enable interrupt */
// 	CONF_WIFI_M2M_INT_INTMASK_reg = CONF_WIFI_M2M_INT_INTFLAG_Msk;
// 	CONF_WIFI_M2M_INT_INTCTRL_reg = CONF_WIFI_M2M_INT_INTCTRL_Msk;
	CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    285c:	83 e0       	ldi	r24, 0x03	; 3
    285e:	0e 94 c4 12 	call	0x2588	; 0x2588 <CONF_WIFI_M2M_INT_PIN_set_isc>
	//ENABLE_INTERRUPTS();
	sei();
    2862:	78 94       	sei
}
    2864:	00 00       	nop
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	08 95       	ret

00002870 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
    2874:	1f 92       	push	r1
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
    287a:	89 83       	std	Y+1, r24	; 0x01
	if (u8Enable)
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	88 23       	and	r24, r24
    2880:	21 f0       	breq	.+8      	; 0x288a <nm_bsp_interrupt_ctrl+0x1a>
	{
		//CONF_WIFI_M2M_INT_INTMASK_reg |= CONF_WIFI_M2M_INT_INTFLAG_Msk;
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    2882:	83 e0       	ldi	r24, 0x03	; 3
    2884:	0e 94 c4 12 	call	0x2588	; 0x2588 <CONF_WIFI_M2M_INT_PIN_set_isc>
	else
	{
		//CONF_WIFI_M2M_INT_INTMASK_reg &= ~CONF_WIFI_M2M_INT_INTFLAG_Msk;
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_INTDISABLE_gc);
	}
}
    2888:	03 c0       	rjmp	.+6      	; 0x2890 <nm_bsp_interrupt_ctrl+0x20>
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
	}
	else
	{
		//CONF_WIFI_M2M_INT_INTMASK_reg &= ~CONF_WIFI_M2M_INT_INTFLAG_Msk;
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_INTDISABLE_gc);
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	0e 94 c4 12 	call	0x2588	; 0x2588 <CONF_WIFI_M2M_INT_PIN_set_isc>
	}
}
    2890:	00 00       	nop
    2892:	0f 90       	pop	r0
    2894:	df 91       	pop	r29
    2896:	cf 91       	pop	r28
    2898:	08 95       	ret

0000289a <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	00 d0       	rcall	.+0      	; 0x28a0 <PORTA_set_pin_dir+0x6>
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	89 83       	std	Y+1, r24	; 0x01
    28a6:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	81 30       	cpi	r24, 0x01	; 1
    28b0:	91 05       	cpc	r25, r1
    28b2:	e1 f0       	breq	.+56     	; 0x28ec <PORTA_set_pin_dir+0x52>
    28b4:	82 30       	cpi	r24, 0x02	; 2
    28b6:	91 05       	cpc	r25, r1
    28b8:	71 f1       	breq	.+92     	; 0x2916 <PORTA_set_pin_dir+0x7c>
    28ba:	89 2b       	or	r24, r25
    28bc:	09 f0       	breq	.+2      	; 0x28c0 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    28be:	3b c0       	rjmp	.+118    	; 0x2936 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	fc 01       	movw	r30, r24
    28ca:	80 81       	ld	r24, Z
    28cc:	68 2f       	mov	r22, r24
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	48 2f       	mov	r20, r24
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <PORTA_set_pin_dir+0x44>
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	4a 95       	dec	r20
    28e0:	e2 f7       	brpl	.-8      	; 0x28da <PORTA_set_pin_dir+0x40>
    28e2:	80 95       	com	r24
    28e4:	86 23       	and	r24, r22
    28e6:	f9 01       	movw	r30, r18
    28e8:	80 83       	st	Z, r24
		break;
    28ea:	25 c0       	rjmp	.+74     	; 0x2936 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	fc 01       	movw	r30, r24
    28f6:	80 81       	ld	r24, Z
    28f8:	68 2f       	mov	r22, r24
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	48 2f       	mov	r20, r24
    28fe:	50 e0       	ldi	r21, 0x00	; 0
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	02 c0       	rjmp	.+4      	; 0x290a <PORTA_set_pin_dir+0x70>
    2906:	88 0f       	add	r24, r24
    2908:	99 1f       	adc	r25, r25
    290a:	4a 95       	dec	r20
    290c:	e2 f7       	brpl	.-8      	; 0x2906 <PORTA_set_pin_dir+0x6c>
    290e:	86 2b       	or	r24, r22
    2910:	f9 01       	movw	r30, r18
    2912:	80 83       	st	Z, r24
		break;
    2914:	10 c0       	rjmp	.+32     	; 0x2936 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	88 2f       	mov	r24, r24
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	80 5f       	subi	r24, 0xF0	; 240
    291e:	9b 4f       	sbci	r25, 0xFB	; 251
    2920:	29 81       	ldd	r18, Y+1	; 0x01
    2922:	22 2f       	mov	r18, r18
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	20 5f       	subi	r18, 0xF0	; 240
    2928:	3b 4f       	sbci	r19, 0xFB	; 251
    292a:	f9 01       	movw	r30, r18
    292c:	20 81       	ld	r18, Z
    292e:	28 60       	ori	r18, 0x08	; 8
    2930:	fc 01       	movw	r30, r24
    2932:	20 83       	st	Z, r18
		break;
    2934:	00 00       	nop
	default:
		break;
	}
}
    2936:	00 00       	nop
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	df 91       	pop	r29
    293e:	cf 91       	pop	r28
    2940:	08 95       	ret

00002942 <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	00 d0       	rcall	.+0      	; 0x2948 <PORTA_set_pin_level+0x6>
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    2950:	8a 81       	ldd	r24, Y+2	; 0x02
    2952:	88 23       	and	r24, r24
    2954:	a9 f0       	breq	.+42     	; 0x2980 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	fc 01       	movw	r30, r24
    2960:	81 81       	ldd	r24, Z+1	; 0x01
    2962:	68 2f       	mov	r22, r24
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	48 2f       	mov	r20, r24
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <PORTA_set_pin_level+0x32>
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	4a 95       	dec	r20
    2976:	e2 f7       	brpl	.-8      	; 0x2970 <PORTA_set_pin_level+0x2e>
    2978:	86 2b       	or	r24, r22
    297a:	f9 01       	movw	r30, r18
    297c:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
    297e:	15 c0       	rjmp	.+42     	; 0x29aa <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	fc 01       	movw	r30, r24
    298a:	81 81       	ldd	r24, Z+1	; 0x01
    298c:	68 2f       	mov	r22, r24
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	48 2f       	mov	r20, r24
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	02 c0       	rjmp	.+4      	; 0x299e <PORTA_set_pin_level+0x5c>
    299a:	88 0f       	add	r24, r24
    299c:	99 1f       	adc	r25, r25
    299e:	4a 95       	dec	r20
    29a0:	e2 f7       	brpl	.-8      	; 0x299a <PORTA_set_pin_level+0x58>
    29a2:	80 95       	com	r24
    29a4:	86 23       	and	r24, r22
    29a6:	f9 01       	movw	r30, r18
    29a8:	81 83       	std	Z+1, r24	; 0x01
	}
}
    29aa:	00 00       	nop
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	08 95       	ret

000029b6 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir(const enum port_dir dir)
{
    29b6:	cf 93       	push	r28
    29b8:	df 93       	push	r29
    29ba:	1f 92       	push	r1
    29bc:	cd b7       	in	r28, 0x3d	; 61
    29be:	de b7       	in	r29, 0x3e	; 62
    29c0:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(4, dir);
    29c2:	69 81       	ldd	r22, Y+1	; 0x01
    29c4:	84 e0       	ldi	r24, 0x04	; 4
    29c6:	0e 94 4d 14 	call	0x289a	; 0x289a <PORTA_set_pin_dir>
}
    29ca:	00 00       	nop
    29cc:	0f 90       	pop	r0
    29ce:	df 91       	pop	r29
    29d0:	cf 91       	pop	r28
    29d2:	08 95       	ret

000029d4 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void CONF_WIFI_M2M_SPI_MOSI_PIN_set_level(const bool level)
{
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	1f 92       	push	r1
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(4, level);
    29e0:	69 81       	ldd	r22, Y+1	; 0x01
    29e2:	84 e0       	ldi	r24, 0x04	; 4
    29e4:	0e 94 a1 14 	call	0x2942	; 0x2942 <PORTA_set_pin_level>
}
    29e8:	00 00       	nop
    29ea:	0f 90       	pop	r0
    29ec:	df 91       	pop	r29
    29ee:	cf 91       	pop	r28
    29f0:	08 95       	ret

000029f2 <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_MISO_PIN_set_dir(const enum port_dir dir)
{
    29f2:	cf 93       	push	r28
    29f4:	df 93       	push	r29
    29f6:	1f 92       	push	r1
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(5, dir);
    29fe:	69 81       	ldd	r22, Y+1	; 0x01
    2a00:	85 e0       	ldi	r24, 0x05	; 5
    2a02:	0e 94 4d 14 	call	0x289a	; 0x289a <PORTA_set_pin_dir>
}
    2a06:	00 00       	nop
    2a08:	0f 90       	pop	r0
    2a0a:	df 91       	pop	r29
    2a0c:	cf 91       	pop	r28
    2a0e:	08 95       	ret

00002a10 <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_SCK_PIN_set_dir(const enum port_dir dir)
{
    2a10:	cf 93       	push	r28
    2a12:	df 93       	push	r29
    2a14:	1f 92       	push	r1
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(6, dir);
    2a1c:	69 81       	ldd	r22, Y+1	; 0x01
    2a1e:	86 e0       	ldi	r24, 0x06	; 6
    2a20:	0e 94 4d 14 	call	0x289a	; 0x289a <PORTA_set_pin_dir>
}
    2a24:	00 00       	nop
    2a26:	0f 90       	pop	r0
    2a28:	df 91       	pop	r29
    2a2a:	cf 91       	pop	r28
    2a2c:	08 95       	ret

00002a2e <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void CONF_WIFI_M2M_SPI_SCK_PIN_set_level(const bool level)
{
    2a2e:	cf 93       	push	r28
    2a30:	df 93       	push	r29
    2a32:	1f 92       	push	r1
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
    2a38:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(6, level);
    2a3a:	69 81       	ldd	r22, Y+1	; 0x01
    2a3c:	86 e0       	ldi	r24, 0x06	; 6
    2a3e:	0e 94 a1 14 	call	0x2942	; 0x2942 <PORTA_set_pin_level>
}
    2a42:	00 00       	nop
    2a44:	0f 90       	pop	r0
    2a46:	df 91       	pop	r29
    2a48:	cf 91       	pop	r28
    2a4a:	08 95       	ret

00002a4c <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_CS_PIN_set_dir(const enum port_dir dir)
{
    2a4c:	cf 93       	push	r28
    2a4e:	df 93       	push	r29
    2a50:	1f 92       	push	r1
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
    2a56:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(7, dir);
    2a58:	69 81       	ldd	r22, Y+1	; 0x01
    2a5a:	87 e0       	ldi	r24, 0x07	; 7
    2a5c:	0e 94 4d 14 	call	0x289a	; 0x289a <PORTA_set_pin_dir>
}
    2a60:	00 00       	nop
    2a62:	0f 90       	pop	r0
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	08 95       	ret

00002a6a <CONF_WIFI_M2M_SPI_CS_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void CONF_WIFI_M2M_SPI_CS_PIN_set_level(const bool level)
{
    2a6a:	cf 93       	push	r28
    2a6c:	df 93       	push	r29
    2a6e:	1f 92       	push	r1
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
    2a74:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(7, level);
    2a76:	69 81       	ldd	r22, Y+1	; 0x01
    2a78:	87 e0       	ldi	r24, 0x07	; 7
    2a7a:	0e 94 a1 14 	call	0x2942	; 0x2942 <PORTA_set_pin_level>
}
    2a7e:	00 00       	nop
    2a80:	0f 90       	pop	r0
    2a82:	df 91       	pop	r29
    2a84:	cf 91       	pop	r28
    2a86:	08 95       	ret

00002a88 <spi_rw>:
}
#endif

#ifdef CONF_WINC_USE_SPI
static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
    2a90:	2d 97       	sbiw	r28, 0x0d	; 13
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	88 87       	std	Y+8, r24	; 0x08
    2a98:	99 87       	std	Y+9, r25	; 0x09
    2a9a:	6a 87       	std	Y+10, r22	; 0x0a
    2a9c:	7b 87       	std	Y+11, r23	; 0x0b
    2a9e:	4c 87       	std	Y+12, r20	; 0x0c
    2aa0:	5d 87       	std	Y+13, r21	; 0x0d
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8 u8Dummy = 0;
    2aa2:	1f 82       	std	Y+7, r1	; 0x07
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    2aa4:	19 82       	std	Y+1, r1	; 0x01
    2aa6:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t txd_data = 0;
    2aa8:	1b 82       	std	Y+3, r1	; 0x03
    2aaa:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t rxd_data = 0;
    2aac:	1d 82       	std	Y+5, r1	; 0x05
    2aae:	1e 82       	std	Y+6, r1	; 0x06

	if (!pu8Mosi) {
    2ab0:	88 85       	ldd	r24, Y+8	; 0x08
    2ab2:	99 85       	ldd	r25, Y+9	; 0x09
    2ab4:	89 2b       	or	r24, r25
    2ab6:	39 f4       	brne	.+14     	; 0x2ac6 <spi_rw+0x3e>
		pu8Mosi = &u8Dummy;
    2ab8:	ce 01       	movw	r24, r28
    2aba:	07 96       	adiw	r24, 0x07	; 7
    2abc:	88 87       	std	Y+8, r24	; 0x08
    2abe:	99 87       	std	Y+9, r25	; 0x09
		u8SkipMosi = 1;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	89 83       	std	Y+1, r24	; 0x01
    2ac4:	0d c0       	rjmp	.+26     	; 0x2ae0 <spi_rw+0x58>
	}
	else if(!pu8Miso) {
    2ac6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ac8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aca:	89 2b       	or	r24, r25
    2acc:	39 f4       	brne	.+14     	; 0x2adc <spi_rw+0x54>
		pu8Miso = &u8Dummy;
    2ace:	ce 01       	movw	r24, r28
    2ad0:	07 96       	adiw	r24, 0x07	; 7
    2ad2:	8a 87       	std	Y+10, r24	; 0x0a
    2ad4:	9b 87       	std	Y+11, r25	; 0x0b
		u8SkipMiso = 1;
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	8a 83       	std	Y+2, r24	; 0x02
    2ada:	02 c0       	rjmp	.+4      	; 0x2ae0 <spi_rw+0x58>
	}
	else {
		return M2M_ERR_BUS_FAIL;
    2adc:	8a ef       	ldi	r24, 0xFA	; 250
    2ade:	34 c0       	rjmp	.+104    	; 0x2b48 <spi_rw+0xc0>
	}

	//spi_select_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(false);
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <CONF_WIFI_M2M_SPI_CS_PIN_set_level>
	
	while (u16Sz) {
    2ae6:	28 c0       	rjmp	.+80     	; 0x2b38 <spi_rw+0xb0>
		txd_data = *pu8Mosi;
    2ae8:	88 85       	ldd	r24, Y+8	; 0x08
    2aea:	99 85       	ldd	r25, Y+9	; 0x09
    2aec:	fc 01       	movw	r30, r24
    2aee:	80 81       	ld	r24, Z
    2af0:	88 2f       	mov	r24, r24
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	8b 83       	std	Y+3, r24	; 0x03
    2af6:	9c 83       	std	Y+4, r25	; 0x04
//		spi_read_single((uint8_t*)(&rxd_data));
		//SPI_0_read_block((uint8_t*)(&rxd_data), 1);
		
		
		
		rxd_data = SPI_0_exchange_byte(txd_data);		
    2af8:	8b 81       	ldd	r24, Y+3	; 0x03
    2afa:	9c 81       	ldd	r25, Y+4	; 0x04
    2afc:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <SPI_0_exchange_byte>
    2b00:	8d 83       	std	Y+5, r24	; 0x05
    2b02:	9e 83       	std	Y+6, r25	; 0x06
		
		*pu8Miso = rxd_data;
    2b04:	2d 81       	ldd	r18, Y+5	; 0x05
    2b06:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b08:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	20 83       	st	Z, r18

		u16Sz--;
    2b0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b10:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	8c 87       	std	Y+12, r24	; 0x0c
    2b16:	9d 87       	std	Y+13, r25	; 0x0d
		if (!u8SkipMiso)
    2b18:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1a:	88 23       	and	r24, r24
    2b1c:	29 f4       	brne	.+10     	; 0x2b28 <spi_rw+0xa0>
			pu8Miso++;
    2b1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b20:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b22:	01 96       	adiw	r24, 0x01	; 1
    2b24:	8a 87       	std	Y+10, r24	; 0x0a
    2b26:	9b 87       	std	Y+11, r25	; 0x0b
		if (!u8SkipMosi)
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	88 23       	and	r24, r24
    2b2c:	29 f4       	brne	.+10     	; 0x2b38 <spi_rw+0xb0>
			pu8Mosi++;
    2b2e:	88 85       	ldd	r24, Y+8	; 0x08
    2b30:	99 85       	ldd	r25, Y+9	; 0x09
    2b32:	01 96       	adiw	r24, 0x01	; 1
    2b34:	88 87       	std	Y+8, r24	; 0x08
    2b36:	99 87       	std	Y+9, r25	; 0x09
	}

	//spi_select_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(false);
	
	while (u16Sz) {
    2b38:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b3a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b3c:	89 2b       	or	r24, r25
    2b3e:	a1 f6       	brne	.-88     	; 0x2ae8 <spi_rw+0x60>
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	//spi_deselect_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(true);
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <CONF_WIFI_M2M_SPI_CS_PIN_set_level>

	return M2M_SUCCESS;
    2b46:	80 e0       	ldi	r24, 0x00	; 0
}
    2b48:	2d 96       	adiw	r28, 0x0d	; 13
    2b4a:	cd bf       	out	0x3d, r28	; 61
    2b4c:	de bf       	out	0x3e, r29	; 62
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	08 95       	ret

00002b54 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 volatile nm_bus_init(void *pvinit)
{
    2b54:	cf 93       	push	r28
    2b56:	df 93       	push	r29
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <nm_bus_init+0x6>
    2b5a:	1f 92       	push	r1
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	8a 83       	std	Y+2, r24	; 0x02
    2b62:	9b 83       	std	Y+3, r25	; 0x03
	sint8 result = M2M_SUCCESS;
    2b64:	19 82       	std	Y+1, r1	; 0x01
#ifdef CONF_WINC_USE_I2C
		/* Not implemented */
#elif defined CONF_WINC_USE_SPI
	/* Configure pins */
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_CS_PIN, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
	CONF_WIFI_M2M_SPI_CS_PIN_set_dir(PORT_DIR_OUT);
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(true);
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <CONF_WIFI_M2M_SPI_CS_PIN_set_level>
	
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_MOSI_PIN, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
	CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir(PORT_DIR_OUT);
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	0e 94 db 14 	call	0x29b6	; 0x29b6 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>
	CONF_WIFI_M2M_SPI_MOSI_PIN_set_level(true);
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>
	
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_MISO_PIN, IOPORT_DIR_INPUT);
	CONF_WIFI_M2M_SPI_MISO_PIN_set_dir(PORT_DIR_IN);
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>
	
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_SCK_PIN, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	CONF_WIFI_M2M_SPI_SCK_PIN_set_dir(PORT_DIR_OUT);
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	0e 94 08 15 	call	0x2a10	; 0x2a10 <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>
	CONF_WIFI_M2M_SPI_SCK_PIN_set_level(false);
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	 
	/* Configure the SPI master. */
	//spi_master_init(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_init();
    2b90:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <SPI_0_init>
	
	//spi_master_setup_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf, SPI_MODE_0, CONF_WIFI_M2M_SPI_BAUDRATE, 0);
	
	/* Enable the SPI master. */
	//spi_enable(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_enable();
    2b94:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <SPI_0_enable>

	nm_bsp_reset();
    2b98:	0e 94 60 13 	call	0x26c0	; 0x26c0 <nm_bsp_reset>
	nm_bsp_sleep(1);
    2b9c:	61 e0       	ldi	r22, 0x01	; 1
    2b9e:	70 e0       	ldi	r23, 0x00	; 0
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	0e 94 80 13 	call	0x2700	; 0x2700 <nm_bsp_sleep>
#endif
	return result;
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2baa:	23 96       	adiw	r28, 0x03	; 3
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	df 91       	pop	r29
    2bb2:	cf 91       	pop	r28
    2bb4:	08 95       	ret

00002bb6 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
    2bbe:	26 97       	sbiw	r28, 0x06	; 6
    2bc0:	cd bf       	out	0x3d, r28	; 61
    2bc2:	de bf       	out	0x3e, r29	; 62
    2bc4:	8c 83       	std	Y+4, r24	; 0x04
    2bc6:	6d 83       	std	Y+5, r22	; 0x05
    2bc8:	7e 83       	std	Y+6, r23	; 0x06
	sint8 s8Ret = 0;
    2bca:	19 82       	std	Y+1, r1	; 0x01
	switch(u8Cmd)
    2bcc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bce:	88 2f       	mov	r24, r24
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	03 97       	sbiw	r24, 0x03	; 3
    2bd4:	c1 f4       	brne	.+48     	; 0x2c06 <nm_bus_ioctl+0x50>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    2bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bda:	8a 83       	std	Y+2, r24	; 0x02
    2bdc:	9b 83       	std	Y+3, r25	; 0x03
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	9b 81       	ldd	r25, Y+3	; 0x03
    2be2:	fc 01       	movw	r30, r24
    2be4:	44 81       	ldd	r20, Z+4	; 0x04
    2be6:	55 81       	ldd	r21, Z+5	; 0x05
    2be8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bea:	9b 81       	ldd	r25, Y+3	; 0x03
    2bec:	fc 01       	movw	r30, r24
    2bee:	22 81       	ldd	r18, Z+2	; 0x02
    2bf0:	33 81       	ldd	r19, Z+3	; 0x03
    2bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	b9 01       	movw	r22, r18
    2bfe:	0e 94 44 15 	call	0x2a88	; 0x2a88 <spi_rw>
    2c02:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    2c04:	03 c0       	rjmp	.+6      	; 0x2c0c <nm_bus_ioctl+0x56>
#endif
		default:
			s8Ret = -1;
    2c06:	8f ef       	ldi	r24, 0xFF	; 255
    2c08:	89 83       	std	Y+1, r24	; 0x01
			M2M_ERR("invalide ioclt cmd\n");
			break;
    2c0a:	00 00       	nop
	}

	return s8Ret;
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c0e:	26 96       	adiw	r28, 0x06	; 6
    2c10:	cd bf       	out	0x3d, r28	; 61
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	08 95       	ret

00002c1a <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    2c1a:	cf 93       	push	r28
    2c1c:	df 93       	push	r29
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
	return M2M_SUCCESS;
    2c22:	80 e0       	ldi	r24, 0x00	; 0
}
    2c24:	df 91       	pop	r29
    2c26:	cf 91       	pop	r28
    2c28:	08 95       	ret

00002c2a <m2m_memcpy>:
		cs ^= *buf;
		buf++;
	}

	return cs;
}
    2c2a:	cf 93       	push	r28
    2c2c:	df 93       	push	r29
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
    2c32:	28 97       	sbiw	r28, 0x08	; 8
    2c34:	cd bf       	out	0x3d, r28	; 61
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	89 83       	std	Y+1, r24	; 0x01
    2c3a:	9a 83       	std	Y+2, r25	; 0x02
    2c3c:	6b 83       	std	Y+3, r22	; 0x03
    2c3e:	7c 83       	std	Y+4, r23	; 0x04
    2c40:	2d 83       	std	Y+5, r18	; 0x05
    2c42:	3e 83       	std	Y+6, r19	; 0x06
    2c44:	4f 83       	std	Y+7, r20	; 0x07
    2c46:	58 87       	std	Y+8, r21	; 0x08
    2c48:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4c:	af 81       	ldd	r26, Y+7	; 0x07
    2c4e:	b8 85       	ldd	r27, Y+8	; 0x08
    2c50:	89 2b       	or	r24, r25
    2c52:	8a 2b       	or	r24, r26
    2c54:	8b 2b       	or	r24, r27
    2c56:	31 f1       	breq	.+76     	; 0x2ca4 <m2m_memcpy+0x7a>
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	20 81       	ld	r18, Z
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	9a 81       	ldd	r25, Y+2	; 0x02
    2c64:	fc 01       	movw	r30, r24
    2c66:	20 83       	st	Z, r18
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6c:	01 96       	adiw	r24, 0x01	; 1
    2c6e:	89 83       	std	Y+1, r24	; 0x01
    2c70:	9a 83       	std	Y+2, r25	; 0x02
    2c72:	8b 81       	ldd	r24, Y+3	; 0x03
    2c74:	9c 81       	ldd	r25, Y+4	; 0x04
    2c76:	01 96       	adiw	r24, 0x01	; 1
    2c78:	8b 83       	std	Y+3, r24	; 0x03
    2c7a:	9c 83       	std	Y+4, r25	; 0x04
    2c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c80:	af 81       	ldd	r26, Y+7	; 0x07
    2c82:	b8 85       	ldd	r27, Y+8	; 0x08
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	a1 09       	sbc	r26, r1
    2c88:	b1 09       	sbc	r27, r1
    2c8a:	8d 83       	std	Y+5, r24	; 0x05
    2c8c:	9e 83       	std	Y+6, r25	; 0x06
    2c8e:	af 83       	std	Y+7, r26	; 0x07
    2c90:	b8 87       	std	Y+8, r27	; 0x08
    2c92:	8d 81       	ldd	r24, Y+5	; 0x05
    2c94:	9e 81       	ldd	r25, Y+6	; 0x06
    2c96:	af 81       	ldd	r26, Y+7	; 0x07
    2c98:	b8 85       	ldd	r27, Y+8	; 0x08
    2c9a:	89 2b       	or	r24, r25
    2c9c:	8a 2b       	or	r24, r26
    2c9e:	8b 2b       	or	r24, r27
    2ca0:	d9 f6       	brne	.-74     	; 0x2c58 <m2m_memcpy+0x2e>
    2ca2:	01 c0       	rjmp	.+2      	; 0x2ca6 <m2m_memcpy+0x7c>
    2ca4:	00 00       	nop
    2ca6:	28 96       	adiw	r28, 0x08	; 8
    2ca8:	cd bf       	out	0x3d, r28	; 61
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	08 95       	ret

00002cb2 <m2m_memset>:

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    2cb2:	cf 93       	push	r28
    2cb4:	df 93       	push	r29
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	27 97       	sbiw	r28, 0x07	; 7
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	89 83       	std	Y+1, r24	; 0x01
    2cc2:	9a 83       	std	Y+2, r25	; 0x02
    2cc4:	6b 83       	std	Y+3, r22	; 0x03
    2cc6:	2c 83       	std	Y+4, r18	; 0x04
    2cc8:	3d 83       	std	Y+5, r19	; 0x05
    2cca:	4e 83       	std	Y+6, r20	; 0x06
    2ccc:	5f 83       	std	Y+7, r21	; 0x07
	if(sz == 0) return;
    2cce:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd0:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd2:	ae 81       	ldd	r26, Y+6	; 0x06
    2cd4:	bf 81       	ldd	r27, Y+7	; 0x07
    2cd6:	89 2b       	or	r24, r25
    2cd8:	8a 2b       	or	r24, r26
    2cda:	8b 2b       	or	r24, r27
    2cdc:	f1 f0       	breq	.+60     	; 0x2d1a <m2m_memset+0x68>
	do
	{
		*pBuf = val;
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ce4:	fc 01       	movw	r30, r24
    2ce6:	20 83       	st	Z, r18
		pBuf++;
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	9a 81       	ldd	r25, Y+2	; 0x02
    2cec:	01 96       	adiw	r24, 0x01	; 1
    2cee:	89 83       	std	Y+1, r24	; 0x01
    2cf0:	9a 83       	std	Y+2, r25	; 0x02
	}while(--sz);
    2cf2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf4:	9d 81       	ldd	r25, Y+5	; 0x05
    2cf6:	ae 81       	ldd	r26, Y+6	; 0x06
    2cf8:	bf 81       	ldd	r27, Y+7	; 0x07
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	a1 09       	sbc	r26, r1
    2cfe:	b1 09       	sbc	r27, r1
    2d00:	8c 83       	std	Y+4, r24	; 0x04
    2d02:	9d 83       	std	Y+5, r25	; 0x05
    2d04:	ae 83       	std	Y+6, r26	; 0x06
    2d06:	bf 83       	std	Y+7, r27	; 0x07
    2d08:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d0c:	ae 81       	ldd	r26, Y+6	; 0x06
    2d0e:	bf 81       	ldd	r27, Y+7	; 0x07
    2d10:	89 2b       	or	r24, r25
    2d12:	8a 2b       	or	r24, r26
    2d14:	8b 2b       	or	r24, r27
    2d16:	19 f7       	brne	.-58     	; 0x2cde <m2m_memset+0x2c>
    2d18:	01 c0       	rjmp	.+2      	; 0x2d1c <m2m_memset+0x6a>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    2d1a:	00 00       	nop
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
    2d1c:	27 96       	adiw	r28, 0x07	; 7
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	de bf       	out	0x3e, r29	; 62
    2d22:	df 91       	pop	r29
    2d24:	cf 91       	pop	r28
    2d26:	08 95       	ret

00002d28 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    2d28:	cf 93       	push	r28
    2d2a:	df 93       	push	r29
    2d2c:	00 d0       	rcall	.+0      	; 0x2d2e <m2m_strlen+0x6>
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <m2m_strlen+0x8>
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	8b 83       	std	Y+3, r24	; 0x03
    2d36:	9c 83       	std	Y+4, r25	; 0x04
	uint16	u16StrLen = 0;
    2d38:	19 82       	std	Y+1, r1	; 0x01
    2d3a:	1a 82       	std	Y+2, r1	; 0x02
	while(*pcStr)
    2d3c:	0a c0       	rjmp	.+20     	; 0x2d52 <m2m_strlen+0x2a>
	{
		u16StrLen ++;
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	9a 81       	ldd	r25, Y+2	; 0x02
    2d42:	01 96       	adiw	r24, 0x01	; 1
    2d44:	89 83       	std	Y+1, r24	; 0x01
    2d46:	9a 83       	std	Y+2, r25	; 0x02
		pcStr++;
    2d48:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4c:	01 96       	adiw	r24, 0x01	; 1
    2d4e:	8b 83       	std	Y+3, r24	; 0x03
    2d50:	9c 83       	std	Y+4, r25	; 0x04
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    2d52:	8b 81       	ldd	r24, Y+3	; 0x03
    2d54:	9c 81       	ldd	r25, Y+4	; 0x04
    2d56:	fc 01       	movw	r30, r24
    2d58:	80 81       	ld	r24, Z
    2d5a:	88 23       	and	r24, r24
    2d5c:	81 f7       	brne	.-32     	; 0x2d3e <m2m_strlen+0x16>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
    2d5e:	89 81       	ldd	r24, Y+1	; 0x01
    2d60:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2d62:	24 96       	adiw	r28, 0x04	; 4
    2d64:	cd bf       	out	0x3d, r28	; 61
    2d66:	de bf       	out	0x3e, r29	; 62
    2d68:	df 91       	pop	r29
    2d6a:	cf 91       	pop	r28
    2d6c:	08 95       	ret

00002d6e <isr>:
{
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
	return ret;
}
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	80 91 95 28 	lds	r24, 0x2895	; 0x802895 <gstrHifCxt+0x3>
    2d7a:	8f 5f       	subi	r24, 0xFF	; 255
    2d7c:	80 93 95 28 	sts	0x2895, r24	; 0x802895 <gstrHifCxt+0x3>
    2d80:	00 00       	nop
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	08 95       	ret

00002d88 <hif_set_rx_done>:
    2d88:	cf 93       	push	r28
    2d8a:	df 93       	push	r29
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
    2d90:	25 97       	sbiw	r28, 0x05	; 5
    2d92:	cd bf       	out	0x3d, r28	; 61
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	19 82       	std	Y+1, r1	; 0x01
    2d98:	10 92 94 28 	sts	0x2894, r1	; 0x802894 <gstrHifCxt+0x2>
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	0e 94 38 14 	call	0x2870	; 0x2870 <nm_bsp_interrupt_ctrl>
    2da2:	ce 01       	movw	r24, r28
    2da4:	02 96       	adiw	r24, 0x02	; 2
    2da6:	ac 01       	movw	r20, r24
    2da8:	60 e7       	ldi	r22, 0x70	; 112
    2daa:	70 e1       	ldi	r23, 0x10	; 16
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    2db4:	89 83       	std	Y+1, r24	; 0x01
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	88 23       	and	r24, r24
    2dba:	b9 f4       	brne	.+46     	; 0x2dea <hif_set_rx_done+0x62>
    2dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc0:	ac 81       	ldd	r26, Y+4	; 0x04
    2dc2:	bd 81       	ldd	r27, Y+5	; 0x05
    2dc4:	82 60       	ori	r24, 0x02	; 2
    2dc6:	8a 83       	std	Y+2, r24	; 0x02
    2dc8:	9b 83       	std	Y+3, r25	; 0x03
    2dca:	ac 83       	std	Y+4, r26	; 0x04
    2dcc:	bd 83       	std	Y+5, r27	; 0x05
    2dce:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd2:	ac 81       	ldd	r26, Y+4	; 0x04
    2dd4:	bd 81       	ldd	r27, Y+5	; 0x05
    2dd6:	9c 01       	movw	r18, r24
    2dd8:	ad 01       	movw	r20, r26
    2dda:	60 e7       	ldi	r22, 0x70	; 112
    2ddc:	70 e1       	ldi	r23, 0x10	; 16
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    2de6:	89 83       	std	Y+1, r24	; 0x01
    2de8:	01 c0       	rjmp	.+2      	; 0x2dec <hif_set_rx_done+0x64>
    2dea:	00 00       	nop
    2dec:	89 81       	ldd	r24, Y+1	; 0x01
    2dee:	25 96       	adiw	r28, 0x05	; 5
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	df 91       	pop	r29
    2df6:	cf 91       	pop	r28
    2df8:	08 95       	ret

00002dfa <m2m_hif_cb>:
    2dfa:	cf 93       	push	r28
    2dfc:	df 93       	push	r29
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
    2e02:	27 97       	sbiw	r28, 0x07	; 7
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	89 83       	std	Y+1, r24	; 0x01
    2e0a:	6a 83       	std	Y+2, r22	; 0x02
    2e0c:	7b 83       	std	Y+3, r23	; 0x03
    2e0e:	2c 83       	std	Y+4, r18	; 0x04
    2e10:	3d 83       	std	Y+5, r19	; 0x05
    2e12:	4e 83       	std	Y+6, r20	; 0x06
    2e14:	5f 83       	std	Y+7, r21	; 0x07
    2e16:	00 00       	nop
    2e18:	27 96       	adiw	r28, 0x07	; 7
    2e1a:	cd bf       	out	0x3d, r28	; 61
    2e1c:	de bf       	out	0x3e, r29	; 62
    2e1e:	df 91       	pop	r29
    2e20:	cf 91       	pop	r28
    2e22:	08 95       	ret

00002e24 <hif_chip_wake>:
    2e24:	cf 93       	push	r28
    2e26:	df 93       	push	r29
    2e28:	1f 92       	push	r1
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
    2e2e:	19 82       	std	Y+1, r1	; 0x01
    2e30:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <gstrHifCxt+0x2>
    2e34:	88 23       	and	r24, r24
    2e36:	11 f0       	breq	.+4      	; 0x2e3c <hif_chip_wake+0x18>
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	16 c0       	rjmp	.+44     	; 0x2e68 <hif_chip_wake+0x44>
    2e3c:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <gstrHifCxt+0x1>
    2e40:	88 23       	and	r24, r24
    2e42:	51 f4       	brne	.+20     	; 0x2e58 <hif_chip_wake+0x34>
    2e44:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <gstrHifCxt>
    2e48:	88 23       	and	r24, r24
    2e4a:	31 f0       	breq	.+12     	; 0x2e58 <hif_chip_wake+0x34>
    2e4c:	0e 94 c9 23 	call	0x4792	; 0x4792 <chip_wake>
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	88 23       	and	r24, r24
    2e56:	31 f4       	brne	.+12     	; 0x2e64 <hif_chip_wake+0x40>
    2e58:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <gstrHifCxt+0x1>
    2e5c:	8f 5f       	subi	r24, 0xFF	; 255
    2e5e:	80 93 93 28 	sts	0x2893, r24	; 0x802893 <gstrHifCxt+0x1>
    2e62:	01 c0       	rjmp	.+2      	; 0x2e66 <hif_chip_wake+0x42>
    2e64:	00 00       	nop
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	0f 90       	pop	r0
    2e6a:	df 91       	pop	r29
    2e6c:	cf 91       	pop	r28
    2e6e:	08 95       	ret

00002e70 <hif_chip_sleep_sc>:
    2e70:	cf 93       	push	r28
    2e72:	df 93       	push	r29
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <gstrHifCxt+0x1>
    2e7c:	88 23       	and	r24, r24
    2e7e:	29 f0       	breq	.+10     	; 0x2e8a <hif_chip_sleep_sc+0x1a>
    2e80:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <gstrHifCxt+0x1>
    2e84:	81 50       	subi	r24, 0x01	; 1
    2e86:	80 93 93 28 	sts	0x2893, r24	; 0x802893 <gstrHifCxt+0x1>
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	df 91       	pop	r29
    2e8e:	cf 91       	pop	r28
    2e90:	08 95       	ret

00002e92 <hif_chip_sleep>:
    2e92:	cf 93       	push	r28
    2e94:	df 93       	push	r29
    2e96:	1f 92       	push	r1
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    2e9c:	19 82       	std	Y+1, r1	; 0x01
    2e9e:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <gstrHifCxt+0x1>
    2ea2:	88 23       	and	r24, r24
    2ea4:	29 f0       	breq	.+10     	; 0x2eb0 <hif_chip_sleep+0x1e>
    2ea6:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <gstrHifCxt+0x1>
    2eaa:	81 50       	subi	r24, 0x01	; 1
    2eac:	80 93 93 28 	sts	0x2893, r24	; 0x802893 <gstrHifCxt+0x1>
    2eb0:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <gstrHifCxt+0x1>
    2eb4:	88 23       	and	r24, r24
    2eb6:	39 f4       	brne	.+14     	; 0x2ec6 <hif_chip_sleep+0x34>
    2eb8:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <gstrHifCxt>
    2ebc:	88 23       	and	r24, r24
    2ebe:	19 f0       	breq	.+6      	; 0x2ec6 <hif_chip_sleep+0x34>
    2ec0:	0e 94 34 23 	call	0x4668	; 0x4668 <chip_sleep>
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	0f 90       	pop	r0
    2eca:	df 91       	pop	r29
    2ecc:	cf 91       	pop	r28
    2ece:	08 95       	ret

00002ed0 <hif_init>:
    2ed0:	cf 93       	push	r28
    2ed2:	df 93       	push	r29
    2ed4:	00 d0       	rcall	.+0      	; 0x2ed6 <hif_init+0x6>
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62
    2eda:	89 83       	std	Y+1, r24	; 0x01
    2edc:	9a 83       	std	Y+2, r25	; 0x02
    2ede:	2a e1       	ldi	r18, 0x1A	; 26
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e0       	ldi	r20, 0x00	; 0
    2ee4:	50 e0       	ldi	r21, 0x00	; 0
    2ee6:	60 e0       	ldi	r22, 0x00	; 0
    2ee8:	82 e9       	ldi	r24, 0x92	; 146
    2eea:	98 e2       	ldi	r25, 0x28	; 40
    2eec:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <m2m_memset>
    2ef0:	87 eb       	ldi	r24, 0xB7	; 183
    2ef2:	96 e1       	ldi	r25, 0x16	; 22
    2ef4:	0e 94 18 14 	call	0x2830	; 0x2830 <nm_bsp_register_isr>
    2ef8:	6d ef       	ldi	r22, 0xFD	; 253
    2efa:	76 e1       	ldi	r23, 0x16	; 22
    2efc:	83 e0       	ldi	r24, 0x03	; 3
    2efe:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <hif_register_cb>
    2f02:	80 e0       	ldi	r24, 0x00	; 0
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	df 91       	pop	r29
    2f0a:	cf 91       	pop	r28
    2f0c:	08 95       	ret

00002f0e <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    2f0e:	cf 92       	push	r12
    2f10:	df 92       	push	r13
    2f12:	ef 92       	push	r14
    2f14:	ff 92       	push	r15
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	6f 97       	sbiw	r28, 0x1f	; 31
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	8c 8b       	std	Y+20, r24	; 0x14
    2f2a:	6d 8b       	std	Y+21, r22	; 0x15
    2f2c:	4e 8b       	std	Y+22, r20	; 0x16
    2f2e:	5f 8b       	std	Y+23, r21	; 0x17
    2f30:	28 8f       	std	Y+24, r18	; 0x18
    2f32:	39 8f       	std	Y+25, r19	; 0x19
    2f34:	0a 8f       	std	Y+26, r16	; 0x1a
    2f36:	1b 8f       	std	Y+27, r17	; 0x1b
    2f38:	ec 8e       	std	Y+28, r14	; 0x1c
    2f3a:	fd 8e       	std	Y+29, r15	; 0x1d
    2f3c:	ce 8e       	std	Y+30, r12	; 0x1e
    2f3e:	df 8e       	std	Y+31, r13	; 0x1f
	sint8		ret = M2M_ERR_SEND;
    2f40:	8f ef       	ldi	r24, 0xFF	; 255
    2f42:	89 83       	std	Y+1, r24	; 0x01
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    2f44:	8d 89       	ldd	r24, Y+21	; 0x15
    2f46:	8f 77       	andi	r24, 0x7F	; 127
    2f48:	8b 83       	std	Y+3, r24	; 0x03
	strHif.u8Gid		= u8Gid;
    2f4a:	8c 89       	ldd	r24, Y+20	; 0x14
    2f4c:	8a 83       	std	Y+2, r24	; 0x02
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    2f4e:	88 e0       	ldi	r24, 0x08	; 8
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	8c 83       	std	Y+4, r24	; 0x04
    2f54:	9d 83       	std	Y+5, r25	; 0x05
	if(pu8DataBuf != NULL)
    2f56:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f58:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2f5a:	89 2b       	or	r24, r25
    2f5c:	69 f0       	breq	.+26     	; 0x2f78 <hif_send+0x6a>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    2f5e:	2c 81       	ldd	r18, Y+4	; 0x04
    2f60:	3d 81       	ldd	r19, Y+5	; 0x05
    2f62:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2f64:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2f66:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f68:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f6a:	84 0f       	add	r24, r20
    2f6c:	95 1f       	adc	r25, r21
    2f6e:	82 0f       	add	r24, r18
    2f70:	93 1f       	adc	r25, r19
    2f72:	8c 83       	std	Y+4, r24	; 0x04
    2f74:	9d 83       	std	Y+5, r25	; 0x05
    2f76:	08 c0       	rjmp	.+16     	; 0x2f88 <hif_send+0x7a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    2f78:	2c 81       	ldd	r18, Y+4	; 0x04
    2f7a:	3d 81       	ldd	r19, Y+5	; 0x05
    2f7c:	88 8d       	ldd	r24, Y+24	; 0x18
    2f7e:	99 8d       	ldd	r25, Y+25	; 0x19
    2f80:	82 0f       	add	r24, r18
    2f82:	93 1f       	adc	r25, r19
    2f84:	8c 83       	std	Y+4, r24	; 0x04
    2f86:	9d 83       	std	Y+5, r25	; 0x05
	}
	ret = hif_chip_wake();
    2f88:	0e 94 12 17 	call	0x2e24	; 0x2e24 <hif_chip_wake>
    2f8c:	89 83       	std	Y+1, r24	; 0x01
	if(ret == M2M_SUCCESS)
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	88 23       	and	r24, r24
    2f92:	09 f0       	breq	.+2      	; 0x2f96 <hif_send+0x88>
    2f94:	a6 c1       	rjmp	.+844    	; 0x32e2 <hif_send+0x3d4>
	{
		volatile uint32 reg, dma_addr = 0;
    2f96:	1a 86       	std	Y+10, r1	; 0x0a
    2f98:	1b 86       	std	Y+11, r1	; 0x0b
    2f9a:	1c 86       	std	Y+12, r1	; 0x0c
    2f9c:	1d 86       	std	Y+13, r1	; 0x0d
		volatile uint16 cnt = 0;
    2f9e:	1e 86       	std	Y+14, r1	; 0x0e
    2fa0:	1f 86       	std	Y+15, r1	; 0x0f
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    2fa2:	1e 82       	std	Y+6, r1	; 0x06
    2fa4:	1f 82       	std	Y+7, r1	; 0x07
    2fa6:	18 86       	std	Y+8, r1	; 0x08
    2fa8:	19 86       	std	Y+9, r1	; 0x09
		reg |= (uint32)u8Gid;
    2faa:	8c 89       	ldd	r24, Y+20	; 0x14
    2fac:	28 2f       	mov	r18, r24
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	40 e0       	ldi	r20, 0x00	; 0
    2fb2:	50 e0       	ldi	r21, 0x00	; 0
    2fb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2fb8:	a8 85       	ldd	r26, Y+8	; 0x08
    2fba:	b9 85       	ldd	r27, Y+9	; 0x09
    2fbc:	82 2b       	or	r24, r18
    2fbe:	93 2b       	or	r25, r19
    2fc0:	a4 2b       	or	r26, r20
    2fc2:	b5 2b       	or	r27, r21
    2fc4:	8e 83       	std	Y+6, r24	; 0x06
    2fc6:	9f 83       	std	Y+7, r25	; 0x07
    2fc8:	a8 87       	std	Y+8, r26	; 0x08
    2fca:	b9 87       	std	Y+9, r27	; 0x09
		reg |= ((uint32)u8Opcode<<8);
    2fcc:	8d 89       	ldd	r24, Y+21	; 0x15
    2fce:	88 2f       	mov	r24, r24
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	a0 e0       	ldi	r26, 0x00	; 0
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	22 27       	eor	r18, r18
    2fd8:	38 2f       	mov	r19, r24
    2fda:	49 2f       	mov	r20, r25
    2fdc:	5a 2f       	mov	r21, r26
    2fde:	8e 81       	ldd	r24, Y+6	; 0x06
    2fe0:	9f 81       	ldd	r25, Y+7	; 0x07
    2fe2:	a8 85       	ldd	r26, Y+8	; 0x08
    2fe4:	b9 85       	ldd	r27, Y+9	; 0x09
    2fe6:	82 2b       	or	r24, r18
    2fe8:	93 2b       	or	r25, r19
    2fea:	a4 2b       	or	r26, r20
    2fec:	b5 2b       	or	r27, r21
    2fee:	8e 83       	std	Y+6, r24	; 0x06
    2ff0:	9f 83       	std	Y+7, r25	; 0x07
    2ff2:	a8 87       	std	Y+8, r26	; 0x08
    2ff4:	b9 87       	std	Y+9, r27	; 0x09
		reg |= ((uint32)strHif.u16Length<<16);
    2ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff8:	9d 81       	ldd	r25, Y+5	; 0x05
    2ffa:	cc 01       	movw	r24, r24
    2ffc:	a0 e0       	ldi	r26, 0x00	; 0
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	ac 01       	movw	r20, r24
    3002:	33 27       	eor	r19, r19
    3004:	22 27       	eor	r18, r18
    3006:	8e 81       	ldd	r24, Y+6	; 0x06
    3008:	9f 81       	ldd	r25, Y+7	; 0x07
    300a:	a8 85       	ldd	r26, Y+8	; 0x08
    300c:	b9 85       	ldd	r27, Y+9	; 0x09
    300e:	82 2b       	or	r24, r18
    3010:	93 2b       	or	r25, r19
    3012:	a4 2b       	or	r26, r20
    3014:	b5 2b       	or	r27, r21
    3016:	8e 83       	std	Y+6, r24	; 0x06
    3018:	9f 83       	std	Y+7, r25	; 0x07
    301a:	a8 87       	std	Y+8, r26	; 0x08
    301c:	b9 87       	std	Y+9, r27	; 0x09
		ret = nm_write_reg(NMI_STATE_REG,reg);
    301e:	8e 81       	ldd	r24, Y+6	; 0x06
    3020:	9f 81       	ldd	r25, Y+7	; 0x07
    3022:	a8 85       	ldd	r26, Y+8	; 0x08
    3024:	b9 85       	ldd	r27, Y+9	; 0x09
    3026:	9c 01       	movw	r18, r24
    3028:	ad 01       	movw	r20, r26
    302a:	6c e8       	ldi	r22, 0x8C	; 140
    302c:	70 e1       	ldi	r23, 0x10	; 16
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    3036:	89 83       	std	Y+1, r24	; 0x01
		if(M2M_SUCCESS != ret) goto ERR1;
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	88 23       	and	r24, r24
    303c:	09 f0       	breq	.+2      	; 0x3040 <hif_send+0x132>
    303e:	45 c1       	rjmp	.+650    	; 0x32ca <hif_send+0x3bc>

		reg = 0UL;
    3040:	1e 82       	std	Y+6, r1	; 0x06
    3042:	1f 82       	std	Y+7, r1	; 0x07
    3044:	18 86       	std	Y+8, r1	; 0x08
    3046:	19 86       	std	Y+9, r1	; 0x09
		reg |= NBIT1;
    3048:	8e 81       	ldd	r24, Y+6	; 0x06
    304a:	9f 81       	ldd	r25, Y+7	; 0x07
    304c:	a8 85       	ldd	r26, Y+8	; 0x08
    304e:	b9 85       	ldd	r27, Y+9	; 0x09
    3050:	82 60       	ori	r24, 0x02	; 2
    3052:	8e 83       	std	Y+6, r24	; 0x06
    3054:	9f 83       	std	Y+7, r25	; 0x07
    3056:	a8 87       	std	Y+8, r26	; 0x08
    3058:	b9 87       	std	Y+9, r27	; 0x09
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    305a:	8e 81       	ldd	r24, Y+6	; 0x06
    305c:	9f 81       	ldd	r25, Y+7	; 0x07
    305e:	a8 85       	ldd	r26, Y+8	; 0x08
    3060:	b9 85       	ldd	r27, Y+9	; 0x09
    3062:	9c 01       	movw	r18, r24
    3064:	ad 01       	movw	r20, r26
    3066:	68 e7       	ldi	r22, 0x78	; 120
    3068:	70 e1       	ldi	r23, 0x10	; 16
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    3072:	89 83       	std	Y+1, r24	; 0x01
		if(M2M_SUCCESS != ret) goto ERR1;
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	88 23       	and	r24, r24
    3078:	09 f0       	breq	.+2      	; 0x307c <hif_send+0x16e>
    307a:	29 c1       	rjmp	.+594    	; 0x32ce <hif_send+0x3c0>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    307c:	1a 86       	std	Y+10, r1	; 0x0a
    307e:	1b 86       	std	Y+11, r1	; 0x0b
    3080:	1c 86       	std	Y+12, r1	; 0x0c
    3082:	1d 86       	std	Y+13, r1	; 0x0d
		
		for(cnt = 0; cnt < 1000; cnt ++)
    3084:	1e 86       	std	Y+14, r1	; 0x0e
    3086:	1f 86       	std	Y+15, r1	; 0x0f
    3088:	3d c0       	rjmp	.+122    	; 0x3104 <hif_send+0x1f6>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    308a:	ce 01       	movw	r24, r28
    308c:	06 96       	adiw	r24, 0x06	; 6
    308e:	ac 01       	movw	r20, r24
    3090:	68 e7       	ldi	r22, 0x78	; 120
    3092:	70 e1       	ldi	r23, 0x10	; 16
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    309c:	89 83       	std	Y+1, r24	; 0x01
			if(ret != M2M_SUCCESS) break;
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	88 23       	and	r24, r24
    30a2:	b9 f5       	brne	.+110    	; 0x3112 <hif_send+0x204>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    30a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    30a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    30a8:	84 3f       	cpi	r24, 0xF4	; 244
    30aa:	91 40       	sbci	r25, 0x01	; 1
    30ac:	40 f0       	brcs	.+16     	; 0x30be <hif_send+0x1b0>
				if(cnt < 501) {
    30ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    30b0:	9f 85       	ldd	r25, Y+15	; 0x0f
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    30b2:	61 e0       	ldi	r22, 0x01	; 1
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	0e 94 80 13 	call	0x2700	; 0x2700 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
    30be:	8e 81       	ldd	r24, Y+6	; 0x06
    30c0:	9f 81       	ldd	r25, Y+7	; 0x07
    30c2:	a8 85       	ldd	r26, Y+8	; 0x08
    30c4:	b9 85       	ldd	r27, Y+9	; 0x09
    30c6:	82 70       	andi	r24, 0x02	; 2
    30c8:	99 27       	eor	r25, r25
    30ca:	aa 27       	eor	r26, r26
    30cc:	bb 27       	eor	r27, r27
    30ce:	89 2b       	or	r24, r25
    30d0:	8a 2b       	or	r24, r26
    30d2:	8b 2b       	or	r24, r27
    30d4:	91 f4       	brne	.+36     	; 0x30fa <hif_send+0x1ec>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    30d6:	ce 01       	movw	r24, r28
    30d8:	0a 96       	adiw	r24, 0x0a	; 10
    30da:	ac 01       	movw	r20, r24
    30dc:	60 e0       	ldi	r22, 0x00	; 0
    30de:	74 e0       	ldi	r23, 0x04	; 4
    30e0:	85 e1       	ldi	r24, 0x15	; 21
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    30e8:	89 83       	std	Y+1, r24	; 0x01
				if(ret != M2M_SUCCESS) {
    30ea:	89 81       	ldd	r24, Y+1	; 0x01
    30ec:	88 23       	and	r24, r24
    30ee:	99 f0       	breq	.+38     	; 0x3116 <hif_send+0x208>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    30f0:	1a 86       	std	Y+10, r1	; 0x0a
    30f2:	1b 86       	std	Y+11, r1	; 0x0b
    30f4:	1c 86       	std	Y+12, r1	; 0x0c
    30f6:	1d 86       	std	Y+13, r1	; 0x0d
					goto ERR1;
    30f8:	f1 c0       	rjmp	.+482    	; 0x32dc <hif_send+0x3ce>
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
		
		for(cnt = 0; cnt < 1000; cnt ++)
    30fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    30fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    30fe:	01 96       	adiw	r24, 0x01	; 1
    3100:	8e 87       	std	Y+14, r24	; 0x0e
    3102:	9f 87       	std	Y+15, r25	; 0x0f
    3104:	8e 85       	ldd	r24, Y+14	; 0x0e
    3106:	9f 85       	ldd	r25, Y+15	; 0x0f
    3108:	88 3e       	cpi	r24, 0xE8	; 232
    310a:	93 40       	sbci	r25, 0x03	; 3
    310c:	08 f4       	brcc	.+2      	; 0x3110 <hif_send+0x202>
    310e:	bd cf       	rjmp	.-134    	; 0x308a <hif_send+0x17c>
    3110:	03 c0       	rjmp	.+6      	; 0x3118 <hif_send+0x20a>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
    3112:	00 00       	nop
    3114:	01 c0       	rjmp	.+2      	; 0x3118 <hif_send+0x20a>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
					goto ERR1;
				}
				/*in case of success break */
				break;
    3116:	00 00       	nop
			}
		}

		if (dma_addr != 0)
    3118:	8a 85       	ldd	r24, Y+10	; 0x0a
    311a:	9b 85       	ldd	r25, Y+11	; 0x0b
    311c:	ac 85       	ldd	r26, Y+12	; 0x0c
    311e:	bd 85       	ldd	r27, Y+13	; 0x0d
    3120:	89 2b       	or	r24, r25
    3122:	8a 2b       	or	r24, r26
    3124:	8b 2b       	or	r24, r27
    3126:	09 f4       	brne	.+2      	; 0x312a <hif_send+0x21c>
    3128:	c5 c0       	rjmp	.+394    	; 0x32b4 <hif_send+0x3a6>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    312a:	8a 85       	ldd	r24, Y+10	; 0x0a
    312c:	9b 85       	ldd	r25, Y+11	; 0x0b
    312e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3130:	bd 85       	ldd	r27, Y+13	; 0x0d
    3132:	88 8b       	std	Y+16, r24	; 0x10
    3134:	99 8b       	std	Y+17, r25	; 0x11
    3136:	aa 8b       	std	Y+18, r26	; 0x12
    3138:	bb 8b       	std	Y+19, r27	; 0x13
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    313a:	8c 81       	ldd	r24, Y+4	; 0x04
    313c:	9d 81       	ldd	r25, Y+5	; 0x05
    313e:	8c 83       	std	Y+4, r24	; 0x04
    3140:	9d 83       	std	Y+5, r25	; 0x05
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    3142:	88 89       	ldd	r24, Y+16	; 0x10
    3144:	99 89       	ldd	r25, Y+17	; 0x11
    3146:	aa 89       	ldd	r26, Y+18	; 0x12
    3148:	bb 89       	ldd	r27, Y+19	; 0x13
    314a:	ae 01       	movw	r20, r28
    314c:	4e 5f       	subi	r20, 0xFE	; 254
    314e:	5f 4f       	sbci	r21, 0xFF	; 255
    3150:	08 e0       	ldi	r16, 0x08	; 8
    3152:	10 e0       	ldi	r17, 0x00	; 0
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	bc 01       	movw	r22, r24
    315a:	cd 01       	movw	r24, r26
    315c:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <nm_write_block>
    3160:	89 83       	std	Y+1, r24	; 0x01
			if(M2M_SUCCESS != ret) goto ERR1;
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	88 23       	and	r24, r24
    3166:	09 f0       	breq	.+2      	; 0x316a <hif_send+0x25c>
    3168:	b4 c0       	rjmp	.+360    	; 0x32d2 <hif_send+0x3c4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    316a:	88 89       	ldd	r24, Y+16	; 0x10
    316c:	99 89       	ldd	r25, Y+17	; 0x11
    316e:	aa 89       	ldd	r26, Y+18	; 0x12
    3170:	bb 89       	ldd	r27, Y+19	; 0x13
    3172:	08 96       	adiw	r24, 0x08	; 8
    3174:	a1 1d       	adc	r26, r1
    3176:	b1 1d       	adc	r27, r1
    3178:	88 8b       	std	Y+16, r24	; 0x10
    317a:	99 8b       	std	Y+17, r25	; 0x11
    317c:	aa 8b       	std	Y+18, r26	; 0x12
    317e:	bb 8b       	std	Y+19, r27	; 0x13
			if(pu8CtrlBuf != NULL)
    3180:	8e 89       	ldd	r24, Y+22	; 0x16
    3182:	9f 89       	ldd	r25, Y+23	; 0x17
    3184:	89 2b       	or	r24, r25
    3186:	41 f1       	breq	.+80     	; 0x31d8 <hif_send+0x2ca>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    3188:	88 8d       	ldd	r24, Y+24	; 0x18
    318a:	99 8d       	ldd	r25, Y+25	; 0x19
    318c:	9c 01       	movw	r18, r24
    318e:	40 e0       	ldi	r20, 0x00	; 0
    3190:	50 e0       	ldi	r21, 0x00	; 0
    3192:	88 89       	ldd	r24, Y+16	; 0x10
    3194:	99 89       	ldd	r25, Y+17	; 0x11
    3196:	aa 89       	ldd	r26, Y+18	; 0x12
    3198:	bb 89       	ldd	r27, Y+19	; 0x13
    319a:	6e 89       	ldd	r22, Y+22	; 0x16
    319c:	7f 89       	ldd	r23, Y+23	; 0x17
    319e:	89 01       	movw	r16, r18
    31a0:	9a 01       	movw	r18, r20
    31a2:	ab 01       	movw	r20, r22
    31a4:	bc 01       	movw	r22, r24
    31a6:	cd 01       	movw	r24, r26
    31a8:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <nm_write_block>
    31ac:	89 83       	std	Y+1, r24	; 0x01
				if(M2M_SUCCESS != ret) goto ERR1;
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	88 23       	and	r24, r24
    31b2:	09 f0       	breq	.+2      	; 0x31b6 <hif_send+0x2a8>
    31b4:	90 c0       	rjmp	.+288    	; 0x32d6 <hif_send+0x3c8>
				u32CurrAddr += u16CtrlBufSize;
    31b6:	88 8d       	ldd	r24, Y+24	; 0x18
    31b8:	99 8d       	ldd	r25, Y+25	; 0x19
    31ba:	9c 01       	movw	r18, r24
    31bc:	40 e0       	ldi	r20, 0x00	; 0
    31be:	50 e0       	ldi	r21, 0x00	; 0
    31c0:	88 89       	ldd	r24, Y+16	; 0x10
    31c2:	99 89       	ldd	r25, Y+17	; 0x11
    31c4:	aa 89       	ldd	r26, Y+18	; 0x12
    31c6:	bb 89       	ldd	r27, Y+19	; 0x13
    31c8:	82 0f       	add	r24, r18
    31ca:	93 1f       	adc	r25, r19
    31cc:	a4 1f       	adc	r26, r20
    31ce:	b5 1f       	adc	r27, r21
    31d0:	88 8b       	std	Y+16, r24	; 0x10
    31d2:	99 8b       	std	Y+17, r25	; 0x11
    31d4:	aa 8b       	std	Y+18, r26	; 0x12
    31d6:	bb 8b       	std	Y+19, r27	; 0x13
			}
			if(pu8DataBuf != NULL)
    31d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31dc:	89 2b       	or	r24, r25
    31de:	09 f4       	brne	.+2      	; 0x31e2 <hif_send+0x2d4>
    31e0:	3f c0       	rjmp	.+126    	; 0x3260 <hif_send+0x352>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    31e2:	2e 8d       	ldd	r18, Y+30	; 0x1e
    31e4:	3f 8d       	ldd	r19, Y+31	; 0x1f
    31e6:	88 8d       	ldd	r24, Y+24	; 0x18
    31e8:	99 8d       	ldd	r25, Y+25	; 0x19
    31ea:	a9 01       	movw	r20, r18
    31ec:	48 1b       	sub	r20, r24
    31ee:	59 0b       	sbc	r21, r25
    31f0:	ca 01       	movw	r24, r20
    31f2:	9c 01       	movw	r18, r24
    31f4:	40 e0       	ldi	r20, 0x00	; 0
    31f6:	50 e0       	ldi	r21, 0x00	; 0
    31f8:	88 89       	ldd	r24, Y+16	; 0x10
    31fa:	99 89       	ldd	r25, Y+17	; 0x11
    31fc:	aa 89       	ldd	r26, Y+18	; 0x12
    31fe:	bb 89       	ldd	r27, Y+19	; 0x13
    3200:	82 0f       	add	r24, r18
    3202:	93 1f       	adc	r25, r19
    3204:	a4 1f       	adc	r26, r20
    3206:	b5 1f       	adc	r27, r21
    3208:	88 8b       	std	Y+16, r24	; 0x10
    320a:	99 8b       	std	Y+17, r25	; 0x11
    320c:	aa 8b       	std	Y+18, r26	; 0x12
    320e:	bb 8b       	std	Y+19, r27	; 0x13
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    3210:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3212:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3214:	9c 01       	movw	r18, r24
    3216:	40 e0       	ldi	r20, 0x00	; 0
    3218:	50 e0       	ldi	r21, 0x00	; 0
    321a:	88 89       	ldd	r24, Y+16	; 0x10
    321c:	99 89       	ldd	r25, Y+17	; 0x11
    321e:	aa 89       	ldd	r26, Y+18	; 0x12
    3220:	bb 89       	ldd	r27, Y+19	; 0x13
    3222:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3224:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3226:	89 01       	movw	r16, r18
    3228:	9a 01       	movw	r18, r20
    322a:	ab 01       	movw	r20, r22
    322c:	bc 01       	movw	r22, r24
    322e:	cd 01       	movw	r24, r26
    3230:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <nm_write_block>
    3234:	89 83       	std	Y+1, r24	; 0x01
				if(M2M_SUCCESS != ret) goto ERR1;
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	88 23       	and	r24, r24
    323a:	09 f0       	breq	.+2      	; 0x323e <hif_send+0x330>
    323c:	4e c0       	rjmp	.+156    	; 0x32da <hif_send+0x3cc>
				u32CurrAddr += u16DataSize;
    323e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3240:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3242:	9c 01       	movw	r18, r24
    3244:	40 e0       	ldi	r20, 0x00	; 0
    3246:	50 e0       	ldi	r21, 0x00	; 0
    3248:	88 89       	ldd	r24, Y+16	; 0x10
    324a:	99 89       	ldd	r25, Y+17	; 0x11
    324c:	aa 89       	ldd	r26, Y+18	; 0x12
    324e:	bb 89       	ldd	r27, Y+19	; 0x13
    3250:	82 0f       	add	r24, r18
    3252:	93 1f       	adc	r25, r19
    3254:	a4 1f       	adc	r26, r20
    3256:	b5 1f       	adc	r27, r21
    3258:	88 8b       	std	Y+16, r24	; 0x10
    325a:	99 8b       	std	Y+17, r25	; 0x11
    325c:	aa 8b       	std	Y+18, r26	; 0x12
    325e:	bb 8b       	std	Y+19, r27	; 0x13
			}

			reg = dma_addr << 2;
    3260:	8a 85       	ldd	r24, Y+10	; 0x0a
    3262:	9b 85       	ldd	r25, Y+11	; 0x0b
    3264:	ac 85       	ldd	r26, Y+12	; 0x0c
    3266:	bd 85       	ldd	r27, Y+13	; 0x0d
    3268:	88 0f       	add	r24, r24
    326a:	99 1f       	adc	r25, r25
    326c:	aa 1f       	adc	r26, r26
    326e:	bb 1f       	adc	r27, r27
    3270:	88 0f       	add	r24, r24
    3272:	99 1f       	adc	r25, r25
    3274:	aa 1f       	adc	r26, r26
    3276:	bb 1f       	adc	r27, r27
    3278:	8e 83       	std	Y+6, r24	; 0x06
    327a:	9f 83       	std	Y+7, r25	; 0x07
    327c:	a8 87       	std	Y+8, r26	; 0x08
    327e:	b9 87       	std	Y+9, r27	; 0x09
			reg |= NBIT1;
    3280:	8e 81       	ldd	r24, Y+6	; 0x06
    3282:	9f 81       	ldd	r25, Y+7	; 0x07
    3284:	a8 85       	ldd	r26, Y+8	; 0x08
    3286:	b9 85       	ldd	r27, Y+9	; 0x09
    3288:	82 60       	ori	r24, 0x02	; 2
    328a:	8e 83       	std	Y+6, r24	; 0x06
    328c:	9f 83       	std	Y+7, r25	; 0x07
    328e:	a8 87       	std	Y+8, r26	; 0x08
    3290:	b9 87       	std	Y+9, r27	; 0x09
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    3292:	8e 81       	ldd	r24, Y+6	; 0x06
    3294:	9f 81       	ldd	r25, Y+7	; 0x07
    3296:	a8 85       	ldd	r26, Y+8	; 0x08
    3298:	b9 85       	ldd	r27, Y+9	; 0x09
    329a:	9c 01       	movw	r18, r24
    329c:	ad 01       	movw	r20, r26
    329e:	6c e6       	ldi	r22, 0x6C	; 108
    32a0:	70 e1       	ldi	r23, 0x10	; 16
    32a2:	80 e0       	ldi	r24, 0x00	; 0
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    32aa:	89 83       	std	Y+1, r24	; 0x01
			if(M2M_SUCCESS != ret) goto ERR1;
    32ac:	89 81       	ldd	r24, Y+1	; 0x01
    32ae:	88 23       	and	r24, r24
    32b0:	39 f0       	breq	.+14     	; 0x32c0 <hif_send+0x3b2>
    32b2:	14 c0       	rjmp	.+40     	; 0x32dc <hif_send+0x3ce>
		}
		else
		{
			ret = hif_chip_sleep();
    32b4:	0e 94 49 17 	call	0x2e92	; 0x2e92 <hif_chip_sleep>
    32b8:	89 83       	std	Y+1, r24	; 0x01
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    32ba:	8d ef       	ldi	r24, 0xFD	; 253
    32bc:	89 83       	std	Y+1, r24	; 0x01
			goto ERR2;
    32be:	12 c0       	rjmp	.+36     	; 0x32e4 <hif_send+0x3d6>
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR2;
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    32c0:	0e 94 49 17 	call	0x2e92	; 0x2e92 <hif_chip_sleep>
    32c4:	89 83       	std	Y+1, r24	; 0x01
	return ret;
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	0e c0       	rjmp	.+28     	; 0x32e6 <hif_send+0x3d8>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    32ca:	00 00       	nop
    32cc:	07 c0       	rjmp	.+14     	; 0x32dc <hif_send+0x3ce>

		reg = 0UL;
		reg |= NBIT1;
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    32ce:	00 00       	nop
    32d0:	05 c0       	rjmp	.+10     	; 0x32dc <hif_send+0x3ce>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
			if(M2M_SUCCESS != ret) goto ERR1;
    32d2:	00 00       	nop
    32d4:	03 c0       	rjmp	.+6      	; 0x32dc <hif_send+0x3ce>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
			if(pu8CtrlBuf != NULL)
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
				if(M2M_SUCCESS != ret) goto ERR1;
    32d6:	00 00       	nop
    32d8:	01 c0       	rjmp	.+2      	; 0x32dc <hif_send+0x3ce>
			}
			if(pu8DataBuf != NULL)
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
				if(M2M_SUCCESS != ret) goto ERR1;
    32da:	00 00       	nop
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    32dc:	0e 94 38 17 	call	0x2e70	; 0x2e70 <hif_chip_sleep_sc>
    32e0:	01 c0       	rjmp	.+2      	; 0x32e4 <hif_send+0x3d6>

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR2;
    32e2:	00 00       	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
ERR2:
	/*logical error*/
	return ret;
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    32e6:	6f 96       	adiw	r28, 0x1f	; 31
    32e8:	cd bf       	out	0x3d, r28	; 61
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	1f 91       	pop	r17
    32f2:	0f 91       	pop	r16
    32f4:	ff 90       	pop	r15
    32f6:	ef 90       	pop	r14
    32f8:	df 90       	pop	r13
    32fa:	cf 90       	pop	r12
    32fc:	08 95       	ret

000032fe <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    32fe:	0f 93       	push	r16
    3300:	1f 93       	push	r17
    3302:	cf 93       	push	r28
    3304:	df 93       	push	r29
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	2f 97       	sbiw	r28, 0x0f	; 15
    330c:	cd bf       	out	0x3d, r28	; 61
    330e:	de bf       	out	0x3e, r29	; 62
	sint8 ret = M2M_SUCCESS;
    3310:	19 82       	std	Y+1, r1	; 0x01
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    3312:	ce 01       	movw	r24, r28
    3314:	04 96       	adiw	r24, 0x04	; 4
    3316:	ac 01       	movw	r20, r24
    3318:	60 e7       	ldi	r22, 0x70	; 112
    331a:	70 e1       	ldi	r23, 0x10	; 16
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    3324:	89 83       	std	Y+1, r24	; 0x01
	if(M2M_SUCCESS == ret)
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	88 23       	and	r24, r24
    332a:	09 f0       	breq	.+2      	; 0x332e <hif_isr+0x30>
    332c:	70 c1       	rjmp	.+736    	; 0x360e <hif_isr+0x310>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    332e:	8c 81       	ldd	r24, Y+4	; 0x04
    3330:	9d 81       	ldd	r25, Y+5	; 0x05
    3332:	ae 81       	ldd	r26, Y+6	; 0x06
    3334:	bf 81       	ldd	r27, Y+7	; 0x07
    3336:	81 70       	andi	r24, 0x01	; 1
    3338:	99 27       	eor	r25, r25
    333a:	aa 27       	eor	r26, r26
    333c:	bb 27       	eor	r27, r27
    333e:	89 2b       	or	r24, r25
    3340:	8a 2b       	or	r24, r26
    3342:	8b 2b       	or	r24, r27
    3344:	09 f4       	brne	.+2      	; 0x3348 <hif_isr+0x4a>
    3346:	60 c1       	rjmp	.+704    	; 0x3608 <hif_isr+0x30a>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	0e 94 38 14 	call	0x2870	; 0x2870 <nm_bsp_interrupt_ctrl>
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    334e:	8c 81       	ldd	r24, Y+4	; 0x04
    3350:	9d 81       	ldd	r25, Y+5	; 0x05
    3352:	ae 81       	ldd	r26, Y+6	; 0x06
    3354:	bf 81       	ldd	r27, Y+7	; 0x07
    3356:	8e 7f       	andi	r24, 0xFE	; 254
    3358:	8c 83       	std	Y+4, r24	; 0x04
    335a:	9d 83       	std	Y+5, r25	; 0x05
    335c:	ae 83       	std	Y+6, r26	; 0x06
    335e:	bf 83       	std	Y+7, r27	; 0x07
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    3360:	8c 81       	ldd	r24, Y+4	; 0x04
    3362:	9d 81       	ldd	r25, Y+5	; 0x05
    3364:	ae 81       	ldd	r26, Y+6	; 0x06
    3366:	bf 81       	ldd	r27, Y+7	; 0x07
    3368:	9c 01       	movw	r18, r24
    336a:	ad 01       	movw	r20, r26
    336c:	60 e7       	ldi	r22, 0x70	; 112
    336e:	70 e1       	ldi	r23, 0x10	; 16
    3370:	80 e0       	ldi	r24, 0x00	; 0
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    3378:	89 83       	std	Y+1, r24	; 0x01
			if(ret != M2M_SUCCESS)goto ERR1;
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	88 23       	and	r24, r24
    337e:	09 f0       	breq	.+2      	; 0x3382 <hif_isr+0x84>
    3380:	48 c1       	rjmp	.+656    	; 0x3612 <hif_isr+0x314>
			gstrHifCxt.u8HifRXDone = 1;
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	80 93 94 28 	sts	0x2894, r24	; 0x802894 <gstrHifCxt+0x2>
			size = (uint16)((reg >> 2) & 0xfff);
    3388:	8c 81       	ldd	r24, Y+4	; 0x04
    338a:	9d 81       	ldd	r25, Y+5	; 0x05
    338c:	ae 81       	ldd	r26, Y+6	; 0x06
    338e:	bf 81       	ldd	r27, Y+7	; 0x07
    3390:	b6 95       	lsr	r27
    3392:	a7 95       	ror	r26
    3394:	97 95       	ror	r25
    3396:	87 95       	ror	r24
    3398:	b6 95       	lsr	r27
    339a:	a7 95       	ror	r26
    339c:	97 95       	ror	r25
    339e:	87 95       	ror	r24
    33a0:	9f 70       	andi	r25, 0x0F	; 15
    33a2:	8a 83       	std	Y+2, r24	; 0x02
    33a4:	9b 83       	std	Y+3, r25	; 0x03
			if (size > 0) {
    33a6:	8a 81       	ldd	r24, Y+2	; 0x02
    33a8:	9b 81       	ldd	r25, Y+3	; 0x03
    33aa:	89 2b       	or	r24, r25
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <hif_isr+0xb2>
    33ae:	29 c1       	rjmp	.+594    	; 0x3602 <hif_isr+0x304>
				uint32 address = 0;
    33b0:	1c 86       	std	Y+12, r1	; 0x0c
    33b2:	1d 86       	std	Y+13, r1	; 0x0d
    33b4:	1e 86       	std	Y+14, r1	; 0x0e
    33b6:	1f 86       	std	Y+15, r1	; 0x0f
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    33b8:	ce 01       	movw	r24, r28
    33ba:	0c 96       	adiw	r24, 0x0c	; 12
    33bc:	ac 01       	movw	r20, r24
    33be:	64 e8       	ldi	r22, 0x84	; 132
    33c0:	70 e1       	ldi	r23, 0x10	; 16
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    33ca:	89 83       	std	Y+1, r24	; 0x01
				if(M2M_SUCCESS != ret)
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	88 23       	and	r24, r24
    33d0:	21 f0       	breq	.+8      	; 0x33da <hif_isr+0xdc>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
					nm_bsp_interrupt_ctrl(1);
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	0e 94 38 14 	call	0x2870	; 0x2870 <nm_bsp_interrupt_ctrl>
					goto ERR1;
    33d8:	1d c1       	rjmp	.+570    	; 0x3614 <hif_isr+0x316>
				}
				gstrHifCxt.u32RxAddr = address;
    33da:	8c 85       	ldd	r24, Y+12	; 0x0c
    33dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    33de:	ae 85       	ldd	r26, Y+14	; 0x0e
    33e0:	bf 85       	ldd	r27, Y+15	; 0x0f
    33e2:	80 93 96 28 	sts	0x2896, r24	; 0x802896 <gstrHifCxt+0x4>
    33e6:	90 93 97 28 	sts	0x2897, r25	; 0x802897 <gstrHifCxt+0x5>
    33ea:	a0 93 98 28 	sts	0x2898, r26	; 0x802898 <gstrHifCxt+0x6>
    33ee:	b0 93 99 28 	sts	0x2899, r27	; 0x802899 <gstrHifCxt+0x7>
				gstrHifCxt.u32RxSize = size;
    33f2:	8a 81       	ldd	r24, Y+2	; 0x02
    33f4:	9b 81       	ldd	r25, Y+3	; 0x03
    33f6:	cc 01       	movw	r24, r24
    33f8:	a0 e0       	ldi	r26, 0x00	; 0
    33fa:	b0 e0       	ldi	r27, 0x00	; 0
    33fc:	80 93 9a 28 	sts	0x289A, r24	; 0x80289a <gstrHifCxt+0x8>
    3400:	90 93 9b 28 	sts	0x289B, r25	; 0x80289b <gstrHifCxt+0x9>
    3404:	a0 93 9c 28 	sts	0x289C, r26	; 0x80289c <gstrHifCxt+0xa>
    3408:	b0 93 9d 28 	sts	0x289D, r27	; 0x80289d <gstrHifCxt+0xb>
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    340c:	8c 85       	ldd	r24, Y+12	; 0x0c
    340e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3410:	ae 85       	ldd	r26, Y+14	; 0x0e
    3412:	bf 85       	ldd	r27, Y+15	; 0x0f
    3414:	ae 01       	movw	r20, r28
    3416:	48 5f       	subi	r20, 0xF8	; 248
    3418:	5f 4f       	sbci	r21, 0xFF	; 255
    341a:	04 e0       	ldi	r16, 0x04	; 4
    341c:	10 e0       	ldi	r17, 0x00	; 0
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	bc 01       	movw	r22, r24
    3424:	cd 01       	movw	r24, r26
    3426:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <nm_read_block>
    342a:	89 83       	std	Y+1, r24	; 0x01
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    342c:	8a 85       	ldd	r24, Y+10	; 0x0a
    342e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3430:	8a 87       	std	Y+10, r24	; 0x0a
    3432:	9b 87       	std	Y+11, r25	; 0x0b
				if(M2M_SUCCESS != ret)
    3434:	89 81       	ldd	r24, Y+1	; 0x01
    3436:	88 23       	and	r24, r24
    3438:	21 f0       	breq	.+8      	; 0x3442 <hif_isr+0x144>
				{
					M2M_ERR("(hif) address bus fail\n");
					nm_bsp_interrupt_ctrl(1);
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	0e 94 38 14 	call	0x2870	; 0x2870 <nm_bsp_interrupt_ctrl>
					goto ERR1;
    3440:	e9 c0       	rjmp	.+466    	; 0x3614 <hif_isr+0x316>
				}
				if(strHif.u16Length != size)
    3442:	2a 85       	ldd	r18, Y+10	; 0x0a
    3444:	3b 85       	ldd	r19, Y+11	; 0x0b
    3446:	8a 81       	ldd	r24, Y+2	; 0x02
    3448:	9b 81       	ldd	r25, Y+3	; 0x03
    344a:	28 17       	cp	r18, r24
    344c:	39 07       	cpc	r19, r25
    344e:	81 f0       	breq	.+32     	; 0x3470 <hif_isr+0x172>
				{
					if((size - strHif.u16Length) > 4)
    3450:	8a 85       	ldd	r24, Y+10	; 0x0a
    3452:	9b 85       	ldd	r25, Y+11	; 0x0b
    3454:	2a 81       	ldd	r18, Y+2	; 0x02
    3456:	3b 81       	ldd	r19, Y+3	; 0x03
    3458:	a9 01       	movw	r20, r18
    345a:	48 1b       	sub	r20, r24
    345c:	59 0b       	sbc	r21, r25
    345e:	ca 01       	movw	r24, r20
    3460:	05 97       	sbiw	r24, 0x05	; 5
    3462:	30 f0       	brcs	.+12     	; 0x3470 <hif_isr+0x172>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	0e 94 38 14 	call	0x2870	; 0x2870 <nm_bsp_interrupt_ctrl>
						ret = M2M_ERR_BUS_FAIL;
    346a:	8a ef       	ldi	r24, 0xFA	; 250
    346c:	89 83       	std	Y+1, r24	; 0x01
						goto ERR1;
    346e:	d2 c0       	rjmp	.+420    	; 0x3614 <hif_isr+0x316>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    3470:	88 85       	ldd	r24, Y+8	; 0x08
    3472:	81 30       	cpi	r24, 0x01	; 1
    3474:	e9 f4       	brne	.+58     	; 0x34b0 <hif_isr+0x1b2>
				{
					if(gstrHifCxt.pfWifiCb)
    3476:	80 91 9e 28 	lds	r24, 0x289E	; 0x80289e <gstrHifCxt+0xc>
    347a:	90 91 9f 28 	lds	r25, 0x289F	; 0x80289f <gstrHifCxt+0xd>
    347e:	89 2b       	or	r24, r25
    3480:	09 f4       	brne	.+2      	; 0x3484 <hif_isr+0x186>
    3482:	b7 c0       	rjmp	.+366    	; 0x35f2 <hif_isr+0x2f4>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3484:	e0 91 9e 28 	lds	r30, 0x289E	; 0x80289e <gstrHifCxt+0xc>
    3488:	f0 91 9f 28 	lds	r31, 0x289F	; 0x80289f <gstrHifCxt+0xd>
    348c:	8c 85       	ldd	r24, Y+12	; 0x0c
    348e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3490:	ae 85       	ldd	r26, Y+14	; 0x0e
    3492:	bf 85       	ldd	r27, Y+15	; 0x0f
    3494:	08 96       	adiw	r24, 0x08	; 8
    3496:	a1 1d       	adc	r26, r1
    3498:	b1 1d       	adc	r27, r1
    349a:	2a 85       	ldd	r18, Y+10	; 0x0a
    349c:	3b 85       	ldd	r19, Y+11	; 0x0b
    349e:	b9 01       	movw	r22, r18
    34a0:	68 50       	subi	r22, 0x08	; 8
    34a2:	71 09       	sbc	r23, r1
    34a4:	19 85       	ldd	r17, Y+9	; 0x09
    34a6:	9c 01       	movw	r18, r24
    34a8:	ad 01       	movw	r20, r26
    34aa:	81 2f       	mov	r24, r17
    34ac:	09 95       	icall
    34ae:	a1 c0       	rjmp	.+322    	; 0x35f2 <hif_isr+0x2f4>
					else
						M2M_ERR("WIFI callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    34b0:	88 85       	ldd	r24, Y+8	; 0x08
    34b2:	82 30       	cpi	r24, 0x02	; 2
    34b4:	e9 f4       	brne	.+58     	; 0x34f0 <hif_isr+0x1f2>
				{
					if(gstrHifCxt.pfIpCb)
    34b6:	80 91 a0 28 	lds	r24, 0x28A0	; 0x8028a0 <gstrHifCxt+0xe>
    34ba:	90 91 a1 28 	lds	r25, 0x28A1	; 0x8028a1 <gstrHifCxt+0xf>
    34be:	89 2b       	or	r24, r25
    34c0:	09 f4       	brne	.+2      	; 0x34c4 <hif_isr+0x1c6>
    34c2:	97 c0       	rjmp	.+302    	; 0x35f2 <hif_isr+0x2f4>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    34c4:	e0 91 a0 28 	lds	r30, 0x28A0	; 0x8028a0 <gstrHifCxt+0xe>
    34c8:	f0 91 a1 28 	lds	r31, 0x28A1	; 0x8028a1 <gstrHifCxt+0xf>
    34cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    34ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    34d0:	ae 85       	ldd	r26, Y+14	; 0x0e
    34d2:	bf 85       	ldd	r27, Y+15	; 0x0f
    34d4:	08 96       	adiw	r24, 0x08	; 8
    34d6:	a1 1d       	adc	r26, r1
    34d8:	b1 1d       	adc	r27, r1
    34da:	2a 85       	ldd	r18, Y+10	; 0x0a
    34dc:	3b 85       	ldd	r19, Y+11	; 0x0b
    34de:	b9 01       	movw	r22, r18
    34e0:	68 50       	subi	r22, 0x08	; 8
    34e2:	71 09       	sbc	r23, r1
    34e4:	19 85       	ldd	r17, Y+9	; 0x09
    34e6:	9c 01       	movw	r18, r24
    34e8:	ad 01       	movw	r20, r26
    34ea:	81 2f       	mov	r24, r17
    34ec:	09 95       	icall
    34ee:	81 c0       	rjmp	.+258    	; 0x35f2 <hif_isr+0x2f4>
					else
						M2M_ERR("Scoket callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    34f0:	88 85       	ldd	r24, Y+8	; 0x08
    34f2:	84 30       	cpi	r24, 0x04	; 4
    34f4:	e9 f4       	brne	.+58     	; 0x3530 <hif_isr+0x232>
				{
					if(gstrHifCxt.pfOtaCb)
    34f6:	80 91 a2 28 	lds	r24, 0x28A2	; 0x8028a2 <gstrHifCxt+0x10>
    34fa:	90 91 a3 28 	lds	r25, 0x28A3	; 0x8028a3 <gstrHifCxt+0x11>
    34fe:	89 2b       	or	r24, r25
    3500:	09 f4       	brne	.+2      	; 0x3504 <hif_isr+0x206>
    3502:	77 c0       	rjmp	.+238    	; 0x35f2 <hif_isr+0x2f4>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3504:	e0 91 a2 28 	lds	r30, 0x28A2	; 0x8028a2 <gstrHifCxt+0x10>
    3508:	f0 91 a3 28 	lds	r31, 0x28A3	; 0x8028a3 <gstrHifCxt+0x11>
    350c:	8c 85       	ldd	r24, Y+12	; 0x0c
    350e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3510:	ae 85       	ldd	r26, Y+14	; 0x0e
    3512:	bf 85       	ldd	r27, Y+15	; 0x0f
    3514:	08 96       	adiw	r24, 0x08	; 8
    3516:	a1 1d       	adc	r26, r1
    3518:	b1 1d       	adc	r27, r1
    351a:	2a 85       	ldd	r18, Y+10	; 0x0a
    351c:	3b 85       	ldd	r19, Y+11	; 0x0b
    351e:	b9 01       	movw	r22, r18
    3520:	68 50       	subi	r22, 0x08	; 8
    3522:	71 09       	sbc	r23, r1
    3524:	19 85       	ldd	r17, Y+9	; 0x09
    3526:	9c 01       	movw	r18, r24
    3528:	ad 01       	movw	r20, r26
    352a:	81 2f       	mov	r24, r17
    352c:	09 95       	icall
    352e:	61 c0       	rjmp	.+194    	; 0x35f2 <hif_isr+0x2f4>
					else
						M2M_ERR("Ota callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    3530:	88 85       	ldd	r24, Y+8	; 0x08
    3532:	86 30       	cpi	r24, 0x06	; 6
    3534:	e9 f4       	brne	.+58     	; 0x3570 <hif_isr+0x272>
				{
					if(gstrHifCxt.pfCryptoCb)
    3536:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <gstrHifCxt+0x16>
    353a:	90 91 a9 28 	lds	r25, 0x28A9	; 0x8028a9 <gstrHifCxt+0x17>
    353e:	89 2b       	or	r24, r25
    3540:	09 f4       	brne	.+2      	; 0x3544 <hif_isr+0x246>
    3542:	57 c0       	rjmp	.+174    	; 0x35f2 <hif_isr+0x2f4>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3544:	e0 91 a8 28 	lds	r30, 0x28A8	; 0x8028a8 <gstrHifCxt+0x16>
    3548:	f0 91 a9 28 	lds	r31, 0x28A9	; 0x8028a9 <gstrHifCxt+0x17>
    354c:	8c 85       	ldd	r24, Y+12	; 0x0c
    354e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3550:	ae 85       	ldd	r26, Y+14	; 0x0e
    3552:	bf 85       	ldd	r27, Y+15	; 0x0f
    3554:	08 96       	adiw	r24, 0x08	; 8
    3556:	a1 1d       	adc	r26, r1
    3558:	b1 1d       	adc	r27, r1
    355a:	2a 85       	ldd	r18, Y+10	; 0x0a
    355c:	3b 85       	ldd	r19, Y+11	; 0x0b
    355e:	b9 01       	movw	r22, r18
    3560:	68 50       	subi	r22, 0x08	; 8
    3562:	71 09       	sbc	r23, r1
    3564:	19 85       	ldd	r17, Y+9	; 0x09
    3566:	9c 01       	movw	r18, r24
    3568:	ad 01       	movw	r20, r26
    356a:	81 2f       	mov	r24, r17
    356c:	09 95       	icall
    356e:	41 c0       	rjmp	.+130    	; 0x35f2 <hif_isr+0x2f4>

					else
						M2M_ERR("Crypto callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    3570:	88 85       	ldd	r24, Y+8	; 0x08
    3572:	87 30       	cpi	r24, 0x07	; 7
    3574:	e1 f4       	brne	.+56     	; 0x35ae <hif_isr+0x2b0>
				{
					if(gstrHifCxt.pfSigmaCb)
    3576:	80 91 a4 28 	lds	r24, 0x28A4	; 0x8028a4 <gstrHifCxt+0x12>
    357a:	90 91 a5 28 	lds	r25, 0x28A5	; 0x8028a5 <gstrHifCxt+0x13>
    357e:	89 2b       	or	r24, r25
    3580:	c1 f1       	breq	.+112    	; 0x35f2 <hif_isr+0x2f4>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3582:	e0 91 a4 28 	lds	r30, 0x28A4	; 0x8028a4 <gstrHifCxt+0x12>
    3586:	f0 91 a5 28 	lds	r31, 0x28A5	; 0x8028a5 <gstrHifCxt+0x13>
    358a:	8c 85       	ldd	r24, Y+12	; 0x0c
    358c:	9d 85       	ldd	r25, Y+13	; 0x0d
    358e:	ae 85       	ldd	r26, Y+14	; 0x0e
    3590:	bf 85       	ldd	r27, Y+15	; 0x0f
    3592:	08 96       	adiw	r24, 0x08	; 8
    3594:	a1 1d       	adc	r26, r1
    3596:	b1 1d       	adc	r27, r1
    3598:	2a 85       	ldd	r18, Y+10	; 0x0a
    359a:	3b 85       	ldd	r19, Y+11	; 0x0b
    359c:	b9 01       	movw	r22, r18
    359e:	68 50       	subi	r22, 0x08	; 8
    35a0:	71 09       	sbc	r23, r1
    35a2:	19 85       	ldd	r17, Y+9	; 0x09
    35a4:	9c 01       	movw	r18, r24
    35a6:	ad 01       	movw	r20, r26
    35a8:	81 2f       	mov	r24, r17
    35aa:	09 95       	icall
    35ac:	22 c0       	rjmp	.+68     	; 0x35f2 <hif_isr+0x2f4>
					else
						M2M_ERR("Sigma callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    35ae:	88 85       	ldd	r24, Y+8	; 0x08
    35b0:	85 30       	cpi	r24, 0x05	; 5
    35b2:	e1 f4       	brne	.+56     	; 0x35ec <hif_isr+0x2ee>
				{
				    if(gstrHifCxt.pfSslCb)
    35b4:	80 91 aa 28 	lds	r24, 0x28AA	; 0x8028aa <gstrHifCxt+0x18>
    35b8:	90 91 ab 28 	lds	r25, 0x28AB	; 0x8028ab <gstrHifCxt+0x19>
    35bc:	89 2b       	or	r24, r25
    35be:	c9 f0       	breq	.+50     	; 0x35f2 <hif_isr+0x2f4>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    35c0:	e0 91 aa 28 	lds	r30, 0x28AA	; 0x8028aa <gstrHifCxt+0x18>
    35c4:	f0 91 ab 28 	lds	r31, 0x28AB	; 0x8028ab <gstrHifCxt+0x19>
    35c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    35ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    35cc:	ae 85       	ldd	r26, Y+14	; 0x0e
    35ce:	bf 85       	ldd	r27, Y+15	; 0x0f
    35d0:	08 96       	adiw	r24, 0x08	; 8
    35d2:	a1 1d       	adc	r26, r1
    35d4:	b1 1d       	adc	r27, r1
    35d6:	2a 85       	ldd	r18, Y+10	; 0x0a
    35d8:	3b 85       	ldd	r19, Y+11	; 0x0b
    35da:	b9 01       	movw	r22, r18
    35dc:	68 50       	subi	r22, 0x08	; 8
    35de:	71 09       	sbc	r23, r1
    35e0:	19 85       	ldd	r17, Y+9	; 0x09
    35e2:	9c 01       	movw	r18, r24
    35e4:	ad 01       	movw	r20, r26
    35e6:	81 2f       	mov	r24, r17
    35e8:	09 95       	icall
    35ea:	03 c0       	rjmp	.+6      	; 0x35f2 <hif_isr+0x2f4>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
					ret = M2M_ERR_BUS_FAIL;
    35ec:	8a ef       	ldi	r24, 0xFA	; 250
    35ee:	89 83       	std	Y+1, r24	; 0x01
					goto ERR1;
    35f0:	11 c0       	rjmp	.+34     	; 0x3614 <hif_isr+0x316>
				}
				if(gstrHifCxt.u8HifRXDone)
    35f2:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <gstrHifCxt+0x2>
    35f6:	88 23       	and	r24, r24
    35f8:	69 f0       	breq	.+26     	; 0x3614 <hif_isr+0x316>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
					ret = hif_set_rx_done();
    35fa:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <hif_set_rx_done>
    35fe:	89 83       	std	Y+1, r24	; 0x01
    3600:	09 c0       	rjmp	.+18     	; 0x3614 <hif_isr+0x316>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
				ret = M2M_ERR_RCV;
    3602:	8e ef       	ldi	r24, 0xFE	; 254
    3604:	89 83       	std	Y+1, r24	; 0x01
				goto ERR1;
    3606:	06 c0       	rjmp	.+12     	; 0x3614 <hif_isr+0x316>
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
			ret = M2M_ERR_FAIL;
    3608:	84 ef       	ldi	r24, 0xF4	; 244
    360a:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    360c:	03 c0       	rjmp	.+6      	; 0x3614 <hif_isr+0x316>
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
		goto ERR1;
    360e:	00 00       	nop
    3610:	01 c0       	rjmp	.+2      	; 0x3614 <hif_isr+0x316>

			nm_bsp_interrupt_ctrl(0);
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
			if(ret != M2M_SUCCESS)goto ERR1;
    3612:	00 00       	nop
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
		goto ERR1;
	}

ERR1:
	return ret;
    3614:	89 81       	ldd	r24, Y+1	; 0x01
}
    3616:	2f 96       	adiw	r28, 0x0f	; 15
    3618:	cd bf       	out	0x3d, r28	; 61
    361a:	de bf       	out	0x3e, r29	; 62
    361c:	df 91       	pop	r29
    361e:	cf 91       	pop	r28
    3620:	1f 91       	pop	r17
    3622:	0f 91       	pop	r16
    3624:	08 95       	ret

00003626 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    3626:	cf 93       	push	r28
    3628:	df 93       	push	r29
    362a:	1f 92       	push	r1
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
	sint8 ret = M2M_SUCCESS;	
    3630:	19 82       	std	Y+1, r1	; 0x01
	while (gstrHifCxt.u8Interrupt) {
    3632:	0b c0       	rjmp	.+22     	; 0x364a <hif_handle_isr+0x24>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    3634:	80 91 95 28 	lds	r24, 0x2895	; 0x802895 <gstrHifCxt+0x3>
    3638:	81 50       	subi	r24, 0x01	; 1
    363a:	80 93 95 28 	sts	0x2895, r24	; 0x802895 <gstrHifCxt+0x3>
		while(1)
		{
			ret = hif_isr();
    363e:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_isr>
    3642:	89 83       	std	Y+1, r24	; 0x01
			if(ret == M2M_SUCCESS) {
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	88 23       	and	r24, r24
    3648:	d1 f7       	brne	.-12     	; 0x363e <hif_handle_isr+0x18>
*/

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    364a:	80 91 95 28 	lds	r24, 0x2895	; 0x802895 <gstrHifCxt+0x3>
    364e:	88 23       	and	r24, r24
    3650:	89 f7       	brne	.-30     	; 0x3634 <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    3652:	89 81       	ldd	r24, Y+1	; 0x01
}
    3654:	0f 90       	pop	r0
    3656:	df 91       	pop	r29
    3658:	cf 91       	pop	r28
    365a:	08 95       	ret

0000365c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    365c:	ef 92       	push	r14
    365e:	ff 92       	push	r15
    3660:	0f 93       	push	r16
    3662:	1f 93       	push	r17
    3664:	cf 93       	push	r28
    3666:	df 93       	push	r29
    3668:	cd b7       	in	r28, 0x3d	; 61
    366a:	de b7       	in	r29, 0x3e	; 62
    366c:	2a 97       	sbiw	r28, 0x0a	; 10
    366e:	cd bf       	out	0x3d, r28	; 61
    3670:	de bf       	out	0x3e, r29	; 62
    3672:	6a 83       	std	Y+2, r22	; 0x02
    3674:	7b 83       	std	Y+3, r23	; 0x03
    3676:	8c 83       	std	Y+4, r24	; 0x04
    3678:	9d 83       	std	Y+5, r25	; 0x05
    367a:	4e 83       	std	Y+6, r20	; 0x06
    367c:	5f 83       	std	Y+7, r21	; 0x07
    367e:	28 87       	std	Y+8, r18	; 0x08
    3680:	39 87       	std	Y+9, r19	; 0x09
    3682:	0a 87       	std	Y+10, r16	; 0x0a
	sint8 ret = M2M_SUCCESS;
    3684:	19 82       	std	Y+1, r1	; 0x01
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    3686:	8a 81       	ldd	r24, Y+2	; 0x02
    3688:	9b 81       	ldd	r25, Y+3	; 0x03
    368a:	ac 81       	ldd	r26, Y+4	; 0x04
    368c:	bd 81       	ldd	r27, Y+5	; 0x05
    368e:	89 2b       	or	r24, r25
    3690:	8a 2b       	or	r24, r26
    3692:	8b 2b       	or	r24, r27
    3694:	41 f0       	breq	.+16     	; 0x36a6 <hif_receive+0x4a>
    3696:	8e 81       	ldd	r24, Y+6	; 0x06
    3698:	9f 81       	ldd	r25, Y+7	; 0x07
    369a:	89 2b       	or	r24, r25
    369c:	21 f0       	breq	.+8      	; 0x36a6 <hif_receive+0x4a>
    369e:	88 85       	ldd	r24, Y+8	; 0x08
    36a0:	99 85       	ldd	r25, Y+9	; 0x09
    36a2:	89 2b       	or	r24, r25
    36a4:	51 f4       	brne	.+20     	; 0x36ba <hif_receive+0x5e>
	{
		if(isDone)
    36a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    36a8:	88 23       	and	r24, r24
    36aa:	21 f0       	breq	.+8      	; 0x36b4 <hif_receive+0x58>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    36ac:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <hif_set_rx_done>
    36b0:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    36b2:	96 c0       	rjmp	.+300    	; 0x37e0 <hif_receive+0x184>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    36b4:	84 ef       	ldi	r24, 0xF4	; 244
    36b6:	89 83       	std	Y+1, r24	; 0x01
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    36b8:	93 c0       	rjmp	.+294    	; 0x37e0 <hif_receive+0x184>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    36ba:	88 85       	ldd	r24, Y+8	; 0x08
    36bc:	99 85       	ldd	r25, Y+9	; 0x09
    36be:	9c 01       	movw	r18, r24
    36c0:	40 e0       	ldi	r20, 0x00	; 0
    36c2:	50 e0       	ldi	r21, 0x00	; 0
    36c4:	80 91 9a 28 	lds	r24, 0x289A	; 0x80289a <gstrHifCxt+0x8>
    36c8:	90 91 9b 28 	lds	r25, 0x289B	; 0x80289b <gstrHifCxt+0x9>
    36cc:	a0 91 9c 28 	lds	r26, 0x289C	; 0x80289c <gstrHifCxt+0xa>
    36d0:	b0 91 9d 28 	lds	r27, 0x289D	; 0x80289d <gstrHifCxt+0xb>
    36d4:	82 17       	cp	r24, r18
    36d6:	93 07       	cpc	r25, r19
    36d8:	a4 07       	cpc	r26, r20
    36da:	b5 07       	cpc	r27, r21
    36dc:	18 f4       	brcc	.+6      	; 0x36e4 <hif_receive+0x88>
	{
		ret = M2M_ERR_FAIL;
    36de:	84 ef       	ldi	r24, 0xF4	; 244
    36e0:	89 83       	std	Y+1, r24	; 0x01
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
    36e2:	7e c0       	rjmp	.+252    	; 0x37e0 <hif_receive+0x184>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    36e4:	20 91 96 28 	lds	r18, 0x2896	; 0x802896 <gstrHifCxt+0x4>
    36e8:	30 91 97 28 	lds	r19, 0x2897	; 0x802897 <gstrHifCxt+0x5>
    36ec:	40 91 98 28 	lds	r20, 0x2898	; 0x802898 <gstrHifCxt+0x6>
    36f0:	50 91 99 28 	lds	r21, 0x2899	; 0x802899 <gstrHifCxt+0x7>
    36f4:	8a 81       	ldd	r24, Y+2	; 0x02
    36f6:	9b 81       	ldd	r25, Y+3	; 0x03
    36f8:	ac 81       	ldd	r26, Y+4	; 0x04
    36fa:	bd 81       	ldd	r27, Y+5	; 0x05
    36fc:	82 17       	cp	r24, r18
    36fe:	93 07       	cpc	r25, r19
    3700:	a4 07       	cpc	r26, r20
    3702:	b5 07       	cpc	r27, r21
    3704:	30 f1       	brcs	.+76     	; 0x3752 <hif_receive+0xf6>
    3706:	88 85       	ldd	r24, Y+8	; 0x08
    3708:	99 85       	ldd	r25, Y+9	; 0x09
    370a:	9c 01       	movw	r18, r24
    370c:	40 e0       	ldi	r20, 0x00	; 0
    370e:	50 e0       	ldi	r21, 0x00	; 0
    3710:	8a 81       	ldd	r24, Y+2	; 0x02
    3712:	9b 81       	ldd	r25, Y+3	; 0x03
    3714:	ac 81       	ldd	r26, Y+4	; 0x04
    3716:	bd 81       	ldd	r27, Y+5	; 0x05
    3718:	28 0f       	add	r18, r24
    371a:	39 1f       	adc	r19, r25
    371c:	4a 1f       	adc	r20, r26
    371e:	5b 1f       	adc	r21, r27
    3720:	e0 90 96 28 	lds	r14, 0x2896	; 0x802896 <gstrHifCxt+0x4>
    3724:	f0 90 97 28 	lds	r15, 0x2897	; 0x802897 <gstrHifCxt+0x5>
    3728:	00 91 98 28 	lds	r16, 0x2898	; 0x802898 <gstrHifCxt+0x6>
    372c:	10 91 99 28 	lds	r17, 0x2899	; 0x802899 <gstrHifCxt+0x7>
    3730:	80 91 9a 28 	lds	r24, 0x289A	; 0x80289a <gstrHifCxt+0x8>
    3734:	90 91 9b 28 	lds	r25, 0x289B	; 0x80289b <gstrHifCxt+0x9>
    3738:	a0 91 9c 28 	lds	r26, 0x289C	; 0x80289c <gstrHifCxt+0xa>
    373c:	b0 91 9d 28 	lds	r27, 0x289D	; 0x80289d <gstrHifCxt+0xb>
    3740:	8e 0d       	add	r24, r14
    3742:	9f 1d       	adc	r25, r15
    3744:	a0 1f       	adc	r26, r16
    3746:	b1 1f       	adc	r27, r17
    3748:	82 17       	cp	r24, r18
    374a:	93 07       	cpc	r25, r19
    374c:	a4 07       	cpc	r26, r20
    374e:	b5 07       	cpc	r27, r21
    3750:	18 f4       	brcc	.+6      	; 0x3758 <hif_receive+0xfc>
	{
		ret = M2M_ERR_FAIL;
    3752:	84 ef       	ldi	r24, 0xF4	; 244
    3754:	89 83       	std	Y+1, r24	; 0x01
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
    3756:	44 c0       	rjmp	.+136    	; 0x37e0 <hif_receive+0x184>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    3758:	88 85       	ldd	r24, Y+8	; 0x08
    375a:	99 85       	ldd	r25, Y+9	; 0x09
    375c:	9c 01       	movw	r18, r24
    375e:	40 e0       	ldi	r20, 0x00	; 0
    3760:	50 e0       	ldi	r21, 0x00	; 0
    3762:	6e 81       	ldd	r22, Y+6	; 0x06
    3764:	7f 81       	ldd	r23, Y+7	; 0x07
    3766:	8a 81       	ldd	r24, Y+2	; 0x02
    3768:	9b 81       	ldd	r25, Y+3	; 0x03
    376a:	ac 81       	ldd	r26, Y+4	; 0x04
    376c:	bd 81       	ldd	r27, Y+5	; 0x05
    376e:	89 01       	movw	r16, r18
    3770:	9a 01       	movw	r18, r20
    3772:	ab 01       	movw	r20, r22
    3774:	bc 01       	movw	r22, r24
    3776:	cd 01       	movw	r24, r26
    3778:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <nm_read_block>
    377c:	89 83       	std	Y+1, r24	; 0x01
	if(ret != M2M_SUCCESS)goto ERR1;
    377e:	89 81       	ldd	r24, Y+1	; 0x01
    3780:	88 23       	and	r24, r24
    3782:	69 f5       	brne	.+90     	; 0x37de <hif_receive+0x182>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    3784:	20 91 96 28 	lds	r18, 0x2896	; 0x802896 <gstrHifCxt+0x4>
    3788:	30 91 97 28 	lds	r19, 0x2897	; 0x802897 <gstrHifCxt+0x5>
    378c:	40 91 98 28 	lds	r20, 0x2898	; 0x802898 <gstrHifCxt+0x6>
    3790:	50 91 99 28 	lds	r21, 0x2899	; 0x802899 <gstrHifCxt+0x7>
    3794:	80 91 9a 28 	lds	r24, 0x289A	; 0x80289a <gstrHifCxt+0x8>
    3798:	90 91 9b 28 	lds	r25, 0x289B	; 0x80289b <gstrHifCxt+0x9>
    379c:	a0 91 9c 28 	lds	r26, 0x289C	; 0x80289c <gstrHifCxt+0xa>
    37a0:	b0 91 9d 28 	lds	r27, 0x289D	; 0x80289d <gstrHifCxt+0xb>
    37a4:	28 0f       	add	r18, r24
    37a6:	39 1f       	adc	r19, r25
    37a8:	4a 1f       	adc	r20, r26
    37aa:	5b 1f       	adc	r21, r27
    37ac:	88 85       	ldd	r24, Y+8	; 0x08
    37ae:	99 85       	ldd	r25, Y+9	; 0x09
    37b0:	7c 01       	movw	r14, r24
    37b2:	00 e0       	ldi	r16, 0x00	; 0
    37b4:	10 e0       	ldi	r17, 0x00	; 0
    37b6:	8a 81       	ldd	r24, Y+2	; 0x02
    37b8:	9b 81       	ldd	r25, Y+3	; 0x03
    37ba:	ac 81       	ldd	r26, Y+4	; 0x04
    37bc:	bd 81       	ldd	r27, Y+5	; 0x05
    37be:	8e 0d       	add	r24, r14
    37c0:	9f 1d       	adc	r25, r15
    37c2:	a0 1f       	adc	r26, r16
    37c4:	b1 1f       	adc	r27, r17
    37c6:	28 17       	cp	r18, r24
    37c8:	39 07       	cpc	r19, r25
    37ca:	4a 07       	cpc	r20, r26
    37cc:	5b 07       	cpc	r21, r27
    37ce:	19 f0       	breq	.+6      	; 0x37d6 <hif_receive+0x17a>
    37d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    37d2:	88 23       	and	r24, r24
    37d4:	29 f0       	breq	.+10     	; 0x37e0 <hif_receive+0x184>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    37d6:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <hif_set_rx_done>
    37da:	89 83       	std	Y+1, r24	; 0x01
    37dc:	01 c0       	rjmp	.+2      	; 0x37e0 <hif_receive+0x184>
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;
    37de:	00 00       	nop
		/* set RX done */
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
    37e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    37e2:	2a 96       	adiw	r28, 0x0a	; 10
    37e4:	cd bf       	out	0x3d, r28	; 61
    37e6:	de bf       	out	0x3e, r29	; 62
    37e8:	df 91       	pop	r29
    37ea:	cf 91       	pop	r28
    37ec:	1f 91       	pop	r17
    37ee:	0f 91       	pop	r16
    37f0:	ff 90       	pop	r15
    37f2:	ef 90       	pop	r14
    37f4:	08 95       	ret

000037f6 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    37f6:	cf 93       	push	r28
    37f8:	df 93       	push	r29
    37fa:	00 d0       	rcall	.+0      	; 0x37fc <hif_register_cb+0x6>
    37fc:	00 d0       	rcall	.+0      	; 0x37fe <hif_register_cb+0x8>
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62
    3802:	8a 83       	std	Y+2, r24	; 0x02
    3804:	6b 83       	std	Y+3, r22	; 0x03
    3806:	7c 83       	std	Y+4, r23	; 0x04
	sint8 ret = M2M_SUCCESS;
    3808:	19 82       	std	Y+1, r1	; 0x01
	switch(u8Grp)
    380a:	8a 81       	ldd	r24, Y+2	; 0x02
    380c:	88 2f       	mov	r24, r24
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	09 2e       	mov	r0, r25
    3812:	00 0c       	add	r0, r0
    3814:	aa 0b       	sbc	r26, r26
    3816:	bb 0b       	sbc	r27, r27
    3818:	41 e0       	ldi	r20, 0x01	; 1
    381a:	50 e0       	ldi	r21, 0x00	; 0
    381c:	26 e0       	ldi	r18, 0x06	; 6
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	84 1b       	sub	r24, r20
    3822:	95 0b       	sbc	r25, r21
    3824:	28 17       	cp	r18, r24
    3826:	39 07       	cpc	r19, r25
    3828:	b0 f1       	brcs	.+108    	; 0x3896 <hif_register_cb+0xa0>
    382a:	80 5b       	subi	r24, 0xB0	; 176
    382c:	9f 4f       	sbci	r25, 0xFF	; 255
    382e:	fc 01       	movw	r30, r24
    3830:	0c 94 c7 3c 	jmp	0x798e	; 0x798e <__tablejump2__>
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    3834:	8b 81       	ldd	r24, Y+3	; 0x03
    3836:	9c 81       	ldd	r25, Y+4	; 0x04
    3838:	80 93 a0 28 	sts	0x28A0, r24	; 0x8028a0 <gstrHifCxt+0xe>
    383c:	90 93 a1 28 	sts	0x28A1, r25	; 0x8028a1 <gstrHifCxt+0xf>
			break;
    3840:	2d c0       	rjmp	.+90     	; 0x389c <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    3842:	8b 81       	ldd	r24, Y+3	; 0x03
    3844:	9c 81       	ldd	r25, Y+4	; 0x04
    3846:	80 93 9e 28 	sts	0x289E, r24	; 0x80289e <gstrHifCxt+0xc>
    384a:	90 93 9f 28 	sts	0x289F, r25	; 0x80289f <gstrHifCxt+0xd>
			break;
    384e:	26 c0       	rjmp	.+76     	; 0x389c <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    3850:	8b 81       	ldd	r24, Y+3	; 0x03
    3852:	9c 81       	ldd	r25, Y+4	; 0x04
    3854:	80 93 a2 28 	sts	0x28A2, r24	; 0x8028a2 <gstrHifCxt+0x10>
    3858:	90 93 a3 28 	sts	0x28A3, r25	; 0x8028a3 <gstrHifCxt+0x11>
			break;
    385c:	1f c0       	rjmp	.+62     	; 0x389c <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    385e:	8b 81       	ldd	r24, Y+3	; 0x03
    3860:	9c 81       	ldd	r25, Y+4	; 0x04
    3862:	80 93 a6 28 	sts	0x28A6, r24	; 0x8028a6 <gstrHifCxt+0x14>
    3866:	90 93 a7 28 	sts	0x28A7, r25	; 0x8028a7 <gstrHifCxt+0x15>
			break;
    386a:	18 c0       	rjmp	.+48     	; 0x389c <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    386c:	8b 81       	ldd	r24, Y+3	; 0x03
    386e:	9c 81       	ldd	r25, Y+4	; 0x04
    3870:	80 93 a8 28 	sts	0x28A8, r24	; 0x8028a8 <gstrHifCxt+0x16>
    3874:	90 93 a9 28 	sts	0x28A9, r25	; 0x8028a9 <gstrHifCxt+0x17>
			break;
    3878:	11 c0       	rjmp	.+34     	; 0x389c <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    387a:	8b 81       	ldd	r24, Y+3	; 0x03
    387c:	9c 81       	ldd	r25, Y+4	; 0x04
    387e:	80 93 a4 28 	sts	0x28A4, r24	; 0x8028a4 <gstrHifCxt+0x12>
    3882:	90 93 a5 28 	sts	0x28A5, r25	; 0x8028a5 <gstrHifCxt+0x13>
			break;
    3886:	0a c0       	rjmp	.+20     	; 0x389c <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    3888:	8b 81       	ldd	r24, Y+3	; 0x03
    388a:	9c 81       	ldd	r25, Y+4	; 0x04
    388c:	80 93 aa 28 	sts	0x28AA, r24	; 0x8028aa <gstrHifCxt+0x18>
    3890:	90 93 ab 28 	sts	0x28AB, r25	; 0x8028ab <gstrHifCxt+0x19>
			break;
    3894:	03 c0       	rjmp	.+6      	; 0x389c <hif_register_cb+0xa6>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
    3896:	84 ef       	ldi	r24, 0xF4	; 244
    3898:	89 83       	std	Y+1, r24	; 0x01
			break;
    389a:	00 00       	nop
	}
	return ret;
    389c:	89 81       	ldd	r24, Y+1	; 0x01
}
    389e:	24 96       	adiw	r28, 0x04	; 4
    38a0:	cd bf       	out	0x3d, r28	; 61
    38a2:	de bf       	out	0x3e, r29	; 62
    38a4:	df 91       	pop	r29
    38a6:	cf 91       	pop	r28
    38a8:	08 95       	ret

000038aa <m2m_wifi_cb>:
		pstrStaticIPConf->u32StaticIP);
	pstrStaticIPConf->u32SubnetMask = NM_BSP_B_L_32(
		pstrStaticIPConf->u32SubnetMask);
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}
    38aa:	0f 93       	push	r16
    38ac:	cf 93       	push	r28
    38ae:	df 93       	push	r29
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
    38b4:	c5 5a       	subi	r28, 0xA5	; 165
    38b6:	d1 09       	sbc	r29, r1
    38b8:	cd bf       	out	0x3d, r28	; 61
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	fe 01       	movw	r30, r28
    38be:	e1 56       	subi	r30, 0x61	; 97
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	80 83       	st	Z, r24
    38c4:	ce 01       	movw	r24, r28
    38c6:	80 56       	subi	r24, 0x60	; 96
    38c8:	9f 4f       	sbci	r25, 0xFF	; 255
    38ca:	fc 01       	movw	r30, r24
    38cc:	60 83       	st	Z, r22
    38ce:	71 83       	std	Z+1, r23	; 0x01
    38d0:	ce 01       	movw	r24, r28
    38d2:	8e 55       	subi	r24, 0x5E	; 94
    38d4:	9f 4f       	sbci	r25, 0xFF	; 255
    38d6:	fc 01       	movw	r30, r24
    38d8:	20 83       	st	Z, r18
    38da:	31 83       	std	Z+1, r19	; 0x01
    38dc:	42 83       	std	Z+2, r20	; 0x02
    38de:	53 83       	std	Z+3, r21	; 0x03
    38e0:	ce 01       	movw	r24, r28
    38e2:	81 56       	subi	r24, 0x61	; 97
    38e4:	9f 4f       	sbci	r25, 0xFF	; 255
    38e6:	fc 01       	movw	r30, r24
    38e8:	80 81       	ld	r24, Z
    38ea:	8c 32       	cpi	r24, 0x2C	; 44
    38ec:	39 f5       	brne	.+78     	; 0x393c <m2m_wifi_cb+0x92>
    38ee:	ae 01       	movw	r20, r28
    38f0:	47 5f       	subi	r20, 0xF7	; 247
    38f2:	5f 4f       	sbci	r21, 0xFF	; 255
    38f4:	ce 01       	movw	r24, r28
    38f6:	8e 55       	subi	r24, 0x5E	; 94
    38f8:	9f 4f       	sbci	r25, 0xFF	; 255
    38fa:	fc 01       	movw	r30, r24
    38fc:	80 81       	ld	r24, Z
    38fe:	91 81       	ldd	r25, Z+1	; 0x01
    3900:	a2 81       	ldd	r26, Z+2	; 0x02
    3902:	b3 81       	ldd	r27, Z+3	; 0x03
    3904:	00 e0       	ldi	r16, 0x00	; 0
    3906:	24 e0       	ldi	r18, 0x04	; 4
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	bc 01       	movw	r22, r24
    390c:	cd 01       	movw	r24, r26
    390e:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    3912:	88 23       	and	r24, r24
    3914:	09 f0       	breq	.+2      	; 0x3918 <m2m_wifi_cb+0x6e>
    3916:	62 c2       	rjmp	.+1220   	; 0x3ddc <m2m_wifi_cb+0x532>
    3918:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <gpfAppWifiCb>
    391c:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3920:	89 2b       	or	r24, r25
    3922:	09 f4       	brne	.+2      	; 0x3926 <m2m_wifi_cb+0x7c>
    3924:	5b c2       	rjmp	.+1206   	; 0x3ddc <m2m_wifi_cb+0x532>
    3926:	20 91 22 28 	lds	r18, 0x2822	; 0x802822 <gpfAppWifiCb>
    392a:	30 91 23 28 	lds	r19, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    392e:	ce 01       	movw	r24, r28
    3930:	09 96       	adiw	r24, 0x09	; 9
    3932:	bc 01       	movw	r22, r24
    3934:	8c e2       	ldi	r24, 0x2C	; 44
    3936:	f9 01       	movw	r30, r18
    3938:	09 95       	icall
    393a:	50 c2       	rjmp	.+1184   	; 0x3ddc <m2m_wifi_cb+0x532>
    393c:	ce 01       	movw	r24, r28
    393e:	81 56       	subi	r24, 0x61	; 97
    3940:	9f 4f       	sbci	r25, 0xFF	; 255
    3942:	fc 01       	movw	r30, r24
    3944:	80 81       	ld	r24, Z
    3946:	8b 31       	cpi	r24, 0x1B	; 27
    3948:	39 f5       	brne	.+78     	; 0x3998 <m2m_wifi_cb+0xee>
    394a:	ae 01       	movw	r20, r28
    394c:	43 5f       	subi	r20, 0xF3	; 243
    394e:	5f 4f       	sbci	r21, 0xFF	; 255
    3950:	ce 01       	movw	r24, r28
    3952:	8e 55       	subi	r24, 0x5E	; 94
    3954:	9f 4f       	sbci	r25, 0xFF	; 255
    3956:	fc 01       	movw	r30, r24
    3958:	80 81       	ld	r24, Z
    395a:	91 81       	ldd	r25, Z+1	; 0x01
    395c:	a2 81       	ldd	r26, Z+2	; 0x02
    395e:	b3 81       	ldd	r27, Z+3	; 0x03
    3960:	00 e0       	ldi	r16, 0x00	; 0
    3962:	28 e0       	ldi	r18, 0x08	; 8
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	bc 01       	movw	r22, r24
    3968:	cd 01       	movw	r24, r26
    396a:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    396e:	88 23       	and	r24, r24
    3970:	09 f0       	breq	.+2      	; 0x3974 <m2m_wifi_cb+0xca>
    3972:	34 c2       	rjmp	.+1128   	; 0x3ddc <m2m_wifi_cb+0x532>
    3974:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <gpfAppWifiCb>
    3978:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    397c:	89 2b       	or	r24, r25
    397e:	09 f4       	brne	.+2      	; 0x3982 <m2m_wifi_cb+0xd8>
    3980:	2d c2       	rjmp	.+1114   	; 0x3ddc <m2m_wifi_cb+0x532>
    3982:	20 91 22 28 	lds	r18, 0x2822	; 0x802822 <gpfAppWifiCb>
    3986:	30 91 23 28 	lds	r19, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    398a:	ce 01       	movw	r24, r28
    398c:	0d 96       	adiw	r24, 0x0d	; 13
    398e:	bc 01       	movw	r22, r24
    3990:	8b e1       	ldi	r24, 0x1B	; 27
    3992:	f9 01       	movw	r30, r18
    3994:	09 95       	icall
    3996:	22 c2       	rjmp	.+1092   	; 0x3ddc <m2m_wifi_cb+0x532>
    3998:	ce 01       	movw	r24, r28
    399a:	81 56       	subi	r24, 0x61	; 97
    399c:	9f 4f       	sbci	r25, 0xFF	; 255
    399e:	fc 01       	movw	r30, r24
    39a0:	80 81       	ld	r24, Z
    39a2:	86 30       	cpi	r24, 0x06	; 6
    39a4:	39 f5       	brne	.+78     	; 0x39f4 <m2m_wifi_cb+0x14a>
    39a6:	ae 01       	movw	r20, r28
    39a8:	45 5c       	subi	r20, 0xC5	; 197
    39aa:	5f 4f       	sbci	r21, 0xFF	; 255
    39ac:	ce 01       	movw	r24, r28
    39ae:	8e 55       	subi	r24, 0x5E	; 94
    39b0:	9f 4f       	sbci	r25, 0xFF	; 255
    39b2:	fc 01       	movw	r30, r24
    39b4:	80 81       	ld	r24, Z
    39b6:	91 81       	ldd	r25, Z+1	; 0x01
    39b8:	a2 81       	ldd	r26, Z+2	; 0x02
    39ba:	b3 81       	ldd	r27, Z+3	; 0x03
    39bc:	01 e0       	ldi	r16, 0x01	; 1
    39be:	20 e3       	ldi	r18, 0x30	; 48
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	bc 01       	movw	r22, r24
    39c4:	cd 01       	movw	r24, r26
    39c6:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    39ca:	88 23       	and	r24, r24
    39cc:	09 f0       	breq	.+2      	; 0x39d0 <m2m_wifi_cb+0x126>
    39ce:	06 c2       	rjmp	.+1036   	; 0x3ddc <m2m_wifi_cb+0x532>
    39d0:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <gpfAppWifiCb>
    39d4:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    39d8:	89 2b       	or	r24, r25
    39da:	09 f4       	brne	.+2      	; 0x39de <m2m_wifi_cb+0x134>
    39dc:	ff c1       	rjmp	.+1022   	; 0x3ddc <m2m_wifi_cb+0x532>
    39de:	20 91 22 28 	lds	r18, 0x2822	; 0x802822 <gpfAppWifiCb>
    39e2:	30 91 23 28 	lds	r19, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    39e6:	ce 01       	movw	r24, r28
    39e8:	cb 96       	adiw	r24, 0x3b	; 59
    39ea:	bc 01       	movw	r22, r24
    39ec:	86 e0       	ldi	r24, 0x06	; 6
    39ee:	f9 01       	movw	r30, r18
    39f0:	09 95       	icall
    39f2:	f4 c1       	rjmp	.+1000   	; 0x3ddc <m2m_wifi_cb+0x532>
    39f4:	ce 01       	movw	r24, r28
    39f6:	81 56       	subi	r24, 0x61	; 97
    39f8:	9f 4f       	sbci	r25, 0xFF	; 255
    39fa:	fc 01       	movw	r30, r24
    39fc:	80 81       	ld	r24, Z
    39fe:	8e 30       	cpi	r24, 0x0E	; 14
    3a00:	09 f4       	brne	.+2      	; 0x3a04 <m2m_wifi_cb+0x15a>
    3a02:	ec c1       	rjmp	.+984    	; 0x3ddc <m2m_wifi_cb+0x532>
    3a04:	ce 01       	movw	r24, r28
    3a06:	81 56       	subi	r24, 0x61	; 97
    3a08:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0a:	fc 01       	movw	r30, r24
    3a0c:	80 81       	ld	r24, Z
    3a0e:	82 33       	cpi	r24, 0x32	; 50
    3a10:	39 f5       	brne	.+78     	; 0x3a60 <m2m_wifi_cb+0x1b6>
    3a12:	ae 01       	movw	r20, r28
    3a14:	4b 5e       	subi	r20, 0xEB	; 235
    3a16:	5f 4f       	sbci	r21, 0xFF	; 255
    3a18:	ce 01       	movw	r24, r28
    3a1a:	8e 55       	subi	r24, 0x5E	; 94
    3a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a1e:	fc 01       	movw	r30, r24
    3a20:	80 81       	ld	r24, Z
    3a22:	91 81       	ldd	r25, Z+1	; 0x01
    3a24:	a2 81       	ldd	r26, Z+2	; 0x02
    3a26:	b3 81       	ldd	r27, Z+3	; 0x03
    3a28:	00 e0       	ldi	r16, 0x00	; 0
    3a2a:	24 e1       	ldi	r18, 0x14	; 20
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	bc 01       	movw	r22, r24
    3a30:	cd 01       	movw	r24, r26
    3a32:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    3a36:	88 23       	and	r24, r24
    3a38:	09 f0       	breq	.+2      	; 0x3a3c <m2m_wifi_cb+0x192>
    3a3a:	d0 c1       	rjmp	.+928    	; 0x3ddc <m2m_wifi_cb+0x532>
    3a3c:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <gpfAppWifiCb>
    3a40:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3a44:	89 2b       	or	r24, r25
    3a46:	09 f4       	brne	.+2      	; 0x3a4a <m2m_wifi_cb+0x1a0>
    3a48:	c9 c1       	rjmp	.+914    	; 0x3ddc <m2m_wifi_cb+0x532>
    3a4a:	20 91 22 28 	lds	r18, 0x2822	; 0x802822 <gpfAppWifiCb>
    3a4e:	30 91 23 28 	lds	r19, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3a52:	ce 01       	movw	r24, r28
    3a54:	45 96       	adiw	r24, 0x15	; 21
    3a56:	bc 01       	movw	r22, r24
    3a58:	82 e3       	ldi	r24, 0x32	; 50
    3a5a:	f9 01       	movw	r30, r18
    3a5c:	09 95       	icall
    3a5e:	be c1       	rjmp	.+892    	; 0x3ddc <m2m_wifi_cb+0x532>
    3a60:	ce 01       	movw	r24, r28
    3a62:	81 56       	subi	r24, 0x61	; 97
    3a64:	9f 4f       	sbci	r25, 0xFF	; 255
    3a66:	fc 01       	movw	r30, r24
    3a68:	80 81       	ld	r24, Z
    3a6a:	8f 32       	cpi	r24, 0x2F	; 47
    3a6c:	81 f5       	brne	.+96     	; 0x3ace <m2m_wifi_cb+0x224>
    3a6e:	ce 01       	movw	r24, r28
    3a70:	cb 96       	adiw	r24, 0x3b	; 59
    3a72:	24 e6       	ldi	r18, 0x64	; 100
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	40 e0       	ldi	r20, 0x00	; 0
    3a78:	50 e0       	ldi	r21, 0x00	; 0
    3a7a:	60 e0       	ldi	r22, 0x00	; 0
    3a7c:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <m2m_memset>
    3a80:	ae 01       	movw	r20, r28
    3a82:	45 5c       	subi	r20, 0xC5	; 197
    3a84:	5f 4f       	sbci	r21, 0xFF	; 255
    3a86:	ce 01       	movw	r24, r28
    3a88:	8e 55       	subi	r24, 0x5E	; 94
    3a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	80 81       	ld	r24, Z
    3a90:	91 81       	ldd	r25, Z+1	; 0x01
    3a92:	a2 81       	ldd	r26, Z+2	; 0x02
    3a94:	b3 81       	ldd	r27, Z+3	; 0x03
    3a96:	00 e0       	ldi	r16, 0x00	; 0
    3a98:	24 e6       	ldi	r18, 0x64	; 100
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	bc 01       	movw	r22, r24
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    3aa4:	88 23       	and	r24, r24
    3aa6:	09 f0       	breq	.+2      	; 0x3aaa <m2m_wifi_cb+0x200>
    3aa8:	99 c1       	rjmp	.+818    	; 0x3ddc <m2m_wifi_cb+0x532>
    3aaa:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <gpfAppWifiCb>
    3aae:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3ab2:	89 2b       	or	r24, r25
    3ab4:	09 f4       	brne	.+2      	; 0x3ab8 <m2m_wifi_cb+0x20e>
    3ab6:	92 c1       	rjmp	.+804    	; 0x3ddc <m2m_wifi_cb+0x532>
    3ab8:	20 91 22 28 	lds	r18, 0x2822	; 0x802822 <gpfAppWifiCb>
    3abc:	30 91 23 28 	lds	r19, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	cb 96       	adiw	r24, 0x3b	; 59
    3ac4:	bc 01       	movw	r22, r24
    3ac6:	8f e2       	ldi	r24, 0x2F	; 47
    3ac8:	f9 01       	movw	r30, r18
    3aca:	09 95       	icall
    3acc:	87 c1       	rjmp	.+782    	; 0x3ddc <m2m_wifi_cb+0x532>
    3ace:	ce 01       	movw	r24, r28
    3ad0:	81 56       	subi	r24, 0x61	; 97
    3ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad4:	fc 01       	movw	r30, r24
    3ad6:	80 81       	ld	r24, Z
    3ad8:	84 33       	cpi	r24, 0x34	; 52
    3ada:	31 f5       	brne	.+76     	; 0x3b28 <m2m_wifi_cb+0x27e>
    3adc:	ae 01       	movw	r20, r28
    3ade:	47 5d       	subi	r20, 0xD7	; 215
    3ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ae2:	ce 01       	movw	r24, r28
    3ae4:	8e 55       	subi	r24, 0x5E	; 94
    3ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ae8:	fc 01       	movw	r30, r24
    3aea:	80 81       	ld	r24, Z
    3aec:	91 81       	ldd	r25, Z+1	; 0x01
    3aee:	a2 81       	ldd	r26, Z+2	; 0x02
    3af0:	b3 81       	ldd	r27, Z+3	; 0x03
    3af2:	00 e0       	ldi	r16, 0x00	; 0
    3af4:	24 e0       	ldi	r18, 0x04	; 4
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	bc 01       	movw	r22, r24
    3afa:	cd 01       	movw	r24, r26
    3afc:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    3b00:	88 23       	and	r24, r24
    3b02:	09 f0       	breq	.+2      	; 0x3b06 <m2m_wifi_cb+0x25c>
    3b04:	6b c1       	rjmp	.+726    	; 0x3ddc <m2m_wifi_cb+0x532>
    3b06:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <gpfAppWifiCb>
    3b0a:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3b0e:	89 2b       	or	r24, r25
    3b10:	09 f4       	brne	.+2      	; 0x3b14 <m2m_wifi_cb+0x26a>
    3b12:	64 c1       	rjmp	.+712    	; 0x3ddc <m2m_wifi_cb+0x532>
    3b14:	20 91 22 28 	lds	r18, 0x2822	; 0x802822 <gpfAppWifiCb>
    3b18:	30 91 23 28 	lds	r19, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3b1c:	60 e0       	ldi	r22, 0x00	; 0
    3b1e:	70 e0       	ldi	r23, 0x00	; 0
    3b20:	84 e3       	ldi	r24, 0x34	; 52
    3b22:	f9 01       	movw	r30, r18
    3b24:	09 95       	icall
    3b26:	5a c1       	rjmp	.+692    	; 0x3ddc <m2m_wifi_cb+0x532>
    3b28:	ce 01       	movw	r24, r28
    3b2a:	81 56       	subi	r24, 0x61	; 97
    3b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b2e:	fc 01       	movw	r30, r24
    3b30:	80 81       	ld	r24, Z
    3b32:	81 31       	cpi	r24, 0x11	; 17
    3b34:	61 f5       	brne	.+88     	; 0x3b8e <m2m_wifi_cb+0x2e4>
    3b36:	10 92 21 28 	sts	0x2821, r1	; 0x802821 <gu8scanInProgress>
    3b3a:	ae 01       	movw	r20, r28
    3b3c:	43 5d       	subi	r20, 0xD3	; 211
    3b3e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b40:	ce 01       	movw	r24, r28
    3b42:	8e 55       	subi	r24, 0x5E	; 94
    3b44:	9f 4f       	sbci	r25, 0xFF	; 255
    3b46:	fc 01       	movw	r30, r24
    3b48:	80 81       	ld	r24, Z
    3b4a:	91 81       	ldd	r25, Z+1	; 0x01
    3b4c:	a2 81       	ldd	r26, Z+2	; 0x02
    3b4e:	b3 81       	ldd	r27, Z+3	; 0x03
    3b50:	00 e0       	ldi	r16, 0x00	; 0
    3b52:	24 e0       	ldi	r18, 0x04	; 4
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	bc 01       	movw	r22, r24
    3b58:	cd 01       	movw	r24, r26
    3b5a:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    3b5e:	88 23       	and	r24, r24
    3b60:	09 f0       	breq	.+2      	; 0x3b64 <m2m_wifi_cb+0x2ba>
    3b62:	3c c1       	rjmp	.+632    	; 0x3ddc <m2m_wifi_cb+0x532>
    3b64:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b66:	80 93 20 28 	sts	0x2820, r24	; 0x802820 <gu8ChNum>
    3b6a:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <gpfAppWifiCb>
    3b6e:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3b72:	89 2b       	or	r24, r25
    3b74:	09 f4       	brne	.+2      	; 0x3b78 <m2m_wifi_cb+0x2ce>
    3b76:	32 c1       	rjmp	.+612    	; 0x3ddc <m2m_wifi_cb+0x532>
    3b78:	20 91 22 28 	lds	r18, 0x2822	; 0x802822 <gpfAppWifiCb>
    3b7c:	30 91 23 28 	lds	r19, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3b80:	ce 01       	movw	r24, r28
    3b82:	8d 96       	adiw	r24, 0x2d	; 45
    3b84:	bc 01       	movw	r22, r24
    3b86:	81 e1       	ldi	r24, 0x11	; 17
    3b88:	f9 01       	movw	r30, r18
    3b8a:	09 95       	icall
    3b8c:	27 c1       	rjmp	.+590    	; 0x3ddc <m2m_wifi_cb+0x532>
    3b8e:	ce 01       	movw	r24, r28
    3b90:	81 56       	subi	r24, 0x61	; 97
    3b92:	9f 4f       	sbci	r25, 0xFF	; 255
    3b94:	fc 01       	movw	r30, r24
    3b96:	80 81       	ld	r24, Z
    3b98:	83 31       	cpi	r24, 0x13	; 19
    3b9a:	39 f5       	brne	.+78     	; 0x3bea <m2m_wifi_cb+0x340>
    3b9c:	ae 01       	movw	r20, r28
    3b9e:	45 5c       	subi	r20, 0xC5	; 197
    3ba0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ba2:	ce 01       	movw	r24, r28
    3ba4:	8e 55       	subi	r24, 0x5E	; 94
    3ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba8:	fc 01       	movw	r30, r24
    3baa:	80 81       	ld	r24, Z
    3bac:	91 81       	ldd	r25, Z+1	; 0x01
    3bae:	a2 81       	ldd	r26, Z+2	; 0x02
    3bb0:	b3 81       	ldd	r27, Z+3	; 0x03
    3bb2:	00 e0       	ldi	r16, 0x00	; 0
    3bb4:	2c e2       	ldi	r18, 0x2C	; 44
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	bc 01       	movw	r22, r24
    3bba:	cd 01       	movw	r24, r26
    3bbc:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    3bc0:	88 23       	and	r24, r24
    3bc2:	09 f0       	breq	.+2      	; 0x3bc6 <m2m_wifi_cb+0x31c>
    3bc4:	0b c1       	rjmp	.+534    	; 0x3ddc <m2m_wifi_cb+0x532>
    3bc6:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <gpfAppWifiCb>
    3bca:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3bce:	89 2b       	or	r24, r25
    3bd0:	09 f4       	brne	.+2      	; 0x3bd4 <m2m_wifi_cb+0x32a>
    3bd2:	04 c1       	rjmp	.+520    	; 0x3ddc <m2m_wifi_cb+0x532>
    3bd4:	20 91 22 28 	lds	r18, 0x2822	; 0x802822 <gpfAppWifiCb>
    3bd8:	30 91 23 28 	lds	r19, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3bdc:	ce 01       	movw	r24, r28
    3bde:	cb 96       	adiw	r24, 0x3b	; 59
    3be0:	bc 01       	movw	r22, r24
    3be2:	83 e1       	ldi	r24, 0x13	; 19
    3be4:	f9 01       	movw	r30, r18
    3be6:	09 95       	icall
    3be8:	f9 c0       	rjmp	.+498    	; 0x3ddc <m2m_wifi_cb+0x532>
    3bea:	ce 01       	movw	r24, r28
    3bec:	81 56       	subi	r24, 0x61	; 97
    3bee:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf0:	fc 01       	movw	r30, r24
    3bf2:	80 81       	ld	r24, Z
    3bf4:	84 30       	cpi	r24, 0x04	; 4
    3bf6:	39 f5       	brne	.+78     	; 0x3c46 <m2m_wifi_cb+0x39c>
    3bf8:	ce 01       	movw	r24, r28
    3bfa:	8e 55       	subi	r24, 0x5E	; 94
    3bfc:	9f 4f       	sbci	r25, 0xFF	; 255
    3bfe:	fc 01       	movw	r30, r24
    3c00:	80 81       	ld	r24, Z
    3c02:	91 81       	ldd	r25, Z+1	; 0x01
    3c04:	a2 81       	ldd	r26, Z+2	; 0x02
    3c06:	b3 81       	ldd	r27, Z+3	; 0x03
    3c08:	00 e0       	ldi	r16, 0x00	; 0
    3c0a:	24 e0       	ldi	r18, 0x04	; 4
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	ae 01       	movw	r20, r28
    3c10:	4f 5f       	subi	r20, 0xFF	; 255
    3c12:	5f 4f       	sbci	r21, 0xFF	; 255
    3c14:	bc 01       	movw	r22, r24
    3c16:	cd 01       	movw	r24, r26
    3c18:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    3c1c:	88 23       	and	r24, r24
    3c1e:	09 f0       	breq	.+2      	; 0x3c22 <m2m_wifi_cb+0x378>
    3c20:	dd c0       	rjmp	.+442    	; 0x3ddc <m2m_wifi_cb+0x532>
    3c22:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <gpfAppWifiCb>
    3c26:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3c2a:	89 2b       	or	r24, r25
    3c2c:	09 f4       	brne	.+2      	; 0x3c30 <m2m_wifi_cb+0x386>
    3c2e:	d6 c0       	rjmp	.+428    	; 0x3ddc <m2m_wifi_cb+0x532>
    3c30:	20 91 22 28 	lds	r18, 0x2822	; 0x802822 <gpfAppWifiCb>
    3c34:	30 91 23 28 	lds	r19, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3c38:	ce 01       	movw	r24, r28
    3c3a:	01 96       	adiw	r24, 0x01	; 1
    3c3c:	bc 01       	movw	r22, r24
    3c3e:	84 e0       	ldi	r24, 0x04	; 4
    3c40:	f9 01       	movw	r30, r18
    3c42:	09 95       	icall
    3c44:	cb c0       	rjmp	.+406    	; 0x3ddc <m2m_wifi_cb+0x532>
    3c46:	ce 01       	movw	r24, r28
    3c48:	81 56       	subi	r24, 0x61	; 97
    3c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c4c:	fc 01       	movw	r30, r24
    3c4e:	80 81       	ld	r24, Z
    3c50:	85 36       	cpi	r24, 0x65	; 101
    3c52:	39 f5       	brne	.+78     	; 0x3ca2 <m2m_wifi_cb+0x3f8>
    3c54:	ce 01       	movw	r24, r28
    3c56:	8e 55       	subi	r24, 0x5E	; 94
    3c58:	9f 4f       	sbci	r25, 0xFF	; 255
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	80 81       	ld	r24, Z
    3c5e:	91 81       	ldd	r25, Z+1	; 0x01
    3c60:	a2 81       	ldd	r26, Z+2	; 0x02
    3c62:	b3 81       	ldd	r27, Z+3	; 0x03
    3c64:	00 e0       	ldi	r16, 0x00	; 0
    3c66:	24 e0       	ldi	r18, 0x04	; 4
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	ae 01       	movw	r20, r28
    3c6c:	4f 5f       	subi	r20, 0xFF	; 255
    3c6e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c70:	bc 01       	movw	r22, r24
    3c72:	cd 01       	movw	r24, r26
    3c74:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    3c78:	88 23       	and	r24, r24
    3c7a:	09 f0       	breq	.+2      	; 0x3c7e <m2m_wifi_cb+0x3d4>
    3c7c:	af c0       	rjmp	.+350    	; 0x3ddc <m2m_wifi_cb+0x532>
    3c7e:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <gpfAppWifiCb>
    3c82:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3c86:	89 2b       	or	r24, r25
    3c88:	09 f4       	brne	.+2      	; 0x3c8c <m2m_wifi_cb+0x3e2>
    3c8a:	a8 c0       	rjmp	.+336    	; 0x3ddc <m2m_wifi_cb+0x532>
    3c8c:	20 91 22 28 	lds	r18, 0x2822	; 0x802822 <gpfAppWifiCb>
    3c90:	30 91 23 28 	lds	r19, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3c94:	ce 01       	movw	r24, r28
    3c96:	01 96       	adiw	r24, 0x01	; 1
    3c98:	bc 01       	movw	r22, r24
    3c9a:	85 e6       	ldi	r24, 0x65	; 101
    3c9c:	f9 01       	movw	r30, r18
    3c9e:	09 95       	icall
    3ca0:	9d c0       	rjmp	.+314    	; 0x3ddc <m2m_wifi_cb+0x532>
    3ca2:	ce 01       	movw	r24, r28
    3ca4:	81 56       	subi	r24, 0x61	; 97
    3ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca8:	fc 01       	movw	r30, r24
    3caa:	80 81       	ld	r24, Z
    3cac:	89 30       	cpi	r24, 0x09	; 9
    3cae:	39 f5       	brne	.+78     	; 0x3cfe <m2m_wifi_cb+0x454>
    3cb0:	ae 01       	movw	r20, r28
    3cb2:	45 5c       	subi	r20, 0xC5	; 197
    3cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    3cb6:	ce 01       	movw	r24, r28
    3cb8:	8e 55       	subi	r24, 0x5E	; 94
    3cba:	9f 4f       	sbci	r25, 0xFF	; 255
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	80 81       	ld	r24, Z
    3cc0:	91 81       	ldd	r25, Z+1	; 0x01
    3cc2:	a2 81       	ldd	r26, Z+2	; 0x02
    3cc4:	b3 81       	ldd	r27, Z+3	; 0x03
    3cc6:	01 e0       	ldi	r16, 0x01	; 1
    3cc8:	24 e6       	ldi	r18, 0x64	; 100
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	bc 01       	movw	r22, r24
    3cce:	cd 01       	movw	r24, r26
    3cd0:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    3cd4:	88 23       	and	r24, r24
    3cd6:	09 f0       	breq	.+2      	; 0x3cda <m2m_wifi_cb+0x430>
    3cd8:	81 c0       	rjmp	.+258    	; 0x3ddc <m2m_wifi_cb+0x532>
    3cda:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <gpfAppWifiCb>
    3cde:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3ce2:	89 2b       	or	r24, r25
    3ce4:	09 f4       	brne	.+2      	; 0x3ce8 <m2m_wifi_cb+0x43e>
    3ce6:	7a c0       	rjmp	.+244    	; 0x3ddc <m2m_wifi_cb+0x532>
    3ce8:	20 91 22 28 	lds	r18, 0x2822	; 0x802822 <gpfAppWifiCb>
    3cec:	30 91 23 28 	lds	r19, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3cf0:	ce 01       	movw	r24, r28
    3cf2:	cb 96       	adiw	r24, 0x3b	; 59
    3cf4:	bc 01       	movw	r22, r24
    3cf6:	89 e0       	ldi	r24, 0x09	; 9
    3cf8:	f9 01       	movw	r30, r18
    3cfa:	09 95       	icall
    3cfc:	6f c0       	rjmp	.+222    	; 0x3ddc <m2m_wifi_cb+0x532>
    3cfe:	ce 01       	movw	r24, r28
    3d00:	81 56       	subi	r24, 0x61	; 97
    3d02:	9f 4f       	sbci	r25, 0xFF	; 255
    3d04:	fc 01       	movw	r30, r24
    3d06:	80 81       	ld	r24, Z
    3d08:	8a 32       	cpi	r24, 0x2A	; 42
    3d0a:	39 f5       	brne	.+78     	; 0x3d5a <m2m_wifi_cb+0x4b0>
    3d0c:	ae 01       	movw	r20, r28
    3d0e:	4f 5c       	subi	r20, 0xCF	; 207
    3d10:	5f 4f       	sbci	r21, 0xFF	; 255
    3d12:	ce 01       	movw	r24, r28
    3d14:	8e 55       	subi	r24, 0x5E	; 94
    3d16:	9f 4f       	sbci	r25, 0xFF	; 255
    3d18:	fc 01       	movw	r30, r24
    3d1a:	80 81       	ld	r24, Z
    3d1c:	91 81       	ldd	r25, Z+1	; 0x01
    3d1e:	a2 81       	ldd	r26, Z+2	; 0x02
    3d20:	b3 81       	ldd	r27, Z+3	; 0x03
    3d22:	01 e0       	ldi	r16, 0x01	; 1
    3d24:	24 e0       	ldi	r18, 0x04	; 4
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	bc 01       	movw	r22, r24
    3d2a:	cd 01       	movw	r24, r26
    3d2c:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    3d30:	88 23       	and	r24, r24
    3d32:	09 f0       	breq	.+2      	; 0x3d36 <m2m_wifi_cb+0x48c>
    3d34:	53 c0       	rjmp	.+166    	; 0x3ddc <m2m_wifi_cb+0x532>
    3d36:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <gpfAppWifiCb>
    3d3a:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3d3e:	89 2b       	or	r24, r25
    3d40:	09 f4       	brne	.+2      	; 0x3d44 <m2m_wifi_cb+0x49a>
    3d42:	4c c0       	rjmp	.+152    	; 0x3ddc <m2m_wifi_cb+0x532>
    3d44:	20 91 22 28 	lds	r18, 0x2822	; 0x802822 <gpfAppWifiCb>
    3d48:	30 91 23 28 	lds	r19, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3d4c:	ce 01       	movw	r24, r28
    3d4e:	c1 96       	adiw	r24, 0x31	; 49
    3d50:	bc 01       	movw	r22, r24
    3d52:	8a e2       	ldi	r24, 0x2A	; 42
    3d54:	f9 01       	movw	r30, r18
    3d56:	09 95       	icall
    3d58:	41 c0       	rjmp	.+130    	; 0x3ddc <m2m_wifi_cb+0x532>
    3d5a:	ce 01       	movw	r24, r28
    3d5c:	81 56       	subi	r24, 0x61	; 97
    3d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d60:	fc 01       	movw	r30, r24
    3d62:	80 81       	ld	r24, Z
    3d64:	80 32       	cpi	r24, 0x20	; 32
    3d66:	d1 f5       	brne	.+116    	; 0x3ddc <m2m_wifi_cb+0x532>
    3d68:	ae 01       	movw	r20, r28
    3d6a:	4b 5c       	subi	r20, 0xCB	; 203
    3d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d6e:	ce 01       	movw	r24, r28
    3d70:	8e 55       	subi	r24, 0x5E	; 94
    3d72:	9f 4f       	sbci	r25, 0xFF	; 255
    3d74:	fc 01       	movw	r30, r24
    3d76:	80 81       	ld	r24, Z
    3d78:	91 81       	ldd	r25, Z+1	; 0x01
    3d7a:	a2 81       	ldd	r26, Z+2	; 0x02
    3d7c:	b3 81       	ldd	r27, Z+3	; 0x03
    3d7e:	00 e0       	ldi	r16, 0x00	; 0
    3d80:	26 e0       	ldi	r18, 0x06	; 6
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	bc 01       	movw	r22, r24
    3d86:	cd 01       	movw	r24, r26
    3d88:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    3d8c:	88 23       	and	r24, r24
    3d8e:	31 f5       	brne	.+76     	; 0x3ddc <m2m_wifi_cb+0x532>
    3d90:	2f a9       	ldd	r18, Y+55	; 0x37
    3d92:	38 ad       	ldd	r19, Y+56	; 0x38
    3d94:	4d a9       	ldd	r20, Y+53	; 0x35
    3d96:	5e a9       	ldd	r21, Y+54	; 0x36
    3d98:	ce 01       	movw	r24, r28
    3d9a:	8e 55       	subi	r24, 0x5E	; 94
    3d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d9e:	fc 01       	movw	r30, r24
    3da0:	80 81       	ld	r24, Z
    3da2:	91 81       	ldd	r25, Z+1	; 0x01
    3da4:	a2 81       	ldd	r26, Z+2	; 0x02
    3da6:	b3 81       	ldd	r27, Z+3	; 0x03
    3da8:	06 96       	adiw	r24, 0x06	; 6
    3daa:	a1 1d       	adc	r26, r1
    3dac:	b1 1d       	adc	r27, r1
    3dae:	01 e0       	ldi	r16, 0x01	; 1
    3db0:	bc 01       	movw	r22, r24
    3db2:	cd 01       	movw	r24, r26
    3db4:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    3db8:	88 23       	and	r24, r24
    3dba:	81 f4       	brne	.+32     	; 0x3ddc <m2m_wifi_cb+0x532>
    3dbc:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <gpfAppWifiCb>
    3dc0:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3dc4:	89 2b       	or	r24, r25
    3dc6:	51 f0       	breq	.+20     	; 0x3ddc <m2m_wifi_cb+0x532>
    3dc8:	20 91 22 28 	lds	r18, 0x2822	; 0x802822 <gpfAppWifiCb>
    3dcc:	30 91 23 28 	lds	r19, 0x2823	; 0x802823 <gpfAppWifiCb+0x1>
    3dd0:	ce 01       	movw	r24, r28
    3dd2:	c5 96       	adiw	r24, 0x35	; 53
    3dd4:	bc 01       	movw	r22, r24
    3dd6:	80 e2       	ldi	r24, 0x20	; 32
    3dd8:	f9 01       	movw	r30, r18
    3dda:	09 95       	icall
    3ddc:	00 00       	nop
    3dde:	cb 55       	subi	r28, 0x5B	; 91
    3de0:	df 4f       	sbci	r29, 0xFF	; 255
    3de2:	cd bf       	out	0x3d, r28	; 61
    3de4:	de bf       	out	0x3e, r29	; 62
    3de6:	df 91       	pop	r29
    3de8:	cf 91       	pop	r28
    3dea:	0f 91       	pop	r16
    3dec:	08 95       	ret

00003dee <m2m_wifi_init>:
    3dee:	cf 93       	push	r28
    3df0:	df 93       	push	r29
    3df2:	cd b7       	in	r28, 0x3d	; 61
    3df4:	de b7       	in	r29, 0x3e	; 62
    3df6:	aa 97       	sbiw	r28, 0x2a	; 42
    3df8:	cd bf       	out	0x3d, r28	; 61
    3dfa:	de bf       	out	0x3e, r29	; 62
    3dfc:	89 a7       	std	Y+41, r24	; 0x29
    3dfe:	9a a7       	std	Y+42, r25	; 0x2a
    3e00:	19 82       	std	Y+1, r1	; 0x01
    3e02:	81 e0       	ldi	r24, 0x01	; 1
    3e04:	88 a7       	std	Y+40, r24	; 0x28
    3e06:	89 a5       	ldd	r24, Y+41	; 0x29
    3e08:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e0a:	89 2b       	or	r24, r25
    3e0c:	19 f4       	brne	.+6      	; 0x3e14 <m2m_wifi_init+0x26>
    3e0e:	84 ef       	ldi	r24, 0xF4	; 244
    3e10:	89 83       	std	Y+1, r24	; 0x01
    3e12:	2d c0       	rjmp	.+90     	; 0x3e6e <m2m_wifi_init+0x80>
    3e14:	89 a5       	ldd	r24, Y+41	; 0x29
    3e16:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e18:	fc 01       	movw	r30, r24
    3e1a:	80 81       	ld	r24, Z
    3e1c:	91 81       	ldd	r25, Z+1	; 0x01
    3e1e:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <gpfAppWifiCb>
    3e22:	90 93 23 28 	sts	0x2823, r25	; 0x802823 <gpfAppWifiCb+0x1>
    3e26:	10 92 21 28 	sts	0x2821, r1	; 0x802821 <gu8scanInProgress>
    3e2a:	ce 01       	movw	r24, r28
    3e2c:	88 96       	adiw	r24, 0x28	; 40
    3e2e:	0e 94 5b 29 	call	0x52b6	; 0x52b6 <nm_drv_init>
    3e32:	89 83       	std	Y+1, r24	; 0x01
    3e34:	89 81       	ldd	r24, Y+1	; 0x01
    3e36:	88 23       	and	r24, r24
    3e38:	c9 f4       	brne	.+50     	; 0x3e6c <m2m_wifi_init+0x7e>
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <hif_init>
    3e42:	89 83       	std	Y+1, r24	; 0x01
    3e44:	89 81       	ldd	r24, Y+1	; 0x01
    3e46:	88 23       	and	r24, r24
    3e48:	59 f4       	brne	.+22     	; 0x3e60 <m2m_wifi_init+0x72>
    3e4a:	65 e5       	ldi	r22, 0x55	; 85
    3e4c:	7c e1       	ldi	r23, 0x1C	; 28
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <hif_register_cb>
    3e54:	ce 01       	movw	r24, r28
    3e56:	02 96       	adiw	r24, 0x02	; 2
    3e58:	0e 94 5f 28 	call	0x50be	; 0x50be <nm_get_firmware_full_info>
    3e5c:	89 83       	std	Y+1, r24	; 0x01
    3e5e:	07 c0       	rjmp	.+14     	; 0x3e6e <m2m_wifi_init+0x80>
    3e60:	00 00       	nop
    3e62:	80 e0       	ldi	r24, 0x00	; 0
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	0e 94 ae 29 	call	0x535c	; 0x535c <nm_drv_deinit>
    3e6a:	01 c0       	rjmp	.+2      	; 0x3e6e <m2m_wifi_init+0x80>
    3e6c:	00 00       	nop
    3e6e:	89 81       	ldd	r24, Y+1	; 0x01
    3e70:	aa 96       	adiw	r28, 0x2a	; 42
    3e72:	cd bf       	out	0x3d, r28	; 61
    3e74:	de bf       	out	0x3e, r29	; 62
    3e76:	df 91       	pop	r29
    3e78:	cf 91       	pop	r28
    3e7a:	08 95       	ret

00003e7c <m2m_wifi_handle_events>:
    3e7c:	cf 93       	push	r28
    3e7e:	df 93       	push	r29
    3e80:	00 d0       	rcall	.+0      	; 0x3e82 <m2m_wifi_handle_events+0x6>
    3e82:	cd b7       	in	r28, 0x3d	; 61
    3e84:	de b7       	in	r29, 0x3e	; 62
    3e86:	89 83       	std	Y+1, r24	; 0x01
    3e88:	9a 83       	std	Y+2, r25	; 0x02
    3e8a:	0e 94 13 1b 	call	0x3626	; 0x3626 <hif_handle_isr>
    3e8e:	0f 90       	pop	r0
    3e90:	0f 90       	pop	r0
    3e92:	df 91       	pop	r29
    3e94:	cf 91       	pop	r28
    3e96:	08 95       	ret

00003e98 <m2m_wifi_connect>:
    3e98:	ef 92       	push	r14
    3e9a:	0f 93       	push	r16
    3e9c:	1f 93       	push	r17
    3e9e:	cf 93       	push	r28
    3ea0:	df 93       	push	r29
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
    3ea6:	28 97       	sbiw	r28, 0x08	; 8
    3ea8:	cd bf       	out	0x3d, r28	; 61
    3eaa:	de bf       	out	0x3e, r29	; 62
    3eac:	89 83       	std	Y+1, r24	; 0x01
    3eae:	9a 83       	std	Y+2, r25	; 0x02
    3eb0:	6b 83       	std	Y+3, r22	; 0x03
    3eb2:	4c 83       	std	Y+4, r20	; 0x04
    3eb4:	2d 83       	std	Y+5, r18	; 0x05
    3eb6:	3e 83       	std	Y+6, r19	; 0x06
    3eb8:	0f 83       	std	Y+7, r16	; 0x07
    3eba:	18 87       	std	Y+8, r17	; 0x08
    3ebc:	4f 81       	ldd	r20, Y+7	; 0x07
    3ebe:	58 85       	ldd	r21, Y+8	; 0x08
    3ec0:	2d 81       	ldd	r18, Y+5	; 0x05
    3ec2:	3e 81       	ldd	r19, Y+6	; 0x06
    3ec4:	89 81       	ldd	r24, Y+1	; 0x01
    3ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec8:	e1 2c       	mov	r14, r1
    3eca:	8a 01       	movw	r16, r20
    3ecc:	4c 81       	ldd	r20, Y+4	; 0x04
    3ece:	6b 81       	ldd	r22, Y+3	; 0x03
    3ed0:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <m2m_wifi_connect_sc>
    3ed4:	28 96       	adiw	r28, 0x08	; 8
    3ed6:	cd bf       	out	0x3d, r28	; 61
    3ed8:	de bf       	out	0x3e, r29	; 62
    3eda:	df 91       	pop	r29
    3edc:	cf 91       	pop	r28
    3ede:	1f 91       	pop	r17
    3ee0:	0f 91       	pop	r16
    3ee2:	ef 90       	pop	r14
    3ee4:	08 95       	ret

00003ee6 <m2m_wifi_connect_sc>:
    3ee6:	cf 92       	push	r12
    3ee8:	df 92       	push	r13
    3eea:	ef 92       	push	r14
    3eec:	ff 92       	push	r15
    3eee:	0f 93       	push	r16
    3ef0:	1f 93       	push	r17
    3ef2:	cf 93       	push	r28
    3ef4:	df 93       	push	r29
    3ef6:	cd b7       	in	r28, 0x3d	; 61
    3ef8:	de b7       	in	r29, 0x3e	; 62
    3efa:	c3 58       	subi	r28, 0x83	; 131
    3efc:	d1 09       	sbc	r29, r1
    3efe:	cd bf       	out	0x3d, r28	; 61
    3f00:	de bf       	out	0x3e, r29	; 62
    3f02:	fe 01       	movw	r30, r28
    3f04:	e7 58       	subi	r30, 0x87	; 135
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	80 83       	st	Z, r24
    3f0a:	91 83       	std	Z+1, r25	; 0x01
    3f0c:	ce 01       	movw	r24, r28
    3f0e:	85 58       	subi	r24, 0x85	; 133
    3f10:	9f 4f       	sbci	r25, 0xFF	; 255
    3f12:	dc 01       	movw	r26, r24
    3f14:	6c 93       	st	X, r22
    3f16:	ce 01       	movw	r24, r28
    3f18:	84 58       	subi	r24, 0x84	; 132
    3f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f1c:	fc 01       	movw	r30, r24
    3f1e:	40 83       	st	Z, r20
    3f20:	ce 01       	movw	r24, r28
    3f22:	83 58       	subi	r24, 0x83	; 131
    3f24:	9f 4f       	sbci	r25, 0xFF	; 255
    3f26:	dc 01       	movw	r26, r24
    3f28:	2d 93       	st	X+, r18
    3f2a:	3c 93       	st	X, r19
    3f2c:	ce 01       	movw	r24, r28
    3f2e:	81 58       	subi	r24, 0x81	; 129
    3f30:	9f 4f       	sbci	r25, 0xFF	; 255
    3f32:	fc 01       	movw	r30, r24
    3f34:	00 83       	st	Z, r16
    3f36:	11 83       	std	Z+1, r17	; 0x01
    3f38:	ce 01       	movw	r24, r28
    3f3a:	8f 57       	subi	r24, 0x7F	; 127
    3f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f3e:	dc 01       	movw	r26, r24
    3f40:	ec 92       	st	X, r14
    3f42:	19 82       	std	Y+1, r1	; 0x01
    3f44:	ce 01       	movw	r24, r28
    3f46:	84 58       	subi	r24, 0x84	; 132
    3f48:	9f 4f       	sbci	r25, 0xFF	; 255
    3f4a:	fc 01       	movw	r30, r24
    3f4c:	80 81       	ld	r24, Z
    3f4e:	81 30       	cpi	r24, 0x01	; 1
    3f50:	09 f4       	brne	.+2      	; 0x3f54 <m2m_wifi_connect_sc+0x6e>
    3f52:	75 c0       	rjmp	.+234    	; 0x403e <__RODATA_PM_OFFSET__+0x3e>
    3f54:	ce 01       	movw	r24, r28
    3f56:	83 58       	subi	r24, 0x83	; 131
    3f58:	9f 4f       	sbci	r25, 0xFF	; 255
    3f5a:	dc 01       	movw	r26, r24
    3f5c:	8d 91       	ld	r24, X+
    3f5e:	9c 91       	ld	r25, X
    3f60:	89 2b       	or	r24, r25
    3f62:	19 f4       	brne	.+6      	; 0x3f6a <m2m_wifi_connect_sc+0x84>
    3f64:	84 ef       	ldi	r24, 0xF4	; 244
    3f66:	89 83       	std	Y+1, r24	; 0x01
    3f68:	bd c1       	rjmp	.+890    	; 0x42e4 <__RODATA_PM_OFFSET__+0x2e4>
    3f6a:	ce 01       	movw	r24, r28
    3f6c:	84 58       	subi	r24, 0x84	; 132
    3f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f70:	fc 01       	movw	r30, r24
    3f72:	80 81       	ld	r24, Z
    3f74:	82 30       	cpi	r24, 0x02	; 2
    3f76:	09 f0       	breq	.+2      	; 0x3f7a <m2m_wifi_connect_sc+0x94>
    3f78:	62 c0       	rjmp	.+196    	; 0x403e <__RODATA_PM_OFFSET__+0x3e>
    3f7a:	ce 01       	movw	r24, r28
    3f7c:	83 58       	subi	r24, 0x83	; 131
    3f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f80:	dc 01       	movw	r26, r24
    3f82:	8d 91       	ld	r24, X+
    3f84:	9c 91       	ld	r25, X
    3f86:	0e 94 94 16 	call	0x2d28	; 0x2d28 <m2m_strlen>
    3f8a:	80 34       	cpi	r24, 0x40	; 64
    3f8c:	91 05       	cpc	r25, r1
    3f8e:	09 f0       	breq	.+2      	; 0x3f92 <m2m_wifi_connect_sc+0xac>
    3f90:	56 c0       	rjmp	.+172    	; 0x403e <__RODATA_PM_OFFSET__+0x3e>
    3f92:	1a 82       	std	Y+2, r1	; 0x02
    3f94:	ce 01       	movw	r24, r28
    3f96:	83 58       	subi	r24, 0x83	; 131
    3f98:	9f 4f       	sbci	r25, 0xFF	; 255
    3f9a:	fc 01       	movw	r30, r24
    3f9c:	80 81       	ld	r24, Z
    3f9e:	91 81       	ldd	r25, Z+1	; 0x01
    3fa0:	8b 83       	std	Y+3, r24	; 0x03
    3fa2:	9c 83       	std	Y+4, r25	; 0x04
    3fa4:	48 c0       	rjmp	.+144    	; 0x4036 <__RODATA_PM_OFFSET__+0x36>
    3fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa8:	88 2f       	mov	r24, r24
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	2b 81       	ldd	r18, Y+3	; 0x03
    3fae:	3c 81       	ldd	r19, Y+4	; 0x04
    3fb0:	82 0f       	add	r24, r18
    3fb2:	93 1f       	adc	r25, r19
    3fb4:	dc 01       	movw	r26, r24
    3fb6:	8c 91       	ld	r24, X
    3fb8:	80 33       	cpi	r24, 0x30	; 48
    3fba:	b8 f1       	brcs	.+110    	; 0x402a <__RODATA_PM_OFFSET__+0x2a>
    3fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3fbe:	88 2f       	mov	r24, r24
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	2b 81       	ldd	r18, Y+3	; 0x03
    3fc4:	3c 81       	ldd	r19, Y+4	; 0x04
    3fc6:	82 0f       	add	r24, r18
    3fc8:	93 1f       	adc	r25, r19
    3fca:	fc 01       	movw	r30, r24
    3fcc:	80 81       	ld	r24, Z
    3fce:	8a 33       	cpi	r24, 0x3A	; 58
    3fd0:	58 f0       	brcs	.+22     	; 0x3fe8 <m2m_wifi_connect_sc+0x102>
    3fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd4:	88 2f       	mov	r24, r24
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	2b 81       	ldd	r18, Y+3	; 0x03
    3fda:	3c 81       	ldd	r19, Y+4	; 0x04
    3fdc:	82 0f       	add	r24, r18
    3fde:	93 1f       	adc	r25, r19
    3fe0:	dc 01       	movw	r26, r24
    3fe2:	8c 91       	ld	r24, X
    3fe4:	81 34       	cpi	r24, 0x41	; 65
    3fe6:	08 f1       	brcs	.+66     	; 0x402a <__RODATA_PM_OFFSET__+0x2a>
    3fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fea:	88 2f       	mov	r24, r24
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	2b 81       	ldd	r18, Y+3	; 0x03
    3ff0:	3c 81       	ldd	r19, Y+4	; 0x04
    3ff2:	82 0f       	add	r24, r18
    3ff4:	93 1f       	adc	r25, r19
    3ff6:	fc 01       	movw	r30, r24
    3ff8:	80 81       	ld	r24, Z
    3ffa:	87 34       	cpi	r24, 0x47	; 71
    3ffc:	58 f0       	brcs	.+22     	; 0x4014 <__RODATA_PM_OFFSET__+0x14>
    3ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    4000:	88 2f       	mov	r24, r24
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	2b 81       	ldd	r18, Y+3	; 0x03
    4006:	3c 81       	ldd	r19, Y+4	; 0x04
    4008:	82 0f       	add	r24, r18
    400a:	93 1f       	adc	r25, r19
    400c:	dc 01       	movw	r26, r24
    400e:	8c 91       	ld	r24, X
    4010:	81 36       	cpi	r24, 0x61	; 97
    4012:	58 f0       	brcs	.+22     	; 0x402a <__RODATA_PM_OFFSET__+0x2a>
    4014:	8a 81       	ldd	r24, Y+2	; 0x02
    4016:	88 2f       	mov	r24, r24
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	2b 81       	ldd	r18, Y+3	; 0x03
    401c:	3c 81       	ldd	r19, Y+4	; 0x04
    401e:	82 0f       	add	r24, r18
    4020:	93 1f       	adc	r25, r19
    4022:	fc 01       	movw	r30, r24
    4024:	80 81       	ld	r24, Z
    4026:	87 36       	cpi	r24, 0x67	; 103
    4028:	18 f0       	brcs	.+6      	; 0x4030 <__RODATA_PM_OFFSET__+0x30>
    402a:	84 ef       	ldi	r24, 0xF4	; 244
    402c:	89 83       	std	Y+1, r24	; 0x01
    402e:	5a c1       	rjmp	.+692    	; 0x42e4 <__RODATA_PM_OFFSET__+0x2e4>
    4030:	8a 81       	ldd	r24, Y+2	; 0x02
    4032:	8f 5f       	subi	r24, 0xFF	; 255
    4034:	8a 83       	std	Y+2, r24	; 0x02
    4036:	8a 81       	ldd	r24, Y+2	; 0x02
    4038:	80 34       	cpi	r24, 0x40	; 64
    403a:	08 f4       	brcc	.+2      	; 0x403e <__RODATA_PM_OFFSET__+0x3e>
    403c:	b4 cf       	rjmp	.-152    	; 0x3fa6 <m2m_wifi_connect_sc+0xc0>
    403e:	ce 01       	movw	r24, r28
    4040:	85 58       	subi	r24, 0x85	; 133
    4042:	9f 4f       	sbci	r25, 0xFF	; 255
    4044:	dc 01       	movw	r26, r24
    4046:	8c 91       	ld	r24, X
    4048:	88 23       	and	r24, r24
    404a:	39 f0       	breq	.+14     	; 0x405a <__RODATA_PM_OFFSET__+0x5a>
    404c:	ce 01       	movw	r24, r28
    404e:	85 58       	subi	r24, 0x85	; 133
    4050:	9f 4f       	sbci	r25, 0xFF	; 255
    4052:	fc 01       	movw	r30, r24
    4054:	80 81       	ld	r24, Z
    4056:	81 32       	cpi	r24, 0x21	; 33
    4058:	18 f0       	brcs	.+6      	; 0x4060 <__RODATA_PM_OFFSET__+0x60>
    405a:	84 ef       	ldi	r24, 0xF4	; 244
    405c:	89 83       	std	Y+1, r24	; 0x01
    405e:	42 c1       	rjmp	.+644    	; 0x42e4 <__RODATA_PM_OFFSET__+0x2e4>
    4060:	ce 01       	movw	r24, r28
    4062:	81 58       	subi	r24, 0x81	; 129
    4064:	9f 4f       	sbci	r25, 0xFF	; 255
    4066:	dc 01       	movw	r26, r24
    4068:	8d 91       	ld	r24, X+
    406a:	9c 91       	ld	r25, X
    406c:	89 2b       	or	r24, r25
    406e:	41 f0       	breq	.+16     	; 0x4080 <__RODATA_PM_OFFSET__+0x80>
    4070:	ce 01       	movw	r24, r28
    4072:	81 58       	subi	r24, 0x81	; 129
    4074:	9f 4f       	sbci	r25, 0xFF	; 255
    4076:	fc 01       	movw	r30, r24
    4078:	80 81       	ld	r24, Z
    407a:	91 81       	ldd	r25, Z+1	; 0x01
    407c:	0f 97       	sbiw	r24, 0x0f	; 15
    407e:	60 f0       	brcs	.+24     	; 0x4098 <__RODATA_PM_OFFSET__+0x98>
    4080:	ce 01       	movw	r24, r28
    4082:	81 58       	subi	r24, 0x81	; 129
    4084:	9f 4f       	sbci	r25, 0xFF	; 255
    4086:	dc 01       	movw	r26, r24
    4088:	8d 91       	ld	r24, X+
    408a:	9c 91       	ld	r25, X
    408c:	8f 3f       	cpi	r24, 0xFF	; 255
    408e:	91 05       	cpc	r25, r1
    4090:	19 f0       	breq	.+6      	; 0x4098 <__RODATA_PM_OFFSET__+0x98>
    4092:	84 ef       	ldi	r24, 0xF4	; 244
    4094:	89 83       	std	Y+1, r24	; 0x01
    4096:	26 c1       	rjmp	.+588    	; 0x42e4 <__RODATA_PM_OFFSET__+0x2e4>
    4098:	ce 01       	movw	r24, r28
    409a:	85 58       	subi	r24, 0x85	; 133
    409c:	9f 4f       	sbci	r25, 0xFF	; 255
    409e:	fc 01       	movw	r30, r24
    40a0:	80 81       	ld	r24, Z
    40a2:	88 2f       	mov	r24, r24
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	a0 e0       	ldi	r26, 0x00	; 0
    40a8:	b0 e0       	ldi	r27, 0x00	; 0
    40aa:	9e 01       	movw	r18, r28
    40ac:	27 58       	subi	r18, 0x87	; 135
    40ae:	3f 4f       	sbci	r19, 0xFF	; 255
    40b0:	f9 01       	movw	r30, r18
    40b2:	60 81       	ld	r22, Z
    40b4:	71 81       	ldd	r23, Z+1	; 0x01
    40b6:	9e 01       	movw	r18, r28
    40b8:	23 5f       	subi	r18, 0xF3	; 243
    40ba:	3f 4f       	sbci	r19, 0xFF	; 255
    40bc:	f9 01       	movw	r30, r18
    40be:	ea 5b       	subi	r30, 0xBA	; 186
    40c0:	ff 4f       	sbci	r31, 0xFF	; 255
    40c2:	9c 01       	movw	r18, r24
    40c4:	ad 01       	movw	r20, r26
    40c6:	cf 01       	movw	r24, r30
    40c8:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <m2m_memcpy>
    40cc:	ce 01       	movw	r24, r28
    40ce:	85 58       	subi	r24, 0x85	; 133
    40d0:	9f 4f       	sbci	r25, 0xFF	; 255
    40d2:	dc 01       	movw	r26, r24
    40d4:	8c 91       	ld	r24, X
    40d6:	88 2f       	mov	r24, r24
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	9e 01       	movw	r18, r28
    40dc:	2d 5a       	subi	r18, 0xAD	; 173
    40de:	3f 4f       	sbci	r19, 0xFF	; 255
    40e0:	82 0f       	add	r24, r18
    40e2:	93 1f       	adc	r25, r19
    40e4:	fc 01       	movw	r30, r24
    40e6:	10 82       	st	Z, r1
    40e8:	ce 01       	movw	r24, r28
    40ea:	8f 5a       	subi	r24, 0xAF	; 175
    40ec:	9f 4f       	sbci	r25, 0xFF	; 255
    40ee:	9e 01       	movw	r18, r28
    40f0:	21 58       	subi	r18, 0x81	; 129
    40f2:	3f 4f       	sbci	r19, 0xFF	; 255
    40f4:	d9 01       	movw	r26, r18
    40f6:	2d 91       	ld	r18, X+
    40f8:	3c 91       	ld	r19, X
    40fa:	fc 01       	movw	r30, r24
    40fc:	20 83       	st	Z, r18
    40fe:	31 83       	std	Z+1, r19	; 0x01
    4100:	ce 01       	movw	r24, r28
    4102:	8f 57       	subi	r24, 0x7F	; 127
    4104:	9f 4f       	sbci	r25, 0xFF	; 255
    4106:	21 e0       	ldi	r18, 0x01	; 1
    4108:	dc 01       	movw	r26, r24
    410a:	8c 91       	ld	r24, X
    410c:	88 23       	and	r24, r24
    410e:	09 f4       	brne	.+2      	; 0x4112 <__RODATA_PM_OFFSET__+0x112>
    4110:	20 e0       	ldi	r18, 0x00	; 0
    4112:	ce 01       	movw	r24, r28
    4114:	8c 58       	subi	r24, 0x8C	; 140
    4116:	9f 4f       	sbci	r25, 0xFF	; 255
    4118:	fc 01       	movw	r30, r24
    411a:	20 83       	st	Z, r18
    411c:	ce 01       	movw	r24, r28
    411e:	0d 96       	adiw	r24, 0x0d	; 13
    4120:	8d 83       	std	Y+5, r24	; 0x05
    4122:	9e 83       	std	Y+6, r25	; 0x06
    4124:	8d 81       	ldd	r24, Y+5	; 0x05
    4126:	9e 81       	ldd	r25, Y+6	; 0x06
    4128:	8f 5b       	subi	r24, 0xBF	; 191
    412a:	9f 4f       	sbci	r25, 0xFF	; 255
    412c:	9e 01       	movw	r18, r28
    412e:	24 58       	subi	r18, 0x84	; 132
    4130:	3f 4f       	sbci	r19, 0xFF	; 255
    4132:	d9 01       	movw	r26, r18
    4134:	2c 91       	ld	r18, X
    4136:	fc 01       	movw	r30, r24
    4138:	20 83       	st	Z, r18
    413a:	ce 01       	movw	r24, r28
    413c:	84 58       	subi	r24, 0x84	; 132
    413e:	9f 4f       	sbci	r25, 0xFF	; 255
    4140:	dc 01       	movw	r26, r24
    4142:	8c 91       	ld	r24, X
    4144:	83 30       	cpi	r24, 0x03	; 3
    4146:	09 f0       	breq	.+2      	; 0x414a <__RODATA_PM_OFFSET__+0x14a>
    4148:	5f c0       	rjmp	.+190    	; 0x4208 <__RODATA_PM_OFFSET__+0x208>
    414a:	ce 01       	movw	r24, r28
    414c:	83 58       	subi	r24, 0x83	; 131
    414e:	9f 4f       	sbci	r25, 0xFF	; 255
    4150:	fc 01       	movw	r30, r24
    4152:	80 81       	ld	r24, Z
    4154:	91 81       	ldd	r25, Z+1	; 0x01
    4156:	8f 83       	std	Y+7, r24	; 0x07
    4158:	98 87       	std	Y+8, r25	; 0x08
    415a:	8d 81       	ldd	r24, Y+5	; 0x05
    415c:	9e 81       	ldd	r25, Y+6	; 0x06
    415e:	89 87       	std	Y+9, r24	; 0x09
    4160:	9a 87       	std	Y+10, r25	; 0x0a
    4162:	8f 81       	ldd	r24, Y+7	; 0x07
    4164:	98 85       	ldd	r25, Y+8	; 0x08
    4166:	dc 01       	movw	r26, r24
    4168:	8c 91       	ld	r24, X
    416a:	2f ef       	ldi	r18, 0xFF	; 255
    416c:	28 0f       	add	r18, r24
    416e:	89 85       	ldd	r24, Y+9	; 0x09
    4170:	9a 85       	ldd	r25, Y+10	; 0x0a
    4172:	fc 01       	movw	r30, r24
    4174:	20 83       	st	Z, r18
    4176:	89 85       	ldd	r24, Y+9	; 0x09
    4178:	9a 85       	ldd	r25, Y+10	; 0x0a
    417a:	dc 01       	movw	r26, r24
    417c:	8c 91       	ld	r24, X
    417e:	84 30       	cpi	r24, 0x04	; 4
    4180:	18 f0       	brcs	.+6      	; 0x4188 <__RODATA_PM_OFFSET__+0x188>
    4182:	84 ef       	ldi	r24, 0xF4	; 244
    4184:	89 83       	std	Y+1, r24	; 0x01
    4186:	ae c0       	rjmp	.+348    	; 0x42e4 <__RODATA_PM_OFFSET__+0x2e4>
    4188:	8f 81       	ldd	r24, Y+7	; 0x07
    418a:	98 85       	ldd	r25, Y+8	; 0x08
    418c:	fc 01       	movw	r30, r24
    418e:	81 81       	ldd	r24, Z+1	; 0x01
    4190:	2f ef       	ldi	r18, 0xFF	; 255
    4192:	28 0f       	add	r18, r24
    4194:	89 85       	ldd	r24, Y+9	; 0x09
    4196:	9a 85       	ldd	r25, Y+10	; 0x0a
    4198:	dc 01       	movw	r26, r24
    419a:	11 96       	adiw	r26, 0x01	; 1
    419c:	2c 93       	st	X, r18
    419e:	89 85       	ldd	r24, Y+9	; 0x09
    41a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a2:	fc 01       	movw	r30, r24
    41a4:	81 81       	ldd	r24, Z+1	; 0x01
    41a6:	8a 30       	cpi	r24, 0x0A	; 10
    41a8:	51 f0       	breq	.+20     	; 0x41be <__RODATA_PM_OFFSET__+0x1be>
    41aa:	89 85       	ldd	r24, Y+9	; 0x09
    41ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ae:	dc 01       	movw	r26, r24
    41b0:	11 96       	adiw	r26, 0x01	; 1
    41b2:	8c 91       	ld	r24, X
    41b4:	8a 31       	cpi	r24, 0x1A	; 26
    41b6:	19 f0       	breq	.+6      	; 0x41be <__RODATA_PM_OFFSET__+0x1be>
    41b8:	84 ef       	ldi	r24, 0xF4	; 244
    41ba:	89 83       	std	Y+1, r24	; 0x01
    41bc:	93 c0       	rjmp	.+294    	; 0x42e4 <__RODATA_PM_OFFSET__+0x2e4>
    41be:	8f 81       	ldd	r24, Y+7	; 0x07
    41c0:	98 85       	ldd	r25, Y+8	; 0x08
    41c2:	fc 01       	movw	r30, r24
    41c4:	81 81       	ldd	r24, Z+1	; 0x01
    41c6:	88 2f       	mov	r24, r24
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	a0 e0       	ldi	r26, 0x00	; 0
    41cc:	b0 e0       	ldi	r27, 0x00	; 0
    41ce:	2f 81       	ldd	r18, Y+7	; 0x07
    41d0:	38 85       	ldd	r19, Y+8	; 0x08
    41d2:	b9 01       	movw	r22, r18
    41d4:	6e 5f       	subi	r22, 0xFE	; 254
    41d6:	7f 4f       	sbci	r23, 0xFF	; 255
    41d8:	29 85       	ldd	r18, Y+9	; 0x09
    41da:	3a 85       	ldd	r19, Y+10	; 0x0a
    41dc:	f9 01       	movw	r30, r18
    41de:	32 96       	adiw	r30, 0x02	; 2
    41e0:	9c 01       	movw	r18, r24
    41e2:	ad 01       	movw	r20, r26
    41e4:	cf 01       	movw	r24, r30
    41e6:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <m2m_memcpy>
    41ea:	8f 81       	ldd	r24, Y+7	; 0x07
    41ec:	98 85       	ldd	r25, Y+8	; 0x08
    41ee:	dc 01       	movw	r26, r24
    41f0:	11 96       	adiw	r26, 0x01	; 1
    41f2:	8c 91       	ld	r24, X
    41f4:	88 2f       	mov	r24, r24
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	29 85       	ldd	r18, Y+9	; 0x09
    41fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    41fc:	82 0f       	add	r24, r18
    41fe:	93 1f       	adc	r25, r19
    4200:	02 96       	adiw	r24, 0x02	; 2
    4202:	fc 01       	movw	r30, r24
    4204:	10 82       	st	Z, r1
    4206:	5e c0       	rjmp	.+188    	; 0x42c4 <__RODATA_PM_OFFSET__+0x2c4>
    4208:	ce 01       	movw	r24, r28
    420a:	84 58       	subi	r24, 0x84	; 132
    420c:	9f 4f       	sbci	r25, 0xFF	; 255
    420e:	dc 01       	movw	r26, r24
    4210:	8c 91       	ld	r24, X
    4212:	82 30       	cpi	r24, 0x02	; 2
    4214:	a9 f5       	brne	.+106    	; 0x4280 <__RODATA_PM_OFFSET__+0x280>
    4216:	ce 01       	movw	r24, r28
    4218:	83 58       	subi	r24, 0x83	; 131
    421a:	9f 4f       	sbci	r25, 0xFF	; 255
    421c:	fc 01       	movw	r30, r24
    421e:	80 81       	ld	r24, Z
    4220:	91 81       	ldd	r25, Z+1	; 0x01
    4222:	0e 94 94 16 	call	0x2d28	; 0x2d28 <m2m_strlen>
    4226:	8b 87       	std	Y+11, r24	; 0x0b
    4228:	9c 87       	std	Y+12, r25	; 0x0c
    422a:	8b 85       	ldd	r24, Y+11	; 0x0b
    422c:	9c 85       	ldd	r25, Y+12	; 0x0c
    422e:	89 2b       	or	r24, r25
    4230:	29 f0       	breq	.+10     	; 0x423c <__RODATA_PM_OFFSET__+0x23c>
    4232:	8b 85       	ldd	r24, Y+11	; 0x0b
    4234:	9c 85       	ldd	r25, Y+12	; 0x0c
    4236:	81 34       	cpi	r24, 0x41	; 65
    4238:	91 05       	cpc	r25, r1
    423a:	18 f0       	brcs	.+6      	; 0x4242 <__RODATA_PM_OFFSET__+0x242>
    423c:	84 ef       	ldi	r24, 0xF4	; 244
    423e:	89 83       	std	Y+1, r24	; 0x01
    4240:	51 c0       	rjmp	.+162    	; 0x42e4 <__RODATA_PM_OFFSET__+0x2e4>
    4242:	8b 85       	ldd	r24, Y+11	; 0x0b
    4244:	9c 85       	ldd	r25, Y+12	; 0x0c
    4246:	01 96       	adiw	r24, 0x01	; 1
    4248:	cc 01       	movw	r24, r24
    424a:	a0 e0       	ldi	r26, 0x00	; 0
    424c:	b0 e0       	ldi	r27, 0x00	; 0
    424e:	ed 81       	ldd	r30, Y+5	; 0x05
    4250:	fe 81       	ldd	r31, Y+6	; 0x06
    4252:	ce 57       	subi	r28, 0x7E	; 126
    4254:	df 4f       	sbci	r29, 0xFF	; 255
    4256:	e8 83       	st	Y, r30
    4258:	f9 83       	std	Y+1, r31	; 0x01
    425a:	c2 58       	subi	r28, 0x82	; 130
    425c:	d0 40       	sbci	r29, 0x00	; 0
    425e:	9e 01       	movw	r18, r28
    4260:	23 58       	subi	r18, 0x83	; 131
    4262:	3f 4f       	sbci	r19, 0xFF	; 255
    4264:	f9 01       	movw	r30, r18
    4266:	60 81       	ld	r22, Z
    4268:	71 81       	ldd	r23, Z+1	; 0x01
    426a:	9c 01       	movw	r18, r24
    426c:	ad 01       	movw	r20, r26
    426e:	ce 57       	subi	r28, 0x7E	; 126
    4270:	df 4f       	sbci	r29, 0xFF	; 255
    4272:	88 81       	ld	r24, Y
    4274:	99 81       	ldd	r25, Y+1	; 0x01
    4276:	c2 58       	subi	r28, 0x82	; 130
    4278:	d0 40       	sbci	r29, 0x00	; 0
    427a:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <m2m_memcpy>
    427e:	22 c0       	rjmp	.+68     	; 0x42c4 <__RODATA_PM_OFFSET__+0x2c4>
    4280:	ce 01       	movw	r24, r28
    4282:	84 58       	subi	r24, 0x84	; 132
    4284:	9f 4f       	sbci	r25, 0xFF	; 255
    4286:	dc 01       	movw	r26, r24
    4288:	8c 91       	ld	r24, X
    428a:	84 30       	cpi	r24, 0x04	; 4
    428c:	89 f4       	brne	.+34     	; 0x42b0 <__RODATA_PM_OFFSET__+0x2b0>
    428e:	ed 81       	ldd	r30, Y+5	; 0x05
    4290:	fe 81       	ldd	r31, Y+6	; 0x06
    4292:	ce 01       	movw	r24, r28
    4294:	83 58       	subi	r24, 0x83	; 131
    4296:	9f 4f       	sbci	r25, 0xFF	; 255
    4298:	dc 01       	movw	r26, r24
    429a:	8d 91       	ld	r24, X+
    429c:	9c 91       	ld	r25, X
    429e:	2e e3       	ldi	r18, 0x3E	; 62
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	40 e0       	ldi	r20, 0x00	; 0
    42a4:	50 e0       	ldi	r21, 0x00	; 0
    42a6:	bc 01       	movw	r22, r24
    42a8:	cf 01       	movw	r24, r30
    42aa:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <m2m_memcpy>
    42ae:	0a c0       	rjmp	.+20     	; 0x42c4 <__RODATA_PM_OFFSET__+0x2c4>
    42b0:	ce 01       	movw	r24, r28
    42b2:	84 58       	subi	r24, 0x84	; 132
    42b4:	9f 4f       	sbci	r25, 0xFF	; 255
    42b6:	fc 01       	movw	r30, r24
    42b8:	80 81       	ld	r24, Z
    42ba:	81 30       	cpi	r24, 0x01	; 1
    42bc:	19 f0       	breq	.+6      	; 0x42c4 <__RODATA_PM_OFFSET__+0x2c4>
    42be:	84 ef       	ldi	r24, 0xF4	; 244
    42c0:	89 83       	std	Y+1, r24	; 0x01
    42c2:	10 c0       	rjmp	.+32     	; 0x42e4 <__RODATA_PM_OFFSET__+0x2e4>
    42c4:	ce 01       	movw	r24, r28
    42c6:	0d 96       	adiw	r24, 0x0d	; 13
    42c8:	c1 2c       	mov	r12, r1
    42ca:	d1 2c       	mov	r13, r1
    42cc:	e1 2c       	mov	r14, r1
    42ce:	f1 2c       	mov	r15, r1
    42d0:	00 e0       	ldi	r16, 0x00	; 0
    42d2:	10 e0       	ldi	r17, 0x00	; 0
    42d4:	2c e6       	ldi	r18, 0x6C	; 108
    42d6:	30 e0       	ldi	r19, 0x00	; 0
    42d8:	ac 01       	movw	r20, r24
    42da:	68 e2       	ldi	r22, 0x28	; 40
    42dc:	81 e0       	ldi	r24, 0x01	; 1
    42de:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <hif_send>
    42e2:	89 83       	std	Y+1, r24	; 0x01
    42e4:	89 81       	ldd	r24, Y+1	; 0x01
    42e6:	cd 57       	subi	r28, 0x7D	; 125
    42e8:	df 4f       	sbci	r29, 0xFF	; 255
    42ea:	cd bf       	out	0x3d, r28	; 61
    42ec:	de bf       	out	0x3e, r29	; 62
    42ee:	df 91       	pop	r29
    42f0:	cf 91       	pop	r28
    42f2:	1f 91       	pop	r17
    42f4:	0f 91       	pop	r16
    42f6:	ff 90       	pop	r15
    42f8:	ef 90       	pop	r14
    42fa:	df 90       	pop	r13
    42fc:	cf 90       	pop	r12
    42fe:	08 95       	ret

00004300 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
    4300:	cf 93       	push	r28
    4302:	df 93       	push	r29
    4304:	cd b7       	in	r28, 0x3d	; 61
    4306:	de b7       	in	r29, 0x3e	; 62
	/*legacy API should be removed */
	return 0;
    4308:	80 e0       	ldi	r24, 0x00	; 0
}
    430a:	df 91       	pop	r29
    430c:	cf 91       	pop	r28
    430e:	08 95       	ret

00004310 <chip_apply_conf>:
{
	sint8 ret = M2M_SUCCESS;
	ret = nm_write_reg(NMI_GLB_RESET_0, 0);
	nm_bsp_sleep(50);
	return ret;
}
    4310:	cf 93       	push	r28
    4312:	df 93       	push	r29
    4314:	cd b7       	in	r28, 0x3d	; 61
    4316:	de b7       	in	r29, 0x3e	; 62
    4318:	2d 97       	sbiw	r28, 0x0d	; 13
    431a:	cd bf       	out	0x3d, r28	; 61
    431c:	de bf       	out	0x3e, r29	; 62
    431e:	6a 87       	std	Y+10, r22	; 0x0a
    4320:	7b 87       	std	Y+11, r23	; 0x0b
    4322:	8c 87       	std	Y+12, r24	; 0x0c
    4324:	9d 87       	std	Y+13, r25	; 0x0d
    4326:	19 82       	std	Y+1, r1	; 0x01
    4328:	8a 85       	ldd	r24, Y+10	; 0x0a
    432a:	9b 85       	ldd	r25, Y+11	; 0x0b
    432c:	ac 85       	ldd	r26, Y+12	; 0x0c
    432e:	bd 85       	ldd	r27, Y+13	; 0x0d
    4330:	8a 83       	std	Y+2, r24	; 0x02
    4332:	9b 83       	std	Y+3, r25	; 0x03
    4334:	ac 83       	std	Y+4, r26	; 0x04
    4336:	bd 83       	std	Y+5, r27	; 0x05
    4338:	8a 81       	ldd	r24, Y+2	; 0x02
    433a:	9b 81       	ldd	r25, Y+3	; 0x03
    433c:	ac 81       	ldd	r26, Y+4	; 0x04
    433e:	bd 81       	ldd	r27, Y+5	; 0x05
    4340:	91 60       	ori	r25, 0x01	; 1
    4342:	8a 83       	std	Y+2, r24	; 0x02
    4344:	9b 83       	std	Y+3, r25	; 0x03
    4346:	ac 83       	std	Y+4, r26	; 0x04
    4348:	bd 83       	std	Y+5, r27	; 0x05
    434a:	8a 81       	ldd	r24, Y+2	; 0x02
    434c:	9b 81       	ldd	r25, Y+3	; 0x03
    434e:	ac 81       	ldd	r26, Y+4	; 0x04
    4350:	bd 81       	ldd	r27, Y+5	; 0x05
    4352:	9c 01       	movw	r18, r24
    4354:	ad 01       	movw	r20, r26
    4356:	60 ea       	ldi	r22, 0xA0	; 160
    4358:	74 e1       	ldi	r23, 0x14	; 20
    435a:	80 e0       	ldi	r24, 0x00	; 0
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    4362:	8a 81       	ldd	r24, Y+2	; 0x02
    4364:	9b 81       	ldd	r25, Y+3	; 0x03
    4366:	ac 81       	ldd	r26, Y+4	; 0x04
    4368:	bd 81       	ldd	r27, Y+5	; 0x05
    436a:	89 2b       	or	r24, r25
    436c:	8a 2b       	or	r24, r26
    436e:	8b 2b       	or	r24, r27
    4370:	f9 f0       	breq	.+62     	; 0x43b0 <chip_apply_conf+0xa0>
    4372:	1e 82       	std	Y+6, r1	; 0x06
    4374:	1f 82       	std	Y+7, r1	; 0x07
    4376:	18 86       	std	Y+8, r1	; 0x08
    4378:	19 86       	std	Y+9, r1	; 0x09
    437a:	ce 01       	movw	r24, r28
    437c:	06 96       	adiw	r24, 0x06	; 6
    437e:	ac 01       	movw	r20, r24
    4380:	60 ea       	ldi	r22, 0xA0	; 160
    4382:	74 e1       	ldi	r23, 0x14	; 20
    4384:	80 e0       	ldi	r24, 0x00	; 0
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    438c:	89 83       	std	Y+1, r24	; 0x01
    438e:	89 81       	ldd	r24, Y+1	; 0x01
    4390:	88 23       	and	r24, r24
    4392:	d9 f6       	brne	.-74     	; 0x434a <chip_apply_conf+0x3a>
    4394:	2e 81       	ldd	r18, Y+6	; 0x06
    4396:	3f 81       	ldd	r19, Y+7	; 0x07
    4398:	48 85       	ldd	r20, Y+8	; 0x08
    439a:	59 85       	ldd	r21, Y+9	; 0x09
    439c:	8a 81       	ldd	r24, Y+2	; 0x02
    439e:	9b 81       	ldd	r25, Y+3	; 0x03
    43a0:	ac 81       	ldd	r26, Y+4	; 0x04
    43a2:	bd 81       	ldd	r27, Y+5	; 0x05
    43a4:	28 17       	cp	r18, r24
    43a6:	39 07       	cpc	r19, r25
    43a8:	4a 07       	cpc	r20, r26
    43aa:	5b 07       	cpc	r21, r27
    43ac:	19 f0       	breq	.+6      	; 0x43b4 <chip_apply_conf+0xa4>
    43ae:	cd cf       	rjmp	.-102    	; 0x434a <chip_apply_conf+0x3a>
    43b0:	00 00       	nop
    43b2:	01 c0       	rjmp	.+2      	; 0x43b6 <chip_apply_conf+0xa6>
    43b4:	00 00       	nop
    43b6:	80 e0       	ldi	r24, 0x00	; 0
    43b8:	2d 96       	adiw	r28, 0x0d	; 13
    43ba:	cd bf       	out	0x3d, r28	; 61
    43bc:	de bf       	out	0x3e, r29	; 62
    43be:	df 91       	pop	r29
    43c0:	cf 91       	pop	r28
    43c2:	08 95       	ret

000043c4 <enable_interrupts>:
    43c4:	cf 93       	push	r28
    43c6:	df 93       	push	r29
    43c8:	cd b7       	in	r28, 0x3d	; 61
    43ca:	de b7       	in	r29, 0x3e	; 62
    43cc:	25 97       	sbiw	r28, 0x05	; 5
    43ce:	cd bf       	out	0x3d, r28	; 61
    43d0:	de bf       	out	0x3e, r29	; 62
    43d2:	1a 82       	std	Y+2, r1	; 0x02
    43d4:	1b 82       	std	Y+3, r1	; 0x03
    43d6:	1c 82       	std	Y+4, r1	; 0x04
    43d8:	1d 82       	std	Y+5, r1	; 0x05
    43da:	19 82       	std	Y+1, r1	; 0x01
    43dc:	ce 01       	movw	r24, r28
    43de:	02 96       	adiw	r24, 0x02	; 2
    43e0:	ac 01       	movw	r20, r24
    43e2:	68 e0       	ldi	r22, 0x08	; 8
    43e4:	74 e1       	ldi	r23, 0x14	; 20
    43e6:	80 e0       	ldi	r24, 0x00	; 0
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    43ee:	89 83       	std	Y+1, r24	; 0x01
    43f0:	89 81       	ldd	r24, Y+1	; 0x01
    43f2:	88 23       	and	r24, r24
    43f4:	e9 f5       	brne	.+122    	; 0x4470 <enable_interrupts+0xac>
    43f6:	8a 81       	ldd	r24, Y+2	; 0x02
    43f8:	9b 81       	ldd	r25, Y+3	; 0x03
    43fa:	ac 81       	ldd	r26, Y+4	; 0x04
    43fc:	bd 81       	ldd	r27, Y+5	; 0x05
    43fe:	91 60       	ori	r25, 0x01	; 1
    4400:	8a 83       	std	Y+2, r24	; 0x02
    4402:	9b 83       	std	Y+3, r25	; 0x03
    4404:	ac 83       	std	Y+4, r26	; 0x04
    4406:	bd 83       	std	Y+5, r27	; 0x05
    4408:	8a 81       	ldd	r24, Y+2	; 0x02
    440a:	9b 81       	ldd	r25, Y+3	; 0x03
    440c:	ac 81       	ldd	r26, Y+4	; 0x04
    440e:	bd 81       	ldd	r27, Y+5	; 0x05
    4410:	9c 01       	movw	r18, r24
    4412:	ad 01       	movw	r20, r26
    4414:	68 e0       	ldi	r22, 0x08	; 8
    4416:	74 e1       	ldi	r23, 0x14	; 20
    4418:	80 e0       	ldi	r24, 0x00	; 0
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    4420:	89 83       	std	Y+1, r24	; 0x01
    4422:	89 81       	ldd	r24, Y+1	; 0x01
    4424:	88 23       	and	r24, r24
    4426:	31 f5       	brne	.+76     	; 0x4474 <enable_interrupts+0xb0>
    4428:	ce 01       	movw	r24, r28
    442a:	02 96       	adiw	r24, 0x02	; 2
    442c:	ac 01       	movw	r20, r24
    442e:	60 e0       	ldi	r22, 0x00	; 0
    4430:	7a e1       	ldi	r23, 0x1A	; 26
    4432:	80 e0       	ldi	r24, 0x00	; 0
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    443a:	89 83       	std	Y+1, r24	; 0x01
    443c:	89 81       	ldd	r24, Y+1	; 0x01
    443e:	88 23       	and	r24, r24
    4440:	d9 f4       	brne	.+54     	; 0x4478 <enable_interrupts+0xb4>
    4442:	8a 81       	ldd	r24, Y+2	; 0x02
    4444:	9b 81       	ldd	r25, Y+3	; 0x03
    4446:	ac 81       	ldd	r26, Y+4	; 0x04
    4448:	bd 81       	ldd	r27, Y+5	; 0x05
    444a:	a1 60       	ori	r26, 0x01	; 1
    444c:	8a 83       	std	Y+2, r24	; 0x02
    444e:	9b 83       	std	Y+3, r25	; 0x03
    4450:	ac 83       	std	Y+4, r26	; 0x04
    4452:	bd 83       	std	Y+5, r27	; 0x05
    4454:	8a 81       	ldd	r24, Y+2	; 0x02
    4456:	9b 81       	ldd	r25, Y+3	; 0x03
    4458:	ac 81       	ldd	r26, Y+4	; 0x04
    445a:	bd 81       	ldd	r27, Y+5	; 0x05
    445c:	9c 01       	movw	r18, r24
    445e:	ad 01       	movw	r20, r26
    4460:	60 e0       	ldi	r22, 0x00	; 0
    4462:	7a e1       	ldi	r23, 0x1A	; 26
    4464:	80 e0       	ldi	r24, 0x00	; 0
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    446c:	89 83       	std	Y+1, r24	; 0x01
    446e:	05 c0       	rjmp	.+10     	; 0x447a <enable_interrupts+0xb6>
    4470:	00 00       	nop
    4472:	03 c0       	rjmp	.+6      	; 0x447a <enable_interrupts+0xb6>
    4474:	00 00       	nop
    4476:	01 c0       	rjmp	.+2      	; 0x447a <enable_interrupts+0xb6>
    4478:	00 00       	nop
    447a:	89 81       	ldd	r24, Y+1	; 0x01
    447c:	25 96       	adiw	r28, 0x05	; 5
    447e:	cd bf       	out	0x3d, r28	; 61
    4480:	de bf       	out	0x3e, r29	; 62
    4482:	df 91       	pop	r29
    4484:	cf 91       	pop	r28
    4486:	08 95       	ret

00004488 <nmi_get_chipid>:
    4488:	cf 93       	push	r28
    448a:	df 93       	push	r29
    448c:	00 d0       	rcall	.+0      	; 0x448e <nmi_get_chipid+0x6>
    448e:	00 d0       	rcall	.+0      	; 0x4490 <nmi_get_chipid+0x8>
    4490:	cd b7       	in	r28, 0x3d	; 61
    4492:	de b7       	in	r29, 0x3e	; 62
    4494:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <chipid.2327>
    4498:	90 91 25 28 	lds	r25, 0x2825	; 0x802825 <chipid.2327+0x1>
    449c:	a0 91 26 28 	lds	r26, 0x2826	; 0x802826 <chipid.2327+0x2>
    44a0:	b0 91 27 28 	lds	r27, 0x2827	; 0x802827 <chipid.2327+0x3>
    44a4:	89 2b       	or	r24, r25
    44a6:	8a 2b       	or	r24, r26
    44a8:	8b 2b       	or	r24, r27
    44aa:	09 f0       	breq	.+2      	; 0x44ae <nmi_get_chipid+0x26>
    44ac:	cd c0       	rjmp	.+410    	; 0x4648 <nmi_get_chipid+0x1c0>
    44ae:	44 e2       	ldi	r20, 0x24	; 36
    44b0:	58 e2       	ldi	r21, 0x28	; 40
    44b2:	60 e0       	ldi	r22, 0x00	; 0
    44b4:	70 e1       	ldi	r23, 0x10	; 16
    44b6:	80 e0       	ldi	r24, 0x00	; 0
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    44be:	88 23       	and	r24, r24
    44c0:	61 f0       	breq	.+24     	; 0x44da <nmi_get_chipid+0x52>
    44c2:	10 92 24 28 	sts	0x2824, r1	; 0x802824 <chipid.2327>
    44c6:	10 92 25 28 	sts	0x2825, r1	; 0x802825 <chipid.2327+0x1>
    44ca:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <chipid.2327+0x2>
    44ce:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <chipid.2327+0x3>
    44d2:	80 e0       	ldi	r24, 0x00	; 0
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	dc 01       	movw	r26, r24
    44d8:	bf c0       	rjmp	.+382    	; 0x4658 <nmi_get_chipid+0x1d0>
    44da:	ce 01       	movw	r24, r28
    44dc:	01 96       	adiw	r24, 0x01	; 1
    44de:	ac 01       	movw	r20, r24
    44e0:	64 ef       	ldi	r22, 0xF4	; 244
    44e2:	73 e1       	ldi	r23, 0x13	; 19
    44e4:	80 e0       	ldi	r24, 0x00	; 0
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    44ec:	88 23       	and	r24, r24
    44ee:	61 f0       	breq	.+24     	; 0x4508 <nmi_get_chipid+0x80>
    44f0:	10 92 24 28 	sts	0x2824, r1	; 0x802824 <chipid.2327>
    44f4:	10 92 25 28 	sts	0x2825, r1	; 0x802825 <chipid.2327+0x1>
    44f8:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <chipid.2327+0x2>
    44fc:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <chipid.2327+0x3>
    4500:	80 e0       	ldi	r24, 0x00	; 0
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	dc 01       	movw	r26, r24
    4506:	a8 c0       	rjmp	.+336    	; 0x4658 <nmi_get_chipid+0x1d0>
    4508:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <chipid.2327>
    450c:	90 91 25 28 	lds	r25, 0x2825	; 0x802825 <chipid.2327+0x1>
    4510:	a0 91 26 28 	lds	r26, 0x2826	; 0x802826 <chipid.2327+0x2>
    4514:	b0 91 27 28 	lds	r27, 0x2827	; 0x802827 <chipid.2327+0x3>
    4518:	80 3a       	cpi	r24, 0xA0	; 160
    451a:	92 40       	sbci	r25, 0x02	; 2
    451c:	a0 41       	sbci	r26, 0x10	; 16
    451e:	b1 05       	cpc	r27, r1
    4520:	b1 f4       	brne	.+44     	; 0x454e <nmi_get_chipid+0xc6>
    4522:	89 81       	ldd	r24, Y+1	; 0x01
    4524:	9a 81       	ldd	r25, Y+2	; 0x02
    4526:	ab 81       	ldd	r26, Y+3	; 0x03
    4528:	bc 81       	ldd	r27, Y+4	; 0x04
    452a:	01 97       	sbiw	r24, 0x01	; 1
    452c:	a1 05       	cpc	r26, r1
    452e:	b1 05       	cpc	r27, r1
    4530:	09 f4       	brne	.+2      	; 0x4534 <nmi_get_chipid+0xac>
    4532:	68 c0       	rjmp	.+208    	; 0x4604 <nmi_get_chipid+0x17c>
    4534:	81 ea       	ldi	r24, 0xA1	; 161
    4536:	92 e0       	ldi	r25, 0x02	; 2
    4538:	a0 e1       	ldi	r26, 0x10	; 16
    453a:	b0 e0       	ldi	r27, 0x00	; 0
    453c:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <chipid.2327>
    4540:	90 93 25 28 	sts	0x2825, r25	; 0x802825 <chipid.2327+0x1>
    4544:	a0 93 26 28 	sts	0x2826, r26	; 0x802826 <chipid.2327+0x2>
    4548:	b0 93 27 28 	sts	0x2827, r27	; 0x802827 <chipid.2327+0x3>
    454c:	5b c0       	rjmp	.+182    	; 0x4604 <nmi_get_chipid+0x17c>
    454e:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <chipid.2327>
    4552:	90 91 25 28 	lds	r25, 0x2825	; 0x802825 <chipid.2327+0x1>
    4556:	a0 91 26 28 	lds	r26, 0x2826	; 0x802826 <chipid.2327+0x2>
    455a:	b0 91 27 28 	lds	r27, 0x2827	; 0x802827 <chipid.2327+0x3>
    455e:	80 3b       	cpi	r24, 0xB0	; 176
    4560:	92 40       	sbci	r25, 0x02	; 2
    4562:	a0 41       	sbci	r26, 0x10	; 16
    4564:	b1 05       	cpc	r27, r1
    4566:	59 f5       	brne	.+86     	; 0x45be <nmi_get_chipid+0x136>
    4568:	89 81       	ldd	r24, Y+1	; 0x01
    456a:	9a 81       	ldd	r25, Y+2	; 0x02
    456c:	ab 81       	ldd	r26, Y+3	; 0x03
    456e:	bc 81       	ldd	r27, Y+4	; 0x04
    4570:	03 97       	sbiw	r24, 0x03	; 3
    4572:	a1 05       	cpc	r26, r1
    4574:	b1 05       	cpc	r27, r1
    4576:	09 f4       	brne	.+2      	; 0x457a <nmi_get_chipid+0xf2>
    4578:	45 c0       	rjmp	.+138    	; 0x4604 <nmi_get_chipid+0x17c>
    457a:	89 81       	ldd	r24, Y+1	; 0x01
    457c:	9a 81       	ldd	r25, Y+2	; 0x02
    457e:	ab 81       	ldd	r26, Y+3	; 0x03
    4580:	bc 81       	ldd	r27, Y+4	; 0x04
    4582:	04 97       	sbiw	r24, 0x04	; 4
    4584:	a1 05       	cpc	r26, r1
    4586:	b1 05       	cpc	r27, r1
    4588:	69 f4       	brne	.+26     	; 0x45a4 <nmi_get_chipid+0x11c>
    458a:	81 eb       	ldi	r24, 0xB1	; 177
    458c:	92 e0       	ldi	r25, 0x02	; 2
    458e:	a0 e1       	ldi	r26, 0x10	; 16
    4590:	b0 e0       	ldi	r27, 0x00	; 0
    4592:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <chipid.2327>
    4596:	90 93 25 28 	sts	0x2825, r25	; 0x802825 <chipid.2327+0x1>
    459a:	a0 93 26 28 	sts	0x2826, r26	; 0x802826 <chipid.2327+0x2>
    459e:	b0 93 27 28 	sts	0x2827, r27	; 0x802827 <chipid.2327+0x3>
    45a2:	30 c0       	rjmp	.+96     	; 0x4604 <nmi_get_chipid+0x17c>
    45a4:	82 eb       	ldi	r24, 0xB2	; 178
    45a6:	92 e0       	ldi	r25, 0x02	; 2
    45a8:	a0 e1       	ldi	r26, 0x10	; 16
    45aa:	b0 e0       	ldi	r27, 0x00	; 0
    45ac:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <chipid.2327>
    45b0:	90 93 25 28 	sts	0x2825, r25	; 0x802825 <chipid.2327+0x1>
    45b4:	a0 93 26 28 	sts	0x2826, r26	; 0x802826 <chipid.2327+0x2>
    45b8:	b0 93 27 28 	sts	0x2827, r27	; 0x802827 <chipid.2327+0x3>
    45bc:	23 c0       	rjmp	.+70     	; 0x4604 <nmi_get_chipid+0x17c>
    45be:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <chipid.2327>
    45c2:	90 91 25 28 	lds	r25, 0x2825	; 0x802825 <chipid.2327+0x1>
    45c6:	a0 91 26 28 	lds	r26, 0x2826	; 0x802826 <chipid.2327+0x2>
    45ca:	b0 91 27 28 	lds	r27, 0x2827	; 0x802827 <chipid.2327+0x3>
    45ce:	80 3f       	cpi	r24, 0xF0	; 240
    45d0:	91 05       	cpc	r25, r1
    45d2:	a0 41       	sbci	r26, 0x10	; 16
    45d4:	b1 05       	cpc	r27, r1
    45d6:	b1 f4       	brne	.+44     	; 0x4604 <nmi_get_chipid+0x17c>
    45d8:	44 e2       	ldi	r20, 0x24	; 36
    45da:	58 e2       	ldi	r21, 0x28	; 40
    45dc:	60 e0       	ldi	r22, 0x00	; 0
    45de:	70 e0       	ldi	r23, 0x00	; 0
    45e0:	8b e3       	ldi	r24, 0x3B	; 59
    45e2:	90 e0       	ldi	r25, 0x00	; 0
    45e4:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    45e8:	88 23       	and	r24, r24
    45ea:	61 f0       	breq	.+24     	; 0x4604 <nmi_get_chipid+0x17c>
    45ec:	10 92 24 28 	sts	0x2824, r1	; 0x802824 <chipid.2327>
    45f0:	10 92 25 28 	sts	0x2825, r1	; 0x802825 <chipid.2327+0x1>
    45f4:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <chipid.2327+0x2>
    45f8:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <chipid.2327+0x3>
    45fc:	80 e0       	ldi	r24, 0x00	; 0
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	dc 01       	movw	r26, r24
    4602:	2a c0       	rjmp	.+84     	; 0x4658 <nmi_get_chipid+0x1d0>
    4604:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <chipid.2327>
    4608:	90 91 25 28 	lds	r25, 0x2825	; 0x802825 <chipid.2327+0x1>
    460c:	a0 91 26 28 	lds	r26, 0x2826	; 0x802826 <chipid.2327+0x2>
    4610:	b0 91 27 28 	lds	r27, 0x2827	; 0x802827 <chipid.2327+0x3>
    4614:	a0 7f       	andi	r26, 0xF0	; 240
    4616:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <chipid.2327>
    461a:	90 93 25 28 	sts	0x2825, r25	; 0x802825 <chipid.2327+0x1>
    461e:	a0 93 26 28 	sts	0x2826, r26	; 0x802826 <chipid.2327+0x2>
    4622:	b0 93 27 28 	sts	0x2827, r27	; 0x802827 <chipid.2327+0x3>
    4626:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <chipid.2327>
    462a:	90 91 25 28 	lds	r25, 0x2825	; 0x802825 <chipid.2327+0x1>
    462e:	a0 91 26 28 	lds	r26, 0x2826	; 0x802826 <chipid.2327+0x2>
    4632:	b0 91 27 28 	lds	r27, 0x2827	; 0x802827 <chipid.2327+0x3>
    4636:	a5 60       	ori	r26, 0x05	; 5
    4638:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <chipid.2327>
    463c:	90 93 25 28 	sts	0x2825, r25	; 0x802825 <chipid.2327+0x1>
    4640:	a0 93 26 28 	sts	0x2826, r26	; 0x802826 <chipid.2327+0x2>
    4644:	b0 93 27 28 	sts	0x2827, r27	; 0x802827 <chipid.2327+0x3>
    4648:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <chipid.2327>
    464c:	90 91 25 28 	lds	r25, 0x2825	; 0x802825 <chipid.2327+0x1>
    4650:	a0 91 26 28 	lds	r26, 0x2826	; 0x802826 <chipid.2327+0x2>
    4654:	b0 91 27 28 	lds	r27, 0x2827	; 0x802827 <chipid.2327+0x3>
    4658:	bc 01       	movw	r22, r24
    465a:	cd 01       	movw	r24, r26
    465c:	24 96       	adiw	r28, 0x04	; 4
    465e:	cd bf       	out	0x3d, r28	; 61
    4660:	de bf       	out	0x3e, r29	; 62
    4662:	df 91       	pop	r29
    4664:	cf 91       	pop	r28
    4666:	08 95       	ret

00004668 <chip_sleep>:
    4668:	cf 93       	push	r28
    466a:	df 93       	push	r29
    466c:	cd b7       	in	r28, 0x3d	; 61
    466e:	de b7       	in	r29, 0x3e	; 62
    4670:	25 97       	sbiw	r28, 0x05	; 5
    4672:	cd bf       	out	0x3d, r28	; 61
    4674:	de bf       	out	0x3e, r29	; 62
    4676:	19 82       	std	Y+1, r1	; 0x01
    4678:	ce 01       	movw	r24, r28
    467a:	02 96       	adiw	r24, 0x02	; 2
    467c:	ac 01       	movw	r20, r24
    467e:	60 e1       	ldi	r22, 0x10	; 16
    4680:	70 e0       	ldi	r23, 0x00	; 0
    4682:	80 e0       	ldi	r24, 0x00	; 0
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    468a:	89 83       	std	Y+1, r24	; 0x01
    468c:	89 81       	ldd	r24, Y+1	; 0x01
    468e:	88 23       	and	r24, r24
    4690:	09 f0       	breq	.+2      	; 0x4694 <chip_sleep+0x2c>
    4692:	71 c0       	rjmp	.+226    	; 0x4776 <chip_sleep+0x10e>
    4694:	8a 81       	ldd	r24, Y+2	; 0x02
    4696:	9b 81       	ldd	r25, Y+3	; 0x03
    4698:	ac 81       	ldd	r26, Y+4	; 0x04
    469a:	bd 81       	ldd	r27, Y+5	; 0x05
    469c:	81 70       	andi	r24, 0x01	; 1
    469e:	99 27       	eor	r25, r25
    46a0:	aa 27       	eor	r26, r26
    46a2:	bb 27       	eor	r27, r27
    46a4:	89 2b       	or	r24, r25
    46a6:	8a 2b       	or	r24, r26
    46a8:	8b 2b       	or	r24, r27
    46aa:	09 f0       	breq	.+2      	; 0x46ae <chip_sleep+0x46>
    46ac:	e5 cf       	rjmp	.-54     	; 0x4678 <chip_sleep+0x10>
    46ae:	00 00       	nop
    46b0:	ce 01       	movw	r24, r28
    46b2:	02 96       	adiw	r24, 0x02	; 2
    46b4:	ac 01       	movw	r20, r24
    46b6:	61 e0       	ldi	r22, 0x01	; 1
    46b8:	70 e0       	ldi	r23, 0x00	; 0
    46ba:	80 e0       	ldi	r24, 0x00	; 0
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    46c2:	89 83       	std	Y+1, r24	; 0x01
    46c4:	89 81       	ldd	r24, Y+1	; 0x01
    46c6:	88 23       	and	r24, r24
    46c8:	09 f0       	breq	.+2      	; 0x46cc <chip_sleep+0x64>
    46ca:	57 c0       	rjmp	.+174    	; 0x477a <chip_sleep+0x112>
    46cc:	8a 81       	ldd	r24, Y+2	; 0x02
    46ce:	9b 81       	ldd	r25, Y+3	; 0x03
    46d0:	ac 81       	ldd	r26, Y+4	; 0x04
    46d2:	bd 81       	ldd	r27, Y+5	; 0x05
    46d4:	82 70       	andi	r24, 0x02	; 2
    46d6:	99 27       	eor	r25, r25
    46d8:	aa 27       	eor	r26, r26
    46da:	bb 27       	eor	r27, r27
    46dc:	89 2b       	or	r24, r25
    46de:	8a 2b       	or	r24, r26
    46e0:	8b 2b       	or	r24, r27
    46e2:	c9 f0       	breq	.+50     	; 0x4716 <chip_sleep+0xae>
    46e4:	8a 81       	ldd	r24, Y+2	; 0x02
    46e6:	9b 81       	ldd	r25, Y+3	; 0x03
    46e8:	ac 81       	ldd	r26, Y+4	; 0x04
    46ea:	bd 81       	ldd	r27, Y+5	; 0x05
    46ec:	8d 7f       	andi	r24, 0xFD	; 253
    46ee:	8a 83       	std	Y+2, r24	; 0x02
    46f0:	9b 83       	std	Y+3, r25	; 0x03
    46f2:	ac 83       	std	Y+4, r26	; 0x04
    46f4:	bd 83       	std	Y+5, r27	; 0x05
    46f6:	8a 81       	ldd	r24, Y+2	; 0x02
    46f8:	9b 81       	ldd	r25, Y+3	; 0x03
    46fa:	ac 81       	ldd	r26, Y+4	; 0x04
    46fc:	bd 81       	ldd	r27, Y+5	; 0x05
    46fe:	9c 01       	movw	r18, r24
    4700:	ad 01       	movw	r20, r26
    4702:	61 e0       	ldi	r22, 0x01	; 1
    4704:	70 e0       	ldi	r23, 0x00	; 0
    4706:	80 e0       	ldi	r24, 0x00	; 0
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    470e:	89 83       	std	Y+1, r24	; 0x01
    4710:	89 81       	ldd	r24, Y+1	; 0x01
    4712:	88 23       	and	r24, r24
    4714:	a1 f5       	brne	.+104    	; 0x477e <chip_sleep+0x116>
    4716:	ce 01       	movw	r24, r28
    4718:	02 96       	adiw	r24, 0x02	; 2
    471a:	ac 01       	movw	r20, r24
    471c:	6b e0       	ldi	r22, 0x0B	; 11
    471e:	70 e0       	ldi	r23, 0x00	; 0
    4720:	80 e0       	ldi	r24, 0x00	; 0
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    4728:	89 83       	std	Y+1, r24	; 0x01
    472a:	89 81       	ldd	r24, Y+1	; 0x01
    472c:	88 23       	and	r24, r24
    472e:	49 f5       	brne	.+82     	; 0x4782 <chip_sleep+0x11a>
    4730:	8a 81       	ldd	r24, Y+2	; 0x02
    4732:	9b 81       	ldd	r25, Y+3	; 0x03
    4734:	ac 81       	ldd	r26, Y+4	; 0x04
    4736:	bd 81       	ldd	r27, Y+5	; 0x05
    4738:	81 70       	andi	r24, 0x01	; 1
    473a:	99 27       	eor	r25, r25
    473c:	aa 27       	eor	r26, r26
    473e:	bb 27       	eor	r27, r27
    4740:	89 2b       	or	r24, r25
    4742:	8a 2b       	or	r24, r26
    4744:	8b 2b       	or	r24, r27
    4746:	f1 f0       	breq	.+60     	; 0x4784 <chip_sleep+0x11c>
    4748:	8a 81       	ldd	r24, Y+2	; 0x02
    474a:	9b 81       	ldd	r25, Y+3	; 0x03
    474c:	ac 81       	ldd	r26, Y+4	; 0x04
    474e:	bd 81       	ldd	r27, Y+5	; 0x05
    4750:	8e 7f       	andi	r24, 0xFE	; 254
    4752:	8a 83       	std	Y+2, r24	; 0x02
    4754:	9b 83       	std	Y+3, r25	; 0x03
    4756:	ac 83       	std	Y+4, r26	; 0x04
    4758:	bd 83       	std	Y+5, r27	; 0x05
    475a:	8a 81       	ldd	r24, Y+2	; 0x02
    475c:	9b 81       	ldd	r25, Y+3	; 0x03
    475e:	ac 81       	ldd	r26, Y+4	; 0x04
    4760:	bd 81       	ldd	r27, Y+5	; 0x05
    4762:	9c 01       	movw	r18, r24
    4764:	ad 01       	movw	r20, r26
    4766:	6b e0       	ldi	r22, 0x0B	; 11
    4768:	70 e0       	ldi	r23, 0x00	; 0
    476a:	80 e0       	ldi	r24, 0x00	; 0
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    4772:	89 83       	std	Y+1, r24	; 0x01
    4774:	07 c0       	rjmp	.+14     	; 0x4784 <chip_sleep+0x11c>
    4776:	00 00       	nop
    4778:	05 c0       	rjmp	.+10     	; 0x4784 <chip_sleep+0x11c>
    477a:	00 00       	nop
    477c:	03 c0       	rjmp	.+6      	; 0x4784 <chip_sleep+0x11c>
    477e:	00 00       	nop
    4780:	01 c0       	rjmp	.+2      	; 0x4784 <chip_sleep+0x11c>
    4782:	00 00       	nop
    4784:	89 81       	ldd	r24, Y+1	; 0x01
    4786:	25 96       	adiw	r28, 0x05	; 5
    4788:	cd bf       	out	0x3d, r28	; 61
    478a:	de bf       	out	0x3e, r29	; 62
    478c:	df 91       	pop	r29
    478e:	cf 91       	pop	r28
    4790:	08 95       	ret

00004792 <chip_wake>:
    4792:	cf 93       	push	r28
    4794:	df 93       	push	r29
    4796:	cd b7       	in	r28, 0x3d	; 61
    4798:	de b7       	in	r29, 0x3e	; 62
    479a:	2d 97       	sbiw	r28, 0x0d	; 13
    479c:	cd bf       	out	0x3d, r28	; 61
    479e:	de bf       	out	0x3e, r29	; 62
    47a0:	19 82       	std	Y+1, r1	; 0x01
    47a2:	1e 82       	std	Y+6, r1	; 0x06
    47a4:	1f 82       	std	Y+7, r1	; 0x07
    47a6:	18 86       	std	Y+8, r1	; 0x08
    47a8:	19 86       	std	Y+9, r1	; 0x09
    47aa:	1a 86       	std	Y+10, r1	; 0x0a
    47ac:	1b 86       	std	Y+11, r1	; 0x0b
    47ae:	1c 86       	std	Y+12, r1	; 0x0c
    47b0:	1d 86       	std	Y+13, r1	; 0x0d
    47b2:	1a 82       	std	Y+2, r1	; 0x02
    47b4:	1b 82       	std	Y+3, r1	; 0x03
    47b6:	1c 82       	std	Y+4, r1	; 0x04
    47b8:	1d 82       	std	Y+5, r1	; 0x05
    47ba:	ce 01       	movw	r24, r28
    47bc:	06 96       	adiw	r24, 0x06	; 6
    47be:	ac 01       	movw	r20, r24
    47c0:	6b e0       	ldi	r22, 0x0B	; 11
    47c2:	70 e0       	ldi	r23, 0x00	; 0
    47c4:	80 e0       	ldi	r24, 0x00	; 0
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    47cc:	89 83       	std	Y+1, r24	; 0x01
    47ce:	89 81       	ldd	r24, Y+1	; 0x01
    47d0:	88 23       	and	r24, r24
    47d2:	09 f0       	breq	.+2      	; 0x47d6 <chip_wake+0x44>
    47d4:	83 c0       	rjmp	.+262    	; 0x48dc <chip_wake+0x14a>
    47d6:	8e 81       	ldd	r24, Y+6	; 0x06
    47d8:	9f 81       	ldd	r25, Y+7	; 0x07
    47da:	a8 85       	ldd	r26, Y+8	; 0x08
    47dc:	b9 85       	ldd	r27, Y+9	; 0x09
    47de:	81 70       	andi	r24, 0x01	; 1
    47e0:	99 27       	eor	r25, r25
    47e2:	aa 27       	eor	r26, r26
    47e4:	bb 27       	eor	r27, r27
    47e6:	89 2b       	or	r24, r25
    47e8:	8a 2b       	or	r24, r26
    47ea:	8b 2b       	or	r24, r27
    47ec:	91 f4       	brne	.+36     	; 0x4812 <chip_wake+0x80>
    47ee:	8e 81       	ldd	r24, Y+6	; 0x06
    47f0:	9f 81       	ldd	r25, Y+7	; 0x07
    47f2:	a8 85       	ldd	r26, Y+8	; 0x08
    47f4:	b9 85       	ldd	r27, Y+9	; 0x09
    47f6:	81 60       	ori	r24, 0x01	; 1
    47f8:	9c 01       	movw	r18, r24
    47fa:	ad 01       	movw	r20, r26
    47fc:	6b e0       	ldi	r22, 0x0B	; 11
    47fe:	70 e0       	ldi	r23, 0x00	; 0
    4800:	80 e0       	ldi	r24, 0x00	; 0
    4802:	90 e0       	ldi	r25, 0x00	; 0
    4804:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    4808:	89 83       	std	Y+1, r24	; 0x01
    480a:	89 81       	ldd	r24, Y+1	; 0x01
    480c:	88 23       	and	r24, r24
    480e:	09 f0       	breq	.+2      	; 0x4812 <chip_wake+0x80>
    4810:	67 c0       	rjmp	.+206    	; 0x48e0 <chip_wake+0x14e>
    4812:	ce 01       	movw	r24, r28
    4814:	06 96       	adiw	r24, 0x06	; 6
    4816:	ac 01       	movw	r20, r24
    4818:	61 e0       	ldi	r22, 0x01	; 1
    481a:	70 e0       	ldi	r23, 0x00	; 0
    481c:	80 e0       	ldi	r24, 0x00	; 0
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    4824:	89 83       	std	Y+1, r24	; 0x01
    4826:	89 81       	ldd	r24, Y+1	; 0x01
    4828:	88 23       	and	r24, r24
    482a:	09 f0       	breq	.+2      	; 0x482e <chip_wake+0x9c>
    482c:	5b c0       	rjmp	.+182    	; 0x48e4 <chip_wake+0x152>
    482e:	8e 81       	ldd	r24, Y+6	; 0x06
    4830:	9f 81       	ldd	r25, Y+7	; 0x07
    4832:	a8 85       	ldd	r26, Y+8	; 0x08
    4834:	b9 85       	ldd	r27, Y+9	; 0x09
    4836:	82 70       	andi	r24, 0x02	; 2
    4838:	99 27       	eor	r25, r25
    483a:	aa 27       	eor	r26, r26
    483c:	bb 27       	eor	r27, r27
    483e:	89 2b       	or	r24, r25
    4840:	8a 2b       	or	r24, r26
    4842:	8b 2b       	or	r24, r27
    4844:	91 f4       	brne	.+36     	; 0x486a <chip_wake+0xd8>
    4846:	8e 81       	ldd	r24, Y+6	; 0x06
    4848:	9f 81       	ldd	r25, Y+7	; 0x07
    484a:	a8 85       	ldd	r26, Y+8	; 0x08
    484c:	b9 85       	ldd	r27, Y+9	; 0x09
    484e:	82 60       	ori	r24, 0x02	; 2
    4850:	9c 01       	movw	r18, r24
    4852:	ad 01       	movw	r20, r26
    4854:	61 e0       	ldi	r22, 0x01	; 1
    4856:	70 e0       	ldi	r23, 0x00	; 0
    4858:	80 e0       	ldi	r24, 0x00	; 0
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    4860:	89 83       	std	Y+1, r24	; 0x01
    4862:	89 81       	ldd	r24, Y+1	; 0x01
    4864:	88 23       	and	r24, r24
    4866:	09 f0       	breq	.+2      	; 0x486a <chip_wake+0xd8>
    4868:	3f c0       	rjmp	.+126    	; 0x48e8 <chip_wake+0x156>
    486a:	ce 01       	movw	r24, r28
    486c:	0a 96       	adiw	r24, 0x0a	; 10
    486e:	ac 01       	movw	r20, r24
    4870:	6f e0       	ldi	r22, 0x0F	; 15
    4872:	70 e0       	ldi	r23, 0x00	; 0
    4874:	80 e0       	ldi	r24, 0x00	; 0
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    487c:	89 83       	std	Y+1, r24	; 0x01
    487e:	89 81       	ldd	r24, Y+1	; 0x01
    4880:	88 23       	and	r24, r24
    4882:	a1 f5       	brne	.+104    	; 0x48ec <chip_wake+0x15a>
    4884:	8a 85       	ldd	r24, Y+10	; 0x0a
    4886:	9b 85       	ldd	r25, Y+11	; 0x0b
    4888:	ac 85       	ldd	r26, Y+12	; 0x0c
    488a:	bd 85       	ldd	r27, Y+13	; 0x0d
    488c:	84 70       	andi	r24, 0x04	; 4
    488e:	99 27       	eor	r25, r25
    4890:	aa 27       	eor	r26, r26
    4892:	bb 27       	eor	r27, r27
    4894:	89 2b       	or	r24, r25
    4896:	8a 2b       	or	r24, r26
    4898:	8b 2b       	or	r24, r27
    489a:	e1 f4       	brne	.+56     	; 0x48d4 <chip_wake+0x142>
    489c:	62 e0       	ldi	r22, 0x02	; 2
    489e:	70 e0       	ldi	r23, 0x00	; 0
    48a0:	80 e0       	ldi	r24, 0x00	; 0
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	0e 94 80 13 	call	0x2700	; 0x2700 <nm_bsp_sleep>
    48a8:	8a 81       	ldd	r24, Y+2	; 0x02
    48aa:	9b 81       	ldd	r25, Y+3	; 0x03
    48ac:	ac 81       	ldd	r26, Y+4	; 0x04
    48ae:	bd 81       	ldd	r27, Y+5	; 0x05
    48b0:	01 96       	adiw	r24, 0x01	; 1
    48b2:	a1 1d       	adc	r26, r1
    48b4:	b1 1d       	adc	r27, r1
    48b6:	8a 83       	std	Y+2, r24	; 0x02
    48b8:	9b 83       	std	Y+3, r25	; 0x03
    48ba:	ac 83       	std	Y+4, r26	; 0x04
    48bc:	bd 83       	std	Y+5, r27	; 0x05
    48be:	8a 81       	ldd	r24, Y+2	; 0x02
    48c0:	9b 81       	ldd	r25, Y+3	; 0x03
    48c2:	ac 81       	ldd	r26, Y+4	; 0x04
    48c4:	bd 81       	ldd	r27, Y+5	; 0x05
    48c6:	05 97       	sbiw	r24, 0x05	; 5
    48c8:	a1 05       	cpc	r26, r1
    48ca:	b1 05       	cpc	r27, r1
    48cc:	70 f2       	brcs	.-100    	; 0x486a <chip_wake+0xd8>
    48ce:	8c ef       	ldi	r24, 0xFC	; 252
    48d0:	89 83       	std	Y+1, r24	; 0x01
    48d2:	0d c0       	rjmp	.+26     	; 0x48ee <chip_wake+0x15c>
    48d4:	00 00       	nop
    48d6:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <nm_bus_reset>
    48da:	09 c0       	rjmp	.+18     	; 0x48ee <chip_wake+0x15c>
    48dc:	00 00       	nop
    48de:	07 c0       	rjmp	.+14     	; 0x48ee <chip_wake+0x15c>
    48e0:	00 00       	nop
    48e2:	05 c0       	rjmp	.+10     	; 0x48ee <chip_wake+0x15c>
    48e4:	00 00       	nop
    48e6:	03 c0       	rjmp	.+6      	; 0x48ee <chip_wake+0x15c>
    48e8:	00 00       	nop
    48ea:	01 c0       	rjmp	.+2      	; 0x48ee <chip_wake+0x15c>
    48ec:	00 00       	nop
    48ee:	89 81       	ldd	r24, Y+1	; 0x01
    48f0:	2d 96       	adiw	r28, 0x0d	; 13
    48f2:	cd bf       	out	0x3d, r28	; 61
    48f4:	de bf       	out	0x3e, r29	; 62
    48f6:	df 91       	pop	r29
    48f8:	cf 91       	pop	r28
    48fa:	08 95       	ret

000048fc <wait_for_bootrom>:

sint8 wait_for_bootrom(uint8 arg)
{
    48fc:	cf 93       	push	r28
    48fe:	df 93       	push	r29
    4900:	cd b7       	in	r28, 0x3d	; 61
    4902:	de b7       	in	r29, 0x3e	; 62
    4904:	62 97       	sbiw	r28, 0x12	; 18
    4906:	cd bf       	out	0x3d, r28	; 61
    4908:	de bf       	out	0x3e, r29	; 62
    490a:	8a 8b       	std	Y+18, r24	; 0x12
	sint8 ret = M2M_SUCCESS;
    490c:	1d 86       	std	Y+13, r1	; 0x0d
	uint32 reg = 0, cnt = 0;
    490e:	19 82       	std	Y+1, r1	; 0x01
    4910:	1a 82       	std	Y+2, r1	; 0x02
    4912:	1b 82       	std	Y+3, r1	; 0x03
    4914:	1c 82       	std	Y+4, r1	; 0x04
    4916:	1d 82       	std	Y+5, r1	; 0x05
    4918:	1e 82       	std	Y+6, r1	; 0x06
    491a:	1f 82       	std	Y+7, r1	; 0x07
    491c:	18 86       	std	Y+8, r1	; 0x08
	uint32 u32GpReg1 = 0;
    491e:	19 86       	std	Y+9, r1	; 0x09
    4920:	1a 86       	std	Y+10, r1	; 0x0a
    4922:	1b 86       	std	Y+11, r1	; 0x0b
    4924:	1c 86       	std	Y+12, r1	; 0x0c
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    4926:	82 e5       	ldi	r24, 0x52	; 82
    4928:	93 e1       	ldi	r25, 0x13	; 19
    492a:	dc 01       	movw	r26, r24
    492c:	8e 87       	std	Y+14, r24	; 0x0e
    492e:	9f 87       	std	Y+15, r25	; 0x0f
    4930:	a8 8b       	std	Y+16, r26	; 0x10
    4932:	b9 8b       	std	Y+17, r27	; 0x11
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    4934:	19 82       	std	Y+1, r1	; 0x01
    4936:	1a 82       	std	Y+2, r1	; 0x02
    4938:	1b 82       	std	Y+3, r1	; 0x03
    493a:	1c 82       	std	Y+4, r1	; 0x04
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    493c:	64 e1       	ldi	r22, 0x14	; 20
    493e:	70 e1       	ldi	r23, 0x10	; 16
    4940:	80 e0       	ldi	r24, 0x00	; 0
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <nm_read_reg>
    4948:	dc 01       	movw	r26, r24
    494a:	cb 01       	movw	r24, r22
    494c:	89 83       	std	Y+1, r24	; 0x01
    494e:	9a 83       	std	Y+2, r25	; 0x02
    4950:	ab 83       	std	Y+3, r26	; 0x03
    4952:	bc 83       	std	Y+4, r27	; 0x04
		if (reg & 0x80000000) {
    4954:	89 81       	ldd	r24, Y+1	; 0x01
    4956:	9a 81       	ldd	r25, Y+2	; 0x02
    4958:	ab 81       	ldd	r26, Y+3	; 0x03
    495a:	bc 81       	ldd	r27, Y+4	; 0x04
    495c:	bb 23       	and	r27, r27
    495e:	3c f0       	brlt	.+14     	; 0x496e <wait_for_bootrom+0x72>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    4960:	61 e0       	ldi	r22, 0x01	; 1
    4962:	70 e0       	ldi	r23, 0x00	; 0
    4964:	80 e0       	ldi	r24, 0x00	; 0
    4966:	90 e0       	ldi	r25, 0x00	; 0
    4968:	0e 94 80 13 	call	0x2700	; 0x2700 <nm_bsp_sleep>
	}
    496c:	e7 cf       	rjmp	.-50     	; 0x493c <wait_for_bootrom+0x40>

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
    496e:	00 00       	nop
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    4970:	6c eb       	ldi	r22, 0xBC	; 188
    4972:	77 e0       	ldi	r23, 0x07	; 7
    4974:	82 e0       	ldi	r24, 0x02	; 2
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <nm_read_reg>
    497c:	dc 01       	movw	r26, r24
    497e:	cb 01       	movw	r24, r22
    4980:	89 83       	std	Y+1, r24	; 0x01
    4982:	9a 83       	std	Y+2, r25	; 0x02
    4984:	ab 83       	std	Y+3, r26	; 0x03
    4986:	bc 83       	std	Y+4, r27	; 0x04
	reg &= 0x1;
    4988:	89 81       	ldd	r24, Y+1	; 0x01
    498a:	9a 81       	ldd	r25, Y+2	; 0x02
    498c:	ab 81       	ldd	r26, Y+3	; 0x03
    498e:	bc 81       	ldd	r27, Y+4	; 0x04
    4990:	81 70       	andi	r24, 0x01	; 1
    4992:	99 27       	eor	r25, r25
    4994:	aa 27       	eor	r26, r26
    4996:	bb 27       	eor	r27, r27
    4998:	89 83       	std	Y+1, r24	; 0x01
    499a:	9a 83       	std	Y+2, r25	; 0x02
    499c:	ab 83       	std	Y+3, r26	; 0x03
    499e:	bc 83       	std	Y+4, r27	; 0x04

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    49a0:	89 81       	ldd	r24, Y+1	; 0x01
    49a2:	9a 81       	ldd	r25, Y+2	; 0x02
    49a4:	ab 81       	ldd	r26, Y+3	; 0x03
    49a6:	bc 81       	ldd	r27, Y+4	; 0x04
    49a8:	89 2b       	or	r24, r25
    49aa:	8a 2b       	or	r24, r26
    49ac:	8b 2b       	or	r24, r27
    49ae:	51 f5       	brne	.+84     	; 0x4a04 <wait_for_bootrom+0x108>
	{
		reg = 0;
    49b0:	19 82       	std	Y+1, r1	; 0x01
    49b2:	1a 82       	std	Y+2, r1	; 0x02
    49b4:	1b 82       	std	Y+3, r1	; 0x03
    49b6:	1c 82       	std	Y+4, r1	; 0x04
		while(reg != M2M_FINISH_BOOT_ROM)
    49b8:	1c c0       	rjmp	.+56     	; 0x49f2 <wait_for_bootrom+0xf6>
		{
			nm_bsp_sleep(1);
    49ba:	61 e0       	ldi	r22, 0x01	; 1
    49bc:	70 e0       	ldi	r23, 0x00	; 0
    49be:	80 e0       	ldi	r24, 0x00	; 0
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	0e 94 80 13 	call	0x2700	; 0x2700 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
    49c6:	6c e0       	ldi	r22, 0x0C	; 12
    49c8:	70 e0       	ldi	r23, 0x00	; 0
    49ca:	cb 01       	movw	r24, r22
    49cc:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <nm_read_reg>
    49d0:	dc 01       	movw	r26, r24
    49d2:	cb 01       	movw	r24, r22
    49d4:	89 83       	std	Y+1, r24	; 0x01
    49d6:	9a 83       	std	Y+2, r25	; 0x02
    49d8:	ab 83       	std	Y+3, r26	; 0x03
    49da:	bc 83       	std	Y+4, r27	; 0x04

			if(++cnt > TIMEOUT)
    49dc:	8d 81       	ldd	r24, Y+5	; 0x05
    49de:	9e 81       	ldd	r25, Y+6	; 0x06
    49e0:	af 81       	ldd	r26, Y+7	; 0x07
    49e2:	b8 85       	ldd	r27, Y+8	; 0x08
    49e4:	01 96       	adiw	r24, 0x01	; 1
    49e6:	a1 1d       	adc	r26, r1
    49e8:	b1 1d       	adc	r27, r1
    49ea:	8d 83       	std	Y+5, r24	; 0x05
    49ec:	9e 83       	std	Y+6, r25	; 0x06
    49ee:	af 83       	std	Y+7, r26	; 0x07
    49f0:	b8 87       	std	Y+8, r27	; 0x08

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    49f2:	89 81       	ldd	r24, Y+1	; 0x01
    49f4:	9a 81       	ldd	r25, Y+2	; 0x02
    49f6:	ab 81       	ldd	r26, Y+3	; 0x03
    49f8:	bc 81       	ldd	r27, Y+4	; 0x04
    49fa:	8e 39       	cpi	r24, 0x9E	; 158
    49fc:	90 4d       	sbci	r25, 0xD0	; 208
    49fe:	ad 4a       	sbci	r26, 0xAD	; 173
    4a00:	b0 41       	sbci	r27, 0x10	; 16
    4a02:	d9 f6       	brne	.-74     	; 0x49ba <wait_for_bootrom+0xbe>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    4a04:	8a 89       	ldd	r24, Y+18	; 0x12
    4a06:	82 30       	cpi	r24, 0x02	; 2
    4a08:	a9 f4       	brne	.+42     	; 0x4a34 <wait_for_bootrom+0x138>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    4a0a:	2d e7       	ldi	r18, 0x7D	; 125
    4a0c:	35 ed       	ldi	r19, 0xD5	; 213
    4a0e:	4c e1       	ldi	r20, 0x1C	; 28
    4a10:	5c e3       	ldi	r21, 0x3C	; 60
    4a12:	6c ea       	ldi	r22, 0xAC	; 172
    4a14:	77 e0       	ldi	r23, 0x07	; 7
    4a16:	82 e0       	ldi	r24, 0x02	; 2
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
    4a1e:	20 e0       	ldi	r18, 0x00	; 0
    4a20:	30 e0       	ldi	r19, 0x00	; 0
    4a22:	40 e1       	ldi	r20, 0x10	; 16
    4a24:	50 e0       	ldi	r21, 0x00	; 0
    4a26:	6c e8       	ldi	r22, 0x8C	; 140
    4a28:	70 e1       	ldi	r23, 0x10	; 16
    4a2a:	80 e0       	ldi	r24, 0x00	; 0
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    4a32:	3b c0       	rjmp	.+118    	; 0x4aaa <wait_for_bootrom+0x1ae>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    4a34:	8a 89       	ldd	r24, Y+18	; 0x12
    4a36:	83 30       	cpi	r24, 0x03	; 3
    4a38:	a1 f4       	brne	.+40     	; 0x4a62 <wait_for_bootrom+0x166>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    4a3a:	2d e7       	ldi	r18, 0x7D	; 125
    4a3c:	35 ed       	ldi	r19, 0xD5	; 213
    4a3e:	4c e1       	ldi	r20, 0x1C	; 28
    4a40:	5c e3       	ldi	r21, 0x3C	; 60
    4a42:	6c ea       	ldi	r22, 0xAC	; 172
    4a44:	77 e0       	ldi	r23, 0x07	; 7
    4a46:	82 e0       	ldi	r24, 0x02	; 2
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
    4a4e:	20 e0       	ldi	r18, 0x00	; 0
    4a50:	30 e0       	ldi	r19, 0x00	; 0
    4a52:	a9 01       	movw	r20, r18
    4a54:	6c e8       	ldi	r22, 0x8C	; 140
    4a56:	70 e1       	ldi	r23, 0x10	; 16
    4a58:	80 e0       	ldi	r24, 0x00	; 0
    4a5a:	90 e0       	ldi	r25, 0x00	; 0
    4a5c:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    4a60:	24 c0       	rjmp	.+72     	; 0x4aaa <wait_for_bootrom+0x1ae>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    4a62:	8a 89       	ldd	r24, Y+18	; 0x12
    4a64:	84 30       	cpi	r24, 0x04	; 4
    4a66:	a9 f4       	brne	.+42     	; 0x4a92 <wait_for_bootrom+0x196>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    4a68:	80 e8       	ldi	r24, 0x80	; 128
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	a0 e0       	ldi	r26, 0x00	; 0
    4a6e:	b0 e0       	ldi	r27, 0x00	; 0
    4a70:	89 87       	std	Y+9, r24	; 0x09
    4a72:	9a 87       	std	Y+10, r25	; 0x0a
    4a74:	ab 87       	std	Y+11, r26	; 0x0b
    4a76:	bc 87       	std	Y+12, r27	; 0x0c
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    4a78:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a7a:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a7c:	a8 89       	ldd	r26, Y+16	; 0x10
    4a7e:	b9 89       	ldd	r27, Y+17	; 0x11
    4a80:	9c 01       	movw	r18, r24
    4a82:	ad 01       	movw	r20, r26
    4a84:	6c e8       	ldi	r22, 0x8C	; 140
    4a86:	70 e1       	ldi	r23, 0x10	; 16
    4a88:	80 e0       	ldi	r24, 0x00	; 0
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
    4a8c:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    4a90:	0c c0       	rjmp	.+24     	; 0x4aaa <wait_for_bootrom+0x1ae>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    4a92:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a94:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a96:	a8 89       	ldd	r26, Y+16	; 0x10
    4a98:	b9 89       	ldd	r27, Y+17	; 0x11
    4a9a:	9c 01       	movw	r18, r24
    4a9c:	ad 01       	movw	r20, r26
    4a9e:	6c e8       	ldi	r22, 0x8C	; 140
    4aa0:	70 e1       	ldi	r23, 0x10	; 16
    4aa2:	80 e0       	ldi	r24, 0x00	; 0
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    4aaa:	0e 94 44 22 	call	0x4488	; 0x4488 <nmi_get_chipid>
    4aae:	dc 01       	movw	r26, r24
    4ab0:	cb 01       	movw	r24, r22
    4ab2:	9f 70       	andi	r25, 0x0F	; 15
    4ab4:	aa 27       	eor	r26, r26
    4ab6:	bb 27       	eor	r27, r27
    4ab8:	80 3a       	cpi	r24, 0xA0	; 160
    4aba:	93 40       	sbci	r25, 0x03	; 3
    4abc:	a1 05       	cpc	r26, r1
    4abe:	b1 05       	cpc	r27, r1
    4ac0:	50 f0       	brcs	.+20     	; 0x4ad6 <wait_for_bootrom+0x1da>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    4ac2:	89 85       	ldd	r24, Y+9	; 0x09
    4ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ac6:	ab 85       	ldd	r26, Y+11	; 0x0b
    4ac8:	bc 85       	ldd	r27, Y+12	; 0x0c
    4aca:	82 60       	ori	r24, 0x02	; 2
    4acc:	bc 01       	movw	r22, r24
    4ace:	cd 01       	movw	r24, r26
    4ad0:	0e 94 88 21 	call	0x4310	; 0x4310 <chip_apply_conf>
    4ad4:	08 c0       	rjmp	.+16     	; 0x4ae6 <wait_for_bootrom+0x1ea>
	} else {
		chip_apply_conf(u32GpReg1);
    4ad6:	89 85       	ldd	r24, Y+9	; 0x09
    4ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ada:	ab 85       	ldd	r26, Y+11	; 0x0b
    4adc:	bc 85       	ldd	r27, Y+12	; 0x0c
    4ade:	bc 01       	movw	r22, r24
    4ae0:	cd 01       	movw	r24, r26
    4ae2:	0e 94 88 21 	call	0x4310	; 0x4310 <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    4ae6:	21 e6       	ldi	r18, 0x61	; 97
    4ae8:	3f e2       	ldi	r19, 0x2F	; 47
    4aea:	42 e5       	ldi	r20, 0x52	; 82
    4aec:	5f ee       	ldi	r21, 0xEF	; 239
    4aee:	6c e0       	ldi	r22, 0x0C	; 12
    4af0:	70 e0       	ldi	r23, 0x00	; 0
    4af2:	cb 01       	movw	r24, r22
    4af4:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    4af8:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    4afa:	62 96       	adiw	r28, 0x12	; 18
    4afc:	cd bf       	out	0x3d, r28	; 61
    4afe:	de bf       	out	0x3e, r29	; 62
    4b00:	df 91       	pop	r29
    4b02:	cf 91       	pop	r28
    4b04:	08 95       	ret

00004b06 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    4b06:	cf 93       	push	r28
    4b08:	df 93       	push	r29
    4b0a:	cd b7       	in	r28, 0x3d	; 61
    4b0c:	de b7       	in	r29, 0x3e	; 62
    4b0e:	66 97       	sbiw	r28, 0x16	; 22
    4b10:	cd bf       	out	0x3d, r28	; 61
    4b12:	de bf       	out	0x3e, r29	; 62
    4b14:	8e 8b       	std	Y+22, r24	; 0x16
	sint8 ret = M2M_SUCCESS;
    4b16:	19 82       	std	Y+1, r1	; 0x01
	uint32 reg = 0, cnt = 0;
    4b18:	1a 82       	std	Y+2, r1	; 0x02
    4b1a:	1b 82       	std	Y+3, r1	; 0x03
    4b1c:	1c 82       	std	Y+4, r1	; 0x04
    4b1e:	1d 82       	std	Y+5, r1	; 0x05
    4b20:	1e 82       	std	Y+6, r1	; 0x06
    4b22:	1f 82       	std	Y+7, r1	; 0x07
    4b24:	18 86       	std	Y+8, r1	; 0x08
    4b26:	19 86       	std	Y+9, r1	; 0x09
	uint32 u32Timeout = TIMEOUT;
    4b28:	8f ef       	ldi	r24, 0xFF	; 255
    4b2a:	9f ef       	ldi	r25, 0xFF	; 255
    4b2c:	dc 01       	movw	r26, r24
    4b2e:	8a 87       	std	Y+10, r24	; 0x0a
    4b30:	9b 87       	std	Y+11, r25	; 0x0b
    4b32:	ac 87       	std	Y+12, r26	; 0x0c
    4b34:	bd 87       	std	Y+13, r27	; 0x0d
	volatile uint32 regAddress = NMI_STATE_REG;
    4b36:	8c e8       	ldi	r24, 0x8C	; 140
    4b38:	90 e1       	ldi	r25, 0x10	; 16
    4b3a:	a0 e0       	ldi	r26, 0x00	; 0
    4b3c:	b0 e0       	ldi	r27, 0x00	; 0
    4b3e:	8e 87       	std	Y+14, r24	; 0x0e
    4b40:	9f 87       	std	Y+15, r25	; 0x0f
    4b42:	a8 8b       	std	Y+16, r26	; 0x10
    4b44:	b9 8b       	std	Y+17, r27	; 0x11
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    4b46:	86 e3       	ldi	r24, 0x36	; 54
    4b48:	96 e2       	ldi	r25, 0x26	; 38
    4b4a:	a3 e5       	ldi	r26, 0x53	; 83
    4b4c:	b2 e0       	ldi	r27, 0x02	; 2
    4b4e:	8a 8b       	std	Y+18, r24	; 0x12
    4b50:	9b 8b       	std	Y+19, r25	; 0x13
    4b52:	ac 8b       	std	Y+20, r26	; 0x14
    4b54:	bd 8b       	std	Y+21, r27	; 0x15
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    4b56:	8e 89       	ldd	r24, Y+22	; 0x16
    4b58:	82 30       	cpi	r24, 0x02	; 2
    4b5a:	21 f0       	breq	.+8      	; 0x4b64 <wait_for_firmware_start+0x5e>
    4b5c:	8e 89       	ldd	r24, Y+22	; 0x16
    4b5e:	83 30       	cpi	r24, 0x03	; 3
    4b60:	09 f0       	breq	.+2      	; 0x4b64 <wait_for_firmware_start+0x5e>
    4b62:	40 c0       	rjmp	.+128    	; 0x4be4 <wait_for_firmware_start+0xde>
		regAddress = NMI_REV_REG;
    4b64:	8c ea       	ldi	r24, 0xAC	; 172
    4b66:	97 e0       	ldi	r25, 0x07	; 7
    4b68:	a2 e0       	ldi	r26, 0x02	; 2
    4b6a:	b0 e0       	ldi	r27, 0x00	; 0
    4b6c:	8e 87       	std	Y+14, r24	; 0x0e
    4b6e:	9f 87       	std	Y+15, r25	; 0x0f
    4b70:	a8 8b       	std	Y+16, r26	; 0x10
    4b72:	b9 8b       	std	Y+17, r27	; 0x11
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    4b74:	83 ec       	ldi	r24, 0xC3	; 195
    4b76:	91 ec       	ldi	r25, 0xC1	; 193
    4b78:	ad e5       	ldi	r26, 0x5D	; 93
    4b7a:	b7 ed       	ldi	r27, 0xD7	; 215
    4b7c:	8a 8b       	std	Y+18, r24	; 0x12
    4b7e:	9b 8b       	std	Y+19, r25	; 0x13
    4b80:	ac 8b       	std	Y+20, r26	; 0x14
    4b82:	bd 8b       	std	Y+21, r27	; 0x15
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    4b84:	2f c0       	rjmp	.+94     	; 0x4be4 <wait_for_firmware_start+0xde>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    4b86:	62 e0       	ldi	r22, 0x02	; 2
    4b88:	70 e0       	ldi	r23, 0x00	; 0
    4b8a:	80 e0       	ldi	r24, 0x00	; 0
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	0e 94 80 13 	call	0x2700	; 0x2700 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    4b92:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b94:	9f 85       	ldd	r25, Y+15	; 0x0f
    4b96:	a8 89       	ldd	r26, Y+16	; 0x10
    4b98:	b9 89       	ldd	r27, Y+17	; 0x11
    4b9a:	bc 01       	movw	r22, r24
    4b9c:	cd 01       	movw	r24, r26
    4b9e:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <nm_read_reg>
    4ba2:	dc 01       	movw	r26, r24
    4ba4:	cb 01       	movw	r24, r22
    4ba6:	8a 83       	std	Y+2, r24	; 0x02
    4ba8:	9b 83       	std	Y+3, r25	; 0x03
    4baa:	ac 83       	std	Y+4, r26	; 0x04
    4bac:	bd 83       	std	Y+5, r27	; 0x05
		if(++cnt >= u32Timeout)
    4bae:	8e 81       	ldd	r24, Y+6	; 0x06
    4bb0:	9f 81       	ldd	r25, Y+7	; 0x07
    4bb2:	a8 85       	ldd	r26, Y+8	; 0x08
    4bb4:	b9 85       	ldd	r27, Y+9	; 0x09
    4bb6:	01 96       	adiw	r24, 0x01	; 1
    4bb8:	a1 1d       	adc	r26, r1
    4bba:	b1 1d       	adc	r27, r1
    4bbc:	8e 83       	std	Y+6, r24	; 0x06
    4bbe:	9f 83       	std	Y+7, r25	; 0x07
    4bc0:	a8 87       	std	Y+8, r26	; 0x08
    4bc2:	b9 87       	std	Y+9, r27	; 0x09
    4bc4:	2e 81       	ldd	r18, Y+6	; 0x06
    4bc6:	3f 81       	ldd	r19, Y+7	; 0x07
    4bc8:	48 85       	ldd	r20, Y+8	; 0x08
    4bca:	59 85       	ldd	r21, Y+9	; 0x09
    4bcc:	8a 85       	ldd	r24, Y+10	; 0x0a
    4bce:	9b 85       	ldd	r25, Y+11	; 0x0b
    4bd0:	ac 85       	ldd	r26, Y+12	; 0x0c
    4bd2:	bd 85       	ldd	r27, Y+13	; 0x0d
    4bd4:	28 17       	cp	r18, r24
    4bd6:	39 07       	cpc	r19, r25
    4bd8:	4a 07       	cpc	r20, r26
    4bda:	5b 07       	cpc	r21, r27
    4bdc:	18 f0       	brcs	.+6      	; 0x4be4 <wait_for_firmware_start+0xde>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    4bde:	8b ef       	ldi	r24, 0xFB	; 251
    4be0:	89 83       	std	Y+1, r24	; 0x01
			goto ERR;
    4be2:	1f c0       	rjmp	.+62     	; 0x4c22 <wait_for_firmware_start+0x11c>
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    4be4:	2a 89       	ldd	r18, Y+18	; 0x12
    4be6:	3b 89       	ldd	r19, Y+19	; 0x13
    4be8:	4c 89       	ldd	r20, Y+20	; 0x14
    4bea:	5d 89       	ldd	r21, Y+21	; 0x15
    4bec:	8a 81       	ldd	r24, Y+2	; 0x02
    4bee:	9b 81       	ldd	r25, Y+3	; 0x03
    4bf0:	ac 81       	ldd	r26, Y+4	; 0x04
    4bf2:	bd 81       	ldd	r27, Y+5	; 0x05
    4bf4:	28 17       	cp	r18, r24
    4bf6:	39 07       	cpc	r19, r25
    4bf8:	4a 07       	cpc	r20, r26
    4bfa:	5b 07       	cpc	r21, r27
    4bfc:	21 f6       	brne	.-120    	; 0x4b86 <wait_for_firmware_start+0x80>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    4bfe:	8a 89       	ldd	r24, Y+18	; 0x12
    4c00:	9b 89       	ldd	r25, Y+19	; 0x13
    4c02:	ac 89       	ldd	r26, Y+20	; 0x14
    4c04:	bd 89       	ldd	r27, Y+21	; 0x15
    4c06:	86 33       	cpi	r24, 0x36	; 54
    4c08:	96 42       	sbci	r25, 0x26	; 38
    4c0a:	a3 45       	sbci	r26, 0x53	; 83
    4c0c:	b2 40       	sbci	r27, 0x02	; 2
    4c0e:	49 f4       	brne	.+18     	; 0x4c22 <wait_for_firmware_start+0x11c>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    4c10:	20 e0       	ldi	r18, 0x00	; 0
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	a9 01       	movw	r20, r18
    4c16:	6c e8       	ldi	r22, 0x8C	; 140
    4c18:	70 e1       	ldi	r23, 0x10	; 16
    4c1a:	80 e0       	ldi	r24, 0x00	; 0
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
	}
ERR:
	return ret;
    4c22:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c24:	66 96       	adiw	r28, 0x16	; 22
    4c26:	cd bf       	out	0x3d, r28	; 61
    4c28:	de bf       	out	0x3e, r29	; 62
    4c2a:	df 91       	pop	r29
    4c2c:	cf 91       	pop	r28
    4c2e:	08 95       	ret

00004c30 <chip_deinit>:

sint8 chip_deinit(void)
{
    4c30:	cf 93       	push	r28
    4c32:	df 93       	push	r29
    4c34:	cd b7       	in	r28, 0x3d	; 61
    4c36:	de b7       	in	r29, 0x3e	; 62
    4c38:	25 97       	sbiw	r28, 0x05	; 5
    4c3a:	cd bf       	out	0x3d, r28	; 61
    4c3c:	de bf       	out	0x3e, r29	; 62
	uint32 reg = 0;
    4c3e:	1a 82       	std	Y+2, r1	; 0x02
    4c40:	1b 82       	std	Y+3, r1	; 0x03
    4c42:	1c 82       	std	Y+4, r1	; 0x04
    4c44:	1d 82       	std	Y+5, r1	; 0x05
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    4c46:	ce 01       	movw	r24, r28
    4c48:	02 96       	adiw	r24, 0x02	; 2
    4c4a:	ac 01       	movw	r20, r24
    4c4c:	60 e0       	ldi	r22, 0x00	; 0
    4c4e:	74 e1       	ldi	r23, 0x14	; 20
    4c50:	80 e0       	ldi	r24, 0x00	; 0
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    4c58:	89 83       	std	Y+1, r24	; 0x01
	if (ret != M2M_SUCCESS) {
    4c5a:	89 81       	ldd	r24, Y+1	; 0x01
    4c5c:	88 23       	and	r24, r24
    4c5e:	b9 f4       	brne	.+46     	; 0x4c8e <chip_deinit+0x5e>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    4c60:	8a 81       	ldd	r24, Y+2	; 0x02
    4c62:	9b 81       	ldd	r25, Y+3	; 0x03
    4c64:	ac 81       	ldd	r26, Y+4	; 0x04
    4c66:	bd 81       	ldd	r27, Y+5	; 0x05
    4c68:	9b 7f       	andi	r25, 0xFB	; 251
    4c6a:	8a 83       	std	Y+2, r24	; 0x02
    4c6c:	9b 83       	std	Y+3, r25	; 0x03
    4c6e:	ac 83       	std	Y+4, r26	; 0x04
    4c70:	bd 83       	std	Y+5, r27	; 0x05
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    4c72:	8a 81       	ldd	r24, Y+2	; 0x02
    4c74:	9b 81       	ldd	r25, Y+3	; 0x03
    4c76:	ac 81       	ldd	r26, Y+4	; 0x04
    4c78:	bd 81       	ldd	r27, Y+5	; 0x05
    4c7a:	9c 01       	movw	r18, r24
    4c7c:	ad 01       	movw	r20, r26
    4c7e:	60 e0       	ldi	r22, 0x00	; 0
    4c80:	74 e1       	ldi	r23, 0x14	; 20
    4c82:	80 e0       	ldi	r24, 0x00	; 0
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    4c8a:	89 83       	std	Y+1, r24	; 0x01
    4c8c:	01 c0       	rjmp	.+2      	; 0x4c90 <chip_deinit+0x60>
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
	if (ret != M2M_SUCCESS) {
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
    4c8e:	00 00       	nop
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}

ERR1:
	return ret;
    4c90:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c92:	25 96       	adiw	r28, 0x05	; 5
    4c94:	cd bf       	out	0x3d, r28	; 61
    4c96:	de bf       	out	0x3e, r29	; 62
    4c98:	df 91       	pop	r29
    4c9a:	cf 91       	pop	r28
    4c9c:	08 95       	ret

00004c9e <nm_bus_iface_init>:
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
	ret = nm_uart_reconfigure(ptr);
#endif
	return ret;
}
    4c9e:	cf 93       	push	r28
    4ca0:	df 93       	push	r29
    4ca2:	00 d0       	rcall	.+0      	; 0x4ca4 <nm_bus_iface_init+0x6>
    4ca4:	1f 92       	push	r1
    4ca6:	cd b7       	in	r28, 0x3d	; 61
    4ca8:	de b7       	in	r29, 0x3e	; 62
    4caa:	8a 83       	std	Y+2, r24	; 0x02
    4cac:	9b 83       	std	Y+3, r25	; 0x03
    4cae:	19 82       	std	Y+1, r1	; 0x01
    4cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    4cb4:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <nm_bus_init>
    4cb8:	89 83       	std	Y+1, r24	; 0x01
    4cba:	89 81       	ldd	r24, Y+1	; 0x01
    4cbc:	23 96       	adiw	r28, 0x03	; 3
    4cbe:	cd bf       	out	0x3d, r28	; 61
    4cc0:	de bf       	out	0x3e, r29	; 62
    4cc2:	df 91       	pop	r29
    4cc4:	cf 91       	pop	r28
    4cc6:	08 95       	ret

00004cc8 <nm_bus_iface_deinit>:
    4cc8:	cf 93       	push	r28
    4cca:	df 93       	push	r29
    4ccc:	1f 92       	push	r1
    4cce:	cd b7       	in	r28, 0x3d	; 61
    4cd0:	de b7       	in	r29, 0x3e	; 62
    4cd2:	19 82       	std	Y+1, r1	; 0x01
    4cd4:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <nm_bus_deinit>
    4cd8:	89 83       	std	Y+1, r24	; 0x01
    4cda:	89 81       	ldd	r24, Y+1	; 0x01
    4cdc:	0f 90       	pop	r0
    4cde:	df 91       	pop	r29
    4ce0:	cf 91       	pop	r28
    4ce2:	08 95       	ret

00004ce4 <nm_bus_reset>:
    4ce4:	cf 93       	push	r28
    4ce6:	df 93       	push	r29
    4ce8:	1f 92       	push	r1
    4cea:	cd b7       	in	r28, 0x3d	; 61
    4cec:	de b7       	in	r29, 0x3e	; 62
    4cee:	19 82       	std	Y+1, r1	; 0x01
    4cf0:	0e 94 16 30 	call	0x602c	; 0x602c <nm_spi_reset>
    4cf4:	0f 90       	pop	r0
    4cf6:	df 91       	pop	r29
    4cf8:	cf 91       	pop	r28
    4cfa:	08 95       	ret

00004cfc <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    4cfc:	cf 93       	push	r28
    4cfe:	df 93       	push	r29
    4d00:	00 d0       	rcall	.+0      	; 0x4d02 <nm_read_reg+0x6>
    4d02:	00 d0       	rcall	.+0      	; 0x4d04 <nm_read_reg+0x8>
    4d04:	cd b7       	in	r28, 0x3d	; 61
    4d06:	de b7       	in	r29, 0x3e	; 62
    4d08:	69 83       	std	Y+1, r22	; 0x01
    4d0a:	7a 83       	std	Y+2, r23	; 0x02
    4d0c:	8b 83       	std	Y+3, r24	; 0x03
    4d0e:	9c 83       	std	Y+4, r25	; 0x04
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    4d10:	89 81       	ldd	r24, Y+1	; 0x01
    4d12:	9a 81       	ldd	r25, Y+2	; 0x02
    4d14:	ab 81       	ldd	r26, Y+3	; 0x03
    4d16:	bc 81       	ldd	r27, Y+4	; 0x04
    4d18:	bc 01       	movw	r22, r24
    4d1a:	cd 01       	movw	r24, r26
    4d1c:	0e 94 b6 30 	call	0x616c	; 0x616c <nm_spi_read_reg>
    4d20:	dc 01       	movw	r26, r24
    4d22:	cb 01       	movw	r24, r22
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    4d24:	bc 01       	movw	r22, r24
    4d26:	cd 01       	movw	r24, r26
    4d28:	24 96       	adiw	r28, 0x04	; 4
    4d2a:	cd bf       	out	0x3d, r28	; 61
    4d2c:	de bf       	out	0x3e, r29	; 62
    4d2e:	df 91       	pop	r29
    4d30:	cf 91       	pop	r28
    4d32:	08 95       	ret

00004d34 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    4d34:	cf 93       	push	r28
    4d36:	df 93       	push	r29
    4d38:	cd b7       	in	r28, 0x3d	; 61
    4d3a:	de b7       	in	r29, 0x3e	; 62
    4d3c:	26 97       	sbiw	r28, 0x06	; 6
    4d3e:	cd bf       	out	0x3d, r28	; 61
    4d40:	de bf       	out	0x3e, r29	; 62
    4d42:	69 83       	std	Y+1, r22	; 0x01
    4d44:	7a 83       	std	Y+2, r23	; 0x02
    4d46:	8b 83       	std	Y+3, r24	; 0x03
    4d48:	9c 83       	std	Y+4, r25	; 0x04
    4d4a:	4d 83       	std	Y+5, r20	; 0x05
    4d4c:	5e 83       	std	Y+6, r21	; 0x06
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    4d4e:	2d 81       	ldd	r18, Y+5	; 0x05
    4d50:	3e 81       	ldd	r19, Y+6	; 0x06
    4d52:	89 81       	ldd	r24, Y+1	; 0x01
    4d54:	9a 81       	ldd	r25, Y+2	; 0x02
    4d56:	ab 81       	ldd	r26, Y+3	; 0x03
    4d58:	bc 81       	ldd	r27, Y+4	; 0x04
    4d5a:	a9 01       	movw	r20, r18
    4d5c:	bc 01       	movw	r22, r24
    4d5e:	cd 01       	movw	r24, r26
    4d60:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <nm_spi_read_reg_with_ret>
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    4d64:	26 96       	adiw	r28, 0x06	; 6
    4d66:	cd bf       	out	0x3d, r28	; 61
    4d68:	de bf       	out	0x3e, r29	; 62
    4d6a:	df 91       	pop	r29
    4d6c:	cf 91       	pop	r28
    4d6e:	08 95       	ret

00004d70 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    4d70:	cf 93       	push	r28
    4d72:	df 93       	push	r29
    4d74:	cd b7       	in	r28, 0x3d	; 61
    4d76:	de b7       	in	r29, 0x3e	; 62
    4d78:	28 97       	sbiw	r28, 0x08	; 8
    4d7a:	cd bf       	out	0x3d, r28	; 61
    4d7c:	de bf       	out	0x3e, r29	; 62
    4d7e:	69 83       	std	Y+1, r22	; 0x01
    4d80:	7a 83       	std	Y+2, r23	; 0x02
    4d82:	8b 83       	std	Y+3, r24	; 0x03
    4d84:	9c 83       	std	Y+4, r25	; 0x04
    4d86:	2d 83       	std	Y+5, r18	; 0x05
    4d88:	3e 83       	std	Y+6, r19	; 0x06
    4d8a:	4f 83       	std	Y+7, r20	; 0x07
    4d8c:	58 87       	std	Y+8, r21	; 0x08
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    4d8e:	2d 81       	ldd	r18, Y+5	; 0x05
    4d90:	3e 81       	ldd	r19, Y+6	; 0x06
    4d92:	4f 81       	ldd	r20, Y+7	; 0x07
    4d94:	58 85       	ldd	r21, Y+8	; 0x08
    4d96:	89 81       	ldd	r24, Y+1	; 0x01
    4d98:	9a 81       	ldd	r25, Y+2	; 0x02
    4d9a:	ab 81       	ldd	r26, Y+3	; 0x03
    4d9c:	bc 81       	ldd	r27, Y+4	; 0x04
    4d9e:	bc 01       	movw	r22, r24
    4da0:	cd 01       	movw	r24, r26
    4da2:	0e 94 00 31 	call	0x6200	; 0x6200 <nm_spi_write_reg>
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    4da6:	28 96       	adiw	r28, 0x08	; 8
    4da8:	cd bf       	out	0x3d, r28	; 61
    4daa:	de bf       	out	0x3e, r29	; 62
    4dac:	df 91       	pop	r29
    4dae:	cf 91       	pop	r28
    4db0:	08 95       	ret

00004db2 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4db2:	cf 93       	push	r28
    4db4:	df 93       	push	r29
    4db6:	cd b7       	in	r28, 0x3d	; 61
    4db8:	de b7       	in	r29, 0x3e	; 62
    4dba:	28 97       	sbiw	r28, 0x08	; 8
    4dbc:	cd bf       	out	0x3d, r28	; 61
    4dbe:	de bf       	out	0x3e, r29	; 62
    4dc0:	69 83       	std	Y+1, r22	; 0x01
    4dc2:	7a 83       	std	Y+2, r23	; 0x02
    4dc4:	8b 83       	std	Y+3, r24	; 0x03
    4dc6:	9c 83       	std	Y+4, r25	; 0x04
    4dc8:	4d 83       	std	Y+5, r20	; 0x05
    4dca:	5e 83       	std	Y+6, r21	; 0x06
    4dcc:	2f 83       	std	Y+7, r18	; 0x07
    4dce:	38 87       	std	Y+8, r19	; 0x08
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    4dd0:	2f 81       	ldd	r18, Y+7	; 0x07
    4dd2:	38 85       	ldd	r19, Y+8	; 0x08
    4dd4:	4d 81       	ldd	r20, Y+5	; 0x05
    4dd6:	5e 81       	ldd	r21, Y+6	; 0x06
    4dd8:	89 81       	ldd	r24, Y+1	; 0x01
    4dda:	9a 81       	ldd	r25, Y+2	; 0x02
    4ddc:	ab 81       	ldd	r26, Y+3	; 0x03
    4dde:	bc 81       	ldd	r27, Y+4	; 0x04
    4de0:	bc 01       	movw	r22, r24
    4de2:	cd 01       	movw	r24, r26
    4de4:	0e 94 2a 31 	call	0x6254	; 0x6254 <nm_spi_read_block>
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    4de8:	28 96       	adiw	r28, 0x08	; 8
    4dea:	cd bf       	out	0x3d, r28	; 61
    4dec:	de bf       	out	0x3e, r29	; 62
    4dee:	df 91       	pop	r29
    4df0:	cf 91       	pop	r28
    4df2:	08 95       	ret

00004df4 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    4df4:	ef 92       	push	r14
    4df6:	ff 92       	push	r15
    4df8:	0f 93       	push	r16
    4dfa:	1f 93       	push	r17
    4dfc:	cf 93       	push	r28
    4dfe:	df 93       	push	r29
    4e00:	cd b7       	in	r28, 0x3d	; 61
    4e02:	de b7       	in	r29, 0x3e	; 62
    4e04:	61 97       	sbiw	r28, 0x11	; 17
    4e06:	cd bf       	out	0x3d, r28	; 61
    4e08:	de bf       	out	0x3e, r29	; 62
    4e0a:	68 87       	std	Y+8, r22	; 0x08
    4e0c:	79 87       	std	Y+9, r23	; 0x09
    4e0e:	8a 87       	std	Y+10, r24	; 0x0a
    4e10:	9b 87       	std	Y+11, r25	; 0x0b
    4e12:	4c 87       	std	Y+12, r20	; 0x0c
    4e14:	5d 87       	std	Y+13, r21	; 0x0d
    4e16:	0e 87       	std	Y+14, r16	; 0x0e
    4e18:	1f 87       	std	Y+15, r17	; 0x0f
    4e1a:	28 8b       	std	Y+16, r18	; 0x10
    4e1c:	39 8b       	std	Y+17, r19	; 0x11
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    4e1e:	80 91 0b 28 	lds	r24, 0x280B	; 0x80280b <egstrNmBusCapabilities>
    4e22:	90 91 0c 28 	lds	r25, 0x280C	; 0x80280c <egstrNmBusCapabilities+0x1>
    4e26:	08 97       	sbiw	r24, 0x08	; 8
    4e28:	8e 83       	std	Y+6, r24	; 0x06
    4e2a:	9f 83       	std	Y+7, r25	; 0x07
	uint32 off = 0;
    4e2c:	19 82       	std	Y+1, r1	; 0x01
    4e2e:	1a 82       	std	Y+2, r1	; 0x02
    4e30:	1b 82       	std	Y+3, r1	; 0x03
    4e32:	1c 82       	std	Y+4, r1	; 0x04
	sint8 s8Ret = M2M_SUCCESS;
    4e34:	1d 82       	std	Y+5, r1	; 0x05

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    4e36:	8e 81       	ldd	r24, Y+6	; 0x06
    4e38:	9f 81       	ldd	r25, Y+7	; 0x07
    4e3a:	9c 01       	movw	r18, r24
    4e3c:	40 e0       	ldi	r20, 0x00	; 0
    4e3e:	50 e0       	ldi	r21, 0x00	; 0
    4e40:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e42:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e44:	a8 89       	ldd	r26, Y+16	; 0x10
    4e46:	b9 89       	ldd	r27, Y+17	; 0x11
    4e48:	28 17       	cp	r18, r24
    4e4a:	39 07       	cpc	r19, r25
    4e4c:	4a 07       	cpc	r20, r26
    4e4e:	5b 07       	cpc	r21, r27
    4e50:	b8 f0       	brcs	.+46     	; 0x4e80 <nm_read_block+0x8c>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    4e52:	6e 85       	ldd	r22, Y+14	; 0x0e
    4e54:	7f 85       	ldd	r23, Y+15	; 0x0f
    4e56:	89 81       	ldd	r24, Y+1	; 0x01
    4e58:	9a 81       	ldd	r25, Y+2	; 0x02
    4e5a:	2c 85       	ldd	r18, Y+12	; 0x0c
    4e5c:	3d 85       	ldd	r19, Y+13	; 0x0d
    4e5e:	a9 01       	movw	r20, r18
    4e60:	48 0f       	add	r20, r24
    4e62:	59 1f       	adc	r21, r25
    4e64:	88 85       	ldd	r24, Y+8	; 0x08
    4e66:	99 85       	ldd	r25, Y+9	; 0x09
    4e68:	aa 85       	ldd	r26, Y+10	; 0x0a
    4e6a:	bb 85       	ldd	r27, Y+11	; 0x0b
    4e6c:	9b 01       	movw	r18, r22
    4e6e:	bc 01       	movw	r22, r24
    4e70:	cd 01       	movw	r24, r26
    4e72:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <p_nm_read_block>
    4e76:	98 2f       	mov	r25, r24
    4e78:	8d 81       	ldd	r24, Y+5	; 0x05
    4e7a:	89 0f       	add	r24, r25
    4e7c:	8d 83       	std	Y+5, r24	; 0x05
			break;
    4e7e:	51 c0       	rjmp	.+162    	; 0x4f22 <nm_read_block+0x12e>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    4e80:	89 81       	ldd	r24, Y+1	; 0x01
    4e82:	9a 81       	ldd	r25, Y+2	; 0x02
    4e84:	2c 85       	ldd	r18, Y+12	; 0x0c
    4e86:	3d 85       	ldd	r19, Y+13	; 0x0d
    4e88:	a9 01       	movw	r20, r18
    4e8a:	48 0f       	add	r20, r24
    4e8c:	59 1f       	adc	r21, r25
    4e8e:	2e 81       	ldd	r18, Y+6	; 0x06
    4e90:	3f 81       	ldd	r19, Y+7	; 0x07
    4e92:	88 85       	ldd	r24, Y+8	; 0x08
    4e94:	99 85       	ldd	r25, Y+9	; 0x09
    4e96:	aa 85       	ldd	r26, Y+10	; 0x0a
    4e98:	bb 85       	ldd	r27, Y+11	; 0x0b
    4e9a:	bc 01       	movw	r22, r24
    4e9c:	cd 01       	movw	r24, r26
    4e9e:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <p_nm_read_block>
    4ea2:	98 2f       	mov	r25, r24
    4ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ea6:	89 0f       	add	r24, r25
    4ea8:	8d 83       	std	Y+5, r24	; 0x05
			if(M2M_SUCCESS != s8Ret) break;
    4eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    4eac:	88 23       	and	r24, r24
    4eae:	c1 f5       	brne	.+112    	; 0x4f20 <nm_read_block+0x12c>
			u32Sz -= u16MaxTrxSz;
    4eb0:	8e 81       	ldd	r24, Y+6	; 0x06
    4eb2:	9f 81       	ldd	r25, Y+7	; 0x07
    4eb4:	cc 01       	movw	r24, r24
    4eb6:	a0 e0       	ldi	r26, 0x00	; 0
    4eb8:	b0 e0       	ldi	r27, 0x00	; 0
    4eba:	2e 85       	ldd	r18, Y+14	; 0x0e
    4ebc:	3f 85       	ldd	r19, Y+15	; 0x0f
    4ebe:	48 89       	ldd	r20, Y+16	; 0x10
    4ec0:	59 89       	ldd	r21, Y+17	; 0x11
    4ec2:	79 01       	movw	r14, r18
    4ec4:	8a 01       	movw	r16, r20
    4ec6:	e8 1a       	sub	r14, r24
    4ec8:	f9 0a       	sbc	r15, r25
    4eca:	0a 0b       	sbc	r16, r26
    4ecc:	1b 0b       	sbc	r17, r27
    4ece:	d8 01       	movw	r26, r16
    4ed0:	c7 01       	movw	r24, r14
    4ed2:	8e 87       	std	Y+14, r24	; 0x0e
    4ed4:	9f 87       	std	Y+15, r25	; 0x0f
    4ed6:	a8 8b       	std	Y+16, r26	; 0x10
    4ed8:	b9 8b       	std	Y+17, r27	; 0x11
			off += u16MaxTrxSz;
    4eda:	8e 81       	ldd	r24, Y+6	; 0x06
    4edc:	9f 81       	ldd	r25, Y+7	; 0x07
    4ede:	cc 01       	movw	r24, r24
    4ee0:	a0 e0       	ldi	r26, 0x00	; 0
    4ee2:	b0 e0       	ldi	r27, 0x00	; 0
    4ee4:	29 81       	ldd	r18, Y+1	; 0x01
    4ee6:	3a 81       	ldd	r19, Y+2	; 0x02
    4ee8:	4b 81       	ldd	r20, Y+3	; 0x03
    4eea:	5c 81       	ldd	r21, Y+4	; 0x04
    4eec:	82 0f       	add	r24, r18
    4eee:	93 1f       	adc	r25, r19
    4ef0:	a4 1f       	adc	r26, r20
    4ef2:	b5 1f       	adc	r27, r21
    4ef4:	89 83       	std	Y+1, r24	; 0x01
    4ef6:	9a 83       	std	Y+2, r25	; 0x02
    4ef8:	ab 83       	std	Y+3, r26	; 0x03
    4efa:	bc 83       	std	Y+4, r27	; 0x04
			u32Addr += u16MaxTrxSz;
    4efc:	8e 81       	ldd	r24, Y+6	; 0x06
    4efe:	9f 81       	ldd	r25, Y+7	; 0x07
    4f00:	cc 01       	movw	r24, r24
    4f02:	a0 e0       	ldi	r26, 0x00	; 0
    4f04:	b0 e0       	ldi	r27, 0x00	; 0
    4f06:	28 85       	ldd	r18, Y+8	; 0x08
    4f08:	39 85       	ldd	r19, Y+9	; 0x09
    4f0a:	4a 85       	ldd	r20, Y+10	; 0x0a
    4f0c:	5b 85       	ldd	r21, Y+11	; 0x0b
    4f0e:	82 0f       	add	r24, r18
    4f10:	93 1f       	adc	r25, r19
    4f12:	a4 1f       	adc	r26, r20
    4f14:	b5 1f       	adc	r27, r21
    4f16:	88 87       	std	Y+8, r24	; 0x08
    4f18:	99 87       	std	Y+9, r25	; 0x09
    4f1a:	aa 87       	std	Y+10, r26	; 0x0a
    4f1c:	bb 87       	std	Y+11, r27	; 0x0b
		}
	}
    4f1e:	8b cf       	rjmp	.-234    	; 0x4e36 <nm_read_block+0x42>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    4f20:	00 00       	nop
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    4f22:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4f24:	61 96       	adiw	r28, 0x11	; 17
    4f26:	cd bf       	out	0x3d, r28	; 61
    4f28:	de bf       	out	0x3e, r29	; 62
    4f2a:	df 91       	pop	r29
    4f2c:	cf 91       	pop	r28
    4f2e:	1f 91       	pop	r17
    4f30:	0f 91       	pop	r16
    4f32:	ff 90       	pop	r15
    4f34:	ef 90       	pop	r14
    4f36:	08 95       	ret

00004f38 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4f38:	cf 93       	push	r28
    4f3a:	df 93       	push	r29
    4f3c:	cd b7       	in	r28, 0x3d	; 61
    4f3e:	de b7       	in	r29, 0x3e	; 62
    4f40:	28 97       	sbiw	r28, 0x08	; 8
    4f42:	cd bf       	out	0x3d, r28	; 61
    4f44:	de bf       	out	0x3e, r29	; 62
    4f46:	69 83       	std	Y+1, r22	; 0x01
    4f48:	7a 83       	std	Y+2, r23	; 0x02
    4f4a:	8b 83       	std	Y+3, r24	; 0x03
    4f4c:	9c 83       	std	Y+4, r25	; 0x04
    4f4e:	4d 83       	std	Y+5, r20	; 0x05
    4f50:	5e 83       	std	Y+6, r21	; 0x06
    4f52:	2f 83       	std	Y+7, r18	; 0x07
    4f54:	38 87       	std	Y+8, r19	; 0x08
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    4f56:	2f 81       	ldd	r18, Y+7	; 0x07
    4f58:	38 85       	ldd	r19, Y+8	; 0x08
    4f5a:	4d 81       	ldd	r20, Y+5	; 0x05
    4f5c:	5e 81       	ldd	r21, Y+6	; 0x06
    4f5e:	89 81       	ldd	r24, Y+1	; 0x01
    4f60:	9a 81       	ldd	r25, Y+2	; 0x02
    4f62:	ab 81       	ldd	r26, Y+3	; 0x03
    4f64:	bc 81       	ldd	r27, Y+4	; 0x04
    4f66:	bc 01       	movw	r22, r24
    4f68:	cd 01       	movw	r24, r26
    4f6a:	0e 94 54 31 	call	0x62a8	; 0x62a8 <nm_spi_write_block>
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    4f6e:	28 96       	adiw	r28, 0x08	; 8
    4f70:	cd bf       	out	0x3d, r28	; 61
    4f72:	de bf       	out	0x3e, r29	; 62
    4f74:	df 91       	pop	r29
    4f76:	cf 91       	pop	r28
    4f78:	08 95       	ret

00004f7a <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    4f7a:	ef 92       	push	r14
    4f7c:	ff 92       	push	r15
    4f7e:	0f 93       	push	r16
    4f80:	1f 93       	push	r17
    4f82:	cf 93       	push	r28
    4f84:	df 93       	push	r29
    4f86:	cd b7       	in	r28, 0x3d	; 61
    4f88:	de b7       	in	r29, 0x3e	; 62
    4f8a:	61 97       	sbiw	r28, 0x11	; 17
    4f8c:	cd bf       	out	0x3d, r28	; 61
    4f8e:	de bf       	out	0x3e, r29	; 62
    4f90:	68 87       	std	Y+8, r22	; 0x08
    4f92:	79 87       	std	Y+9, r23	; 0x09
    4f94:	8a 87       	std	Y+10, r24	; 0x0a
    4f96:	9b 87       	std	Y+11, r25	; 0x0b
    4f98:	4c 87       	std	Y+12, r20	; 0x0c
    4f9a:	5d 87       	std	Y+13, r21	; 0x0d
    4f9c:	0e 87       	std	Y+14, r16	; 0x0e
    4f9e:	1f 87       	std	Y+15, r17	; 0x0f
    4fa0:	28 8b       	std	Y+16, r18	; 0x10
    4fa2:	39 8b       	std	Y+17, r19	; 0x11
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    4fa4:	80 91 0b 28 	lds	r24, 0x280B	; 0x80280b <egstrNmBusCapabilities>
    4fa8:	90 91 0c 28 	lds	r25, 0x280C	; 0x80280c <egstrNmBusCapabilities+0x1>
    4fac:	08 97       	sbiw	r24, 0x08	; 8
    4fae:	8e 83       	std	Y+6, r24	; 0x06
    4fb0:	9f 83       	std	Y+7, r25	; 0x07
	uint32 off = 0;
    4fb2:	19 82       	std	Y+1, r1	; 0x01
    4fb4:	1a 82       	std	Y+2, r1	; 0x02
    4fb6:	1b 82       	std	Y+3, r1	; 0x03
    4fb8:	1c 82       	std	Y+4, r1	; 0x04
	sint8 s8Ret = M2M_SUCCESS;
    4fba:	1d 82       	std	Y+5, r1	; 0x05

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    4fbc:	8e 81       	ldd	r24, Y+6	; 0x06
    4fbe:	9f 81       	ldd	r25, Y+7	; 0x07
    4fc0:	9c 01       	movw	r18, r24
    4fc2:	40 e0       	ldi	r20, 0x00	; 0
    4fc4:	50 e0       	ldi	r21, 0x00	; 0
    4fc6:	8e 85       	ldd	r24, Y+14	; 0x0e
    4fc8:	9f 85       	ldd	r25, Y+15	; 0x0f
    4fca:	a8 89       	ldd	r26, Y+16	; 0x10
    4fcc:	b9 89       	ldd	r27, Y+17	; 0x11
    4fce:	28 17       	cp	r18, r24
    4fd0:	39 07       	cpc	r19, r25
    4fd2:	4a 07       	cpc	r20, r26
    4fd4:	5b 07       	cpc	r21, r27
    4fd6:	b8 f0       	brcs	.+46     	; 0x5006 <nm_write_block+0x8c>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    4fd8:	6e 85       	ldd	r22, Y+14	; 0x0e
    4fda:	7f 85       	ldd	r23, Y+15	; 0x0f
    4fdc:	89 81       	ldd	r24, Y+1	; 0x01
    4fde:	9a 81       	ldd	r25, Y+2	; 0x02
    4fe0:	2c 85       	ldd	r18, Y+12	; 0x0c
    4fe2:	3d 85       	ldd	r19, Y+13	; 0x0d
    4fe4:	a9 01       	movw	r20, r18
    4fe6:	48 0f       	add	r20, r24
    4fe8:	59 1f       	adc	r21, r25
    4fea:	88 85       	ldd	r24, Y+8	; 0x08
    4fec:	99 85       	ldd	r25, Y+9	; 0x09
    4fee:	aa 85       	ldd	r26, Y+10	; 0x0a
    4ff0:	bb 85       	ldd	r27, Y+11	; 0x0b
    4ff2:	9b 01       	movw	r18, r22
    4ff4:	bc 01       	movw	r22, r24
    4ff6:	cd 01       	movw	r24, r26
    4ff8:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <p_nm_write_block>
    4ffc:	98 2f       	mov	r25, r24
    4ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    5000:	89 0f       	add	r24, r25
    5002:	8d 83       	std	Y+5, r24	; 0x05
			break;
    5004:	51 c0       	rjmp	.+162    	; 0x50a8 <nm_write_block+0x12e>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    5006:	89 81       	ldd	r24, Y+1	; 0x01
    5008:	9a 81       	ldd	r25, Y+2	; 0x02
    500a:	2c 85       	ldd	r18, Y+12	; 0x0c
    500c:	3d 85       	ldd	r19, Y+13	; 0x0d
    500e:	a9 01       	movw	r20, r18
    5010:	48 0f       	add	r20, r24
    5012:	59 1f       	adc	r21, r25
    5014:	2e 81       	ldd	r18, Y+6	; 0x06
    5016:	3f 81       	ldd	r19, Y+7	; 0x07
    5018:	88 85       	ldd	r24, Y+8	; 0x08
    501a:	99 85       	ldd	r25, Y+9	; 0x09
    501c:	aa 85       	ldd	r26, Y+10	; 0x0a
    501e:	bb 85       	ldd	r27, Y+11	; 0x0b
    5020:	bc 01       	movw	r22, r24
    5022:	cd 01       	movw	r24, r26
    5024:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <p_nm_write_block>
    5028:	98 2f       	mov	r25, r24
    502a:	8d 81       	ldd	r24, Y+5	; 0x05
    502c:	89 0f       	add	r24, r25
    502e:	8d 83       	std	Y+5, r24	; 0x05
			if(M2M_SUCCESS != s8Ret) break;
    5030:	8d 81       	ldd	r24, Y+5	; 0x05
    5032:	88 23       	and	r24, r24
    5034:	c1 f5       	brne	.+112    	; 0x50a6 <nm_write_block+0x12c>
			u32Sz -= u16MaxTrxSz;
    5036:	8e 81       	ldd	r24, Y+6	; 0x06
    5038:	9f 81       	ldd	r25, Y+7	; 0x07
    503a:	cc 01       	movw	r24, r24
    503c:	a0 e0       	ldi	r26, 0x00	; 0
    503e:	b0 e0       	ldi	r27, 0x00	; 0
    5040:	2e 85       	ldd	r18, Y+14	; 0x0e
    5042:	3f 85       	ldd	r19, Y+15	; 0x0f
    5044:	48 89       	ldd	r20, Y+16	; 0x10
    5046:	59 89       	ldd	r21, Y+17	; 0x11
    5048:	79 01       	movw	r14, r18
    504a:	8a 01       	movw	r16, r20
    504c:	e8 1a       	sub	r14, r24
    504e:	f9 0a       	sbc	r15, r25
    5050:	0a 0b       	sbc	r16, r26
    5052:	1b 0b       	sbc	r17, r27
    5054:	d8 01       	movw	r26, r16
    5056:	c7 01       	movw	r24, r14
    5058:	8e 87       	std	Y+14, r24	; 0x0e
    505a:	9f 87       	std	Y+15, r25	; 0x0f
    505c:	a8 8b       	std	Y+16, r26	; 0x10
    505e:	b9 8b       	std	Y+17, r27	; 0x11
			off += u16MaxTrxSz;
    5060:	8e 81       	ldd	r24, Y+6	; 0x06
    5062:	9f 81       	ldd	r25, Y+7	; 0x07
    5064:	cc 01       	movw	r24, r24
    5066:	a0 e0       	ldi	r26, 0x00	; 0
    5068:	b0 e0       	ldi	r27, 0x00	; 0
    506a:	29 81       	ldd	r18, Y+1	; 0x01
    506c:	3a 81       	ldd	r19, Y+2	; 0x02
    506e:	4b 81       	ldd	r20, Y+3	; 0x03
    5070:	5c 81       	ldd	r21, Y+4	; 0x04
    5072:	82 0f       	add	r24, r18
    5074:	93 1f       	adc	r25, r19
    5076:	a4 1f       	adc	r26, r20
    5078:	b5 1f       	adc	r27, r21
    507a:	89 83       	std	Y+1, r24	; 0x01
    507c:	9a 83       	std	Y+2, r25	; 0x02
    507e:	ab 83       	std	Y+3, r26	; 0x03
    5080:	bc 83       	std	Y+4, r27	; 0x04
			u32Addr += u16MaxTrxSz;
    5082:	8e 81       	ldd	r24, Y+6	; 0x06
    5084:	9f 81       	ldd	r25, Y+7	; 0x07
    5086:	cc 01       	movw	r24, r24
    5088:	a0 e0       	ldi	r26, 0x00	; 0
    508a:	b0 e0       	ldi	r27, 0x00	; 0
    508c:	28 85       	ldd	r18, Y+8	; 0x08
    508e:	39 85       	ldd	r19, Y+9	; 0x09
    5090:	4a 85       	ldd	r20, Y+10	; 0x0a
    5092:	5b 85       	ldd	r21, Y+11	; 0x0b
    5094:	82 0f       	add	r24, r18
    5096:	93 1f       	adc	r25, r19
    5098:	a4 1f       	adc	r26, r20
    509a:	b5 1f       	adc	r27, r21
    509c:	88 87       	std	Y+8, r24	; 0x08
    509e:	99 87       	std	Y+9, r25	; 0x09
    50a0:	aa 87       	std	Y+10, r26	; 0x0a
    50a2:	bb 87       	std	Y+11, r27	; 0x0b
		}
	}
    50a4:	8b cf       	rjmp	.-234    	; 0x4fbc <nm_write_block+0x42>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    50a6:	00 00       	nop
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    50a8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    50aa:	61 96       	adiw	r28, 0x11	; 17
    50ac:	cd bf       	out	0x3d, r28	; 61
    50ae:	de bf       	out	0x3e, r29	; 62
    50b0:	df 91       	pop	r29
    50b2:	cf 91       	pop	r28
    50b4:	1f 91       	pop	r17
    50b6:	0f 91       	pop	r16
    50b8:	ff 90       	pop	r15
    50ba:	ef 90       	pop	r14
    50bc:	08 95       	ret

000050be <nm_get_firmware_full_info>:
	/*disable all interrupt in ROM (to disable uart) in 2b0 chip*/
	nm_write_reg(0x20300,0);

ERR1:
	return ret;
}
    50be:	0f 93       	push	r16
    50c0:	1f 93       	push	r17
    50c2:	cf 93       	push	r28
    50c4:	df 93       	push	r29
    50c6:	cd b7       	in	r28, 0x3d	; 61
    50c8:	de b7       	in	r29, 0x3e	; 62
    50ca:	65 97       	sbiw	r28, 0x15	; 21
    50cc:	cd bf       	out	0x3d, r28	; 61
    50ce:	de bf       	out	0x3e, r29	; 62
    50d0:	8c 8b       	std	Y+20, r24	; 0x14
    50d2:	9d 8b       	std	Y+21, r25	; 0x15
    50d4:	18 86       	std	Y+8, r1	; 0x08
    50d6:	19 86       	std	Y+9, r1	; 0x09
    50d8:	1a 86       	std	Y+10, r1	; 0x0a
    50da:	1b 86       	std	Y+11, r1	; 0x0b
    50dc:	19 82       	std	Y+1, r1	; 0x01
    50de:	28 e0       	ldi	r18, 0x08	; 8
    50e0:	ce 01       	movw	r24, r28
    50e2:	0c 96       	adiw	r24, 0x0c	; 12
    50e4:	fc 01       	movw	r30, r24
    50e6:	32 2f       	mov	r19, r18
    50e8:	11 92       	st	Z+, r1
    50ea:	3a 95       	dec	r19
    50ec:	e9 f7       	brne	.-6      	; 0x50e8 <nm_get_firmware_full_info+0x2a>
    50ee:	8c 89       	ldd	r24, Y+20	; 0x14
    50f0:	9d 89       	ldd	r25, Y+21	; 0x15
    50f2:	89 2b       	or	r24, r25
    50f4:	09 f4       	brne	.+2      	; 0x50f8 <nm_get_firmware_full_info+0x3a>
    50f6:	d6 c0       	rjmp	.+428    	; 0x52a4 <nm_get_firmware_full_info+0x1e6>
    50f8:	8c 89       	ldd	r24, Y+20	; 0x14
    50fa:	9d 89       	ldd	r25, Y+21	; 0x15
    50fc:	26 e2       	ldi	r18, 0x26	; 38
    50fe:	30 e0       	ldi	r19, 0x00	; 0
    5100:	40 e0       	ldi	r20, 0x00	; 0
    5102:	50 e0       	ldi	r21, 0x00	; 0
    5104:	60 e0       	ldi	r22, 0x00	; 0
    5106:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <m2m_memset>
    510a:	ce 01       	movw	r24, r28
    510c:	08 96       	adiw	r24, 0x08	; 8
    510e:	ac 01       	movw	r20, r24
    5110:	68 e0       	ldi	r22, 0x08	; 8
    5112:	70 e0       	ldi	r23, 0x00	; 0
    5114:	8c e0       	ldi	r24, 0x0C	; 12
    5116:	90 e0       	ldi	r25, 0x00	; 0
    5118:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    511c:	89 83       	std	Y+1, r24	; 0x01
    511e:	89 81       	ldd	r24, Y+1	; 0x01
    5120:	88 23       	and	r24, r24
    5122:	09 f0       	breq	.+2      	; 0x5126 <nm_get_firmware_full_info+0x68>
    5124:	bf c0       	rjmp	.+382    	; 0x52a4 <nm_get_firmware_full_info+0x1e6>
    5126:	88 85       	ldd	r24, Y+8	; 0x08
    5128:	99 85       	ldd	r25, Y+9	; 0x09
    512a:	aa 85       	ldd	r26, Y+10	; 0x0a
    512c:	bb 85       	ldd	r27, Y+11	; 0x0b
    512e:	89 2b       	or	r24, r25
    5130:	8a 2b       	or	r24, r26
    5132:	8b 2b       	or	r24, r27
    5134:	09 f4       	brne	.+2      	; 0x5138 <nm_get_firmware_full_info+0x7a>
    5136:	b4 c0       	rjmp	.+360    	; 0x52a0 <nm_get_firmware_full_info+0x1e2>
    5138:	88 85       	ldd	r24, Y+8	; 0x08
    513a:	99 85       	ldd	r25, Y+9	; 0x09
    513c:	aa 85       	ldd	r26, Y+10	; 0x0a
    513e:	bb 85       	ldd	r27, Y+11	; 0x0b
    5140:	a3 60       	ori	r26, 0x03	; 3
    5142:	ae 01       	movw	r20, r28
    5144:	44 5f       	subi	r20, 0xF4	; 244
    5146:	5f 4f       	sbci	r21, 0xFF	; 255
    5148:	08 e0       	ldi	r16, 0x08	; 8
    514a:	10 e0       	ldi	r17, 0x00	; 0
    514c:	20 e0       	ldi	r18, 0x00	; 0
    514e:	30 e0       	ldi	r19, 0x00	; 0
    5150:	bc 01       	movw	r22, r24
    5152:	cd 01       	movw	r24, r26
    5154:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <nm_read_block>
    5158:	89 83       	std	Y+1, r24	; 0x01
    515a:	89 81       	ldd	r24, Y+1	; 0x01
    515c:	88 23       	and	r24, r24
    515e:	09 f0       	breq	.+2      	; 0x5162 <nm_get_firmware_full_info+0xa4>
    5160:	a1 c0       	rjmp	.+322    	; 0x52a4 <nm_get_firmware_full_info+0x1e6>
    5162:	88 89       	ldd	r24, Y+16	; 0x10
    5164:	99 89       	ldd	r25, Y+17	; 0x11
    5166:	aa 89       	ldd	r26, Y+18	; 0x12
    5168:	bb 89       	ldd	r27, Y+19	; 0x13
    516a:	88 87       	std	Y+8, r24	; 0x08
    516c:	99 87       	std	Y+9, r25	; 0x09
    516e:	aa 87       	std	Y+10, r26	; 0x0a
    5170:	bb 87       	std	Y+11, r27	; 0x0b
    5172:	88 85       	ldd	r24, Y+8	; 0x08
    5174:	99 85       	ldd	r25, Y+9	; 0x09
    5176:	aa 85       	ldd	r26, Y+10	; 0x0a
    5178:	bb 85       	ldd	r27, Y+11	; 0x0b
    517a:	aa 27       	eor	r26, r26
    517c:	bb 27       	eor	r27, r27
    517e:	88 87       	std	Y+8, r24	; 0x08
    5180:	99 87       	std	Y+9, r25	; 0x09
    5182:	aa 87       	std	Y+10, r26	; 0x0a
    5184:	bb 87       	std	Y+11, r27	; 0x0b
    5186:	88 85       	ldd	r24, Y+8	; 0x08
    5188:	99 85       	ldd	r25, Y+9	; 0x09
    518a:	aa 85       	ldd	r26, Y+10	; 0x0a
    518c:	bb 85       	ldd	r27, Y+11	; 0x0b
    518e:	89 2b       	or	r24, r25
    5190:	8a 2b       	or	r24, r26
    5192:	8b 2b       	or	r24, r27
    5194:	09 f4       	brne	.+2      	; 0x5198 <nm_get_firmware_full_info+0xda>
    5196:	81 c0       	rjmp	.+258    	; 0x529a <nm_get_firmware_full_info+0x1dc>
    5198:	88 85       	ldd	r24, Y+8	; 0x08
    519a:	99 85       	ldd	r25, Y+9	; 0x09
    519c:	aa 85       	ldd	r26, Y+10	; 0x0a
    519e:	bb 85       	ldd	r27, Y+11	; 0x0b
    51a0:	a3 60       	ori	r26, 0x03	; 3
    51a2:	4c 89       	ldd	r20, Y+20	; 0x14
    51a4:	5d 89       	ldd	r21, Y+21	; 0x15
    51a6:	06 e2       	ldi	r16, 0x26	; 38
    51a8:	10 e0       	ldi	r17, 0x00	; 0
    51aa:	20 e0       	ldi	r18, 0x00	; 0
    51ac:	30 e0       	ldi	r19, 0x00	; 0
    51ae:	bc 01       	movw	r22, r24
    51b0:	cd 01       	movw	r24, r26
    51b2:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <nm_read_block>
    51b6:	89 83       	std	Y+1, r24	; 0x01
    51b8:	89 81       	ldd	r24, Y+1	; 0x01
    51ba:	88 23       	and	r24, r24
    51bc:	09 f0       	breq	.+2      	; 0x51c0 <nm_get_firmware_full_info+0x102>
    51be:	72 c0       	rjmp	.+228    	; 0x52a4 <nm_get_firmware_full_info+0x1e6>
    51c0:	8c 89       	ldd	r24, Y+20	; 0x14
    51c2:	9d 89       	ldd	r25, Y+21	; 0x15
    51c4:	fc 01       	movw	r30, r24
    51c6:	84 81       	ldd	r24, Z+4	; 0x04
    51c8:	88 2f       	mov	r24, r24
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	38 2f       	mov	r19, r24
    51ce:	22 27       	eor	r18, r18
    51d0:	8c 89       	ldd	r24, Y+20	; 0x14
    51d2:	9d 89       	ldd	r25, Y+21	; 0x15
    51d4:	fc 01       	movw	r30, r24
    51d6:	85 81       	ldd	r24, Z+5	; 0x05
    51d8:	88 2f       	mov	r24, r24
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	82 95       	swap	r24
    51de:	92 95       	swap	r25
    51e0:	90 7f       	andi	r25, 0xF0	; 240
    51e2:	98 27       	eor	r25, r24
    51e4:	80 7f       	andi	r24, 0xF0	; 240
    51e6:	98 27       	eor	r25, r24
    51e8:	99 27       	eor	r25, r25
    51ea:	28 2b       	or	r18, r24
    51ec:	39 2b       	or	r19, r25
    51ee:	8c 89       	ldd	r24, Y+20	; 0x14
    51f0:	9d 89       	ldd	r25, Y+21	; 0x15
    51f2:	fc 01       	movw	r30, r24
    51f4:	86 81       	ldd	r24, Z+6	; 0x06
    51f6:	88 2f       	mov	r24, r24
    51f8:	90 e0       	ldi	r25, 0x00	; 0
    51fa:	8f 70       	andi	r24, 0x0F	; 15
    51fc:	99 27       	eor	r25, r25
    51fe:	82 2b       	or	r24, r18
    5200:	93 2b       	or	r25, r19
    5202:	8a 83       	std	Y+2, r24	; 0x02
    5204:	9b 83       	std	Y+3, r25	; 0x03
    5206:	82 e5       	ldi	r24, 0x52	; 82
    5208:	93 e1       	ldi	r25, 0x13	; 19
    520a:	8c 83       	std	Y+4, r24	; 0x04
    520c:	9d 83       	std	Y+5, r25	; 0x05
    520e:	8c 89       	ldd	r24, Y+20	; 0x14
    5210:	9d 89       	ldd	r25, Y+21	; 0x15
    5212:	fc 01       	movw	r30, r24
    5214:	87 81       	ldd	r24, Z+7	; 0x07
    5216:	88 2f       	mov	r24, r24
    5218:	90 e0       	ldi	r25, 0x00	; 0
    521a:	38 2f       	mov	r19, r24
    521c:	22 27       	eor	r18, r18
    521e:	8c 89       	ldd	r24, Y+20	; 0x14
    5220:	9d 89       	ldd	r25, Y+21	; 0x15
    5222:	fc 01       	movw	r30, r24
    5224:	80 85       	ldd	r24, Z+8	; 0x08
    5226:	88 2f       	mov	r24, r24
    5228:	90 e0       	ldi	r25, 0x00	; 0
    522a:	82 95       	swap	r24
    522c:	92 95       	swap	r25
    522e:	90 7f       	andi	r25, 0xF0	; 240
    5230:	98 27       	eor	r25, r24
    5232:	80 7f       	andi	r24, 0xF0	; 240
    5234:	98 27       	eor	r25, r24
    5236:	99 27       	eor	r25, r25
    5238:	28 2b       	or	r18, r24
    523a:	39 2b       	or	r19, r25
    523c:	8c 89       	ldd	r24, Y+20	; 0x14
    523e:	9d 89       	ldd	r25, Y+21	; 0x15
    5240:	fc 01       	movw	r30, r24
    5242:	81 85       	ldd	r24, Z+9	; 0x09
    5244:	88 2f       	mov	r24, r24
    5246:	90 e0       	ldi	r25, 0x00	; 0
    5248:	8f 70       	andi	r24, 0x0F	; 15
    524a:	99 27       	eor	r25, r25
    524c:	82 2b       	or	r24, r18
    524e:	93 2b       	or	r25, r19
    5250:	8e 83       	std	Y+6, r24	; 0x06
    5252:	9f 83       	std	Y+7, r25	; 0x07
    5254:	8a 81       	ldd	r24, Y+2	; 0x02
    5256:	9b 81       	ldd	r25, Y+3	; 0x03
    5258:	89 2b       	or	r24, r25
    525a:	41 f0       	breq	.+16     	; 0x526c <nm_get_firmware_full_info+0x1ae>
    525c:	8e 81       	ldd	r24, Y+6	; 0x06
    525e:	9f 81       	ldd	r25, Y+7	; 0x07
    5260:	89 2b       	or	r24, r25
    5262:	21 f0       	breq	.+8      	; 0x526c <nm_get_firmware_full_info+0x1ae>
    5264:	8e 81       	ldd	r24, Y+6	; 0x06
    5266:	9f 81       	ldd	r25, Y+7	; 0x07
    5268:	89 2b       	or	r24, r25
    526a:	19 f4       	brne	.+6      	; 0x5272 <nm_get_firmware_full_info+0x1b4>
    526c:	84 ef       	ldi	r24, 0xF4	; 244
    526e:	89 83       	std	Y+1, r24	; 0x01
    5270:	19 c0       	rjmp	.+50     	; 0x52a4 <nm_get_firmware_full_info+0x1e6>
    5272:	2c 81       	ldd	r18, Y+4	; 0x04
    5274:	3d 81       	ldd	r19, Y+5	; 0x05
    5276:	8e 81       	ldd	r24, Y+6	; 0x06
    5278:	9f 81       	ldd	r25, Y+7	; 0x07
    527a:	28 17       	cp	r18, r24
    527c:	39 07       	cpc	r19, r25
    527e:	18 f4       	brcc	.+6      	; 0x5286 <nm_get_firmware_full_info+0x1c8>
    5280:	83 ef       	ldi	r24, 0xF3	; 243
    5282:	89 83       	std	Y+1, r24	; 0x01
    5284:	0f c0       	rjmp	.+30     	; 0x52a4 <nm_get_firmware_full_info+0x1e6>
    5286:	2c 81       	ldd	r18, Y+4	; 0x04
    5288:	3d 81       	ldd	r19, Y+5	; 0x05
    528a:	8a 81       	ldd	r24, Y+2	; 0x02
    528c:	9b 81       	ldd	r25, Y+3	; 0x03
    528e:	82 17       	cp	r24, r18
    5290:	93 07       	cpc	r25, r19
    5292:	40 f4       	brcc	.+16     	; 0x52a4 <nm_get_firmware_full_info+0x1e6>
    5294:	83 ef       	ldi	r24, 0xF3	; 243
    5296:	89 83       	std	Y+1, r24	; 0x01
    5298:	05 c0       	rjmp	.+10     	; 0x52a4 <nm_get_firmware_full_info+0x1e6>
    529a:	84 ef       	ldi	r24, 0xF4	; 244
    529c:	89 83       	std	Y+1, r24	; 0x01
    529e:	02 c0       	rjmp	.+4      	; 0x52a4 <nm_get_firmware_full_info+0x1e6>
    52a0:	84 ef       	ldi	r24, 0xF4	; 244
    52a2:	89 83       	std	Y+1, r24	; 0x01
    52a4:	89 81       	ldd	r24, Y+1	; 0x01
    52a6:	65 96       	adiw	r28, 0x15	; 21
    52a8:	cd bf       	out	0x3d, r28	; 61
    52aa:	de bf       	out	0x3e, r29	; 62
    52ac:	df 91       	pop	r29
    52ae:	cf 91       	pop	r28
    52b0:	1f 91       	pop	r17
    52b2:	0f 91       	pop	r16
    52b4:	08 95       	ret

000052b6 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    52b6:	cf 93       	push	r28
    52b8:	df 93       	push	r29
    52ba:	00 d0       	rcall	.+0      	; 0x52bc <nm_drv_init+0x6>
    52bc:	00 d0       	rcall	.+0      	; 0x52be <nm_drv_init+0x8>
    52be:	cd b7       	in	r28, 0x3d	; 61
    52c0:	de b7       	in	r29, 0x3e	; 62
    52c2:	8b 83       	std	Y+3, r24	; 0x03
    52c4:	9c 83       	std	Y+4, r25	; 0x04
	sint8 ret = M2M_SUCCESS;
    52c6:	19 82       	std	Y+1, r1	; 0x01
	uint8 u8Mode;
	
	if(NULL != arg) {
    52c8:	8b 81       	ldd	r24, Y+3	; 0x03
    52ca:	9c 81       	ldd	r25, Y+4	; 0x04
    52cc:	89 2b       	or	r24, r25
    52ce:	71 f0       	breq	.+28     	; 0x52ec <nm_drv_init+0x36>
		u8Mode = *((uint8 *)arg);
    52d0:	8b 81       	ldd	r24, Y+3	; 0x03
    52d2:	9c 81       	ldd	r25, Y+4	; 0x04
    52d4:	fc 01       	movw	r30, r24
    52d6:	80 81       	ld	r24, Z
    52d8:	8a 83       	std	Y+2, r24	; 0x02
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    52da:	8a 81       	ldd	r24, Y+2	; 0x02
    52dc:	88 23       	and	r24, r24
    52de:	19 f0       	breq	.+6      	; 0x52e6 <nm_drv_init+0x30>
    52e0:	8a 81       	ldd	r24, Y+2	; 0x02
    52e2:	85 30       	cpi	r24, 0x05	; 5
    52e4:	28 f0       	brcs	.+10     	; 0x52f0 <nm_drv_init+0x3a>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    52e6:	81 e0       	ldi	r24, 0x01	; 1
    52e8:	8a 83       	std	Y+2, r24	; 0x02
    52ea:	02 c0       	rjmp	.+4      	; 0x52f0 <nm_drv_init+0x3a>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    52ec:	81 e0       	ldi	r24, 0x01	; 1
    52ee:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	ret = nm_bus_iface_init(NULL);
    52f0:	80 e0       	ldi	r24, 0x00	; 0
    52f2:	90 e0       	ldi	r25, 0x00	; 0
    52f4:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <nm_bus_iface_init>
    52f8:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    52fa:	89 81       	ldd	r24, Y+1	; 0x01
    52fc:	88 23       	and	r24, r24
    52fe:	31 f5       	brne	.+76     	; 0x534c <nm_drv_init+0x96>
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    5300:	0e 94 3c 30 	call	0x6078	; 0x6078 <nm_spi_init>
#endif
	ret = wait_for_bootrom(u8Mode);
    5304:	8a 81       	ldd	r24, Y+2	; 0x02
    5306:	0e 94 7e 24 	call	0x48fc	; 0x48fc <wait_for_bootrom>
    530a:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    530c:	89 81       	ldd	r24, Y+1	; 0x01
    530e:	88 23       	and	r24, r24
    5310:	a9 f4       	brne	.+42     	; 0x533c <nm_drv_init+0x86>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    5312:	8a 81       	ldd	r24, Y+2	; 0x02
    5314:	0e 94 83 25 	call	0x4b06	; 0x4b06 <wait_for_firmware_start>
    5318:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    531a:	89 81       	ldd	r24, Y+1	; 0x01
    531c:	88 23       	and	r24, r24
    531e:	81 f4       	brne	.+32     	; 0x5340 <nm_drv_init+0x8a>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    5320:	8a 81       	ldd	r24, Y+2	; 0x02
    5322:	82 30       	cpi	r24, 0x02	; 2
    5324:	a1 f0       	breq	.+40     	; 0x534e <nm_drv_init+0x98>
    5326:	8a 81       	ldd	r24, Y+2	; 0x02
    5328:	83 30       	cpi	r24, 0x03	; 3
    532a:	89 f0       	breq	.+34     	; 0x534e <nm_drv_init+0x98>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    532c:	0e 94 e2 21 	call	0x43c4	; 0x43c4 <enable_interrupts>
    5330:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    5332:	89 81       	ldd	r24, Y+1	; 0x01
    5334:	88 23       	and	r24, r24
    5336:	31 f4       	brne	.+12     	; 0x5344 <nm_drv_init+0x8e>
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
    5338:	89 81       	ldd	r24, Y+1	; 0x01
    533a:	0a c0       	rjmp	.+20     	; 0x5350 <nm_drv_init+0x9a>
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
#endif
	ret = wait_for_bootrom(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    533c:	00 00       	nop
    533e:	03 c0       	rjmp	.+6      	; 0x5346 <nm_drv_init+0x90>
	}
		
	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    5340:	00 00       	nop
    5342:	01 c0       	rjmp	.+2      	; 0x5346 <nm_drv_init+0x90>
	}
	
	ret = enable_interrupts();
	if (M2M_SUCCESS != ret) {
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
    5344:	00 00       	nop
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    5346:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <nm_bus_iface_deinit>
    534a:	01 c0       	rjmp	.+2      	; 0x534e <nm_drv_init+0x98>
	}
	
	ret = nm_bus_iface_init(NULL);
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi start]: fail init bus\n");
		goto ERR1;
    534c:	00 00       	nop
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
ERR1:
	return ret;
    534e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5350:	24 96       	adiw	r28, 0x04	; 4
    5352:	cd bf       	out	0x3d, r28	; 61
    5354:	de bf       	out	0x3e, r29	; 62
    5356:	df 91       	pop	r29
    5358:	cf 91       	pop	r28
    535a:	08 95       	ret

0000535c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    535c:	cf 93       	push	r28
    535e:	df 93       	push	r29
    5360:	00 d0       	rcall	.+0      	; 0x5362 <nm_drv_deinit+0x6>
    5362:	1f 92       	push	r1
    5364:	cd b7       	in	r28, 0x3d	; 61
    5366:	de b7       	in	r29, 0x3e	; 62
    5368:	8a 83       	std	Y+2, r24	; 0x02
    536a:	9b 83       	std	Y+3, r25	; 0x03
	sint8 ret;

	ret = chip_deinit();
    536c:	0e 94 18 26 	call	0x4c30	; 0x4c30 <chip_deinit>
    5370:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    5372:	89 81       	ldd	r24, Y+1	; 0x01
    5374:	88 23       	and	r24, r24
    5376:	81 f4       	brne	.+32     	; 0x5398 <nm_drv_deinit+0x3c>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    5378:	80 e0       	ldi	r24, 0x00	; 0
    537a:	0e 94 21 3b 	call	0x7642	; 0x7642 <spi_flash_enable>
    537e:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    5380:	89 81       	ldd	r24, Y+1	; 0x01
    5382:	88 23       	and	r24, r24
    5384:	59 f4       	brne	.+22     	; 0x539c <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    5386:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <nm_bus_iface_deinit>
    538a:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    538c:	89 81       	ldd	r24, Y+1	; 0x01
    538e:	88 23       	and	r24, r24
    5390:	39 f4       	brne	.+14     	; 0x53a0 <nm_drv_deinit+0x44>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    5392:	0e 94 ac 30 	call	0x6158	; 0x6158 <nm_spi_deinit>
    5396:	05 c0       	rjmp	.+10     	; 0x53a2 <nm_drv_deinit+0x46>
	sint8 ret;

	ret = chip_deinit();
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
    5398:	00 00       	nop
    539a:	03 c0       	rjmp	.+6      	; 0x53a2 <nm_drv_deinit+0x46>
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
    539c:	00 00       	nop
    539e:	01 c0       	rjmp	.+2      	; 0x53a2 <nm_drv_deinit+0x46>
	}

	ret = nm_bus_iface_deinit();
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
    53a0:	00 00       	nop
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
#endif

ERR1:
	return ret;
    53a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    53a4:	23 96       	adiw	r28, 0x03	; 3
    53a6:	cd bf       	out	0x3d, r28	; 61
    53a8:	de bf       	out	0x3e, r29	; 62
    53aa:	df 91       	pop	r29
    53ac:	cf 91       	pop	r28
    53ae:	08 95       	ret

000053b0 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    53b0:	cf 93       	push	r28
    53b2:	df 93       	push	r29
    53b4:	cd b7       	in	r28, 0x3d	; 61
    53b6:	de b7       	in	r29, 0x3e	; 62
    53b8:	2a 97       	sbiw	r28, 0x0a	; 10
    53ba:	cd bf       	out	0x3d, r28	; 61
    53bc:	de bf       	out	0x3e, r29	; 62
    53be:	8f 83       	std	Y+7, r24	; 0x07
    53c0:	98 87       	std	Y+8, r25	; 0x08
    53c2:	69 87       	std	Y+9, r22	; 0x09
    53c4:	7a 87       	std	Y+10, r23	; 0x0a
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    53c6:	19 82       	std	Y+1, r1	; 0x01
    53c8:	1a 82       	std	Y+2, r1	; 0x02
	spi.pu8OutBuf = b;
    53ca:	8f 81       	ldd	r24, Y+7	; 0x07
    53cc:	98 85       	ldd	r25, Y+8	; 0x08
    53ce:	8b 83       	std	Y+3, r24	; 0x03
    53d0:	9c 83       	std	Y+4, r25	; 0x04
	spi.u16Sz = sz;
    53d2:	89 85       	ldd	r24, Y+9	; 0x09
    53d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    53d6:	8d 83       	std	Y+5, r24	; 0x05
    53d8:	9e 83       	std	Y+6, r25	; 0x06
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    53da:	ce 01       	movw	r24, r28
    53dc:	01 96       	adiw	r24, 0x01	; 1
    53de:	bc 01       	movw	r22, r24
    53e0:	83 e0       	ldi	r24, 0x03	; 3
    53e2:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <nm_bus_ioctl>
}
    53e6:	2a 96       	adiw	r28, 0x0a	; 10
    53e8:	cd bf       	out	0x3d, r28	; 61
    53ea:	de bf       	out	0x3e, r29	; 62
    53ec:	df 91       	pop	r29
    53ee:	cf 91       	pop	r28
    53f0:	08 95       	ret

000053f2 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    53f2:	cf 93       	push	r28
    53f4:	df 93       	push	r29
    53f6:	cd b7       	in	r28, 0x3d	; 61
    53f8:	de b7       	in	r29, 0x3e	; 62
    53fa:	2a 97       	sbiw	r28, 0x0a	; 10
    53fc:	cd bf       	out	0x3d, r28	; 61
    53fe:	de bf       	out	0x3e, r29	; 62
    5400:	8f 83       	std	Y+7, r24	; 0x07
    5402:	98 87       	std	Y+8, r25	; 0x08
    5404:	69 87       	std	Y+9, r22	; 0x09
    5406:	7a 87       	std	Y+10, r23	; 0x0a
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    5408:	8f 81       	ldd	r24, Y+7	; 0x07
    540a:	98 85       	ldd	r25, Y+8	; 0x08
    540c:	89 83       	std	Y+1, r24	; 0x01
    540e:	9a 83       	std	Y+2, r25	; 0x02
	spi.pu8OutBuf = NULL;
    5410:	1b 82       	std	Y+3, r1	; 0x03
    5412:	1c 82       	std	Y+4, r1	; 0x04
	spi.u16Sz = sz;
    5414:	89 85       	ldd	r24, Y+9	; 0x09
    5416:	9a 85       	ldd	r25, Y+10	; 0x0a
    5418:	8d 83       	std	Y+5, r24	; 0x05
    541a:	9e 83       	std	Y+6, r25	; 0x06
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    541c:	ce 01       	movw	r24, r28
    541e:	01 96       	adiw	r24, 0x01	; 1
    5420:	bc 01       	movw	r22, r24
    5422:	83 e0       	ldi	r24, 0x03	; 3
    5424:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <nm_bus_ioctl>
}
    5428:	2a 96       	adiw	r28, 0x0a	; 10
    542a:	cd bf       	out	0x3d, r28	; 61
    542c:	de bf       	out	0x3e, r29	; 62
    542e:	df 91       	pop	r29
    5430:	cf 91       	pop	r28
    5432:	08 95       	ret

00005434 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    5434:	cf 93       	push	r28
    5436:	df 93       	push	r29
    5438:	cd b7       	in	r28, 0x3d	; 61
    543a:	de b7       	in	r29, 0x3e	; 62
    543c:	25 97       	sbiw	r28, 0x05	; 5
    543e:	cd bf       	out	0x3d, r28	; 61
    5440:	de bf       	out	0x3e, r29	; 62
    5442:	8c 83       	std	Y+4, r24	; 0x04
    5444:	6d 83       	std	Y+5, r22	; 0x05
	return pgm_read_byte(&(crc7_syndrome_table[(crc << 1) ^ data]));
    5446:	8c 81       	ldd	r24, Y+4	; 0x04
    5448:	88 2f       	mov	r24, r24
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	9c 01       	movw	r18, r24
    544e:	22 0f       	add	r18, r18
    5450:	33 1f       	adc	r19, r19
    5452:	8d 81       	ldd	r24, Y+5	; 0x05
    5454:	88 2f       	mov	r24, r24
    5456:	90 e0       	ldi	r25, 0x00	; 0
    5458:	82 27       	eor	r24, r18
    545a:	93 27       	eor	r25, r19
    545c:	84 53       	subi	r24, 0x34	; 52
    545e:	9f 4f       	sbci	r25, 0xFF	; 255
    5460:	89 83       	std	Y+1, r24	; 0x01
    5462:	9a 83       	std	Y+2, r25	; 0x02
    5464:	89 81       	ldd	r24, Y+1	; 0x01
    5466:	9a 81       	ldd	r25, Y+2	; 0x02
    5468:	fc 01       	movw	r30, r24
    546a:	84 91       	lpm	r24, Z
    546c:	8b 83       	std	Y+3, r24	; 0x03
    546e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5470:	25 96       	adiw	r28, 0x05	; 5
    5472:	cd bf       	out	0x3d, r28	; 61
    5474:	de bf       	out	0x3e, r29	; 62
    5476:	df 91       	pop	r29
    5478:	cf 91       	pop	r28
    547a:	08 95       	ret

0000547c <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    547c:	cf 93       	push	r28
    547e:	df 93       	push	r29
    5480:	cd b7       	in	r28, 0x3d	; 61
    5482:	de b7       	in	r29, 0x3e	; 62
    5484:	27 97       	sbiw	r28, 0x07	; 7
    5486:	cd bf       	out	0x3d, r28	; 61
    5488:	de bf       	out	0x3e, r29	; 62
    548a:	89 83       	std	Y+1, r24	; 0x01
    548c:	6a 83       	std	Y+2, r22	; 0x02
    548e:	7b 83       	std	Y+3, r23	; 0x03
    5490:	2c 83       	std	Y+4, r18	; 0x04
    5492:	3d 83       	std	Y+5, r19	; 0x05
    5494:	4e 83       	std	Y+6, r20	; 0x06
    5496:	5f 83       	std	Y+7, r21	; 0x07
	while (len--)
    5498:	0e c0       	rjmp	.+28     	; 0x54b6 <crc7+0x3a>
		crc = crc7_byte(crc, *buffer++);
    549a:	8a 81       	ldd	r24, Y+2	; 0x02
    549c:	9b 81       	ldd	r25, Y+3	; 0x03
    549e:	9c 01       	movw	r18, r24
    54a0:	2f 5f       	subi	r18, 0xFF	; 255
    54a2:	3f 4f       	sbci	r19, 0xFF	; 255
    54a4:	2a 83       	std	Y+2, r18	; 0x02
    54a6:	3b 83       	std	Y+3, r19	; 0x03
    54a8:	fc 01       	movw	r30, r24
    54aa:	80 81       	ld	r24, Z
    54ac:	68 2f       	mov	r22, r24
    54ae:	89 81       	ldd	r24, Y+1	; 0x01
    54b0:	0e 94 1a 2a 	call	0x5434	; 0x5434 <crc7_byte>
    54b4:	89 83       	std	Y+1, r24	; 0x01
	return pgm_read_byte(&(crc7_syndrome_table[(crc << 1) ^ data]));
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    54b6:	8c 81       	ldd	r24, Y+4	; 0x04
    54b8:	9d 81       	ldd	r25, Y+5	; 0x05
    54ba:	ae 81       	ldd	r26, Y+6	; 0x06
    54bc:	bf 81       	ldd	r27, Y+7	; 0x07
    54be:	9c 01       	movw	r18, r24
    54c0:	ad 01       	movw	r20, r26
    54c2:	21 50       	subi	r18, 0x01	; 1
    54c4:	31 09       	sbc	r19, r1
    54c6:	41 09       	sbc	r20, r1
    54c8:	51 09       	sbc	r21, r1
    54ca:	2c 83       	std	Y+4, r18	; 0x04
    54cc:	3d 83       	std	Y+5, r19	; 0x05
    54ce:	4e 83       	std	Y+6, r20	; 0x06
    54d0:	5f 83       	std	Y+7, r21	; 0x07
    54d2:	89 2b       	or	r24, r25
    54d4:	8a 2b       	or	r24, r26
    54d6:	8b 2b       	or	r24, r27
    54d8:	01 f7       	brne	.-64     	; 0x549a <crc7+0x1e>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    54da:	89 81       	ldd	r24, Y+1	; 0x01
}
    54dc:	27 96       	adiw	r28, 0x07	; 7
    54de:	cd bf       	out	0x3d, r28	; 61
    54e0:	de bf       	out	0x3e, r29	; 62
    54e2:	df 91       	pop	r29
    54e4:	cf 91       	pop	r28
    54e6:	08 95       	ret

000054e8 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    54e8:	af 92       	push	r10
    54ea:	cf 92       	push	r12
    54ec:	df 92       	push	r13
    54ee:	ef 92       	push	r14
    54f0:	ff 92       	push	r15
    54f2:	0f 93       	push	r16
    54f4:	1f 93       	push	r17
    54f6:	cf 93       	push	r28
    54f8:	df 93       	push	r29
    54fa:	cd b7       	in	r28, 0x3d	; 61
    54fc:	de b7       	in	r29, 0x3e	; 62
    54fe:	69 97       	sbiw	r28, 0x19	; 25
    5500:	cd bf       	out	0x3d, r28	; 61
    5502:	de bf       	out	0x3e, r29	; 62
    5504:	8c 87       	std	Y+12, r24	; 0x0c
    5506:	4d 87       	std	Y+13, r20	; 0x0d
    5508:	5e 87       	std	Y+14, r21	; 0x0e
    550a:	6f 87       	std	Y+15, r22	; 0x0f
    550c:	78 8b       	std	Y+16, r23	; 0x10
    550e:	09 8b       	std	Y+17, r16	; 0x11
    5510:	1a 8b       	std	Y+18, r17	; 0x12
    5512:	2b 8b       	std	Y+19, r18	; 0x13
    5514:	3c 8b       	std	Y+20, r19	; 0x14
    5516:	cd 8a       	std	Y+21, r12	; 0x15
    5518:	de 8a       	std	Y+22, r13	; 0x16
    551a:	ef 8a       	std	Y+23, r14	; 0x17
    551c:	f8 8e       	std	Y+24, r15	; 0x18
    551e:	a9 8e       	std	Y+25, r10	; 0x19
	uint8 bc[9];
	uint8 len = 5;
    5520:	85 e0       	ldi	r24, 0x05	; 5
    5522:	89 83       	std	Y+1, r24	; 0x01
	sint8 result = N_OK;
    5524:	81 e0       	ldi	r24, 0x01	; 1
    5526:	8a 83       	std	Y+2, r24	; 0x02

	bc[0] = cmd;
    5528:	8c 85       	ldd	r24, Y+12	; 0x0c
    552a:	8b 83       	std	Y+3, r24	; 0x03
	switch (cmd) {
    552c:	8c 85       	ldd	r24, Y+12	; 0x0c
    552e:	88 2f       	mov	r24, r24
    5530:	90 e0       	ldi	r25, 0x00	; 0
    5532:	09 2e       	mov	r0, r25
    5534:	00 0c       	add	r0, r0
    5536:	aa 0b       	sbc	r26, r26
    5538:	bb 0b       	sbc	r27, r27
    553a:	41 ec       	ldi	r20, 0xC1	; 193
    553c:	50 e0       	ldi	r21, 0x00	; 0
    553e:	2e e0       	ldi	r18, 0x0E	; 14
    5540:	30 e0       	ldi	r19, 0x00	; 0
    5542:	84 1b       	sub	r24, r20
    5544:	95 0b       	sbc	r25, r21
    5546:	28 17       	cp	r18, r24
    5548:	39 07       	cpc	r19, r25
    554a:	08 f4       	brcc	.+2      	; 0x554e <spi_cmd+0x66>
    554c:	f1 c0       	rjmp	.+482    	; 0x5730 <spi_cmd+0x248>
    554e:	89 5a       	subi	r24, 0xA9	; 169
    5550:	9f 4f       	sbci	r25, 0xFF	; 255
    5552:	fc 01       	movw	r30, r24
    5554:	0c 94 c7 3c 	jmp	0x798e	; 0x798e <__tablejump2__>
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    5558:	8d 85       	ldd	r24, Y+13	; 0x0d
    555a:	9e 85       	ldd	r25, Y+14	; 0x0e
    555c:	af 85       	ldd	r26, Y+15	; 0x0f
    555e:	b8 89       	ldd	r27, Y+16	; 0x10
    5560:	cd 01       	movw	r24, r26
    5562:	aa 27       	eor	r26, r26
    5564:	bb 27       	eor	r27, r27
    5566:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    5568:	8d 85       	ldd	r24, Y+13	; 0x0d
    556a:	9e 85       	ldd	r25, Y+14	; 0x0e
    556c:	af 85       	ldd	r26, Y+15	; 0x0f
    556e:	b8 89       	ldd	r27, Y+16	; 0x10
    5570:	89 2f       	mov	r24, r25
    5572:	9a 2f       	mov	r25, r26
    5574:	ab 2f       	mov	r26, r27
    5576:	bb 27       	eor	r27, r27
    5578:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)adr;
    557a:	8d 85       	ldd	r24, Y+13	; 0x0d
    557c:	8e 83       	std	Y+6, r24	; 0x06
		len = 5;
    557e:	85 e0       	ldi	r24, 0x05	; 5
    5580:	89 83       	std	Y+1, r24	; 0x01
		break;
    5582:	d8 c0       	rjmp	.+432    	; 0x5734 <spi_cmd+0x24c>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    5584:	8d 85       	ldd	r24, Y+13	; 0x0d
    5586:	9e 85       	ldd	r25, Y+14	; 0x0e
    5588:	af 85       	ldd	r26, Y+15	; 0x0f
    558a:	b8 89       	ldd	r27, Y+16	; 0x10
    558c:	89 2f       	mov	r24, r25
    558e:	9a 2f       	mov	r25, r26
    5590:	ab 2f       	mov	r26, r27
    5592:	bb 27       	eor	r27, r27
    5594:	8c 83       	std	Y+4, r24	; 0x04
		if(clockless)  bc[1] |= (1 << 7);
    5596:	89 8d       	ldd	r24, Y+25	; 0x19
    5598:	88 23       	and	r24, r24
    559a:	19 f0       	breq	.+6      	; 0x55a2 <spi_cmd+0xba>
    559c:	8c 81       	ldd	r24, Y+4	; 0x04
    559e:	80 68       	ori	r24, 0x80	; 128
    55a0:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)adr;
    55a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    55a4:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = 0x00;
    55a6:	1e 82       	std	Y+6, r1	; 0x06
		len = 5;
    55a8:	85 e0       	ldi	r24, 0x05	; 5
    55aa:	89 83       	std	Y+1, r24	; 0x01
		break;
    55ac:	c3 c0       	rjmp	.+390    	; 0x5734 <spi_cmd+0x24c>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    55ae:	1c 82       	std	Y+4, r1	; 0x04
		bc[2] = 0x00;
    55b0:	1d 82       	std	Y+5, r1	; 0x05
		bc[3] = 0x00;
    55b2:	1e 82       	std	Y+6, r1	; 0x06
		len = 5;
    55b4:	85 e0       	ldi	r24, 0x05	; 5
    55b6:	89 83       	std	Y+1, r24	; 0x01
		break;
    55b8:	bd c0       	rjmp	.+378    	; 0x5734 <spi_cmd+0x24c>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    55ba:	1c 82       	std	Y+4, r1	; 0x04
		bc[2] = 0x00;
    55bc:	1d 82       	std	Y+5, r1	; 0x05
		bc[3] = 0x00;
    55be:	1e 82       	std	Y+6, r1	; 0x06
		len = 5;
    55c0:	85 e0       	ldi	r24, 0x05	; 5
    55c2:	89 83       	std	Y+1, r24	; 0x01
		break;
    55c4:	b7 c0       	rjmp	.+366    	; 0x5734 <spi_cmd+0x24c>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    55c6:	8f ef       	ldi	r24, 0xFF	; 255
    55c8:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = 0xff;
    55ca:	8f ef       	ldi	r24, 0xFF	; 255
    55cc:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = 0xff;
    55ce:	8f ef       	ldi	r24, 0xFF	; 255
    55d0:	8e 83       	std	Y+6, r24	; 0x06
		len = 5;
    55d2:	85 e0       	ldi	r24, 0x05	; 5
    55d4:	89 83       	std	Y+1, r24	; 0x01
		break;
    55d6:	ae c0       	rjmp	.+348    	; 0x5734 <spi_cmd+0x24c>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    55d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    55da:	9e 85       	ldd	r25, Y+14	; 0x0e
    55dc:	af 85       	ldd	r26, Y+15	; 0x0f
    55de:	b8 89       	ldd	r27, Y+16	; 0x10
    55e0:	cd 01       	movw	r24, r26
    55e2:	aa 27       	eor	r26, r26
    55e4:	bb 27       	eor	r27, r27
    55e6:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    55e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    55ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    55ec:	af 85       	ldd	r26, Y+15	; 0x0f
    55ee:	b8 89       	ldd	r27, Y+16	; 0x10
    55f0:	89 2f       	mov	r24, r25
    55f2:	9a 2f       	mov	r25, r26
    55f4:	ab 2f       	mov	r26, r27
    55f6:	bb 27       	eor	r27, r27
    55f8:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)adr;
    55fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    55fc:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(sz >> 8);
    55fe:	8d 89       	ldd	r24, Y+21	; 0x15
    5600:	9e 89       	ldd	r25, Y+22	; 0x16
    5602:	af 89       	ldd	r26, Y+23	; 0x17
    5604:	b8 8d       	ldd	r27, Y+24	; 0x18
    5606:	89 2f       	mov	r24, r25
    5608:	9a 2f       	mov	r25, r26
    560a:	ab 2f       	mov	r26, r27
    560c:	bb 27       	eor	r27, r27
    560e:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(sz);
    5610:	8d 89       	ldd	r24, Y+21	; 0x15
    5612:	88 87       	std	Y+8, r24	; 0x08
		len = 7;
    5614:	87 e0       	ldi	r24, 0x07	; 7
    5616:	89 83       	std	Y+1, r24	; 0x01
		break;
    5618:	8d c0       	rjmp	.+282    	; 0x5734 <spi_cmd+0x24c>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    561a:	8d 85       	ldd	r24, Y+13	; 0x0d
    561c:	9e 85       	ldd	r25, Y+14	; 0x0e
    561e:	af 85       	ldd	r26, Y+15	; 0x0f
    5620:	b8 89       	ldd	r27, Y+16	; 0x10
    5622:	cd 01       	movw	r24, r26
    5624:	aa 27       	eor	r26, r26
    5626:	bb 27       	eor	r27, r27
    5628:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    562a:	8d 85       	ldd	r24, Y+13	; 0x0d
    562c:	9e 85       	ldd	r25, Y+14	; 0x0e
    562e:	af 85       	ldd	r26, Y+15	; 0x0f
    5630:	b8 89       	ldd	r27, Y+16	; 0x10
    5632:	89 2f       	mov	r24, r25
    5634:	9a 2f       	mov	r25, r26
    5636:	ab 2f       	mov	r26, r27
    5638:	bb 27       	eor	r27, r27
    563a:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)adr;
    563c:	8d 85       	ldd	r24, Y+13	; 0x0d
    563e:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(sz >> 16);
    5640:	8d 89       	ldd	r24, Y+21	; 0x15
    5642:	9e 89       	ldd	r25, Y+22	; 0x16
    5644:	af 89       	ldd	r26, Y+23	; 0x17
    5646:	b8 8d       	ldd	r27, Y+24	; 0x18
    5648:	cd 01       	movw	r24, r26
    564a:	aa 27       	eor	r26, r26
    564c:	bb 27       	eor	r27, r27
    564e:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(sz >> 8);
    5650:	8d 89       	ldd	r24, Y+21	; 0x15
    5652:	9e 89       	ldd	r25, Y+22	; 0x16
    5654:	af 89       	ldd	r26, Y+23	; 0x17
    5656:	b8 8d       	ldd	r27, Y+24	; 0x18
    5658:	89 2f       	mov	r24, r25
    565a:	9a 2f       	mov	r25, r26
    565c:	ab 2f       	mov	r26, r27
    565e:	bb 27       	eor	r27, r27
    5660:	88 87       	std	Y+8, r24	; 0x08
		bc[6] = (uint8)(sz);
    5662:	8d 89       	ldd	r24, Y+21	; 0x15
    5664:	89 87       	std	Y+9, r24	; 0x09
		len = 8;
    5666:	88 e0       	ldi	r24, 0x08	; 8
    5668:	89 83       	std	Y+1, r24	; 0x01
		break;
    566a:	64 c0       	rjmp	.+200    	; 0x5734 <spi_cmd+0x24c>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    566c:	8d 85       	ldd	r24, Y+13	; 0x0d
    566e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5670:	af 85       	ldd	r26, Y+15	; 0x0f
    5672:	b8 89       	ldd	r27, Y+16	; 0x10
    5674:	89 2f       	mov	r24, r25
    5676:	9a 2f       	mov	r25, r26
    5678:	ab 2f       	mov	r26, r27
    567a:	bb 27       	eor	r27, r27
    567c:	8c 83       	std	Y+4, r24	; 0x04
		if(clockless)  bc[1] |= (1 << 7);
    567e:	89 8d       	ldd	r24, Y+25	; 0x19
    5680:	88 23       	and	r24, r24
    5682:	19 f0       	breq	.+6      	; 0x568a <spi_cmd+0x1a2>
    5684:	8c 81       	ldd	r24, Y+4	; 0x04
    5686:	80 68       	ori	r24, 0x80	; 128
    5688:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr);
    568a:	8d 85       	ldd	r24, Y+13	; 0x0d
    568c:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)(u32data >> 24);
    568e:	89 89       	ldd	r24, Y+17	; 0x11
    5690:	9a 89       	ldd	r25, Y+18	; 0x12
    5692:	ab 89       	ldd	r26, Y+19	; 0x13
    5694:	bc 89       	ldd	r27, Y+20	; 0x14
    5696:	8b 2f       	mov	r24, r27
    5698:	99 27       	eor	r25, r25
    569a:	aa 27       	eor	r26, r26
    569c:	bb 27       	eor	r27, r27
    569e:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(u32data >> 16);
    56a0:	89 89       	ldd	r24, Y+17	; 0x11
    56a2:	9a 89       	ldd	r25, Y+18	; 0x12
    56a4:	ab 89       	ldd	r26, Y+19	; 0x13
    56a6:	bc 89       	ldd	r27, Y+20	; 0x14
    56a8:	cd 01       	movw	r24, r26
    56aa:	aa 27       	eor	r26, r26
    56ac:	bb 27       	eor	r27, r27
    56ae:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(u32data >> 8);
    56b0:	89 89       	ldd	r24, Y+17	; 0x11
    56b2:	9a 89       	ldd	r25, Y+18	; 0x12
    56b4:	ab 89       	ldd	r26, Y+19	; 0x13
    56b6:	bc 89       	ldd	r27, Y+20	; 0x14
    56b8:	89 2f       	mov	r24, r25
    56ba:	9a 2f       	mov	r25, r26
    56bc:	ab 2f       	mov	r26, r27
    56be:	bb 27       	eor	r27, r27
    56c0:	88 87       	std	Y+8, r24	; 0x08
		bc[6] = (uint8)(u32data);
    56c2:	89 89       	ldd	r24, Y+17	; 0x11
    56c4:	89 87       	std	Y+9, r24	; 0x09
		len = 8;
    56c6:	88 e0       	ldi	r24, 0x08	; 8
    56c8:	89 83       	std	Y+1, r24	; 0x01
		break;
    56ca:	34 c0       	rjmp	.+104    	; 0x5734 <spi_cmd+0x24c>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    56cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    56ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    56d0:	af 85       	ldd	r26, Y+15	; 0x0f
    56d2:	b8 89       	ldd	r27, Y+16	; 0x10
    56d4:	cd 01       	movw	r24, r26
    56d6:	aa 27       	eor	r26, r26
    56d8:	bb 27       	eor	r27, r27
    56da:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    56dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    56de:	9e 85       	ldd	r25, Y+14	; 0x0e
    56e0:	af 85       	ldd	r26, Y+15	; 0x0f
    56e2:	b8 89       	ldd	r27, Y+16	; 0x10
    56e4:	89 2f       	mov	r24, r25
    56e6:	9a 2f       	mov	r25, r26
    56e8:	ab 2f       	mov	r26, r27
    56ea:	bb 27       	eor	r27, r27
    56ec:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)(adr);
    56ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    56f0:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(u32data >> 24);
    56f2:	89 89       	ldd	r24, Y+17	; 0x11
    56f4:	9a 89       	ldd	r25, Y+18	; 0x12
    56f6:	ab 89       	ldd	r26, Y+19	; 0x13
    56f8:	bc 89       	ldd	r27, Y+20	; 0x14
    56fa:	8b 2f       	mov	r24, r27
    56fc:	99 27       	eor	r25, r25
    56fe:	aa 27       	eor	r26, r26
    5700:	bb 27       	eor	r27, r27
    5702:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(u32data >> 16);
    5704:	89 89       	ldd	r24, Y+17	; 0x11
    5706:	9a 89       	ldd	r25, Y+18	; 0x12
    5708:	ab 89       	ldd	r26, Y+19	; 0x13
    570a:	bc 89       	ldd	r27, Y+20	; 0x14
    570c:	cd 01       	movw	r24, r26
    570e:	aa 27       	eor	r26, r26
    5710:	bb 27       	eor	r27, r27
    5712:	88 87       	std	Y+8, r24	; 0x08
		bc[6] = (uint8)(u32data >> 8);
    5714:	89 89       	ldd	r24, Y+17	; 0x11
    5716:	9a 89       	ldd	r25, Y+18	; 0x12
    5718:	ab 89       	ldd	r26, Y+19	; 0x13
    571a:	bc 89       	ldd	r27, Y+20	; 0x14
    571c:	89 2f       	mov	r24, r25
    571e:	9a 2f       	mov	r25, r26
    5720:	ab 2f       	mov	r26, r27
    5722:	bb 27       	eor	r27, r27
    5724:	89 87       	std	Y+9, r24	; 0x09
		bc[7] = (uint8)(u32data);
    5726:	89 89       	ldd	r24, Y+17	; 0x11
    5728:	8a 87       	std	Y+10, r24	; 0x0a
		len = 9;
    572a:	89 e0       	ldi	r24, 0x09	; 9
    572c:	89 83       	std	Y+1, r24	; 0x01
		break;
    572e:	02 c0       	rjmp	.+4      	; 0x5734 <spi_cmd+0x24c>
	default:
		result = N_FAIL;
    5730:	1a 82       	std	Y+2, r1	; 0x02
		break;
    5732:	00 00       	nop
	}

	if (result) {
    5734:	8a 81       	ldd	r24, Y+2	; 0x02
    5736:	88 23       	and	r24, r24
    5738:	89 f1       	breq	.+98     	; 0x579c <spi_cmd+0x2b4>
		if (!gu8Crc_off)
    573a:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <gu8Crc_off>
    573e:	88 23       	and	r24, r24
    5740:	f9 f4       	brne	.+62     	; 0x5780 <spi_cmd+0x298>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    5742:	89 81       	ldd	r24, Y+1	; 0x01
    5744:	88 2f       	mov	r24, r24
    5746:	90 e0       	ldi	r25, 0x00	; 0
    5748:	8c 01       	movw	r16, r24
    574a:	01 50       	subi	r16, 0x01	; 1
    574c:	11 09       	sbc	r17, r1
    574e:	89 81       	ldd	r24, Y+1	; 0x01
    5750:	88 2f       	mov	r24, r24
    5752:	90 e0       	ldi	r25, 0x00	; 0
    5754:	01 97       	sbiw	r24, 0x01	; 1
    5756:	09 2e       	mov	r0, r25
    5758:	00 0c       	add	r0, r0
    575a:	aa 0b       	sbc	r26, r26
    575c:	bb 0b       	sbc	r27, r27
    575e:	be 01       	movw	r22, r28
    5760:	6d 5f       	subi	r22, 0xFD	; 253
    5762:	7f 4f       	sbci	r23, 0xFF	; 255
    5764:	9c 01       	movw	r18, r24
    5766:	ad 01       	movw	r20, r26
    5768:	8f e7       	ldi	r24, 0x7F	; 127
    576a:	0e 94 3e 2a 	call	0x547c	; 0x547c <crc7>
    576e:	28 2f       	mov	r18, r24
    5770:	22 0f       	add	r18, r18
    5772:	ce 01       	movw	r24, r28
    5774:	03 96       	adiw	r24, 0x03	; 3
    5776:	80 0f       	add	r24, r16
    5778:	91 1f       	adc	r25, r17
    577a:	fc 01       	movw	r30, r24
    577c:	20 83       	st	Z, r18
    577e:	03 c0       	rjmp	.+6      	; 0x5786 <spi_cmd+0x29e>
		else
			len-=1;
    5780:	89 81       	ldd	r24, Y+1	; 0x01
    5782:	81 50       	subi	r24, 0x01	; 1
    5784:	89 83       	std	Y+1, r24	; 0x01

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    5786:	89 81       	ldd	r24, Y+1	; 0x01
    5788:	28 2f       	mov	r18, r24
    578a:	30 e0       	ldi	r19, 0x00	; 0
    578c:	ce 01       	movw	r24, r28
    578e:	03 96       	adiw	r24, 0x03	; 3
    5790:	b9 01       	movw	r22, r18
    5792:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <nmi_spi_write>
    5796:	88 23       	and	r24, r24
    5798:	09 f0       	breq	.+2      	; 0x579c <spi_cmd+0x2b4>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
    579a:	1a 82       	std	Y+2, r1	; 0x02
		}
	}

	return result;
    579c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    579e:	69 96       	adiw	r28, 0x19	; 25
    57a0:	cd bf       	out	0x3d, r28	; 61
    57a2:	de bf       	out	0x3e, r29	; 62
    57a4:	df 91       	pop	r29
    57a6:	cf 91       	pop	r28
    57a8:	1f 91       	pop	r17
    57aa:	0f 91       	pop	r16
    57ac:	ff 90       	pop	r15
    57ae:	ef 90       	pop	r14
    57b0:	df 90       	pop	r13
    57b2:	cf 90       	pop	r12
    57b4:	af 90       	pop	r10
    57b6:	08 95       	ret

000057b8 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    57b8:	cf 93       	push	r28
    57ba:	df 93       	push	r29
    57bc:	cd b7       	in	r28, 0x3d	; 61
    57be:	de b7       	in	r29, 0x3e	; 62
    57c0:	26 97       	sbiw	r28, 0x06	; 6
    57c2:	cd bf       	out	0x3d, r28	; 61
    57c4:	de bf       	out	0x3e, r29	; 62
    57c6:	8e 83       	std	Y+6, r24	; 0x06
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    57c8:	81 e0       	ldi	r24, 0x01	; 1
    57ca:	8a 83       	std	Y+2, r24	; 0x02

    if (!gu8Crc_off)
    57cc:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <gu8Crc_off>
    57d0:	88 23       	and	r24, r24
    57d2:	19 f4       	brne	.+6      	; 0x57da <spi_data_rsp+0x22>
		len = 2;
    57d4:	82 e0       	ldi	r24, 0x02	; 2
    57d6:	89 83       	std	Y+1, r24	; 0x01
    57d8:	02 c0       	rjmp	.+4      	; 0x57de <spi_data_rsp+0x26>
	else
		len = 3;
    57da:	83 e0       	ldi	r24, 0x03	; 3
    57dc:	89 83       	std	Y+1, r24	; 0x01

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    57de:	89 81       	ldd	r24, Y+1	; 0x01
    57e0:	28 2f       	mov	r18, r24
    57e2:	30 e0       	ldi	r19, 0x00	; 0
    57e4:	ce 01       	movw	r24, r28
    57e6:	03 96       	adiw	r24, 0x03	; 3
    57e8:	b9 01       	movw	r22, r18
    57ea:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <nmi_spi_read>
    57ee:	88 23       	and	r24, r24
    57f0:	11 f0       	breq	.+4      	; 0x57f6 <spi_data_rsp+0x3e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
    57f2:	1a 82       	std	Y+2, r1	; 0x02
		goto _fail_;
    57f4:	1c c0       	rjmp	.+56     	; 0x582e <spi_data_rsp+0x76>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    57f6:	89 81       	ldd	r24, Y+1	; 0x01
    57f8:	88 2f       	mov	r24, r24
    57fa:	90 e0       	ldi	r25, 0x00	; 0
    57fc:	01 97       	sbiw	r24, 0x01	; 1
    57fe:	9e 01       	movw	r18, r28
    5800:	2d 5f       	subi	r18, 0xFD	; 253
    5802:	3f 4f       	sbci	r19, 0xFF	; 255
    5804:	82 0f       	add	r24, r18
    5806:	93 1f       	adc	r25, r19
    5808:	fc 01       	movw	r30, r24
    580a:	80 81       	ld	r24, Z
    580c:	88 23       	and	r24, r24
    580e:	69 f4       	brne	.+26     	; 0x582a <spi_data_rsp+0x72>
    5810:	89 81       	ldd	r24, Y+1	; 0x01
    5812:	88 2f       	mov	r24, r24
    5814:	90 e0       	ldi	r25, 0x00	; 0
    5816:	02 97       	sbiw	r24, 0x02	; 2
    5818:	9e 01       	movw	r18, r28
    581a:	2d 5f       	subi	r18, 0xFD	; 253
    581c:	3f 4f       	sbci	r19, 0xFF	; 255
    581e:	82 0f       	add	r24, r18
    5820:	93 1f       	adc	r25, r19
    5822:	fc 01       	movw	r30, r24
    5824:	80 81       	ld	r24, Z
    5826:	83 3c       	cpi	r24, 0xC3	; 195
    5828:	11 f0       	breq	.+4      	; 0x582e <spi_data_rsp+0x76>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
		result = N_FAIL;
    582a:	1a 82       	std	Y+2, r1	; 0x02
		goto _fail_;
    582c:	00 00       	nop
	}
_fail_:

	return result;
    582e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5830:	26 96       	adiw	r28, 0x06	; 6
    5832:	cd bf       	out	0x3d, r28	; 61
    5834:	de bf       	out	0x3e, r29	; 62
    5836:	df 91       	pop	r29
    5838:	cf 91       	pop	r28
    583a:	08 95       	ret

0000583c <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    583c:	cf 93       	push	r28
    583e:	df 93       	push	r29
    5840:	00 d0       	rcall	.+0      	; 0x5842 <spi_cmd_rsp+0x6>
    5842:	00 d0       	rcall	.+0      	; 0x5844 <spi_cmd_rsp+0x8>
    5844:	cd b7       	in	r28, 0x3d	; 61
    5846:	de b7       	in	r29, 0x3e	; 62
    5848:	8c 83       	std	Y+4, r24	; 0x04
	uint8 rsp;
	sint8 result = N_OK;
    584a:	81 e0       	ldi	r24, 0x01	; 1
    584c:	89 83       	std	Y+1, r24	; 0x01
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    584e:	8c 81       	ldd	r24, Y+4	; 0x04
    5850:	8f 3c       	cpi	r24, 0xCF	; 207
    5852:	31 f0       	breq	.+12     	; 0x5860 <spi_cmd_rsp+0x24>
    5854:	8c 81       	ldd	r24, Y+4	; 0x04
    5856:	85 3c       	cpi	r24, 0xC5	; 197
    5858:	19 f0       	breq	.+6      	; 0x5860 <spi_cmd_rsp+0x24>
		 (cmd == CMD_TERMINATE) ||
    585a:	8c 81       	ldd	r24, Y+4	; 0x04
    585c:	86 3c       	cpi	r24, 0xC6	; 198
    585e:	51 f4       	brne	.+20     	; 0x5874 <spi_cmd_rsp+0x38>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5860:	ce 01       	movw	r24, r28
    5862:	03 96       	adiw	r24, 0x03	; 3
    5864:	61 e0       	ldi	r22, 0x01	; 1
    5866:	70 e0       	ldi	r23, 0x00	; 0
    5868:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <nmi_spi_read>
    586c:	88 23       	and	r24, r24
    586e:	11 f0       	breq	.+4      	; 0x5874 <spi_cmd_rsp+0x38>
			result = N_FAIL;
    5870:	19 82       	std	Y+1, r1	; 0x01
			goto _fail_;
    5872:	2b c0       	rjmp	.+86     	; 0x58ca <spi_cmd_rsp+0x8e>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    5874:	8a e0       	ldi	r24, 0x0A	; 10
    5876:	8a 83       	std	Y+2, r24	; 0x02
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5878:	ce 01       	movw	r24, r28
    587a:	03 96       	adiw	r24, 0x03	; 3
    587c:	61 e0       	ldi	r22, 0x01	; 1
    587e:	70 e0       	ldi	r23, 0x00	; 0
    5880:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <nmi_spi_read>
    5884:	88 23       	and	r24, r24
    5886:	11 f0       	breq	.+4      	; 0x588c <spi_cmd_rsp+0x50>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
    5888:	19 82       	std	Y+1, r1	; 0x01
			goto _fail_;
    588a:	1f c0       	rjmp	.+62     	; 0x58ca <spi_cmd_rsp+0x8e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    588c:	9b 81       	ldd	r25, Y+3	; 0x03
    588e:	8c 81       	ldd	r24, Y+4	; 0x04
    5890:	98 17       	cp	r25, r24
    5892:	31 f0       	breq	.+12     	; 0x58a0 <spi_cmd_rsp+0x64>
    5894:	8a 81       	ldd	r24, Y+2	; 0x02
    5896:	98 2f       	mov	r25, r24
    5898:	91 50       	subi	r25, 0x01	; 1
    589a:	9a 83       	std	Y+2, r25	; 0x02
    589c:	18 16       	cp	r1, r24
    589e:	64 f3       	brlt	.-40     	; 0x5878 <spi_cmd_rsp+0x3c>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    58a0:	8a e0       	ldi	r24, 0x0A	; 10
    58a2:	8a 83       	std	Y+2, r24	; 0x02
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    58a4:	ce 01       	movw	r24, r28
    58a6:	03 96       	adiw	r24, 0x03	; 3
    58a8:	61 e0       	ldi	r22, 0x01	; 1
    58aa:	70 e0       	ldi	r23, 0x00	; 0
    58ac:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <nmi_spi_read>
    58b0:	88 23       	and	r24, r24
    58b2:	11 f0       	breq	.+4      	; 0x58b8 <spi_cmd_rsp+0x7c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
    58b4:	19 82       	std	Y+1, r1	; 0x01
			goto _fail_;
    58b6:	09 c0       	rjmp	.+18     	; 0x58ca <spi_cmd_rsp+0x8e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    58b8:	8b 81       	ldd	r24, Y+3	; 0x03
    58ba:	88 23       	and	r24, r24
    58bc:	31 f0       	breq	.+12     	; 0x58ca <spi_cmd_rsp+0x8e>
    58be:	8a 81       	ldd	r24, Y+2	; 0x02
    58c0:	98 2f       	mov	r25, r24
    58c2:	91 50       	subi	r25, 0x01	; 1
    58c4:	9a 83       	std	Y+2, r25	; 0x02
    58c6:	18 16       	cp	r1, r24
    58c8:	6c f3       	brlt	.-38     	; 0x58a4 <spi_cmd_rsp+0x68>

_fail_:

	return result;
    58ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    58cc:	24 96       	adiw	r28, 0x04	; 4
    58ce:	cd bf       	out	0x3d, r28	; 61
    58d0:	de bf       	out	0x3e, r29	; 62
    58d2:	df 91       	pop	r29
    58d4:	cf 91       	pop	r28
    58d6:	08 95       	ret

000058d8 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    58d8:	cf 93       	push	r28
    58da:	df 93       	push	r29
    58dc:	cd b7       	in	r28, 0x3d	; 61
    58de:	de b7       	in	r29, 0x3e	; 62
    58e0:	2f 97       	sbiw	r28, 0x0f	; 15
    58e2:	cd bf       	out	0x3d, r28	; 61
    58e4:	de bf       	out	0x3e, r29	; 62
    58e6:	8b 87       	std	Y+11, r24	; 0x0b
    58e8:	9c 87       	std	Y+12, r25	; 0x0c
    58ea:	6d 87       	std	Y+13, r22	; 0x0d
    58ec:	7e 87       	std	Y+14, r23	; 0x0e
    58ee:	4f 87       	std	Y+15, r20	; 0x0f
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    58f0:	81 e0       	ldi	r24, 0x01	; 1
    58f2:	8f 83       	std	Y+7, r24	; 0x07
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    58f4:	1b 82       	std	Y+3, r1	; 0x03
    58f6:	1c 82       	std	Y+4, r1	; 0x04
	do {
		if (sz <= DATA_PKT_SZ)
    58f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    58fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    58fc:	81 30       	cpi	r24, 0x01	; 1
    58fe:	90 42       	sbci	r25, 0x20	; 32
    5900:	28 f4       	brcc	.+10     	; 0x590c <spi_data_read+0x34>
			nbytes = sz;
    5902:	8d 85       	ldd	r24, Y+13	; 0x0d
    5904:	9e 85       	ldd	r25, Y+14	; 0x0e
    5906:	8d 83       	std	Y+5, r24	; 0x05
    5908:	9e 83       	std	Y+6, r25	; 0x06
    590a:	04 c0       	rjmp	.+8      	; 0x5914 <spi_data_read+0x3c>
		else
			nbytes = DATA_PKT_SZ;
    590c:	80 e0       	ldi	r24, 0x00	; 0
    590e:	90 e2       	ldi	r25, 0x20	; 32
    5910:	8d 83       	std	Y+5, r24	; 0x05
    5912:	9e 83       	std	Y+6, r25	; 0x06

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    5914:	8a e0       	ldi	r24, 0x0A	; 10
    5916:	90 e0       	ldi	r25, 0x00	; 0
    5918:	89 83       	std	Y+1, r24	; 0x01
    591a:	9a 83       	std	Y+2, r25	; 0x02
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    591c:	ce 01       	movw	r24, r28
    591e:	0a 96       	adiw	r24, 0x0a	; 10
    5920:	61 e0       	ldi	r22, 0x01	; 1
    5922:	70 e0       	ldi	r23, 0x00	; 0
    5924:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <nmi_spi_read>
    5928:	88 23       	and	r24, r24
    592a:	11 f0       	breq	.+4      	; 0x5930 <spi_data_read+0x58>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
    592c:	1f 82       	std	Y+7, r1	; 0x07
				break;
    592e:	14 c0       	rjmp	.+40     	; 0x5958 <spi_data_read+0x80>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    5930:	8a 85       	ldd	r24, Y+10	; 0x0a
    5932:	82 95       	swap	r24
    5934:	8f 70       	andi	r24, 0x0F	; 15
    5936:	88 2f       	mov	r24, r24
    5938:	90 e0       	ldi	r25, 0x00	; 0
    593a:	8f 70       	andi	r24, 0x0F	; 15
    593c:	99 27       	eor	r25, r25
    593e:	0f 97       	sbiw	r24, 0x0f	; 15
    5940:	51 f0       	breq	.+20     	; 0x5956 <spi_data_read+0x7e>
				break;
		} while (retry--);
    5942:	89 81       	ldd	r24, Y+1	; 0x01
    5944:	9a 81       	ldd	r25, Y+2	; 0x02
    5946:	9c 01       	movw	r18, r24
    5948:	21 50       	subi	r18, 0x01	; 1
    594a:	31 09       	sbc	r19, r1
    594c:	29 83       	std	Y+1, r18	; 0x01
    594e:	3a 83       	std	Y+2, r19	; 0x02
    5950:	89 2b       	or	r24, r25
    5952:	21 f7       	brne	.-56     	; 0x591c <spi_data_read+0x44>
    5954:	01 c0       	rjmp	.+2      	; 0x5958 <spi_data_read+0x80>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    5956:	00 00       	nop
		} while (retry--);

		if (result == N_FAIL)
    5958:	8f 81       	ldd	r24, Y+7	; 0x07
    595a:	88 23       	and	r24, r24
    595c:	09 f4       	brne	.+2      	; 0x5960 <spi_data_read+0x88>
    595e:	3f c0       	rjmp	.+126    	; 0x59de <spi_data_read+0x106>
			break;

		if (retry <= 0) {
    5960:	89 81       	ldd	r24, Y+1	; 0x01
    5962:	9a 81       	ldd	r25, Y+2	; 0x02
    5964:	18 16       	cp	r1, r24
    5966:	19 06       	cpc	r1, r25
    5968:	14 f0       	brlt	.+4      	; 0x596e <spi_data_read+0x96>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
    596a:	1f 82       	std	Y+7, r1	; 0x07
			break;
    596c:	39 c0       	rjmp	.+114    	; 0x59e0 <spi_data_read+0x108>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    596e:	4d 81       	ldd	r20, Y+5	; 0x05
    5970:	5e 81       	ldd	r21, Y+6	; 0x06
    5972:	8b 81       	ldd	r24, Y+3	; 0x03
    5974:	9c 81       	ldd	r25, Y+4	; 0x04
    5976:	2b 85       	ldd	r18, Y+11	; 0x0b
    5978:	3c 85       	ldd	r19, Y+12	; 0x0c
    597a:	82 0f       	add	r24, r18
    597c:	93 1f       	adc	r25, r19
    597e:	ba 01       	movw	r22, r20
    5980:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <nmi_spi_read>
    5984:	88 23       	and	r24, r24
    5986:	11 f0       	breq	.+4      	; 0x598c <spi_data_read+0xb4>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
    5988:	1f 82       	std	Y+7, r1	; 0x07
			break;
    598a:	2a c0       	rjmp	.+84     	; 0x59e0 <spi_data_read+0x108>
		}
		if(!clockless)
    598c:	8f 85       	ldd	r24, Y+15	; 0x0f
    598e:	88 23       	and	r24, r24
    5990:	71 f4       	brne	.+28     	; 0x59ae <spi_data_read+0xd6>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    5992:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <gu8Crc_off>
    5996:	88 23       	and	r24, r24
    5998:	51 f4       	brne	.+20     	; 0x59ae <spi_data_read+0xd6>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    599a:	ce 01       	movw	r24, r28
    599c:	08 96       	adiw	r24, 0x08	; 8
    599e:	62 e0       	ldi	r22, 0x02	; 2
    59a0:	70 e0       	ldi	r23, 0x00	; 0
    59a2:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <nmi_spi_read>
    59a6:	88 23       	and	r24, r24
    59a8:	11 f0       	breq	.+4      	; 0x59ae <spi_data_read+0xd6>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
					result = N_FAIL;
    59aa:	1f 82       	std	Y+7, r1	; 0x07
					break;
    59ac:	19 c0       	rjmp	.+50     	; 0x59e0 <spi_data_read+0x108>
				}
			}
		}
		ix += nbytes;
    59ae:	2b 81       	ldd	r18, Y+3	; 0x03
    59b0:	3c 81       	ldd	r19, Y+4	; 0x04
    59b2:	8d 81       	ldd	r24, Y+5	; 0x05
    59b4:	9e 81       	ldd	r25, Y+6	; 0x06
    59b6:	82 0f       	add	r24, r18
    59b8:	93 1f       	adc	r25, r19
    59ba:	8b 83       	std	Y+3, r24	; 0x03
    59bc:	9c 83       	std	Y+4, r25	; 0x04
		sz -= nbytes;
    59be:	8d 81       	ldd	r24, Y+5	; 0x05
    59c0:	9e 81       	ldd	r25, Y+6	; 0x06
    59c2:	2d 85       	ldd	r18, Y+13	; 0x0d
    59c4:	3e 85       	ldd	r19, Y+14	; 0x0e
    59c6:	a9 01       	movw	r20, r18
    59c8:	48 1b       	sub	r20, r24
    59ca:	59 0b       	sbc	r21, r25
    59cc:	ca 01       	movw	r24, r20
    59ce:	8d 87       	std	Y+13, r24	; 0x0d
    59d0:	9e 87       	std	Y+14, r25	; 0x0e

	} while (sz);
    59d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    59d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    59d6:	89 2b       	or	r24, r25
    59d8:	09 f0       	breq	.+2      	; 0x59dc <spi_data_read+0x104>
    59da:	8e cf       	rjmp	.-228    	; 0x58f8 <spi_data_read+0x20>
    59dc:	01 c0       	rjmp	.+2      	; 0x59e0 <spi_data_read+0x108>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    59de:	00 00       	nop
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    59e0:	8f 81       	ldd	r24, Y+7	; 0x07
}
    59e2:	2f 96       	adiw	r28, 0x0f	; 15
    59e4:	cd bf       	out	0x3d, r28	; 61
    59e6:	de bf       	out	0x3e, r29	; 62
    59e8:	df 91       	pop	r29
    59ea:	cf 91       	pop	r28
    59ec:	08 95       	ret

000059ee <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    59ee:	cf 93       	push	r28
    59f0:	df 93       	push	r29
    59f2:	cd b7       	in	r28, 0x3d	; 61
    59f4:	de b7       	in	r29, 0x3e	; 62
    59f6:	2d 97       	sbiw	r28, 0x0d	; 13
    59f8:	cd bf       	out	0x3d, r28	; 61
    59fa:	de bf       	out	0x3e, r29	; 62
    59fc:	8a 87       	std	Y+10, r24	; 0x0a
    59fe:	9b 87       	std	Y+11, r25	; 0x0b
    5a00:	6c 87       	std	Y+12, r22	; 0x0c
    5a02:	7d 87       	std	Y+13, r23	; 0x0d
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    5a04:	81 e0       	ldi	r24, 0x01	; 1
    5a06:	8d 83       	std	Y+5, r24	; 0x05
	uint8 cmd, order, crc[2] = {0};
    5a08:	18 86       	std	Y+8, r1	; 0x08
    5a0a:	19 86       	std	Y+9, r1	; 0x09
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    5a0c:	19 82       	std	Y+1, r1	; 0x01
    5a0e:	1a 82       	std	Y+2, r1	; 0x02
	do {
		if (sz <= DATA_PKT_SZ)
    5a10:	8c 85       	ldd	r24, Y+12	; 0x0c
    5a12:	9d 85       	ldd	r25, Y+13	; 0x0d
    5a14:	81 30       	cpi	r24, 0x01	; 1
    5a16:	90 42       	sbci	r25, 0x20	; 32
    5a18:	28 f4       	brcc	.+10     	; 0x5a24 <spi_data_write+0x36>
			nbytes = sz;
    5a1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    5a1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    5a1e:	8b 83       	std	Y+3, r24	; 0x03
    5a20:	9c 83       	std	Y+4, r25	; 0x04
    5a22:	04 c0       	rjmp	.+8      	; 0x5a2c <spi_data_write+0x3e>
		else
			nbytes = DATA_PKT_SZ;
    5a24:	80 e0       	ldi	r24, 0x00	; 0
    5a26:	90 e2       	ldi	r25, 0x20	; 32
    5a28:	8b 83       	std	Y+3, r24	; 0x03
    5a2a:	9c 83       	std	Y+4, r25	; 0x04

		/**
			Write command
		**/
		cmd = 0xf0;
    5a2c:	80 ef       	ldi	r24, 0xF0	; 240
    5a2e:	8f 83       	std	Y+7, r24	; 0x07
		if (ix == 0)  {
    5a30:	89 81       	ldd	r24, Y+1	; 0x01
    5a32:	9a 81       	ldd	r25, Y+2	; 0x02
    5a34:	89 2b       	or	r24, r25
    5a36:	59 f4       	brne	.+22     	; 0x5a4e <spi_data_write+0x60>
			if (sz <= DATA_PKT_SZ)
    5a38:	8c 85       	ldd	r24, Y+12	; 0x0c
    5a3a:	9d 85       	ldd	r25, Y+13	; 0x0d
    5a3c:	81 30       	cpi	r24, 0x01	; 1
    5a3e:	90 42       	sbci	r25, 0x20	; 32
    5a40:	18 f4       	brcc	.+6      	; 0x5a48 <spi_data_write+0x5a>
				order = 0x3;
    5a42:	83 e0       	ldi	r24, 0x03	; 3
    5a44:	8e 83       	std	Y+6, r24	; 0x06
    5a46:	0d c0       	rjmp	.+26     	; 0x5a62 <spi_data_write+0x74>
			else
				order = 0x1;
    5a48:	81 e0       	ldi	r24, 0x01	; 1
    5a4a:	8e 83       	std	Y+6, r24	; 0x06
    5a4c:	0a c0       	rjmp	.+20     	; 0x5a62 <spi_data_write+0x74>
		} else {
			if (sz <= DATA_PKT_SZ)
    5a4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5a50:	9d 85       	ldd	r25, Y+13	; 0x0d
    5a52:	81 30       	cpi	r24, 0x01	; 1
    5a54:	90 42       	sbci	r25, 0x20	; 32
    5a56:	18 f4       	brcc	.+6      	; 0x5a5e <spi_data_write+0x70>
				order = 0x3;
    5a58:	83 e0       	ldi	r24, 0x03	; 3
    5a5a:	8e 83       	std	Y+6, r24	; 0x06
    5a5c:	02 c0       	rjmp	.+4      	; 0x5a62 <spi_data_write+0x74>
			else
				order = 0x2;
    5a5e:	82 e0       	ldi	r24, 0x02	; 2
    5a60:	8e 83       	std	Y+6, r24	; 0x06
		}
		cmd |= order;
    5a62:	9f 81       	ldd	r25, Y+7	; 0x07
    5a64:	8e 81       	ldd	r24, Y+6	; 0x06
    5a66:	89 2b       	or	r24, r25
    5a68:	8f 83       	std	Y+7, r24	; 0x07
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    5a6a:	ce 01       	movw	r24, r28
    5a6c:	07 96       	adiw	r24, 0x07	; 7
    5a6e:	61 e0       	ldi	r22, 0x01	; 1
    5a70:	70 e0       	ldi	r23, 0x00	; 0
    5a72:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <nmi_spi_write>
    5a76:	88 23       	and	r24, r24
    5a78:	11 f0       	breq	.+4      	; 0x5a7e <spi_data_write+0x90>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
			result = N_FAIL;
    5a7a:	1d 82       	std	Y+5, r1	; 0x05
			break;
    5a7c:	34 c0       	rjmp	.+104    	; 0x5ae6 <spi_data_write+0xf8>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    5a7e:	89 81       	ldd	r24, Y+1	; 0x01
    5a80:	9a 81       	ldd	r25, Y+2	; 0x02
    5a82:	2a 85       	ldd	r18, Y+10	; 0x0a
    5a84:	3b 85       	ldd	r19, Y+11	; 0x0b
    5a86:	82 0f       	add	r24, r18
    5a88:	93 1f       	adc	r25, r19
    5a8a:	2b 81       	ldd	r18, Y+3	; 0x03
    5a8c:	3c 81       	ldd	r19, Y+4	; 0x04
    5a8e:	b9 01       	movw	r22, r18
    5a90:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <nmi_spi_write>
    5a94:	88 23       	and	r24, r24
    5a96:	11 f0       	breq	.+4      	; 0x5a9c <spi_data_write+0xae>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
			result = N_FAIL;
    5a98:	1d 82       	std	Y+5, r1	; 0x05
			break;
    5a9a:	25 c0       	rjmp	.+74     	; 0x5ae6 <spi_data_write+0xf8>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    5a9c:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <gu8Crc_off>
    5aa0:	88 23       	and	r24, r24
    5aa2:	51 f4       	brne	.+20     	; 0x5ab8 <spi_data_write+0xca>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    5aa4:	ce 01       	movw	r24, r28
    5aa6:	08 96       	adiw	r24, 0x08	; 8
    5aa8:	62 e0       	ldi	r22, 0x02	; 2
    5aaa:	70 e0       	ldi	r23, 0x00	; 0
    5aac:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <nmi_spi_write>
    5ab0:	88 23       	and	r24, r24
    5ab2:	11 f0       	breq	.+4      	; 0x5ab8 <spi_data_write+0xca>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
				result = N_FAIL;
    5ab4:	1d 82       	std	Y+5, r1	; 0x05
				break;
    5ab6:	17 c0       	rjmp	.+46     	; 0x5ae6 <spi_data_write+0xf8>
			}
		}

		ix += nbytes;
    5ab8:	29 81       	ldd	r18, Y+1	; 0x01
    5aba:	3a 81       	ldd	r19, Y+2	; 0x02
    5abc:	8b 81       	ldd	r24, Y+3	; 0x03
    5abe:	9c 81       	ldd	r25, Y+4	; 0x04
    5ac0:	82 0f       	add	r24, r18
    5ac2:	93 1f       	adc	r25, r19
    5ac4:	89 83       	std	Y+1, r24	; 0x01
    5ac6:	9a 83       	std	Y+2, r25	; 0x02
		sz -= nbytes;
    5ac8:	2c 85       	ldd	r18, Y+12	; 0x0c
    5aca:	3d 85       	ldd	r19, Y+13	; 0x0d
    5acc:	8b 81       	ldd	r24, Y+3	; 0x03
    5ace:	9c 81       	ldd	r25, Y+4	; 0x04
    5ad0:	a9 01       	movw	r20, r18
    5ad2:	48 1b       	sub	r20, r24
    5ad4:	59 0b       	sbc	r21, r25
    5ad6:	ca 01       	movw	r24, r20
    5ad8:	8c 87       	std	Y+12, r24	; 0x0c
    5ada:	9d 87       	std	Y+13, r25	; 0x0d
	} while (sz);
    5adc:	8c 85       	ldd	r24, Y+12	; 0x0c
    5ade:	9d 85       	ldd	r25, Y+13	; 0x0d
    5ae0:	89 2b       	or	r24, r25
    5ae2:	09 f0       	breq	.+2      	; 0x5ae6 <spi_data_write+0xf8>
    5ae4:	95 cf       	rjmp	.-214    	; 0x5a10 <spi_data_write+0x22>


	return result;
    5ae6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5ae8:	2d 96       	adiw	r28, 0x0d	; 13
    5aea:	cd bf       	out	0x3d, r28	; 61
    5aec:	de bf       	out	0x3e, r29	; 62
    5aee:	df 91       	pop	r29
    5af0:	cf 91       	pop	r28
    5af2:	08 95       	ret

00005af4 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    5af4:	af 92       	push	r10
    5af6:	cf 92       	push	r12
    5af8:	df 92       	push	r13
    5afa:	ef 92       	push	r14
    5afc:	ff 92       	push	r15
    5afe:	0f 93       	push	r16
    5b00:	1f 93       	push	r17
    5b02:	cf 93       	push	r28
    5b04:	df 93       	push	r29
    5b06:	cd b7       	in	r28, 0x3d	; 61
    5b08:	de b7       	in	r29, 0x3e	; 62
    5b0a:	2c 97       	sbiw	r28, 0x0c	; 12
    5b0c:	cd bf       	out	0x3d, r28	; 61
    5b0e:	de bf       	out	0x3e, r29	; 62
    5b10:	6d 83       	std	Y+5, r22	; 0x05
    5b12:	7e 83       	std	Y+6, r23	; 0x06
    5b14:	8f 83       	std	Y+7, r24	; 0x07
    5b16:	98 87       	std	Y+8, r25	; 0x08
    5b18:	29 87       	std	Y+9, r18	; 0x09
    5b1a:	3a 87       	std	Y+10, r19	; 0x0a
    5b1c:	4b 87       	std	Y+11, r20	; 0x0b
    5b1e:	5c 87       	std	Y+12, r21	; 0x0c
	uint8 retry = SPI_RETRY_COUNT;
    5b20:	8a e0       	ldi	r24, 0x0A	; 10
    5b22:	89 83       	std	Y+1, r24	; 0x01
	sint8 result = N_OK;
    5b24:	81 e0       	ldi	r24, 0x01	; 1
    5b26:	8a 83       	std	Y+2, r24	; 0x02
	uint8 cmd = CMD_SINGLE_WRITE;
    5b28:	89 ec       	ldi	r24, 0xC9	; 201
    5b2a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 clockless = 0;
    5b2c:	1c 82       	std	Y+4, r1	; 0x04
	
_RETRY_:	
	if (addr <= 0x30)
    5b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    5b30:	9e 81       	ldd	r25, Y+6	; 0x06
    5b32:	af 81       	ldd	r26, Y+7	; 0x07
    5b34:	b8 85       	ldd	r27, Y+8	; 0x08
    5b36:	c1 97       	sbiw	r24, 0x31	; 49
    5b38:	a1 05       	cpc	r26, r1
    5b3a:	b1 05       	cpc	r27, r1
    5b3c:	28 f4       	brcc	.+10     	; 0x5b48 <spi_write_reg+0x54>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    5b3e:	83 ec       	ldi	r24, 0xC3	; 195
    5b40:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 1;
    5b42:	81 e0       	ldi	r24, 0x01	; 1
    5b44:	8c 83       	std	Y+4, r24	; 0x04
    5b46:	03 c0       	rjmp	.+6      	; 0x5b4e <spi_write_reg+0x5a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    5b48:	89 ec       	ldi	r24, 0xC9	; 201
    5b4a:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 0;
    5b4c:	1c 82       	std	Y+4, r1	; 0x04
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    5b4e:	29 85       	ldd	r18, Y+9	; 0x09
    5b50:	3a 85       	ldd	r19, Y+10	; 0x0a
    5b52:	4b 85       	ldd	r20, Y+11	; 0x0b
    5b54:	5c 85       	ldd	r21, Y+12	; 0x0c
    5b56:	8d 81       	ldd	r24, Y+5	; 0x05
    5b58:	9e 81       	ldd	r25, Y+6	; 0x06
    5b5a:	af 81       	ldd	r26, Y+7	; 0x07
    5b5c:	b8 85       	ldd	r27, Y+8	; 0x08
    5b5e:	ac 80       	ldd	r10, Y+4	; 0x04
    5b60:	c1 2c       	mov	r12, r1
    5b62:	d1 2c       	mov	r13, r1
    5b64:	76 01       	movw	r14, r12
    5b66:	68 94       	set
    5b68:	c2 f8       	bld	r12, 2
    5b6a:	89 01       	movw	r16, r18
    5b6c:	9a 01       	movw	r18, r20
    5b6e:	ac 01       	movw	r20, r24
    5b70:	bd 01       	movw	r22, r26
    5b72:	8b 81       	ldd	r24, Y+3	; 0x03
    5b74:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <spi_cmd>
    5b78:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    5b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b7c:	81 30       	cpi	r24, 0x01	; 1
    5b7e:	29 f4       	brne	.+10     	; 0x5b8a <spi_write_reg+0x96>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    5b80:	8b 81       	ldd	r24, Y+3	; 0x03
    5b82:	0e 94 1e 2c 	call	0x583c	; 0x583c <spi_cmd_rsp>
    5b86:	8a 83       	std	Y+2, r24	; 0x02
    5b88:	01 c0       	rjmp	.+2      	; 0x5b8c <spi_write_reg+0x98>

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5b8a:	00 00       	nop
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    5b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    5b8e:	81 30       	cpi	r24, 0x01	; 1
    5b90:	19 f1       	breq	.+70     	; 0x5bd8 <spi_write_reg+0xe4>
	{
		nm_bsp_sleep(1);
    5b92:	61 e0       	ldi	r22, 0x01	; 1
    5b94:	70 e0       	ldi	r23, 0x00	; 0
    5b96:	80 e0       	ldi	r24, 0x00	; 0
    5b98:	90 e0       	ldi	r25, 0x00	; 0
    5b9a:	0e 94 80 13 	call	0x2700	; 0x2700 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5b9e:	a1 2c       	mov	r10, r1
    5ba0:	c1 2c       	mov	r12, r1
    5ba2:	d1 2c       	mov	r13, r1
    5ba4:	76 01       	movw	r14, r12
    5ba6:	00 e0       	ldi	r16, 0x00	; 0
    5ba8:	10 e0       	ldi	r17, 0x00	; 0
    5baa:	98 01       	movw	r18, r16
    5bac:	40 e0       	ldi	r20, 0x00	; 0
    5bae:	50 e0       	ldi	r21, 0x00	; 0
    5bb0:	ba 01       	movw	r22, r20
    5bb2:	8f ec       	ldi	r24, 0xCF	; 207
    5bb4:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    5bb8:	8f ec       	ldi	r24, 0xCF	; 207
    5bba:	0e 94 1e 2c 	call	0x583c	; 0x583c <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
		nm_bsp_sleep(1);
    5bbe:	61 e0       	ldi	r22, 0x01	; 1
    5bc0:	70 e0       	ldi	r23, 0x00	; 0
    5bc2:	80 e0       	ldi	r24, 0x00	; 0
    5bc4:	90 e0       	ldi	r25, 0x00	; 0
    5bc6:	0e 94 80 13 	call	0x2700	; 0x2700 <nm_bsp_sleep>
		retry--;
    5bca:	89 81       	ldd	r24, Y+1	; 0x01
    5bcc:	81 50       	subi	r24, 0x01	; 1
    5bce:	89 83       	std	Y+1, r24	; 0x01
		if(retry) goto _RETRY_;
    5bd0:	89 81       	ldd	r24, Y+1	; 0x01
    5bd2:	88 23       	and	r24, r24
    5bd4:	09 f0       	breq	.+2      	; 0x5bd8 <spi_write_reg+0xe4>
    5bd6:	ab cf       	rjmp	.-170    	; 0x5b2e <spi_write_reg+0x3a>
	}

	return result;
    5bd8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5bda:	2c 96       	adiw	r28, 0x0c	; 12
    5bdc:	cd bf       	out	0x3d, r28	; 61
    5bde:	de bf       	out	0x3e, r29	; 62
    5be0:	df 91       	pop	r29
    5be2:	cf 91       	pop	r28
    5be4:	1f 91       	pop	r17
    5be6:	0f 91       	pop	r16
    5be8:	ff 90       	pop	r15
    5bea:	ef 90       	pop	r14
    5bec:	df 90       	pop	r13
    5bee:	cf 90       	pop	r12
    5bf0:	af 90       	pop	r10
    5bf2:	08 95       	ret

00005bf4 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    5bf4:	af 92       	push	r10
    5bf6:	cf 92       	push	r12
    5bf8:	df 92       	push	r13
    5bfa:	ef 92       	push	r14
    5bfc:	ff 92       	push	r15
    5bfe:	0f 93       	push	r16
    5c00:	1f 93       	push	r17
    5c02:	cf 93       	push	r28
    5c04:	df 93       	push	r29
    5c06:	cd b7       	in	r28, 0x3d	; 61
    5c08:	de b7       	in	r29, 0x3e	; 62
    5c0a:	2b 97       	sbiw	r28, 0x0b	; 11
    5c0c:	cd bf       	out	0x3d, r28	; 61
    5c0e:	de bf       	out	0x3e, r29	; 62
    5c10:	6c 83       	std	Y+4, r22	; 0x04
    5c12:	7d 83       	std	Y+5, r23	; 0x05
    5c14:	8e 83       	std	Y+6, r24	; 0x06
    5c16:	9f 83       	std	Y+7, r25	; 0x07
    5c18:	48 87       	std	Y+8, r20	; 0x08
    5c1a:	59 87       	std	Y+9, r21	; 0x09
    5c1c:	2a 87       	std	Y+10, r18	; 0x0a
    5c1e:	3b 87       	std	Y+11, r19	; 0x0b
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    5c20:	8a e0       	ldi	r24, 0x0A	; 10
    5c22:	8a 83       	std	Y+2, r24	; 0x02
	uint8 cmd = CMD_DMA_EXT_WRITE;
    5c24:	87 ec       	ldi	r24, 0xC7	; 199
    5c26:	8b 83       	std	Y+3, r24	; 0x03
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    5c28:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c2c:	01 97       	sbiw	r24, 0x01	; 1
    5c2e:	21 f4       	brne	.+8      	; 0x5c38 <nm_spi_write+0x44>
		size = 2;
    5c30:	82 e0       	ldi	r24, 0x02	; 2
    5c32:	90 e0       	ldi	r25, 0x00	; 0
    5c34:	8a 87       	std	Y+10, r24	; 0x0a
    5c36:	9b 87       	std	Y+11, r25	; 0x0b

	result = spi_cmd(cmd, addr, 0, size,0);
    5c38:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c3c:	9c 01       	movw	r18, r24
    5c3e:	40 e0       	ldi	r20, 0x00	; 0
    5c40:	50 e0       	ldi	r21, 0x00	; 0
    5c42:	8c 81       	ldd	r24, Y+4	; 0x04
    5c44:	9d 81       	ldd	r25, Y+5	; 0x05
    5c46:	ae 81       	ldd	r26, Y+6	; 0x06
    5c48:	bf 81       	ldd	r27, Y+7	; 0x07
    5c4a:	a1 2c       	mov	r10, r1
    5c4c:	69 01       	movw	r12, r18
    5c4e:	7a 01       	movw	r14, r20
    5c50:	00 e0       	ldi	r16, 0x00	; 0
    5c52:	10 e0       	ldi	r17, 0x00	; 0
    5c54:	98 01       	movw	r18, r16
    5c56:	ac 01       	movw	r20, r24
    5c58:	bd 01       	movw	r22, r26
    5c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    5c5c:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <spi_cmd>
    5c60:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    5c62:	89 81       	ldd	r24, Y+1	; 0x01
    5c64:	81 30       	cpi	r24, 0x01	; 1
    5c66:	b9 f4       	brne	.+46     	; 0x5c96 <nm_spi_write+0xa2>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    5c68:	8b 81       	ldd	r24, Y+3	; 0x03
    5c6a:	0e 94 1e 2c 	call	0x583c	; 0x583c <spi_cmd_rsp>
    5c6e:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    5c70:	89 81       	ldd	r24, Y+1	; 0x01
    5c72:	81 30       	cpi	r24, 0x01	; 1
    5c74:	91 f4       	brne	.+36     	; 0x5c9a <nm_spi_write+0xa6>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    5c76:	2a 85       	ldd	r18, Y+10	; 0x0a
    5c78:	3b 85       	ldd	r19, Y+11	; 0x0b
    5c7a:	88 85       	ldd	r24, Y+8	; 0x08
    5c7c:	99 85       	ldd	r25, Y+9	; 0x09
    5c7e:	b9 01       	movw	r22, r18
    5c80:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <spi_data_write>
    5c84:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    5c86:	89 81       	ldd	r24, Y+1	; 0x01
    5c88:	81 30       	cpi	r24, 0x01	; 1
    5c8a:	49 f4       	brne	.+18     	; 0x5c9e <nm_spi_write+0xaa>
		goto _FAIL_;
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    5c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c8e:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <spi_data_rsp>
    5c92:	89 83       	std	Y+1, r24	; 0x01
    5c94:	05 c0       	rjmp	.+10     	; 0x5ca0 <nm_spi_write+0xac>
		size = 2;

	result = spi_cmd(cmd, addr, 0, size,0);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5c96:	00 00       	nop
    5c98:	03 c0       	rjmp	.+6      	; 0x5ca0 <nm_spi_write+0xac>
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5c9a:	00 00       	nop
    5c9c:	01 c0       	rjmp	.+2      	; 0x5ca0 <nm_spi_write+0xac>
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
    5c9e:	00 00       	nop
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
	}
	
_FAIL_:
	if(result != N_OK)
    5ca0:	89 81       	ldd	r24, Y+1	; 0x01
    5ca2:	81 30       	cpi	r24, 0x01	; 1
    5ca4:	19 f1       	breq	.+70     	; 0x5cec <nm_spi_write+0xf8>
	{
		nm_bsp_sleep(1);
    5ca6:	61 e0       	ldi	r22, 0x01	; 1
    5ca8:	70 e0       	ldi	r23, 0x00	; 0
    5caa:	80 e0       	ldi	r24, 0x00	; 0
    5cac:	90 e0       	ldi	r25, 0x00	; 0
    5cae:	0e 94 80 13 	call	0x2700	; 0x2700 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5cb2:	a1 2c       	mov	r10, r1
    5cb4:	c1 2c       	mov	r12, r1
    5cb6:	d1 2c       	mov	r13, r1
    5cb8:	76 01       	movw	r14, r12
    5cba:	00 e0       	ldi	r16, 0x00	; 0
    5cbc:	10 e0       	ldi	r17, 0x00	; 0
    5cbe:	98 01       	movw	r18, r16
    5cc0:	40 e0       	ldi	r20, 0x00	; 0
    5cc2:	50 e0       	ldi	r21, 0x00	; 0
    5cc4:	ba 01       	movw	r22, r20
    5cc6:	8f ec       	ldi	r24, 0xCF	; 207
    5cc8:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    5ccc:	8f ec       	ldi	r24, 0xCF	; 207
    5cce:	0e 94 1e 2c 	call	0x583c	; 0x583c <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
    5cd2:	61 e0       	ldi	r22, 0x01	; 1
    5cd4:	70 e0       	ldi	r23, 0x00	; 0
    5cd6:	80 e0       	ldi	r24, 0x00	; 0
    5cd8:	90 e0       	ldi	r25, 0x00	; 0
    5cda:	0e 94 80 13 	call	0x2700	; 0x2700 <nm_bsp_sleep>
		retry--;
    5cde:	8a 81       	ldd	r24, Y+2	; 0x02
    5ce0:	81 50       	subi	r24, 0x01	; 1
    5ce2:	8a 83       	std	Y+2, r24	; 0x02
		if(retry) goto _RETRY_;
    5ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ce6:	88 23       	and	r24, r24
    5ce8:	09 f0       	breq	.+2      	; 0x5cec <nm_spi_write+0xf8>
    5cea:	9e cf       	rjmp	.-196    	; 0x5c28 <nm_spi_write+0x34>
	}


	return result;
    5cec:	89 81       	ldd	r24, Y+1	; 0x01
}
    5cee:	2b 96       	adiw	r28, 0x0b	; 11
    5cf0:	cd bf       	out	0x3d, r28	; 61
    5cf2:	de bf       	out	0x3e, r29	; 62
    5cf4:	df 91       	pop	r29
    5cf6:	cf 91       	pop	r28
    5cf8:	1f 91       	pop	r17
    5cfa:	0f 91       	pop	r16
    5cfc:	ff 90       	pop	r15
    5cfe:	ef 90       	pop	r14
    5d00:	df 90       	pop	r13
    5d02:	cf 90       	pop	r12
    5d04:	af 90       	pop	r10
    5d06:	08 95       	ret

00005d08 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    5d08:	af 92       	push	r10
    5d0a:	cf 92       	push	r12
    5d0c:	df 92       	push	r13
    5d0e:	ef 92       	push	r14
    5d10:	ff 92       	push	r15
    5d12:	0f 93       	push	r16
    5d14:	1f 93       	push	r17
    5d16:	cf 93       	push	r28
    5d18:	df 93       	push	r29
    5d1a:	cd b7       	in	r28, 0x3d	; 61
    5d1c:	de b7       	in	r29, 0x3e	; 62
    5d1e:	2e 97       	sbiw	r28, 0x0e	; 14
    5d20:	cd bf       	out	0x3d, r28	; 61
    5d22:	de bf       	out	0x3e, r29	; 62
    5d24:	69 87       	std	Y+9, r22	; 0x09
    5d26:	7a 87       	std	Y+10, r23	; 0x0a
    5d28:	8b 87       	std	Y+11, r24	; 0x0b
    5d2a:	9c 87       	std	Y+12, r25	; 0x0c
    5d2c:	4d 87       	std	Y+13, r20	; 0x0d
    5d2e:	5e 87       	std	Y+14, r21	; 0x0e
	uint8 retry = SPI_RETRY_COUNT;
    5d30:	8a e0       	ldi	r24, 0x0A	; 10
    5d32:	89 83       	std	Y+1, r24	; 0x01
	sint8 result = N_OK;
    5d34:	81 e0       	ldi	r24, 0x01	; 1
    5d36:	8a 83       	std	Y+2, r24	; 0x02
	uint8 cmd = CMD_SINGLE_READ;
    5d38:	8a ec       	ldi	r24, 0xCA	; 202
    5d3a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 tmp[4];
	uint8 clockless = 0;
    5d3c:	1c 82       	std	Y+4, r1	; 0x04

_RETRY_:

	if (addr <= 0xff)
    5d3e:	89 85       	ldd	r24, Y+9	; 0x09
    5d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d42:	ab 85       	ldd	r26, Y+11	; 0x0b
    5d44:	bc 85       	ldd	r27, Y+12	; 0x0c
    5d46:	8f 3f       	cpi	r24, 0xFF	; 255
    5d48:	91 05       	cpc	r25, r1
    5d4a:	a1 05       	cpc	r26, r1
    5d4c:	b1 05       	cpc	r27, r1
    5d4e:	09 f0       	breq	.+2      	; 0x5d52 <spi_read_reg+0x4a>
    5d50:	28 f4       	brcc	.+10     	; 0x5d5c <spi_read_reg+0x54>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    5d52:	84 ec       	ldi	r24, 0xC4	; 196
    5d54:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 1;
    5d56:	81 e0       	ldi	r24, 0x01	; 1
    5d58:	8c 83       	std	Y+4, r24	; 0x04
    5d5a:	03 c0       	rjmp	.+6      	; 0x5d62 <spi_read_reg+0x5a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    5d5c:	8a ec       	ldi	r24, 0xCA	; 202
    5d5e:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 0;
    5d60:	1c 82       	std	Y+4, r1	; 0x04
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    5d62:	89 85       	ldd	r24, Y+9	; 0x09
    5d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d66:	ab 85       	ldd	r26, Y+11	; 0x0b
    5d68:	bc 85       	ldd	r27, Y+12	; 0x0c
    5d6a:	ac 80       	ldd	r10, Y+4	; 0x04
    5d6c:	c1 2c       	mov	r12, r1
    5d6e:	d1 2c       	mov	r13, r1
    5d70:	76 01       	movw	r14, r12
    5d72:	68 94       	set
    5d74:	c2 f8       	bld	r12, 2
    5d76:	00 e0       	ldi	r16, 0x00	; 0
    5d78:	10 e0       	ldi	r17, 0x00	; 0
    5d7a:	98 01       	movw	r18, r16
    5d7c:	ac 01       	movw	r20, r24
    5d7e:	bd 01       	movw	r22, r26
    5d80:	8b 81       	ldd	r24, Y+3	; 0x03
    5d82:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <spi_cmd>
    5d86:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    5d88:	8a 81       	ldd	r24, Y+2	; 0x02
    5d8a:	81 30       	cpi	r24, 0x01	; 1
    5d8c:	09 f0       	breq	.+2      	; 0x5d90 <spi_read_reg+0x88>
    5d8e:	46 c0       	rjmp	.+140    	; 0x5e1c <spi_read_reg+0x114>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    5d90:	8b 81       	ldd	r24, Y+3	; 0x03
    5d92:	0e 94 1e 2c 	call	0x583c	; 0x583c <spi_cmd_rsp>
    5d96:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    5d98:	8a 81       	ldd	r24, Y+2	; 0x02
    5d9a:	81 30       	cpi	r24, 0x01	; 1
    5d9c:	09 f0       	breq	.+2      	; 0x5da0 <spi_read_reg+0x98>
    5d9e:	40 c0       	rjmp	.+128    	; 0x5e20 <spi_read_reg+0x118>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    5da0:	ce 01       	movw	r24, r28
    5da2:	05 96       	adiw	r24, 0x05	; 5
    5da4:	4c 81       	ldd	r20, Y+4	; 0x04
    5da6:	64 e0       	ldi	r22, 0x04	; 4
    5da8:	70 e0       	ldi	r23, 0x00	; 0
    5daa:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <spi_data_read>
    5dae:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    5db0:	8a 81       	ldd	r24, Y+2	; 0x02
    5db2:	81 30       	cpi	r24, 0x01	; 1
    5db4:	b9 f5       	brne	.+110    	; 0x5e24 <spi_read_reg+0x11c>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    5db6:	8d 81       	ldd	r24, Y+5	; 0x05
    5db8:	28 2f       	mov	r18, r24
    5dba:	30 e0       	ldi	r19, 0x00	; 0
    5dbc:	40 e0       	ldi	r20, 0x00	; 0
    5dbe:	50 e0       	ldi	r21, 0x00	; 0
		((uint32)tmp[1] << 8) |
    5dc0:	8e 81       	ldd	r24, Y+6	; 0x06
    5dc2:	88 2f       	mov	r24, r24
    5dc4:	90 e0       	ldi	r25, 0x00	; 0
    5dc6:	a0 e0       	ldi	r26, 0x00	; 0
    5dc8:	b0 e0       	ldi	r27, 0x00	; 0
    5dca:	ba 2f       	mov	r27, r26
    5dcc:	a9 2f       	mov	r26, r25
    5dce:	98 2f       	mov	r25, r24
    5dd0:	88 27       	eor	r24, r24
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    5dd2:	28 2b       	or	r18, r24
    5dd4:	39 2b       	or	r19, r25
    5dd6:	4a 2b       	or	r20, r26
    5dd8:	5b 2b       	or	r21, r27
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    5dda:	8f 81       	ldd	r24, Y+7	; 0x07
    5ddc:	88 2f       	mov	r24, r24
    5dde:	90 e0       	ldi	r25, 0x00	; 0
    5de0:	a0 e0       	ldi	r26, 0x00	; 0
    5de2:	b0 e0       	ldi	r27, 0x00	; 0
    5de4:	dc 01       	movw	r26, r24
    5de6:	99 27       	eor	r25, r25
    5de8:	88 27       	eor	r24, r24
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    5dea:	28 2b       	or	r18, r24
    5dec:	39 2b       	or	r19, r25
    5dee:	4a 2b       	or	r20, r26
    5df0:	5b 2b       	or	r21, r27
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    5df2:	88 85       	ldd	r24, Y+8	; 0x08
    5df4:	88 2f       	mov	r24, r24
    5df6:	90 e0       	ldi	r25, 0x00	; 0
    5df8:	a0 e0       	ldi	r26, 0x00	; 0
    5dfa:	b0 e0       	ldi	r27, 0x00	; 0
    5dfc:	b8 2f       	mov	r27, r24
    5dfe:	aa 27       	eor	r26, r26
    5e00:	99 27       	eor	r25, r25
    5e02:	88 27       	eor	r24, r24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    5e04:	82 2b       	or	r24, r18
    5e06:	93 2b       	or	r25, r19
    5e08:	a4 2b       	or	r26, r20
    5e0a:	b5 2b       	or	r27, r21
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    5e0c:	2d 85       	ldd	r18, Y+13	; 0x0d
    5e0e:	3e 85       	ldd	r19, Y+14	; 0x0e
    5e10:	f9 01       	movw	r30, r18
    5e12:	80 83       	st	Z, r24
    5e14:	91 83       	std	Z+1, r25	; 0x01
    5e16:	a2 83       	std	Z+2, r26	; 0x02
    5e18:	b3 83       	std	Z+3, r27	; 0x03
    5e1a:	05 c0       	rjmp	.+10     	; 0x5e26 <spi_read_reg+0x11e>

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5e1c:	00 00       	nop
    5e1e:	03 c0       	rjmp	.+6      	; 0x5e26 <spi_read_reg+0x11e>
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5e20:	00 00       	nop
    5e22:	01 c0       	rjmp	.+2      	; 0x5e26 <spi_read_reg+0x11e>

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
    5e24:	00 00       	nop
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
		
_FAIL_:
	if(result != N_OK)
    5e26:	8a 81       	ldd	r24, Y+2	; 0x02
    5e28:	81 30       	cpi	r24, 0x01	; 1
    5e2a:	19 f1       	breq	.+70     	; 0x5e72 <spi_read_reg+0x16a>
	{
		
		nm_bsp_sleep(1);
    5e2c:	61 e0       	ldi	r22, 0x01	; 1
    5e2e:	70 e0       	ldi	r23, 0x00	; 0
    5e30:	80 e0       	ldi	r24, 0x00	; 0
    5e32:	90 e0       	ldi	r25, 0x00	; 0
    5e34:	0e 94 80 13 	call	0x2700	; 0x2700 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5e38:	a1 2c       	mov	r10, r1
    5e3a:	c1 2c       	mov	r12, r1
    5e3c:	d1 2c       	mov	r13, r1
    5e3e:	76 01       	movw	r14, r12
    5e40:	00 e0       	ldi	r16, 0x00	; 0
    5e42:	10 e0       	ldi	r17, 0x00	; 0
    5e44:	98 01       	movw	r18, r16
    5e46:	40 e0       	ldi	r20, 0x00	; 0
    5e48:	50 e0       	ldi	r21, 0x00	; 0
    5e4a:	ba 01       	movw	r22, r20
    5e4c:	8f ec       	ldi	r24, 0xCF	; 207
    5e4e:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    5e52:	8f ec       	ldi	r24, 0xCF	; 207
    5e54:	0e 94 1e 2c 	call	0x583c	; 0x583c <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
    5e58:	61 e0       	ldi	r22, 0x01	; 1
    5e5a:	70 e0       	ldi	r23, 0x00	; 0
    5e5c:	80 e0       	ldi	r24, 0x00	; 0
    5e5e:	90 e0       	ldi	r25, 0x00	; 0
    5e60:	0e 94 80 13 	call	0x2700	; 0x2700 <nm_bsp_sleep>
		retry--;
    5e64:	89 81       	ldd	r24, Y+1	; 0x01
    5e66:	81 50       	subi	r24, 0x01	; 1
    5e68:	89 83       	std	Y+1, r24	; 0x01
		if(retry) goto _RETRY_;
    5e6a:	89 81       	ldd	r24, Y+1	; 0x01
    5e6c:	88 23       	and	r24, r24
    5e6e:	09 f0       	breq	.+2      	; 0x5e72 <spi_read_reg+0x16a>
    5e70:	66 cf       	rjmp	.-308    	; 0x5d3e <spi_read_reg+0x36>
	}
		
	return result;
    5e72:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5e74:	2e 96       	adiw	r28, 0x0e	; 14
    5e76:	cd bf       	out	0x3d, r28	; 61
    5e78:	de bf       	out	0x3e, r29	; 62
    5e7a:	df 91       	pop	r29
    5e7c:	cf 91       	pop	r28
    5e7e:	1f 91       	pop	r17
    5e80:	0f 91       	pop	r16
    5e82:	ff 90       	pop	r15
    5e84:	ef 90       	pop	r14
    5e86:	df 90       	pop	r13
    5e88:	cf 90       	pop	r12
    5e8a:	af 90       	pop	r10
    5e8c:	08 95       	ret

00005e8e <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    5e8e:	af 92       	push	r10
    5e90:	cf 92       	push	r12
    5e92:	df 92       	push	r13
    5e94:	ef 92       	push	r14
    5e96:	ff 92       	push	r15
    5e98:	0f 93       	push	r16
    5e9a:	1f 93       	push	r17
    5e9c:	cf 93       	push	r28
    5e9e:	df 93       	push	r29
    5ea0:	cd b7       	in	r28, 0x3d	; 61
    5ea2:	de b7       	in	r29, 0x3e	; 62
    5ea4:	2e 97       	sbiw	r28, 0x0e	; 14
    5ea6:	cd bf       	out	0x3d, r28	; 61
    5ea8:	de bf       	out	0x3e, r29	; 62
    5eaa:	6f 83       	std	Y+7, r22	; 0x07
    5eac:	78 87       	std	Y+8, r23	; 0x08
    5eae:	89 87       	std	Y+9, r24	; 0x09
    5eb0:	9a 87       	std	Y+10, r25	; 0x0a
    5eb2:	4b 87       	std	Y+11, r20	; 0x0b
    5eb4:	5c 87       	std	Y+12, r21	; 0x0c
    5eb6:	2d 87       	std	Y+13, r18	; 0x0d
    5eb8:	3e 87       	std	Y+14, r19	; 0x0e
	uint8 cmd = CMD_DMA_EXT_READ;
    5eba:	88 ec       	ldi	r24, 0xC8	; 200
    5ebc:	8c 83       	std	Y+4, r24	; 0x04
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    5ebe:	8a e0       	ldi	r24, 0x0A	; 10
    5ec0:	8a 83       	std	Y+2, r24	; 0x02
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    5ec2:	1b 82       	std	Y+3, r1	; 0x03

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    5ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ec8:	01 97       	sbiw	r24, 0x01	; 1
    5eca:	31 f4       	brne	.+12     	; 0x5ed8 <nm_spi_read+0x4a>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    5ecc:	82 e0       	ldi	r24, 0x02	; 2
    5ece:	90 e0       	ldi	r25, 0x00	; 0
    5ed0:	8d 87       	std	Y+13, r24	; 0x0d
    5ed2:	9e 87       	std	Y+14, r25	; 0x0e
		single_byte_workaround = 1;
    5ed4:	81 e0       	ldi	r24, 0x01	; 1
    5ed6:	8b 83       	std	Y+3, r24	; 0x03
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    5ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5eda:	9e 85       	ldd	r25, Y+14	; 0x0e
    5edc:	9c 01       	movw	r18, r24
    5ede:	40 e0       	ldi	r20, 0x00	; 0
    5ee0:	50 e0       	ldi	r21, 0x00	; 0
    5ee2:	8f 81       	ldd	r24, Y+7	; 0x07
    5ee4:	98 85       	ldd	r25, Y+8	; 0x08
    5ee6:	a9 85       	ldd	r26, Y+9	; 0x09
    5ee8:	ba 85       	ldd	r27, Y+10	; 0x0a
    5eea:	a1 2c       	mov	r10, r1
    5eec:	69 01       	movw	r12, r18
    5eee:	7a 01       	movw	r14, r20
    5ef0:	00 e0       	ldi	r16, 0x00	; 0
    5ef2:	10 e0       	ldi	r17, 0x00	; 0
    5ef4:	98 01       	movw	r18, r16
    5ef6:	ac 01       	movw	r20, r24
    5ef8:	bd 01       	movw	r22, r26
    5efa:	8c 81       	ldd	r24, Y+4	; 0x04
    5efc:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <spi_cmd>
    5f00:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    5f02:	89 81       	ldd	r24, Y+1	; 0x01
    5f04:	81 30       	cpi	r24, 0x01	; 1
    5f06:	19 f5       	brne	.+70     	; 0x5f4e <nm_spi_read+0xc0>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    5f08:	8c 81       	ldd	r24, Y+4	; 0x04
    5f0a:	0e 94 1e 2c 	call	0x583c	; 0x583c <spi_cmd_rsp>
    5f0e:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    5f10:	89 81       	ldd	r24, Y+1	; 0x01
    5f12:	81 30       	cpi	r24, 0x01	; 1
    5f14:	f1 f4       	brne	.+60     	; 0x5f52 <nm_spi_read+0xc4>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    5f16:	8b 81       	ldd	r24, Y+3	; 0x03
    5f18:	88 23       	and	r24, r24
    5f1a:	79 f0       	breq	.+30     	; 0x5f3a <nm_spi_read+0xac>
	{
		result = spi_data_read(tmp, size,0);
    5f1c:	2d 85       	ldd	r18, Y+13	; 0x0d
    5f1e:	3e 85       	ldd	r19, Y+14	; 0x0e
    5f20:	ce 01       	movw	r24, r28
    5f22:	05 96       	adiw	r24, 0x05	; 5
    5f24:	40 e0       	ldi	r20, 0x00	; 0
    5f26:	b9 01       	movw	r22, r18
    5f28:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <spi_data_read>
    5f2c:	89 83       	std	Y+1, r24	; 0x01
		buf[0] = tmp[0];
    5f2e:	2d 81       	ldd	r18, Y+5	; 0x05
    5f30:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f32:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f34:	fc 01       	movw	r30, r24
    5f36:	20 83       	st	Z, r18
    5f38:	0d c0       	rjmp	.+26     	; 0x5f54 <nm_spi_read+0xc6>
	}
	else
		result = spi_data_read(buf, size,0);
    5f3a:	2d 85       	ldd	r18, Y+13	; 0x0d
    5f3c:	3e 85       	ldd	r19, Y+14	; 0x0e
    5f3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f40:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f42:	40 e0       	ldi	r20, 0x00	; 0
    5f44:	b9 01       	movw	r22, r18
    5f46:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <spi_data_read>
    5f4a:	89 83       	std	Y+1, r24	; 0x01
    5f4c:	03 c0       	rjmp	.+6      	; 0x5f54 <nm_spi_read+0xc6>
		single_byte_workaround = 1;
	}
	result = spi_cmd(cmd, addr, 0, size,0);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5f4e:	00 00       	nop
    5f50:	01 c0       	rjmp	.+2      	; 0x5f54 <nm_spi_read+0xc6>
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5f52:	00 00       	nop
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    5f54:	89 81       	ldd	r24, Y+1	; 0x01
    5f56:	81 30       	cpi	r24, 0x01	; 1
    5f58:	19 f1       	breq	.+70     	; 0x5fa0 <nm_spi_read+0x112>
	{
		nm_bsp_sleep(1);
    5f5a:	61 e0       	ldi	r22, 0x01	; 1
    5f5c:	70 e0       	ldi	r23, 0x00	; 0
    5f5e:	80 e0       	ldi	r24, 0x00	; 0
    5f60:	90 e0       	ldi	r25, 0x00	; 0
    5f62:	0e 94 80 13 	call	0x2700	; 0x2700 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5f66:	a1 2c       	mov	r10, r1
    5f68:	c1 2c       	mov	r12, r1
    5f6a:	d1 2c       	mov	r13, r1
    5f6c:	76 01       	movw	r14, r12
    5f6e:	00 e0       	ldi	r16, 0x00	; 0
    5f70:	10 e0       	ldi	r17, 0x00	; 0
    5f72:	98 01       	movw	r18, r16
    5f74:	40 e0       	ldi	r20, 0x00	; 0
    5f76:	50 e0       	ldi	r21, 0x00	; 0
    5f78:	ba 01       	movw	r22, r20
    5f7a:	8f ec       	ldi	r24, 0xCF	; 207
    5f7c:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    5f80:	8f ec       	ldi	r24, 0xCF	; 207
    5f82:	0e 94 1e 2c 	call	0x583c	; 0x583c <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
    5f86:	61 e0       	ldi	r22, 0x01	; 1
    5f88:	70 e0       	ldi	r23, 0x00	; 0
    5f8a:	80 e0       	ldi	r24, 0x00	; 0
    5f8c:	90 e0       	ldi	r25, 0x00	; 0
    5f8e:	0e 94 80 13 	call	0x2700	; 0x2700 <nm_bsp_sleep>
		retry--;
    5f92:	8a 81       	ldd	r24, Y+2	; 0x02
    5f94:	81 50       	subi	r24, 0x01	; 1
    5f96:	8a 83       	std	Y+2, r24	; 0x02
		if(retry) goto _RETRY_;
    5f98:	8a 81       	ldd	r24, Y+2	; 0x02
    5f9a:	88 23       	and	r24, r24
    5f9c:	09 f0       	breq	.+2      	; 0x5fa0 <nm_spi_read+0x112>
    5f9e:	92 cf       	rjmp	.-220    	; 0x5ec4 <nm_spi_read+0x36>
	}

	return result;
    5fa0:	89 81       	ldd	r24, Y+1	; 0x01
}
    5fa2:	2e 96       	adiw	r28, 0x0e	; 14
    5fa4:	cd bf       	out	0x3d, r28	; 61
    5fa6:	de bf       	out	0x3e, r29	; 62
    5fa8:	df 91       	pop	r29
    5faa:	cf 91       	pop	r28
    5fac:	1f 91       	pop	r17
    5fae:	0f 91       	pop	r16
    5fb0:	ff 90       	pop	r15
    5fb2:	ef 90       	pop	r14
    5fb4:	df 90       	pop	r13
    5fb6:	cf 90       	pop	r12
    5fb8:	af 90       	pop	r10
    5fba:	08 95       	ret

00005fbc <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    5fbc:	cf 93       	push	r28
    5fbe:	df 93       	push	r29
    5fc0:	00 d0       	rcall	.+0      	; 0x5fc2 <spi_init_pkt_sz+0x6>
    5fc2:	00 d0       	rcall	.+0      	; 0x5fc4 <spi_init_pkt_sz+0x8>
    5fc4:	cd b7       	in	r28, 0x3d	; 61
    5fc6:	de b7       	in	r29, 0x3e	; 62
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    5fc8:	64 e2       	ldi	r22, 0x24	; 36
    5fca:	78 ee       	ldi	r23, 0xE8	; 232
    5fcc:	80 e0       	ldi	r24, 0x00	; 0
    5fce:	90 e0       	ldi	r25, 0x00	; 0
    5fd0:	0e 94 b6 30 	call	0x616c	; 0x616c <nm_spi_read_reg>
    5fd4:	dc 01       	movw	r26, r24
    5fd6:	cb 01       	movw	r24, r22
    5fd8:	89 83       	std	Y+1, r24	; 0x01
    5fda:	9a 83       	std	Y+2, r25	; 0x02
    5fdc:	ab 83       	std	Y+3, r26	; 0x03
    5fde:	bc 83       	std	Y+4, r27	; 0x04
	val32 &= ~(0x7 << 4);
    5fe0:	89 81       	ldd	r24, Y+1	; 0x01
    5fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    5fe4:	ab 81       	ldd	r26, Y+3	; 0x03
    5fe6:	bc 81       	ldd	r27, Y+4	; 0x04
    5fe8:	8f 78       	andi	r24, 0x8F	; 143
    5fea:	89 83       	std	Y+1, r24	; 0x01
    5fec:	9a 83       	std	Y+2, r25	; 0x02
    5fee:	ab 83       	std	Y+3, r26	; 0x03
    5ff0:	bc 83       	std	Y+4, r27	; 0x04
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    5ff2:	89 81       	ldd	r24, Y+1	; 0x01
    5ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ff6:	ab 81       	ldd	r26, Y+3	; 0x03
    5ff8:	bc 81       	ldd	r27, Y+4	; 0x04
    5ffa:	80 65       	ori	r24, 0x50	; 80
    5ffc:	89 83       	std	Y+1, r24	; 0x01
    5ffe:	9a 83       	std	Y+2, r25	; 0x02
    6000:	ab 83       	std	Y+3, r26	; 0x03
    6002:	bc 83       	std	Y+4, r27	; 0x04
    6004:	00 00       	nop

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    6006:	89 81       	ldd	r24, Y+1	; 0x01
    6008:	9a 81       	ldd	r25, Y+2	; 0x02
    600a:	ab 81       	ldd	r26, Y+3	; 0x03
    600c:	bc 81       	ldd	r27, Y+4	; 0x04
    600e:	9c 01       	movw	r18, r24
    6010:	ad 01       	movw	r20, r26
    6012:	64 e2       	ldi	r22, 0x24	; 36
    6014:	78 ee       	ldi	r23, 0xE8	; 232
    6016:	80 e0       	ldi	r24, 0x00	; 0
    6018:	90 e0       	ldi	r25, 0x00	; 0
    601a:	0e 94 00 31 	call	0x6200	; 0x6200 <nm_spi_write_reg>
}
    601e:	00 00       	nop
    6020:	24 96       	adiw	r28, 0x04	; 4
    6022:	cd bf       	out	0x3d, r28	; 61
    6024:	de bf       	out	0x3e, r29	; 62
    6026:	df 91       	pop	r29
    6028:	cf 91       	pop	r28
    602a:	08 95       	ret

0000602c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    602c:	af 92       	push	r10
    602e:	cf 92       	push	r12
    6030:	df 92       	push	r13
    6032:	ef 92       	push	r14
    6034:	ff 92       	push	r15
    6036:	0f 93       	push	r16
    6038:	1f 93       	push	r17
    603a:	cf 93       	push	r28
    603c:	df 93       	push	r29
    603e:	cd b7       	in	r28, 0x3d	; 61
    6040:	de b7       	in	r29, 0x3e	; 62
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    6042:	a1 2c       	mov	r10, r1
    6044:	c1 2c       	mov	r12, r1
    6046:	d1 2c       	mov	r13, r1
    6048:	76 01       	movw	r14, r12
    604a:	00 e0       	ldi	r16, 0x00	; 0
    604c:	10 e0       	ldi	r17, 0x00	; 0
    604e:	98 01       	movw	r18, r16
    6050:	40 e0       	ldi	r20, 0x00	; 0
    6052:	50 e0       	ldi	r21, 0x00	; 0
    6054:	ba 01       	movw	r22, r20
    6056:	8f ec       	ldi	r24, 0xCF	; 207
    6058:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
    605c:	8f ec       	ldi	r24, 0xCF	; 207
    605e:	0e 94 1e 2c 	call	0x583c	; 0x583c <spi_cmd_rsp>
	return M2M_SUCCESS;
    6062:	80 e0       	ldi	r24, 0x00	; 0
}
    6064:	df 91       	pop	r29
    6066:	cf 91       	pop	r28
    6068:	1f 91       	pop	r17
    606a:	0f 91       	pop	r16
    606c:	ff 90       	pop	r15
    606e:	ef 90       	pop	r14
    6070:	df 90       	pop	r13
    6072:	cf 90       	pop	r12
    6074:	af 90       	pop	r10
    6076:	08 95       	ret

00006078 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    6078:	cf 93       	push	r28
    607a:	df 93       	push	r29
    607c:	cd b7       	in	r28, 0x3d	; 61
    607e:	de b7       	in	r29, 0x3e	; 62
    6080:	28 97       	sbiw	r28, 0x08	; 8
    6082:	cd bf       	out	0x3d, r28	; 61
    6084:	de bf       	out	0x3e, r29	; 62
	uint32 chipid;
	uint32 reg = 0;
    6086:	1d 82       	std	Y+5, r1	; 0x05
    6088:	1e 82       	std	Y+6, r1	; 0x06
    608a:	1f 82       	std	Y+7, r1	; 0x07
    608c:	18 86       	std	Y+8, r1	; 0x08
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    608e:	10 92 28 28 	sts	0x2828, r1	; 0x802828 <gu8Crc_off>

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    6092:	ce 01       	movw	r24, r28
    6094:	05 96       	adiw	r24, 0x05	; 5
    6096:	ac 01       	movw	r20, r24
    6098:	64 e2       	ldi	r22, 0x24	; 36
    609a:	78 ee       	ldi	r23, 0xE8	; 232
    609c:	80 e0       	ldi	r24, 0x00	; 0
    609e:	90 e0       	ldi	r25, 0x00	; 0
    60a0:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <spi_read_reg>
    60a4:	88 23       	and	r24, r24
    60a6:	81 f4       	brne	.+32     	; 0x60c8 <nm_spi_init+0x50>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    60a8:	81 e0       	ldi	r24, 0x01	; 1
    60aa:	80 93 28 28 	sts	0x2828, r24	; 0x802828 <gu8Crc_off>
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    60ae:	ce 01       	movw	r24, r28
    60b0:	05 96       	adiw	r24, 0x05	; 5
    60b2:	ac 01       	movw	r20, r24
    60b4:	64 e2       	ldi	r22, 0x24	; 36
    60b6:	78 ee       	ldi	r23, 0xE8	; 232
    60b8:	80 e0       	ldi	r24, 0x00	; 0
    60ba:	90 e0       	ldi	r25, 0x00	; 0
    60bc:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <spi_read_reg>
    60c0:	88 23       	and	r24, r24
    60c2:	11 f4       	brne	.+4      	; 0x60c8 <nm_spi_init+0x50>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
    60c4:	80 e0       	ldi	r24, 0x00	; 0
    60c6:	42 c0       	rjmp	.+132    	; 0x614c <nm_spi_init+0xd4>
		}
	}
	if(gu8Crc_off == 0)
    60c8:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <gu8Crc_off>
    60cc:	88 23       	and	r24, r24
    60ce:	71 f5       	brne	.+92     	; 0x612c <nm_spi_init+0xb4>
	{
		reg &= ~0xc;	/* disable crc checking */
    60d0:	8d 81       	ldd	r24, Y+5	; 0x05
    60d2:	9e 81       	ldd	r25, Y+6	; 0x06
    60d4:	af 81       	ldd	r26, Y+7	; 0x07
    60d6:	b8 85       	ldd	r27, Y+8	; 0x08
    60d8:	83 7f       	andi	r24, 0xF3	; 243
    60da:	8d 83       	std	Y+5, r24	; 0x05
    60dc:	9e 83       	std	Y+6, r25	; 0x06
    60de:	af 83       	std	Y+7, r26	; 0x07
    60e0:	b8 87       	std	Y+8, r27	; 0x08
		reg &= ~0x70;
    60e2:	8d 81       	ldd	r24, Y+5	; 0x05
    60e4:	9e 81       	ldd	r25, Y+6	; 0x06
    60e6:	af 81       	ldd	r26, Y+7	; 0x07
    60e8:	b8 85       	ldd	r27, Y+8	; 0x08
    60ea:	8f 78       	andi	r24, 0x8F	; 143
    60ec:	8d 83       	std	Y+5, r24	; 0x05
    60ee:	9e 83       	std	Y+6, r25	; 0x06
    60f0:	af 83       	std	Y+7, r26	; 0x07
    60f2:	b8 87       	std	Y+8, r27	; 0x08
		reg |= (0x5 << 4);
    60f4:	8d 81       	ldd	r24, Y+5	; 0x05
    60f6:	9e 81       	ldd	r25, Y+6	; 0x06
    60f8:	af 81       	ldd	r26, Y+7	; 0x07
    60fa:	b8 85       	ldd	r27, Y+8	; 0x08
    60fc:	80 65       	ori	r24, 0x50	; 80
    60fe:	8d 83       	std	Y+5, r24	; 0x05
    6100:	9e 83       	std	Y+6, r25	; 0x06
    6102:	af 83       	std	Y+7, r26	; 0x07
    6104:	b8 87       	std	Y+8, r27	; 0x08
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    6106:	8d 81       	ldd	r24, Y+5	; 0x05
    6108:	9e 81       	ldd	r25, Y+6	; 0x06
    610a:	af 81       	ldd	r26, Y+7	; 0x07
    610c:	b8 85       	ldd	r27, Y+8	; 0x08
    610e:	9c 01       	movw	r18, r24
    6110:	ad 01       	movw	r20, r26
    6112:	64 e2       	ldi	r22, 0x24	; 36
    6114:	78 ee       	ldi	r23, 0xE8	; 232
    6116:	80 e0       	ldi	r24, 0x00	; 0
    6118:	90 e0       	ldi	r25, 0x00	; 0
    611a:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <spi_write_reg>
    611e:	88 23       	and	r24, r24
    6120:	11 f4       	brne	.+4      	; 0x6126 <nm_spi_init+0xae>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
    6122:	80 e0       	ldi	r24, 0x00	; 0
    6124:	13 c0       	rjmp	.+38     	; 0x614c <nm_spi_init+0xd4>
		}
		gu8Crc_off = 1;
    6126:	81 e0       	ldi	r24, 0x01	; 1
    6128:	80 93 28 28 	sts	0x2828, r24	; 0x802828 <gu8Crc_off>
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    612c:	ce 01       	movw	r24, r28
    612e:	01 96       	adiw	r24, 0x01	; 1
    6130:	ac 01       	movw	r20, r24
    6132:	60 e0       	ldi	r22, 0x00	; 0
    6134:	70 e1       	ldi	r23, 0x10	; 16
    6136:	80 e0       	ldi	r24, 0x00	; 0
    6138:	90 e0       	ldi	r25, 0x00	; 0
    613a:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <spi_read_reg>
    613e:	88 23       	and	r24, r24
    6140:	11 f4       	brne	.+4      	; 0x6146 <nm_spi_init+0xce>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
    6142:	8a ef       	ldi	r24, 0xFA	; 250
    6144:	03 c0       	rjmp	.+6      	; 0x614c <nm_spi_init+0xd4>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    6146:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <spi_init_pkt_sz>


	return M2M_SUCCESS;
    614a:	80 e0       	ldi	r24, 0x00	; 0
}
    614c:	28 96       	adiw	r28, 0x08	; 8
    614e:	cd bf       	out	0x3d, r28	; 61
    6150:	de bf       	out	0x3e, r29	; 62
    6152:	df 91       	pop	r29
    6154:	cf 91       	pop	r28
    6156:	08 95       	ret

00006158 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    6158:	cf 93       	push	r28
    615a:	df 93       	push	r29
    615c:	cd b7       	in	r28, 0x3d	; 61
    615e:	de b7       	in	r29, 0x3e	; 62
	gu8Crc_off = 0;
    6160:	10 92 28 28 	sts	0x2828, r1	; 0x802828 <gu8Crc_off>
	return M2M_SUCCESS;
    6164:	80 e0       	ldi	r24, 0x00	; 0
}
    6166:	df 91       	pop	r29
    6168:	cf 91       	pop	r28
    616a:	08 95       	ret

0000616c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    616c:	cf 93       	push	r28
    616e:	df 93       	push	r29
    6170:	cd b7       	in	r28, 0x3d	; 61
    6172:	de b7       	in	r29, 0x3e	; 62
    6174:	28 97       	sbiw	r28, 0x08	; 8
    6176:	cd bf       	out	0x3d, r28	; 61
    6178:	de bf       	out	0x3e, r29	; 62
    617a:	6d 83       	std	Y+5, r22	; 0x05
    617c:	7e 83       	std	Y+6, r23	; 0x06
    617e:	8f 83       	std	Y+7, r24	; 0x07
    6180:	98 87       	std	Y+8, r25	; 0x08
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    6182:	8d 81       	ldd	r24, Y+5	; 0x05
    6184:	9e 81       	ldd	r25, Y+6	; 0x06
    6186:	af 81       	ldd	r26, Y+7	; 0x07
    6188:	b8 85       	ldd	r27, Y+8	; 0x08
    618a:	9e 01       	movw	r18, r28
    618c:	2f 5f       	subi	r18, 0xFF	; 255
    618e:	3f 4f       	sbci	r19, 0xFF	; 255
    6190:	a9 01       	movw	r20, r18
    6192:	bc 01       	movw	r22, r24
    6194:	cd 01       	movw	r24, r26
    6196:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <spi_read_reg>

	return u32Val;
    619a:	89 81       	ldd	r24, Y+1	; 0x01
    619c:	9a 81       	ldd	r25, Y+2	; 0x02
    619e:	ab 81       	ldd	r26, Y+3	; 0x03
    61a0:	bc 81       	ldd	r27, Y+4	; 0x04
}
    61a2:	bc 01       	movw	r22, r24
    61a4:	cd 01       	movw	r24, r26
    61a6:	28 96       	adiw	r28, 0x08	; 8
    61a8:	cd bf       	out	0x3d, r28	; 61
    61aa:	de bf       	out	0x3e, r29	; 62
    61ac:	df 91       	pop	r29
    61ae:	cf 91       	pop	r28
    61b0:	08 95       	ret

000061b2 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    61b2:	cf 93       	push	r28
    61b4:	df 93       	push	r29
    61b6:	cd b7       	in	r28, 0x3d	; 61
    61b8:	de b7       	in	r29, 0x3e	; 62
    61ba:	27 97       	sbiw	r28, 0x07	; 7
    61bc:	cd bf       	out	0x3d, r28	; 61
    61be:	de bf       	out	0x3e, r29	; 62
    61c0:	6a 83       	std	Y+2, r22	; 0x02
    61c2:	7b 83       	std	Y+3, r23	; 0x03
    61c4:	8c 83       	std	Y+4, r24	; 0x04
    61c6:	9d 83       	std	Y+5, r25	; 0x05
    61c8:	4e 83       	std	Y+6, r20	; 0x06
    61ca:	5f 83       	std	Y+7, r21	; 0x07
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    61cc:	2e 81       	ldd	r18, Y+6	; 0x06
    61ce:	3f 81       	ldd	r19, Y+7	; 0x07
    61d0:	8a 81       	ldd	r24, Y+2	; 0x02
    61d2:	9b 81       	ldd	r25, Y+3	; 0x03
    61d4:	ac 81       	ldd	r26, Y+4	; 0x04
    61d6:	bd 81       	ldd	r27, Y+5	; 0x05
    61d8:	a9 01       	movw	r20, r18
    61da:	bc 01       	movw	r22, r24
    61dc:	cd 01       	movw	r24, r26
    61de:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <spi_read_reg>
    61e2:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    61e4:	89 81       	ldd	r24, Y+1	; 0x01
    61e6:	81 30       	cpi	r24, 0x01	; 1
    61e8:	11 f4       	brne	.+4      	; 0x61ee <nm_spi_read_reg_with_ret+0x3c>
    61ea:	19 82       	std	Y+1, r1	; 0x01
    61ec:	02 c0       	rjmp	.+4      	; 0x61f2 <nm_spi_read_reg_with_ret+0x40>
	else s8Ret = M2M_ERR_BUS_FAIL;
    61ee:	8a ef       	ldi	r24, 0xFA	; 250
    61f0:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    61f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    61f4:	27 96       	adiw	r28, 0x07	; 7
    61f6:	cd bf       	out	0x3d, r28	; 61
    61f8:	de bf       	out	0x3e, r29	; 62
    61fa:	df 91       	pop	r29
    61fc:	cf 91       	pop	r28
    61fe:	08 95       	ret

00006200 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    6200:	cf 93       	push	r28
    6202:	df 93       	push	r29
    6204:	cd b7       	in	r28, 0x3d	; 61
    6206:	de b7       	in	r29, 0x3e	; 62
    6208:	29 97       	sbiw	r28, 0x09	; 9
    620a:	cd bf       	out	0x3d, r28	; 61
    620c:	de bf       	out	0x3e, r29	; 62
    620e:	6a 83       	std	Y+2, r22	; 0x02
    6210:	7b 83       	std	Y+3, r23	; 0x03
    6212:	8c 83       	std	Y+4, r24	; 0x04
    6214:	9d 83       	std	Y+5, r25	; 0x05
    6216:	2e 83       	std	Y+6, r18	; 0x06
    6218:	3f 83       	std	Y+7, r19	; 0x07
    621a:	48 87       	std	Y+8, r20	; 0x08
    621c:	59 87       	std	Y+9, r21	; 0x09
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    621e:	2e 81       	ldd	r18, Y+6	; 0x06
    6220:	3f 81       	ldd	r19, Y+7	; 0x07
    6222:	48 85       	ldd	r20, Y+8	; 0x08
    6224:	59 85       	ldd	r21, Y+9	; 0x09
    6226:	8a 81       	ldd	r24, Y+2	; 0x02
    6228:	9b 81       	ldd	r25, Y+3	; 0x03
    622a:	ac 81       	ldd	r26, Y+4	; 0x04
    622c:	bd 81       	ldd	r27, Y+5	; 0x05
    622e:	bc 01       	movw	r22, r24
    6230:	cd 01       	movw	r24, r26
    6232:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <spi_write_reg>
    6236:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    6238:	89 81       	ldd	r24, Y+1	; 0x01
    623a:	81 30       	cpi	r24, 0x01	; 1
    623c:	11 f4       	brne	.+4      	; 0x6242 <nm_spi_write_reg+0x42>
    623e:	19 82       	std	Y+1, r1	; 0x01
    6240:	02 c0       	rjmp	.+4      	; 0x6246 <nm_spi_write_reg+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    6242:	8a ef       	ldi	r24, 0xFA	; 250
    6244:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    6246:	89 81       	ldd	r24, Y+1	; 0x01
}
    6248:	29 96       	adiw	r28, 0x09	; 9
    624a:	cd bf       	out	0x3d, r28	; 61
    624c:	de bf       	out	0x3e, r29	; 62
    624e:	df 91       	pop	r29
    6250:	cf 91       	pop	r28
    6252:	08 95       	ret

00006254 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    6254:	cf 93       	push	r28
    6256:	df 93       	push	r29
    6258:	cd b7       	in	r28, 0x3d	; 61
    625a:	de b7       	in	r29, 0x3e	; 62
    625c:	29 97       	sbiw	r28, 0x09	; 9
    625e:	cd bf       	out	0x3d, r28	; 61
    6260:	de bf       	out	0x3e, r29	; 62
    6262:	6a 83       	std	Y+2, r22	; 0x02
    6264:	7b 83       	std	Y+3, r23	; 0x03
    6266:	8c 83       	std	Y+4, r24	; 0x04
    6268:	9d 83       	std	Y+5, r25	; 0x05
    626a:	4e 83       	std	Y+6, r20	; 0x06
    626c:	5f 83       	std	Y+7, r21	; 0x07
    626e:	28 87       	std	Y+8, r18	; 0x08
    6270:	39 87       	std	Y+9, r19	; 0x09
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    6272:	28 85       	ldd	r18, Y+8	; 0x08
    6274:	39 85       	ldd	r19, Y+9	; 0x09
    6276:	4e 81       	ldd	r20, Y+6	; 0x06
    6278:	5f 81       	ldd	r21, Y+7	; 0x07
    627a:	8a 81       	ldd	r24, Y+2	; 0x02
    627c:	9b 81       	ldd	r25, Y+3	; 0x03
    627e:	ac 81       	ldd	r26, Y+4	; 0x04
    6280:	bd 81       	ldd	r27, Y+5	; 0x05
    6282:	bc 01       	movw	r22, r24
    6284:	cd 01       	movw	r24, r26
    6286:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <nm_spi_read>
    628a:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    628c:	89 81       	ldd	r24, Y+1	; 0x01
    628e:	81 30       	cpi	r24, 0x01	; 1
    6290:	11 f4       	brne	.+4      	; 0x6296 <nm_spi_read_block+0x42>
    6292:	19 82       	std	Y+1, r1	; 0x01
    6294:	02 c0       	rjmp	.+4      	; 0x629a <nm_spi_read_block+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    6296:	8a ef       	ldi	r24, 0xFA	; 250
    6298:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    629a:	89 81       	ldd	r24, Y+1	; 0x01
}
    629c:	29 96       	adiw	r28, 0x09	; 9
    629e:	cd bf       	out	0x3d, r28	; 61
    62a0:	de bf       	out	0x3e, r29	; 62
    62a2:	df 91       	pop	r29
    62a4:	cf 91       	pop	r28
    62a6:	08 95       	ret

000062a8 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    62a8:	cf 93       	push	r28
    62aa:	df 93       	push	r29
    62ac:	cd b7       	in	r28, 0x3d	; 61
    62ae:	de b7       	in	r29, 0x3e	; 62
    62b0:	29 97       	sbiw	r28, 0x09	; 9
    62b2:	cd bf       	out	0x3d, r28	; 61
    62b4:	de bf       	out	0x3e, r29	; 62
    62b6:	6a 83       	std	Y+2, r22	; 0x02
    62b8:	7b 83       	std	Y+3, r23	; 0x03
    62ba:	8c 83       	std	Y+4, r24	; 0x04
    62bc:	9d 83       	std	Y+5, r25	; 0x05
    62be:	4e 83       	std	Y+6, r20	; 0x06
    62c0:	5f 83       	std	Y+7, r21	; 0x07
    62c2:	28 87       	std	Y+8, r18	; 0x08
    62c4:	39 87       	std	Y+9, r19	; 0x09
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    62c6:	28 85       	ldd	r18, Y+8	; 0x08
    62c8:	39 85       	ldd	r19, Y+9	; 0x09
    62ca:	4e 81       	ldd	r20, Y+6	; 0x06
    62cc:	5f 81       	ldd	r21, Y+7	; 0x07
    62ce:	8a 81       	ldd	r24, Y+2	; 0x02
    62d0:	9b 81       	ldd	r25, Y+3	; 0x03
    62d2:	ac 81       	ldd	r26, Y+4	; 0x04
    62d4:	bd 81       	ldd	r27, Y+5	; 0x05
    62d6:	bc 01       	movw	r22, r24
    62d8:	cd 01       	movw	r24, r26
    62da:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <nm_spi_write>
    62de:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    62e0:	89 81       	ldd	r24, Y+1	; 0x01
    62e2:	81 30       	cpi	r24, 0x01	; 1
    62e4:	11 f4       	brne	.+4      	; 0x62ea <nm_spi_write_block+0x42>
    62e6:	19 82       	std	Y+1, r1	; 0x01
    62e8:	02 c0       	rjmp	.+4      	; 0x62ee <nm_spi_write_block+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    62ea:	8a ef       	ldi	r24, 0xFA	; 250
    62ec:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    62ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    62f0:	29 96       	adiw	r28, 0x09	; 9
    62f2:	cd bf       	out	0x3d, r28	; 61
    62f4:	de bf       	out	0x3e, r29	; 62
    62f6:	df 91       	pop	r29
    62f8:	cf 91       	pop	r28
    62fa:	08 95       	ret

000062fc <Socket_ReadSocketData>:
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
    62fc:	ef 92       	push	r14
    62fe:	ff 92       	push	r15
    6300:	0f 93       	push	r16
    6302:	1f 93       	push	r17
    6304:	cf 93       	push	r28
    6306:	df 93       	push	r29
    6308:	cd b7       	in	r28, 0x3d	; 61
    630a:	de b7       	in	r29, 0x3e	; 62
    630c:	63 97       	sbiw	r28, 0x13	; 19
    630e:	cd bf       	out	0x3d, r28	; 61
    6310:	de bf       	out	0x3e, r29	; 62
    6312:	8a 87       	std	Y+10, r24	; 0x0a
    6314:	6b 87       	std	Y+11, r22	; 0x0b
    6316:	7c 87       	std	Y+12, r23	; 0x0c
    6318:	4d 87       	std	Y+13, r20	; 0x0d
    631a:	0e 87       	std	Y+14, r16	; 0x0e
    631c:	1f 87       	std	Y+15, r17	; 0x0f
    631e:	28 8b       	std	Y+16, r18	; 0x10
    6320:	39 8b       	std	Y+17, r19	; 0x11
    6322:	ea 8a       	std	Y+18, r14	; 0x12
    6324:	fb 8a       	std	Y+19, r15	; 0x13
    6326:	8a 89       	ldd	r24, Y+18	; 0x12
    6328:	9b 89       	ldd	r25, Y+19	; 0x13
    632a:	89 2b       	or	r24, r25
    632c:	09 f4       	brne	.+2      	; 0x6330 <Socket_ReadSocketData+0x34>
    632e:	10 c1       	rjmp	.+544    	; 0x6550 <Socket_ReadSocketData+0x254>
    6330:	8a 85       	ldd	r24, Y+10	; 0x0a
    6332:	28 2f       	mov	r18, r24
    6334:	88 0f       	add	r24, r24
    6336:	33 0b       	sbc	r19, r19
    6338:	4b e0       	ldi	r20, 0x0B	; 11
    633a:	42 9f       	mul	r20, r18
    633c:	c0 01       	movw	r24, r0
    633e:	43 9f       	mul	r20, r19
    6340:	90 0d       	add	r25, r0
    6342:	11 24       	eor	r1, r1
    6344:	80 55       	subi	r24, 0x50	; 80
    6346:	97 4d       	sbci	r25, 0xD7	; 215
    6348:	fc 01       	movw	r30, r24
    634a:	80 81       	ld	r24, Z
    634c:	91 81       	ldd	r25, Z+1	; 0x01
    634e:	89 2b       	or	r24, r25
    6350:	09 f4       	brne	.+2      	; 0x6354 <Socket_ReadSocketData+0x58>
    6352:	fe c0       	rjmp	.+508    	; 0x6550 <Socket_ReadSocketData+0x254>
    6354:	8a 85       	ldd	r24, Y+10	; 0x0a
    6356:	28 2f       	mov	r18, r24
    6358:	88 0f       	add	r24, r24
    635a:	33 0b       	sbc	r19, r19
    635c:	4b e0       	ldi	r20, 0x0B	; 11
    635e:	42 9f       	mul	r20, r18
    6360:	c0 01       	movw	r24, r0
    6362:	43 9f       	mul	r20, r19
    6364:	90 0d       	add	r25, r0
    6366:	11 24       	eor	r1, r1
    6368:	8e 54       	subi	r24, 0x4E	; 78
    636a:	97 4d       	sbci	r25, 0xD7	; 215
    636c:	fc 01       	movw	r30, r24
    636e:	80 81       	ld	r24, Z
    6370:	91 81       	ldd	r25, Z+1	; 0x01
    6372:	89 2b       	or	r24, r25
    6374:	09 f4       	brne	.+2      	; 0x6378 <Socket_ReadSocketData+0x7c>
    6376:	ec c0       	rjmp	.+472    	; 0x6550 <Socket_ReadSocketData+0x254>
    6378:	8a 85       	ldd	r24, Y+10	; 0x0a
    637a:	28 2f       	mov	r18, r24
    637c:	88 0f       	add	r24, r24
    637e:	33 0b       	sbc	r19, r19
    6380:	4b e0       	ldi	r20, 0x0B	; 11
    6382:	42 9f       	mul	r20, r18
    6384:	c0 01       	movw	r24, r0
    6386:	43 9f       	mul	r20, r19
    6388:	90 0d       	add	r25, r0
    638a:	11 24       	eor	r1, r1
    638c:	88 54       	subi	r24, 0x48	; 72
    638e:	97 4d       	sbci	r25, 0xD7	; 215
    6390:	fc 01       	movw	r30, r24
    6392:	80 81       	ld	r24, Z
    6394:	81 30       	cpi	r24, 0x01	; 1
    6396:	09 f0       	breq	.+2      	; 0x639a <Socket_ReadSocketData+0x9e>
    6398:	db c0       	rjmp	.+438    	; 0x6550 <Socket_ReadSocketData+0x254>
    639a:	8e 85       	ldd	r24, Y+14	; 0x0e
    639c:	9f 85       	ldd	r25, Y+15	; 0x0f
    639e:	a8 89       	ldd	r26, Y+16	; 0x10
    63a0:	b9 89       	ldd	r27, Y+17	; 0x11
    63a2:	89 83       	std	Y+1, r24	; 0x01
    63a4:	9a 83       	std	Y+2, r25	; 0x02
    63a6:	ab 83       	std	Y+3, r26	; 0x03
    63a8:	bc 83       	std	Y+4, r27	; 0x04
    63aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    63ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    63ae:	2a 89       	ldd	r18, Y+18	; 0x12
    63b0:	3b 89       	ldd	r19, Y+19	; 0x13
    63b2:	fc 01       	movw	r30, r24
    63b4:	24 83       	std	Z+4, r18	; 0x04
    63b6:	35 83       	std	Z+5, r19	; 0x05
    63b8:	81 e0       	ldi	r24, 0x01	; 1
    63ba:	8f 83       	std	Y+7, r24	; 0x07
    63bc:	8a 89       	ldd	r24, Y+18	; 0x12
    63be:	9b 89       	ldd	r25, Y+19	; 0x13
    63c0:	8d 83       	std	Y+5, r24	; 0x05
    63c2:	9e 83       	std	Y+6, r25	; 0x06
    63c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    63c6:	28 2f       	mov	r18, r24
    63c8:	88 0f       	add	r24, r24
    63ca:	33 0b       	sbc	r19, r19
    63cc:	4b e0       	ldi	r20, 0x0B	; 11
    63ce:	42 9f       	mul	r20, r18
    63d0:	c0 01       	movw	r24, r0
    63d2:	43 9f       	mul	r20, r19
    63d4:	90 0d       	add	r25, r0
    63d6:	11 24       	eor	r1, r1
    63d8:	8e 54       	subi	r24, 0x4E	; 78
    63da:	97 4d       	sbci	r25, 0xD7	; 215
    63dc:	fc 01       	movw	r30, r24
    63de:	80 81       	ld	r24, Z
    63e0:	91 81       	ldd	r25, Z+1	; 0x01
    63e2:	2d 81       	ldd	r18, Y+5	; 0x05
    63e4:	3e 81       	ldd	r19, Y+6	; 0x06
    63e6:	a9 01       	movw	r20, r18
    63e8:	48 1b       	sub	r20, r24
    63ea:	59 0b       	sbc	r21, r25
    63ec:	ca 01       	movw	r24, r20
    63ee:	88 87       	std	Y+8, r24	; 0x08
    63f0:	99 87       	std	Y+9, r25	; 0x09
    63f2:	88 85       	ldd	r24, Y+8	; 0x08
    63f4:	99 85       	ldd	r25, Y+9	; 0x09
    63f6:	18 16       	cp	r1, r24
    63f8:	19 06       	cpc	r1, r25
    63fa:	94 f4       	brge	.+36     	; 0x6420 <Socket_ReadSocketData+0x124>
    63fc:	1f 82       	std	Y+7, r1	; 0x07
    63fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    6400:	28 2f       	mov	r18, r24
    6402:	88 0f       	add	r24, r24
    6404:	33 0b       	sbc	r19, r19
    6406:	4b e0       	ldi	r20, 0x0B	; 11
    6408:	42 9f       	mul	r20, r18
    640a:	c0 01       	movw	r24, r0
    640c:	43 9f       	mul	r20, r19
    640e:	90 0d       	add	r25, r0
    6410:	11 24       	eor	r1, r1
    6412:	8e 54       	subi	r24, 0x4E	; 78
    6414:	97 4d       	sbci	r25, 0xD7	; 215
    6416:	fc 01       	movw	r30, r24
    6418:	80 81       	ld	r24, Z
    641a:	91 81       	ldd	r25, Z+1	; 0x01
    641c:	8d 83       	std	Y+5, r24	; 0x05
    641e:	9e 83       	std	Y+6, r25	; 0x06
    6420:	8a 85       	ldd	r24, Y+10	; 0x0a
    6422:	28 2f       	mov	r18, r24
    6424:	88 0f       	add	r24, r24
    6426:	33 0b       	sbc	r19, r19
    6428:	4b e0       	ldi	r20, 0x0B	; 11
    642a:	42 9f       	mul	r20, r18
    642c:	c0 01       	movw	r24, r0
    642e:	43 9f       	mul	r20, r19
    6430:	90 0d       	add	r25, r0
    6432:	11 24       	eor	r1, r1
    6434:	80 55       	subi	r24, 0x50	; 80
    6436:	97 4d       	sbci	r25, 0xD7	; 215
    6438:	fc 01       	movw	r30, r24
    643a:	40 81       	ld	r20, Z
    643c:	51 81       	ldd	r21, Z+1	; 0x01
    643e:	2d 81       	ldd	r18, Y+5	; 0x05
    6440:	3e 81       	ldd	r19, Y+6	; 0x06
    6442:	89 81       	ldd	r24, Y+1	; 0x01
    6444:	9a 81       	ldd	r25, Y+2	; 0x02
    6446:	ab 81       	ldd	r26, Y+3	; 0x03
    6448:	bc 81       	ldd	r27, Y+4	; 0x04
    644a:	0f 81       	ldd	r16, Y+7	; 0x07
    644c:	bc 01       	movw	r22, r24
    644e:	cd 01       	movw	r24, r26
    6450:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    6454:	88 23       	and	r24, r24
    6456:	09 f0       	breq	.+2      	; 0x645a <Socket_ReadSocketData+0x15e>
    6458:	7a c0       	rjmp	.+244    	; 0x654e <Socket_ReadSocketData+0x252>
    645a:	8a 85       	ldd	r24, Y+10	; 0x0a
    645c:	28 2f       	mov	r18, r24
    645e:	88 0f       	add	r24, r24
    6460:	33 0b       	sbc	r19, r19
    6462:	4b e0       	ldi	r20, 0x0B	; 11
    6464:	42 9f       	mul	r20, r18
    6466:	c0 01       	movw	r24, r0
    6468:	43 9f       	mul	r20, r19
    646a:	90 0d       	add	r25, r0
    646c:	11 24       	eor	r1, r1
    646e:	80 55       	subi	r24, 0x50	; 80
    6470:	97 4d       	sbci	r25, 0xD7	; 215
    6472:	fc 01       	movw	r30, r24
    6474:	20 81       	ld	r18, Z
    6476:	31 81       	ldd	r19, Z+1	; 0x01
    6478:	8b 85       	ldd	r24, Y+11	; 0x0b
    647a:	9c 85       	ldd	r25, Y+12	; 0x0c
    647c:	fc 01       	movw	r30, r24
    647e:	20 83       	st	Z, r18
    6480:	31 83       	std	Z+1, r19	; 0x01
    6482:	2d 81       	ldd	r18, Y+5	; 0x05
    6484:	3e 81       	ldd	r19, Y+6	; 0x06
    6486:	8b 85       	ldd	r24, Y+11	; 0x0b
    6488:	9c 85       	ldd	r25, Y+12	; 0x0c
    648a:	fc 01       	movw	r30, r24
    648c:	22 83       	std	Z+2, r18	; 0x02
    648e:	33 83       	std	Z+3, r19	; 0x03
    6490:	8b 85       	ldd	r24, Y+11	; 0x0b
    6492:	9c 85       	ldd	r25, Y+12	; 0x0c
    6494:	fc 01       	movw	r30, r24
    6496:	24 81       	ldd	r18, Z+4	; 0x04
    6498:	35 81       	ldd	r19, Z+5	; 0x05
    649a:	8d 81       	ldd	r24, Y+5	; 0x05
    649c:	9e 81       	ldd	r25, Y+6	; 0x06
    649e:	28 1b       	sub	r18, r24
    64a0:	39 0b       	sbc	r19, r25
    64a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    64a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    64a6:	fc 01       	movw	r30, r24
    64a8:	24 83       	std	Z+4, r18	; 0x04
    64aa:	35 83       	std	Z+5, r19	; 0x05
    64ac:	80 91 29 29 	lds	r24, 0x2929	; 0x802929 <gpfAppSocketCb>
    64b0:	90 91 2a 29 	lds	r25, 0x292A	; 0x80292a <gpfAppSocketCb+0x1>
    64b4:	89 2b       	or	r24, r25
    64b6:	59 f0       	breq	.+22     	; 0x64ce <Socket_ReadSocketData+0x1d2>
    64b8:	20 91 29 29 	lds	r18, 0x2929	; 0x802929 <gpfAppSocketCb>
    64bc:	30 91 2a 29 	lds	r19, 0x292A	; 0x80292a <gpfAppSocketCb+0x1>
    64c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    64c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    64c4:	ac 01       	movw	r20, r24
    64c6:	6d 85       	ldd	r22, Y+13	; 0x0d
    64c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    64ca:	f9 01       	movw	r30, r18
    64cc:	09 95       	icall
    64ce:	2a 89       	ldd	r18, Y+18	; 0x12
    64d0:	3b 89       	ldd	r19, Y+19	; 0x13
    64d2:	8d 81       	ldd	r24, Y+5	; 0x05
    64d4:	9e 81       	ldd	r25, Y+6	; 0x06
    64d6:	a9 01       	movw	r20, r18
    64d8:	48 1b       	sub	r20, r24
    64da:	59 0b       	sbc	r21, r25
    64dc:	ca 01       	movw	r24, r20
    64de:	8a 8b       	std	Y+18, r24	; 0x12
    64e0:	9b 8b       	std	Y+19, r25	; 0x13
    64e2:	8d 81       	ldd	r24, Y+5	; 0x05
    64e4:	9e 81       	ldd	r25, Y+6	; 0x06
    64e6:	cc 01       	movw	r24, r24
    64e8:	a0 e0       	ldi	r26, 0x00	; 0
    64ea:	b0 e0       	ldi	r27, 0x00	; 0
    64ec:	29 81       	ldd	r18, Y+1	; 0x01
    64ee:	3a 81       	ldd	r19, Y+2	; 0x02
    64f0:	4b 81       	ldd	r20, Y+3	; 0x03
    64f2:	5c 81       	ldd	r21, Y+4	; 0x04
    64f4:	82 0f       	add	r24, r18
    64f6:	93 1f       	adc	r25, r19
    64f8:	a4 1f       	adc	r26, r20
    64fa:	b5 1f       	adc	r27, r21
    64fc:	89 83       	std	Y+1, r24	; 0x01
    64fe:	9a 83       	std	Y+2, r25	; 0x02
    6500:	ab 83       	std	Y+3, r26	; 0x03
    6502:	bc 83       	std	Y+4, r27	; 0x04
    6504:	8a 85       	ldd	r24, Y+10	; 0x0a
    6506:	28 2f       	mov	r18, r24
    6508:	88 0f       	add	r24, r24
    650a:	33 0b       	sbc	r19, r19
    650c:	4b e0       	ldi	r20, 0x0B	; 11
    650e:	42 9f       	mul	r20, r18
    6510:	c0 01       	movw	r24, r0
    6512:	43 9f       	mul	r20, r19
    6514:	90 0d       	add	r25, r0
    6516:	11 24       	eor	r1, r1
    6518:	88 54       	subi	r24, 0x48	; 72
    651a:	97 4d       	sbci	r25, 0xD7	; 215
    651c:	fc 01       	movw	r30, r24
    651e:	80 81       	ld	r24, Z
    6520:	88 23       	and	r24, r24
    6522:	79 f4       	brne	.+30     	; 0x6542 <Socket_ReadSocketData+0x246>
    6524:	8a 89       	ldd	r24, Y+18	; 0x12
    6526:	9b 89       	ldd	r25, Y+19	; 0x13
    6528:	89 2b       	or	r24, r25
    652a:	59 f0       	breq	.+22     	; 0x6542 <Socket_ReadSocketData+0x246>
    652c:	01 e0       	ldi	r16, 0x01	; 1
    652e:	20 e0       	ldi	r18, 0x00	; 0
    6530:	30 e0       	ldi	r19, 0x00	; 0
    6532:	40 e0       	ldi	r20, 0x00	; 0
    6534:	50 e0       	ldi	r21, 0x00	; 0
    6536:	60 e0       	ldi	r22, 0x00	; 0
    6538:	70 e0       	ldi	r23, 0x00	; 0
    653a:	cb 01       	movw	r24, r22
    653c:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    6540:	07 c0       	rjmp	.+14     	; 0x6550 <Socket_ReadSocketData+0x254>
    6542:	8a 89       	ldd	r24, Y+18	; 0x12
    6544:	9b 89       	ldd	r25, Y+19	; 0x13
    6546:	89 2b       	or	r24, r25
    6548:	09 f0       	breq	.+2      	; 0x654c <Socket_ReadSocketData+0x250>
    654a:	36 cf       	rjmp	.-404    	; 0x63b8 <Socket_ReadSocketData+0xbc>
    654c:	01 c0       	rjmp	.+2      	; 0x6550 <Socket_ReadSocketData+0x254>
    654e:	00 00       	nop
    6550:	00 00       	nop
    6552:	63 96       	adiw	r28, 0x13	; 19
    6554:	cd bf       	out	0x3d, r28	; 61
    6556:	de bf       	out	0x3e, r29	; 62
    6558:	df 91       	pop	r29
    655a:	cf 91       	pop	r28
    655c:	1f 91       	pop	r17
    655e:	0f 91       	pop	r16
    6560:	ff 90       	pop	r15
    6562:	ef 90       	pop	r14
    6564:	08 95       	ret

00006566 <m2m_ip_cb>:
    6566:	ef 92       	push	r14
    6568:	ff 92       	push	r15
    656a:	0f 93       	push	r16
    656c:	1f 93       	push	r17
    656e:	cf 93       	push	r28
    6570:	df 93       	push	r29
    6572:	cd b7       	in	r28, 0x3d	; 61
    6574:	de b7       	in	r29, 0x3e	; 62
    6576:	cc 5c       	subi	r28, 0xCC	; 204
    6578:	d1 09       	sbc	r29, r1
    657a:	cd bf       	out	0x3d, r28	; 61
    657c:	de bf       	out	0x3e, r29	; 62
    657e:	fe 01       	movw	r30, r28
    6580:	ec 53       	subi	r30, 0x3C	; 60
    6582:	ff 4f       	sbci	r31, 0xFF	; 255
    6584:	80 83       	st	Z, r24
    6586:	ce 01       	movw	r24, r28
    6588:	8b 53       	subi	r24, 0x3B	; 59
    658a:	9f 4f       	sbci	r25, 0xFF	; 255
    658c:	dc 01       	movw	r26, r24
    658e:	6d 93       	st	X+, r22
    6590:	7c 93       	st	X, r23
    6592:	ce 01       	movw	r24, r28
    6594:	89 53       	subi	r24, 0x39	; 57
    6596:	9f 4f       	sbci	r25, 0xFF	; 255
    6598:	fc 01       	movw	r30, r24
    659a:	20 83       	st	Z, r18
    659c:	31 83       	std	Z+1, r19	; 0x01
    659e:	42 83       	std	Z+2, r20	; 0x02
    65a0:	53 83       	std	Z+3, r21	; 0x03
    65a2:	ce 01       	movw	r24, r28
    65a4:	8c 53       	subi	r24, 0x3C	; 60
    65a6:	9f 4f       	sbci	r25, 0xFF	; 255
    65a8:	dc 01       	movw	r26, r24
    65aa:	8c 91       	ld	r24, X
    65ac:	81 34       	cpi	r24, 0x41	; 65
    65ae:	39 f0       	breq	.+14     	; 0x65be <m2m_ip_cb+0x58>
    65b0:	ce 01       	movw	r24, r28
    65b2:	8c 53       	subi	r24, 0x3C	; 60
    65b4:	9f 4f       	sbci	r25, 0xFF	; 255
    65b6:	fc 01       	movw	r30, r24
    65b8:	80 81       	ld	r24, Z
    65ba:	84 35       	cpi	r24, 0x54	; 84
    65bc:	59 f5       	brne	.+86     	; 0x6614 <m2m_ip_cb+0xae>
    65be:	ae 01       	movw	r20, r28
    65c0:	41 5f       	subi	r20, 0xF1	; 241
    65c2:	5f 4f       	sbci	r21, 0xFF	; 255
    65c4:	ce 01       	movw	r24, r28
    65c6:	89 53       	subi	r24, 0x39	; 57
    65c8:	9f 4f       	sbci	r25, 0xFF	; 255
    65ca:	fc 01       	movw	r30, r24
    65cc:	80 81       	ld	r24, Z
    65ce:	91 81       	ldd	r25, Z+1	; 0x01
    65d0:	a2 81       	ldd	r26, Z+2	; 0x02
    65d2:	b3 81       	ldd	r27, Z+3	; 0x03
    65d4:	00 e0       	ldi	r16, 0x00	; 0
    65d6:	24 e0       	ldi	r18, 0x04	; 4
    65d8:	30 e0       	ldi	r19, 0x00	; 0
    65da:	bc 01       	movw	r22, r24
    65dc:	cd 01       	movw	r24, r26
    65de:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    65e2:	88 23       	and	r24, r24
    65e4:	09 f0       	breq	.+2      	; 0x65e8 <m2m_ip_cb+0x82>
    65e6:	70 c3       	rjmp	.+1760   	; 0x6cc8 <m2m_ip_cb+0x762>
    65e8:	88 89       	ldd	r24, Y+16	; 0x10
    65ea:	8b 8b       	std	Y+19, r24	; 0x13
    65ec:	80 91 29 29 	lds	r24, 0x2929	; 0x802929 <gpfAppSocketCb>
    65f0:	90 91 2a 29 	lds	r25, 0x292A	; 0x80292a <gpfAppSocketCb+0x1>
    65f4:	89 2b       	or	r24, r25
    65f6:	09 f4       	brne	.+2      	; 0x65fa <m2m_ip_cb+0x94>
    65f8:	67 c3       	rjmp	.+1742   	; 0x6cc8 <m2m_ip_cb+0x762>
    65fa:	20 91 29 29 	lds	r18, 0x2929	; 0x802929 <gpfAppSocketCb>
    65fe:	30 91 2a 29 	lds	r19, 0x292A	; 0x80292a <gpfAppSocketCb+0x1>
    6602:	7f 85       	ldd	r23, Y+15	; 0x0f
    6604:	ce 01       	movw	r24, r28
    6606:	43 96       	adiw	r24, 0x13	; 19
    6608:	ac 01       	movw	r20, r24
    660a:	61 e0       	ldi	r22, 0x01	; 1
    660c:	87 2f       	mov	r24, r23
    660e:	f9 01       	movw	r30, r18
    6610:	09 95       	icall
    6612:	5a c3       	rjmp	.+1716   	; 0x6cc8 <m2m_ip_cb+0x762>
    6614:	ce 01       	movw	r24, r28
    6616:	8c 53       	subi	r24, 0x3C	; 60
    6618:	9f 4f       	sbci	r25, 0xFF	; 255
    661a:	dc 01       	movw	r26, r24
    661c:	8c 91       	ld	r24, X
    661e:	82 34       	cpi	r24, 0x42	; 66
    6620:	59 f5       	brne	.+86     	; 0x6678 <m2m_ip_cb+0x112>
    6622:	ae 01       	movw	r20, r28
    6624:	4c 5e       	subi	r20, 0xEC	; 236
    6626:	5f 4f       	sbci	r21, 0xFF	; 255
    6628:	ce 01       	movw	r24, r28
    662a:	89 53       	subi	r24, 0x39	; 57
    662c:	9f 4f       	sbci	r25, 0xFF	; 255
    662e:	fc 01       	movw	r30, r24
    6630:	80 81       	ld	r24, Z
    6632:	91 81       	ldd	r25, Z+1	; 0x01
    6634:	a2 81       	ldd	r26, Z+2	; 0x02
    6636:	b3 81       	ldd	r27, Z+3	; 0x03
    6638:	00 e0       	ldi	r16, 0x00	; 0
    663a:	24 e0       	ldi	r18, 0x04	; 4
    663c:	30 e0       	ldi	r19, 0x00	; 0
    663e:	bc 01       	movw	r22, r24
    6640:	cd 01       	movw	r24, r26
    6642:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    6646:	88 23       	and	r24, r24
    6648:	09 f0       	breq	.+2      	; 0x664c <m2m_ip_cb+0xe6>
    664a:	45 c3       	rjmp	.+1674   	; 0x6cd6 <m2m_ip_cb+0x770>
    664c:	8d 89       	ldd	r24, Y+21	; 0x15
    664e:	88 8f       	std	Y+24, r24	; 0x18
    6650:	80 91 29 29 	lds	r24, 0x2929	; 0x802929 <gpfAppSocketCb>
    6654:	90 91 2a 29 	lds	r25, 0x292A	; 0x80292a <gpfAppSocketCb+0x1>
    6658:	89 2b       	or	r24, r25
    665a:	09 f4       	brne	.+2      	; 0x665e <m2m_ip_cb+0xf8>
    665c:	3c c3       	rjmp	.+1656   	; 0x6cd6 <m2m_ip_cb+0x770>
    665e:	20 91 29 29 	lds	r18, 0x2929	; 0x802929 <gpfAppSocketCb>
    6662:	30 91 2a 29 	lds	r19, 0x292A	; 0x80292a <gpfAppSocketCb+0x1>
    6666:	7c 89       	ldd	r23, Y+20	; 0x14
    6668:	ce 01       	movw	r24, r28
    666a:	48 96       	adiw	r24, 0x18	; 24
    666c:	ac 01       	movw	r20, r24
    666e:	62 e0       	ldi	r22, 0x02	; 2
    6670:	87 2f       	mov	r24, r23
    6672:	f9 01       	movw	r30, r18
    6674:	09 95       	icall
    6676:	2f c3       	rjmp	.+1630   	; 0x6cd6 <m2m_ip_cb+0x770>
    6678:	ce 01       	movw	r24, r28
    667a:	8c 53       	subi	r24, 0x3C	; 60
    667c:	9f 4f       	sbci	r25, 0xFF	; 255
    667e:	dc 01       	movw	r26, r24
    6680:	8c 91       	ld	r24, X
    6682:	83 34       	cpi	r24, 0x43	; 67
    6684:	09 f0       	breq	.+2      	; 0x6688 <m2m_ip_cb+0x122>
    6686:	a9 c0       	rjmp	.+338    	; 0x67da <m2m_ip_cb+0x274>
    6688:	ae 01       	movw	r20, r28
    668a:	47 5e       	subi	r20, 0xE7	; 231
    668c:	5f 4f       	sbci	r21, 0xFF	; 255
    668e:	ce 01       	movw	r24, r28
    6690:	89 53       	subi	r24, 0x39	; 57
    6692:	9f 4f       	sbci	r25, 0xFF	; 255
    6694:	fc 01       	movw	r30, r24
    6696:	80 81       	ld	r24, Z
    6698:	91 81       	ldd	r25, Z+1	; 0x01
    669a:	a2 81       	ldd	r26, Z+2	; 0x02
    669c:	b3 81       	ldd	r27, Z+3	; 0x03
    669e:	00 e0       	ldi	r16, 0x00	; 0
    66a0:	2c e0       	ldi	r18, 0x0C	; 12
    66a2:	30 e0       	ldi	r19, 0x00	; 0
    66a4:	bc 01       	movw	r22, r24
    66a6:	cd 01       	movw	r24, r26
    66a8:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    66ac:	88 23       	and	r24, r24
    66ae:	09 f0       	breq	.+2      	; 0x66b2 <m2m_ip_cb+0x14c>
    66b0:	12 c3       	rjmp	.+1572   	; 0x6cd6 <m2m_ip_cb+0x770>
    66b2:	8a a1       	ldd	r24, Y+34	; 0x22
    66b4:	88 23       	and	r24, r24
    66b6:	0c f4       	brge	.+2      	; 0x66ba <m2m_ip_cb+0x154>
    66b8:	6a c0       	rjmp	.+212    	; 0x678e <m2m_ip_cb+0x228>
    66ba:	8a a1       	ldd	r24, Y+34	; 0x22
    66bc:	28 2f       	mov	r18, r24
    66be:	88 0f       	add	r24, r24
    66c0:	33 0b       	sbc	r19, r19
    66c2:	89 a1       	ldd	r24, Y+33	; 0x21
    66c4:	48 2f       	mov	r20, r24
    66c6:	88 0f       	add	r24, r24
    66c8:	55 0b       	sbc	r21, r21
    66ca:	6b e0       	ldi	r22, 0x0B	; 11
    66cc:	64 9f       	mul	r22, r20
    66ce:	c0 01       	movw	r24, r0
    66d0:	65 9f       	mul	r22, r21
    66d2:	90 0d       	add	r25, r0
    66d4:	11 24       	eor	r1, r1
    66d6:	87 54       	subi	r24, 0x47	; 71
    66d8:	97 4d       	sbci	r25, 0xD7	; 215
    66da:	dc 01       	movw	r26, r24
    66dc:	4c 91       	ld	r20, X
    66de:	5b e0       	ldi	r21, 0x0B	; 11
    66e0:	52 9f       	mul	r21, r18
    66e2:	c0 01       	movw	r24, r0
    66e4:	53 9f       	mul	r21, r19
    66e6:	90 0d       	add	r25, r0
    66e8:	11 24       	eor	r1, r1
    66ea:	87 54       	subi	r24, 0x47	; 71
    66ec:	97 4d       	sbci	r25, 0xD7	; 215
    66ee:	fc 01       	movw	r30, r24
    66f0:	40 83       	st	Z, r20
    66f2:	8a a1       	ldd	r24, Y+34	; 0x22
    66f4:	28 2f       	mov	r18, r24
    66f6:	88 0f       	add	r24, r24
    66f8:	33 0b       	sbc	r19, r19
    66fa:	4b e0       	ldi	r20, 0x0B	; 11
    66fc:	42 9f       	mul	r20, r18
    66fe:	c0 01       	movw	r24, r0
    6700:	43 9f       	mul	r20, r19
    6702:	90 0d       	add	r25, r0
    6704:	11 24       	eor	r1, r1
    6706:	88 54       	subi	r24, 0x48	; 72
    6708:	97 4d       	sbci	r25, 0xD7	; 215
    670a:	21 e0       	ldi	r18, 0x01	; 1
    670c:	dc 01       	movw	r26, r24
    670e:	2c 93       	st	X, r18
    6710:	8a a1       	ldd	r24, Y+34	; 0x22
    6712:	48 2f       	mov	r20, r24
    6714:	88 0f       	add	r24, r24
    6716:	55 0b       	sbc	r21, r21
    6718:	8b a1       	ldd	r24, Y+35	; 0x23
    671a:	9c a1       	ldd	r25, Y+36	; 0x24
    671c:	9c 01       	movw	r18, r24
    671e:	28 50       	subi	r18, 0x08	; 8
    6720:	31 09       	sbc	r19, r1
    6722:	6b e0       	ldi	r22, 0x0B	; 11
    6724:	64 9f       	mul	r22, r20
    6726:	c0 01       	movw	r24, r0
    6728:	65 9f       	mul	r22, r21
    672a:	90 0d       	add	r25, r0
    672c:	11 24       	eor	r1, r1
    672e:	8a 54       	subi	r24, 0x4A	; 74
    6730:	97 4d       	sbci	r25, 0xD7	; 215
    6732:	fc 01       	movw	r30, r24
    6734:	20 83       	st	Z, r18
    6736:	31 83       	std	Z+1, r19	; 0x01
    6738:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <gu16SessionID>
    673c:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <gu16SessionID+0x1>
    6740:	01 96       	adiw	r24, 0x01	; 1
    6742:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <gu16SessionID>
    6746:	90 93 2a 28 	sts	0x282A, r25	; 0x80282a <gu16SessionID+0x1>
    674a:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <gu16SessionID>
    674e:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <gu16SessionID+0x1>
    6752:	89 2b       	or	r24, r25
    6754:	49 f4       	brne	.+18     	; 0x6768 <m2m_ip_cb+0x202>
    6756:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <gu16SessionID>
    675a:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <gu16SessionID+0x1>
    675e:	01 96       	adiw	r24, 0x01	; 1
    6760:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <gu16SessionID>
    6764:	90 93 2a 28 	sts	0x282A, r25	; 0x80282a <gu16SessionID+0x1>
    6768:	8a a1       	ldd	r24, Y+34	; 0x22
    676a:	48 2f       	mov	r20, r24
    676c:	88 0f       	add	r24, r24
    676e:	55 0b       	sbc	r21, r21
    6770:	20 91 29 28 	lds	r18, 0x2829	; 0x802829 <gu16SessionID>
    6774:	30 91 2a 28 	lds	r19, 0x282A	; 0x80282a <gu16SessionID+0x1>
    6778:	6b e0       	ldi	r22, 0x0B	; 11
    677a:	64 9f       	mul	r22, r20
    677c:	c0 01       	movw	r24, r0
    677e:	65 9f       	mul	r22, r21
    6780:	90 0d       	add	r25, r0
    6782:	11 24       	eor	r1, r1
    6784:	8c 54       	subi	r24, 0x4C	; 76
    6786:	97 4d       	sbci	r25, 0xD7	; 215
    6788:	dc 01       	movw	r26, r24
    678a:	2d 93       	st	X+, r18
    678c:	3c 93       	st	X, r19
    678e:	8a a1       	ldd	r24, Y+34	; 0x22
    6790:	8d a3       	std	Y+37, r24	; 0x25
    6792:	82 e0       	ldi	r24, 0x02	; 2
    6794:	90 e0       	ldi	r25, 0x00	; 0
    6796:	8e a3       	std	Y+38, r24	; 0x26
    6798:	9f a3       	std	Y+39, r25	; 0x27
    679a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    679c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    679e:	88 a7       	std	Y+40, r24	; 0x28
    67a0:	99 a7       	std	Y+41, r25	; 0x29
    67a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    67a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    67a6:	af 8d       	ldd	r26, Y+31	; 0x1f
    67a8:	b8 a1       	ldd	r27, Y+32	; 0x20
    67aa:	8a a7       	std	Y+42, r24	; 0x2a
    67ac:	9b a7       	std	Y+43, r25	; 0x2b
    67ae:	ac a7       	std	Y+44, r26	; 0x2c
    67b0:	bd a7       	std	Y+45, r27	; 0x2d
    67b2:	80 91 29 29 	lds	r24, 0x2929	; 0x802929 <gpfAppSocketCb>
    67b6:	90 91 2a 29 	lds	r25, 0x292A	; 0x80292a <gpfAppSocketCb+0x1>
    67ba:	89 2b       	or	r24, r25
    67bc:	09 f4       	brne	.+2      	; 0x67c0 <m2m_ip_cb+0x25a>
    67be:	8b c2       	rjmp	.+1302   	; 0x6cd6 <m2m_ip_cb+0x770>
    67c0:	20 91 29 29 	lds	r18, 0x2929	; 0x802929 <gpfAppSocketCb>
    67c4:	30 91 2a 29 	lds	r19, 0x292A	; 0x80292a <gpfAppSocketCb+0x1>
    67c8:	79 a1       	ldd	r23, Y+33	; 0x21
    67ca:	ce 01       	movw	r24, r28
    67cc:	85 96       	adiw	r24, 0x25	; 37
    67ce:	ac 01       	movw	r20, r24
    67d0:	64 e0       	ldi	r22, 0x04	; 4
    67d2:	87 2f       	mov	r24, r23
    67d4:	f9 01       	movw	r30, r18
    67d6:	09 95       	icall
    67d8:	7e c2       	rjmp	.+1276   	; 0x6cd6 <m2m_ip_cb+0x770>
    67da:	ce 01       	movw	r24, r28
    67dc:	8c 53       	subi	r24, 0x3C	; 60
    67de:	9f 4f       	sbci	r25, 0xFF	; 255
    67e0:	dc 01       	movw	r26, r24
    67e2:	8c 91       	ld	r24, X
    67e4:	84 34       	cpi	r24, 0x44	; 68
    67e6:	41 f0       	breq	.+16     	; 0x67f8 <m2m_ip_cb+0x292>
    67e8:	ce 01       	movw	r24, r28
    67ea:	8c 53       	subi	r24, 0x3C	; 60
    67ec:	9f 4f       	sbci	r25, 0xFF	; 255
    67ee:	fc 01       	movw	r30, r24
    67f0:	80 81       	ld	r24, Z
    67f2:	8b 34       	cpi	r24, 0x4B	; 75
    67f4:	09 f0       	breq	.+2      	; 0x67f8 <m2m_ip_cb+0x292>
    67f6:	44 c0       	rjmp	.+136    	; 0x6880 <m2m_ip_cb+0x31a>
    67f8:	ae 01       	movw	r20, r28
    67fa:	4a 5c       	subi	r20, 0xCA	; 202
    67fc:	5f 4f       	sbci	r21, 0xFF	; 255
    67fe:	ce 01       	movw	r24, r28
    6800:	89 53       	subi	r24, 0x39	; 57
    6802:	9f 4f       	sbci	r25, 0xFF	; 255
    6804:	fc 01       	movw	r30, r24
    6806:	80 81       	ld	r24, Z
    6808:	91 81       	ldd	r25, Z+1	; 0x01
    680a:	a2 81       	ldd	r26, Z+2	; 0x02
    680c:	b3 81       	ldd	r27, Z+3	; 0x03
    680e:	00 e0       	ldi	r16, 0x00	; 0
    6810:	24 e0       	ldi	r18, 0x04	; 4
    6812:	30 e0       	ldi	r19, 0x00	; 0
    6814:	bc 01       	movw	r22, r24
    6816:	cd 01       	movw	r24, r26
    6818:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    681c:	88 23       	and	r24, r24
    681e:	09 f0       	breq	.+2      	; 0x6822 <m2m_ip_cb+0x2bc>
    6820:	55 c2       	rjmp	.+1194   	; 0x6ccc <m2m_ip_cb+0x766>
    6822:	8e a9       	ldd	r24, Y+54	; 0x36
    6824:	8a af       	std	Y+58, r24	; 0x3a
    6826:	8f a9       	ldd	r24, Y+55	; 0x37
    6828:	8b af       	std	Y+59, r24	; 0x3b
    682a:	8f a9       	ldd	r24, Y+55	; 0x37
    682c:	88 23       	and	r24, r24
    682e:	a1 f4       	brne	.+40     	; 0x6858 <m2m_ip_cb+0x2f2>
    6830:	8e a9       	ldd	r24, Y+54	; 0x36
    6832:	48 2f       	mov	r20, r24
    6834:	88 0f       	add	r24, r24
    6836:	55 0b       	sbc	r21, r21
    6838:	88 ad       	ldd	r24, Y+56	; 0x38
    683a:	99 ad       	ldd	r25, Y+57	; 0x39
    683c:	9c 01       	movw	r18, r24
    683e:	28 50       	subi	r18, 0x08	; 8
    6840:	31 09       	sbc	r19, r1
    6842:	6b e0       	ldi	r22, 0x0B	; 11
    6844:	64 9f       	mul	r22, r20
    6846:	c0 01       	movw	r24, r0
    6848:	65 9f       	mul	r22, r21
    684a:	90 0d       	add	r25, r0
    684c:	11 24       	eor	r1, r1
    684e:	8a 54       	subi	r24, 0x4A	; 74
    6850:	97 4d       	sbci	r25, 0xD7	; 215
    6852:	dc 01       	movw	r26, r24
    6854:	2d 93       	st	X+, r18
    6856:	3c 93       	st	X, r19
    6858:	80 91 29 29 	lds	r24, 0x2929	; 0x802929 <gpfAppSocketCb>
    685c:	90 91 2a 29 	lds	r25, 0x292A	; 0x80292a <gpfAppSocketCb+0x1>
    6860:	89 2b       	or	r24, r25
    6862:	09 f4       	brne	.+2      	; 0x6866 <m2m_ip_cb+0x300>
    6864:	33 c2       	rjmp	.+1126   	; 0x6ccc <m2m_ip_cb+0x766>
    6866:	20 91 29 29 	lds	r18, 0x2929	; 0x802929 <gpfAppSocketCb>
    686a:	30 91 2a 29 	lds	r19, 0x292A	; 0x80292a <gpfAppSocketCb+0x1>
    686e:	7e a9       	ldd	r23, Y+54	; 0x36
    6870:	ce 01       	movw	r24, r28
    6872:	ca 96       	adiw	r24, 0x3a	; 58
    6874:	ac 01       	movw	r20, r24
    6876:	65 e0       	ldi	r22, 0x05	; 5
    6878:	87 2f       	mov	r24, r23
    687a:	f9 01       	movw	r30, r18
    687c:	09 95       	icall
    687e:	26 c2       	rjmp	.+1100   	; 0x6ccc <m2m_ip_cb+0x766>
    6880:	ce 01       	movw	r24, r28
    6882:	8c 53       	subi	r24, 0x3C	; 60
    6884:	9f 4f       	sbci	r25, 0xFF	; 255
    6886:	dc 01       	movw	r26, r24
    6888:	8c 91       	ld	r24, X
    688a:	8a 34       	cpi	r24, 0x4A	; 74
    688c:	99 f5       	brne	.+102    	; 0x68f4 <m2m_ip_cb+0x38e>
    688e:	ae 01       	movw	r20, r28
    6890:	40 58       	subi	r20, 0x80	; 128
    6892:	5f 4f       	sbci	r21, 0xFF	; 255
    6894:	ce 01       	movw	r24, r28
    6896:	89 53       	subi	r24, 0x39	; 57
    6898:	9f 4f       	sbci	r25, 0xFF	; 255
    689a:	fc 01       	movw	r30, r24
    689c:	80 81       	ld	r24, Z
    689e:	91 81       	ldd	r25, Z+1	; 0x01
    68a0:	a2 81       	ldd	r26, Z+2	; 0x02
    68a2:	b3 81       	ldd	r27, Z+3	; 0x03
    68a4:	00 e0       	ldi	r16, 0x00	; 0
    68a6:	24 e4       	ldi	r18, 0x44	; 68
    68a8:	30 e0       	ldi	r19, 0x00	; 0
    68aa:	bc 01       	movw	r22, r24
    68ac:	cd 01       	movw	r24, r26
    68ae:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    68b2:	88 23       	and	r24, r24
    68b4:	09 f0       	breq	.+2      	; 0x68b8 <m2m_ip_cb+0x352>
    68b6:	0f c2       	rjmp	.+1054   	; 0x6cd6 <m2m_ip_cb+0x770>
    68b8:	80 91 2d 29 	lds	r24, 0x292D	; 0x80292d <gpfAppResolveCb>
    68bc:	90 91 2e 29 	lds	r25, 0x292E	; 0x80292e <gpfAppResolveCb+0x1>
    68c0:	89 2b       	or	r24, r25
    68c2:	09 f4       	brne	.+2      	; 0x68c6 <m2m_ip_cb+0x360>
    68c4:	08 c2       	rjmp	.+1040   	; 0x6cd6 <m2m_ip_cb+0x770>
    68c6:	20 91 2d 29 	lds	r18, 0x292D	; 0x80292d <gpfAppResolveCb>
    68ca:	30 91 2e 29 	lds	r19, 0x292E	; 0x80292e <gpfAppResolveCb+0x1>
    68ce:	ce 01       	movw	r24, r28
    68d0:	80 58       	subi	r24, 0x80	; 128
    68d2:	9f 4f       	sbci	r25, 0xFF	; 255
    68d4:	80 5c       	subi	r24, 0xC0	; 192
    68d6:	9f 4f       	sbci	r25, 0xFF	; 255
    68d8:	fc 01       	movw	r30, r24
    68da:	80 81       	ld	r24, Z
    68dc:	91 81       	ldd	r25, Z+1	; 0x01
    68de:	a2 81       	ldd	r26, Z+2	; 0x02
    68e0:	b3 81       	ldd	r27, Z+3	; 0x03
    68e2:	fe 01       	movw	r30, r28
    68e4:	e0 58       	subi	r30, 0x80	; 128
    68e6:	ff 4f       	sbci	r31, 0xFF	; 255
    68e8:	ac 01       	movw	r20, r24
    68ea:	bd 01       	movw	r22, r26
    68ec:	cf 01       	movw	r24, r30
    68ee:	f9 01       	movw	r30, r18
    68f0:	09 95       	icall
    68f2:	f1 c1       	rjmp	.+994    	; 0x6cd6 <m2m_ip_cb+0x770>
    68f4:	ce 01       	movw	r24, r28
    68f6:	8c 53       	subi	r24, 0x3C	; 60
    68f8:	9f 4f       	sbci	r25, 0xFF	; 255
    68fa:	dc 01       	movw	r26, r24
    68fc:	8c 91       	ld	r24, X
    68fe:	86 34       	cpi	r24, 0x46	; 70
    6900:	79 f0       	breq	.+30     	; 0x6920 <m2m_ip_cb+0x3ba>
    6902:	ce 01       	movw	r24, r28
    6904:	8c 53       	subi	r24, 0x3C	; 60
    6906:	9f 4f       	sbci	r25, 0xFF	; 255
    6908:	fc 01       	movw	r30, r24
    690a:	80 81       	ld	r24, Z
    690c:	88 34       	cpi	r24, 0x48	; 72
    690e:	41 f0       	breq	.+16     	; 0x6920 <m2m_ip_cb+0x3ba>
    6910:	ce 01       	movw	r24, r28
    6912:	8c 53       	subi	r24, 0x3C	; 60
    6914:	9f 4f       	sbci	r25, 0xFF	; 255
    6916:	dc 01       	movw	r26, r24
    6918:	8c 91       	ld	r24, X
    691a:	8d 34       	cpi	r24, 0x4D	; 77
    691c:	09 f0       	breq	.+2      	; 0x6920 <m2m_ip_cb+0x3ba>
    691e:	fc c0       	rjmp	.+504    	; 0x6b18 <m2m_ip_cb+0x5b2>
    6920:	86 e0       	ldi	r24, 0x06	; 6
    6922:	89 83       	std	Y+1, r24	; 0x01
    6924:	ce 01       	movw	r24, r28
    6926:	8c 53       	subi	r24, 0x3C	; 60
    6928:	9f 4f       	sbci	r25, 0xFF	; 255
    692a:	fc 01       	movw	r30, r24
    692c:	80 81       	ld	r24, Z
    692e:	88 34       	cpi	r24, 0x48	; 72
    6930:	11 f4       	brne	.+4      	; 0x6936 <m2m_ip_cb+0x3d0>
    6932:	89 e0       	ldi	r24, 0x09	; 9
    6934:	89 83       	std	Y+1, r24	; 0x01
    6936:	80 e1       	ldi	r24, 0x10	; 16
    6938:	90 e0       	ldi	r25, 0x00	; 0
    693a:	8e 83       	std	Y+6, r24	; 0x06
    693c:	9f 83       	std	Y+7, r25	; 0x07
    693e:	2e 81       	ldd	r18, Y+6	; 0x06
    6940:	3f 81       	ldd	r19, Y+7	; 0x07
    6942:	ae 01       	movw	r20, r28
    6944:	44 5c       	subi	r20, 0xC4	; 196
    6946:	5f 4f       	sbci	r21, 0xFF	; 255
    6948:	ce 01       	movw	r24, r28
    694a:	89 53       	subi	r24, 0x39	; 57
    694c:	9f 4f       	sbci	r25, 0xFF	; 255
    694e:	fc 01       	movw	r30, r24
    6950:	80 81       	ld	r24, Z
    6952:	91 81       	ldd	r25, Z+1	; 0x01
    6954:	a2 81       	ldd	r26, Z+2	; 0x02
    6956:	b3 81       	ldd	r27, Z+3	; 0x03
    6958:	00 e0       	ldi	r16, 0x00	; 0
    695a:	bc 01       	movw	r22, r24
    695c:	cd 01       	movw	r24, r26
    695e:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    6962:	88 23       	and	r24, r24
    6964:	09 f0       	breq	.+2      	; 0x6968 <m2m_ip_cb+0x402>
    6966:	b4 c1       	rjmp	.+872    	; 0x6cd0 <m2m_ip_cb+0x76a>
    6968:	18 86       	std	Y+8, r1	; 0x08
    696a:	19 86       	std	Y+9, r1	; 0x09
    696c:	ce 01       	movw	r24, r28
    696e:	88 5b       	subi	r24, 0xB8	; 184
    6970:	9f 4f       	sbci	r25, 0xFF	; 255
    6972:	dc 01       	movw	r26, r24
    6974:	8c 91       	ld	r24, X
    6976:	8a 87       	std	Y+10, r24	; 0x0a
    6978:	ce 01       	movw	r24, r28
    697a:	86 5b       	subi	r24, 0xB6	; 182
    697c:	9f 4f       	sbci	r25, 0xFF	; 255
    697e:	fc 01       	movw	r30, r24
    6980:	80 81       	ld	r24, Z
    6982:	91 81       	ldd	r25, Z+1	; 0x01
    6984:	88 87       	std	Y+8, r24	; 0x08
    6986:	99 87       	std	Y+9, r25	; 0x09
    6988:	8a 85       	ldd	r24, Y+10	; 0x0a
    698a:	28 2f       	mov	r18, r24
    698c:	88 0f       	add	r24, r24
    698e:	33 0b       	sbc	r19, r19
    6990:	4b e0       	ldi	r20, 0x0B	; 11
    6992:	42 9f       	mul	r20, r18
    6994:	c0 01       	movw	r24, r0
    6996:	43 9f       	mul	r20, r19
    6998:	90 0d       	add	r25, r0
    699a:	11 24       	eor	r1, r1
    699c:	86 54       	subi	r24, 0x46	; 70
    699e:	97 4d       	sbci	r25, 0xD7	; 215
    69a0:	dc 01       	movw	r26, r24
    69a2:	1c 92       	st	X, r1
    69a4:	ce 01       	movw	r24, r28
    69a6:	8c 5b       	subi	r24, 0xBC	; 188
    69a8:	9f 4f       	sbci	r25, 0xFF	; 255
    69aa:	fc 01       	movw	r30, r24
    69ac:	80 81       	ld	r24, Z
    69ae:	91 81       	ldd	r25, Z+1	; 0x01
    69b0:	8b 87       	std	Y+11, r24	; 0x0b
    69b2:	9c 87       	std	Y+12, r25	; 0x0c
    69b4:	ce 01       	movw	r24, r28
    69b6:	8a 5b       	subi	r24, 0xBA	; 186
    69b8:	9f 4f       	sbci	r25, 0xFF	; 255
    69ba:	dc 01       	movw	r26, r24
    69bc:	8d 91       	ld	r24, X+
    69be:	9c 91       	ld	r25, X
    69c0:	8d 87       	std	Y+13, r24	; 0x0d
    69c2:	9e 87       	std	Y+14, r25	; 0x0e
    69c4:	2e ad       	ldd	r18, Y+62	; 0x3e
    69c6:	3f ad       	ldd	r19, Y+63	; 0x3f
    69c8:	ce 01       	movw	r24, r28
    69ca:	84 5b       	subi	r24, 0xB4	; 180
    69cc:	9f 4f       	sbci	r25, 0xFF	; 255
    69ce:	fc 01       	movw	r30, r24
    69d0:	20 87       	std	Z+8, r18	; 0x08
    69d2:	31 87       	std	Z+9, r19	; 0x09
    69d4:	ce 01       	movw	r24, r28
    69d6:	80 5c       	subi	r24, 0xC0	; 192
    69d8:	9f 4f       	sbci	r25, 0xFF	; 255
    69da:	fc 01       	movw	r30, r24
    69dc:	80 81       	ld	r24, Z
    69de:	91 81       	ldd	r25, Z+1	; 0x01
    69e0:	a2 81       	ldd	r26, Z+2	; 0x02
    69e2:	b3 81       	ldd	r27, Z+3	; 0x03
    69e4:	9e 01       	movw	r18, r28
    69e6:	24 5b       	subi	r18, 0xB4	; 180
    69e8:	3f 4f       	sbci	r19, 0xFF	; 255
    69ea:	f9 01       	movw	r30, r18
    69ec:	82 87       	std	Z+10, r24	; 0x0a
    69ee:	93 87       	std	Z+11, r25	; 0x0b
    69f0:	a4 87       	std	Z+12, r26	; 0x0c
    69f2:	b5 87       	std	Z+13, r27	; 0x0d
    69f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    69f6:	28 2f       	mov	r18, r24
    69f8:	88 0f       	add	r24, r24
    69fa:	33 0b       	sbc	r19, r19
    69fc:	4b e0       	ldi	r20, 0x0B	; 11
    69fe:	42 9f       	mul	r20, r18
    6a00:	c0 01       	movw	r24, r0
    6a02:	43 9f       	mul	r20, r19
    6a04:	90 0d       	add	r25, r0
    6a06:	11 24       	eor	r1, r1
    6a08:	8c 54       	subi	r24, 0x4C	; 76
    6a0a:	97 4d       	sbci	r25, 0xD7	; 215
    6a0c:	dc 01       	movw	r26, r24
    6a0e:	2d 91       	ld	r18, X+
    6a10:	3c 91       	ld	r19, X
    6a12:	88 85       	ldd	r24, Y+8	; 0x08
    6a14:	99 85       	ldd	r25, Y+9	; 0x09
    6a16:	28 17       	cp	r18, r24
    6a18:	39 07       	cpc	r19, r25
    6a1a:	09 f0       	breq	.+2      	; 0x6a1e <m2m_ip_cb+0x4b8>
    6a1c:	66 c0       	rjmp	.+204    	; 0x6aea <m2m_ip_cb+0x584>
    6a1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6a20:	9c 85       	ldd	r25, Y+12	; 0x0c
    6a22:	18 16       	cp	r1, r24
    6a24:	19 06       	cpc	r1, r25
    6a26:	ec f5       	brge	.+122    	; 0x6aa2 <m2m_ip_cb+0x53c>
    6a28:	2b 85       	ldd	r18, Y+11	; 0x0b
    6a2a:	3c 85       	ldd	r19, Y+12	; 0x0c
    6a2c:	ce 01       	movw	r24, r28
    6a2e:	8b 53       	subi	r24, 0x3B	; 59
    6a30:	9f 4f       	sbci	r25, 0xFF	; 255
    6a32:	fc 01       	movw	r30, r24
    6a34:	80 81       	ld	r24, Z
    6a36:	91 81       	ldd	r25, Z+1	; 0x01
    6a38:	28 17       	cp	r18, r24
    6a3a:	39 07       	cpc	r19, r25
    6a3c:	90 f5       	brcc	.+100    	; 0x6aa2 <m2m_ip_cb+0x53c>
    6a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a42:	9c 01       	movw	r18, r24
    6a44:	40 e0       	ldi	r20, 0x00	; 0
    6a46:	50 e0       	ldi	r21, 0x00	; 0
    6a48:	be 01       	movw	r22, r28
    6a4a:	69 53       	subi	r22, 0x39	; 57
    6a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    6a4e:	ce 01       	movw	r24, r28
    6a50:	89 53       	subi	r24, 0x39	; 57
    6a52:	9f 4f       	sbci	r25, 0xFF	; 255
    6a54:	fc 01       	movw	r30, r24
    6a56:	80 81       	ld	r24, Z
    6a58:	91 81       	ldd	r25, Z+1	; 0x01
    6a5a:	a2 81       	ldd	r26, Z+2	; 0x02
    6a5c:	b3 81       	ldd	r27, Z+3	; 0x03
    6a5e:	82 0f       	add	r24, r18
    6a60:	93 1f       	adc	r25, r19
    6a62:	a4 1f       	adc	r26, r20
    6a64:	b5 1f       	adc	r27, r21
    6a66:	fb 01       	movw	r30, r22
    6a68:	80 83       	st	Z, r24
    6a6a:	91 83       	std	Z+1, r25	; 0x01
    6a6c:	a2 83       	std	Z+2, r26	; 0x02
    6a6e:	b3 83       	std	Z+3, r27	; 0x03
    6a70:	8b 85       	ldd	r24, Y+11	; 0x0b
    6a72:	9c 85       	ldd	r25, Y+12	; 0x0c
    6a74:	8e 83       	std	Y+6, r24	; 0x06
    6a76:	9f 83       	std	Y+7, r25	; 0x07
    6a78:	2e 81       	ldd	r18, Y+6	; 0x06
    6a7a:	3f 81       	ldd	r19, Y+7	; 0x07
    6a7c:	ce 01       	movw	r24, r28
    6a7e:	89 53       	subi	r24, 0x39	; 57
    6a80:	9f 4f       	sbci	r25, 0xFF	; 255
    6a82:	fc 01       	movw	r30, r24
    6a84:	80 81       	ld	r24, Z
    6a86:	91 81       	ldd	r25, Z+1	; 0x01
    6a88:	a2 81       	ldd	r26, Z+2	; 0x02
    6a8a:	b3 81       	ldd	r27, Z+3	; 0x03
    6a8c:	be 01       	movw	r22, r28
    6a8e:	64 5b       	subi	r22, 0xB4	; 180
    6a90:	7f 4f       	sbci	r23, 0xFF	; 255
    6a92:	79 01       	movw	r14, r18
    6a94:	8c 01       	movw	r16, r24
    6a96:	9d 01       	movw	r18, r26
    6a98:	49 81       	ldd	r20, Y+1	; 0x01
    6a9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    6a9c:	0e 94 7e 31 	call	0x62fc	; 0x62fc <Socket_ReadSocketData>
    6aa0:	17 c1       	rjmp	.+558    	; 0x6cd0 <m2m_ip_cb+0x76a>
    6aa2:	ce 01       	movw	r24, r28
    6aa4:	84 5b       	subi	r24, 0xB4	; 180
    6aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    6aa8:	2b 85       	ldd	r18, Y+11	; 0x0b
    6aaa:	3c 85       	ldd	r19, Y+12	; 0x0c
    6aac:	dc 01       	movw	r26, r24
    6aae:	12 96       	adiw	r26, 0x02	; 2
    6ab0:	2d 93       	st	X+, r18
    6ab2:	3c 93       	st	X, r19
    6ab4:	13 97       	sbiw	r26, 0x03	; 3
    6ab6:	ce 01       	movw	r24, r28
    6ab8:	84 5b       	subi	r24, 0xB4	; 180
    6aba:	9f 4f       	sbci	r25, 0xFF	; 255
    6abc:	fc 01       	movw	r30, r24
    6abe:	10 82       	st	Z, r1
    6ac0:	11 82       	std	Z+1, r1	; 0x01
    6ac2:	80 91 29 29 	lds	r24, 0x2929	; 0x802929 <gpfAppSocketCb>
    6ac6:	90 91 2a 29 	lds	r25, 0x292A	; 0x80292a <gpfAppSocketCb+0x1>
    6aca:	89 2b       	or	r24, r25
    6acc:	09 f4       	brne	.+2      	; 0x6ad0 <m2m_ip_cb+0x56a>
    6ace:	00 c1       	rjmp	.+512    	; 0x6cd0 <m2m_ip_cb+0x76a>
    6ad0:	20 91 29 29 	lds	r18, 0x2929	; 0x802929 <gpfAppSocketCb>
    6ad4:	30 91 2a 29 	lds	r19, 0x292A	; 0x80292a <gpfAppSocketCb+0x1>
    6ad8:	ce 01       	movw	r24, r28
    6ada:	84 5b       	subi	r24, 0xB4	; 180
    6adc:	9f 4f       	sbci	r25, 0xFF	; 255
    6ade:	ac 01       	movw	r20, r24
    6ae0:	69 81       	ldd	r22, Y+1	; 0x01
    6ae2:	8a 85       	ldd	r24, Y+10	; 0x0a
    6ae4:	f9 01       	movw	r30, r18
    6ae6:	09 95       	icall
    6ae8:	f3 c0       	rjmp	.+486    	; 0x6cd0 <m2m_ip_cb+0x76a>
    6aea:	ce 01       	movw	r24, r28
    6aec:	8b 53       	subi	r24, 0x3B	; 59
    6aee:	9f 4f       	sbci	r25, 0xFF	; 255
    6af0:	2e 81       	ldd	r18, Y+6	; 0x06
    6af2:	3f 81       	ldd	r19, Y+7	; 0x07
    6af4:	dc 01       	movw	r26, r24
    6af6:	8d 91       	ld	r24, X+
    6af8:	9c 91       	ld	r25, X
    6afa:	28 17       	cp	r18, r24
    6afc:	39 07       	cpc	r19, r25
    6afe:	08 f0       	brcs	.+2      	; 0x6b02 <m2m_ip_cb+0x59c>
    6b00:	e7 c0       	rjmp	.+462    	; 0x6cd0 <m2m_ip_cb+0x76a>
    6b02:	01 e0       	ldi	r16, 0x01	; 1
    6b04:	20 e0       	ldi	r18, 0x00	; 0
    6b06:	30 e0       	ldi	r19, 0x00	; 0
    6b08:	40 e0       	ldi	r20, 0x00	; 0
    6b0a:	50 e0       	ldi	r21, 0x00	; 0
    6b0c:	60 e0       	ldi	r22, 0x00	; 0
    6b0e:	70 e0       	ldi	r23, 0x00	; 0
    6b10:	cb 01       	movw	r24, r22
    6b12:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    6b16:	dc c0       	rjmp	.+440    	; 0x6cd0 <m2m_ip_cb+0x76a>
    6b18:	ce 01       	movw	r24, r28
    6b1a:	8c 53       	subi	r24, 0x3C	; 60
    6b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    6b1e:	fc 01       	movw	r30, r24
    6b20:	80 81       	ld	r24, Z
    6b22:	85 34       	cpi	r24, 0x45	; 69
    6b24:	79 f0       	breq	.+30     	; 0x6b44 <m2m_ip_cb+0x5de>
    6b26:	ce 01       	movw	r24, r28
    6b28:	8c 53       	subi	r24, 0x3C	; 60
    6b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    6b2c:	dc 01       	movw	r26, r24
    6b2e:	8c 91       	ld	r24, X
    6b30:	87 34       	cpi	r24, 0x47	; 71
    6b32:	41 f0       	breq	.+16     	; 0x6b44 <m2m_ip_cb+0x5de>
    6b34:	ce 01       	movw	r24, r28
    6b36:	8c 53       	subi	r24, 0x3C	; 60
    6b38:	9f 4f       	sbci	r25, 0xFF	; 255
    6b3a:	fc 01       	movw	r30, r24
    6b3c:	80 81       	ld	r24, Z
    6b3e:	8c 34       	cpi	r24, 0x4C	; 76
    6b40:	09 f0       	breq	.+2      	; 0x6b44 <m2m_ip_cb+0x5de>
    6b42:	67 c0       	rjmp	.+206    	; 0x6c12 <m2m_ip_cb+0x6ac>
    6b44:	87 e0       	ldi	r24, 0x07	; 7
    6b46:	8a 83       	std	Y+2, r24	; 0x02
    6b48:	ce 01       	movw	r24, r28
    6b4a:	8c 53       	subi	r24, 0x3C	; 60
    6b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    6b4e:	dc 01       	movw	r26, r24
    6b50:	8c 91       	ld	r24, X
    6b52:	87 34       	cpi	r24, 0x47	; 71
    6b54:	11 f4       	brne	.+4      	; 0x6b5a <m2m_ip_cb+0x5f4>
    6b56:	88 e0       	ldi	r24, 0x08	; 8
    6b58:	8a 83       	std	Y+2, r24	; 0x02
    6b5a:	ae 01       	movw	r20, r28
    6b5c:	4c 59       	subi	r20, 0x9C	; 156
    6b5e:	5f 4f       	sbci	r21, 0xFF	; 255
    6b60:	ce 01       	movw	r24, r28
    6b62:	89 53       	subi	r24, 0x39	; 57
    6b64:	9f 4f       	sbci	r25, 0xFF	; 255
    6b66:	fc 01       	movw	r30, r24
    6b68:	80 81       	ld	r24, Z
    6b6a:	91 81       	ldd	r25, Z+1	; 0x01
    6b6c:	a2 81       	ldd	r26, Z+2	; 0x02
    6b6e:	b3 81       	ldd	r27, Z+3	; 0x03
    6b70:	00 e0       	ldi	r16, 0x00	; 0
    6b72:	28 e0       	ldi	r18, 0x08	; 8
    6b74:	30 e0       	ldi	r19, 0x00	; 0
    6b76:	bc 01       	movw	r22, r24
    6b78:	cd 01       	movw	r24, r26
    6b7a:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    6b7e:	88 23       	and	r24, r24
    6b80:	09 f0       	breq	.+2      	; 0x6b84 <m2m_ip_cb+0x61e>
    6b82:	a8 c0       	rjmp	.+336    	; 0x6cd4 <m2m_ip_cb+0x76e>
    6b84:	1b 82       	std	Y+3, r1	; 0x03
    6b86:	1c 82       	std	Y+4, r1	; 0x04
    6b88:	ce 01       	movw	r24, r28
    6b8a:	8c 59       	subi	r24, 0x9C	; 156
    6b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    6b8e:	dc 01       	movw	r26, r24
    6b90:	8c 91       	ld	r24, X
    6b92:	8d 83       	std	Y+5, r24	; 0x05
    6b94:	ce 01       	movw	r24, r28
    6b96:	8c 59       	subi	r24, 0x9C	; 156
    6b98:	9f 4f       	sbci	r25, 0xFF	; 255
    6b9a:	fc 01       	movw	r30, r24
    6b9c:	84 81       	ldd	r24, Z+4	; 0x04
    6b9e:	95 81       	ldd	r25, Z+5	; 0x05
    6ba0:	8b 83       	std	Y+3, r24	; 0x03
    6ba2:	9c 83       	std	Y+4, r25	; 0x04
    6ba4:	ce 01       	movw	r24, r28
    6ba6:	8c 59       	subi	r24, 0x9C	; 156
    6ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    6baa:	dc 01       	movw	r26, r24
    6bac:	12 96       	adiw	r26, 0x02	; 2
    6bae:	2d 91       	ld	r18, X+
    6bb0:	3c 91       	ld	r19, X
    6bb2:	13 97       	sbiw	r26, 0x03	; 3
    6bb4:	ce 01       	movw	r24, r28
    6bb6:	8e 59       	subi	r24, 0x9E	; 158
    6bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    6bba:	fc 01       	movw	r30, r24
    6bbc:	20 83       	st	Z, r18
    6bbe:	31 83       	std	Z+1, r19	; 0x01
    6bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    6bc2:	28 2f       	mov	r18, r24
    6bc4:	88 0f       	add	r24, r24
    6bc6:	33 0b       	sbc	r19, r19
    6bc8:	4b e0       	ldi	r20, 0x0B	; 11
    6bca:	42 9f       	mul	r20, r18
    6bcc:	c0 01       	movw	r24, r0
    6bce:	43 9f       	mul	r20, r19
    6bd0:	90 0d       	add	r25, r0
    6bd2:	11 24       	eor	r1, r1
    6bd4:	8c 54       	subi	r24, 0x4C	; 76
    6bd6:	97 4d       	sbci	r25, 0xD7	; 215
    6bd8:	dc 01       	movw	r26, r24
    6bda:	2d 91       	ld	r18, X+
    6bdc:	3c 91       	ld	r19, X
    6bde:	8b 81       	ldd	r24, Y+3	; 0x03
    6be0:	9c 81       	ldd	r25, Y+4	; 0x04
    6be2:	28 17       	cp	r18, r24
    6be4:	39 07       	cpc	r19, r25
    6be6:	09 f0       	breq	.+2      	; 0x6bea <m2m_ip_cb+0x684>
    6be8:	75 c0       	rjmp	.+234    	; 0x6cd4 <m2m_ip_cb+0x76e>
    6bea:	80 91 29 29 	lds	r24, 0x2929	; 0x802929 <gpfAppSocketCb>
    6bee:	90 91 2a 29 	lds	r25, 0x292A	; 0x80292a <gpfAppSocketCb+0x1>
    6bf2:	89 2b       	or	r24, r25
    6bf4:	09 f4       	brne	.+2      	; 0x6bf8 <m2m_ip_cb+0x692>
    6bf6:	6e c0       	rjmp	.+220    	; 0x6cd4 <m2m_ip_cb+0x76e>
    6bf8:	20 91 29 29 	lds	r18, 0x2929	; 0x802929 <gpfAppSocketCb>
    6bfc:	30 91 2a 29 	lds	r19, 0x292A	; 0x80292a <gpfAppSocketCb+0x1>
    6c00:	ce 01       	movw	r24, r28
    6c02:	8e 59       	subi	r24, 0x9E	; 158
    6c04:	9f 4f       	sbci	r25, 0xFF	; 255
    6c06:	ac 01       	movw	r20, r24
    6c08:	6a 81       	ldd	r22, Y+2	; 0x02
    6c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    6c0c:	f9 01       	movw	r30, r18
    6c0e:	09 95       	icall
    6c10:	61 c0       	rjmp	.+194    	; 0x6cd4 <m2m_ip_cb+0x76e>
    6c12:	ce 01       	movw	r24, r28
    6c14:	8c 53       	subi	r24, 0x3C	; 60
    6c16:	9f 4f       	sbci	r25, 0xFF	; 255
    6c18:	dc 01       	movw	r26, r24
    6c1a:	8c 91       	ld	r24, X
    6c1c:	82 35       	cpi	r24, 0x52	; 82
    6c1e:	09 f0       	breq	.+2      	; 0x6c22 <m2m_ip_cb+0x6bc>
    6c20:	5a c0       	rjmp	.+180    	; 0x6cd6 <m2m_ip_cb+0x770>
    6c22:	ae 01       	movw	r20, r28
    6c24:	44 59       	subi	r20, 0x94	; 148
    6c26:	5f 4f       	sbci	r21, 0xFF	; 255
    6c28:	ce 01       	movw	r24, r28
    6c2a:	89 53       	subi	r24, 0x39	; 57
    6c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    6c2e:	fc 01       	movw	r30, r24
    6c30:	80 81       	ld	r24, Z
    6c32:	91 81       	ldd	r25, Z+1	; 0x01
    6c34:	a2 81       	ldd	r26, Z+2	; 0x02
    6c36:	b3 81       	ldd	r27, Z+3	; 0x03
    6c38:	01 e0       	ldi	r16, 0x01	; 1
    6c3a:	24 e1       	ldi	r18, 0x14	; 20
    6c3c:	30 e0       	ldi	r19, 0x00	; 0
    6c3e:	bc 01       	movw	r22, r24
    6c40:	cd 01       	movw	r24, r26
    6c42:	0e 94 2e 1b 	call	0x365c	; 0x365c <hif_receive>
    6c46:	88 23       	and	r24, r24
    6c48:	09 f0       	breq	.+2      	; 0x6c4c <m2m_ip_cb+0x6e6>
    6c4a:	45 c0       	rjmp	.+138    	; 0x6cd6 <m2m_ip_cb+0x770>
    6c4c:	ce 01       	movw	r24, r28
    6c4e:	84 59       	subi	r24, 0x94	; 148
    6c50:	9f 4f       	sbci	r25, 0xFF	; 255
    6c52:	fc 01       	movw	r30, r24
    6c54:	84 81       	ldd	r24, Z+4	; 0x04
    6c56:	95 81       	ldd	r25, Z+5	; 0x05
    6c58:	a6 81       	ldd	r26, Z+6	; 0x06
    6c5a:	b7 81       	ldd	r27, Z+7	; 0x07
    6c5c:	80 93 2b 29 	sts	0x292B, r24	; 0x80292b <gfpPingCb>
    6c60:	90 93 2c 29 	sts	0x292C, r25	; 0x80292c <gfpPingCb+0x1>
    6c64:	80 91 2b 29 	lds	r24, 0x292B	; 0x80292b <gfpPingCb>
    6c68:	90 91 2c 29 	lds	r25, 0x292C	; 0x80292c <gfpPingCb+0x1>
    6c6c:	89 2b       	or	r24, r25
    6c6e:	99 f1       	breq	.+102    	; 0x6cd6 <m2m_ip_cb+0x770>
    6c70:	a0 91 2b 29 	lds	r26, 0x292B	; 0x80292b <gfpPingCb>
    6c74:	b0 91 2c 29 	lds	r27, 0x292C	; 0x80292c <gfpPingCb+0x1>
    6c78:	c5 53       	subi	r28, 0x35	; 53
    6c7a:	df 4f       	sbci	r29, 0xFF	; 255
    6c7c:	a8 83       	st	Y, r26
    6c7e:	b9 83       	std	Y+1, r27	; 0x01
    6c80:	cb 5c       	subi	r28, 0xCB	; 203
    6c82:	d0 40       	sbci	r29, 0x00	; 0
    6c84:	ce 01       	movw	r24, r28
    6c86:	84 59       	subi	r24, 0x94	; 148
    6c88:	9f 4f       	sbci	r25, 0xFF	; 255
    6c8a:	fc 01       	movw	r30, r24
    6c8c:	60 89       	ldd	r22, Z+16	; 0x10
    6c8e:	ce 01       	movw	r24, r28
    6c90:	84 59       	subi	r24, 0x94	; 148
    6c92:	9f 4f       	sbci	r25, 0xFF	; 255
    6c94:	dc 01       	movw	r26, r24
    6c96:	18 96       	adiw	r26, 0x08	; 8
    6c98:	2d 91       	ld	r18, X+
    6c9a:	3d 91       	ld	r19, X+
    6c9c:	4d 91       	ld	r20, X+
    6c9e:	5c 91       	ld	r21, X
    6ca0:	1b 97       	sbiw	r26, 0x0b	; 11
    6ca2:	ce 01       	movw	r24, r28
    6ca4:	84 59       	subi	r24, 0x94	; 148
    6ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ca8:	fc 01       	movw	r30, r24
    6caa:	80 81       	ld	r24, Z
    6cac:	91 81       	ldd	r25, Z+1	; 0x01
    6cae:	a2 81       	ldd	r26, Z+2	; 0x02
    6cb0:	b3 81       	ldd	r27, Z+3	; 0x03
    6cb2:	06 2f       	mov	r16, r22
    6cb4:	bc 01       	movw	r22, r24
    6cb6:	cd 01       	movw	r24, r26
    6cb8:	c5 53       	subi	r28, 0x35	; 53
    6cba:	df 4f       	sbci	r29, 0xFF	; 255
    6cbc:	e8 81       	ld	r30, Y
    6cbe:	f9 81       	ldd	r31, Y+1	; 0x01
    6cc0:	cb 5c       	subi	r28, 0xCB	; 203
    6cc2:	d0 40       	sbci	r29, 0x00	; 0
    6cc4:	09 95       	icall
    6cc6:	07 c0       	rjmp	.+14     	; 0x6cd6 <m2m_ip_cb+0x770>
    6cc8:	00 00       	nop
    6cca:	05 c0       	rjmp	.+10     	; 0x6cd6 <m2m_ip_cb+0x770>
    6ccc:	00 00       	nop
    6cce:	03 c0       	rjmp	.+6      	; 0x6cd6 <m2m_ip_cb+0x770>
    6cd0:	00 00       	nop
    6cd2:	01 c0       	rjmp	.+2      	; 0x6cd6 <m2m_ip_cb+0x770>
    6cd4:	00 00       	nop
    6cd6:	00 00       	nop
    6cd8:	c4 53       	subi	r28, 0x34	; 52
    6cda:	df 4f       	sbci	r29, 0xFF	; 255
    6cdc:	cd bf       	out	0x3d, r28	; 61
    6cde:	de bf       	out	0x3e, r29	; 62
    6ce0:	df 91       	pop	r29
    6ce2:	cf 91       	pop	r28
    6ce4:	1f 91       	pop	r17
    6ce6:	0f 91       	pop	r16
    6ce8:	ff 90       	pop	r15
    6cea:	ef 90       	pop	r14
    6cec:	08 95       	ret

00006cee <socketInit>:
    6cee:	cf 93       	push	r28
    6cf0:	df 93       	push	r29
    6cf2:	cd b7       	in	r28, 0x3d	; 61
    6cf4:	de b7       	in	r29, 0x3e	; 62
    6cf6:	80 91 2b 28 	lds	r24, 0x282B	; 0x80282b <gbSocketInit>
    6cfa:	88 23       	and	r24, r24
    6cfc:	a9 f4       	brne	.+42     	; 0x6d28 <socketInit+0x3a>
    6cfe:	29 e7       	ldi	r18, 0x79	; 121
    6d00:	30 e0       	ldi	r19, 0x00	; 0
    6d02:	40 e0       	ldi	r20, 0x00	; 0
    6d04:	50 e0       	ldi	r21, 0x00	; 0
    6d06:	60 e0       	ldi	r22, 0x00	; 0
    6d08:	80 eb       	ldi	r24, 0xB0	; 176
    6d0a:	98 e2       	ldi	r25, 0x28	; 40
    6d0c:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <m2m_memset>
    6d10:	63 eb       	ldi	r22, 0xB3	; 179
    6d12:	72 e3       	ldi	r23, 0x32	; 50
    6d14:	82 e0       	ldi	r24, 0x02	; 2
    6d16:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <hif_register_cb>
    6d1a:	81 e0       	ldi	r24, 0x01	; 1
    6d1c:	80 93 2b 28 	sts	0x282B, r24	; 0x80282b <gbSocketInit>
    6d20:	10 92 29 28 	sts	0x2829, r1	; 0x802829 <gu16SessionID>
    6d24:	10 92 2a 28 	sts	0x282A, r1	; 0x80282a <gu16SessionID+0x1>
    6d28:	00 00       	nop
    6d2a:	df 91       	pop	r29
    6d2c:	cf 91       	pop	r28
    6d2e:	08 95       	ret

00006d30 <registerSocketCallback>:
    6d30:	cf 93       	push	r28
    6d32:	df 93       	push	r29
    6d34:	00 d0       	rcall	.+0      	; 0x6d36 <registerSocketCallback+0x6>
    6d36:	00 d0       	rcall	.+0      	; 0x6d38 <registerSocketCallback+0x8>
    6d38:	cd b7       	in	r28, 0x3d	; 61
    6d3a:	de b7       	in	r29, 0x3e	; 62
    6d3c:	89 83       	std	Y+1, r24	; 0x01
    6d3e:	9a 83       	std	Y+2, r25	; 0x02
    6d40:	6b 83       	std	Y+3, r22	; 0x03
    6d42:	7c 83       	std	Y+4, r23	; 0x04
    6d44:	89 81       	ldd	r24, Y+1	; 0x01
    6d46:	9a 81       	ldd	r25, Y+2	; 0x02
    6d48:	80 93 29 29 	sts	0x2929, r24	; 0x802929 <gpfAppSocketCb>
    6d4c:	90 93 2a 29 	sts	0x292A, r25	; 0x80292a <gpfAppSocketCb+0x1>
    6d50:	8b 81       	ldd	r24, Y+3	; 0x03
    6d52:	9c 81       	ldd	r25, Y+4	; 0x04
    6d54:	80 93 2d 29 	sts	0x292D, r24	; 0x80292d <gpfAppResolveCb>
    6d58:	90 93 2e 29 	sts	0x292E, r25	; 0x80292e <gpfAppResolveCb+0x1>
    6d5c:	00 00       	nop
    6d5e:	24 96       	adiw	r28, 0x04	; 4
    6d60:	cd bf       	out	0x3d, r28	; 61
    6d62:	de bf       	out	0x3e, r29	; 62
    6d64:	df 91       	pop	r29
    6d66:	cf 91       	pop	r28
    6d68:	08 95       	ret

00006d6a <socket>:
    6d6a:	cf 92       	push	r12
    6d6c:	df 92       	push	r13
    6d6e:	ef 92       	push	r14
    6d70:	ff 92       	push	r15
    6d72:	0f 93       	push	r16
    6d74:	1f 93       	push	r17
    6d76:	cf 93       	push	r28
    6d78:	df 93       	push	r29
    6d7a:	cd b7       	in	r28, 0x3d	; 61
    6d7c:	de b7       	in	r29, 0x3e	; 62
    6d7e:	2f 97       	sbiw	r28, 0x0f	; 15
    6d80:	cd bf       	out	0x3d, r28	; 61
    6d82:	de bf       	out	0x3e, r29	; 62
    6d84:	8c 87       	std	Y+12, r24	; 0x0c
    6d86:	9d 87       	std	Y+13, r25	; 0x0d
    6d88:	6e 87       	std	Y+14, r22	; 0x0e
    6d8a:	4f 87       	std	Y+15, r20	; 0x0f
    6d8c:	8f ef       	ldi	r24, 0xFF	; 255
    6d8e:	89 83       	std	Y+1, r24	; 0x01
    6d90:	8c 85       	ldd	r24, Y+12	; 0x0c
    6d92:	9d 85       	ldd	r25, Y+13	; 0x0d
    6d94:	02 97       	sbiw	r24, 0x02	; 2
    6d96:	09 f0       	breq	.+2      	; 0x6d9a <socket+0x30>
    6d98:	bd c0       	rjmp	.+378    	; 0x6f14 <socket+0x1aa>
    6d9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    6d9c:	81 30       	cpi	r24, 0x01	; 1
    6d9e:	79 f5       	brne	.+94     	; 0x6dfe <socket+0x94>
    6da0:	1a 82       	std	Y+2, r1	; 0x02
    6da2:	29 c0       	rjmp	.+82     	; 0x6df6 <socket+0x8c>
    6da4:	80 91 2c 28 	lds	r24, 0x282C	; 0x80282c <u8NextTcpSock.2561>
    6da8:	8d 83       	std	Y+5, r24	; 0x05
    6daa:	80 91 2c 28 	lds	r24, 0x282C	; 0x80282c <u8NextTcpSock.2561>
    6dae:	28 2f       	mov	r18, r24
    6db0:	30 e0       	ldi	r19, 0x00	; 0
    6db2:	4b e0       	ldi	r20, 0x0B	; 11
    6db4:	42 9f       	mul	r20, r18
    6db6:	c0 01       	movw	r24, r0
    6db8:	43 9f       	mul	r20, r19
    6dba:	90 0d       	add	r25, r0
    6dbc:	11 24       	eor	r1, r1
    6dbe:	80 55       	subi	r24, 0x50	; 80
    6dc0:	97 4d       	sbci	r25, 0xD7	; 215
    6dc2:	8b 83       	std	Y+3, r24	; 0x03
    6dc4:	9c 83       	std	Y+4, r25	; 0x04
    6dc6:	80 91 2c 28 	lds	r24, 0x282C	; 0x80282c <u8NextTcpSock.2561>
    6dca:	88 2f       	mov	r24, r24
    6dcc:	90 e0       	ldi	r25, 0x00	; 0
    6dce:	01 96       	adiw	r24, 0x01	; 1
    6dd0:	27 e0       	ldi	r18, 0x07	; 7
    6dd2:	30 e0       	ldi	r19, 0x00	; 0
    6dd4:	b9 01       	movw	r22, r18
    6dd6:	0e 94 b3 3c 	call	0x7966	; 0x7966 <__divmodhi4>
    6dda:	80 93 2c 28 	sts	0x282C, r24	; 0x80282c <u8NextTcpSock.2561>
    6dde:	8b 81       	ldd	r24, Y+3	; 0x03
    6de0:	9c 81       	ldd	r25, Y+4	; 0x04
    6de2:	fc 01       	movw	r30, r24
    6de4:	80 85       	ldd	r24, Z+8	; 0x08
    6de6:	88 23       	and	r24, r24
    6de8:	19 f4       	brne	.+6      	; 0x6df0 <socket+0x86>
    6dea:	8d 81       	ldd	r24, Y+5	; 0x05
    6dec:	89 83       	std	Y+1, r24	; 0x01
    6dee:	42 c0       	rjmp	.+132    	; 0x6e74 <socket+0x10a>
    6df0:	8a 81       	ldd	r24, Y+2	; 0x02
    6df2:	8f 5f       	subi	r24, 0xFF	; 255
    6df4:	8a 83       	std	Y+2, r24	; 0x02
    6df6:	8a 81       	ldd	r24, Y+2	; 0x02
    6df8:	87 30       	cpi	r24, 0x07	; 7
    6dfa:	a0 f2       	brcs	.-88     	; 0x6da4 <socket+0x3a>
    6dfc:	3b c0       	rjmp	.+118    	; 0x6e74 <socket+0x10a>
    6dfe:	8e 85       	ldd	r24, Y+14	; 0x0e
    6e00:	82 30       	cpi	r24, 0x02	; 2
    6e02:	c1 f5       	brne	.+112    	; 0x6e74 <socket+0x10a>
    6e04:	8d ef       	ldi	r24, 0xFD	; 253
    6e06:	98 e2       	ldi	r25, 0x28	; 40
    6e08:	8e 83       	std	Y+6, r24	; 0x06
    6e0a:	9f 83       	std	Y+7, r25	; 0x07
    6e0c:	1a 82       	std	Y+2, r1	; 0x02
    6e0e:	2f c0       	rjmp	.+94     	; 0x6e6e <socket+0x104>
    6e10:	80 91 2d 28 	lds	r24, 0x282D	; 0x80282d <u8NextUdpSock.2562>
    6e14:	8d 83       	std	Y+5, r24	; 0x05
    6e16:	80 91 2d 28 	lds	r24, 0x282D	; 0x80282d <u8NextUdpSock.2562>
    6e1a:	28 2f       	mov	r18, r24
    6e1c:	30 e0       	ldi	r19, 0x00	; 0
    6e1e:	4b e0       	ldi	r20, 0x0B	; 11
    6e20:	42 9f       	mul	r20, r18
    6e22:	c0 01       	movw	r24, r0
    6e24:	43 9f       	mul	r20, r19
    6e26:	90 0d       	add	r25, r0
    6e28:	11 24       	eor	r1, r1
    6e2a:	2e 81       	ldd	r18, Y+6	; 0x06
    6e2c:	3f 81       	ldd	r19, Y+7	; 0x07
    6e2e:	82 0f       	add	r24, r18
    6e30:	93 1f       	adc	r25, r19
    6e32:	8b 83       	std	Y+3, r24	; 0x03
    6e34:	9c 83       	std	Y+4, r25	; 0x04
    6e36:	80 91 2d 28 	lds	r24, 0x282D	; 0x80282d <u8NextUdpSock.2562>
    6e3a:	88 2f       	mov	r24, r24
    6e3c:	90 e0       	ldi	r25, 0x00	; 0
    6e3e:	01 96       	adiw	r24, 0x01	; 1
    6e40:	83 70       	andi	r24, 0x03	; 3
    6e42:	90 78       	andi	r25, 0x80	; 128
    6e44:	99 23       	and	r25, r25
    6e46:	24 f4       	brge	.+8      	; 0x6e50 <socket+0xe6>
    6e48:	01 97       	sbiw	r24, 0x01	; 1
    6e4a:	8c 6f       	ori	r24, 0xFC	; 252
    6e4c:	9f 6f       	ori	r25, 0xFF	; 255
    6e4e:	01 96       	adiw	r24, 0x01	; 1
    6e50:	80 93 2d 28 	sts	0x282D, r24	; 0x80282d <u8NextUdpSock.2562>
    6e54:	8b 81       	ldd	r24, Y+3	; 0x03
    6e56:	9c 81       	ldd	r25, Y+4	; 0x04
    6e58:	fc 01       	movw	r30, r24
    6e5a:	80 85       	ldd	r24, Z+8	; 0x08
    6e5c:	88 23       	and	r24, r24
    6e5e:	21 f4       	brne	.+8      	; 0x6e68 <socket+0xfe>
    6e60:	8d 81       	ldd	r24, Y+5	; 0x05
    6e62:	89 5f       	subi	r24, 0xF9	; 249
    6e64:	89 83       	std	Y+1, r24	; 0x01
    6e66:	06 c0       	rjmp	.+12     	; 0x6e74 <socket+0x10a>
    6e68:	8a 81       	ldd	r24, Y+2	; 0x02
    6e6a:	8f 5f       	subi	r24, 0xFF	; 255
    6e6c:	8a 83       	std	Y+2, r24	; 0x02
    6e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    6e70:	84 30       	cpi	r24, 0x04	; 4
    6e72:	70 f2       	brcs	.-100    	; 0x6e10 <socket+0xa6>
    6e74:	89 81       	ldd	r24, Y+1	; 0x01
    6e76:	88 23       	and	r24, r24
    6e78:	0c f4       	brge	.+2      	; 0x6e7c <socket+0x112>
    6e7a:	4c c0       	rjmp	.+152    	; 0x6f14 <socket+0x1aa>
    6e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    6e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    6e80:	2b e0       	ldi	r18, 0x0B	; 11
    6e82:	30 e0       	ldi	r19, 0x00	; 0
    6e84:	40 e0       	ldi	r20, 0x00	; 0
    6e86:	50 e0       	ldi	r21, 0x00	; 0
    6e88:	60 e0       	ldi	r22, 0x00	; 0
    6e8a:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <m2m_memset>
    6e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    6e90:	9c 81       	ldd	r25, Y+4	; 0x04
    6e92:	21 e0       	ldi	r18, 0x01	; 1
    6e94:	fc 01       	movw	r30, r24
    6e96:	20 87       	std	Z+8, r18	; 0x08
    6e98:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <gu16SessionID>
    6e9c:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <gu16SessionID+0x1>
    6ea0:	01 96       	adiw	r24, 0x01	; 1
    6ea2:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <gu16SessionID>
    6ea6:	90 93 2a 28 	sts	0x282A, r25	; 0x80282a <gu16SessionID+0x1>
    6eaa:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <gu16SessionID>
    6eae:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <gu16SessionID+0x1>
    6eb2:	89 2b       	or	r24, r25
    6eb4:	49 f4       	brne	.+18     	; 0x6ec8 <socket+0x15e>
    6eb6:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <gu16SessionID>
    6eba:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <gu16SessionID+0x1>
    6ebe:	01 96       	adiw	r24, 0x01	; 1
    6ec0:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <gu16SessionID>
    6ec4:	90 93 2a 28 	sts	0x282A, r25	; 0x80282a <gu16SessionID+0x1>
    6ec8:	20 91 29 28 	lds	r18, 0x2829	; 0x802829 <gu16SessionID>
    6ecc:	30 91 2a 28 	lds	r19, 0x282A	; 0x80282a <gu16SessionID+0x1>
    6ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    6ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    6ed4:	fc 01       	movw	r30, r24
    6ed6:	24 83       	std	Z+4, r18	; 0x04
    6ed8:	35 83       	std	Z+5, r19	; 0x05
    6eda:	8f 85       	ldd	r24, Y+15	; 0x0f
    6edc:	88 2f       	mov	r24, r24
    6ede:	90 e0       	ldi	r25, 0x00	; 0
    6ee0:	81 70       	andi	r24, 0x01	; 1
    6ee2:	99 27       	eor	r25, r25
    6ee4:	89 2b       	or	r24, r25
    6ee6:	b1 f0       	breq	.+44     	; 0x6f14 <socket+0x1aa>
    6ee8:	89 81       	ldd	r24, Y+1	; 0x01
    6eea:	88 87       	std	Y+8, r24	; 0x08
    6eec:	8b 81       	ldd	r24, Y+3	; 0x03
    6eee:	9c 81       	ldd	r25, Y+4	; 0x04
    6ef0:	21 e2       	ldi	r18, 0x21	; 33
    6ef2:	fc 01       	movw	r30, r24
    6ef4:	21 87       	std	Z+9, r18	; 0x09
    6ef6:	ce 01       	movw	r24, r28
    6ef8:	08 96       	adiw	r24, 0x08	; 8
    6efa:	c1 2c       	mov	r12, r1
    6efc:	d1 2c       	mov	r13, r1
    6efe:	e1 2c       	mov	r14, r1
    6f00:	f1 2c       	mov	r15, r1
    6f02:	00 e0       	ldi	r16, 0x00	; 0
    6f04:	10 e0       	ldi	r17, 0x00	; 0
    6f06:	24 e0       	ldi	r18, 0x04	; 4
    6f08:	30 e0       	ldi	r19, 0x00	; 0
    6f0a:	ac 01       	movw	r20, r24
    6f0c:	60 e5       	ldi	r22, 0x50	; 80
    6f0e:	82 e0       	ldi	r24, 0x02	; 2
    6f10:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <hif_send>
    6f14:	89 81       	ldd	r24, Y+1	; 0x01
    6f16:	2f 96       	adiw	r28, 0x0f	; 15
    6f18:	cd bf       	out	0x3d, r28	; 61
    6f1a:	de bf       	out	0x3e, r29	; 62
    6f1c:	df 91       	pop	r29
    6f1e:	cf 91       	pop	r28
    6f20:	1f 91       	pop	r17
    6f22:	0f 91       	pop	r16
    6f24:	ff 90       	pop	r15
    6f26:	ef 90       	pop	r14
    6f28:	df 90       	pop	r13
    6f2a:	cf 90       	pop	r12
    6f2c:	08 95       	ret

00006f2e <connect>:
    6f2e:	cf 92       	push	r12
    6f30:	df 92       	push	r13
    6f32:	ef 92       	push	r14
    6f34:	ff 92       	push	r15
    6f36:	0f 93       	push	r16
    6f38:	1f 93       	push	r17
    6f3a:	cf 93       	push	r28
    6f3c:	df 93       	push	r29
    6f3e:	cd b7       	in	r28, 0x3d	; 61
    6f40:	de b7       	in	r29, 0x3e	; 62
    6f42:	62 97       	sbiw	r28, 0x12	; 18
    6f44:	cd bf       	out	0x3d, r28	; 61
    6f46:	de bf       	out	0x3e, r29	; 62
    6f48:	8f 87       	std	Y+15, r24	; 0x0f
    6f4a:	68 8b       	std	Y+16, r22	; 0x10
    6f4c:	79 8b       	std	Y+17, r23	; 0x11
    6f4e:	4a 8b       	std	Y+18, r20	; 0x12
    6f50:	8a ef       	ldi	r24, 0xFA	; 250
    6f52:	89 83       	std	Y+1, r24	; 0x01
    6f54:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f56:	88 23       	and	r24, r24
    6f58:	0c f4       	brge	.+2      	; 0x6f5c <connect+0x2e>
    6f5a:	73 c0       	rjmp	.+230    	; 0x7042 <connect+0x114>
    6f5c:	88 89       	ldd	r24, Y+16	; 0x10
    6f5e:	99 89       	ldd	r25, Y+17	; 0x11
    6f60:	89 2b       	or	r24, r25
    6f62:	09 f4       	brne	.+2      	; 0x6f66 <connect+0x38>
    6f64:	6e c0       	rjmp	.+220    	; 0x7042 <connect+0x114>
    6f66:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f68:	28 2f       	mov	r18, r24
    6f6a:	88 0f       	add	r24, r24
    6f6c:	33 0b       	sbc	r19, r19
    6f6e:	4b e0       	ldi	r20, 0x0B	; 11
    6f70:	42 9f       	mul	r20, r18
    6f72:	c0 01       	movw	r24, r0
    6f74:	43 9f       	mul	r20, r19
    6f76:	90 0d       	add	r25, r0
    6f78:	11 24       	eor	r1, r1
    6f7a:	88 54       	subi	r24, 0x48	; 72
    6f7c:	97 4d       	sbci	r25, 0xD7	; 215
    6f7e:	fc 01       	movw	r30, r24
    6f80:	80 81       	ld	r24, Z
    6f82:	81 30       	cpi	r24, 0x01	; 1
    6f84:	09 f0       	breq	.+2      	; 0x6f88 <connect+0x5a>
    6f86:	5d c0       	rjmp	.+186    	; 0x7042 <connect+0x114>
    6f88:	8a 89       	ldd	r24, Y+18	; 0x12
    6f8a:	88 23       	and	r24, r24
    6f8c:	09 f4       	brne	.+2      	; 0x6f90 <connect+0x62>
    6f8e:	59 c0       	rjmp	.+178    	; 0x7042 <connect+0x114>
    6f90:	84 e4       	ldi	r24, 0x44	; 68
    6f92:	8a 83       	std	Y+2, r24	; 0x02
    6f94:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f96:	28 2f       	mov	r18, r24
    6f98:	88 0f       	add	r24, r24
    6f9a:	33 0b       	sbc	r19, r19
    6f9c:	4b e0       	ldi	r20, 0x0B	; 11
    6f9e:	42 9f       	mul	r20, r18
    6fa0:	c0 01       	movw	r24, r0
    6fa2:	43 9f       	mul	r20, r19
    6fa4:	90 0d       	add	r25, r0
    6fa6:	11 24       	eor	r1, r1
    6fa8:	87 54       	subi	r24, 0x47	; 71
    6faa:	97 4d       	sbci	r25, 0xD7	; 215
    6fac:	fc 01       	movw	r30, r24
    6fae:	80 81       	ld	r24, Z
    6fb0:	88 2f       	mov	r24, r24
    6fb2:	90 e0       	ldi	r25, 0x00	; 0
    6fb4:	81 70       	andi	r24, 0x01	; 1
    6fb6:	99 27       	eor	r25, r25
    6fb8:	89 2b       	or	r24, r25
    6fba:	89 f0       	breq	.+34     	; 0x6fde <connect+0xb0>
    6fbc:	8b e4       	ldi	r24, 0x4B	; 75
    6fbe:	8a 83       	std	Y+2, r24	; 0x02
    6fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    6fc2:	28 2f       	mov	r18, r24
    6fc4:	88 0f       	add	r24, r24
    6fc6:	33 0b       	sbc	r19, r19
    6fc8:	4b e0       	ldi	r20, 0x0B	; 11
    6fca:	42 9f       	mul	r20, r18
    6fcc:	c0 01       	movw	r24, r0
    6fce:	43 9f       	mul	r20, r19
    6fd0:	90 0d       	add	r25, r0
    6fd2:	11 24       	eor	r1, r1
    6fd4:	87 54       	subi	r24, 0x47	; 71
    6fd6:	97 4d       	sbci	r25, 0xD7	; 215
    6fd8:	fc 01       	movw	r30, r24
    6fda:	80 81       	ld	r24, Z
    6fdc:	8c 87       	std	Y+12, r24	; 0x0c
    6fde:	8f 85       	ldd	r24, Y+15	; 0x0f
    6fe0:	8b 87       	std	Y+11, r24	; 0x0b
    6fe2:	68 89       	ldd	r22, Y+16	; 0x10
    6fe4:	79 89       	ldd	r23, Y+17	; 0x11
    6fe6:	ce 01       	movw	r24, r28
    6fe8:	03 96       	adiw	r24, 0x03	; 3
    6fea:	28 e0       	ldi	r18, 0x08	; 8
    6fec:	30 e0       	ldi	r19, 0x00	; 0
    6fee:	40 e0       	ldi	r20, 0x00	; 0
    6ff0:	50 e0       	ldi	r21, 0x00	; 0
    6ff2:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <m2m_memcpy>
    6ff6:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ff8:	28 2f       	mov	r18, r24
    6ffa:	88 0f       	add	r24, r24
    6ffc:	33 0b       	sbc	r19, r19
    6ffe:	4b e0       	ldi	r20, 0x0B	; 11
    7000:	42 9f       	mul	r20, r18
    7002:	c0 01       	movw	r24, r0
    7004:	43 9f       	mul	r20, r19
    7006:	90 0d       	add	r25, r0
    7008:	11 24       	eor	r1, r1
    700a:	8c 54       	subi	r24, 0x4C	; 76
    700c:	97 4d       	sbci	r25, 0xD7	; 215
    700e:	fc 01       	movw	r30, r24
    7010:	80 81       	ld	r24, Z
    7012:	91 81       	ldd	r25, Z+1	; 0x01
    7014:	8d 87       	std	Y+13, r24	; 0x0d
    7016:	9e 87       	std	Y+14, r25	; 0x0e
    7018:	ce 01       	movw	r24, r28
    701a:	03 96       	adiw	r24, 0x03	; 3
    701c:	c1 2c       	mov	r12, r1
    701e:	d1 2c       	mov	r13, r1
    7020:	e1 2c       	mov	r14, r1
    7022:	f1 2c       	mov	r15, r1
    7024:	00 e0       	ldi	r16, 0x00	; 0
    7026:	10 e0       	ldi	r17, 0x00	; 0
    7028:	2c e0       	ldi	r18, 0x0C	; 12
    702a:	30 e0       	ldi	r19, 0x00	; 0
    702c:	ac 01       	movw	r20, r24
    702e:	6a 81       	ldd	r22, Y+2	; 0x02
    7030:	82 e0       	ldi	r24, 0x02	; 2
    7032:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <hif_send>
    7036:	89 83       	std	Y+1, r24	; 0x01
    7038:	89 81       	ldd	r24, Y+1	; 0x01
    703a:	88 23       	and	r24, r24
    703c:	11 f0       	breq	.+4      	; 0x7042 <connect+0x114>
    703e:	87 ef       	ldi	r24, 0xF7	; 247
    7040:	89 83       	std	Y+1, r24	; 0x01
    7042:	89 81       	ldd	r24, Y+1	; 0x01
    7044:	62 96       	adiw	r28, 0x12	; 18
    7046:	cd bf       	out	0x3d, r28	; 61
    7048:	de bf       	out	0x3e, r29	; 62
    704a:	df 91       	pop	r29
    704c:	cf 91       	pop	r28
    704e:	1f 91       	pop	r17
    7050:	0f 91       	pop	r16
    7052:	ff 90       	pop	r15
    7054:	ef 90       	pop	r14
    7056:	df 90       	pop	r13
    7058:	cf 90       	pop	r12
    705a:	08 95       	ret

0000705c <send>:
    705c:	cf 92       	push	r12
    705e:	df 92       	push	r13
    7060:	ef 92       	push	r14
    7062:	ff 92       	push	r15
    7064:	0f 93       	push	r16
    7066:	1f 93       	push	r17
    7068:	cf 93       	push	r28
    706a:	df 93       	push	r29
    706c:	cd b7       	in	r28, 0x3d	; 61
    706e:	de b7       	in	r29, 0x3e	; 62
    7070:	6c 97       	sbiw	r28, 0x1c	; 28
    7072:	cd bf       	out	0x3d, r28	; 61
    7074:	de bf       	out	0x3e, r29	; 62
    7076:	8e 8b       	std	Y+22, r24	; 0x16
    7078:	6f 8b       	std	Y+23, r22	; 0x17
    707a:	78 8f       	std	Y+24, r23	; 0x18
    707c:	49 8f       	std	Y+25, r20	; 0x19
    707e:	5a 8f       	std	Y+26, r21	; 0x1a
    7080:	2b 8f       	std	Y+27, r18	; 0x1b
    7082:	3c 8f       	std	Y+28, r19	; 0x1c
    7084:	8a ef       	ldi	r24, 0xFA	; 250
    7086:	9f ef       	ldi	r25, 0xFF	; 255
    7088:	89 83       	std	Y+1, r24	; 0x01
    708a:	9a 83       	std	Y+2, r25	; 0x02
    708c:	8e 89       	ldd	r24, Y+22	; 0x16
    708e:	88 23       	and	r24, r24
    7090:	0c f4       	brge	.+2      	; 0x7094 <send+0x38>
    7092:	89 c0       	rjmp	.+274    	; 0x71a6 <send+0x14a>
    7094:	8f 89       	ldd	r24, Y+23	; 0x17
    7096:	98 8d       	ldd	r25, Y+24	; 0x18
    7098:	89 2b       	or	r24, r25
    709a:	09 f4       	brne	.+2      	; 0x709e <send+0x42>
    709c:	84 c0       	rjmp	.+264    	; 0x71a6 <send+0x14a>
    709e:	89 8d       	ldd	r24, Y+25	; 0x19
    70a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    70a2:	89 37       	cpi	r24, 0x79	; 121
    70a4:	95 40       	sbci	r25, 0x05	; 5
    70a6:	08 f0       	brcs	.+2      	; 0x70aa <send+0x4e>
    70a8:	7e c0       	rjmp	.+252    	; 0x71a6 <send+0x14a>
    70aa:	8e 89       	ldd	r24, Y+22	; 0x16
    70ac:	28 2f       	mov	r18, r24
    70ae:	88 0f       	add	r24, r24
    70b0:	33 0b       	sbc	r19, r19
    70b2:	4b e0       	ldi	r20, 0x0B	; 11
    70b4:	42 9f       	mul	r20, r18
    70b6:	c0 01       	movw	r24, r0
    70b8:	43 9f       	mul	r20, r19
    70ba:	90 0d       	add	r25, r0
    70bc:	11 24       	eor	r1, r1
    70be:	88 54       	subi	r24, 0x48	; 72
    70c0:	97 4d       	sbci	r25, 0xD7	; 215
    70c2:	fc 01       	movw	r30, r24
    70c4:	80 81       	ld	r24, Z
    70c6:	81 30       	cpi	r24, 0x01	; 1
    70c8:	09 f0       	breq	.+2      	; 0x70cc <send+0x70>
    70ca:	6d c0       	rjmp	.+218    	; 0x71a6 <send+0x14a>
    70cc:	85 e4       	ldi	r24, 0x45	; 69
    70ce:	8d 83       	std	Y+5, r24	; 0x05
    70d0:	80 e5       	ldi	r24, 0x50	; 80
    70d2:	90 e0       	ldi	r25, 0x00	; 0
    70d4:	8b 83       	std	Y+3, r24	; 0x03
    70d6:	9c 83       	std	Y+4, r25	; 0x04
    70d8:	8e 89       	ldd	r24, Y+22	; 0x16
    70da:	8e 83       	std	Y+6, r24	; 0x06
    70dc:	89 8d       	ldd	r24, Y+25	; 0x19
    70de:	9a 8d       	ldd	r25, Y+26	; 0x1a
    70e0:	88 87       	std	Y+8, r24	; 0x08
    70e2:	99 87       	std	Y+9, r25	; 0x09
    70e4:	8e 89       	ldd	r24, Y+22	; 0x16
    70e6:	28 2f       	mov	r18, r24
    70e8:	88 0f       	add	r24, r24
    70ea:	33 0b       	sbc	r19, r19
    70ec:	4b e0       	ldi	r20, 0x0B	; 11
    70ee:	42 9f       	mul	r20, r18
    70f0:	c0 01       	movw	r24, r0
    70f2:	43 9f       	mul	r20, r19
    70f4:	90 0d       	add	r25, r0
    70f6:	11 24       	eor	r1, r1
    70f8:	8c 54       	subi	r24, 0x4C	; 76
    70fa:	97 4d       	sbci	r25, 0xD7	; 215
    70fc:	fc 01       	movw	r30, r24
    70fe:	80 81       	ld	r24, Z
    7100:	91 81       	ldd	r25, Z+1	; 0x01
    7102:	8a 8b       	std	Y+18, r24	; 0x12
    7104:	9b 8b       	std	Y+19, r25	; 0x13
    7106:	8e 89       	ldd	r24, Y+22	; 0x16
    7108:	87 30       	cpi	r24, 0x07	; 7
    710a:	24 f0       	brlt	.+8      	; 0x7114 <send+0xb8>
    710c:	84 e4       	ldi	r24, 0x44	; 68
    710e:	90 e0       	ldi	r25, 0x00	; 0
    7110:	8b 83       	std	Y+3, r24	; 0x03
    7112:	9c 83       	std	Y+4, r25	; 0x04
    7114:	8e 89       	ldd	r24, Y+22	; 0x16
    7116:	28 2f       	mov	r18, r24
    7118:	88 0f       	add	r24, r24
    711a:	33 0b       	sbc	r19, r19
    711c:	4b e0       	ldi	r20, 0x0B	; 11
    711e:	42 9f       	mul	r20, r18
    7120:	c0 01       	movw	r24, r0
    7122:	43 9f       	mul	r20, r19
    7124:	90 0d       	add	r25, r0
    7126:	11 24       	eor	r1, r1
    7128:	87 54       	subi	r24, 0x47	; 71
    712a:	97 4d       	sbci	r25, 0xD7	; 215
    712c:	fc 01       	movw	r30, r24
    712e:	80 81       	ld	r24, Z
    7130:	88 2f       	mov	r24, r24
    7132:	90 e0       	ldi	r25, 0x00	; 0
    7134:	81 70       	andi	r24, 0x01	; 1
    7136:	99 27       	eor	r25, r25
    7138:	89 2b       	or	r24, r25
    713a:	99 f0       	breq	.+38     	; 0x7162 <send+0x106>
    713c:	8c e4       	ldi	r24, 0x4C	; 76
    713e:	8d 83       	std	Y+5, r24	; 0x05
    7140:	8e 89       	ldd	r24, Y+22	; 0x16
    7142:	28 2f       	mov	r18, r24
    7144:	88 0f       	add	r24, r24
    7146:	33 0b       	sbc	r19, r19
    7148:	4b e0       	ldi	r20, 0x0B	; 11
    714a:	42 9f       	mul	r20, r18
    714c:	c0 01       	movw	r24, r0
    714e:	43 9f       	mul	r20, r19
    7150:	90 0d       	add	r25, r0
    7152:	11 24       	eor	r1, r1
    7154:	8a 54       	subi	r24, 0x4A	; 74
    7156:	97 4d       	sbci	r25, 0xD7	; 215
    7158:	fc 01       	movw	r30, r24
    715a:	80 81       	ld	r24, Z
    715c:	91 81       	ldd	r25, Z+1	; 0x01
    715e:	8b 83       	std	Y+3, r24	; 0x03
    7160:	9c 83       	std	Y+4, r25	; 0x04
    7162:	8d 81       	ldd	r24, Y+5	; 0x05
    7164:	e8 2f       	mov	r30, r24
    7166:	e0 68       	ori	r30, 0x80	; 128
    7168:	6b 81       	ldd	r22, Y+3	; 0x03
    716a:	7c 81       	ldd	r23, Y+4	; 0x04
    716c:	49 8d       	ldd	r20, Y+25	; 0x19
    716e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    7170:	2f 89       	ldd	r18, Y+23	; 0x17
    7172:	38 8d       	ldd	r19, Y+24	; 0x18
    7174:	ce 01       	movw	r24, r28
    7176:	06 96       	adiw	r24, 0x06	; 6
    7178:	6b 01       	movw	r12, r22
    717a:	7a 01       	movw	r14, r20
    717c:	89 01       	movw	r16, r18
    717e:	20 e1       	ldi	r18, 0x10	; 16
    7180:	30 e0       	ldi	r19, 0x00	; 0
    7182:	ac 01       	movw	r20, r24
    7184:	6e 2f       	mov	r22, r30
    7186:	82 e0       	ldi	r24, 0x02	; 2
    7188:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <hif_send>
    718c:	08 2e       	mov	r0, r24
    718e:	00 0c       	add	r0, r0
    7190:	99 0b       	sbc	r25, r25
    7192:	89 83       	std	Y+1, r24	; 0x01
    7194:	9a 83       	std	Y+2, r25	; 0x02
    7196:	89 81       	ldd	r24, Y+1	; 0x01
    7198:	9a 81       	ldd	r25, Y+2	; 0x02
    719a:	89 2b       	or	r24, r25
    719c:	21 f0       	breq	.+8      	; 0x71a6 <send+0x14a>
    719e:	82 ef       	ldi	r24, 0xF2	; 242
    71a0:	9f ef       	ldi	r25, 0xFF	; 255
    71a2:	89 83       	std	Y+1, r24	; 0x01
    71a4:	9a 83       	std	Y+2, r25	; 0x02
    71a6:	89 81       	ldd	r24, Y+1	; 0x01
    71a8:	9a 81       	ldd	r25, Y+2	; 0x02
    71aa:	6c 96       	adiw	r28, 0x1c	; 28
    71ac:	cd bf       	out	0x3d, r28	; 61
    71ae:	de bf       	out	0x3e, r29	; 62
    71b0:	df 91       	pop	r29
    71b2:	cf 91       	pop	r28
    71b4:	1f 91       	pop	r17
    71b6:	0f 91       	pop	r16
    71b8:	ff 90       	pop	r15
    71ba:	ef 90       	pop	r14
    71bc:	df 90       	pop	r13
    71be:	cf 90       	pop	r12
    71c0:	08 95       	ret

000071c2 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    71c2:	cf 92       	push	r12
    71c4:	df 92       	push	r13
    71c6:	ef 92       	push	r14
    71c8:	ff 92       	push	r15
    71ca:	0f 93       	push	r16
    71cc:	1f 93       	push	r17
    71ce:	cf 93       	push	r28
    71d0:	df 93       	push	r29
    71d2:	cd b7       	in	r28, 0x3d	; 61
    71d4:	de b7       	in	r29, 0x3e	; 62
    71d6:	64 97       	sbiw	r28, 0x14	; 20
    71d8:	cd bf       	out	0x3d, r28	; 61
    71da:	de bf       	out	0x3e, r29	; 62
    71dc:	8c 87       	std	Y+12, r24	; 0x0c
    71de:	6d 87       	std	Y+13, r22	; 0x0d
    71e0:	7e 87       	std	Y+14, r23	; 0x0e
    71e2:	4f 87       	std	Y+15, r20	; 0x0f
    71e4:	58 8b       	std	Y+16, r21	; 0x10
    71e6:	09 8b       	std	Y+17, r16	; 0x11
    71e8:	1a 8b       	std	Y+18, r17	; 0x12
    71ea:	2b 8b       	std	Y+19, r18	; 0x13
    71ec:	3c 8b       	std	Y+20, r19	; 0x14
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    71ee:	8a ef       	ldi	r24, 0xFA	; 250
    71f0:	9f ef       	ldi	r25, 0xFF	; 255
    71f2:	89 83       	std	Y+1, r24	; 0x01
    71f4:	9a 83       	std	Y+2, r25	; 0x02
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    71f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    71f8:	88 23       	and	r24, r24
    71fa:	0c f4       	brge	.+2      	; 0x71fe <recv+0x3c>
    71fc:	be c0       	rjmp	.+380    	; 0x737a <recv+0x1b8>
    71fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    7200:	9e 85       	ldd	r25, Y+14	; 0x0e
    7202:	89 2b       	or	r24, r25
    7204:	09 f4       	brne	.+2      	; 0x7208 <recv+0x46>
    7206:	b9 c0       	rjmp	.+370    	; 0x737a <recv+0x1b8>
    7208:	8f 85       	ldd	r24, Y+15	; 0x0f
    720a:	98 89       	ldd	r25, Y+16	; 0x10
    720c:	89 2b       	or	r24, r25
    720e:	09 f4       	brne	.+2      	; 0x7212 <recv+0x50>
    7210:	b4 c0       	rjmp	.+360    	; 0x737a <recv+0x1b8>
    7212:	8c 85       	ldd	r24, Y+12	; 0x0c
    7214:	28 2f       	mov	r18, r24
    7216:	88 0f       	add	r24, r24
    7218:	33 0b       	sbc	r19, r19
    721a:	4b e0       	ldi	r20, 0x0B	; 11
    721c:	42 9f       	mul	r20, r18
    721e:	c0 01       	movw	r24, r0
    7220:	43 9f       	mul	r20, r19
    7222:	90 0d       	add	r25, r0
    7224:	11 24       	eor	r1, r1
    7226:	88 54       	subi	r24, 0x48	; 72
    7228:	97 4d       	sbci	r25, 0xD7	; 215
    722a:	fc 01       	movw	r30, r24
    722c:	80 81       	ld	r24, Z
    722e:	81 30       	cpi	r24, 0x01	; 1
    7230:	09 f0       	breq	.+2      	; 0x7234 <recv+0x72>
    7232:	a3 c0       	rjmp	.+326    	; 0x737a <recv+0x1b8>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    7234:	19 82       	std	Y+1, r1	; 0x01
    7236:	1a 82       	std	Y+2, r1	; 0x02
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    7238:	8c 85       	ldd	r24, Y+12	; 0x0c
    723a:	28 2f       	mov	r18, r24
    723c:	88 0f       	add	r24, r24
    723e:	33 0b       	sbc	r19, r19
    7240:	4b e0       	ldi	r20, 0x0B	; 11
    7242:	42 9f       	mul	r20, r18
    7244:	c0 01       	movw	r24, r0
    7246:	43 9f       	mul	r20, r19
    7248:	90 0d       	add	r25, r0
    724a:	11 24       	eor	r1, r1
    724c:	80 55       	subi	r24, 0x50	; 80
    724e:	97 4d       	sbci	r25, 0xD7	; 215
    7250:	2d 85       	ldd	r18, Y+13	; 0x0d
    7252:	3e 85       	ldd	r19, Y+14	; 0x0e
    7254:	fc 01       	movw	r30, r24
    7256:	20 83       	st	Z, r18
    7258:	31 83       	std	Z+1, r19	; 0x01
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    725a:	8c 85       	ldd	r24, Y+12	; 0x0c
    725c:	28 2f       	mov	r18, r24
    725e:	88 0f       	add	r24, r24
    7260:	33 0b       	sbc	r19, r19
    7262:	4b e0       	ldi	r20, 0x0B	; 11
    7264:	42 9f       	mul	r20, r18
    7266:	c0 01       	movw	r24, r0
    7268:	43 9f       	mul	r20, r19
    726a:	90 0d       	add	r25, r0
    726c:	11 24       	eor	r1, r1
    726e:	8e 54       	subi	r24, 0x4E	; 78
    7270:	97 4d       	sbci	r25, 0xD7	; 215
    7272:	2f 85       	ldd	r18, Y+15	; 0x0f
    7274:	38 89       	ldd	r19, Y+16	; 0x10
    7276:	fc 01       	movw	r30, r24
    7278:	20 83       	st	Z, r18
    727a:	31 83       	std	Z+1, r19	; 0x01

		if(!gastrSockets[sock].bIsRecvPending)
    727c:	8c 85       	ldd	r24, Y+12	; 0x0c
    727e:	28 2f       	mov	r18, r24
    7280:	88 0f       	add	r24, r24
    7282:	33 0b       	sbc	r19, r19
    7284:	4b e0       	ldi	r20, 0x0B	; 11
    7286:	42 9f       	mul	r20, r18
    7288:	c0 01       	movw	r24, r0
    728a:	43 9f       	mul	r20, r19
    728c:	90 0d       	add	r25, r0
    728e:	11 24       	eor	r1, r1
    7290:	86 54       	subi	r24, 0x46	; 70
    7292:	97 4d       	sbci	r25, 0xD7	; 215
    7294:	fc 01       	movw	r30, r24
    7296:	80 81       	ld	r24, Z
    7298:	88 23       	and	r24, r24
    729a:	09 f0       	breq	.+2      	; 0x729e <recv+0xdc>
    729c:	6e c0       	rjmp	.+220    	; 0x737a <recv+0x1b8>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    729e:	86 e4       	ldi	r24, 0x46	; 70
    72a0:	8b 83       	std	Y+3, r24	; 0x03

			gastrSockets[sock].bIsRecvPending = 1;
    72a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    72a4:	28 2f       	mov	r18, r24
    72a6:	88 0f       	add	r24, r24
    72a8:	33 0b       	sbc	r19, r19
    72aa:	4b e0       	ldi	r20, 0x0B	; 11
    72ac:	42 9f       	mul	r20, r18
    72ae:	c0 01       	movw	r24, r0
    72b0:	43 9f       	mul	r20, r19
    72b2:	90 0d       	add	r25, r0
    72b4:	11 24       	eor	r1, r1
    72b6:	86 54       	subi	r24, 0x46	; 70
    72b8:	97 4d       	sbci	r25, 0xD7	; 215
    72ba:	21 e0       	ldi	r18, 0x01	; 1
    72bc:	fc 01       	movw	r30, r24
    72be:	20 83       	st	Z, r18
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    72c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    72c2:	28 2f       	mov	r18, r24
    72c4:	88 0f       	add	r24, r24
    72c6:	33 0b       	sbc	r19, r19
    72c8:	4b e0       	ldi	r20, 0x0B	; 11
    72ca:	42 9f       	mul	r20, r18
    72cc:	c0 01       	movw	r24, r0
    72ce:	43 9f       	mul	r20, r19
    72d0:	90 0d       	add	r25, r0
    72d2:	11 24       	eor	r1, r1
    72d4:	87 54       	subi	r24, 0x47	; 71
    72d6:	97 4d       	sbci	r25, 0xD7	; 215
    72d8:	fc 01       	movw	r30, r24
    72da:	80 81       	ld	r24, Z
    72dc:	88 2f       	mov	r24, r24
    72de:	90 e0       	ldi	r25, 0x00	; 0
    72e0:	81 70       	andi	r24, 0x01	; 1
    72e2:	99 27       	eor	r25, r25
    72e4:	89 2b       	or	r24, r25
    72e6:	11 f0       	breq	.+4      	; 0x72ec <recv+0x12a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    72e8:	8d e4       	ldi	r24, 0x4D	; 77
    72ea:	8b 83       	std	Y+3, r24	; 0x03
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    72ec:	89 89       	ldd	r24, Y+17	; 0x11
    72ee:	9a 89       	ldd	r25, Y+18	; 0x12
    72f0:	ab 89       	ldd	r26, Y+19	; 0x13
    72f2:	bc 89       	ldd	r27, Y+20	; 0x14
    72f4:	89 2b       	or	r24, r25
    72f6:	8a 2b       	or	r24, r26
    72f8:	8b 2b       	or	r24, r27
    72fa:	41 f4       	brne	.+16     	; 0x730c <recv+0x14a>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    72fc:	8f ef       	ldi	r24, 0xFF	; 255
    72fe:	9f ef       	ldi	r25, 0xFF	; 255
    7300:	dc 01       	movw	r26, r24
    7302:	8c 83       	std	Y+4, r24	; 0x04
    7304:	9d 83       	std	Y+5, r25	; 0x05
    7306:	ae 83       	std	Y+6, r26	; 0x06
    7308:	bf 83       	std	Y+7, r27	; 0x07
    730a:	08 c0       	rjmp	.+16     	; 0x731c <recv+0x15a>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    730c:	89 89       	ldd	r24, Y+17	; 0x11
    730e:	9a 89       	ldd	r25, Y+18	; 0x12
    7310:	ab 89       	ldd	r26, Y+19	; 0x13
    7312:	bc 89       	ldd	r27, Y+20	; 0x14
    7314:	8c 83       	std	Y+4, r24	; 0x04
    7316:	9d 83       	std	Y+5, r25	; 0x05
    7318:	ae 83       	std	Y+6, r26	; 0x06
    731a:	bf 83       	std	Y+7, r27	; 0x07
			strRecv.sock = sock;
    731c:	8c 85       	ldd	r24, Y+12	; 0x0c
    731e:	88 87       	std	Y+8, r24	; 0x08
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    7320:	8c 85       	ldd	r24, Y+12	; 0x0c
    7322:	28 2f       	mov	r18, r24
    7324:	88 0f       	add	r24, r24
    7326:	33 0b       	sbc	r19, r19
    7328:	4b e0       	ldi	r20, 0x0B	; 11
    732a:	42 9f       	mul	r20, r18
    732c:	c0 01       	movw	r24, r0
    732e:	43 9f       	mul	r20, r19
    7330:	90 0d       	add	r25, r0
    7332:	11 24       	eor	r1, r1
    7334:	8c 54       	subi	r24, 0x4C	; 76
    7336:	97 4d       	sbci	r25, 0xD7	; 215
    7338:	fc 01       	movw	r30, r24
    733a:	80 81       	ld	r24, Z
    733c:	91 81       	ldd	r25, Z+1	; 0x01
    733e:	8a 87       	std	Y+10, r24	; 0x0a
    7340:	9b 87       	std	Y+11, r25	; 0x0b
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    7342:	ce 01       	movw	r24, r28
    7344:	04 96       	adiw	r24, 0x04	; 4
    7346:	c1 2c       	mov	r12, r1
    7348:	d1 2c       	mov	r13, r1
    734a:	e1 2c       	mov	r14, r1
    734c:	f1 2c       	mov	r15, r1
    734e:	00 e0       	ldi	r16, 0x00	; 0
    7350:	10 e0       	ldi	r17, 0x00	; 0
    7352:	28 e0       	ldi	r18, 0x08	; 8
    7354:	30 e0       	ldi	r19, 0x00	; 0
    7356:	ac 01       	movw	r20, r24
    7358:	6b 81       	ldd	r22, Y+3	; 0x03
    735a:	82 e0       	ldi	r24, 0x02	; 2
    735c:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <hif_send>
    7360:	08 2e       	mov	r0, r24
    7362:	00 0c       	add	r0, r0
    7364:	99 0b       	sbc	r25, r25
    7366:	89 83       	std	Y+1, r24	; 0x01
    7368:	9a 83       	std	Y+2, r25	; 0x02
			if(s16Ret != SOCK_ERR_NO_ERROR)
    736a:	89 81       	ldd	r24, Y+1	; 0x01
    736c:	9a 81       	ldd	r25, Y+2	; 0x02
    736e:	89 2b       	or	r24, r25
    7370:	21 f0       	breq	.+8      	; 0x737a <recv+0x1b8>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    7372:	82 ef       	ldi	r24, 0xF2	; 242
    7374:	9f ef       	ldi	r25, 0xFF	; 255
    7376:	89 83       	std	Y+1, r24	; 0x01
    7378:	9a 83       	std	Y+2, r25	; 0x02
			}
		}
	}
	return s16Ret;
    737a:	89 81       	ldd	r24, Y+1	; 0x01
    737c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    737e:	64 96       	adiw	r28, 0x14	; 20
    7380:	cd bf       	out	0x3d, r28	; 61
    7382:	de bf       	out	0x3e, r29	; 62
    7384:	df 91       	pop	r29
    7386:	cf 91       	pop	r28
    7388:	1f 91       	pop	r17
    738a:	0f 91       	pop	r16
    738c:	ff 90       	pop	r15
    738e:	ef 90       	pop	r14
    7390:	df 90       	pop	r13
    7392:	cf 90       	pop	r12
    7394:	08 95       	ret

00007396 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    7396:	cf 92       	push	r12
    7398:	df 92       	push	r13
    739a:	ef 92       	push	r14
    739c:	ff 92       	push	r15
    739e:	0f 93       	push	r16
    73a0:	1f 93       	push	r17
    73a2:	cf 93       	push	r28
    73a4:	df 93       	push	r29
    73a6:	cd b7       	in	r28, 0x3d	; 61
    73a8:	de b7       	in	r29, 0x3e	; 62
    73aa:	27 97       	sbiw	r28, 0x07	; 7
    73ac:	cd bf       	out	0x3d, r28	; 61
    73ae:	de bf       	out	0x3e, r29	; 62
    73b0:	8f 83       	std	Y+7, r24	; 0x07
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    73b2:	8a ef       	ldi	r24, 0xFA	; 250
    73b4:	89 83       	std	Y+1, r24	; 0x01
    M2M_INFO("Sock to delete <%d>\n", sock);
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    73b6:	8f 81       	ldd	r24, Y+7	; 0x07
    73b8:	88 23       	and	r24, r24
    73ba:	0c f4       	brge	.+2      	; 0x73be <close+0x28>
    73bc:	81 c0       	rjmp	.+258    	; 0x74c0 <close+0x12a>
    73be:	8f 81       	ldd	r24, Y+7	; 0x07
    73c0:	28 2f       	mov	r18, r24
    73c2:	88 0f       	add	r24, r24
    73c4:	33 0b       	sbc	r19, r19
    73c6:	4b e0       	ldi	r20, 0x0B	; 11
    73c8:	42 9f       	mul	r20, r18
    73ca:	c0 01       	movw	r24, r0
    73cc:	43 9f       	mul	r20, r19
    73ce:	90 0d       	add	r25, r0
    73d0:	11 24       	eor	r1, r1
    73d2:	88 54       	subi	r24, 0x48	; 72
    73d4:	97 4d       	sbci	r25, 0xD7	; 215
    73d6:	fc 01       	movw	r30, r24
    73d8:	80 81       	ld	r24, Z
    73da:	81 30       	cpi	r24, 0x01	; 1
    73dc:	09 f0       	breq	.+2      	; 0x73e0 <close+0x4a>
    73de:	70 c0       	rjmp	.+224    	; 0x74c0 <close+0x12a>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    73e0:	89 e4       	ldi	r24, 0x49	; 73
    73e2:	8a 83       	std	Y+2, r24	; 0x02
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    73e4:	8f 81       	ldd	r24, Y+7	; 0x07
    73e6:	8b 83       	std	Y+3, r24	; 0x03
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    73e8:	8f 81       	ldd	r24, Y+7	; 0x07
    73ea:	28 2f       	mov	r18, r24
    73ec:	88 0f       	add	r24, r24
    73ee:	33 0b       	sbc	r19, r19
    73f0:	4b e0       	ldi	r20, 0x0B	; 11
    73f2:	42 9f       	mul	r20, r18
    73f4:	c0 01       	movw	r24, r0
    73f6:	43 9f       	mul	r20, r19
    73f8:	90 0d       	add	r25, r0
    73fa:	11 24       	eor	r1, r1
    73fc:	8c 54       	subi	r24, 0x4C	; 76
    73fe:	97 4d       	sbci	r25, 0xD7	; 215
    7400:	fc 01       	movw	r30, r24
    7402:	80 81       	ld	r24, Z
    7404:	91 81       	ldd	r25, Z+1	; 0x01
    7406:	8d 83       	std	Y+5, r24	; 0x05
    7408:	9e 83       	std	Y+6, r25	; 0x06
		
		gastrSockets[sock].bIsUsed = 0;
    740a:	8f 81       	ldd	r24, Y+7	; 0x07
    740c:	28 2f       	mov	r18, r24
    740e:	88 0f       	add	r24, r24
    7410:	33 0b       	sbc	r19, r19
    7412:	4b e0       	ldi	r20, 0x0B	; 11
    7414:	42 9f       	mul	r20, r18
    7416:	c0 01       	movw	r24, r0
    7418:	43 9f       	mul	r20, r19
    741a:	90 0d       	add	r25, r0
    741c:	11 24       	eor	r1, r1
    741e:	88 54       	subi	r24, 0x48	; 72
    7420:	97 4d       	sbci	r25, 0xD7	; 215
    7422:	fc 01       	movw	r30, r24
    7424:	10 82       	st	Z, r1
		gastrSockets[sock].u16SessionID =0;
    7426:	8f 81       	ldd	r24, Y+7	; 0x07
    7428:	28 2f       	mov	r18, r24
    742a:	88 0f       	add	r24, r24
    742c:	33 0b       	sbc	r19, r19
    742e:	4b e0       	ldi	r20, 0x0B	; 11
    7430:	42 9f       	mul	r20, r18
    7432:	c0 01       	movw	r24, r0
    7434:	43 9f       	mul	r20, r19
    7436:	90 0d       	add	r25, r0
    7438:	11 24       	eor	r1, r1
    743a:	8c 54       	subi	r24, 0x4C	; 76
    743c:	97 4d       	sbci	r25, 0xD7	; 215
    743e:	fc 01       	movw	r30, r24
    7440:	10 82       	st	Z, r1
    7442:	11 82       	std	Z+1, r1	; 0x01
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    7444:	8f 81       	ldd	r24, Y+7	; 0x07
    7446:	28 2f       	mov	r18, r24
    7448:	88 0f       	add	r24, r24
    744a:	33 0b       	sbc	r19, r19
    744c:	4b e0       	ldi	r20, 0x0B	; 11
    744e:	42 9f       	mul	r20, r18
    7450:	c0 01       	movw	r24, r0
    7452:	43 9f       	mul	r20, r19
    7454:	90 0d       	add	r25, r0
    7456:	11 24       	eor	r1, r1
    7458:	87 54       	subi	r24, 0x47	; 71
    745a:	97 4d       	sbci	r25, 0xD7	; 215
    745c:	fc 01       	movw	r30, r24
    745e:	80 81       	ld	r24, Z
    7460:	88 2f       	mov	r24, r24
    7462:	90 e0       	ldi	r25, 0x00	; 0
    7464:	81 70       	andi	r24, 0x01	; 1
    7466:	99 27       	eor	r25, r25
    7468:	89 2b       	or	r24, r25
    746a:	11 f0       	breq	.+4      	; 0x7470 <close+0xda>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    746c:	8e e4       	ldi	r24, 0x4E	; 78
    746e:	8a 83       	std	Y+2, r24	; 0x02
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    7470:	ce 01       	movw	r24, r28
    7472:	03 96       	adiw	r24, 0x03	; 3
    7474:	c1 2c       	mov	r12, r1
    7476:	d1 2c       	mov	r13, r1
    7478:	e1 2c       	mov	r14, r1
    747a:	f1 2c       	mov	r15, r1
    747c:	00 e0       	ldi	r16, 0x00	; 0
    747e:	10 e0       	ldi	r17, 0x00	; 0
    7480:	24 e0       	ldi	r18, 0x04	; 4
    7482:	30 e0       	ldi	r19, 0x00	; 0
    7484:	ac 01       	movw	r20, r24
    7486:	6a 81       	ldd	r22, Y+2	; 0x02
    7488:	82 e0       	ldi	r24, 0x02	; 2
    748a:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <hif_send>
    748e:	89 83       	std	Y+1, r24	; 0x01
		if(s8Ret != SOCK_ERR_NO_ERROR)
    7490:	89 81       	ldd	r24, Y+1	; 0x01
    7492:	88 23       	and	r24, r24
    7494:	11 f0       	breq	.+4      	; 0x749a <close+0x104>
		{
			s8Ret = SOCK_ERR_INVALID;
    7496:	87 ef       	ldi	r24, 0xF7	; 247
    7498:	89 83       	std	Y+1, r24	; 0x01
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    749a:	8f 81       	ldd	r24, Y+7	; 0x07
    749c:	28 2f       	mov	r18, r24
    749e:	88 0f       	add	r24, r24
    74a0:	33 0b       	sbc	r19, r19
    74a2:	4b e0       	ldi	r20, 0x0B	; 11
    74a4:	42 9f       	mul	r20, r18
    74a6:	c0 01       	movw	r24, r0
    74a8:	43 9f       	mul	r20, r19
    74aa:	90 0d       	add	r25, r0
    74ac:	11 24       	eor	r1, r1
    74ae:	80 55       	subi	r24, 0x50	; 80
    74b0:	97 4d       	sbci	r25, 0xD7	; 215
    74b2:	2b e0       	ldi	r18, 0x0B	; 11
    74b4:	30 e0       	ldi	r19, 0x00	; 0
    74b6:	40 e0       	ldi	r20, 0x00	; 0
    74b8:	50 e0       	ldi	r21, 0x00	; 0
    74ba:	60 e0       	ldi	r22, 0x00	; 0
    74bc:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <m2m_memset>
	}
	return s8Ret;
    74c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    74c2:	27 96       	adiw	r28, 0x07	; 7
    74c4:	cd bf       	out	0x3d, r28	; 61
    74c6:	de bf       	out	0x3e, r29	; 62
    74c8:	df 91       	pop	r29
    74ca:	cf 91       	pop	r28
    74cc:	1f 91       	pop	r17
    74ce:	0f 91       	pop	r16
    74d0:	ff 90       	pop	r15
    74d2:	ef 90       	pop	r14
    74d4:	df 90       	pop	r13
    74d6:	cf 90       	pop	r12
    74d8:	08 95       	ret

000074da <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    74da:	cf 93       	push	r28
    74dc:	df 93       	push	r29
    74de:	cd b7       	in	r28, 0x3d	; 61
    74e0:	de b7       	in	r29, 0x3e	; 62
    74e2:	26 97       	sbiw	r28, 0x06	; 6
    74e4:	cd bf       	out	0x3d, r28	; 61
    74e6:	de bf       	out	0x3e, r29	; 62
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    74e8:	ce 01       	movw	r24, r28
    74ea:	03 96       	adiw	r24, 0x03	; 3
    74ec:	89 83       	std	Y+1, r24	; 0x01
    74ee:	9a 83       	std	Y+2, r25	; 0x02

	cmd[0] = 0xb9;
    74f0:	89 81       	ldd	r24, Y+1	; 0x01
    74f2:	9a 81       	ldd	r25, Y+2	; 0x02
    74f4:	29 eb       	ldi	r18, 0xB9	; 185
    74f6:	fc 01       	movw	r30, r24
    74f8:	20 83       	st	Z, r18

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    74fa:	20 e0       	ldi	r18, 0x00	; 0
    74fc:	30 e0       	ldi	r19, 0x00	; 0
    74fe:	a9 01       	movw	r20, r18
    7500:	68 e0       	ldi	r22, 0x08	; 8
    7502:	72 e0       	ldi	r23, 0x02	; 2
    7504:	81 e0       	ldi	r24, 0x01	; 1
    7506:	90 e0       	ldi	r25, 0x00	; 0
    7508:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    750c:	89 81       	ldd	r24, Y+1	; 0x01
    750e:	9a 81       	ldd	r25, Y+2	; 0x02
    7510:	fc 01       	movw	r30, r24
    7512:	80 81       	ld	r24, Z
    7514:	88 2f       	mov	r24, r24
    7516:	90 e0       	ldi	r25, 0x00	; 0
    7518:	a0 e0       	ldi	r26, 0x00	; 0
    751a:	b0 e0       	ldi	r27, 0x00	; 0
    751c:	9c 01       	movw	r18, r24
    751e:	ad 01       	movw	r20, r26
    7520:	6c e0       	ldi	r22, 0x0C	; 12
    7522:	72 e0       	ldi	r23, 0x02	; 2
    7524:	81 e0       	ldi	r24, 0x01	; 1
    7526:	90 e0       	ldi	r25, 0x00	; 0
    7528:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    752c:	21 e0       	ldi	r18, 0x01	; 1
    752e:	30 e0       	ldi	r19, 0x00	; 0
    7530:	40 e0       	ldi	r20, 0x00	; 0
    7532:	50 e0       	ldi	r21, 0x00	; 0
    7534:	64 e1       	ldi	r22, 0x14	; 20
    7536:	72 e0       	ldi	r23, 0x02	; 2
    7538:	81 e0       	ldi	r24, 0x01	; 1
    753a:	90 e0       	ldi	r25, 0x00	; 0
    753c:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    7540:	20 e0       	ldi	r18, 0x00	; 0
    7542:	30 e0       	ldi	r19, 0x00	; 0
    7544:	a9 01       	movw	r20, r18
    7546:	6c e1       	ldi	r22, 0x1C	; 28
    7548:	72 e0       	ldi	r23, 0x02	; 2
    754a:	81 e0       	ldi	r24, 0x01	; 1
    754c:	90 e0       	ldi	r25, 0x00	; 0
    754e:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    7552:	21 e8       	ldi	r18, 0x81	; 129
    7554:	30 e0       	ldi	r19, 0x00	; 0
    7556:	40 e0       	ldi	r20, 0x00	; 0
    7558:	50 e0       	ldi	r21, 0x00	; 0
    755a:	64 e0       	ldi	r22, 0x04	; 4
    755c:	72 e0       	ldi	r23, 0x02	; 2
    755e:	81 e0       	ldi	r24, 0x01	; 1
    7560:	90 e0       	ldi	r25, 0x00	; 0
    7562:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    7566:	00 00       	nop
    7568:	68 e1       	ldi	r22, 0x18	; 24
    756a:	72 e0       	ldi	r23, 0x02	; 2
    756c:	81 e0       	ldi	r24, 0x01	; 1
    756e:	90 e0       	ldi	r25, 0x00	; 0
    7570:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <nm_read_reg>
    7574:	dc 01       	movw	r26, r24
    7576:	cb 01       	movw	r24, r22
    7578:	01 97       	sbiw	r24, 0x01	; 1
    757a:	a1 05       	cpc	r26, r1
    757c:	b1 05       	cpc	r27, r1
    757e:	a1 f7       	brne	.-24     	; 0x7568 <spi_flash_enter_low_power_mode+0x8e>
}
    7580:	00 00       	nop
    7582:	26 96       	adiw	r28, 0x06	; 6
    7584:	cd bf       	out	0x3d, r28	; 61
    7586:	de bf       	out	0x3e, r29	; 62
    7588:	df 91       	pop	r29
    758a:	cf 91       	pop	r28
    758c:	08 95       	ret

0000758e <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    758e:	cf 93       	push	r28
    7590:	df 93       	push	r29
    7592:	cd b7       	in	r28, 0x3d	; 61
    7594:	de b7       	in	r29, 0x3e	; 62
    7596:	26 97       	sbiw	r28, 0x06	; 6
    7598:	cd bf       	out	0x3d, r28	; 61
    759a:	de bf       	out	0x3e, r29	; 62
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    759c:	ce 01       	movw	r24, r28
    759e:	03 96       	adiw	r24, 0x03	; 3
    75a0:	89 83       	std	Y+1, r24	; 0x01
    75a2:	9a 83       	std	Y+2, r25	; 0x02

	cmd[0] = 0xab;
    75a4:	89 81       	ldd	r24, Y+1	; 0x01
    75a6:	9a 81       	ldd	r25, Y+2	; 0x02
    75a8:	2b ea       	ldi	r18, 0xAB	; 171
    75aa:	fc 01       	movw	r30, r24
    75ac:	20 83       	st	Z, r18

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    75ae:	20 e0       	ldi	r18, 0x00	; 0
    75b0:	30 e0       	ldi	r19, 0x00	; 0
    75b2:	a9 01       	movw	r20, r18
    75b4:	68 e0       	ldi	r22, 0x08	; 8
    75b6:	72 e0       	ldi	r23, 0x02	; 2
    75b8:	81 e0       	ldi	r24, 0x01	; 1
    75ba:	90 e0       	ldi	r25, 0x00	; 0
    75bc:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    75c0:	89 81       	ldd	r24, Y+1	; 0x01
    75c2:	9a 81       	ldd	r25, Y+2	; 0x02
    75c4:	fc 01       	movw	r30, r24
    75c6:	80 81       	ld	r24, Z
    75c8:	88 2f       	mov	r24, r24
    75ca:	90 e0       	ldi	r25, 0x00	; 0
    75cc:	a0 e0       	ldi	r26, 0x00	; 0
    75ce:	b0 e0       	ldi	r27, 0x00	; 0
    75d0:	9c 01       	movw	r18, r24
    75d2:	ad 01       	movw	r20, r26
    75d4:	6c e0       	ldi	r22, 0x0C	; 12
    75d6:	72 e0       	ldi	r23, 0x02	; 2
    75d8:	81 e0       	ldi	r24, 0x01	; 1
    75da:	90 e0       	ldi	r25, 0x00	; 0
    75dc:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    75e0:	21 e0       	ldi	r18, 0x01	; 1
    75e2:	30 e0       	ldi	r19, 0x00	; 0
    75e4:	40 e0       	ldi	r20, 0x00	; 0
    75e6:	50 e0       	ldi	r21, 0x00	; 0
    75e8:	64 e1       	ldi	r22, 0x14	; 20
    75ea:	72 e0       	ldi	r23, 0x02	; 2
    75ec:	81 e0       	ldi	r24, 0x01	; 1
    75ee:	90 e0       	ldi	r25, 0x00	; 0
    75f0:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    75f4:	20 e0       	ldi	r18, 0x00	; 0
    75f6:	30 e0       	ldi	r19, 0x00	; 0
    75f8:	a9 01       	movw	r20, r18
    75fa:	6c e1       	ldi	r22, 0x1C	; 28
    75fc:	72 e0       	ldi	r23, 0x02	; 2
    75fe:	81 e0       	ldi	r24, 0x01	; 1
    7600:	90 e0       	ldi	r25, 0x00	; 0
    7602:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    7606:	21 e8       	ldi	r18, 0x81	; 129
    7608:	30 e0       	ldi	r19, 0x00	; 0
    760a:	40 e0       	ldi	r20, 0x00	; 0
    760c:	50 e0       	ldi	r21, 0x00	; 0
    760e:	64 e0       	ldi	r22, 0x04	; 4
    7610:	72 e0       	ldi	r23, 0x02	; 2
    7612:	81 e0       	ldi	r24, 0x01	; 1
    7614:	90 e0       	ldi	r25, 0x00	; 0
    7616:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    761a:	00 00       	nop
    761c:	68 e1       	ldi	r22, 0x18	; 24
    761e:	72 e0       	ldi	r23, 0x02	; 2
    7620:	81 e0       	ldi	r24, 0x01	; 1
    7622:	90 e0       	ldi	r25, 0x00	; 0
    7624:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <nm_read_reg>
    7628:	dc 01       	movw	r26, r24
    762a:	cb 01       	movw	r24, r22
    762c:	01 97       	sbiw	r24, 0x01	; 1
    762e:	a1 05       	cpc	r26, r1
    7630:	b1 05       	cpc	r27, r1
    7632:	a1 f7       	brne	.-24     	; 0x761c <spi_flash_leave_low_power_mode+0x8e>
}
    7634:	00 00       	nop
    7636:	26 96       	adiw	r28, 0x06	; 6
    7638:	cd bf       	out	0x3d, r28	; 61
    763a:	de bf       	out	0x3e, r29	; 62
    763c:	df 91       	pop	r29
    763e:	cf 91       	pop	r28
    7640:	08 95       	ret

00007642 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    7642:	cf 93       	push	r28
    7644:	df 93       	push	r29
    7646:	cd b7       	in	r28, 0x3d	; 61
    7648:	de b7       	in	r29, 0x3e	; 62
    764a:	26 97       	sbiw	r28, 0x06	; 6
    764c:	cd bf       	out	0x3d, r28	; 61
    764e:	de bf       	out	0x3e, r29	; 62
    7650:	8e 83       	std	Y+6, r24	; 0x06
	sint8 s8Ret = M2M_SUCCESS;
    7652:	19 82       	std	Y+1, r1	; 0x01
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    7654:	0e 94 44 22 	call	0x4488	; 0x4488 <nmi_get_chipid>
    7658:	dc 01       	movw	r26, r24
    765a:	cb 01       	movw	r24, r22
    765c:	9f 70       	andi	r25, 0x0F	; 15
    765e:	aa 27       	eor	r26, r26
    7660:	bb 27       	eor	r27, r27
    7662:	80 3a       	cpi	r24, 0xA0	; 160
    7664:	93 40       	sbci	r25, 0x03	; 3
    7666:	a1 05       	cpc	r26, r1
    7668:	b1 05       	cpc	r27, r1
    766a:	08 f4       	brcc	.+2      	; 0x766e <spi_flash_enable+0x2c>
    766c:	5a c0       	rjmp	.+180    	; 0x7722 <spi_flash_enable+0xe0>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    766e:	ce 01       	movw	r24, r28
    7670:	02 96       	adiw	r24, 0x02	; 2
    7672:	ac 01       	movw	r20, r24
    7674:	60 e1       	ldi	r22, 0x10	; 16
    7676:	74 e1       	ldi	r23, 0x14	; 20
    7678:	80 e0       	ldi	r24, 0x00	; 0
    767a:	90 e0       	ldi	r25, 0x00	; 0
    767c:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <nm_read_reg_with_ret>
    7680:	89 83       	std	Y+1, r24	; 0x01
		if(s8Ret != M2M_SUCCESS) {
    7682:	89 81       	ldd	r24, Y+1	; 0x01
    7684:	88 23       	and	r24, r24
    7686:	09 f0       	breq	.+2      	; 0x768a <spi_flash_enable+0x48>
    7688:	4b c0       	rjmp	.+150    	; 0x7720 <spi_flash_enable+0xde>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    768a:	8a 81       	ldd	r24, Y+2	; 0x02
    768c:	9b 81       	ldd	r25, Y+3	; 0x03
    768e:	ac 81       	ldd	r26, Y+4	; 0x04
    7690:	bd 81       	ldd	r27, Y+5	; 0x05
    7692:	9f 78       	andi	r25, 0x8F	; 143
    7694:	a8 78       	andi	r26, 0x88	; 136
    7696:	b8 7f       	andi	r27, 0xF8	; 248
    7698:	8a 83       	std	Y+2, r24	; 0x02
    769a:	9b 83       	std	Y+3, r25	; 0x03
    769c:	ac 83       	std	Y+4, r26	; 0x04
    769e:	bd 83       	std	Y+5, r27	; 0x05
		u32Val |= ((0x1111ul) << 12);
    76a0:	8a 81       	ldd	r24, Y+2	; 0x02
    76a2:	9b 81       	ldd	r25, Y+3	; 0x03
    76a4:	ac 81       	ldd	r26, Y+4	; 0x04
    76a6:	bd 81       	ldd	r27, Y+5	; 0x05
    76a8:	90 61       	ori	r25, 0x10	; 16
    76aa:	a1 61       	ori	r26, 0x11	; 17
    76ac:	b1 60       	ori	r27, 0x01	; 1
    76ae:	8a 83       	std	Y+2, r24	; 0x02
    76b0:	9b 83       	std	Y+3, r25	; 0x03
    76b2:	ac 83       	std	Y+4, r26	; 0x04
    76b4:	bd 83       	std	Y+5, r27	; 0x05
		nm_write_reg(0x1410, u32Val);
    76b6:	8a 81       	ldd	r24, Y+2	; 0x02
    76b8:	9b 81       	ldd	r25, Y+3	; 0x03
    76ba:	ac 81       	ldd	r26, Y+4	; 0x04
    76bc:	bd 81       	ldd	r27, Y+5	; 0x05
    76be:	9c 01       	movw	r18, r24
    76c0:	ad 01       	movw	r20, r26
    76c2:	60 e1       	ldi	r22, 0x10	; 16
    76c4:	74 e1       	ldi	r23, 0x14	; 20
    76c6:	80 e0       	ldi	r24, 0x00	; 0
    76c8:	90 e0       	ldi	r25, 0x00	; 0
    76ca:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
		if(enable) {
    76ce:	8e 81       	ldd	r24, Y+6	; 0x06
    76d0:	88 23       	and	r24, r24
    76d2:	19 f0       	breq	.+6      	; 0x76da <spi_flash_enable+0x98>
			spi_flash_leave_low_power_mode();
    76d4:	0e 94 c7 3a 	call	0x758e	; 0x758e <spi_flash_leave_low_power_mode>
    76d8:	02 c0       	rjmp	.+4      	; 0x76de <spi_flash_enable+0x9c>
		} else {
			spi_flash_enter_low_power_mode();
    76da:	0e 94 6d 3a 	call	0x74da	; 0x74da <spi_flash_enter_low_power_mode>
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    76de:	8a 81       	ldd	r24, Y+2	; 0x02
    76e0:	9b 81       	ldd	r25, Y+3	; 0x03
    76e2:	ac 81       	ldd	r26, Y+4	; 0x04
    76e4:	bd 81       	ldd	r27, Y+5	; 0x05
    76e6:	9f 78       	andi	r25, 0x8F	; 143
    76e8:	a8 78       	andi	r26, 0x88	; 136
    76ea:	b8 7f       	andi	r27, 0xF8	; 248
    76ec:	8a 83       	std	Y+2, r24	; 0x02
    76ee:	9b 83       	std	Y+3, r25	; 0x03
    76f0:	ac 83       	std	Y+4, r26	; 0x04
    76f2:	bd 83       	std	Y+5, r27	; 0x05
		u32Val |= ((0x0010ul) << 12);
    76f4:	8a 81       	ldd	r24, Y+2	; 0x02
    76f6:	9b 81       	ldd	r25, Y+3	; 0x03
    76f8:	ac 81       	ldd	r26, Y+4	; 0x04
    76fa:	bd 81       	ldd	r27, Y+5	; 0x05
    76fc:	a1 60       	ori	r26, 0x01	; 1
    76fe:	8a 83       	std	Y+2, r24	; 0x02
    7700:	9b 83       	std	Y+3, r25	; 0x03
    7702:	ac 83       	std	Y+4, r26	; 0x04
    7704:	bd 83       	std	Y+5, r27	; 0x05
		nm_write_reg(0x1410, u32Val);
    7706:	8a 81       	ldd	r24, Y+2	; 0x02
    7708:	9b 81       	ldd	r25, Y+3	; 0x03
    770a:	ac 81       	ldd	r26, Y+4	; 0x04
    770c:	bd 81       	ldd	r27, Y+5	; 0x05
    770e:	9c 01       	movw	r18, r24
    7710:	ad 01       	movw	r20, r26
    7712:	60 e1       	ldi	r22, 0x10	; 16
    7714:	74 e1       	ldi	r23, 0x14	; 20
    7716:	80 e0       	ldi	r24, 0x00	; 0
    7718:	90 e0       	ldi	r25, 0x00	; 0
    771a:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <nm_write_reg>
    771e:	01 c0       	rjmp	.+2      	; 0x7722 <spi_flash_enable+0xe0>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
		if(s8Ret != M2M_SUCCESS) {
			goto ERR1;
    7720:	00 00       	nop
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
    7722:	89 81       	ldd	r24, Y+1	; 0x01
}
    7724:	26 96       	adiw	r28, 0x06	; 6
    7726:	cd bf       	out	0x3d, r28	; 61
    7728:	de bf       	out	0x3e, r29	; 62
    772a:	df 91       	pop	r29
    772c:	cf 91       	pop	r28
    772e:	08 95       	ret

00007730 <__cmpsf2>:
    7730:	0e 94 cc 3b 	call	0x7798	; 0x7798 <__fp_cmp>
    7734:	08 f4       	brcc	.+2      	; 0x7738 <__cmpsf2+0x8>
    7736:	81 e0       	ldi	r24, 0x01	; 1
    7738:	08 95       	ret

0000773a <__fixunssfsi>:
    773a:	0e 94 f8 3b 	call	0x77f0	; 0x77f0 <__fp_splitA>
    773e:	88 f0       	brcs	.+34     	; 0x7762 <__fixunssfsi+0x28>
    7740:	9f 57       	subi	r25, 0x7F	; 127
    7742:	98 f0       	brcs	.+38     	; 0x776a <__fixunssfsi+0x30>
    7744:	b9 2f       	mov	r27, r25
    7746:	99 27       	eor	r25, r25
    7748:	b7 51       	subi	r27, 0x17	; 23
    774a:	b0 f0       	brcs	.+44     	; 0x7778 <__fixunssfsi+0x3e>
    774c:	e1 f0       	breq	.+56     	; 0x7786 <__fixunssfsi+0x4c>
    774e:	66 0f       	add	r22, r22
    7750:	77 1f       	adc	r23, r23
    7752:	88 1f       	adc	r24, r24
    7754:	99 1f       	adc	r25, r25
    7756:	1a f0       	brmi	.+6      	; 0x775e <__fixunssfsi+0x24>
    7758:	ba 95       	dec	r27
    775a:	c9 f7       	brne	.-14     	; 0x774e <__fixunssfsi+0x14>
    775c:	14 c0       	rjmp	.+40     	; 0x7786 <__fixunssfsi+0x4c>
    775e:	b1 30       	cpi	r27, 0x01	; 1
    7760:	91 f0       	breq	.+36     	; 0x7786 <__fixunssfsi+0x4c>
    7762:	0e 94 12 3c 	call	0x7824	; 0x7824 <__fp_zero>
    7766:	b1 e0       	ldi	r27, 0x01	; 1
    7768:	08 95       	ret
    776a:	0c 94 12 3c 	jmp	0x7824	; 0x7824 <__fp_zero>
    776e:	67 2f       	mov	r22, r23
    7770:	78 2f       	mov	r23, r24
    7772:	88 27       	eor	r24, r24
    7774:	b8 5f       	subi	r27, 0xF8	; 248
    7776:	39 f0       	breq	.+14     	; 0x7786 <__fixunssfsi+0x4c>
    7778:	b9 3f       	cpi	r27, 0xF9	; 249
    777a:	cc f3       	brlt	.-14     	; 0x776e <__fixunssfsi+0x34>
    777c:	86 95       	lsr	r24
    777e:	77 95       	ror	r23
    7780:	67 95       	ror	r22
    7782:	b3 95       	inc	r27
    7784:	d9 f7       	brne	.-10     	; 0x777c <__fixunssfsi+0x42>
    7786:	3e f4       	brtc	.+14     	; 0x7796 <__fixunssfsi+0x5c>
    7788:	90 95       	com	r25
    778a:	80 95       	com	r24
    778c:	70 95       	com	r23
    778e:	61 95       	neg	r22
    7790:	7f 4f       	sbci	r23, 0xFF	; 255
    7792:	8f 4f       	sbci	r24, 0xFF	; 255
    7794:	9f 4f       	sbci	r25, 0xFF	; 255
    7796:	08 95       	ret

00007798 <__fp_cmp>:
    7798:	99 0f       	add	r25, r25
    779a:	00 08       	sbc	r0, r0
    779c:	55 0f       	add	r21, r21
    779e:	aa 0b       	sbc	r26, r26
    77a0:	e0 e8       	ldi	r30, 0x80	; 128
    77a2:	fe ef       	ldi	r31, 0xFE	; 254
    77a4:	16 16       	cp	r1, r22
    77a6:	17 06       	cpc	r1, r23
    77a8:	e8 07       	cpc	r30, r24
    77aa:	f9 07       	cpc	r31, r25
    77ac:	c0 f0       	brcs	.+48     	; 0x77de <__fp_cmp+0x46>
    77ae:	12 16       	cp	r1, r18
    77b0:	13 06       	cpc	r1, r19
    77b2:	e4 07       	cpc	r30, r20
    77b4:	f5 07       	cpc	r31, r21
    77b6:	98 f0       	brcs	.+38     	; 0x77de <__fp_cmp+0x46>
    77b8:	62 1b       	sub	r22, r18
    77ba:	73 0b       	sbc	r23, r19
    77bc:	84 0b       	sbc	r24, r20
    77be:	95 0b       	sbc	r25, r21
    77c0:	39 f4       	brne	.+14     	; 0x77d0 <__fp_cmp+0x38>
    77c2:	0a 26       	eor	r0, r26
    77c4:	61 f0       	breq	.+24     	; 0x77de <__fp_cmp+0x46>
    77c6:	23 2b       	or	r18, r19
    77c8:	24 2b       	or	r18, r20
    77ca:	25 2b       	or	r18, r21
    77cc:	21 f4       	brne	.+8      	; 0x77d6 <__fp_cmp+0x3e>
    77ce:	08 95       	ret
    77d0:	0a 26       	eor	r0, r26
    77d2:	09 f4       	brne	.+2      	; 0x77d6 <__fp_cmp+0x3e>
    77d4:	a1 40       	sbci	r26, 0x01	; 1
    77d6:	a6 95       	lsr	r26
    77d8:	8f ef       	ldi	r24, 0xFF	; 255
    77da:	81 1d       	adc	r24, r1
    77dc:	81 1d       	adc	r24, r1
    77de:	08 95       	ret

000077e0 <__fp_split3>:
    77e0:	57 fd       	sbrc	r21, 7
    77e2:	90 58       	subi	r25, 0x80	; 128
    77e4:	44 0f       	add	r20, r20
    77e6:	55 1f       	adc	r21, r21
    77e8:	59 f0       	breq	.+22     	; 0x7800 <__fp_splitA+0x10>
    77ea:	5f 3f       	cpi	r21, 0xFF	; 255
    77ec:	71 f0       	breq	.+28     	; 0x780a <__fp_splitA+0x1a>
    77ee:	47 95       	ror	r20

000077f0 <__fp_splitA>:
    77f0:	88 0f       	add	r24, r24
    77f2:	97 fb       	bst	r25, 7
    77f4:	99 1f       	adc	r25, r25
    77f6:	61 f0       	breq	.+24     	; 0x7810 <__fp_splitA+0x20>
    77f8:	9f 3f       	cpi	r25, 0xFF	; 255
    77fa:	79 f0       	breq	.+30     	; 0x781a <__fp_splitA+0x2a>
    77fc:	87 95       	ror	r24
    77fe:	08 95       	ret
    7800:	12 16       	cp	r1, r18
    7802:	13 06       	cpc	r1, r19
    7804:	14 06       	cpc	r1, r20
    7806:	55 1f       	adc	r21, r21
    7808:	f2 cf       	rjmp	.-28     	; 0x77ee <__fp_split3+0xe>
    780a:	46 95       	lsr	r20
    780c:	f1 df       	rcall	.-30     	; 0x77f0 <__fp_splitA>
    780e:	08 c0       	rjmp	.+16     	; 0x7820 <__fp_splitA+0x30>
    7810:	16 16       	cp	r1, r22
    7812:	17 06       	cpc	r1, r23
    7814:	18 06       	cpc	r1, r24
    7816:	99 1f       	adc	r25, r25
    7818:	f1 cf       	rjmp	.-30     	; 0x77fc <__fp_splitA+0xc>
    781a:	86 95       	lsr	r24
    781c:	71 05       	cpc	r23, r1
    781e:	61 05       	cpc	r22, r1
    7820:	08 94       	sec
    7822:	08 95       	ret

00007824 <__fp_zero>:
    7824:	e8 94       	clt

00007826 <__fp_szero>:
    7826:	bb 27       	eor	r27, r27
    7828:	66 27       	eor	r22, r22
    782a:	77 27       	eor	r23, r23
    782c:	cb 01       	movw	r24, r22
    782e:	97 f9       	bld	r25, 7
    7830:	08 95       	ret

00007832 <__gesf2>:
    7832:	0e 94 cc 3b 	call	0x7798	; 0x7798 <__fp_cmp>
    7836:	08 f4       	brcc	.+2      	; 0x783a <__gesf2+0x8>
    7838:	8f ef       	ldi	r24, 0xFF	; 255
    783a:	08 95       	ret

0000783c <__mulsf3>:
    783c:	0e 94 31 3c 	call	0x7862	; 0x7862 <__mulsf3x>
    7840:	0c 94 a2 3c 	jmp	0x7944	; 0x7944 <__fp_round>
    7844:	0e 94 94 3c 	call	0x7928	; 0x7928 <__fp_pscA>
    7848:	38 f0       	brcs	.+14     	; 0x7858 <__mulsf3+0x1c>
    784a:	0e 94 9b 3c 	call	0x7936	; 0x7936 <__fp_pscB>
    784e:	20 f0       	brcs	.+8      	; 0x7858 <__mulsf3+0x1c>
    7850:	95 23       	and	r25, r21
    7852:	11 f0       	breq	.+4      	; 0x7858 <__mulsf3+0x1c>
    7854:	0c 94 8b 3c 	jmp	0x7916	; 0x7916 <__fp_inf>
    7858:	0c 94 91 3c 	jmp	0x7922	; 0x7922 <__fp_nan>
    785c:	11 24       	eor	r1, r1
    785e:	0c 94 13 3c 	jmp	0x7826	; 0x7826 <__fp_szero>

00007862 <__mulsf3x>:
    7862:	0e 94 f0 3b 	call	0x77e0	; 0x77e0 <__fp_split3>
    7866:	70 f3       	brcs	.-36     	; 0x7844 <__mulsf3+0x8>

00007868 <__mulsf3_pse>:
    7868:	95 9f       	mul	r25, r21
    786a:	c1 f3       	breq	.-16     	; 0x785c <__mulsf3+0x20>
    786c:	95 0f       	add	r25, r21
    786e:	50 e0       	ldi	r21, 0x00	; 0
    7870:	55 1f       	adc	r21, r21
    7872:	62 9f       	mul	r22, r18
    7874:	f0 01       	movw	r30, r0
    7876:	72 9f       	mul	r23, r18
    7878:	bb 27       	eor	r27, r27
    787a:	f0 0d       	add	r31, r0
    787c:	b1 1d       	adc	r27, r1
    787e:	63 9f       	mul	r22, r19
    7880:	aa 27       	eor	r26, r26
    7882:	f0 0d       	add	r31, r0
    7884:	b1 1d       	adc	r27, r1
    7886:	aa 1f       	adc	r26, r26
    7888:	64 9f       	mul	r22, r20
    788a:	66 27       	eor	r22, r22
    788c:	b0 0d       	add	r27, r0
    788e:	a1 1d       	adc	r26, r1
    7890:	66 1f       	adc	r22, r22
    7892:	82 9f       	mul	r24, r18
    7894:	22 27       	eor	r18, r18
    7896:	b0 0d       	add	r27, r0
    7898:	a1 1d       	adc	r26, r1
    789a:	62 1f       	adc	r22, r18
    789c:	73 9f       	mul	r23, r19
    789e:	b0 0d       	add	r27, r0
    78a0:	a1 1d       	adc	r26, r1
    78a2:	62 1f       	adc	r22, r18
    78a4:	83 9f       	mul	r24, r19
    78a6:	a0 0d       	add	r26, r0
    78a8:	61 1d       	adc	r22, r1
    78aa:	22 1f       	adc	r18, r18
    78ac:	74 9f       	mul	r23, r20
    78ae:	33 27       	eor	r19, r19
    78b0:	a0 0d       	add	r26, r0
    78b2:	61 1d       	adc	r22, r1
    78b4:	23 1f       	adc	r18, r19
    78b6:	84 9f       	mul	r24, r20
    78b8:	60 0d       	add	r22, r0
    78ba:	21 1d       	adc	r18, r1
    78bc:	82 2f       	mov	r24, r18
    78be:	76 2f       	mov	r23, r22
    78c0:	6a 2f       	mov	r22, r26
    78c2:	11 24       	eor	r1, r1
    78c4:	9f 57       	subi	r25, 0x7F	; 127
    78c6:	50 40       	sbci	r21, 0x00	; 0
    78c8:	9a f0       	brmi	.+38     	; 0x78f0 <__mulsf3_pse+0x88>
    78ca:	f1 f0       	breq	.+60     	; 0x7908 <__mulsf3_pse+0xa0>
    78cc:	88 23       	and	r24, r24
    78ce:	4a f0       	brmi	.+18     	; 0x78e2 <__mulsf3_pse+0x7a>
    78d0:	ee 0f       	add	r30, r30
    78d2:	ff 1f       	adc	r31, r31
    78d4:	bb 1f       	adc	r27, r27
    78d6:	66 1f       	adc	r22, r22
    78d8:	77 1f       	adc	r23, r23
    78da:	88 1f       	adc	r24, r24
    78dc:	91 50       	subi	r25, 0x01	; 1
    78de:	50 40       	sbci	r21, 0x00	; 0
    78e0:	a9 f7       	brne	.-22     	; 0x78cc <__mulsf3_pse+0x64>
    78e2:	9e 3f       	cpi	r25, 0xFE	; 254
    78e4:	51 05       	cpc	r21, r1
    78e6:	80 f0       	brcs	.+32     	; 0x7908 <__mulsf3_pse+0xa0>
    78e8:	0c 94 8b 3c 	jmp	0x7916	; 0x7916 <__fp_inf>
    78ec:	0c 94 13 3c 	jmp	0x7826	; 0x7826 <__fp_szero>
    78f0:	5f 3f       	cpi	r21, 0xFF	; 255
    78f2:	e4 f3       	brlt	.-8      	; 0x78ec <__mulsf3_pse+0x84>
    78f4:	98 3e       	cpi	r25, 0xE8	; 232
    78f6:	d4 f3       	brlt	.-12     	; 0x78ec <__mulsf3_pse+0x84>
    78f8:	86 95       	lsr	r24
    78fa:	77 95       	ror	r23
    78fc:	67 95       	ror	r22
    78fe:	b7 95       	ror	r27
    7900:	f7 95       	ror	r31
    7902:	e7 95       	ror	r30
    7904:	9f 5f       	subi	r25, 0xFF	; 255
    7906:	c1 f7       	brne	.-16     	; 0x78f8 <__mulsf3_pse+0x90>
    7908:	fe 2b       	or	r31, r30
    790a:	88 0f       	add	r24, r24
    790c:	91 1d       	adc	r25, r1
    790e:	96 95       	lsr	r25
    7910:	87 95       	ror	r24
    7912:	97 f9       	bld	r25, 7
    7914:	08 95       	ret

00007916 <__fp_inf>:
    7916:	97 f9       	bld	r25, 7
    7918:	9f 67       	ori	r25, 0x7F	; 127
    791a:	80 e8       	ldi	r24, 0x80	; 128
    791c:	70 e0       	ldi	r23, 0x00	; 0
    791e:	60 e0       	ldi	r22, 0x00	; 0
    7920:	08 95       	ret

00007922 <__fp_nan>:
    7922:	9f ef       	ldi	r25, 0xFF	; 255
    7924:	80 ec       	ldi	r24, 0xC0	; 192
    7926:	08 95       	ret

00007928 <__fp_pscA>:
    7928:	00 24       	eor	r0, r0
    792a:	0a 94       	dec	r0
    792c:	16 16       	cp	r1, r22
    792e:	17 06       	cpc	r1, r23
    7930:	18 06       	cpc	r1, r24
    7932:	09 06       	cpc	r0, r25
    7934:	08 95       	ret

00007936 <__fp_pscB>:
    7936:	00 24       	eor	r0, r0
    7938:	0a 94       	dec	r0
    793a:	12 16       	cp	r1, r18
    793c:	13 06       	cpc	r1, r19
    793e:	14 06       	cpc	r1, r20
    7940:	05 06       	cpc	r0, r21
    7942:	08 95       	ret

00007944 <__fp_round>:
    7944:	09 2e       	mov	r0, r25
    7946:	03 94       	inc	r0
    7948:	00 0c       	add	r0, r0
    794a:	11 f4       	brne	.+4      	; 0x7950 <__fp_round+0xc>
    794c:	88 23       	and	r24, r24
    794e:	52 f0       	brmi	.+20     	; 0x7964 <__fp_round+0x20>
    7950:	bb 0f       	add	r27, r27
    7952:	40 f4       	brcc	.+16     	; 0x7964 <__fp_round+0x20>
    7954:	bf 2b       	or	r27, r31
    7956:	11 f4       	brne	.+4      	; 0x795c <__fp_round+0x18>
    7958:	60 ff       	sbrs	r22, 0
    795a:	04 c0       	rjmp	.+8      	; 0x7964 <__fp_round+0x20>
    795c:	6f 5f       	subi	r22, 0xFF	; 255
    795e:	7f 4f       	sbci	r23, 0xFF	; 255
    7960:	8f 4f       	sbci	r24, 0xFF	; 255
    7962:	9f 4f       	sbci	r25, 0xFF	; 255
    7964:	08 95       	ret

00007966 <__divmodhi4>:
    7966:	97 fb       	bst	r25, 7
    7968:	07 2e       	mov	r0, r23
    796a:	16 f4       	brtc	.+4      	; 0x7970 <__divmodhi4+0xa>
    796c:	00 94       	com	r0
    796e:	07 d0       	rcall	.+14     	; 0x797e <__divmodhi4_neg1>
    7970:	77 fd       	sbrc	r23, 7
    7972:	09 d0       	rcall	.+18     	; 0x7986 <__divmodhi4_neg2>
    7974:	0e 94 cd 3c 	call	0x799a	; 0x799a <__udivmodhi4>
    7978:	07 fc       	sbrc	r0, 7
    797a:	05 d0       	rcall	.+10     	; 0x7986 <__divmodhi4_neg2>
    797c:	3e f4       	brtc	.+14     	; 0x798c <__divmodhi4_exit>

0000797e <__divmodhi4_neg1>:
    797e:	90 95       	com	r25
    7980:	81 95       	neg	r24
    7982:	9f 4f       	sbci	r25, 0xFF	; 255
    7984:	08 95       	ret

00007986 <__divmodhi4_neg2>:
    7986:	70 95       	com	r23
    7988:	61 95       	neg	r22
    798a:	7f 4f       	sbci	r23, 0xFF	; 255

0000798c <__divmodhi4_exit>:
    798c:	08 95       	ret

0000798e <__tablejump2__>:
    798e:	ee 0f       	add	r30, r30
    7990:	ff 1f       	adc	r31, r31
    7992:	05 90       	lpm	r0, Z+
    7994:	f4 91       	lpm	r31, Z
    7996:	e0 2d       	mov	r30, r0
    7998:	09 94       	ijmp

0000799a <__udivmodhi4>:
    799a:	aa 1b       	sub	r26, r26
    799c:	bb 1b       	sub	r27, r27
    799e:	51 e1       	ldi	r21, 0x11	; 17
    79a0:	07 c0       	rjmp	.+14     	; 0x79b0 <__udivmodhi4_ep>

000079a2 <__udivmodhi4_loop>:
    79a2:	aa 1f       	adc	r26, r26
    79a4:	bb 1f       	adc	r27, r27
    79a6:	a6 17       	cp	r26, r22
    79a8:	b7 07       	cpc	r27, r23
    79aa:	10 f0       	brcs	.+4      	; 0x79b0 <__udivmodhi4_ep>
    79ac:	a6 1b       	sub	r26, r22
    79ae:	b7 0b       	sbc	r27, r23

000079b0 <__udivmodhi4_ep>:
    79b0:	88 1f       	adc	r24, r24
    79b2:	99 1f       	adc	r25, r25
    79b4:	5a 95       	dec	r21
    79b6:	a9 f7       	brne	.-22     	; 0x79a2 <__udivmodhi4_loop>
    79b8:	80 95       	com	r24
    79ba:	90 95       	com	r25
    79bc:	bc 01       	movw	r22, r24
    79be:	cd 01       	movw	r24, r26
    79c0:	08 95       	ret

000079c2 <memset>:
    79c2:	dc 01       	movw	r26, r24
    79c4:	01 c0       	rjmp	.+2      	; 0x79c8 <memset+0x6>
    79c6:	6d 93       	st	X+, r22
    79c8:	41 50       	subi	r20, 0x01	; 1
    79ca:	50 40       	sbci	r21, 0x00	; 0
    79cc:	e0 f7       	brcc	.-8      	; 0x79c6 <memset+0x4>
    79ce:	08 95       	ret

000079d0 <strlen>:
    79d0:	fc 01       	movw	r30, r24
    79d2:	01 90       	ld	r0, Z+
    79d4:	00 20       	and	r0, r0
    79d6:	e9 f7       	brne	.-6      	; 0x79d2 <strlen+0x2>
    79d8:	80 95       	com	r24
    79da:	90 95       	com	r25
    79dc:	8e 0f       	add	r24, r30
    79de:	9f 1f       	adc	r25, r31
    79e0:	08 95       	ret

000079e2 <sprintf>:
    79e2:	ae e0       	ldi	r26, 0x0E	; 14
    79e4:	b0 e0       	ldi	r27, 0x00	; 0
    79e6:	e7 ef       	ldi	r30, 0xF7	; 247
    79e8:	fc e3       	ldi	r31, 0x3C	; 60
    79ea:	0c 94 b2 3f 	jmp	0x7f64	; 0x7f64 <__prologue_saves__+0x1c>
    79ee:	0d 89       	ldd	r16, Y+21	; 0x15
    79f0:	1e 89       	ldd	r17, Y+22	; 0x16
    79f2:	86 e0       	ldi	r24, 0x06	; 6
    79f4:	8c 83       	std	Y+4, r24	; 0x04
    79f6:	09 83       	std	Y+1, r16	; 0x01
    79f8:	1a 83       	std	Y+2, r17	; 0x02
    79fa:	8f ef       	ldi	r24, 0xFF	; 255
    79fc:	9f e7       	ldi	r25, 0x7F	; 127
    79fe:	8d 83       	std	Y+5, r24	; 0x05
    7a00:	9e 83       	std	Y+6, r25	; 0x06
    7a02:	ae 01       	movw	r20, r28
    7a04:	47 5e       	subi	r20, 0xE7	; 231
    7a06:	5f 4f       	sbci	r21, 0xFF	; 255
    7a08:	6f 89       	ldd	r22, Y+23	; 0x17
    7a0a:	78 8d       	ldd	r23, Y+24	; 0x18
    7a0c:	ce 01       	movw	r24, r28
    7a0e:	01 96       	adiw	r24, 0x01	; 1
    7a10:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <vfprintf>
    7a14:	ef 81       	ldd	r30, Y+7	; 0x07
    7a16:	f8 85       	ldd	r31, Y+8	; 0x08
    7a18:	e0 0f       	add	r30, r16
    7a1a:	f1 1f       	adc	r31, r17
    7a1c:	10 82       	st	Z, r1
    7a1e:	2e 96       	adiw	r28, 0x0e	; 14
    7a20:	e4 e0       	ldi	r30, 0x04	; 4
    7a22:	0c 94 cb 3f 	jmp	0x7f96	; 0x7f96 <__epilogue_restores__+0x1c>

00007a26 <vfprintf>:
    7a26:	ab e0       	ldi	r26, 0x0B	; 11
    7a28:	b0 e0       	ldi	r27, 0x00	; 0
    7a2a:	e9 e1       	ldi	r30, 0x19	; 25
    7a2c:	fd e3       	ldi	r31, 0x3D	; 61
    7a2e:	0c 94 a4 3f 	jmp	0x7f48	; 0x7f48 <__prologue_saves__>
    7a32:	6c 01       	movw	r12, r24
    7a34:	7b 01       	movw	r14, r22
    7a36:	8a 01       	movw	r16, r20
    7a38:	fc 01       	movw	r30, r24
    7a3a:	16 82       	std	Z+6, r1	; 0x06
    7a3c:	17 82       	std	Z+7, r1	; 0x07
    7a3e:	83 81       	ldd	r24, Z+3	; 0x03
    7a40:	81 ff       	sbrs	r24, 1
    7a42:	cc c1       	rjmp	.+920    	; 0x7ddc <vfprintf+0x3b6>
    7a44:	ce 01       	movw	r24, r28
    7a46:	01 96       	adiw	r24, 0x01	; 1
    7a48:	3c 01       	movw	r6, r24
    7a4a:	f6 01       	movw	r30, r12
    7a4c:	93 81       	ldd	r25, Z+3	; 0x03
    7a4e:	f7 01       	movw	r30, r14
    7a50:	93 fd       	sbrc	r25, 3
    7a52:	85 91       	lpm	r24, Z+
    7a54:	93 ff       	sbrs	r25, 3
    7a56:	81 91       	ld	r24, Z+
    7a58:	7f 01       	movw	r14, r30
    7a5a:	88 23       	and	r24, r24
    7a5c:	09 f4       	brne	.+2      	; 0x7a60 <vfprintf+0x3a>
    7a5e:	ba c1       	rjmp	.+884    	; 0x7dd4 <vfprintf+0x3ae>
    7a60:	85 32       	cpi	r24, 0x25	; 37
    7a62:	39 f4       	brne	.+14     	; 0x7a72 <vfprintf+0x4c>
    7a64:	93 fd       	sbrc	r25, 3
    7a66:	85 91       	lpm	r24, Z+
    7a68:	93 ff       	sbrs	r25, 3
    7a6a:	81 91       	ld	r24, Z+
    7a6c:	7f 01       	movw	r14, r30
    7a6e:	85 32       	cpi	r24, 0x25	; 37
    7a70:	29 f4       	brne	.+10     	; 0x7a7c <vfprintf+0x56>
    7a72:	b6 01       	movw	r22, r12
    7a74:	90 e0       	ldi	r25, 0x00	; 0
    7a76:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <fputc>
    7a7a:	e7 cf       	rjmp	.-50     	; 0x7a4a <vfprintf+0x24>
    7a7c:	91 2c       	mov	r9, r1
    7a7e:	21 2c       	mov	r2, r1
    7a80:	31 2c       	mov	r3, r1
    7a82:	ff e1       	ldi	r31, 0x1F	; 31
    7a84:	f3 15       	cp	r31, r3
    7a86:	d8 f0       	brcs	.+54     	; 0x7abe <vfprintf+0x98>
    7a88:	8b 32       	cpi	r24, 0x2B	; 43
    7a8a:	79 f0       	breq	.+30     	; 0x7aaa <vfprintf+0x84>
    7a8c:	38 f4       	brcc	.+14     	; 0x7a9c <vfprintf+0x76>
    7a8e:	80 32       	cpi	r24, 0x20	; 32
    7a90:	79 f0       	breq	.+30     	; 0x7ab0 <vfprintf+0x8a>
    7a92:	83 32       	cpi	r24, 0x23	; 35
    7a94:	a1 f4       	brne	.+40     	; 0x7abe <vfprintf+0x98>
    7a96:	23 2d       	mov	r18, r3
    7a98:	20 61       	ori	r18, 0x10	; 16
    7a9a:	1d c0       	rjmp	.+58     	; 0x7ad6 <vfprintf+0xb0>
    7a9c:	8d 32       	cpi	r24, 0x2D	; 45
    7a9e:	61 f0       	breq	.+24     	; 0x7ab8 <vfprintf+0x92>
    7aa0:	80 33       	cpi	r24, 0x30	; 48
    7aa2:	69 f4       	brne	.+26     	; 0x7abe <vfprintf+0x98>
    7aa4:	23 2d       	mov	r18, r3
    7aa6:	21 60       	ori	r18, 0x01	; 1
    7aa8:	16 c0       	rjmp	.+44     	; 0x7ad6 <vfprintf+0xb0>
    7aaa:	83 2d       	mov	r24, r3
    7aac:	82 60       	ori	r24, 0x02	; 2
    7aae:	38 2e       	mov	r3, r24
    7ab0:	e3 2d       	mov	r30, r3
    7ab2:	e4 60       	ori	r30, 0x04	; 4
    7ab4:	3e 2e       	mov	r3, r30
    7ab6:	2a c0       	rjmp	.+84     	; 0x7b0c <vfprintf+0xe6>
    7ab8:	f3 2d       	mov	r31, r3
    7aba:	f8 60       	ori	r31, 0x08	; 8
    7abc:	1d c0       	rjmp	.+58     	; 0x7af8 <vfprintf+0xd2>
    7abe:	37 fc       	sbrc	r3, 7
    7ac0:	2d c0       	rjmp	.+90     	; 0x7b1c <vfprintf+0xf6>
    7ac2:	20 ed       	ldi	r18, 0xD0	; 208
    7ac4:	28 0f       	add	r18, r24
    7ac6:	2a 30       	cpi	r18, 0x0A	; 10
    7ac8:	40 f0       	brcs	.+16     	; 0x7ada <vfprintf+0xb4>
    7aca:	8e 32       	cpi	r24, 0x2E	; 46
    7acc:	b9 f4       	brne	.+46     	; 0x7afc <vfprintf+0xd6>
    7ace:	36 fc       	sbrc	r3, 6
    7ad0:	81 c1       	rjmp	.+770    	; 0x7dd4 <vfprintf+0x3ae>
    7ad2:	23 2d       	mov	r18, r3
    7ad4:	20 64       	ori	r18, 0x40	; 64
    7ad6:	32 2e       	mov	r3, r18
    7ad8:	19 c0       	rjmp	.+50     	; 0x7b0c <vfprintf+0xe6>
    7ada:	36 fe       	sbrs	r3, 6
    7adc:	06 c0       	rjmp	.+12     	; 0x7aea <vfprintf+0xc4>
    7ade:	8a e0       	ldi	r24, 0x0A	; 10
    7ae0:	98 9e       	mul	r9, r24
    7ae2:	20 0d       	add	r18, r0
    7ae4:	11 24       	eor	r1, r1
    7ae6:	92 2e       	mov	r9, r18
    7ae8:	11 c0       	rjmp	.+34     	; 0x7b0c <vfprintf+0xe6>
    7aea:	ea e0       	ldi	r30, 0x0A	; 10
    7aec:	2e 9e       	mul	r2, r30
    7aee:	20 0d       	add	r18, r0
    7af0:	11 24       	eor	r1, r1
    7af2:	22 2e       	mov	r2, r18
    7af4:	f3 2d       	mov	r31, r3
    7af6:	f0 62       	ori	r31, 0x20	; 32
    7af8:	3f 2e       	mov	r3, r31
    7afa:	08 c0       	rjmp	.+16     	; 0x7b0c <vfprintf+0xe6>
    7afc:	8c 36       	cpi	r24, 0x6C	; 108
    7afe:	21 f4       	brne	.+8      	; 0x7b08 <vfprintf+0xe2>
    7b00:	83 2d       	mov	r24, r3
    7b02:	80 68       	ori	r24, 0x80	; 128
    7b04:	38 2e       	mov	r3, r24
    7b06:	02 c0       	rjmp	.+4      	; 0x7b0c <vfprintf+0xe6>
    7b08:	88 36       	cpi	r24, 0x68	; 104
    7b0a:	41 f4       	brne	.+16     	; 0x7b1c <vfprintf+0xf6>
    7b0c:	f7 01       	movw	r30, r14
    7b0e:	93 fd       	sbrc	r25, 3
    7b10:	85 91       	lpm	r24, Z+
    7b12:	93 ff       	sbrs	r25, 3
    7b14:	81 91       	ld	r24, Z+
    7b16:	7f 01       	movw	r14, r30
    7b18:	81 11       	cpse	r24, r1
    7b1a:	b3 cf       	rjmp	.-154    	; 0x7a82 <vfprintf+0x5c>
    7b1c:	98 2f       	mov	r25, r24
    7b1e:	9f 7d       	andi	r25, 0xDF	; 223
    7b20:	95 54       	subi	r25, 0x45	; 69
    7b22:	93 30       	cpi	r25, 0x03	; 3
    7b24:	28 f4       	brcc	.+10     	; 0x7b30 <vfprintf+0x10a>
    7b26:	0c 5f       	subi	r16, 0xFC	; 252
    7b28:	1f 4f       	sbci	r17, 0xFF	; 255
    7b2a:	9f e3       	ldi	r25, 0x3F	; 63
    7b2c:	99 83       	std	Y+1, r25	; 0x01
    7b2e:	0d c0       	rjmp	.+26     	; 0x7b4a <vfprintf+0x124>
    7b30:	83 36       	cpi	r24, 0x63	; 99
    7b32:	31 f0       	breq	.+12     	; 0x7b40 <vfprintf+0x11a>
    7b34:	83 37       	cpi	r24, 0x73	; 115
    7b36:	71 f0       	breq	.+28     	; 0x7b54 <vfprintf+0x12e>
    7b38:	83 35       	cpi	r24, 0x53	; 83
    7b3a:	09 f0       	breq	.+2      	; 0x7b3e <vfprintf+0x118>
    7b3c:	59 c0       	rjmp	.+178    	; 0x7bf0 <vfprintf+0x1ca>
    7b3e:	21 c0       	rjmp	.+66     	; 0x7b82 <vfprintf+0x15c>
    7b40:	f8 01       	movw	r30, r16
    7b42:	80 81       	ld	r24, Z
    7b44:	89 83       	std	Y+1, r24	; 0x01
    7b46:	0e 5f       	subi	r16, 0xFE	; 254
    7b48:	1f 4f       	sbci	r17, 0xFF	; 255
    7b4a:	88 24       	eor	r8, r8
    7b4c:	83 94       	inc	r8
    7b4e:	91 2c       	mov	r9, r1
    7b50:	53 01       	movw	r10, r6
    7b52:	13 c0       	rjmp	.+38     	; 0x7b7a <vfprintf+0x154>
    7b54:	28 01       	movw	r4, r16
    7b56:	f2 e0       	ldi	r31, 0x02	; 2
    7b58:	4f 0e       	add	r4, r31
    7b5a:	51 1c       	adc	r5, r1
    7b5c:	f8 01       	movw	r30, r16
    7b5e:	a0 80       	ld	r10, Z
    7b60:	b1 80       	ldd	r11, Z+1	; 0x01
    7b62:	36 fe       	sbrs	r3, 6
    7b64:	03 c0       	rjmp	.+6      	; 0x7b6c <vfprintf+0x146>
    7b66:	69 2d       	mov	r22, r9
    7b68:	70 e0       	ldi	r23, 0x00	; 0
    7b6a:	02 c0       	rjmp	.+4      	; 0x7b70 <vfprintf+0x14a>
    7b6c:	6f ef       	ldi	r22, 0xFF	; 255
    7b6e:	7f ef       	ldi	r23, 0xFF	; 255
    7b70:	c5 01       	movw	r24, r10
    7b72:	0e 94 ff 3e 	call	0x7dfe	; 0x7dfe <strnlen>
    7b76:	4c 01       	movw	r8, r24
    7b78:	82 01       	movw	r16, r4
    7b7a:	f3 2d       	mov	r31, r3
    7b7c:	ff 77       	andi	r31, 0x7F	; 127
    7b7e:	3f 2e       	mov	r3, r31
    7b80:	16 c0       	rjmp	.+44     	; 0x7bae <vfprintf+0x188>
    7b82:	28 01       	movw	r4, r16
    7b84:	22 e0       	ldi	r18, 0x02	; 2
    7b86:	42 0e       	add	r4, r18
    7b88:	51 1c       	adc	r5, r1
    7b8a:	f8 01       	movw	r30, r16
    7b8c:	a0 80       	ld	r10, Z
    7b8e:	b1 80       	ldd	r11, Z+1	; 0x01
    7b90:	36 fe       	sbrs	r3, 6
    7b92:	03 c0       	rjmp	.+6      	; 0x7b9a <vfprintf+0x174>
    7b94:	69 2d       	mov	r22, r9
    7b96:	70 e0       	ldi	r23, 0x00	; 0
    7b98:	02 c0       	rjmp	.+4      	; 0x7b9e <vfprintf+0x178>
    7b9a:	6f ef       	ldi	r22, 0xFF	; 255
    7b9c:	7f ef       	ldi	r23, 0xFF	; 255
    7b9e:	c5 01       	movw	r24, r10
    7ba0:	0e 94 f4 3e 	call	0x7de8	; 0x7de8 <strnlen_P>
    7ba4:	4c 01       	movw	r8, r24
    7ba6:	f3 2d       	mov	r31, r3
    7ba8:	f0 68       	ori	r31, 0x80	; 128
    7baa:	3f 2e       	mov	r3, r31
    7bac:	82 01       	movw	r16, r4
    7bae:	33 fc       	sbrc	r3, 3
    7bb0:	1b c0       	rjmp	.+54     	; 0x7be8 <vfprintf+0x1c2>
    7bb2:	82 2d       	mov	r24, r2
    7bb4:	90 e0       	ldi	r25, 0x00	; 0
    7bb6:	88 16       	cp	r8, r24
    7bb8:	99 06       	cpc	r9, r25
    7bba:	b0 f4       	brcc	.+44     	; 0x7be8 <vfprintf+0x1c2>
    7bbc:	b6 01       	movw	r22, r12
    7bbe:	80 e2       	ldi	r24, 0x20	; 32
    7bc0:	90 e0       	ldi	r25, 0x00	; 0
    7bc2:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <fputc>
    7bc6:	2a 94       	dec	r2
    7bc8:	f4 cf       	rjmp	.-24     	; 0x7bb2 <vfprintf+0x18c>
    7bca:	f5 01       	movw	r30, r10
    7bcc:	37 fc       	sbrc	r3, 7
    7bce:	85 91       	lpm	r24, Z+
    7bd0:	37 fe       	sbrs	r3, 7
    7bd2:	81 91       	ld	r24, Z+
    7bd4:	5f 01       	movw	r10, r30
    7bd6:	b6 01       	movw	r22, r12
    7bd8:	90 e0       	ldi	r25, 0x00	; 0
    7bda:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <fputc>
    7bde:	21 10       	cpse	r2, r1
    7be0:	2a 94       	dec	r2
    7be2:	21 e0       	ldi	r18, 0x01	; 1
    7be4:	82 1a       	sub	r8, r18
    7be6:	91 08       	sbc	r9, r1
    7be8:	81 14       	cp	r8, r1
    7bea:	91 04       	cpc	r9, r1
    7bec:	71 f7       	brne	.-36     	; 0x7bca <vfprintf+0x1a4>
    7bee:	e8 c0       	rjmp	.+464    	; 0x7dc0 <vfprintf+0x39a>
    7bf0:	84 36       	cpi	r24, 0x64	; 100
    7bf2:	11 f0       	breq	.+4      	; 0x7bf8 <vfprintf+0x1d2>
    7bf4:	89 36       	cpi	r24, 0x69	; 105
    7bf6:	41 f5       	brne	.+80     	; 0x7c48 <vfprintf+0x222>
    7bf8:	f8 01       	movw	r30, r16
    7bfa:	37 fe       	sbrs	r3, 7
    7bfc:	07 c0       	rjmp	.+14     	; 0x7c0c <vfprintf+0x1e6>
    7bfe:	60 81       	ld	r22, Z
    7c00:	71 81       	ldd	r23, Z+1	; 0x01
    7c02:	82 81       	ldd	r24, Z+2	; 0x02
    7c04:	93 81       	ldd	r25, Z+3	; 0x03
    7c06:	0c 5f       	subi	r16, 0xFC	; 252
    7c08:	1f 4f       	sbci	r17, 0xFF	; 255
    7c0a:	08 c0       	rjmp	.+16     	; 0x7c1c <vfprintf+0x1f6>
    7c0c:	60 81       	ld	r22, Z
    7c0e:	71 81       	ldd	r23, Z+1	; 0x01
    7c10:	07 2e       	mov	r0, r23
    7c12:	00 0c       	add	r0, r0
    7c14:	88 0b       	sbc	r24, r24
    7c16:	99 0b       	sbc	r25, r25
    7c18:	0e 5f       	subi	r16, 0xFE	; 254
    7c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    7c1c:	f3 2d       	mov	r31, r3
    7c1e:	ff 76       	andi	r31, 0x6F	; 111
    7c20:	3f 2e       	mov	r3, r31
    7c22:	97 ff       	sbrs	r25, 7
    7c24:	09 c0       	rjmp	.+18     	; 0x7c38 <vfprintf+0x212>
    7c26:	90 95       	com	r25
    7c28:	80 95       	com	r24
    7c2a:	70 95       	com	r23
    7c2c:	61 95       	neg	r22
    7c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    7c30:	8f 4f       	sbci	r24, 0xFF	; 255
    7c32:	9f 4f       	sbci	r25, 0xFF	; 255
    7c34:	f0 68       	ori	r31, 0x80	; 128
    7c36:	3f 2e       	mov	r3, r31
    7c38:	2a e0       	ldi	r18, 0x0A	; 10
    7c3a:	30 e0       	ldi	r19, 0x00	; 0
    7c3c:	a3 01       	movw	r20, r6
    7c3e:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__ultoa_invert>
    7c42:	88 2e       	mov	r8, r24
    7c44:	86 18       	sub	r8, r6
    7c46:	45 c0       	rjmp	.+138    	; 0x7cd2 <vfprintf+0x2ac>
    7c48:	85 37       	cpi	r24, 0x75	; 117
    7c4a:	31 f4       	brne	.+12     	; 0x7c58 <vfprintf+0x232>
    7c4c:	23 2d       	mov	r18, r3
    7c4e:	2f 7e       	andi	r18, 0xEF	; 239
    7c50:	b2 2e       	mov	r11, r18
    7c52:	2a e0       	ldi	r18, 0x0A	; 10
    7c54:	30 e0       	ldi	r19, 0x00	; 0
    7c56:	25 c0       	rjmp	.+74     	; 0x7ca2 <vfprintf+0x27c>
    7c58:	93 2d       	mov	r25, r3
    7c5a:	99 7f       	andi	r25, 0xF9	; 249
    7c5c:	b9 2e       	mov	r11, r25
    7c5e:	8f 36       	cpi	r24, 0x6F	; 111
    7c60:	c1 f0       	breq	.+48     	; 0x7c92 <vfprintf+0x26c>
    7c62:	18 f4       	brcc	.+6      	; 0x7c6a <vfprintf+0x244>
    7c64:	88 35       	cpi	r24, 0x58	; 88
    7c66:	79 f0       	breq	.+30     	; 0x7c86 <vfprintf+0x260>
    7c68:	b5 c0       	rjmp	.+362    	; 0x7dd4 <vfprintf+0x3ae>
    7c6a:	80 37       	cpi	r24, 0x70	; 112
    7c6c:	19 f0       	breq	.+6      	; 0x7c74 <vfprintf+0x24e>
    7c6e:	88 37       	cpi	r24, 0x78	; 120
    7c70:	21 f0       	breq	.+8      	; 0x7c7a <vfprintf+0x254>
    7c72:	b0 c0       	rjmp	.+352    	; 0x7dd4 <vfprintf+0x3ae>
    7c74:	e9 2f       	mov	r30, r25
    7c76:	e0 61       	ori	r30, 0x10	; 16
    7c78:	be 2e       	mov	r11, r30
    7c7a:	b4 fe       	sbrs	r11, 4
    7c7c:	0d c0       	rjmp	.+26     	; 0x7c98 <vfprintf+0x272>
    7c7e:	fb 2d       	mov	r31, r11
    7c80:	f4 60       	ori	r31, 0x04	; 4
    7c82:	bf 2e       	mov	r11, r31
    7c84:	09 c0       	rjmp	.+18     	; 0x7c98 <vfprintf+0x272>
    7c86:	34 fe       	sbrs	r3, 4
    7c88:	0a c0       	rjmp	.+20     	; 0x7c9e <vfprintf+0x278>
    7c8a:	29 2f       	mov	r18, r25
    7c8c:	26 60       	ori	r18, 0x06	; 6
    7c8e:	b2 2e       	mov	r11, r18
    7c90:	06 c0       	rjmp	.+12     	; 0x7c9e <vfprintf+0x278>
    7c92:	28 e0       	ldi	r18, 0x08	; 8
    7c94:	30 e0       	ldi	r19, 0x00	; 0
    7c96:	05 c0       	rjmp	.+10     	; 0x7ca2 <vfprintf+0x27c>
    7c98:	20 e1       	ldi	r18, 0x10	; 16
    7c9a:	30 e0       	ldi	r19, 0x00	; 0
    7c9c:	02 c0       	rjmp	.+4      	; 0x7ca2 <vfprintf+0x27c>
    7c9e:	20 e1       	ldi	r18, 0x10	; 16
    7ca0:	32 e0       	ldi	r19, 0x02	; 2
    7ca2:	f8 01       	movw	r30, r16
    7ca4:	b7 fe       	sbrs	r11, 7
    7ca6:	07 c0       	rjmp	.+14     	; 0x7cb6 <vfprintf+0x290>
    7ca8:	60 81       	ld	r22, Z
    7caa:	71 81       	ldd	r23, Z+1	; 0x01
    7cac:	82 81       	ldd	r24, Z+2	; 0x02
    7cae:	93 81       	ldd	r25, Z+3	; 0x03
    7cb0:	0c 5f       	subi	r16, 0xFC	; 252
    7cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    7cb4:	06 c0       	rjmp	.+12     	; 0x7cc2 <vfprintf+0x29c>
    7cb6:	60 81       	ld	r22, Z
    7cb8:	71 81       	ldd	r23, Z+1	; 0x01
    7cba:	80 e0       	ldi	r24, 0x00	; 0
    7cbc:	90 e0       	ldi	r25, 0x00	; 0
    7cbe:	0e 5f       	subi	r16, 0xFE	; 254
    7cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    7cc2:	a3 01       	movw	r20, r6
    7cc4:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__ultoa_invert>
    7cc8:	88 2e       	mov	r8, r24
    7cca:	86 18       	sub	r8, r6
    7ccc:	fb 2d       	mov	r31, r11
    7cce:	ff 77       	andi	r31, 0x7F	; 127
    7cd0:	3f 2e       	mov	r3, r31
    7cd2:	36 fe       	sbrs	r3, 6
    7cd4:	0d c0       	rjmp	.+26     	; 0x7cf0 <vfprintf+0x2ca>
    7cd6:	23 2d       	mov	r18, r3
    7cd8:	2e 7f       	andi	r18, 0xFE	; 254
    7cda:	a2 2e       	mov	r10, r18
    7cdc:	89 14       	cp	r8, r9
    7cde:	58 f4       	brcc	.+22     	; 0x7cf6 <vfprintf+0x2d0>
    7ce0:	34 fe       	sbrs	r3, 4
    7ce2:	0b c0       	rjmp	.+22     	; 0x7cfa <vfprintf+0x2d4>
    7ce4:	32 fc       	sbrc	r3, 2
    7ce6:	09 c0       	rjmp	.+18     	; 0x7cfa <vfprintf+0x2d4>
    7ce8:	83 2d       	mov	r24, r3
    7cea:	8e 7e       	andi	r24, 0xEE	; 238
    7cec:	a8 2e       	mov	r10, r24
    7cee:	05 c0       	rjmp	.+10     	; 0x7cfa <vfprintf+0x2d4>
    7cf0:	b8 2c       	mov	r11, r8
    7cf2:	a3 2c       	mov	r10, r3
    7cf4:	03 c0       	rjmp	.+6      	; 0x7cfc <vfprintf+0x2d6>
    7cf6:	b8 2c       	mov	r11, r8
    7cf8:	01 c0       	rjmp	.+2      	; 0x7cfc <vfprintf+0x2d6>
    7cfa:	b9 2c       	mov	r11, r9
    7cfc:	a4 fe       	sbrs	r10, 4
    7cfe:	0f c0       	rjmp	.+30     	; 0x7d1e <vfprintf+0x2f8>
    7d00:	fe 01       	movw	r30, r28
    7d02:	e8 0d       	add	r30, r8
    7d04:	f1 1d       	adc	r31, r1
    7d06:	80 81       	ld	r24, Z
    7d08:	80 33       	cpi	r24, 0x30	; 48
    7d0a:	21 f4       	brne	.+8      	; 0x7d14 <vfprintf+0x2ee>
    7d0c:	9a 2d       	mov	r25, r10
    7d0e:	99 7e       	andi	r25, 0xE9	; 233
    7d10:	a9 2e       	mov	r10, r25
    7d12:	09 c0       	rjmp	.+18     	; 0x7d26 <vfprintf+0x300>
    7d14:	a2 fe       	sbrs	r10, 2
    7d16:	06 c0       	rjmp	.+12     	; 0x7d24 <vfprintf+0x2fe>
    7d18:	b3 94       	inc	r11
    7d1a:	b3 94       	inc	r11
    7d1c:	04 c0       	rjmp	.+8      	; 0x7d26 <vfprintf+0x300>
    7d1e:	8a 2d       	mov	r24, r10
    7d20:	86 78       	andi	r24, 0x86	; 134
    7d22:	09 f0       	breq	.+2      	; 0x7d26 <vfprintf+0x300>
    7d24:	b3 94       	inc	r11
    7d26:	a3 fc       	sbrc	r10, 3
    7d28:	11 c0       	rjmp	.+34     	; 0x7d4c <vfprintf+0x326>
    7d2a:	a0 fe       	sbrs	r10, 0
    7d2c:	06 c0       	rjmp	.+12     	; 0x7d3a <vfprintf+0x314>
    7d2e:	b2 14       	cp	r11, r2
    7d30:	88 f4       	brcc	.+34     	; 0x7d54 <vfprintf+0x32e>
    7d32:	28 0c       	add	r2, r8
    7d34:	92 2c       	mov	r9, r2
    7d36:	9b 18       	sub	r9, r11
    7d38:	0e c0       	rjmp	.+28     	; 0x7d56 <vfprintf+0x330>
    7d3a:	b2 14       	cp	r11, r2
    7d3c:	60 f4       	brcc	.+24     	; 0x7d56 <vfprintf+0x330>
    7d3e:	b6 01       	movw	r22, r12
    7d40:	80 e2       	ldi	r24, 0x20	; 32
    7d42:	90 e0       	ldi	r25, 0x00	; 0
    7d44:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <fputc>
    7d48:	b3 94       	inc	r11
    7d4a:	f7 cf       	rjmp	.-18     	; 0x7d3a <vfprintf+0x314>
    7d4c:	b2 14       	cp	r11, r2
    7d4e:	18 f4       	brcc	.+6      	; 0x7d56 <vfprintf+0x330>
    7d50:	2b 18       	sub	r2, r11
    7d52:	02 c0       	rjmp	.+4      	; 0x7d58 <vfprintf+0x332>
    7d54:	98 2c       	mov	r9, r8
    7d56:	21 2c       	mov	r2, r1
    7d58:	a4 fe       	sbrs	r10, 4
    7d5a:	10 c0       	rjmp	.+32     	; 0x7d7c <vfprintf+0x356>
    7d5c:	b6 01       	movw	r22, r12
    7d5e:	80 e3       	ldi	r24, 0x30	; 48
    7d60:	90 e0       	ldi	r25, 0x00	; 0
    7d62:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <fputc>
    7d66:	a2 fe       	sbrs	r10, 2
    7d68:	17 c0       	rjmp	.+46     	; 0x7d98 <vfprintf+0x372>
    7d6a:	a1 fc       	sbrc	r10, 1
    7d6c:	03 c0       	rjmp	.+6      	; 0x7d74 <vfprintf+0x34e>
    7d6e:	88 e7       	ldi	r24, 0x78	; 120
    7d70:	90 e0       	ldi	r25, 0x00	; 0
    7d72:	02 c0       	rjmp	.+4      	; 0x7d78 <vfprintf+0x352>
    7d74:	88 e5       	ldi	r24, 0x58	; 88
    7d76:	90 e0       	ldi	r25, 0x00	; 0
    7d78:	b6 01       	movw	r22, r12
    7d7a:	0c c0       	rjmp	.+24     	; 0x7d94 <vfprintf+0x36e>
    7d7c:	8a 2d       	mov	r24, r10
    7d7e:	86 78       	andi	r24, 0x86	; 134
    7d80:	59 f0       	breq	.+22     	; 0x7d98 <vfprintf+0x372>
    7d82:	a1 fe       	sbrs	r10, 1
    7d84:	02 c0       	rjmp	.+4      	; 0x7d8a <vfprintf+0x364>
    7d86:	8b e2       	ldi	r24, 0x2B	; 43
    7d88:	01 c0       	rjmp	.+2      	; 0x7d8c <vfprintf+0x366>
    7d8a:	80 e2       	ldi	r24, 0x20	; 32
    7d8c:	a7 fc       	sbrc	r10, 7
    7d8e:	8d e2       	ldi	r24, 0x2D	; 45
    7d90:	b6 01       	movw	r22, r12
    7d92:	90 e0       	ldi	r25, 0x00	; 0
    7d94:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <fputc>
    7d98:	89 14       	cp	r8, r9
    7d9a:	38 f4       	brcc	.+14     	; 0x7daa <vfprintf+0x384>
    7d9c:	b6 01       	movw	r22, r12
    7d9e:	80 e3       	ldi	r24, 0x30	; 48
    7da0:	90 e0       	ldi	r25, 0x00	; 0
    7da2:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <fputc>
    7da6:	9a 94       	dec	r9
    7da8:	f7 cf       	rjmp	.-18     	; 0x7d98 <vfprintf+0x372>
    7daa:	8a 94       	dec	r8
    7dac:	f3 01       	movw	r30, r6
    7dae:	e8 0d       	add	r30, r8
    7db0:	f1 1d       	adc	r31, r1
    7db2:	80 81       	ld	r24, Z
    7db4:	b6 01       	movw	r22, r12
    7db6:	90 e0       	ldi	r25, 0x00	; 0
    7db8:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <fputc>
    7dbc:	81 10       	cpse	r8, r1
    7dbe:	f5 cf       	rjmp	.-22     	; 0x7daa <vfprintf+0x384>
    7dc0:	22 20       	and	r2, r2
    7dc2:	09 f4       	brne	.+2      	; 0x7dc6 <vfprintf+0x3a0>
    7dc4:	42 ce       	rjmp	.-892    	; 0x7a4a <vfprintf+0x24>
    7dc6:	b6 01       	movw	r22, r12
    7dc8:	80 e2       	ldi	r24, 0x20	; 32
    7dca:	90 e0       	ldi	r25, 0x00	; 0
    7dcc:	0e 94 0a 3f 	call	0x7e14	; 0x7e14 <fputc>
    7dd0:	2a 94       	dec	r2
    7dd2:	f6 cf       	rjmp	.-20     	; 0x7dc0 <vfprintf+0x39a>
    7dd4:	f6 01       	movw	r30, r12
    7dd6:	86 81       	ldd	r24, Z+6	; 0x06
    7dd8:	97 81       	ldd	r25, Z+7	; 0x07
    7dda:	02 c0       	rjmp	.+4      	; 0x7de0 <vfprintf+0x3ba>
    7ddc:	8f ef       	ldi	r24, 0xFF	; 255
    7dde:	9f ef       	ldi	r25, 0xFF	; 255
    7de0:	2b 96       	adiw	r28, 0x0b	; 11
    7de2:	e2 e1       	ldi	r30, 0x12	; 18
    7de4:	0c 94 bd 3f 	jmp	0x7f7a	; 0x7f7a <__epilogue_restores__>

00007de8 <strnlen_P>:
    7de8:	fc 01       	movw	r30, r24
    7dea:	05 90       	lpm	r0, Z+
    7dec:	61 50       	subi	r22, 0x01	; 1
    7dee:	70 40       	sbci	r23, 0x00	; 0
    7df0:	01 10       	cpse	r0, r1
    7df2:	d8 f7       	brcc	.-10     	; 0x7dea <strnlen_P+0x2>
    7df4:	80 95       	com	r24
    7df6:	90 95       	com	r25
    7df8:	8e 0f       	add	r24, r30
    7dfa:	9f 1f       	adc	r25, r31
    7dfc:	08 95       	ret

00007dfe <strnlen>:
    7dfe:	fc 01       	movw	r30, r24
    7e00:	61 50       	subi	r22, 0x01	; 1
    7e02:	70 40       	sbci	r23, 0x00	; 0
    7e04:	01 90       	ld	r0, Z+
    7e06:	01 10       	cpse	r0, r1
    7e08:	d8 f7       	brcc	.-10     	; 0x7e00 <strnlen+0x2>
    7e0a:	80 95       	com	r24
    7e0c:	90 95       	com	r25
    7e0e:	8e 0f       	add	r24, r30
    7e10:	9f 1f       	adc	r25, r31
    7e12:	08 95       	ret

00007e14 <fputc>:
    7e14:	0f 93       	push	r16
    7e16:	1f 93       	push	r17
    7e18:	cf 93       	push	r28
    7e1a:	df 93       	push	r29
    7e1c:	fb 01       	movw	r30, r22
    7e1e:	23 81       	ldd	r18, Z+3	; 0x03
    7e20:	21 fd       	sbrc	r18, 1
    7e22:	03 c0       	rjmp	.+6      	; 0x7e2a <fputc+0x16>
    7e24:	8f ef       	ldi	r24, 0xFF	; 255
    7e26:	9f ef       	ldi	r25, 0xFF	; 255
    7e28:	2c c0       	rjmp	.+88     	; 0x7e82 <fputc+0x6e>
    7e2a:	22 ff       	sbrs	r18, 2
    7e2c:	16 c0       	rjmp	.+44     	; 0x7e5a <fputc+0x46>
    7e2e:	46 81       	ldd	r20, Z+6	; 0x06
    7e30:	57 81       	ldd	r21, Z+7	; 0x07
    7e32:	24 81       	ldd	r18, Z+4	; 0x04
    7e34:	35 81       	ldd	r19, Z+5	; 0x05
    7e36:	42 17       	cp	r20, r18
    7e38:	53 07       	cpc	r21, r19
    7e3a:	44 f4       	brge	.+16     	; 0x7e4c <fputc+0x38>
    7e3c:	a0 81       	ld	r26, Z
    7e3e:	b1 81       	ldd	r27, Z+1	; 0x01
    7e40:	9d 01       	movw	r18, r26
    7e42:	2f 5f       	subi	r18, 0xFF	; 255
    7e44:	3f 4f       	sbci	r19, 0xFF	; 255
    7e46:	20 83       	st	Z, r18
    7e48:	31 83       	std	Z+1, r19	; 0x01
    7e4a:	8c 93       	st	X, r24
    7e4c:	26 81       	ldd	r18, Z+6	; 0x06
    7e4e:	37 81       	ldd	r19, Z+7	; 0x07
    7e50:	2f 5f       	subi	r18, 0xFF	; 255
    7e52:	3f 4f       	sbci	r19, 0xFF	; 255
    7e54:	26 83       	std	Z+6, r18	; 0x06
    7e56:	37 83       	std	Z+7, r19	; 0x07
    7e58:	14 c0       	rjmp	.+40     	; 0x7e82 <fputc+0x6e>
    7e5a:	8b 01       	movw	r16, r22
    7e5c:	ec 01       	movw	r28, r24
    7e5e:	fb 01       	movw	r30, r22
    7e60:	00 84       	ldd	r0, Z+8	; 0x08
    7e62:	f1 85       	ldd	r31, Z+9	; 0x09
    7e64:	e0 2d       	mov	r30, r0
    7e66:	09 95       	icall
    7e68:	89 2b       	or	r24, r25
    7e6a:	e1 f6       	brne	.-72     	; 0x7e24 <fputc+0x10>
    7e6c:	d8 01       	movw	r26, r16
    7e6e:	16 96       	adiw	r26, 0x06	; 6
    7e70:	8d 91       	ld	r24, X+
    7e72:	9c 91       	ld	r25, X
    7e74:	17 97       	sbiw	r26, 0x07	; 7
    7e76:	01 96       	adiw	r24, 0x01	; 1
    7e78:	16 96       	adiw	r26, 0x06	; 6
    7e7a:	8d 93       	st	X+, r24
    7e7c:	9c 93       	st	X, r25
    7e7e:	17 97       	sbiw	r26, 0x07	; 7
    7e80:	ce 01       	movw	r24, r28
    7e82:	df 91       	pop	r29
    7e84:	cf 91       	pop	r28
    7e86:	1f 91       	pop	r17
    7e88:	0f 91       	pop	r16
    7e8a:	08 95       	ret

00007e8c <__ultoa_invert>:
    7e8c:	fa 01       	movw	r30, r20
    7e8e:	aa 27       	eor	r26, r26
    7e90:	28 30       	cpi	r18, 0x08	; 8
    7e92:	51 f1       	breq	.+84     	; 0x7ee8 <__ultoa_invert+0x5c>
    7e94:	20 31       	cpi	r18, 0x10	; 16
    7e96:	81 f1       	breq	.+96     	; 0x7ef8 <__ultoa_invert+0x6c>
    7e98:	e8 94       	clt
    7e9a:	6f 93       	push	r22
    7e9c:	6e 7f       	andi	r22, 0xFE	; 254
    7e9e:	6e 5f       	subi	r22, 0xFE	; 254
    7ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    7ea2:	8f 4f       	sbci	r24, 0xFF	; 255
    7ea4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ea6:	af 4f       	sbci	r26, 0xFF	; 255
    7ea8:	b1 e0       	ldi	r27, 0x01	; 1
    7eaa:	3e d0       	rcall	.+124    	; 0x7f28 <__ultoa_invert+0x9c>
    7eac:	b4 e0       	ldi	r27, 0x04	; 4
    7eae:	3c d0       	rcall	.+120    	; 0x7f28 <__ultoa_invert+0x9c>
    7eb0:	67 0f       	add	r22, r23
    7eb2:	78 1f       	adc	r23, r24
    7eb4:	89 1f       	adc	r24, r25
    7eb6:	9a 1f       	adc	r25, r26
    7eb8:	a1 1d       	adc	r26, r1
    7eba:	68 0f       	add	r22, r24
    7ebc:	79 1f       	adc	r23, r25
    7ebe:	8a 1f       	adc	r24, r26
    7ec0:	91 1d       	adc	r25, r1
    7ec2:	a1 1d       	adc	r26, r1
    7ec4:	6a 0f       	add	r22, r26
    7ec6:	71 1d       	adc	r23, r1
    7ec8:	81 1d       	adc	r24, r1
    7eca:	91 1d       	adc	r25, r1
    7ecc:	a1 1d       	adc	r26, r1
    7ece:	20 d0       	rcall	.+64     	; 0x7f10 <__ultoa_invert+0x84>
    7ed0:	09 f4       	brne	.+2      	; 0x7ed4 <__ultoa_invert+0x48>
    7ed2:	68 94       	set
    7ed4:	3f 91       	pop	r19
    7ed6:	2a e0       	ldi	r18, 0x0A	; 10
    7ed8:	26 9f       	mul	r18, r22
    7eda:	11 24       	eor	r1, r1
    7edc:	30 19       	sub	r19, r0
    7ede:	30 5d       	subi	r19, 0xD0	; 208
    7ee0:	31 93       	st	Z+, r19
    7ee2:	de f6       	brtc	.-74     	; 0x7e9a <__ultoa_invert+0xe>
    7ee4:	cf 01       	movw	r24, r30
    7ee6:	08 95       	ret
    7ee8:	46 2f       	mov	r20, r22
    7eea:	47 70       	andi	r20, 0x07	; 7
    7eec:	40 5d       	subi	r20, 0xD0	; 208
    7eee:	41 93       	st	Z+, r20
    7ef0:	b3 e0       	ldi	r27, 0x03	; 3
    7ef2:	0f d0       	rcall	.+30     	; 0x7f12 <__ultoa_invert+0x86>
    7ef4:	c9 f7       	brne	.-14     	; 0x7ee8 <__ultoa_invert+0x5c>
    7ef6:	f6 cf       	rjmp	.-20     	; 0x7ee4 <__ultoa_invert+0x58>
    7ef8:	46 2f       	mov	r20, r22
    7efa:	4f 70       	andi	r20, 0x0F	; 15
    7efc:	40 5d       	subi	r20, 0xD0	; 208
    7efe:	4a 33       	cpi	r20, 0x3A	; 58
    7f00:	18 f0       	brcs	.+6      	; 0x7f08 <__ultoa_invert+0x7c>
    7f02:	49 5d       	subi	r20, 0xD9	; 217
    7f04:	31 fd       	sbrc	r19, 1
    7f06:	40 52       	subi	r20, 0x20	; 32
    7f08:	41 93       	st	Z+, r20
    7f0a:	02 d0       	rcall	.+4      	; 0x7f10 <__ultoa_invert+0x84>
    7f0c:	a9 f7       	brne	.-22     	; 0x7ef8 <__ultoa_invert+0x6c>
    7f0e:	ea cf       	rjmp	.-44     	; 0x7ee4 <__ultoa_invert+0x58>
    7f10:	b4 e0       	ldi	r27, 0x04	; 4
    7f12:	a6 95       	lsr	r26
    7f14:	97 95       	ror	r25
    7f16:	87 95       	ror	r24
    7f18:	77 95       	ror	r23
    7f1a:	67 95       	ror	r22
    7f1c:	ba 95       	dec	r27
    7f1e:	c9 f7       	brne	.-14     	; 0x7f12 <__ultoa_invert+0x86>
    7f20:	00 97       	sbiw	r24, 0x00	; 0
    7f22:	61 05       	cpc	r22, r1
    7f24:	71 05       	cpc	r23, r1
    7f26:	08 95       	ret
    7f28:	9b 01       	movw	r18, r22
    7f2a:	ac 01       	movw	r20, r24
    7f2c:	0a 2e       	mov	r0, r26
    7f2e:	06 94       	lsr	r0
    7f30:	57 95       	ror	r21
    7f32:	47 95       	ror	r20
    7f34:	37 95       	ror	r19
    7f36:	27 95       	ror	r18
    7f38:	ba 95       	dec	r27
    7f3a:	c9 f7       	brne	.-14     	; 0x7f2e <__ultoa_invert+0xa2>
    7f3c:	62 0f       	add	r22, r18
    7f3e:	73 1f       	adc	r23, r19
    7f40:	84 1f       	adc	r24, r20
    7f42:	95 1f       	adc	r25, r21
    7f44:	a0 1d       	adc	r26, r0
    7f46:	08 95       	ret

00007f48 <__prologue_saves__>:
    7f48:	2f 92       	push	r2
    7f4a:	3f 92       	push	r3
    7f4c:	4f 92       	push	r4
    7f4e:	5f 92       	push	r5
    7f50:	6f 92       	push	r6
    7f52:	7f 92       	push	r7
    7f54:	8f 92       	push	r8
    7f56:	9f 92       	push	r9
    7f58:	af 92       	push	r10
    7f5a:	bf 92       	push	r11
    7f5c:	cf 92       	push	r12
    7f5e:	df 92       	push	r13
    7f60:	ef 92       	push	r14
    7f62:	ff 92       	push	r15
    7f64:	0f 93       	push	r16
    7f66:	1f 93       	push	r17
    7f68:	cf 93       	push	r28
    7f6a:	df 93       	push	r29
    7f6c:	cd b7       	in	r28, 0x3d	; 61
    7f6e:	de b7       	in	r29, 0x3e	; 62
    7f70:	ca 1b       	sub	r28, r26
    7f72:	db 0b       	sbc	r29, r27
    7f74:	cd bf       	out	0x3d, r28	; 61
    7f76:	de bf       	out	0x3e, r29	; 62
    7f78:	09 94       	ijmp

00007f7a <__epilogue_restores__>:
    7f7a:	2a 88       	ldd	r2, Y+18	; 0x12
    7f7c:	39 88       	ldd	r3, Y+17	; 0x11
    7f7e:	48 88       	ldd	r4, Y+16	; 0x10
    7f80:	5f 84       	ldd	r5, Y+15	; 0x0f
    7f82:	6e 84       	ldd	r6, Y+14	; 0x0e
    7f84:	7d 84       	ldd	r7, Y+13	; 0x0d
    7f86:	8c 84       	ldd	r8, Y+12	; 0x0c
    7f88:	9b 84       	ldd	r9, Y+11	; 0x0b
    7f8a:	aa 84       	ldd	r10, Y+10	; 0x0a
    7f8c:	b9 84       	ldd	r11, Y+9	; 0x09
    7f8e:	c8 84       	ldd	r12, Y+8	; 0x08
    7f90:	df 80       	ldd	r13, Y+7	; 0x07
    7f92:	ee 80       	ldd	r14, Y+6	; 0x06
    7f94:	fd 80       	ldd	r15, Y+5	; 0x05
    7f96:	0c 81       	ldd	r16, Y+4	; 0x04
    7f98:	1b 81       	ldd	r17, Y+3	; 0x03
    7f9a:	aa 81       	ldd	r26, Y+2	; 0x02
    7f9c:	b9 81       	ldd	r27, Y+1	; 0x01
    7f9e:	ce 0f       	add	r28, r30
    7fa0:	d1 1d       	adc	r29, r1
    7fa2:	cd bf       	out	0x3d, r28	; 61
    7fa4:	de bf       	out	0x3e, r29	; 62
    7fa6:	ed 01       	movw	r28, r26
    7fa8:	08 95       	ret

00007faa <_exit>:
    7faa:	f8 94       	cli

00007fac <__stop_program>:
    7fac:	ff cf       	rjmp	.-2      	; 0x7fac <__stop_program>
