
robowifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00802800  000046e6  0000479a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000452e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0000852e  0000452e  000045e2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000006e9  00802844  00802844  000047de  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000047de  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000483c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000950  00000000  00000000  00004880  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000131b1  00000000  00000000  000051d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004d63  00000000  00000000  00018381  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005ce0  00000000  00000000  0001d0e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000024cc  00000000  00000000  00022dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00005831  00000000  00000000  00025290  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c7a6  00000000  00000000  0002aac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000928  00000000  00000000  00037267  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__ctors_end>
       4:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       8:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       c:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__vector_3>
      10:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      14:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      18:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      1c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      20:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      24:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      28:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      2c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      30:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      34:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      38:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      3c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      40:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      44:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      48:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      4c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      50:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      54:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      58:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      5c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      60:	0c 94 66 05 	jmp	0xacc	; 0xacc <__vector_24>
      64:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      68:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      6c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      70:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      74:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      78:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      7c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      80:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      84:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      88:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      8c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      90:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      94:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      98:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      9c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      a0:	c0 0a       	sbc	r12, r16
      a2:	ba 0a       	sbc	r11, r26
      a4:	cc 0a       	sbc	r12, r28
      a6:	c6 0a       	sbc	r12, r22
      a8:	de 0a       	sbc	r13, r30
      aa:	d2 0a       	sbc	r13, r18
      ac:	d8 0a       	sbc	r13, r24
      ae:	7d 13       	cpse	r23, r29
      b0:	7d 13       	cpse	r23, r29
      b2:	8c 13       	cpse	r24, r28
      b4:	5f 13       	cpse	r21, r31
      b6:	6d 13       	cpse	r22, r29
      b8:	72 13       	cpse	r23, r18
      ba:	84 13       	cpse	r24, r20
      bc:	84 13       	cpse	r24, r20
      be:	9d 13       	cpse	r25, r29
      c0:	5a 13       	cpse	r21, r26
      c2:	c6 13       	cpse	r28, r22
      c4:	c6 13       	cpse	r28, r22
      c6:	c6 13       	cpse	r28, r22
      c8:	c6 13       	cpse	r28, r22
      ca:	77 13       	cpse	r23, r23

000000cc <__trampolines_end>:
      cc:	00 09       	sbc	r16, r0
      ce:	12 1b       	sub	r17, r18
      d0:	24 2d       	mov	r18, r4
      d2:	36 3f       	cpi	r19, 0xF6	; 246
      d4:	48 41       	sbci	r20, 0x18	; 24
      d6:	5a 53       	subi	r21, 0x3A	; 58
      d8:	6c 65       	ori	r22, 0x5C	; 92
      da:	7e 77       	andi	r23, 0x7E	; 126
      dc:	19 10       	cpse	r1, r9
      de:	0b 02       	muls	r16, r27
      e0:	3d 34       	cpi	r19, 0x4D	; 77
      e2:	2f 26       	eor	r2, r31
      e4:	51 58       	subi	r21, 0x81	; 129
      e6:	43 4a       	sbci	r20, 0xA3	; 163
      e8:	75 7c       	andi	r23, 0xC5	; 197
      ea:	67 6e       	ori	r22, 0xE7	; 231
      ec:	32 3b       	cpi	r19, 0xB2	; 178
      ee:	20 29       	or	r18, r0
      f0:	16 1f       	adc	r17, r22
      f2:	04 0d       	add	r16, r4
      f4:	7a 73       	andi	r23, 0x3A	; 58
      f6:	68 61       	ori	r22, 0x18	; 24
      f8:	5e 57       	subi	r21, 0x7E	; 126
      fa:	4c 45       	sbci	r20, 0x5C	; 92
      fc:	2b 22       	and	r2, r27
      fe:	39 30       	cpi	r19, 0x09	; 9
     100:	0f 06       	cpc	r0, r31
     102:	1d 14       	cp	r1, r13
     104:	63 6a       	ori	r22, 0xA3	; 163
     106:	71 78       	andi	r23, 0x81	; 129
     108:	47 4e       	sbci	r20, 0xE7	; 231
     10a:	55 5c       	subi	r21, 0xC5	; 197
     10c:	64 6d       	ori	r22, 0xD4	; 212
     10e:	76 7f       	andi	r23, 0xF6	; 246
     110:	40 49       	sbci	r20, 0x90	; 144
     112:	52 5b       	subi	r21, 0xB2	; 178
     114:	2c 25       	eor	r18, r12
     116:	3e 37       	cpi	r19, 0x7E	; 126
     118:	08 01       	movw	r0, r16
     11a:	1a 13       	cpse	r17, r26
     11c:	7d 74       	andi	r23, 0x4D	; 77
     11e:	6f 66       	ori	r22, 0x6F	; 111
     120:	59 50       	subi	r21, 0x09	; 9
     122:	4b 42       	sbci	r20, 0x2B	; 43
     124:	35 3c       	cpi	r19, 0xC5	; 197
     126:	27 2e       	mov	r2, r23
     128:	11 18       	sub	r1, r1
     12a:	03 0a       	sbc	r0, r19
     12c:	56 5f       	subi	r21, 0xF6	; 246
     12e:	44 4d       	sbci	r20, 0xD4	; 212
     130:	72 7b       	andi	r23, 0xB2	; 178
     132:	60 69       	ori	r22, 0x90	; 144
     134:	1e 17       	cp	r17, r30
     136:	0c 05       	cpc	r16, r12
     138:	3a 33       	cpi	r19, 0x3A	; 58
     13a:	28 21       	and	r18, r8
     13c:	4f 46       	sbci	r20, 0x6F	; 111
     13e:	5d 54       	subi	r21, 0x4D	; 77
     140:	6b 62       	ori	r22, 0x2B	; 43
     142:	79 70       	andi	r23, 0x09	; 9
     144:	07 0e       	add	r0, r23
     146:	15 1c       	adc	r1, r5
     148:	23 2a       	or	r2, r19
     14a:	31 38       	cpi	r19, 0x81	; 129
     14c:	41 48       	sbci	r20, 0x81	; 129
     14e:	53 5a       	subi	r21, 0xA3	; 163
     150:	65 6c       	ori	r22, 0xC5	; 197
     152:	77 7e       	andi	r23, 0xE7	; 231
     154:	09 00       	.word	0x0009	; ????
     156:	1b 12       	cpse	r1, r27
     158:	2d 24       	eor	r2, r13
     15a:	3f 36       	cpi	r19, 0x6F	; 111
     15c:	58 51       	subi	r21, 0x18	; 24
     15e:	4a 43       	sbci	r20, 0x3A	; 58
     160:	7c 75       	andi	r23, 0x5C	; 92
     162:	6e 67       	ori	r22, 0x7E	; 126
     164:	10 19       	sub	r17, r0
     166:	02 0b       	sbc	r16, r18
     168:	34 3d       	cpi	r19, 0xD4	; 212
     16a:	26 2f       	mov	r18, r22
     16c:	73 7a       	andi	r23, 0xA3	; 163
     16e:	61 68       	ori	r22, 0x81	; 129
     170:	57 5e       	subi	r21, 0xE7	; 231
     172:	45 4c       	sbci	r20, 0xC5	; 197
     174:	3b 32       	cpi	r19, 0x2B	; 43
     176:	29 20       	and	r2, r9
     178:	1f 16       	cp	r1, r31
     17a:	0d 04       	cpc	r0, r13
     17c:	6a 63       	ori	r22, 0x3A	; 58
     17e:	78 71       	andi	r23, 0x18	; 24
     180:	4e 47       	sbci	r20, 0x7E	; 126
     182:	5c 55       	subi	r21, 0x5C	; 92
     184:	22 2b       	or	r18, r18
     186:	30 39       	cpi	r19, 0x90	; 144
     188:	06 0f       	add	r16, r22
     18a:	14 1d       	adc	r17, r4
     18c:	25 2c       	mov	r2, r5
     18e:	37 3e       	cpi	r19, 0xE7	; 231
     190:	01 08       	sbc	r0, r1
     192:	13 1a       	sub	r1, r19
     194:	6d 64       	ori	r22, 0x4D	; 77
     196:	7f 76       	andi	r23, 0x6F	; 111
     198:	49 40       	sbci	r20, 0x09	; 9
     19a:	5b 52       	subi	r21, 0x2B	; 43
     19c:	3c 35       	cpi	r19, 0x5C	; 92
     19e:	2e 27       	eor	r18, r30
     1a0:	18 11       	cpse	r17, r8
     1a2:	0a 03       	fmul	r16, r18
     1a4:	74 7d       	andi	r23, 0xD4	; 212
     1a6:	66 6f       	ori	r22, 0xF6	; 246
     1a8:	50 59       	subi	r21, 0x90	; 144
     1aa:	42 4b       	sbci	r20, 0xB2	; 178
     1ac:	17 1e       	adc	r1, r23
     1ae:	05 0c       	add	r0, r5
     1b0:	33 3a       	cpi	r19, 0xA3	; 163
     1b2:	21 28       	or	r2, r1
     1b4:	5f 56       	subi	r21, 0x6F	; 111
     1b6:	4d 44       	sbci	r20, 0x4D	; 77
     1b8:	7b 72       	andi	r23, 0x2B	; 43
     1ba:	69 60       	ori	r22, 0x09	; 9
     1bc:	0e 07       	cpc	r16, r30
     1be:	1c 15       	cp	r17, r12
     1c0:	2a 23       	and	r18, r26
     1c2:	38 31       	cpi	r19, 0x18	; 24
     1c4:	46 4f       	sbci	r20, 0xF6	; 246
     1c6:	54 5d       	subi	r21, 0xD4	; 212
     1c8:	62 6b       	ori	r22, 0xB2	; 178
     1ca:	70 79       	andi	r23, 0x90	; 144

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	df e3       	ldi	r29, 0x3F	; 63
     1d6:	de bf       	out	0x3e, r29	; 62

000001d8 <__do_copy_data>:
     1d8:	18 e2       	ldi	r17, 0x28	; 40
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b8 e2       	ldi	r27, 0x28	; 40
     1de:	e6 ee       	ldi	r30, 0xE6	; 230
     1e0:	f6 e4       	ldi	r31, 0x46	; 70
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__do_copy_data+0x10>
     1e4:	05 90       	lpm	r0, Z+
     1e6:	0d 92       	st	X+, r0
     1e8:	a4 34       	cpi	r26, 0x44	; 68
     1ea:	b1 07       	cpc	r27, r17
     1ec:	d9 f7       	brne	.-10     	; 0x1e4 <__do_copy_data+0xc>

000001ee <__do_clear_bss>:
     1ee:	2f e2       	ldi	r18, 0x2F	; 47
     1f0:	a4 e4       	ldi	r26, 0x44	; 68
     1f2:	b8 e2       	ldi	r27, 0x28	; 40
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <.do_clear_bss_start>

000001f6 <.do_clear_bss_loop>:
     1f6:	1d 92       	st	X+, r1

000001f8 <.do_clear_bss_start>:
     1f8:	ad 32       	cpi	r26, 0x2D	; 45
     1fa:	b2 07       	cpc	r27, r18
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <.do_clear_bss_loop>
     1fe:	0e 94 1b 03 	call	0x636	; 0x636 <main>
     202:	0c 94 95 22 	jmp	0x452a	; 0x452a <_exit>

00000206 <__bad_interrupt>:
     206:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020a <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
	system_init();
     20a:	0e 94 0a 04 	call	0x814	; 0x814 <system_init>
     20e:	08 95       	ret

00000210 <motor_dir_port_init>:
		TCB1.CTRLA |= TCB_ENABLE_bm;
		
		/* Enable Pin Output and configure TCB in 8-bit PWM mode */
		TCB1.CTRLB |= TCB_CCMPEN_bm;
		TCB1.CTRLB |= TCB_CNTMODE_PWM8_gc;
		PORTMUX.TCBROUTEA |= PIN1_bm;
     210:	e0 e8       	ldi	r30, 0x80	; 128
     212:	f4 e0       	ldi	r31, 0x04	; 4
     214:	80 81       	ld	r24, Z
     216:	88 60       	ori	r24, 0x08	; 8
     218:	80 83       	st	Z, r24
     21a:	80 81       	ld	r24, Z
     21c:	84 60       	ori	r24, 0x04	; 4
     21e:	80 83       	st	Z, r24
     220:	84 81       	ldd	r24, Z+4	; 0x04
     222:	8b 7f       	andi	r24, 0xFB	; 251
     224:	84 83       	std	Z+4, r24	; 0x04
     226:	84 81       	ldd	r24, Z+4	; 0x04
     228:	88 60       	ori	r24, 0x08	; 8
     22a:	84 83       	std	Z+4, r24	; 0x04
     22c:	e0 ea       	ldi	r30, 0xA0	; 160
     22e:	f4 e0       	ldi	r31, 0x04	; 4
     230:	80 81       	ld	r24, Z
     232:	80 64       	ori	r24, 0x40	; 64
     234:	80 83       	st	Z, r24
     236:	80 81       	ld	r24, Z
     238:	80 61       	ori	r24, 0x10	; 16
     23a:	80 83       	st	Z, r24
     23c:	84 81       	ldd	r24, Z+4	; 0x04
     23e:	8f 7b       	andi	r24, 0xBF	; 191
     240:	84 83       	std	Z+4, r24	; 0x04
     242:	84 81       	ldd	r24, Z+4	; 0x04
     244:	80 61       	ori	r24, 0x10	; 16
     246:	84 83       	std	Z+4, r24	; 0x04
     248:	08 95       	ret

0000024a <motor_start_left_wheel>:
	
}

void motor_start_left_wheel(){
	
	TCB3.CTRLA &= ~PIN0_bm;  // disable TCB3
     24a:	e0 eb       	ldi	r30, 0xB0	; 176
     24c:	fa e0       	ldi	r31, 0x0A	; 10
     24e:	80 81       	ld	r24, Z
     250:	8e 7f       	andi	r24, 0xFE	; 254
     252:	80 83       	st	Z, r24
	TCB3.CCMPL = 0xFA;
     254:	8a ef       	ldi	r24, 0xFA	; 250
     256:	84 87       	std	Z+12, r24	; 0x0c
	TCB3.CCMPH = 0xC8; // change duty cycle
     258:	88 ec       	ldi	r24, 0xC8	; 200
     25a:	85 87       	std	Z+13, r24	; 0x0d
	TCB3.CNT = 0x00;
     25c:	12 86       	std	Z+10, r1	; 0x0a
     25e:	13 86       	std	Z+11, r1	; 0x0b
	TCB3.CTRLA |=  TCB_ENABLE_bm; // re-enable TCB3;
     260:	80 81       	ld	r24, Z
     262:	81 60       	ori	r24, 0x01	; 1
     264:	80 83       	st	Z, r24
	
	/* Start means always going forward */
	PORTE.OUT &= ~PIN2_bm;
     266:	e0 e8       	ldi	r30, 0x80	; 128
     268:	f4 e0       	ldi	r31, 0x04	; 4
     26a:	84 81       	ldd	r24, Z+4	; 0x04
     26c:	8b 7f       	andi	r24, 0xFB	; 251
     26e:	84 83       	std	Z+4, r24	; 0x04
	PORTE.OUT |= PIN3_bm;
     270:	84 81       	ldd	r24, Z+4	; 0x04
     272:	88 60       	ori	r24, 0x08	; 8
     274:	84 83       	std	Z+4, r24	; 0x04
     276:	08 95       	ret

00000278 <motor_stop_left_wheel>:
}


void motor_stop_left_wheel(){
	
	TCB3.CTRLA &= ~PIN0_bm;  // disable TCB3
     278:	e0 eb       	ldi	r30, 0xB0	; 176
     27a:	fa e0       	ldi	r31, 0x0A	; 10
     27c:	80 81       	ld	r24, Z
     27e:	8e 7f       	andi	r24, 0xFE	; 254
     280:	80 83       	st	Z, r24
	TCB3.CCMPL = 0xFA;
     282:	8a ef       	ldi	r24, 0xFA	; 250
     284:	84 87       	std	Z+12, r24	; 0x0c
	TCB3.CCMPH = 0x00; // change duty cycle
     286:	15 86       	std	Z+13, r1	; 0x0d
	TCB3.CNT = 0x00;
     288:	12 86       	std	Z+10, r1	; 0x0a
     28a:	13 86       	std	Z+11, r1	; 0x0b
	TCB3.CTRLA |= TCB_ENABLE_bm; // re-enable TCB3;
     28c:	80 81       	ld	r24, Z
     28e:	81 60       	ori	r24, 0x01	; 1
     290:	80 83       	st	Z, r24
     292:	08 95       	ret

00000294 <motor_start_right_wheel>:
}


void motor_start_right_wheel(){
	
	TCB1.CTRLA &= ~PIN0_bm;  // disable TCB3
     294:	e0 e9       	ldi	r30, 0x90	; 144
     296:	fa e0       	ldi	r31, 0x0A	; 10
     298:	80 81       	ld	r24, Z
     29a:	8e 7f       	andi	r24, 0xFE	; 254
     29c:	80 83       	st	Z, r24
	TCB1.CCMPL = 0xFA;
     29e:	8a ef       	ldi	r24, 0xFA	; 250
     2a0:	84 87       	std	Z+12, r24	; 0x0c
	TCB1.CCMPH = 0xC8; // change duty cycle
     2a2:	88 ec       	ldi	r24, 0xC8	; 200
     2a4:	85 87       	std	Z+13, r24	; 0x0d
	TCB1.CNT = 0x00;
     2a6:	12 86       	std	Z+10, r1	; 0x0a
     2a8:	13 86       	std	Z+11, r1	; 0x0b
	TCB1.CTRLA |= TCB_ENABLE_bm; // re-enable TCB3;
     2aa:	80 81       	ld	r24, Z
     2ac:	81 60       	ori	r24, 0x01	; 1
     2ae:	80 83       	st	Z, r24
	
	/* Start means always going forward */
	PORTF.OUT &= ~PIN6_bm;
     2b0:	e0 ea       	ldi	r30, 0xA0	; 160
     2b2:	f4 e0       	ldi	r31, 0x04	; 4
     2b4:	84 81       	ldd	r24, Z+4	; 0x04
     2b6:	8f 7b       	andi	r24, 0xBF	; 191
     2b8:	84 83       	std	Z+4, r24	; 0x04
	PORTF.OUT |= PIN4_bm;
     2ba:	84 81       	ldd	r24, Z+4	; 0x04
     2bc:	80 61       	ori	r24, 0x10	; 16
     2be:	84 83       	std	Z+4, r24	; 0x04
     2c0:	08 95       	ret

000002c2 <motor_stop_right_wheel>:
}


void motor_stop_right_wheel(){
	
	TCB1.CTRLA &= ~PIN0_bm;  // disable TCB3
     2c2:	e0 e9       	ldi	r30, 0x90	; 144
     2c4:	fa e0       	ldi	r31, 0x0A	; 10
     2c6:	80 81       	ld	r24, Z
     2c8:	8e 7f       	andi	r24, 0xFE	; 254
     2ca:	80 83       	st	Z, r24
	TCB1.CCMPL = 0xFA;
     2cc:	8a ef       	ldi	r24, 0xFA	; 250
     2ce:	84 87       	std	Z+12, r24	; 0x0c
	TCB1.CCMPH = 0x00; // change duty cycle
     2d0:	15 86       	std	Z+13, r1	; 0x0d
	TCB1.CNT = 0x00;
     2d2:	12 86       	std	Z+10, r1	; 0x0a
     2d4:	13 86       	std	Z+11, r1	; 0x0b
	TCB1.CTRLA |= TCB_ENABLE_bm; // re-enable TCB3;
     2d6:	80 81       	ld	r24, Z
     2d8:	81 60       	ori	r24, 0x01	; 1
     2da:	80 83       	st	Z, r24
     2dc:	08 95       	ret

000002de <motor_reverse_left_wheel>:
}

void motor_reverse_left_wheel(){
	
	PORTE.OUT ^= PIN3_bm;
     2de:	e0 e8       	ldi	r30, 0x80	; 128
     2e0:	f4 e0       	ldi	r31, 0x04	; 4
     2e2:	94 81       	ldd	r25, Z+4	; 0x04
     2e4:	88 e0       	ldi	r24, 0x08	; 8
     2e6:	89 27       	eor	r24, r25
     2e8:	84 83       	std	Z+4, r24	; 0x04
	PORTE.OUT ^= PIN2_bm;
     2ea:	94 81       	ldd	r25, Z+4	; 0x04
     2ec:	84 e0       	ldi	r24, 0x04	; 4
     2ee:	89 27       	eor	r24, r25
     2f0:	84 83       	std	Z+4, r24	; 0x04
     2f2:	08 95       	ret

000002f4 <motor_reverse_right_wheel>:
}

void motor_reverse_right_wheel(){
	
	PORTF.OUT ^= PIN6_bm;
     2f4:	e0 ea       	ldi	r30, 0xA0	; 160
     2f6:	f4 e0       	ldi	r31, 0x04	; 4
     2f8:	94 81       	ldd	r25, Z+4	; 0x04
     2fa:	80 e4       	ldi	r24, 0x40	; 64
     2fc:	89 27       	eor	r24, r25
     2fe:	84 83       	std	Z+4, r24	; 0x04
	PORTF.OUT ^= PIN4_bm;
     300:	94 81       	ldd	r25, Z+4	; 0x04
     302:	80 e1       	ldi	r24, 0x10	; 16
     304:	89 27       	eor	r24, r25
     306:	84 83       	std	Z+4, r24	; 0x04
     308:	08 95       	ret

0000030a <wifi_init>:

/*
 * \brief Initialize Wifi library
 */
void wifi_init(tstrWifiInitParam *params)
{
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	2e 97       	sbiw	r28, 0x0e	; 14
     318:	cd bf       	out	0x3d, r28	; 61
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	8c 01       	movw	r16, r24
	tstrWifiInitParam param;
	int8_t            ret;

//	set_winc_spi_descriptor(&WINC_SPI);
	/* Initialize the BSP. */
	nm_bsp_init();
     31e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <nm_bsp_init>
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
     322:	ce 01       	movw	r24, r28
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	2e e0       	ldi	r18, 0x0E	; 14
     328:	fc 01       	movw	r30, r24
     32a:	11 92       	st	Z+, r1
     32c:	2a 95       	dec	r18
     32e:	e9 f7       	brne	.-6      	; 0x32a <wifi_init+0x20>
	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = params->pfAppWifiCb;
     330:	f8 01       	movw	r30, r16
     332:	20 81       	ld	r18, Z
     334:	31 81       	ldd	r19, Z+1	; 0x01
     336:	29 83       	std	Y+1, r18	; 0x01
     338:	3a 83       	std	Y+2, r19	; 0x02
	ret               = m2m_wifi_init(&param);
     33a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <m2m_wifi_init>
	if (M2M_SUCCESS != ret) {
     33e:	81 11       	cpse	r24, r1
     340:	ff cf       	rjmp	.-2      	; 0x340 <wifi_init+0x36>





}
     342:	2e 96       	adiw	r28, 0x0e	; 14
     344:	cd bf       	out	0x3d, r28	; 61
     346:	de bf       	out	0x3e, r29	; 62
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	08 95       	ret

00000352 <usart_putchar_printf>:
 static FILE mystdout = FDEV_SETUP_STREAM(usart_putchar_printf, NULL, _FDEV_SETUP_WRITE);


int usart_putchar_printf(char var, FILE *stream){
	
	USART_1_write(var);
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 5e 05 	call	0xabc	; 0xabc <USART_1_write>
}
     358:	08 95       	ret

0000035a <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	eb 01       	movw	r28, r22
	switch (u8MsgType) {
     360:	8c 32       	cpi	r24, 0x2C	; 44
     362:	19 f0       	breq	.+6      	; 0x36a <wifi_cb+0x10>
     364:	82 33       	cpi	r24, 0x32	; 50
     366:	81 f0       	breq	.+32     	; 0x388 <wifi_cb+0x2e>
     368:	2d c0       	rjmp	.+90     	; 0x3c4 <wifi_cb+0x6a>
	case M2M_WIFI_RESP_CON_STATE_CHANGED: {
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
     36a:	88 81       	ld	r24, Y
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	19 f4       	brne	.+6      	; 0x376 <wifi_cb+0x1c>
			wifi_connected = 1;
     370:	80 93 f8 2d 	sts	0x2DF8, r24	; 0x802df8 <wifi_connected>
     374:	27 c0       	rjmp	.+78     	; 0x3c4 <wifi_cb+0x6a>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
     376:	81 11       	cpse	r24, r1
     378:	25 c0       	rjmp	.+74     	; 0x3c4 <wifi_cb+0x6a>
			wifi_connected = 0;
     37a:	10 92 f8 2d 	sts	0x2DF8, r1	; 0x802df8 <wifi_connected>
			printf("Station disconnected\r\n");
     37e:	8e e2       	ldi	r24, 0x2E	; 46
     380:	95 e8       	ldi	r25, 0x85	; 133
     382:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <puts>
     386:	1e c0       	rjmp	.+60     	; 0x3c4 <wifi_cb+0x6a>
		break;
	}

	case M2M_WIFI_REQ_DHCP_CONF: {
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		wifi_connected = 1; 
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	80 93 f8 2d 	sts	0x2DF8, r24	; 0x802df8 <wifi_connected>
		printf("Station connected\r\n");
     38e:	84 e4       	ldi	r24, 0x44	; 68
     390:	95 e8       	ldi	r25, 0x85	; 133
     392:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <puts>
		printf("Station IP is %u.%u.%u.%u\r\n",pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]); //pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
     396:	8b 81       	ldd	r24, Y+3	; 0x03
     398:	1f 92       	push	r1
     39a:	8f 93       	push	r24
     39c:	8a 81       	ldd	r24, Y+2	; 0x02
     39e:	1f 92       	push	r1
     3a0:	8f 93       	push	r24
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	1f 92       	push	r1
     3a6:	8f 93       	push	r24
     3a8:	88 81       	ld	r24, Y
     3aa:	1f 92       	push	r1
     3ac:	8f 93       	push	r24
     3ae:	87 e5       	ldi	r24, 0x57	; 87
     3b0:	95 e8       	ldi	r25, 0x85	; 133
     3b2:	9f 93       	push	r25
     3b4:	8f 93       	push	r24
     3b6:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <printf>
		
		break;
     3ba:	8d b7       	in	r24, 0x3d	; 61
     3bc:	9e b7       	in	r25, 0x3e	; 62
     3be:	0a 96       	adiw	r24, 0x0a	; 10
     3c0:	8d bf       	out	0x3d, r24	; 61
     3c2:	9e bf       	out	0x3e, r25	; 62

	default: {
		break;
	}
	}
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <get_command>:

int index;
volatile char data_response;
char order[10];

void get_command(char *str,tstrSocketRecvMsg *pCommand){
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	eb 01       	movw	r28, r22
     3d0:	e0 e8       	ldi	r30, 0x80	; 128
     3d2:	fe e2       	ldi	r31, 0x2E	; 46
     3d4:	2a e8       	ldi	r18, 0x8A	; 138
     3d6:	3e e2       	ldi	r19, 0x2E	; 46



int i=0;
for(i=0;i<sizeof(order);i++){
	order[i]=0x00;
     3d8:	11 92       	st	Z+, r1
void get_command(char *str,tstrSocketRecvMsg *pCommand){



int i=0;
for(i=0;i<sizeof(order);i++){
     3da:	2e 17       	cp	r18, r30
     3dc:	3f 07       	cpc	r19, r31
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <get_command+0xe>
	order[i]=0x00;
}
i=0;
while(*(pCommand->pu8Buffer+i) != 0x0D){
     3e0:	e8 81       	ld	r30, Y
     3e2:	f9 81       	ldd	r31, Y+1	; 0x01
     3e4:	20 81       	ld	r18, Z
     3e6:	2d 30       	cpi	r18, 0x0D	; 13
     3e8:	69 f0       	breq	.+26     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3ea:	a8 2f       	mov	r26, r24
     3ec:	b9 2f       	mov	r27, r25
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
 	
	*(str+i)=*(pCommand->pu8Buffer+i);
     3f2:	2d 93       	st	X+, r18
	i++;
     3f4:	01 96       	adiw	r24, 0x01	; 1
int i=0;
for(i=0;i<sizeof(order);i++){
	order[i]=0x00;
}
i=0;
while(*(pCommand->pu8Buffer+i) != 0x0D){
     3f6:	e8 81       	ld	r30, Y
     3f8:	f9 81       	ldd	r31, Y+1	; 0x01
     3fa:	e8 0f       	add	r30, r24
     3fc:	f9 1f       	adc	r31, r25
     3fe:	20 81       	ld	r18, Z
     400:	2d 30       	cpi	r18, 0x0D	; 13
     402:	b9 f7       	brne	.-18     	; 0x3f2 <get_command+0x28>
	*(str+i)=*(pCommand->pu8Buffer+i);
	i++;
	
}

}
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	ea 01       	movw	r28, r20
	switch (u8Msg) {
     414:	64 30       	cpi	r22, 0x04	; 4
     416:	09 f4       	brne	.+2      	; 0x41a <socket_cb+0x10>
     418:	46 c0       	rjmp	.+140    	; 0x4a6 <socket_cb+0x9c>
     41a:	28 f4       	brcc	.+10     	; 0x426 <socket_cb+0x1c>
     41c:	61 30       	cpi	r22, 0x01	; 1
     41e:	51 f0       	breq	.+20     	; 0x434 <socket_cb+0x2a>
     420:	62 30       	cpi	r22, 0x02	; 2
     422:	19 f1       	breq	.+70     	; 0x46a <socket_cb+0x60>
     424:	03 c1       	rjmp	.+518    	; 0x62c <socket_cb+0x222>
     426:	66 30       	cpi	r22, 0x06	; 6
     428:	09 f4       	brne	.+2      	; 0x42c <socket_cb+0x22>
     42a:	78 c0       	rjmp	.+240    	; 0x51c <socket_cb+0x112>
     42c:	67 30       	cpi	r22, 0x07	; 7
     42e:	09 f4       	brne	.+2      	; 0x432 <socket_cb+0x28>
     430:	61 c0       	rjmp	.+194    	; 0x4f4 <socket_cb+0xea>
     432:	fc c0       	rjmp	.+504    	; 0x62c <socket_cb+0x222>
	/* Socket bind */
	case SOCKET_MSG_BIND: {
		tstrSocketBindMsg *pstrBind = (tstrSocketBindMsg *)pvMsg;
		if (pstrBind && pstrBind->status == 0) {
     434:	20 97       	sbiw	r28, 0x00	; 0
     436:	69 f0       	breq	.+26     	; 0x452 <socket_cb+0x48>
     438:	88 81       	ld	r24, Y
     43a:	81 11       	cpse	r24, r1
     43c:	0a c0       	rjmp	.+20     	; 0x452 <socket_cb+0x48>
			printf("socket_cb: bind success!\r\n");
     43e:	83 e7       	ldi	r24, 0x73	; 115
     440:	95 e8       	ldi	r25, 0x85	; 133
     442:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <puts>
			listen(tcp_server_socket, 0);
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <tcp_server_socket>
     44c:	0e 94 a8 1c 	call	0x3950	; 0x3950 <listen>
     450:	ed c0       	rjmp	.+474    	; 0x62c <socket_cb+0x222>
		} else {
			printf("socket_cb: bind error!\r\n");
     452:	8d e8       	ldi	r24, 0x8D	; 141
     454:	95 e8       	ldi	r25, 0x85	; 133
     456:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <puts>
			close(tcp_server_socket);
     45a:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <tcp_server_socket>
     45e:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <close>
			tcp_server_socket = -1;
     462:	8f ef       	ldi	r24, 0xFF	; 255
     464:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <tcp_server_socket>
     468:	e1 c0       	rjmp	.+450    	; 0x62c <socket_cb+0x222>
	} break;

	/* Socket listen */
	case SOCKET_MSG_LISTEN: {
		tstrSocketListenMsg *pstrListen = (tstrSocketListenMsg *)pvMsg;
		if (pstrListen && pstrListen->status == 0) {
     46a:	20 97       	sbiw	r28, 0x00	; 0
     46c:	81 f0       	breq	.+32     	; 0x48e <socket_cb+0x84>
     46e:	88 81       	ld	r24, Y
     470:	81 11       	cpse	r24, r1
     472:	0d c0       	rjmp	.+26     	; 0x48e <socket_cb+0x84>
			printf("socket_cb: listen success!\r\n");
     474:	85 ea       	ldi	r24, 0xA5	; 165
     476:	95 e8       	ldi	r25, 0x85	; 133
     478:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <puts>
			accept(tcp_server_socket, NULL, NULL);
     47c:	40 e0       	ldi	r20, 0x00	; 0
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <tcp_server_socket>
     488:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <accept>
     48c:	cf c0       	rjmp	.+414    	; 0x62c <socket_cb+0x222>
		} else {
			printf("socket_cb: listen error!\r\n");
     48e:	81 ec       	ldi	r24, 0xC1	; 193
     490:	95 e8       	ldi	r25, 0x85	; 133
     492:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <puts>
			close(tcp_server_socket);
     496:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <tcp_server_socket>
     49a:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <close>
			tcp_server_socket = -1;
     49e:	8f ef       	ldi	r24, 0xFF	; 255
     4a0:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <tcp_server_socket>
     4a4:	c3 c0       	rjmp	.+390    	; 0x62c <socket_cb+0x222>
	} break;

	/* Connect accept */
	case SOCKET_MSG_ACCEPT: {
		tstrSocketAcceptMsg *pstrAccept = (tstrSocketAcceptMsg *)pvMsg;
		if (pstrAccept) {
     4a6:	20 97       	sbiw	r28, 0x00	; 0
     4a8:	c9 f0       	breq	.+50     	; 0x4dc <socket_cb+0xd2>
			printf("socket_cb: accept success!\r\n");
     4aa:	8b ed       	ldi	r24, 0xDB	; 219
     4ac:	95 e8       	ldi	r25, 0x85	; 133
     4ae:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <puts>
			accept(tcp_server_socket, NULL, NULL);
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <tcp_server_socket>
     4be:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <accept>
			tcp_client_socket = pstrAccept->sock;
     4c2:	88 81       	ld	r24, Y
     4c4:	80 93 28 28 	sts	0x2828, r24	; 0x802828 <tcp_client_socket>
			recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
     4c8:	00 e0       	ldi	r16, 0x00	; 0
     4ca:	10 e0       	ldi	r17, 0x00	; 0
     4cc:	98 01       	movw	r18, r16
     4ce:	44 eb       	ldi	r20, 0xB4	; 180
     4d0:	55 e0       	ldi	r21, 0x05	; 5
     4d2:	64 e4       	ldi	r22, 0x44	; 68
     4d4:	78 e2       	ldi	r23, 0x28	; 40
     4d6:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <recv>
     4da:	a8 c0       	rjmp	.+336    	; 0x62c <socket_cb+0x222>
		} else {
			printf("socket_cb: accept error!\r\n");
     4dc:	87 ef       	ldi	r24, 0xF7	; 247
     4de:	95 e8       	ldi	r25, 0x85	; 133
     4e0:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <puts>
			close(tcp_server_socket);
     4e4:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <tcp_server_socket>
     4e8:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <close>
			tcp_server_socket = -1;
     4ec:	8f ef       	ldi	r24, 0xFF	; 255
     4ee:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <tcp_server_socket>
     4f2:	9c c0       	rjmp	.+312    	; 0x62c <socket_cb+0x222>

	/* Message send */

	case SOCKET_MSG_SEND: {
//  		printf("socket_cb: send success!\r\n");
 		recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
     4f4:	00 e0       	ldi	r16, 0x00	; 0
     4f6:	10 e0       	ldi	r17, 0x00	; 0
     4f8:	98 01       	movw	r18, r16
     4fa:	44 eb       	ldi	r20, 0xB4	; 180
     4fc:	55 e0       	ldi	r21, 0x05	; 5
     4fe:	64 e4       	ldi	r22, 0x44	; 68
     500:	78 e2       	ldi	r23, 0x28	; 40
     502:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <tcp_client_socket>
     506:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <recv>
		 printf("TCP Server Test Complete!\r\n");
     50a:	81 e1       	ldi	r24, 0x11	; 17
     50c:	96 e8       	ldi	r25, 0x86	; 134
     50e:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <puts>
 		printf("close socket\n");
     512:	8c e2       	ldi	r24, 0x2C	; 44
     514:	96 e8       	ldi	r25, 0x86	; 134
     516:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <puts>
 	
 	} break;
     51a:	88 c0       	rjmp	.+272    	; 0x62c <socket_cb+0x222>


	/* Message receive */
	case SOCKET_MSG_RECV: {
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
		if (pstrRecv && pstrRecv->s16BufferSize > 0) {
     51c:	20 97       	sbiw	r28, 0x00	; 0
     51e:	09 f4       	brne	.+2      	; 0x522 <socket_cb+0x118>
     520:	7a c0       	rjmp	.+244    	; 0x616 <socket_cb+0x20c>
     522:	8a 81       	ldd	r24, Y+2	; 0x02
     524:	9b 81       	ldd	r25, Y+3	; 0x03
     526:	18 16       	cp	r1, r24
     528:	19 06       	cpc	r1, r25
     52a:	0c f0       	brlt	.+2      	; 0x52e <socket_cb+0x124>
     52c:	74 c0       	rjmp	.+232    	; 0x616 <socket_cb+0x20c>
			printf("socket_cb: recv success!\r\n");
     52e:	89 e3       	ldi	r24, 0x39	; 57
     530:	96 e8       	ldi	r25, 0x86	; 134
     532:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <puts>
			
			get_command(order, pstrRecv);
     536:	be 01       	movw	r22, r28
     538:	80 e8       	ldi	r24, 0x80	; 128
     53a:	9e e2       	ldi	r25, 0x2E	; 46
     53c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <get_command>
			if(strcmp(order,"rotate")==0){		
     540:	63 e5       	ldi	r22, 0x53	; 83
     542:	76 e8       	ldi	r23, 0x86	; 134
     544:	80 e8       	ldi	r24, 0x80	; 128
     546:	9e e2       	ldi	r25, 0x2E	; 46
     548:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <strcmp>
     54c:	89 2b       	or	r24, r25
     54e:	71 f4       	brne	.+28     	; 0x56c <socket_cb+0x162>
				motor_start_left_wheel();
     550:	0e 94 25 01 	call	0x24a	; 0x24a <motor_start_left_wheel>
				motor_start_right_wheel();
     554:	0e 94 4a 01 	call	0x294	; 0x294 <motor_start_right_wheel>
				motor_reverse_left_wheel();
     558:	0e 94 6f 01 	call	0x2de	; 0x2de <motor_reverse_left_wheel>
				printf("rotating !!");
     55c:	8a e5       	ldi	r24, 0x5A	; 90
     55e:	96 e8       	ldi	r25, 0x86	; 134
     560:	9f 93       	push	r25
     562:	8f 93       	push	r24
     564:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <printf>
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
			}
			if(strcmp(order,"forward")==0){
     56c:	66 e6       	ldi	r22, 0x66	; 102
     56e:	76 e8       	ldi	r23, 0x86	; 134
     570:	80 e8       	ldi	r24, 0x80	; 128
     572:	9e e2       	ldi	r25, 0x2E	; 46
     574:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <strcmp>
     578:	89 2b       	or	r24, r25
     57a:	21 f4       	brne	.+8      	; 0x584 <socket_cb+0x17a>
				motor_start_left_wheel();
     57c:	0e 94 25 01 	call	0x24a	; 0x24a <motor_start_left_wheel>
				motor_start_right_wheel();
     580:	0e 94 4a 01 	call	0x294	; 0x294 <motor_start_right_wheel>
				
			}
			if(strcmp(order,"backward")==0){
     584:	6e e6       	ldi	r22, 0x6E	; 110
     586:	76 e8       	ldi	r23, 0x86	; 134
     588:	80 e8       	ldi	r24, 0x80	; 128
     58a:	9e e2       	ldi	r25, 0x2E	; 46
     58c:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <strcmp>
     590:	89 2b       	or	r24, r25
     592:	41 f4       	brne	.+16     	; 0x5a4 <socket_cb+0x19a>
				motor_start_left_wheel();
     594:	0e 94 25 01 	call	0x24a	; 0x24a <motor_start_left_wheel>
				motor_start_right_wheel();
     598:	0e 94 4a 01 	call	0x294	; 0x294 <motor_start_right_wheel>
				motor_reverse_left_wheel();
     59c:	0e 94 6f 01 	call	0x2de	; 0x2de <motor_reverse_left_wheel>
				motor_reverse_right_wheel();
     5a0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <motor_reverse_right_wheel>
				
				
			}
			if(strcmp(order,"stop")==0){
     5a4:	67 e7       	ldi	r22, 0x77	; 119
     5a6:	76 e8       	ldi	r23, 0x86	; 134
     5a8:	80 e8       	ldi	r24, 0x80	; 128
     5aa:	9e e2       	ldi	r25, 0x2E	; 46
     5ac:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <strcmp>
     5b0:	89 2b       	or	r24, r25
     5b2:	21 f4       	brne	.+8      	; 0x5bc <socket_cb+0x1b2>
				motor_stop_left_wheel();
     5b4:	0e 94 3c 01 	call	0x278	; 0x278 <motor_stop_left_wheel>
				motor_stop_right_wheel();
     5b8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <motor_stop_right_wheel>
			}
					
				if(strcmp(order,"close")==0){
     5bc:	6c e7       	ldi	r22, 0x7C	; 124
     5be:	76 e8       	ldi	r23, 0x86	; 134
     5c0:	80 e8       	ldi	r24, 0x80	; 128
     5c2:	9e e2       	ldi	r25, 0x2E	; 46
     5c4:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <strcmp>
     5c8:	89 2b       	or	r24, r25
     5ca:	61 f4       	brne	.+24     	; 0x5e4 <socket_cb+0x1da>
					motor_stop_left_wheel();
     5cc:	0e 94 3c 01 	call	0x278	; 0x278 <motor_stop_left_wheel>
					motor_stop_right_wheel();
     5d0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <motor_stop_right_wheel>
					close(tcp_client_socket);
     5d4:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <tcp_client_socket>
     5d8:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <close>
					close(tcp_server_socket);
     5dc:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <tcp_server_socket>
     5e0:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <close>
				}
			
			printf("%s \n \r ",order);
     5e4:	80 e8       	ldi	r24, 0x80	; 128
     5e6:	9e e2       	ldi	r25, 0x2E	; 46
     5e8:	9f 93       	push	r25
     5ea:	8f 93       	push	r24
     5ec:	82 e8       	ldi	r24, 0x82	; 130
     5ee:	96 e8       	ldi	r25, 0x86	; 134
     5f0:	9f 93       	push	r25
     5f2:	8f 93       	push	r24
     5f4:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <printf>
			
			send(tcp_client_socket, &msg_wifi_product, sizeof(msg_wifi_product), 0);
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	48 e2       	ldi	r20, 0x28	; 40
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	78 e2       	ldi	r23, 0x28	; 40
     604:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <tcp_client_socket>
     608:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <send>
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0b c0       	rjmp	.+22     	; 0x62c <socket_cb+0x222>
		
		} else {
			printf("socket_cb: recv error!\r\n");
     616:	8a e8       	ldi	r24, 0x8A	; 138
     618:	96 e8       	ldi	r25, 0x86	; 134
     61a:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <puts>
			close(tcp_server_socket);
     61e:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <tcp_server_socket>
     622:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <close>
			tcp_server_socket = -1;
     626:	8f ef       	ldi	r24, 0xFF	; 255
     628:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <tcp_server_socket>
	break;

	default:
		break;
	}
}
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	08 95       	ret

00000636 <main>:





int main(void){
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	c6 5a       	subi	r28, 0xA6	; 166
     640:	d1 09       	sbc	r29, r1
     642:	cd bf       	out	0x3d, r28	; 61
     644:	de bf       	out	0x3e, r29	; 62
	tstrM2MAPConfig   strM2MAPConfig;
	int8_t            ret = 0;
	struct sockaddr_in addr;
	
	// Redirect stream to Tera Term
	stdout = &mystdout;
     646:	8a e2       	ldi	r24, 0x2A	; 42
     648:	98 e2       	ldi	r25, 0x28	; 40
     64a:	80 93 29 2f 	sts	0x2F29, r24	; 0x802f29 <__iob+0x2>
     64e:	90 93 2a 2f 	sts	0x2F2A, r25	; 0x802f2a <__iob+0x3>
// 	/* Initializes MCU, drivers and middleware */
	
	atmel_start_init();
     652:	0e 94 05 01 	call	0x20a	; 0x20a <atmel_start_init>
 	motor_dir_port_init();
     656:	0e 94 08 01 	call	0x210	; 0x210 <motor_dir_port_init>
 	//LEFT_WHEEL_TCB3_PWM_init();
	//RIGHT_WHEEL_TCB1_PWM_init();
 	
 	
      sei();
     65a:	78 94       	sei
 
 	/* Initialize BSP */
 	nm_bsp_init();
     65c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <nm_bsp_init>
 
 
 	/* Initialize socket address structure */
 	addr.sin_family = AF_INET;
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	c9 56       	subi	r28, 0x69	; 105
     666:	df 4f       	sbci	r29, 0xFF	; 255
     668:	88 83       	st	Y, r24
     66a:	99 83       	std	Y+1, r25	; 0x01
     66c:	c7 59       	subi	r28, 0x97	; 151
     66e:	d0 40       	sbci	r29, 0x00	; 0
 	addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
     670:	8a e1       	ldi	r24, 0x1A	; 26
     672:	9a e0       	ldi	r25, 0x0A	; 10
     674:	c7 56       	subi	r28, 0x67	; 103
     676:	df 4f       	sbci	r29, 0xFF	; 255
     678:	88 83       	st	Y, r24
     67a:	99 83       	std	Y+1, r25	; 0x01
     67c:	c9 59       	subi	r28, 0x99	; 153
     67e:	d0 40       	sbci	r29, 0x00	; 0
	addr.sin_addr.s_addr = _htonl(MAIN_WIFI_M2M_SERVER_IP);
     680:	8f ef       	ldi	r24, 0xFF	; 255
     682:	9f ef       	ldi	r25, 0xFF	; 255
     684:	dc 01       	movw	r26, r24
     686:	c5 56       	subi	r28, 0x65	; 101
     688:	df 4f       	sbci	r29, 0xFF	; 255
     68a:	88 83       	st	Y, r24
     68c:	99 83       	std	Y+1, r25	; 0x01
     68e:	aa 83       	std	Y+2, r26	; 0x02
     690:	bb 83       	std	Y+3, r27	; 0x03
     692:	cb 59       	subi	r28, 0x9B	; 155
     694:	d0 40       	sbci	r29, 0x00	; 0




	/* Initialize Wi-Fi parameters structure. */
 	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
     696:	ce 01       	movw	r24, r28
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	2e e0       	ldi	r18, 0x0E	; 14
     69c:	fc 01       	movw	r30, r24
     69e:	11 92       	st	Z+, r1
     6a0:	2a 95       	dec	r18
     6a2:	e9 f7       	brne	.-6      	; 0x69e <main+0x68>
 
 	/* Initialize Wi-Fi driver with data and status callbacks. */
 	param.pfAppWifiCb = wifi_cb;
     6a4:	2d ea       	ldi	r18, 0xAD	; 173
     6a6:	31 e0       	ldi	r19, 0x01	; 1
     6a8:	29 83       	std	Y+1, r18	; 0x01
     6aa:	3a 83       	std	Y+2, r19	; 0x02
 	wifi_init(&param);
     6ac:	0e 94 85 01 	call	0x30a	; 0x30a <wifi_init>



	/* Initialize socket module */
	socketInit();
     6b0:	0e 94 0d 1b 	call	0x361a	; 0x361a <socketInit>
	registerSocketCallback(socket_cb, NULL);
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	85 e0       	ldi	r24, 0x05	; 5
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	0e 94 27 1b 	call	0x364e	; 0x364e <registerSocketCallback>


	/* Initialize AP mode parameters structure with SSID, channel and OPEN security type. */
	memset(&strM2MAPConfig, 0x00, sizeof(tstrM2MAPConfig));
     6c0:	de 01       	movw	r26, r28
     6c2:	1f 96       	adiw	r26, 0x0f	; 15
     6c4:	88 e8       	ldi	r24, 0x88	; 136
     6c6:	fd 01       	movw	r30, r26
     6c8:	11 92       	st	Z+, r1
     6ca:	8a 95       	dec	r24
     6cc:	e9 f7       	brne	.-6      	; 0x6c8 <main+0x92>
	strcpy((char *)&strM2MAPConfig.au8SSID, MAIN_WLAN_SSID);
     6ce:	89 e0       	ldi	r24, 0x09	; 9
     6d0:	e2 ea       	ldi	r30, 0xA2	; 162
     6d2:	f6 e8       	ldi	r31, 0x86	; 134
     6d4:	01 90       	ld	r0, Z+
     6d6:	0d 92       	st	X+, r0
     6d8:	8a 95       	dec	r24
     6da:	e1 f7       	brne	.-8      	; 0x6d4 <main+0x9e>
	strM2MAPConfig.u8ListenChannel = MAIN_WLAN_CHANNEL;
     6dc:	86 e0       	ldi	r24, 0x06	; 6
     6de:	88 ab       	std	Y+48, r24	; 0x30
	strM2MAPConfig.u8SecType       = MAIN_WLAN_AUTH;
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	2f 96       	adiw	r28, 0x0f	; 15
     6e4:	8f af       	std	Y+63, r24	; 0x3f
     6e6:	2f 97       	sbiw	r28, 0x0f	; 15

	strM2MAPConfig.au8DHCPServerIP[0] = 192;
     6e8:	80 ec       	ldi	r24, 0xC0	; 192
     6ea:	61 96       	adiw	r28, 0x11	; 17
     6ec:	8f af       	std	Y+63, r24	; 0x3f
     6ee:	61 97       	sbiw	r28, 0x11	; 17
	strM2MAPConfig.au8DHCPServerIP[1] = 168;
     6f0:	88 ea       	ldi	r24, 0xA8	; 168
     6f2:	62 96       	adiw	r28, 0x12	; 18
     6f4:	8f af       	std	Y+63, r24	; 0x3f
     6f6:	62 97       	sbiw	r28, 0x12	; 18
	strM2MAPConfig.au8DHCPServerIP[2] = 0;
	strM2MAPConfig.au8DHCPServerIP[3] = 1;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	64 96       	adiw	r28, 0x14	; 20
     6fc:	8f af       	std	Y+63, r24	; 0x3f
     6fe:	64 97       	sbiw	r28, 0x14	; 20

// 	printf("AP mode started. You can connect to %s.\r\n", (char *)MAIN_WLAN_SSID);


/* Connect to router. */
	m2m_wifi_connect(
     700:	0f ef       	ldi	r16, 0xFF	; 255
     702:	10 e0       	ldi	r17, 0x00	; 0
     704:	2b ea       	ldi	r18, 0xAB	; 171
     706:	36 e8       	ldi	r19, 0x86	; 134
     708:	42 e0       	ldi	r20, 0x02	; 2
     70a:	69 e0       	ldi	r22, 0x09	; 9
     70c:	82 ea       	ldi	r24, 0xA2	; 162
     70e:	96 e8       	ldi	r25, 0x86	; 134
     710:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <m2m_wifi_connect>
     714:	1d c0       	rjmp	.+58     	; 0x750 <main+0x11a>
	/* Handle pending events from network controller. */
	
	
	while (m2m_wifi_handle_events(NULL) == M2M_SUCCESS) {
		
		if (wifi_connected == M2M_WIFI_CONNECTED) {
     716:	80 91 f8 2d 	lds	r24, 0x2DF8	; 0x802df8 <wifi_connected>
     71a:	81 30       	cpi	r24, 0x01	; 1
     71c:	c9 f4       	brne	.+50     	; 0x750 <main+0x11a>
			
			if (tcp_server_socket < 0) {
     71e:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <tcp_server_socket>
     722:	88 23       	and	r24, r24
     724:	ac f4       	brge	.+42     	; 0x750 <main+0x11a>
				/* Open TCP server socket */
				if ((tcp_server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 30 1b 	call	0x3660	; 0x3660 <socket>
     732:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <tcp_server_socket>
     736:	88 23       	and	r24, r24
     738:	2c f4       	brge	.+10     	; 0x744 <main+0x10e>
					printf("main: failed to create TCP server socket error!\r\n");
     73a:	85 eb       	ldi	r24, 0xB5	; 181
     73c:	96 e8       	ldi	r25, 0x86	; 134
     73e:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <puts>
					
					continue;
     742:	06 c0       	rjmp	.+12     	; 0x750 <main+0x11a>
				}

				/* Bind service*/
				bind(tcp_server_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
     744:	40 e1       	ldi	r20, 0x10	; 16
     746:	be 01       	movw	r22, r28
     748:	69 56       	subi	r22, 0x69	; 105
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	0e 94 32 1c 	call	0x3864	; 0x3864 <bind>
		//PORTB.OUT ^= PIN5_bm;
	//_delay_ms(1000);	
	/* Handle pending events from network controller. */
	
	
	while (m2m_wifi_handle_events(NULL) == M2M_SUCCESS) {
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	0e 94 b8 0c 	call	0x1970	; 0x1970 <m2m_wifi_handle_events>
     758:	88 23       	and	r24, r24
     75a:	e9 f2       	breq	.-70     	; 0x716 <main+0xe0>
     75c:	f9 cf       	rjmp	.-14     	; 0x750 <main+0x11a>

0000075e <BOD_init>:
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	08 95       	ret

00000762 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     762:	41 e0       	ldi	r20, 0x01	; 1
     764:	68 ed       	ldi	r22, 0xD8	; 216
     766:	81 e6       	ldi	r24, 0x61	; 97
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 3d 04 	call	0x87a	; 0x87a <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	08 95       	ret

00000772 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	08 95       	ret

00000776 <mcu_init>:
	// Disable digital input buffer
	PD6_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD6_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
     776:	e0 e1       	ldi	r30, 0x10	; 16
     778:	f4 e0       	ldi	r31, 0x04	; 4
     77a:	80 81       	ld	r24, Z
     77c:	88 60       	ori	r24, 0x08	; 8
     77e:	81 93       	st	Z+, r24
     780:	e8 31       	cpi	r30, 0x18	; 24
     782:	84 e0       	ldi	r24, 0x04	; 4
     784:	f8 07       	cpc	r31, r24
     786:	c9 f7       	brne	.-14     	; 0x77a <mcu_init+0x4>
     788:	e0 e3       	ldi	r30, 0x30	; 48
     78a:	f4 e0       	ldi	r31, 0x04	; 4
     78c:	80 81       	ld	r24, Z
     78e:	88 60       	ori	r24, 0x08	; 8
     790:	81 93       	st	Z+, r24
     792:	e8 33       	cpi	r30, 0x38	; 56
     794:	84 e0       	ldi	r24, 0x04	; 4
     796:	f8 07       	cpc	r31, r24
     798:	c9 f7       	brne	.-14     	; 0x78c <mcu_init+0x16>
     79a:	e0 e5       	ldi	r30, 0x50	; 80
     79c:	f4 e0       	ldi	r31, 0x04	; 4
     79e:	80 81       	ld	r24, Z
     7a0:	88 60       	ori	r24, 0x08	; 8
     7a2:	81 93       	st	Z+, r24
     7a4:	e8 35       	cpi	r30, 0x58	; 88
     7a6:	84 e0       	ldi	r24, 0x04	; 4
     7a8:	f8 07       	cpc	r31, r24
     7aa:	c9 f7       	brne	.-14     	; 0x79e <mcu_init+0x28>
     7ac:	e0 e7       	ldi	r30, 0x70	; 112
     7ae:	f4 e0       	ldi	r31, 0x04	; 4
     7b0:	80 81       	ld	r24, Z
     7b2:	88 60       	ori	r24, 0x08	; 8
     7b4:	81 93       	st	Z+, r24
     7b6:	e8 37       	cpi	r30, 0x78	; 120
     7b8:	84 e0       	ldi	r24, 0x04	; 4
     7ba:	f8 07       	cpc	r31, r24
     7bc:	c9 f7       	brne	.-14     	; 0x7b0 <mcu_init+0x3a>
     7be:	e0 e9       	ldi	r30, 0x90	; 144
     7c0:	f4 e0       	ldi	r31, 0x04	; 4
     7c2:	80 81       	ld	r24, Z
     7c4:	88 60       	ori	r24, 0x08	; 8
     7c6:	81 93       	st	Z+, r24
     7c8:	e8 39       	cpi	r30, 0x98	; 152
     7ca:	84 e0       	ldi	r24, 0x04	; 4
     7cc:	f8 07       	cpc	r31, r24
     7ce:	c9 f7       	brne	.-14     	; 0x7c2 <mcu_init+0x4c>
     7d0:	e0 eb       	ldi	r30, 0xB0	; 176
     7d2:	f4 e0       	ldi	r31, 0x04	; 4
     7d4:	80 81       	ld	r24, Z
     7d6:	88 60       	ori	r24, 0x08	; 8
     7d8:	81 93       	st	Z+, r24
     7da:	e8 3b       	cpi	r30, 0xB8	; 184
     7dc:	84 e0       	ldi	r24, 0x04	; 4
     7de:	f8 07       	cpc	r31, r24
     7e0:	c9 f7       	brne	.-14     	; 0x7d4 <mcu_init+0x5e>
     7e2:	08 95       	ret

000007e4 <USART_0_initialization>:
     7e4:	41 98       	cbi	0x08, 1	; 8
     7e6:	e1 e5       	ldi	r30, 0x51	; 81
     7e8:	f4 e0       	ldi	r31, 0x04	; 4
     7ea:	80 81       	ld	r24, Z
     7ec:	87 7f       	andi	r24, 0xF7	; 247
     7ee:	80 83       	st	Z, r24
     7f0:	40 9a       	sbi	0x08, 0	; 8
     7f2:	48 9a       	sbi	0x09, 0	; 9
     7f4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <USART_0_init>
     7f8:	08 95       	ret

000007fa <SPI_0_initialization>:
     7fa:	05 98       	cbi	0x00, 5	; 0
     7fc:	e5 e1       	ldi	r30, 0x15	; 21
     7fe:	f4 e0       	ldi	r31, 0x04	; 4
     800:	80 81       	ld	r24, Z
     802:	87 7f       	andi	r24, 0xF7	; 247
     804:	80 83       	st	Z, r24
     806:	04 9a       	sbi	0x00, 4	; 0
     808:	0c 98       	cbi	0x01, 4	; 1
     80a:	06 9a       	sbi	0x00, 6	; 0
     80c:	0e 98       	cbi	0x01, 6	; 1
     80e:	0e 94 44 04 	call	0x888	; 0x888 <SPI_0_init>
     812:	08 95       	ret

00000814 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     814:	0e 94 bb 03 	call	0x776	; 0x776 <mcu_init>
//	ADC_0_initialization();


	CLKCTRL_init();
     818:	0e 94 b1 03 	call	0x762	; 0x762 <CLKCTRL_init>

//	scheduler_timeout_init();

	USART_0_initialization();
     81c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <USART_0_initialization>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     820:	02 9a       	sbi	0x00, 2	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     822:	0a 98       	cbi	0x01, 2	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     824:	03 9a       	sbi	0x00, 3	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     826:	0b 98       	cbi	0x01, 3	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     828:	07 9a       	sbi	0x00, 7	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     82a:	0f 9a       	sbi	0x01, 7	; 1
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     82c:	22 98       	cbi	0x04, 2	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     82e:	e2 e3       	ldi	r30, 0x32	; 50
     830:	f4 e0       	ldi	r31, 0x04	; 4
     832:	80 81       	ld	r24, Z
     834:	88 60       	ori	r24, 0x08	; 8
     836:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     838:	25 9a       	sbi	0x04, 5	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     83a:	2d 98       	cbi	0x05, 5	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     83c:	46 98       	cbi	0x08, 6	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     83e:	4e 98       	cbi	0x09, 6	; 9
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     840:	e6 e5       	ldi	r30, 0x56	; 86
     842:	f4 e0       	ldi	r31, 0x04	; 4
     844:	80 81       	ld	r24, Z
     846:	88 60       	ori	r24, 0x08	; 8
     848:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     84a:	80 81       	ld	r24, Z
     84c:	8f 77       	andi	r24, 0x7F	; 127
     84e:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     850:	80 81       	ld	r24, Z
     852:	88 7f       	andi	r24, 0xF8	; 248
     854:	83 60       	ori	r24, 0x03	; 3
     856:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     858:	47 9a       	sbi	0x08, 7	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     85a:	4f 98       	cbi	0x09, 7	; 9
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CLKCTRL_init();
     85c:	0e 94 b1 03 	call	0x762	; 0x762 <CLKCTRL_init>

	scheduler_timeout_init();
     860:	0e 94 62 04 	call	0x8c4	; 0x8c4 <scheduler_timeout_init>

	USART_0_initialization();
     864:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <USART_0_initialization>

	SPI_0_initialization();
     868:	0e 94 fd 03 	call	0x7fa	; 0x7fa <SPI_0_initialization>

	CPUINT_init();
     86c:	0e 94 b9 03 	call	0x772	; 0x772 <CPUINT_init>

	SLPCTRL_init();
     870:	0e 94 42 04 	call	0x884	; 0x884 <SLPCTRL_init>

	BOD_init();
     874:	0e 94 af 03 	call	0x75e	; 0x75e <BOD_init>
     878:	08 95       	ret

0000087a <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
     87a:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
     87c:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     87e:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     880:	40 83       	st	Z, r20
	ret                             // Return to caller
     882:	08 95       	ret

00000884 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	08 95       	ret

00000888 <SPI_0_init>:
 *
 * \return Nothing
 */
void SPI_0_disable()
{
	SPI0.CTRLA &= ~SPI_ENABLE_bm;
     888:	81 e3       	ldi	r24, 0x31	; 49
     88a:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     88e:	10 92 f9 2d 	sts	0x2DF9, r1	; 0x802df9 <SPI_0_desc>
     892:	08 95       	ret

00000894 <SPI_0_enable>:
     894:	e0 ec       	ldi	r30, 0xC0	; 192
     896:	f8 e0       	ldi	r31, 0x08	; 8
     898:	80 81       	ld	r24, Z
     89a:	81 60       	ori	r24, 0x01	; 1
     89c:	80 83       	st	Z, r24
     89e:	08 95       	ret

000008a0 <SPI_0_exchange_byte>:
 */
uint8_t SPI_0_exchange_byte(uint8_t data)
{
	// Blocking wait for SPI free makes the function work
	// seamlessly also with IRQ drivers.
	while (SPI_0_desc.status == SPI_BUSY)
     8a0:	90 91 f9 2d 	lds	r25, 0x2DF9	; 0x802df9 <SPI_0_desc>
     8a4:	92 30       	cpi	r25, 0x02	; 2
     8a6:	f1 f3       	breq	.-4      	; 0x8a4 <SPI_0_exchange_byte+0x4>
		;
	SPI0.DATA = data;
     8a8:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7008c4>
	while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
     8ac:	e0 ec       	ldi	r30, 0xC0	; 192
     8ae:	f8 e0       	ldi	r31, 0x08	; 8
     8b0:	83 81       	ldd	r24, Z+3	; 0x03
     8b2:	88 23       	and	r24, r24
     8b4:	ec f7       	brge	.-6      	; 0x8b0 <SPI_0_exchange_byte+0x10>
		;
	return SPI0.DATA;
     8b6:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7008c4>
}
     8ba:	08 95       	ret

000008bc <scheduler_dummy_handler>:

	// Do we have to reschedule it? If yes then add delta to absolute for reschedule
	if (reschedule) {
		scheduler_timeout_create(callback_timer, reschedule);
	}
}
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	cb 01       	movw	r24, r22
     8c2:	08 95       	ret

000008c4 <scheduler_timeout_init>:
     8c4:	e0 e4       	ldi	r30, 0x40	; 64
     8c6:	f1 e0       	ldi	r31, 0x01	; 1
     8c8:	81 81       	ldd	r24, Z+1	; 0x01
     8ca:	81 11       	cpse	r24, r1
     8cc:	fd cf       	rjmp	.-6      	; 0x8c8 <scheduler_timeout_init+0x4>
     8ce:	e0 e4       	ldi	r30, 0x40	; 64
     8d0:	f1 e0       	ldi	r31, 0x01	; 1
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	80 83       	st	Z, r24
     8d6:	87 83       	std	Z+7, r24	; 0x07
     8d8:	82 83       	std	Z+2, r24	; 0x02
     8da:	08 95       	ret

000008dc <scheduler_stop_timeouts>:
     8dc:	e0 e4       	ldi	r30, 0x40	; 64
     8de:	f1 e0       	ldi	r31, 0x01	; 1
     8e0:	82 81       	ldd	r24, Z+2	; 0x02
     8e2:	8e 7f       	andi	r24, 0xFE	; 254
     8e4:	82 83       	std	Z+2, r24	; 0x02
     8e6:	10 92 ff 2d 	sts	0x2DFF, r1	; 0x802dff <scheduler_absolute_time_of_last_timeout>
     8ea:	10 92 00 2e 	sts	0x2E00, r1	; 0x802e00 <scheduler_absolute_time_of_last_timeout+0x1>
     8ee:	10 92 01 2e 	sts	0x2E01, r1	; 0x802e01 <scheduler_absolute_time_of_last_timeout+0x2>
     8f2:	10 92 02 2e 	sts	0x2E02, r1	; 0x802e02 <scheduler_absolute_time_of_last_timeout+0x3>
     8f6:	10 92 fa 2d 	sts	0x2DFA, r1	; 0x802dfa <scheduler_is_running>
     8fa:	08 95       	ret

000008fc <scheduler_start_timer_at_head>:
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	e0 e4       	ldi	r30, 0x40	; 64
     902:	f1 e0       	ldi	r31, 0x01	; 1
     904:	82 81       	ldd	r24, Z+2	; 0x02
     906:	8e 7f       	andi	r24, 0xFE	; 254
     908:	82 83       	std	Z+2, r24	; 0x02
     90a:	e0 91 05 2e 	lds	r30, 0x2E05	; 0x802e05 <scheduler_list_head>
     90e:	f0 91 06 2e 	lds	r31, 0x2E06	; 0x802e06 <scheduler_list_head+0x1>
     912:	30 97       	sbiw	r30, 0x00	; 0
     914:	19 f4       	brne	.+6      	; 0x91c <scheduler_start_timer_at_head+0x20>
     916:	0e 94 6e 04 	call	0x8dc	; 0x8dc <scheduler_stop_timeouts>
     91a:	60 c0       	rjmp	.+192    	; 0x9dc <scheduler_start_timer_at_head+0xe0>
     91c:	40 91 ff 2d 	lds	r20, 0x2DFF	; 0x802dff <scheduler_absolute_time_of_last_timeout>
     920:	50 91 00 2e 	lds	r21, 0x2E00	; 0x802e00 <scheduler_absolute_time_of_last_timeout+0x1>
     924:	60 91 01 2e 	lds	r22, 0x2E01	; 0x802e01 <scheduler_absolute_time_of_last_timeout+0x2>
     928:	70 91 02 2e 	lds	r23, 0x2E02	; 0x802e02 <scheduler_absolute_time_of_last_timeout+0x3>
     92c:	86 81       	ldd	r24, Z+6	; 0x06
     92e:	97 81       	ldd	r25, Z+7	; 0x07
     930:	a0 85       	ldd	r26, Z+8	; 0x08
     932:	b1 85       	ldd	r27, Z+9	; 0x09
     934:	84 1b       	sub	r24, r20
     936:	95 0b       	sbc	r25, r21
     938:	a6 0b       	sbc	r26, r22
     93a:	b7 0b       	sbc	r27, r23
     93c:	00 97       	sbiw	r24, 0x00	; 0
     93e:	01 e0       	ldi	r16, 0x01	; 1
     940:	a0 07       	cpc	r26, r16
     942:	b1 05       	cpc	r27, r1
     944:	00 f1       	brcs	.+64     	; 0x986 <scheduler_start_timer_at_head+0x8a>
     946:	40 91 ff 2d 	lds	r20, 0x2DFF	; 0x802dff <scheduler_absolute_time_of_last_timeout>
     94a:	50 91 00 2e 	lds	r21, 0x2E00	; 0x802e00 <scheduler_absolute_time_of_last_timeout+0x1>
     94e:	60 91 01 2e 	lds	r22, 0x2E01	; 0x802e01 <scheduler_absolute_time_of_last_timeout+0x2>
     952:	70 91 02 2e 	lds	r23, 0x2E02	; 0x802e02 <scheduler_absolute_time_of_last_timeout+0x3>
     956:	a8 e3       	ldi	r26, 0x38	; 56
     958:	b8 e2       	ldi	r27, 0x28	; 40
     95a:	41 50       	subi	r20, 0x01	; 1
     95c:	51 09       	sbc	r21, r1
     95e:	6f 4f       	sbci	r22, 0xFF	; 255
     960:	7f 4f       	sbci	r23, 0xFF	; 255
     962:	16 96       	adiw	r26, 0x06	; 6
     964:	4d 93       	st	X+, r20
     966:	5d 93       	st	X+, r21
     968:	6d 93       	st	X+, r22
     96a:	7c 93       	st	X, r23
     96c:	19 97       	sbiw	r26, 0x09	; 9
     96e:	14 96       	adiw	r26, 0x04	; 4
     970:	ed 93       	st	X+, r30
     972:	fc 93       	st	X, r31
     974:	15 97       	sbiw	r26, 0x05	; 5
     976:	a0 93 05 2e 	sts	0x2E05, r26	; 0x802e05 <scheduler_list_head>
     97a:	b0 93 06 2e 	sts	0x2E06, r27	; 0x802e06 <scheduler_list_head+0x1>
     97e:	8f ef       	ldi	r24, 0xFF	; 255
     980:	9f ef       	ldi	r25, 0xFF	; 255
     982:	a0 e0       	ldi	r26, 0x00	; 0
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	4f ef       	ldi	r20, 0xFF	; 255
     988:	5f ef       	ldi	r21, 0xFF	; 255
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	8a 01       	movw	r16, r20
     990:	9b 01       	movw	r18, r22
     992:	08 1b       	sub	r16, r24
     994:	19 0b       	sbc	r17, r25
     996:	2a 0b       	sbc	r18, r26
     998:	3b 0b       	sbc	r19, r27
     99a:	00 93 fb 2d 	sts	0x2DFB, r16	; 0x802dfb <scheduler_last_timer_load>
     99e:	10 93 fc 2d 	sts	0x2DFC, r17	; 0x802dfc <scheduler_last_timer_load+0x1>
     9a2:	20 93 fd 2d 	sts	0x2DFD, r18	; 0x802dfd <scheduler_last_timer_load+0x2>
     9a6:	30 93 fe 2d 	sts	0x2DFE, r19	; 0x802dfe <scheduler_last_timer_load+0x3>
     9aa:	80 91 fb 2d 	lds	r24, 0x2DFB	; 0x802dfb <scheduler_last_timer_load>
     9ae:	90 91 fc 2d 	lds	r25, 0x2DFC	; 0x802dfc <scheduler_last_timer_load+0x1>
     9b2:	a0 91 fd 2d 	lds	r26, 0x2DFD	; 0x802dfd <scheduler_last_timer_load+0x2>
     9b6:	b0 91 fe 2d 	lds	r27, 0x2DFE	; 0x802dfe <scheduler_last_timer_load+0x3>
     9ba:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     9be:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     9c2:	e0 e4       	ldi	r30, 0x40	; 64
     9c4:	f1 e0       	ldi	r31, 0x01	; 1
     9c6:	81 81       	ldd	r24, Z+1	; 0x01
     9c8:	81 fd       	sbrc	r24, 1
     9ca:	fd cf       	rjmp	.-6      	; 0x9c6 <scheduler_start_timer_at_head+0xca>
     9cc:	e0 e4       	ldi	r30, 0x40	; 64
     9ce:	f1 e0       	ldi	r31, 0x01	; 1
     9d0:	82 81       	ldd	r24, Z+2	; 0x02
     9d2:	81 60       	ori	r24, 0x01	; 1
     9d4:	82 83       	std	Z+2, r24	; 0x02
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	80 93 fa 2d 	sts	0x2DFA, r24	; 0x802dfa <scheduler_is_running>
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	08 95       	ret

000009e2 <__vector_3>:
	}
}

// NOTE: assumes the callback completes before the next timer tick
ISR(RTC_CNT_vect)
{
     9e2:	1f 92       	push	r1
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	0f 92       	push	r0
     9ea:	11 24       	eor	r1, r1
     9ec:	2f 93       	push	r18
     9ee:	3f 93       	push	r19
     9f0:	4f 93       	push	r20
     9f2:	5f 93       	push	r21
     9f4:	6f 93       	push	r22
     9f6:	7f 93       	push	r23
     9f8:	8f 93       	push	r24
     9fa:	9f 93       	push	r25
     9fc:	af 93       	push	r26
     9fe:	bf 93       	push	r27
     a00:	ef 93       	push	r30
     a02:	ff 93       	push	r31
	timer_struct_t *next                    = scheduler_list_head->next;
     a04:	a0 91 05 2e 	lds	r26, 0x2E05	; 0x802e05 <scheduler_list_head>
     a08:	b0 91 06 2e 	lds	r27, 0x2E06	; 0x802e06 <scheduler_list_head+0x1>
     a0c:	14 96       	adiw	r26, 0x04	; 4
     a0e:	2d 91       	ld	r18, X+
     a10:	3c 91       	ld	r19, X
     a12:	15 97       	sbiw	r26, 0x05	; 5
	scheduler_absolute_time_of_last_timeout = scheduler_list_head->absolute_time;
     a14:	16 96       	adiw	r26, 0x06	; 6
     a16:	4d 91       	ld	r20, X+
     a18:	5d 91       	ld	r21, X+
     a1a:	6d 91       	ld	r22, X+
     a1c:	7c 91       	ld	r23, X
     a1e:	19 97       	sbiw	r26, 0x09	; 9
     a20:	40 93 ff 2d 	sts	0x2DFF, r20	; 0x802dff <scheduler_absolute_time_of_last_timeout>
     a24:	50 93 00 2e 	sts	0x2E00, r21	; 0x802e00 <scheduler_absolute_time_of_last_timeout+0x1>
     a28:	60 93 01 2e 	sts	0x2E01, r22	; 0x802e01 <scheduler_absolute_time_of_last_timeout+0x2>
     a2c:	70 93 02 2e 	sts	0x2E02, r23	; 0x802e02 <scheduler_absolute_time_of_last_timeout+0x3>
	scheduler_last_timer_load               = 0;
     a30:	10 92 fb 2d 	sts	0x2DFB, r1	; 0x802dfb <scheduler_last_timer_load>
     a34:	10 92 fc 2d 	sts	0x2DFC, r1	; 0x802dfc <scheduler_last_timer_load+0x1>
     a38:	10 92 fd 2d 	sts	0x2DFD, r1	; 0x802dfd <scheduler_last_timer_load+0x2>
     a3c:	10 92 fe 2d 	sts	0x2DFE, r1	; 0x802dfe <scheduler_last_timer_load+0x3>

	if (scheduler_list_head != &scheduler_dummy)
     a40:	88 e2       	ldi	r24, 0x28	; 40
     a42:	a8 33       	cpi	r26, 0x38	; 56
     a44:	b8 07       	cpc	r27, r24
     a46:	b1 f0       	breq	.+44     	; 0xa74 <__vector_3+0x92>
}

inline void scheduler_enqueue_callback(timer_struct_t *timer)
{
	timer_struct_t *tmp;
	timer->next = NULL;
     a48:	14 96       	adiw	r26, 0x04	; 4
     a4a:	1d 92       	st	X+, r1
     a4c:	1c 92       	st	X, r1
     a4e:	15 97       	sbiw	r26, 0x05	; 5

	// Special case for empty list
	if (scheduler_execute_queue_head == NULL) {
     a50:	e0 91 03 2e 	lds	r30, 0x2E03	; 0x802e03 <scheduler_execute_queue_head>
     a54:	f0 91 04 2e 	lds	r31, 0x2E04	; 0x802e04 <scheduler_execute_queue_head+0x1>
     a58:	30 97       	sbiw	r30, 0x00	; 0
     a5a:	31 f4       	brne	.+12     	; 0xa68 <__vector_3+0x86>
		scheduler_execute_queue_head = timer;
     a5c:	a0 93 03 2e 	sts	0x2E03, r26	; 0x802e03 <scheduler_execute_queue_head>
     a60:	b0 93 04 2e 	sts	0x2E04, r27	; 0x802e04 <scheduler_execute_queue_head+0x1>
     a64:	07 c0       	rjmp	.+14     	; 0xa74 <__vector_3+0x92>
	}

	// Find the end of the list and insert the next expired timer at the back of the queue
	tmp = scheduler_execute_queue_head;
	while (tmp->next != NULL)
		tmp = tmp->next;
     a66:	fc 01       	movw	r30, r24
		return;
	}

	// Find the end of the list and insert the next expired timer at the back of the queue
	tmp = scheduler_execute_queue_head;
	while (tmp->next != NULL)
     a68:	84 81       	ldd	r24, Z+4	; 0x04
     a6a:	95 81       	ldd	r25, Z+5	; 0x05
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	d9 f7       	brne	.-10     	; 0xa66 <__vector_3+0x84>
		tmp = tmp->next;

	tmp->next = timer;
     a70:	a4 83       	std	Z+4, r26	; 0x04
     a72:	b5 83       	std	Z+5, r27	; 0x05

	if (scheduler_list_head != &scheduler_dummy)
		scheduler_enqueue_callback(scheduler_list_head);

	// Remove expired timer for the list now (it is always the one at the head)
	scheduler_list_head = next;
     a74:	20 93 05 2e 	sts	0x2E05, r18	; 0x802e05 <scheduler_list_head>
     a78:	30 93 06 2e 	sts	0x2E06, r19	; 0x802e06 <scheduler_list_head+0x1>

	scheduler_start_timer_at_head();
     a7c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <scheduler_start_timer_at_head>

	RTC.INTFLAGS = RTC_OVF_bm;
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
}
     a86:	ff 91       	pop	r31
     a88:	ef 91       	pop	r30
     a8a:	bf 91       	pop	r27
     a8c:	af 91       	pop	r26
     a8e:	9f 91       	pop	r25
     a90:	8f 91       	pop	r24
     a92:	7f 91       	pop	r23
     a94:	6f 91       	pop	r22
     a96:	5f 91       	pop	r21
     a98:	4f 91       	pop	r20
     a9a:	3f 91       	pop	r19
     a9c:	2f 91       	pop	r18
     a9e:	0f 90       	pop	r0
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	0f 90       	pop	r0
     aa4:	1f 90       	pop	r1
     aa6:	18 95       	reti

00000aa8 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART1.STATUS & USART_RXCIF_bm))
		;
	return USART1.RXDATAL;
}
     aa8:	e0 e2       	ldi	r30, 0x20	; 32
     aaa:	f8 e0       	ldi	r31, 0x08	; 8
     aac:	8c e2       	ldi	r24, 0x2C	; 44
     aae:	92 e0       	ldi	r25, 0x02	; 2
     ab0:	80 87       	std	Z+8, r24	; 0x08
     ab2:	91 87       	std	Z+9, r25	; 0x09
     ab4:	80 ec       	ldi	r24, 0xC0	; 192
     ab6:	86 83       	std	Z+6, r24	; 0x06
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	08 95       	ret

00000abc <USART_1_write>:
 *
 * \return Nothing
 */
void USART_1_write(const uint8_t data)
{
	while (!(USART1.STATUS & USART_DREIF_bm))
     abc:	e0 e2       	ldi	r30, 0x20	; 32
     abe:	f8 e0       	ldi	r31, 0x08	; 8
     ac0:	94 81       	ldd	r25, Z+4	; 0x04
     ac2:	95 ff       	sbrs	r25, 5
     ac4:	fd cf       	rjmp	.-6      	; 0xac0 <USART_1_write+0x4>
		;
	USART1.TXDATAL = data;
     ac6:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x700822>
     aca:	08 95       	ret

00000acc <__vector_24>:
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_deinit(void)
{
	return M2M_SUCCESS;
}
     acc:	1f 92       	push	r1
     ace:	0f 92       	push	r0
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	0f 92       	push	r0
     ad4:	11 24       	eor	r1, r1
     ad6:	2f 93       	push	r18
     ad8:	3f 93       	push	r19
     ada:	4f 93       	push	r20
     adc:	5f 93       	push	r21
     ade:	6f 93       	push	r22
     ae0:	7f 93       	push	r23
     ae2:	8f 93       	push	r24
     ae4:	9f 93       	push	r25
     ae6:	af 93       	push	r26
     ae8:	bf 93       	push	r27
     aea:	ef 93       	push	r30
     aec:	ff 93       	push	r31
     aee:	56 99       	sbic	0x0a, 6	; 10
     af0:	07 c0       	rjmp	.+14     	; 0xb00 <__vector_24+0x34>
     af2:	e0 91 07 2e 	lds	r30, 0x2E07	; 0x802e07 <gpfIsr>
     af6:	f0 91 08 2e 	lds	r31, 0x2E08	; 0x802e08 <gpfIsr+0x1>
     afa:	30 97       	sbiw	r30, 0x00	; 0
     afc:	09 f0       	breq	.+2      	; 0xb00 <__vector_24+0x34>
     afe:	09 95       	icall
     b00:	80 ec       	ldi	r24, 0xC0	; 192
     b02:	8b b9       	out	0x0b, r24	; 11
     b04:	ff 91       	pop	r31
     b06:	ef 91       	pop	r30
     b08:	bf 91       	pop	r27
     b0a:	af 91       	pop	r26
     b0c:	9f 91       	pop	r25
     b0e:	8f 91       	pop	r24
     b10:	7f 91       	pop	r23
     b12:	6f 91       	pop	r22
     b14:	5f 91       	pop	r21
     b16:	4f 91       	pop	r20
     b18:	3f 91       	pop	r19
     b1a:	2f 91       	pop	r18
     b1c:	0f 90       	pop	r0
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	0f 90       	pop	r0
     b22:	1f 90       	pop	r1
     b24:	18 95       	reti

00000b26 <nm_bsp_sleep>:
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
     b26:	61 15       	cp	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	81 05       	cpc	r24, r1
     b2c:	91 05       	cpc	r25, r1
     b2e:	61 f0       	breq	.+24     	; 0xb48 <nm_bsp_sleep+0x22>
     b30:	dc 01       	movw	r26, r24
     b32:	cb 01       	movw	r24, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b34:	e3 ec       	ldi	r30, 0xC3	; 195
     b36:	f9 e0       	ldi	r31, 0x09	; 9
     b38:	31 97       	sbiw	r30, 0x01	; 1
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <nm_bsp_sleep+0x12>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <nm_bsp_sleep+0x18>
     b3e:	00 00       	nop
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	a1 09       	sbc	r26, r1
     b44:	b1 09       	sbc	r27, r1
     b46:	b1 f7       	brne	.-20     	; 0xb34 <nm_bsp_sleep+0xe>
     b48:	08 95       	ret

00000b4a <nm_bsp_reset>:
     b4a:	4f 98       	cbi	0x09, 7	; 9
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     b4c:	0a 98       	cbi	0x01, 2	; 1
	//ioport_set_pin_level(CONF_WIFI_M2M_RESET_PIN, false);
	CONF_WIFI_M2M_RESET_PIN_set_level(false);
	
// 	asm volatile ("nop");
// 	PORTB_set_pin_level(5,true);
	nm_bsp_sleep(1);
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 93 05 	call	0xb26	; 0xb26 <nm_bsp_sleep>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     b5a:	4f 9a       	sbi	0x09, 7	; 9
// 	asm volatile ("nop");

	//ioport_set_pin_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, true);
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(true);
	
	nm_bsp_sleep(10);
     b5c:	6a e0       	ldi	r22, 0x0A	; 10
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 93 05 	call	0xb26	; 0xb26 <nm_bsp_sleep>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     b68:	0a 9a       	sbi	0x01, 2	; 1
     b6a:	08 95       	ret

00000b6c <nm_bsp_init>:
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
	gpfIsr = NULL;
     b6c:	10 92 07 2e 	sts	0x2E07, r1	; 0x802e07 <gpfIsr>
     b70:	10 92 08 2e 	sts	0x2E08, r1	; 0x802e08 <gpfIsr+0x1>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     b74:	02 9a       	sbi	0x00, 2	; 0
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     b76:	47 9a       	sbi	0x08, 7	; 8
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     b78:	03 9a       	sbi	0x00, 3	; 0

	/* Initialize the delay driver. */
	//delay_init();

	/* Perform chip reset. */
	nm_bsp_reset();
     b7a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <nm_bsp_reset>

	cpu_irq_enable();
     b7e:	78 94       	sei

	return M2M_SUCCESS;
}
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	08 95       	ret

00000b84 <nm_bsp_register_isr>:
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
	gpfIsr = pfIsr;
     b84:	80 93 07 2e 	sts	0x2E07, r24	; 0x802e07 <gpfIsr>
     b88:	90 93 08 2e 	sts	0x2E08, r25	; 0x802e08 <gpfIsr+0x1>
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     b8c:	46 98       	cbi	0x08, 6	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     b8e:	e6 e5       	ldi	r30, 0x56	; 86
     b90:	f4 e0       	ldi	r31, 0x04	; 4
     b92:	80 81       	ld	r24, Z
     b94:	88 60       	ori	r24, 0x08	; 8
     b96:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     b98:	80 81       	ld	r24, Z
     b9a:	88 7f       	andi	r24, 0xF8	; 248
     b9c:	83 60       	ori	r24, 0x03	; 3
     b9e:	80 83       	st	Z, r24
     ba0:	80 81       	ld	r24, Z
     ba2:	88 7f       	andi	r24, 0xF8	; 248
     ba4:	83 60       	ori	r24, 0x03	; 3
     ba6:	80 83       	st	Z, r24
	/* Enable interrupt */
// 	CONF_WIFI_M2M_INT_INTMASK_reg = CONF_WIFI_M2M_INT_INTFLAG_Msk;
// 	CONF_WIFI_M2M_INT_INTCTRL_reg = CONF_WIFI_M2M_INT_INTCTRL_Msk;
	CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
	//ENABLE_INTERRUPTS();
	sei();
     ba8:	78 94       	sei
     baa:	08 95       	ret

00000bac <nm_bsp_interrupt_ctrl>:
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
	if (u8Enable)
     bac:	88 23       	and	r24, r24
     bae:	39 f0       	breq	.+14     	; 0xbbe <nm_bsp_interrupt_ctrl+0x12>
     bb0:	e6 e5       	ldi	r30, 0x56	; 86
     bb2:	f4 e0       	ldi	r31, 0x04	; 4
     bb4:	80 81       	ld	r24, Z
     bb6:	88 7f       	andi	r24, 0xF8	; 248
     bb8:	83 60       	ori	r24, 0x03	; 3
     bba:	80 83       	st	Z, r24
     bbc:	08 95       	ret
     bbe:	e6 e5       	ldi	r30, 0x56	; 86
     bc0:	f4 e0       	ldi	r31, 0x04	; 4
     bc2:	80 81       	ld	r24, Z
     bc4:	88 7f       	andi	r24, 0xF8	; 248
     bc6:	80 83       	st	Z, r24
     bc8:	08 95       	ret

00000bca <nm_bus_init>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     bca:	07 9a       	sbi	0x00, 7	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     bcc:	0f 9a       	sbi	0x01, 7	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     bce:	04 9a       	sbi	0x00, 4	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     bd0:	0c 9a       	sbi	0x01, 4	; 1
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     bd2:	05 98       	cbi	0x00, 5	; 0
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     bd4:	06 9a       	sbi	0x00, 6	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     bd6:	0e 98       	cbi	0x01, 6	; 1
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	 
	/* Configure the SPI master. */
	//spi_master_init(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_init();
     bd8:	0e 94 44 04 	call	0x888	; 0x888 <SPI_0_init>
	
	//spi_master_setup_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf, SPI_MODE_0, CONF_WIFI_M2M_SPI_BAUDRATE, 0);
	
	/* Enable the SPI master. */
	//spi_enable(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_enable();
     bdc:	0e 94 4a 04 	call	0x894	; 0x894 <SPI_0_enable>

	nm_bsp_reset();
     be0:	0e 94 a5 05 	call	0xb4a	; 0xb4a <nm_bsp_reset>
	nm_bsp_sleep(1);
     be4:	61 e0       	ldi	r22, 0x01	; 1
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 93 05 	call	0xb26	; 0xb26 <nm_bsp_sleep>
#endif
	return result;
}
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	08 95       	ret

00000bf4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     bf4:	af 92       	push	r10
     bf6:	bf 92       	push	r11
     bf8:	cf 92       	push	r12
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	1f 92       	push	r1
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	fb 01       	movw	r30, r22
	sint8 s8Ret = 0;
	switch(u8Cmd)
     c10:	83 30       	cpi	r24, 0x03	; 3
     c12:	c1 f5       	brne	.+112    	; 0xc84 <nm_bus_ioctl+0x90>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     c14:	04 81       	ldd	r16, Z+4	; 0x04
     c16:	15 81       	ldd	r17, Z+5	; 0x05
     c18:	e2 80       	ldd	r14, Z+2	; 0x02
     c1a:	f3 80       	ldd	r15, Z+3	; 0x03
     c1c:	c0 80       	ld	r12, Z
     c1e:	d1 80       	ldd	r13, Z+1	; 0x01
#ifdef CONF_WINC_USE_SPI
static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8 u8Dummy = 0;
     c20:	19 82       	std	Y+1, r1	; 0x01
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
     c22:	c1 14       	cp	r12, r1
     c24:	d1 04       	cpc	r13, r1
     c26:	49 f0       	breq	.+18     	; 0xc3a <nm_bus_ioctl+0x46>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
     c28:	ef 28       	or	r14, r15
     c2a:	51 f5       	brne	.+84     	; 0xc80 <nm_bus_ioctl+0x8c>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
     c2c:	bb 24       	eor	r11, r11
     c2e:	b3 94       	inc	r11
static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     c30:	a1 2c       	mov	r10, r1
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
     c32:	ce 01       	movw	r24, r28
     c34:	01 96       	adiw	r24, 0x01	; 1
     c36:	7c 01       	movw	r14, r24
     c38:	06 c0       	rjmp	.+12     	; 0xc46 <nm_bus_ioctl+0x52>
static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     c3a:	b1 2c       	mov	r11, r1
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
     c3c:	aa 24       	eor	r10, r10
     c3e:	a3 94       	inc	r10
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
     c40:	fe 01       	movw	r30, r28
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	6f 01       	movw	r12, r30
     c46:	0f 98       	cbi	0x01, 7	; 1
	}

	//spi_select_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(false);
	
	while (u16Sz) {
     c48:	01 15       	cp	r16, r1
     c4a:	11 05       	cpc	r17, r1
     c4c:	b1 f0       	breq	.+44     	; 0xc7a <nm_bus_ioctl+0x86>
//		spi_read_single((uint8_t*)(&rxd_data));
		//SPI_0_read_block((uint8_t*)(&rxd_data), 1);
		
		
		
		rxd_data = SPI_0_exchange_byte(txd_data);		
     c4e:	f6 01       	movw	r30, r12
     c50:	80 81       	ld	r24, Z
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 50 04 	call	0x8a0	; 0x8a0 <SPI_0_exchange_byte>
		
		*pu8Miso = rxd_data;
     c58:	f7 01       	movw	r30, r14
     c5a:	80 83       	st	Z, r24

		u16Sz--;
     c5c:	01 50       	subi	r16, 0x01	; 1
     c5e:	11 09       	sbc	r17, r1
		if (!u8SkipMiso)
     c60:	b1 10       	cpse	r11, r1
     c62:	03 c0       	rjmp	.+6      	; 0xc6a <nm_bus_ioctl+0x76>
			pu8Miso++;
     c64:	ff ef       	ldi	r31, 0xFF	; 255
     c66:	ef 1a       	sub	r14, r31
     c68:	ff 0a       	sbc	r15, r31
		if (!u8SkipMosi)
     c6a:	a1 10       	cpse	r10, r1
     c6c:	03 c0       	rjmp	.+6      	; 0xc74 <nm_bus_ioctl+0x80>
			pu8Mosi++;
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	c8 1a       	sub	r12, r24
     c72:	d8 0a       	sbc	r13, r24
	}

	//spi_select_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(false);
	
	while (u16Sz) {
     c74:	01 15       	cp	r16, r1
     c76:	11 05       	cpc	r17, r1
     c78:	51 f7       	brne	.-44     	; 0xc4e <nm_bus_ioctl+0x5a>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     c7a:	0f 9a       	sbi	0x01, 7	; 1
	}

	//spi_deselect_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(true);

	return M2M_SUCCESS;
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	03 c0       	rjmp	.+6      	; 0xc86 <nm_bus_ioctl+0x92>
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
     c80:	8a ef       	ldi	r24, 0xFA	; 250
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <nm_bus_ioctl+0x92>
#endif
		default:
			s8Ret = -1;
     c84:	8f ef       	ldi	r24, 0xFF	; 255
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     c86:	0f 90       	pop	r0
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	ff 90       	pop	r15
     c92:	ef 90       	pop	r14
     c94:	df 90       	pop	r13
     c96:	cf 90       	pop	r12
     c98:	bf 90       	pop	r11
     c9a:	af 90       	pop	r10
     c9c:	08 95       	ret

00000c9e <nm_bus_deinit>:
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
	return M2M_SUCCESS;
}
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	08 95       	ret

00000ca2 <m2m_memcpy>:
		cs ^= *buf;
		buf++;
	}

	return cs;
}
     ca2:	dc 01       	movw	r26, r24
     ca4:	21 15       	cp	r18, r1
     ca6:	31 05       	cpc	r19, r1
     ca8:	41 05       	cpc	r20, r1
     caa:	51 05       	cpc	r21, r1
     cac:	49 f0       	breq	.+18     	; 0xcc0 <m2m_memcpy+0x1e>
     cae:	e6 2f       	mov	r30, r22
     cb0:	f7 2f       	mov	r31, r23
     cb2:	81 91       	ld	r24, Z+
     cb4:	8d 93       	st	X+, r24
     cb6:	21 50       	subi	r18, 0x01	; 1
     cb8:	31 09       	sbc	r19, r1
     cba:	41 09       	sbc	r20, r1
     cbc:	51 09       	sbc	r21, r1
     cbe:	c9 f7       	brne	.-14     	; 0xcb2 <m2m_memcpy+0x10>
     cc0:	08 95       	ret

00000cc2 <m2m_memset>:

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
     cc2:	fc 01       	movw	r30, r24
	if(sz == 0) return;
     cc4:	21 15       	cp	r18, r1
     cc6:	31 05       	cpc	r19, r1
     cc8:	41 05       	cpc	r20, r1
     cca:	51 05       	cpc	r21, r1
     ccc:	31 f0       	breq	.+12     	; 0xcda <m2m_memset+0x18>
	do
	{
		*pBuf = val;
     cce:	61 93       	st	Z+, r22
		pBuf++;
	}while(--sz);
     cd0:	21 50       	subi	r18, 0x01	; 1
     cd2:	31 09       	sbc	r19, r1
     cd4:	41 09       	sbc	r20, r1
     cd6:	51 09       	sbc	r21, r1
     cd8:	d1 f7       	brne	.-12     	; 0xcce <m2m_memset+0xc>
     cda:	08 95       	ret

00000cdc <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
     cdc:	fc 01       	movw	r30, r24
     cde:	20 81       	ld	r18, Z
     ce0:	22 23       	and	r18, r18
     ce2:	41 f0       	breq	.+16     	; 0xcf4 <m2m_strlen+0x18>
     ce4:	31 96       	adiw	r30, 0x01	; 1
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
	{
		u16StrLen ++;
     cea:	01 96       	adiw	r24, 0x01	; 1
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
     cec:	21 91       	ld	r18, Z+
     cee:	21 11       	cpse	r18, r1
     cf0:	fc cf       	rjmp	.-8      	; 0xcea <m2m_strlen+0xe>
     cf2:	08 95       	ret
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
     cf8:	08 95       	ret

00000cfa <isr>:
{
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
	return ret;
}
     cfa:	ea e8       	ldi	r30, 0x8A	; 138
     cfc:	fe e2       	ldi	r31, 0x2E	; 46
     cfe:	83 81       	ldd	r24, Z+3	; 0x03
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	83 83       	std	Z+3, r24	; 0x03
     d04:	08 95       	ret

00000d06 <m2m_hif_cb>:
     d06:	08 95       	ret

00000d08 <hif_set_rx_done>:
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <hif_set_rx_done+0x6>
     d0e:	00 d0       	rcall	.+0      	; 0xd10 <hif_set_rx_done+0x8>
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	10 92 8c 2e 	sts	0x2E8C, r1	; 0x802e8c <gstrHifCxt+0x2>
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	0e 94 d6 05 	call	0xbac	; 0xbac <nm_bsp_interrupt_ctrl>
     d1e:	ae 01       	movw	r20, r28
     d20:	4f 5f       	subi	r20, 0xFF	; 255
     d22:	5f 4f       	sbci	r21, 0xFF	; 255
     d24:	60 e7       	ldi	r22, 0x70	; 112
     d26:	70 e1       	ldi	r23, 0x10	; 16
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
     d30:	81 11       	cpse	r24, r1
     d32:	11 c0       	rjmp	.+34     	; 0xd56 <hif_set_rx_done+0x4e>
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	9a 81       	ldd	r25, Y+2	; 0x02
     d38:	ab 81       	ldd	r26, Y+3	; 0x03
     d3a:	bc 81       	ldd	r27, Y+4	; 0x04
     d3c:	9c 01       	movw	r18, r24
     d3e:	ad 01       	movw	r20, r26
     d40:	22 60       	ori	r18, 0x02	; 2
     d42:	29 83       	std	Y+1, r18	; 0x01
     d44:	3a 83       	std	Y+2, r19	; 0x02
     d46:	4b 83       	std	Y+3, r20	; 0x03
     d48:	5c 83       	std	Y+4, r21	; 0x04
     d4a:	60 e7       	ldi	r22, 0x70	; 112
     d4c:	70 e1       	ldi	r23, 0x10	; 16
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
     d56:	24 96       	adiw	r28, 0x04	; 4
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <hif_chip_wake>:
     d62:	80 91 8c 2e 	lds	r24, 0x2E8C	; 0x802e8c <gstrHifCxt+0x2>
     d66:	81 11       	cpse	r24, r1
     d68:	13 c0       	rjmp	.+38     	; 0xd90 <hif_chip_wake+0x2e>
     d6a:	80 91 8b 2e 	lds	r24, 0x2E8B	; 0x802e8b <gstrHifCxt+0x1>
     d6e:	81 11       	cpse	r24, r1
     d70:	08 c0       	rjmp	.+16     	; 0xd82 <hif_chip_wake+0x20>
     d72:	80 91 8a 2e 	lds	r24, 0x2E8A	; 0x802e8a <gstrHifCxt>
     d76:	88 23       	and	r24, r24
     d78:	21 f0       	breq	.+8      	; 0xd82 <hif_chip_wake+0x20>
     d7a:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <chip_wake>
     d7e:	81 11       	cpse	r24, r1
     d80:	08 c0       	rjmp	.+16     	; 0xd92 <hif_chip_wake+0x30>
     d82:	ea e8       	ldi	r30, 0x8A	; 138
     d84:	fe e2       	ldi	r31, 0x2E	; 46
     d86:	81 81       	ldd	r24, Z+1	; 0x01
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	81 83       	std	Z+1, r24	; 0x01
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	08 95       	ret
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	08 95       	ret

00000d94 <hif_chip_sleep_sc>:
     d94:	80 91 8b 2e 	lds	r24, 0x2E8B	; 0x802e8b <gstrHifCxt+0x1>
     d98:	88 23       	and	r24, r24
     d9a:	29 f0       	breq	.+10     	; 0xda6 <hif_chip_sleep_sc+0x12>
     d9c:	ea e8       	ldi	r30, 0x8A	; 138
     d9e:	fe e2       	ldi	r31, 0x2E	; 46
     da0:	81 81       	ldd	r24, Z+1	; 0x01
     da2:	81 50       	subi	r24, 0x01	; 1
     da4:	81 83       	std	Z+1, r24	; 0x01
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	08 95       	ret

00000daa <hif_chip_sleep>:
     daa:	80 91 8b 2e 	lds	r24, 0x2E8B	; 0x802e8b <gstrHifCxt+0x1>
     dae:	88 23       	and	r24, r24
     db0:	29 f0       	breq	.+10     	; 0xdbc <hif_chip_sleep+0x12>
     db2:	ea e8       	ldi	r30, 0x8A	; 138
     db4:	fe e2       	ldi	r31, 0x2E	; 46
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	81 50       	subi	r24, 0x01	; 1
     dba:	81 83       	std	Z+1, r24	; 0x01
     dbc:	80 91 8b 2e 	lds	r24, 0x2E8B	; 0x802e8b <gstrHifCxt+0x1>
     dc0:	81 11       	cpse	r24, r1
     dc2:	07 c0       	rjmp	.+14     	; 0xdd2 <hif_chip_sleep+0x28>
     dc4:	80 91 8a 2e 	lds	r24, 0x2E8A	; 0x802e8a <gstrHifCxt>
     dc8:	88 23       	and	r24, r24
     dca:	29 f0       	breq	.+10     	; 0xdd6 <hif_chip_sleep+0x2c>
     dcc:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <chip_sleep>
     dd0:	08 95       	ret
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	08 95       	ret
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	08 95       	ret

00000dda <hif_init>:
     dda:	2a e1       	ldi	r18, 0x1A	; 26
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e0       	ldi	r20, 0x00	; 0
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	8a e8       	ldi	r24, 0x8A	; 138
     de6:	9e e2       	ldi	r25, 0x2E	; 46
     de8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <m2m_memset>
     dec:	8d e7       	ldi	r24, 0x7D	; 125
     dee:	96 e0       	ldi	r25, 0x06	; 6
     df0:	0e 94 c2 05 	call	0xb84	; 0xb84 <nm_bsp_register_isr>
     df4:	83 e8       	ldi	r24, 0x83	; 131
     df6:	96 e0       	ldi	r25, 0x06	; 6
     df8:	80 93 9e 2e 	sts	0x2E9E, r24	; 0x802e9e <gstrHifCxt+0x14>
     dfc:	90 93 9f 2e 	sts	0x2E9F, r25	; 0x802e9f <gstrHifCxt+0x15>
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	08 95       	ret

00000e04 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     e04:	4f 92       	push	r4
     e06:	5f 92       	push	r5
     e08:	6f 92       	push	r6
     e0a:	7f 92       	push	r7
     e0c:	8f 92       	push	r8
     e0e:	9f 92       	push	r9
     e10:	af 92       	push	r10
     e12:	bf 92       	push	r11
     e14:	cf 92       	push	r12
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	66 97       	sbiw	r28, 0x16	; 22
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	a8 2e       	mov	r10, r24
     e30:	b6 2e       	mov	r11, r22
     e32:	2a 01       	movw	r4, r20
     e34:	39 01       	movw	r6, r18
     e36:	48 01       	movw	r8, r16
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     e38:	86 2f       	mov	r24, r22
     e3a:	8f 77       	andi	r24, 0x7F	; 127
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	strHif.u8Gid		= u8Gid;
     e3e:	a9 82       	std	Y+1, r10	; 0x01
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     e40:	88 e0       	ldi	r24, 0x08	; 8
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	8b 83       	std	Y+3, r24	; 0x03
     e46:	9c 83       	std	Y+4, r25	; 0x04
	if(pu8DataBuf != NULL)
     e48:	01 2b       	or	r16, r17
     e4a:	49 f0       	breq	.+18     	; 0xe5e <hif_send+0x5a>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	9c 81       	ldd	r25, Y+4	; 0x04
     e50:	8e 0d       	add	r24, r14
     e52:	9f 1d       	adc	r25, r15
     e54:	8c 0d       	add	r24, r12
     e56:	9d 1d       	adc	r25, r13
     e58:	8b 83       	std	Y+3, r24	; 0x03
     e5a:	9c 83       	std	Y+4, r25	; 0x04
     e5c:	06 c0       	rjmp	.+12     	; 0xe6a <hif_send+0x66>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	9c 81       	ldd	r25, Y+4	; 0x04
     e62:	82 0f       	add	r24, r18
     e64:	93 1f       	adc	r25, r19
     e66:	8b 83       	std	Y+3, r24	; 0x03
     e68:	9c 83       	std	Y+4, r25	; 0x04
	}
	ret = hif_chip_wake();
     e6a:	0e 94 b1 06 	call	0xd62	; 0xd62 <hif_chip_wake>
	if(ret == M2M_SUCCESS)
     e6e:	81 11       	cpse	r24, r1
     e70:	50 c1       	rjmp	.+672    	; 0x1112 <hif_send+0x30e>
	{
		volatile uint32 reg, dma_addr = 0;
     e72:	19 86       	std	Y+9, r1	; 0x09
     e74:	1a 86       	std	Y+10, r1	; 0x0a
     e76:	1b 86       	std	Y+11, r1	; 0x0b
     e78:	1c 86       	std	Y+12, r1	; 0x0c
		volatile uint16 cnt = 0;
     e7a:	19 8a       	std	Y+17, r1	; 0x11
     e7c:	1a 8a       	std	Y+18, r1	; 0x12
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     e7e:	1d 86       	std	Y+13, r1	; 0x0d
     e80:	1e 86       	std	Y+14, r1	; 0x0e
     e82:	1f 86       	std	Y+15, r1	; 0x0f
     e84:	18 8a       	std	Y+16, r1	; 0x10
		reg |= (uint32)u8Gid;
     e86:	8d 85       	ldd	r24, Y+13	; 0x0d
     e88:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8a:	af 85       	ldd	r26, Y+15	; 0x0f
     e8c:	b8 89       	ldd	r27, Y+16	; 0x10
     e8e:	8a 29       	or	r24, r10
     e90:	8d 87       	std	Y+13, r24	; 0x0d
     e92:	9e 87       	std	Y+14, r25	; 0x0e
     e94:	af 87       	std	Y+15, r26	; 0x0f
     e96:	b8 8b       	std	Y+16, r27	; 0x10
		reg |= ((uint32)u8Opcode<<8);
     e98:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9c:	af 85       	ldd	r26, Y+15	; 0x0f
     e9e:	b8 89       	ldd	r27, Y+16	; 0x10
     ea0:	9b 29       	or	r25, r11
     ea2:	8d 87       	std	Y+13, r24	; 0x0d
     ea4:	9e 87       	std	Y+14, r25	; 0x0e
     ea6:	af 87       	std	Y+15, r26	; 0x0f
     ea8:	b8 8b       	std	Y+16, r27	; 0x10
		reg |= ((uint32)strHif.u16Length<<16);
     eaa:	2b 81       	ldd	r18, Y+3	; 0x03
     eac:	3c 81       	ldd	r19, Y+4	; 0x04
     eae:	4d 85       	ldd	r20, Y+13	; 0x0d
     eb0:	5e 85       	ldd	r21, Y+14	; 0x0e
     eb2:	6f 85       	ldd	r22, Y+15	; 0x0f
     eb4:	78 89       	ldd	r23, Y+16	; 0x10
     eb6:	c9 01       	movw	r24, r18
     eb8:	a0 e0       	ldi	r26, 0x00	; 0
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	dc 01       	movw	r26, r24
     ebe:	99 27       	eor	r25, r25
     ec0:	88 27       	eor	r24, r24
     ec2:	84 2b       	or	r24, r20
     ec4:	95 2b       	or	r25, r21
     ec6:	a6 2b       	or	r26, r22
     ec8:	b7 2b       	or	r27, r23
     eca:	8d 87       	std	Y+13, r24	; 0x0d
     ecc:	9e 87       	std	Y+14, r25	; 0x0e
     ece:	af 87       	std	Y+15, r26	; 0x0f
     ed0:	b8 8b       	std	Y+16, r27	; 0x10
		ret = nm_write_reg(NMI_STATE_REG,reg);
     ed2:	2d 85       	ldd	r18, Y+13	; 0x0d
     ed4:	3e 85       	ldd	r19, Y+14	; 0x0e
     ed6:	4f 85       	ldd	r20, Y+15	; 0x0f
     ed8:	58 89       	ldd	r21, Y+16	; 0x10
     eda:	6c e8       	ldi	r22, 0x8C	; 140
     edc:	70 e1       	ldi	r23, 0x10	; 16
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
     ee6:	b8 2e       	mov	r11, r24
		if(M2M_SUCCESS != ret) goto ERR1;
     ee8:	81 11       	cpse	r24, r1
     eea:	10 c1       	rjmp	.+544    	; 0x110c <hif_send+0x308>

		reg = 0UL;
     eec:	1d 86       	std	Y+13, r1	; 0x0d
     eee:	1e 86       	std	Y+14, r1	; 0x0e
     ef0:	1f 86       	std	Y+15, r1	; 0x0f
     ef2:	18 8a       	std	Y+16, r1	; 0x10
		reg |= NBIT1;
     ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef8:	af 85       	ldd	r26, Y+15	; 0x0f
     efa:	b8 89       	ldd	r27, Y+16	; 0x10
     efc:	82 60       	ori	r24, 0x02	; 2
     efe:	8d 87       	std	Y+13, r24	; 0x0d
     f00:	9e 87       	std	Y+14, r25	; 0x0e
     f02:	af 87       	std	Y+15, r26	; 0x0f
     f04:	b8 8b       	std	Y+16, r27	; 0x10
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     f06:	2d 85       	ldd	r18, Y+13	; 0x0d
     f08:	3e 85       	ldd	r19, Y+14	; 0x0e
     f0a:	4f 85       	ldd	r20, Y+15	; 0x0f
     f0c:	58 89       	ldd	r21, Y+16	; 0x10
     f0e:	68 e7       	ldi	r22, 0x78	; 120
     f10:	70 e1       	ldi	r23, 0x10	; 16
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
     f1a:	b8 2e       	mov	r11, r24
		if(M2M_SUCCESS != ret) goto ERR1;
     f1c:	81 11       	cpse	r24, r1
     f1e:	f6 c0       	rjmp	.+492    	; 0x110c <hif_send+0x308>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
     f20:	19 86       	std	Y+9, r1	; 0x09
     f22:	1a 86       	std	Y+10, r1	; 0x0a
     f24:	1b 86       	std	Y+11, r1	; 0x0b
     f26:	1c 86       	std	Y+12, r1	; 0x0c
		
		for(cnt = 0; cnt < 1000; cnt ++)
     f28:	19 8a       	std	Y+17, r1	; 0x11
     f2a:	1a 8a       	std	Y+18, r1	; 0x12
     f2c:	89 89       	ldd	r24, Y+17	; 0x11
     f2e:	9a 89       	ldd	r25, Y+18	; 0x12
     f30:	88 3e       	cpi	r24, 0xE8	; 232
     f32:	93 40       	sbci	r25, 0x03	; 3
     f34:	c8 f5       	brcc	.+114    	; 0xfa8 <hif_send+0x1a4>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     f36:	ae 01       	movw	r20, r28
     f38:	43 5f       	subi	r20, 0xF3	; 243
     f3a:	5f 4f       	sbci	r21, 0xFF	; 255
     f3c:	68 e7       	ldi	r22, 0x78	; 120
     f3e:	70 e1       	ldi	r23, 0x10	; 16
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
			if(ret != M2M_SUCCESS) break;
     f48:	81 11       	cpse	r24, r1
     f4a:	2e c0       	rjmp	.+92     	; 0xfa8 <hif_send+0x1a4>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
     f4c:	89 89       	ldd	r24, Y+17	; 0x11
     f4e:	9a 89       	ldd	r25, Y+18	; 0x12
     f50:	84 3f       	cpi	r24, 0xF4	; 244
     f52:	91 40       	sbci	r25, 0x01	; 1
     f54:	40 f0       	brcs	.+16     	; 0xf66 <hif_send+0x162>
				if(cnt < 501) {
     f56:	89 89       	ldd	r24, Y+17	; 0x11
     f58:	9a 89       	ldd	r25, Y+18	; 0x12
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 93 05 	call	0xb26	; 0xb26 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
     f66:	8d 85       	ldd	r24, Y+13	; 0x0d
     f68:	9e 85       	ldd	r25, Y+14	; 0x0e
     f6a:	af 85       	ldd	r26, Y+15	; 0x0f
     f6c:	b8 89       	ldd	r27, Y+16	; 0x10
     f6e:	81 fd       	sbrc	r24, 1
     f70:	11 c0       	rjmp	.+34     	; 0xf94 <hif_send+0x190>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
     f72:	ae 01       	movw	r20, r28
     f74:	47 5f       	subi	r20, 0xF7	; 247
     f76:	5f 4f       	sbci	r21, 0xFF	; 255
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	74 e0       	ldi	r23, 0x04	; 4
     f7c:	85 e1       	ldi	r24, 0x15	; 21
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
     f84:	b8 2e       	mov	r11, r24
				if(ret != M2M_SUCCESS) {
     f86:	88 23       	and	r24, r24
     f88:	79 f0       	breq	.+30     	; 0xfa8 <hif_send+0x1a4>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
     f8a:	19 86       	std	Y+9, r1	; 0x09
     f8c:	1a 86       	std	Y+10, r1	; 0x0a
     f8e:	1b 86       	std	Y+11, r1	; 0x0b
     f90:	1c 86       	std	Y+12, r1	; 0x0c
					goto ERR1;
     f92:	bc c0       	rjmp	.+376    	; 0x110c <hif_send+0x308>
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
		
		for(cnt = 0; cnt < 1000; cnt ++)
     f94:	89 89       	ldd	r24, Y+17	; 0x11
     f96:	9a 89       	ldd	r25, Y+18	; 0x12
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	89 8b       	std	Y+17, r24	; 0x11
     f9c:	9a 8b       	std	Y+18, r25	; 0x12
     f9e:	89 89       	ldd	r24, Y+17	; 0x11
     fa0:	9a 89       	ldd	r25, Y+18	; 0x12
     fa2:	88 3e       	cpi	r24, 0xE8	; 232
     fa4:	93 40       	sbci	r25, 0x03	; 3
     fa6:	38 f2       	brcs	.-114    	; 0xf36 <hif_send+0x132>
				/*in case of success break */
				break;
			}
		}

		if (dma_addr != 0)
     fa8:	89 85       	ldd	r24, Y+9	; 0x09
     faa:	9a 85       	ldd	r25, Y+10	; 0x0a
     fac:	ab 85       	ldd	r26, Y+11	; 0x0b
     fae:	bc 85       	ldd	r27, Y+12	; 0x0c
     fb0:	89 2b       	or	r24, r25
     fb2:	8a 2b       	or	r24, r26
     fb4:	8b 2b       	or	r24, r27
     fb6:	09 f4       	brne	.+2      	; 0xfba <hif_send+0x1b6>
     fb8:	a2 c0       	rjmp	.+324    	; 0x10fe <hif_send+0x2fa>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
     fba:	89 85       	ldd	r24, Y+9	; 0x09
     fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fbe:	ab 85       	ldd	r26, Y+11	; 0x0b
     fc0:	bc 85       	ldd	r27, Y+12	; 0x0c
     fc2:	8d 83       	std	Y+5, r24	; 0x05
     fc4:	9e 83       	std	Y+6, r25	; 0x06
     fc6:	af 83       	std	Y+7, r26	; 0x07
     fc8:	b8 87       	std	Y+8, r27	; 0x08
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	9c 81       	ldd	r25, Y+4	; 0x04
     fce:	8b 83       	std	Y+3, r24	; 0x03
     fd0:	9c 83       	std	Y+4, r25	; 0x04
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     fd2:	6d 81       	ldd	r22, Y+5	; 0x05
     fd4:	7e 81       	ldd	r23, Y+6	; 0x06
     fd6:	8f 81       	ldd	r24, Y+7	; 0x07
     fd8:	98 85       	ldd	r25, Y+8	; 0x08
     fda:	08 e0       	ldi	r16, 0x08	; 8
     fdc:	10 e0       	ldi	r17, 0x00	; 0
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	ae 01       	movw	r20, r28
     fe4:	4f 5f       	subi	r20, 0xFF	; 255
     fe6:	5f 4f       	sbci	r21, 0xFF	; 255
     fe8:	0e 94 be 11 	call	0x237c	; 0x237c <nm_write_block>
     fec:	b8 2e       	mov	r11, r24
			if(M2M_SUCCESS != ret) goto ERR1;
     fee:	81 11       	cpse	r24, r1
     ff0:	8d c0       	rjmp	.+282    	; 0x110c <hif_send+0x308>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     ff2:	8d 81       	ldd	r24, Y+5	; 0x05
     ff4:	9e 81       	ldd	r25, Y+6	; 0x06
     ff6:	af 81       	ldd	r26, Y+7	; 0x07
     ff8:	b8 85       	ldd	r27, Y+8	; 0x08
     ffa:	08 96       	adiw	r24, 0x08	; 8
     ffc:	a1 1d       	adc	r26, r1
     ffe:	b1 1d       	adc	r27, r1
    1000:	8d 83       	std	Y+5, r24	; 0x05
    1002:	9e 83       	std	Y+6, r25	; 0x06
    1004:	af 83       	std	Y+7, r26	; 0x07
    1006:	b8 87       	std	Y+8, r27	; 0x08
			if(pu8CtrlBuf != NULL)
    1008:	41 14       	cp	r4, r1
    100a:	51 04       	cpc	r5, r1
    100c:	29 f1       	breq	.+74     	; 0x1058 <hif_send+0x254>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    100e:	c3 01       	movw	r24, r6
    1010:	a0 e0       	ldi	r26, 0x00	; 0
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	8b 8b       	std	Y+19, r24	; 0x13
    1016:	9c 8b       	std	Y+20, r25	; 0x14
    1018:	ad 8b       	std	Y+21, r26	; 0x15
    101a:	be 8b       	std	Y+22, r27	; 0x16
    101c:	6d 81       	ldd	r22, Y+5	; 0x05
    101e:	7e 81       	ldd	r23, Y+6	; 0x06
    1020:	8f 81       	ldd	r24, Y+7	; 0x07
    1022:	98 85       	ldd	r25, Y+8	; 0x08
    1024:	0b 89       	ldd	r16, Y+19	; 0x13
    1026:	1c 89       	ldd	r17, Y+20	; 0x14
    1028:	2d 89       	ldd	r18, Y+21	; 0x15
    102a:	3e 89       	ldd	r19, Y+22	; 0x16
    102c:	a2 01       	movw	r20, r4
    102e:	0e 94 be 11 	call	0x237c	; 0x237c <nm_write_block>
    1032:	b8 2e       	mov	r11, r24
				if(M2M_SUCCESS != ret) goto ERR1;
    1034:	81 11       	cpse	r24, r1
    1036:	6a c0       	rjmp	.+212    	; 0x110c <hif_send+0x308>
				u32CurrAddr += u16CtrlBufSize;
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	af 81       	ldd	r26, Y+7	; 0x07
    103e:	b8 85       	ldd	r27, Y+8	; 0x08
    1040:	2b 89       	ldd	r18, Y+19	; 0x13
    1042:	3c 89       	ldd	r19, Y+20	; 0x14
    1044:	4d 89       	ldd	r20, Y+21	; 0x15
    1046:	5e 89       	ldd	r21, Y+22	; 0x16
    1048:	82 0f       	add	r24, r18
    104a:	93 1f       	adc	r25, r19
    104c:	a4 1f       	adc	r26, r20
    104e:	b5 1f       	adc	r27, r21
    1050:	8d 83       	std	Y+5, r24	; 0x05
    1052:	9e 83       	std	Y+6, r25	; 0x06
    1054:	af 83       	std	Y+7, r26	; 0x07
    1056:	b8 87       	std	Y+8, r27	; 0x08
			}
			if(pu8DataBuf != NULL)
    1058:	81 14       	cp	r8, r1
    105a:	91 04       	cpc	r9, r1
    105c:	49 f1       	breq	.+82     	; 0x10b0 <hif_send+0x2ac>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	af 81       	ldd	r26, Y+7	; 0x07
    1064:	b8 85       	ldd	r27, Y+8	; 0x08
    1066:	c6 18       	sub	r12, r6
    1068:	d7 08       	sbc	r13, r7
    106a:	8c 0d       	add	r24, r12
    106c:	9d 1d       	adc	r25, r13
    106e:	a1 1d       	adc	r26, r1
    1070:	b1 1d       	adc	r27, r1
    1072:	8d 83       	std	Y+5, r24	; 0x05
    1074:	9e 83       	std	Y+6, r25	; 0x06
    1076:	af 83       	std	Y+7, r26	; 0x07
    1078:	b8 87       	std	Y+8, r27	; 0x08
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    107a:	67 01       	movw	r12, r14
    107c:	e1 2c       	mov	r14, r1
    107e:	f1 2c       	mov	r15, r1
    1080:	6d 81       	ldd	r22, Y+5	; 0x05
    1082:	7e 81       	ldd	r23, Y+6	; 0x06
    1084:	8f 81       	ldd	r24, Y+7	; 0x07
    1086:	98 85       	ldd	r25, Y+8	; 0x08
    1088:	97 01       	movw	r18, r14
    108a:	86 01       	movw	r16, r12
    108c:	a4 01       	movw	r20, r8
    108e:	0e 94 be 11 	call	0x237c	; 0x237c <nm_write_block>
    1092:	b8 2e       	mov	r11, r24
				if(M2M_SUCCESS != ret) goto ERR1;
    1094:	81 11       	cpse	r24, r1
    1096:	3a c0       	rjmp	.+116    	; 0x110c <hif_send+0x308>
				u32CurrAddr += u16DataSize;
    1098:	8d 81       	ldd	r24, Y+5	; 0x05
    109a:	9e 81       	ldd	r25, Y+6	; 0x06
    109c:	af 81       	ldd	r26, Y+7	; 0x07
    109e:	b8 85       	ldd	r27, Y+8	; 0x08
    10a0:	8c 0d       	add	r24, r12
    10a2:	9d 1d       	adc	r25, r13
    10a4:	ae 1d       	adc	r26, r14
    10a6:	bf 1d       	adc	r27, r15
    10a8:	8d 83       	std	Y+5, r24	; 0x05
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	af 83       	std	Y+7, r26	; 0x07
    10ae:	b8 87       	std	Y+8, r27	; 0x08
			}

			reg = dma_addr << 2;
    10b0:	89 85       	ldd	r24, Y+9	; 0x09
    10b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b4:	ab 85       	ldd	r26, Y+11	; 0x0b
    10b6:	bc 85       	ldd	r27, Y+12	; 0x0c
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	aa 1f       	adc	r26, r26
    10be:	bb 1f       	adc	r27, r27
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	aa 1f       	adc	r26, r26
    10c6:	bb 1f       	adc	r27, r27
    10c8:	8d 87       	std	Y+13, r24	; 0x0d
    10ca:	9e 87       	std	Y+14, r25	; 0x0e
    10cc:	af 87       	std	Y+15, r26	; 0x0f
    10ce:	b8 8b       	std	Y+16, r27	; 0x10
			reg |= NBIT1;
    10d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d4:	af 85       	ldd	r26, Y+15	; 0x0f
    10d6:	b8 89       	ldd	r27, Y+16	; 0x10
    10d8:	82 60       	ori	r24, 0x02	; 2
    10da:	8d 87       	std	Y+13, r24	; 0x0d
    10dc:	9e 87       	std	Y+14, r25	; 0x0e
    10de:	af 87       	std	Y+15, r26	; 0x0f
    10e0:	b8 8b       	std	Y+16, r27	; 0x10
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    10e2:	2d 85       	ldd	r18, Y+13	; 0x0d
    10e4:	3e 85       	ldd	r19, Y+14	; 0x0e
    10e6:	4f 85       	ldd	r20, Y+15	; 0x0f
    10e8:	58 89       	ldd	r21, Y+16	; 0x10
    10ea:	6c e6       	ldi	r22, 0x6C	; 108
    10ec:	70 e1       	ldi	r23, 0x10	; 16
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
    10f6:	b8 2e       	mov	r11, r24
			if(M2M_SUCCESS != ret) goto ERR1;
    10f8:	81 11       	cpse	r24, r1
    10fa:	08 c0       	rjmp	.+16     	; 0x110c <hif_send+0x308>
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <hif_send+0x302>
		}
		else
		{
			ret = hif_chip_sleep();
    10fe:	0e 94 d5 06 	call	0xdaa	; 0xdaa <hif_chip_sleep>
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    1102:	8d ef       	ldi	r24, 0xFD	; 253
			goto ERR2;
    1104:	06 c0       	rjmp	.+12     	; 0x1112 <hif_send+0x30e>
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR2;
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    1106:	0e 94 d5 06 	call	0xdaa	; 0xdaa <hif_chip_sleep>
	return ret;
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <hif_send+0x30e>
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    110c:	0e 94 ca 06 	call	0xd94	; 0xd94 <hif_chip_sleep_sc>
    1110:	8b 2d       	mov	r24, r11
ERR2:
	/*logical error*/
	return ret;
}
    1112:	66 96       	adiw	r28, 0x16	; 22
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	cf 90       	pop	r12
    1128:	bf 90       	pop	r11
    112a:	af 90       	pop	r10
    112c:	9f 90       	pop	r9
    112e:	8f 90       	pop	r8
    1130:	7f 90       	pop	r7
    1132:	6f 90       	pop	r6
    1134:	5f 90       	pop	r5
    1136:	4f 90       	pop	r4
    1138:	08 95       	ret

0000113a <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    113a:	4f 92       	push	r4
    113c:	5f 92       	push	r5
    113e:	6f 92       	push	r6
    1140:	7f 92       	push	r7
    1142:	8f 92       	push	r8
    1144:	9f 92       	push	r9
    1146:	bf 92       	push	r11
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	2c 97       	sbiw	r28, 0x0c	; 12
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	de bf       	out	0x3e, r29	; 62
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    1162:	0f 2e       	mov	r0, r31
    1164:	fa e8       	ldi	r31, 0x8A	; 138
    1166:	ef 2e       	mov	r14, r31
    1168:	fe e2       	ldi	r31, 0x2E	; 46
    116a:	ff 2e       	mov	r15, r31
    116c:	f0 2d       	mov	r31, r0
			nm_bsp_interrupt_ctrl(0);
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
			if(ret != M2M_SUCCESS)goto ERR1;
			gstrHifCxt.u8HifRXDone = 1;
    116e:	dd 24       	eor	r13, r13
    1170:	d3 94       	inc	r13
    1172:	cd 2c       	mov	r12, r13
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
					ret = M2M_ERR_BUS_FAIL;
    1174:	0f 2e       	mov	r0, r31
    1176:	fa ef       	ldi	r31, 0xFA	; 250
    1178:	bf 2e       	mov	r11, r31
    117a:	f0 2d       	mov	r31, r0
*/

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    117c:	4f c1       	rjmp	.+670    	; 0x141c <hif_handle_isr+0x2e2>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    117e:	d7 01       	movw	r26, r14
    1180:	13 96       	adiw	r26, 0x03	; 3
    1182:	8c 91       	ld	r24, X
    1184:	13 97       	sbiw	r26, 0x03	; 3
    1186:	81 50       	subi	r24, 0x01	; 1
    1188:	13 96       	adiw	r26, 0x03	; 3
    118a:	8c 93       	st	X, r24
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    118c:	ae 01       	movw	r20, r28
    118e:	47 5f       	subi	r20, 0xF7	; 247
    1190:	5f 4f       	sbci	r21, 0xFF	; 255
    1192:	60 e7       	ldi	r22, 0x70	; 112
    1194:	70 e1       	ldi	r23, 0x10	; 16
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
	if(M2M_SUCCESS == ret)
    119e:	81 11       	cpse	r24, r1
    11a0:	f5 cf       	rjmp	.-22     	; 0x118c <hif_handle_isr+0x52>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    11a2:	89 85       	ldd	r24, Y+9	; 0x09
    11a4:	80 ff       	sbrs	r24, 0
    11a6:	f2 cf       	rjmp	.-28     	; 0x118c <hif_handle_isr+0x52>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	0e 94 d6 05 	call	0xbac	; 0xbac <nm_bsp_interrupt_ctrl>
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    11ae:	89 85       	ldd	r24, Y+9	; 0x09
    11b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b2:	ab 85       	ldd	r26, Y+11	; 0x0b
    11b4:	bc 85       	ldd	r27, Y+12	; 0x0c
    11b6:	9c 01       	movw	r18, r24
    11b8:	ad 01       	movw	r20, r26
    11ba:	2e 7f       	andi	r18, 0xFE	; 254
    11bc:	29 87       	std	Y+9, r18	; 0x09
    11be:	3a 87       	std	Y+10, r19	; 0x0a
    11c0:	4b 87       	std	Y+11, r20	; 0x0b
    11c2:	5c 87       	std	Y+12, r21	; 0x0c
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    11c4:	60 e7       	ldi	r22, 0x70	; 112
    11c6:	70 e1       	ldi	r23, 0x10	; 16
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
			if(ret != M2M_SUCCESS)goto ERR1;
    11d0:	81 11       	cpse	r24, r1
    11d2:	dc cf       	rjmp	.-72     	; 0x118c <hif_handle_isr+0x52>
			gstrHifCxt.u8HifRXDone = 1;
    11d4:	f7 01       	movw	r30, r14
    11d6:	d2 82       	std	Z+2, r13	; 0x02
			size = (uint16)((reg >> 2) & 0xfff);
    11d8:	89 85       	ldd	r24, Y+9	; 0x09
    11da:	9a 85       	ldd	r25, Y+10	; 0x0a
    11dc:	ab 85       	ldd	r26, Y+11	; 0x0b
    11de:	bc 85       	ldd	r27, Y+12	; 0x0c
    11e0:	b6 95       	lsr	r27
    11e2:	a7 95       	ror	r26
    11e4:	97 95       	ror	r25
    11e6:	87 95       	ror	r24
    11e8:	b6 95       	lsr	r27
    11ea:	a7 95       	ror	r26
    11ec:	97 95       	ror	r25
    11ee:	87 95       	ror	r24
    11f0:	4c 01       	movw	r8, r24
    11f2:	ff e0       	ldi	r31, 0x0F	; 15
    11f4:	9f 22       	and	r9, r31
			if (size > 0) {
    11f6:	81 14       	cp	r8, r1
    11f8:	91 04       	cpc	r9, r1
    11fa:	41 f2       	breq	.-112    	; 0x118c <hif_handle_isr+0x52>
				uint32 address = 0;
    11fc:	19 82       	std	Y+1, r1	; 0x01
    11fe:	1a 82       	std	Y+2, r1	; 0x02
    1200:	1b 82       	std	Y+3, r1	; 0x03
    1202:	1c 82       	std	Y+4, r1	; 0x04
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1204:	ae 01       	movw	r20, r28
    1206:	4f 5f       	subi	r20, 0xFF	; 255
    1208:	5f 4f       	sbci	r21, 0xFF	; 255
    120a:	64 e8       	ldi	r22, 0x84	; 132
    120c:	70 e1       	ldi	r23, 0x10	; 16
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
    1216:	18 2f       	mov	r17, r24
				if(M2M_SUCCESS != ret)
    1218:	88 23       	and	r24, r24
    121a:	21 f0       	breq	.+8      	; 0x1224 <hif_handle_isr+0xea>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
					nm_bsp_interrupt_ctrl(1);
    121c:	8c 2d       	mov	r24, r12
    121e:	0e 94 d6 05 	call	0xbac	; 0xbac <nm_bsp_interrupt_ctrl>
    1222:	fa c0       	rjmp	.+500    	; 0x1418 <hif_handle_isr+0x2de>
					goto ERR1;
				}
				gstrHifCxt.u32RxAddr = address;
    1224:	69 81       	ldd	r22, Y+1	; 0x01
    1226:	7a 81       	ldd	r23, Y+2	; 0x02
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	9c 81       	ldd	r25, Y+4	; 0x04
    122c:	d7 01       	movw	r26, r14
    122e:	14 96       	adiw	r26, 0x04	; 4
    1230:	6d 93       	st	X+, r22
    1232:	7d 93       	st	X+, r23
    1234:	8d 93       	st	X+, r24
    1236:	9c 93       	st	X, r25
    1238:	17 97       	sbiw	r26, 0x07	; 7
				gstrHifCxt.u32RxSize = size;
    123a:	84 01       	movw	r16, r8
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	f7 01       	movw	r30, r14
    1242:	00 87       	std	Z+8, r16	; 0x08
    1244:	11 87       	std	Z+9, r17	; 0x09
    1246:	22 87       	std	Z+10, r18	; 0x0a
    1248:	33 87       	std	Z+11, r19	; 0x0b
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    124a:	04 e0       	ldi	r16, 0x04	; 4
    124c:	10 e0       	ldi	r17, 0x00	; 0
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	ae 01       	movw	r20, r28
    1254:	4b 5f       	subi	r20, 0xFB	; 251
    1256:	5f 4f       	sbci	r21, 0xFF	; 255
    1258:	0e 94 43 11 	call	0x2286	; 0x2286 <nm_read_block>
    125c:	18 2f       	mov	r17, r24
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    125e:	8f 81       	ldd	r24, Y+7	; 0x07
    1260:	98 85       	ldd	r25, Y+8	; 0x08
    1262:	8f 83       	std	Y+7, r24	; 0x07
    1264:	98 87       	std	Y+8, r25	; 0x08
				if(M2M_SUCCESS != ret)
    1266:	11 23       	and	r17, r17
    1268:	21 f0       	breq	.+8      	; 0x1272 <hif_handle_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
					nm_bsp_interrupt_ctrl(1);
    126a:	8c 2d       	mov	r24, r12
    126c:	0e 94 d6 05 	call	0xbac	; 0xbac <nm_bsp_interrupt_ctrl>
    1270:	d3 c0       	rjmp	.+422    	; 0x1418 <hif_handle_isr+0x2de>
					goto ERR1;
				}
				if(strHif.u16Length != size)
    1272:	8f 81       	ldd	r24, Y+7	; 0x07
    1274:	98 85       	ldd	r25, Y+8	; 0x08
    1276:	88 16       	cp	r8, r24
    1278:	99 06       	cpc	r9, r25
    127a:	69 f0       	breq	.+26     	; 0x1296 <hif_handle_isr+0x15c>
				{
					if((size - strHif.u16Length) > 4)
    127c:	8f 81       	ldd	r24, Y+7	; 0x07
    127e:	98 85       	ldd	r25, Y+8	; 0x08
    1280:	94 01       	movw	r18, r8
    1282:	28 1b       	sub	r18, r24
    1284:	39 0b       	sbc	r19, r25
    1286:	25 30       	cpi	r18, 0x05	; 5
    1288:	31 05       	cpc	r19, r1
    128a:	28 f0       	brcs	.+10     	; 0x1296 <hif_handle_isr+0x15c>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    128c:	8c 2d       	mov	r24, r12
    128e:	0e 94 d6 05 	call	0xbac	; 0xbac <nm_bsp_interrupt_ctrl>
						ret = M2M_ERR_BUS_FAIL;
    1292:	1b 2d       	mov	r17, r11
    1294:	c1 c0       	rjmp	.+386    	; 0x1418 <hif_handle_isr+0x2de>
						goto ERR1;
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	e9 f4       	brne	.+58     	; 0x12d6 <hif_handle_isr+0x19c>
				{
					if(gstrHifCxt.pfWifiCb)
    129c:	d7 01       	movw	r26, r14
    129e:	1c 96       	adiw	r26, 0x0c	; 12
    12a0:	8d 91       	ld	r24, X+
    12a2:	9c 91       	ld	r25, X
    12a4:	1d 97       	sbiw	r26, 0x0d	; 13
    12a6:	89 2b       	or	r24, r25
    12a8:	09 f4       	brne	.+2      	; 0x12ac <hif_handle_isr+0x172>
    12aa:	a9 c0       	rjmp	.+338    	; 0x13fe <hif_handle_isr+0x2c4>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    12ac:	1c 96       	adiw	r26, 0x0c	; 12
    12ae:	ed 91       	ld	r30, X+
    12b0:	fc 91       	ld	r31, X
    12b2:	1d 97       	sbiw	r26, 0x0d	; 13
    12b4:	6f 81       	ldd	r22, Y+7	; 0x07
    12b6:	78 85       	ldd	r23, Y+8	; 0x08
    12b8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ba:	49 80       	ldd	r4, Y+1	; 0x01
    12bc:	5a 80       	ldd	r5, Y+2	; 0x02
    12be:	6b 80       	ldd	r6, Y+3	; 0x03
    12c0:	7c 80       	ldd	r7, Y+4	; 0x04
    12c2:	a3 01       	movw	r20, r6
    12c4:	92 01       	movw	r18, r4
    12c6:	28 5f       	subi	r18, 0xF8	; 248
    12c8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ca:	4f 4f       	sbci	r20, 0xFF	; 255
    12cc:	5f 4f       	sbci	r21, 0xFF	; 255
    12ce:	68 50       	subi	r22, 0x08	; 8
    12d0:	71 09       	sbc	r23, r1
    12d2:	09 95       	icall
    12d4:	94 c0       	rjmp	.+296    	; 0x13fe <hif_handle_isr+0x2c4>
					else
						M2M_ERR("WIFI callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	d1 f4       	brne	.+52     	; 0x1310 <hif_handle_isr+0x1d6>
				{
					if(gstrHifCxt.pfIpCb)
    12dc:	f7 01       	movw	r30, r14
    12de:	86 85       	ldd	r24, Z+14	; 0x0e
    12e0:	97 85       	ldd	r25, Z+15	; 0x0f
    12e2:	89 2b       	or	r24, r25
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <hif_handle_isr+0x1ae>
    12e6:	8b c0       	rjmp	.+278    	; 0x13fe <hif_handle_isr+0x2c4>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    12e8:	06 84       	ldd	r0, Z+14	; 0x0e
    12ea:	f7 85       	ldd	r31, Z+15	; 0x0f
    12ec:	e0 2d       	mov	r30, r0
    12ee:	6f 81       	ldd	r22, Y+7	; 0x07
    12f0:	78 85       	ldd	r23, Y+8	; 0x08
    12f2:	8e 81       	ldd	r24, Y+6	; 0x06
    12f4:	49 80       	ldd	r4, Y+1	; 0x01
    12f6:	5a 80       	ldd	r5, Y+2	; 0x02
    12f8:	6b 80       	ldd	r6, Y+3	; 0x03
    12fa:	7c 80       	ldd	r7, Y+4	; 0x04
    12fc:	a3 01       	movw	r20, r6
    12fe:	92 01       	movw	r18, r4
    1300:	28 5f       	subi	r18, 0xF8	; 248
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	4f 4f       	sbci	r20, 0xFF	; 255
    1306:	5f 4f       	sbci	r21, 0xFF	; 255
    1308:	68 50       	subi	r22, 0x08	; 8
    130a:	71 09       	sbc	r23, r1
    130c:	09 95       	icall
    130e:	77 c0       	rjmp	.+238    	; 0x13fe <hif_handle_isr+0x2c4>
					else
						M2M_ERR("Scoket callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    1310:	8d 81       	ldd	r24, Y+5	; 0x05
    1312:	84 30       	cpi	r24, 0x04	; 4
    1314:	e9 f4       	brne	.+58     	; 0x1350 <hif_handle_isr+0x216>
				{
					if(gstrHifCxt.pfOtaCb)
    1316:	d7 01       	movw	r26, r14
    1318:	50 96       	adiw	r26, 0x10	; 16
    131a:	8d 91       	ld	r24, X+
    131c:	9c 91       	ld	r25, X
    131e:	51 97       	sbiw	r26, 0x11	; 17
    1320:	89 2b       	or	r24, r25
    1322:	09 f4       	brne	.+2      	; 0x1326 <hif_handle_isr+0x1ec>
    1324:	6c c0       	rjmp	.+216    	; 0x13fe <hif_handle_isr+0x2c4>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1326:	50 96       	adiw	r26, 0x10	; 16
    1328:	ed 91       	ld	r30, X+
    132a:	fc 91       	ld	r31, X
    132c:	51 97       	sbiw	r26, 0x11	; 17
    132e:	6f 81       	ldd	r22, Y+7	; 0x07
    1330:	78 85       	ldd	r23, Y+8	; 0x08
    1332:	8e 81       	ldd	r24, Y+6	; 0x06
    1334:	49 80       	ldd	r4, Y+1	; 0x01
    1336:	5a 80       	ldd	r5, Y+2	; 0x02
    1338:	6b 80       	ldd	r6, Y+3	; 0x03
    133a:	7c 80       	ldd	r7, Y+4	; 0x04
    133c:	a3 01       	movw	r20, r6
    133e:	92 01       	movw	r18, r4
    1340:	28 5f       	subi	r18, 0xF8	; 248
    1342:	3f 4f       	sbci	r19, 0xFF	; 255
    1344:	4f 4f       	sbci	r20, 0xFF	; 255
    1346:	5f 4f       	sbci	r21, 0xFF	; 255
    1348:	68 50       	subi	r22, 0x08	; 8
    134a:	71 09       	sbc	r23, r1
    134c:	09 95       	icall
    134e:	57 c0       	rjmp	.+174    	; 0x13fe <hif_handle_isr+0x2c4>
					else
						M2M_ERR("Ota callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	86 30       	cpi	r24, 0x06	; 6
    1354:	d1 f4       	brne	.+52     	; 0x138a <hif_handle_isr+0x250>
				{
					if(gstrHifCxt.pfCryptoCb)
    1356:	f7 01       	movw	r30, r14
    1358:	86 89       	ldd	r24, Z+22	; 0x16
    135a:	97 89       	ldd	r25, Z+23	; 0x17
    135c:	89 2b       	or	r24, r25
    135e:	09 f4       	brne	.+2      	; 0x1362 <hif_handle_isr+0x228>
    1360:	4e c0       	rjmp	.+156    	; 0x13fe <hif_handle_isr+0x2c4>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1362:	06 88       	ldd	r0, Z+22	; 0x16
    1364:	f7 89       	ldd	r31, Z+23	; 0x17
    1366:	e0 2d       	mov	r30, r0
    1368:	6f 81       	ldd	r22, Y+7	; 0x07
    136a:	78 85       	ldd	r23, Y+8	; 0x08
    136c:	8e 81       	ldd	r24, Y+6	; 0x06
    136e:	49 80       	ldd	r4, Y+1	; 0x01
    1370:	5a 80       	ldd	r5, Y+2	; 0x02
    1372:	6b 80       	ldd	r6, Y+3	; 0x03
    1374:	7c 80       	ldd	r7, Y+4	; 0x04
    1376:	a3 01       	movw	r20, r6
    1378:	92 01       	movw	r18, r4
    137a:	28 5f       	subi	r18, 0xF8	; 248
    137c:	3f 4f       	sbci	r19, 0xFF	; 255
    137e:	4f 4f       	sbci	r20, 0xFF	; 255
    1380:	5f 4f       	sbci	r21, 0xFF	; 255
    1382:	68 50       	subi	r22, 0x08	; 8
    1384:	71 09       	sbc	r23, r1
    1386:	09 95       	icall
    1388:	3a c0       	rjmp	.+116    	; 0x13fe <hif_handle_isr+0x2c4>

					else
						M2M_ERR("Crypto callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	87 30       	cpi	r24, 0x07	; 7
    138e:	e1 f4       	brne	.+56     	; 0x13c8 <hif_handle_isr+0x28e>
				{
					if(gstrHifCxt.pfSigmaCb)
    1390:	d7 01       	movw	r26, r14
    1392:	52 96       	adiw	r26, 0x12	; 18
    1394:	8d 91       	ld	r24, X+
    1396:	9c 91       	ld	r25, X
    1398:	53 97       	sbiw	r26, 0x13	; 19
    139a:	89 2b       	or	r24, r25
    139c:	81 f1       	breq	.+96     	; 0x13fe <hif_handle_isr+0x2c4>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    139e:	52 96       	adiw	r26, 0x12	; 18
    13a0:	ed 91       	ld	r30, X+
    13a2:	fc 91       	ld	r31, X
    13a4:	53 97       	sbiw	r26, 0x13	; 19
    13a6:	6f 81       	ldd	r22, Y+7	; 0x07
    13a8:	78 85       	ldd	r23, Y+8	; 0x08
    13aa:	8e 81       	ldd	r24, Y+6	; 0x06
    13ac:	49 80       	ldd	r4, Y+1	; 0x01
    13ae:	5a 80       	ldd	r5, Y+2	; 0x02
    13b0:	6b 80       	ldd	r6, Y+3	; 0x03
    13b2:	7c 80       	ldd	r7, Y+4	; 0x04
    13b4:	a3 01       	movw	r20, r6
    13b6:	92 01       	movw	r18, r4
    13b8:	28 5f       	subi	r18, 0xF8	; 248
    13ba:	3f 4f       	sbci	r19, 0xFF	; 255
    13bc:	4f 4f       	sbci	r20, 0xFF	; 255
    13be:	5f 4f       	sbci	r21, 0xFF	; 255
    13c0:	68 50       	subi	r22, 0x08	; 8
    13c2:	71 09       	sbc	r23, r1
    13c4:	09 95       	icall
    13c6:	1b c0       	rjmp	.+54     	; 0x13fe <hif_handle_isr+0x2c4>
					else
						M2M_ERR("Sigma callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	85 30       	cpi	r24, 0x05	; 5
    13cc:	11 f5       	brne	.+68     	; 0x1412 <hif_handle_isr+0x2d8>
				{
				    if(gstrHifCxt.pfSslCb)
    13ce:	f7 01       	movw	r30, r14
    13d0:	80 8d       	ldd	r24, Z+24	; 0x18
    13d2:	91 8d       	ldd	r25, Z+25	; 0x19
    13d4:	89 2b       	or	r24, r25
    13d6:	99 f0       	breq	.+38     	; 0x13fe <hif_handle_isr+0x2c4>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    13d8:	00 8c       	ldd	r0, Z+24	; 0x18
    13da:	f1 8d       	ldd	r31, Z+25	; 0x19
    13dc:	e0 2d       	mov	r30, r0
    13de:	6f 81       	ldd	r22, Y+7	; 0x07
    13e0:	78 85       	ldd	r23, Y+8	; 0x08
    13e2:	8e 81       	ldd	r24, Y+6	; 0x06
    13e4:	49 80       	ldd	r4, Y+1	; 0x01
    13e6:	5a 80       	ldd	r5, Y+2	; 0x02
    13e8:	6b 80       	ldd	r6, Y+3	; 0x03
    13ea:	7c 80       	ldd	r7, Y+4	; 0x04
    13ec:	a3 01       	movw	r20, r6
    13ee:	92 01       	movw	r18, r4
    13f0:	28 5f       	subi	r18, 0xF8	; 248
    13f2:	3f 4f       	sbci	r19, 0xFF	; 255
    13f4:	4f 4f       	sbci	r20, 0xFF	; 255
    13f6:	5f 4f       	sbci	r21, 0xFF	; 255
    13f8:	68 50       	subi	r22, 0x08	; 8
    13fa:	71 09       	sbc	r23, r1
    13fc:	09 95       	icall
				{
					M2M_ERR("(hif) invalid group ID\n");
					ret = M2M_ERR_BUS_FAIL;
					goto ERR1;
				}
				if(gstrHifCxt.u8HifRXDone)
    13fe:	d7 01       	movw	r26, r14
    1400:	12 96       	adiw	r26, 0x02	; 2
    1402:	8c 91       	ld	r24, X
    1404:	88 23       	and	r24, r24
    1406:	41 f0       	breq	.+16     	; 0x1418 <hif_handle_isr+0x2de>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
					ret = hif_set_rx_done();
    1408:	0e 94 84 06 	call	0xd08	; 0xd08 <hif_set_rx_done>
					if(ret != M2M_SUCCESS) goto ERR1;
    140c:	81 11       	cpse	r24, r1
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <hif_handle_isr+0x2dc>
    1410:	03 c0       	rjmp	.+6      	; 0x1418 <hif_handle_isr+0x2de>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
					ret = M2M_ERR_BUS_FAIL;
    1412:	1b 2d       	mov	r17, r11
    1414:	01 c0       	rjmp	.+2      	; 0x1418 <hif_handle_isr+0x2de>
					goto ERR1;
				}
				if(gstrHifCxt.u8HifRXDone)
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
					ret = hif_set_rx_done();
    1416:	18 2f       	mov	r17, r24
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
    1418:	11 11       	cpse	r17, r1
    141a:	b8 ce       	rjmp	.-656    	; 0x118c <hif_handle_isr+0x52>
*/

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    141c:	f7 01       	movw	r30, r14
    141e:	83 81       	ldd	r24, Z+3	; 0x03
    1420:	81 11       	cpse	r24, r1
    1422:	ad ce       	rjmp	.-678    	; 0x117e <hif_handle_isr+0x44>
			}
		}
	}

	return ret;
}
    1424:	2c 96       	adiw	r28, 0x0c	; 12
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	ff 90       	pop	r15
    1434:	ef 90       	pop	r14
    1436:	df 90       	pop	r13
    1438:	cf 90       	pop	r12
    143a:	bf 90       	pop	r11
    143c:	9f 90       	pop	r9
    143e:	8f 90       	pop	r8
    1440:	7f 90       	pop	r7
    1442:	6f 90       	pop	r6
    1444:	5f 90       	pop	r5
    1446:	4f 90       	pop	r4
    1448:	08 95       	ret

0000144a <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    144a:	4f 92       	push	r4
    144c:	5f 92       	push	r5
    144e:	6f 92       	push	r6
    1450:	7f 92       	push	r7
    1452:	8f 92       	push	r8
    1454:	9f 92       	push	r9
    1456:	af 92       	push	r10
    1458:	bf 92       	push	r11
    145a:	cf 92       	push	r12
    145c:	df 92       	push	r13
    145e:	ef 92       	push	r14
    1460:	ff 92       	push	r15
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
    1466:	cf 93       	push	r28
    1468:	c0 2f       	mov	r28, r16
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    146a:	61 15       	cp	r22, r1
    146c:	71 05       	cpc	r23, r1
    146e:	81 05       	cpc	r24, r1
    1470:	91 05       	cpc	r25, r1
    1472:	31 f0       	breq	.+12     	; 0x1480 <hif_receive+0x36>
    1474:	41 15       	cp	r20, r1
    1476:	51 05       	cpc	r21, r1
    1478:	19 f0       	breq	.+6      	; 0x1480 <hif_receive+0x36>
    147a:	21 15       	cp	r18, r1
    147c:	31 05       	cpc	r19, r1
    147e:	31 f4       	brne	.+12     	; 0x148c <hif_receive+0x42>
	{
		if(isDone)
    1480:	cc 23       	and	r28, r28
    1482:	09 f4       	brne	.+2      	; 0x1486 <hif_receive+0x3c>
    1484:	56 c0       	rjmp	.+172    	; 0x1532 <hif_receive+0xe8>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    1486:	0e 94 84 06 	call	0xd08	; 0xd08 <hif_set_rx_done>
    148a:	5a c0       	rjmp	.+180    	; 0x1540 <hif_receive+0xf6>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    148c:	89 01       	movw	r16, r18
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	c0 90 92 2e 	lds	r12, 0x2E92	; 0x802e92 <gstrHifCxt+0x8>
    1496:	d0 90 93 2e 	lds	r13, 0x2E93	; 0x802e93 <gstrHifCxt+0x9>
    149a:	e0 90 94 2e 	lds	r14, 0x2E94	; 0x802e94 <gstrHifCxt+0xa>
    149e:	f0 90 95 2e 	lds	r15, 0x2E95	; 0x802e95 <gstrHifCxt+0xb>
    14a2:	c0 16       	cp	r12, r16
    14a4:	d1 06       	cpc	r13, r17
    14a6:	e2 06       	cpc	r14, r18
    14a8:	f3 06       	cpc	r15, r19
    14aa:	08 f4       	brcc	.+2      	; 0x14ae <hif_receive+0x64>
    14ac:	44 c0       	rjmp	.+136    	; 0x1536 <hif_receive+0xec>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    14ae:	c0 90 8e 2e 	lds	r12, 0x2E8E	; 0x802e8e <gstrHifCxt+0x4>
    14b2:	d0 90 8f 2e 	lds	r13, 0x2E8F	; 0x802e8f <gstrHifCxt+0x5>
    14b6:	e0 90 90 2e 	lds	r14, 0x2E90	; 0x802e90 <gstrHifCxt+0x6>
    14ba:	f0 90 91 2e 	lds	r15, 0x2E91	; 0x802e91 <gstrHifCxt+0x7>
    14be:	6c 15       	cp	r22, r12
    14c0:	7d 05       	cpc	r23, r13
    14c2:	8e 05       	cpc	r24, r14
    14c4:	9f 05       	cpc	r25, r15
    14c6:	c8 f1       	brcs	.+114    	; 0x153a <hif_receive+0xf0>
    14c8:	6b 01       	movw	r12, r22
    14ca:	7c 01       	movw	r14, r24
    14cc:	c0 0e       	add	r12, r16
    14ce:	d1 1e       	adc	r13, r17
    14d0:	e2 1e       	adc	r14, r18
    14d2:	f3 1e       	adc	r15, r19
    14d4:	ea e8       	ldi	r30, 0x8A	; 138
    14d6:	fe e2       	ldi	r31, 0x2E	; 46
    14d8:	44 80       	ldd	r4, Z+4	; 0x04
    14da:	55 80       	ldd	r5, Z+5	; 0x05
    14dc:	66 80       	ldd	r6, Z+6	; 0x06
    14de:	77 80       	ldd	r7, Z+7	; 0x07
    14e0:	80 84       	ldd	r8, Z+8	; 0x08
    14e2:	91 84       	ldd	r9, Z+9	; 0x09
    14e4:	a2 84       	ldd	r10, Z+10	; 0x0a
    14e6:	b3 84       	ldd	r11, Z+11	; 0x0b
    14e8:	84 0c       	add	r8, r4
    14ea:	95 1c       	adc	r9, r5
    14ec:	a6 1c       	adc	r10, r6
    14ee:	b7 1c       	adc	r11, r7
    14f0:	8c 14       	cp	r8, r12
    14f2:	9d 04       	cpc	r9, r13
    14f4:	ae 04       	cpc	r10, r14
    14f6:	bf 04       	cpc	r11, r15
    14f8:	10 f1       	brcs	.+68     	; 0x153e <hif_receive+0xf4>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    14fa:	0e 94 43 11 	call	0x2286	; 0x2286 <nm_read_block>
	if(ret != M2M_SUCCESS)goto ERR1;
    14fe:	81 11       	cpse	r24, r1
    1500:	1f c0       	rjmp	.+62     	; 0x1540 <hif_receive+0xf6>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    1502:	ea e8       	ldi	r30, 0x8A	; 138
    1504:	fe e2       	ldi	r31, 0x2E	; 46
    1506:	04 81       	ldd	r16, Z+4	; 0x04
    1508:	15 81       	ldd	r17, Z+5	; 0x05
    150a:	26 81       	ldd	r18, Z+6	; 0x06
    150c:	37 81       	ldd	r19, Z+7	; 0x07
    150e:	40 85       	ldd	r20, Z+8	; 0x08
    1510:	51 85       	ldd	r21, Z+9	; 0x09
    1512:	62 85       	ldd	r22, Z+10	; 0x0a
    1514:	73 85       	ldd	r23, Z+11	; 0x0b
    1516:	40 0f       	add	r20, r16
    1518:	51 1f       	adc	r21, r17
    151a:	62 1f       	adc	r22, r18
    151c:	73 1f       	adc	r23, r19
    151e:	c4 16       	cp	r12, r20
    1520:	d5 06       	cpc	r13, r21
    1522:	e6 06       	cpc	r14, r22
    1524:	f7 06       	cpc	r15, r23
    1526:	11 f0       	breq	.+4      	; 0x152c <hif_receive+0xe2>
    1528:	cc 23       	and	r28, r28
    152a:	51 f0       	breq	.+20     	; 0x1540 <hif_receive+0xf6>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    152c:	0e 94 84 06 	call	0xd08	; 0xd08 <hif_set_rx_done>
    1530:	07 c0       	rjmp	.+14     	; 0x1540 <hif_receive+0xf6>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    1532:	84 ef       	ldi	r24, 0xF4	; 244
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <hif_receive+0xf6>
		goto ERR1;
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
	{
		ret = M2M_ERR_FAIL;
    1536:	84 ef       	ldi	r24, 0xF4	; 244
    1538:	03 c0       	rjmp	.+6      	; 0x1540 <hif_receive+0xf6>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
	{
		ret = M2M_ERR_FAIL;
    153a:	84 ef       	ldi	r24, 0xF4	; 244
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <hif_receive+0xf6>
    153e:	84 ef       	ldi	r24, 0xF4	; 244
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	ff 90       	pop	r15
    1548:	ef 90       	pop	r14
    154a:	df 90       	pop	r13
    154c:	cf 90       	pop	r12
    154e:	bf 90       	pop	r11
    1550:	af 90       	pop	r10
    1552:	9f 90       	pop	r9
    1554:	8f 90       	pop	r8
    1556:	7f 90       	pop	r7
    1558:	6f 90       	pop	r6
    155a:	5f 90       	pop	r5
    155c:	4f 90       	pop	r4
    155e:	08 95       	ret

00001560 <hif_register_cb>:
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	fc 01       	movw	r30, r24
    1564:	31 97       	sbiw	r30, 0x01	; 1
    1566:	e7 30       	cpi	r30, 0x07	; 7
    1568:	f1 05       	cpc	r31, r1
    156a:	70 f5       	brcc	.+92     	; 0x15c8 <hif_register_cb+0x68>
    156c:	e0 5b       	subi	r30, 0xB0	; 176
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <__tablejump2__>
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    1574:	60 93 98 2e 	sts	0x2E98, r22	; 0x802e98 <gstrHifCxt+0xe>
    1578:	70 93 99 2e 	sts	0x2E99, r23	; 0x802e99 <gstrHifCxt+0xf>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    157c:	80 e0       	ldi	r24, 0x00	; 0
	switch(u8Grp)
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
			break;
    157e:	08 95       	ret
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    1580:	60 93 96 2e 	sts	0x2E96, r22	; 0x802e96 <gstrHifCxt+0xc>
    1584:	70 93 97 2e 	sts	0x2E97, r23	; 0x802e97 <gstrHifCxt+0xd>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    1588:	80 e0       	ldi	r24, 0x00	; 0
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
			break;
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
			break;
    158a:	08 95       	ret
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    158c:	60 93 9a 2e 	sts	0x2E9A, r22	; 0x802e9a <gstrHifCxt+0x10>
    1590:	70 93 9b 2e 	sts	0x2E9B, r23	; 0x802e9b <gstrHifCxt+0x11>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    1594:	80 e0       	ldi	r24, 0x00	; 0
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
			break;
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
			break;
    1596:	08 95       	ret
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    1598:	60 93 9e 2e 	sts	0x2E9E, r22	; 0x802e9e <gstrHifCxt+0x14>
    159c:	70 93 9f 2e 	sts	0x2E9F, r23	; 0x802e9f <gstrHifCxt+0x15>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    15a0:	80 e0       	ldi	r24, 0x00	; 0
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
			break;
    15a2:	08 95       	ret
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    15a4:	60 93 a0 2e 	sts	0x2EA0, r22	; 0x802ea0 <gstrHifCxt+0x16>
    15a8:	70 93 a1 2e 	sts	0x2EA1, r23	; 0x802ea1 <gstrHifCxt+0x17>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    15ac:	80 e0       	ldi	r24, 0x00	; 0
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
			break;
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
			break;
    15ae:	08 95       	ret
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    15b0:	60 93 9c 2e 	sts	0x2E9C, r22	; 0x802e9c <gstrHifCxt+0x12>
    15b4:	70 93 9d 2e 	sts	0x2E9D, r23	; 0x802e9d <gstrHifCxt+0x13>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    15b8:	80 e0       	ldi	r24, 0x00	; 0
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
			break;
    15ba:	08 95       	ret
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    15bc:	60 93 a2 2e 	sts	0x2EA2, r22	; 0x802ea2 <gstrHifCxt+0x18>
    15c0:	70 93 a3 2e 	sts	0x2EA3, r23	; 0x802ea3 <gstrHifCxt+0x19>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    15c4:	80 e0       	ldi	r24, 0x00	; 0
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
			break;
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
			break;
    15c6:	08 95       	ret
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
    15c8:	84 ef       	ldi	r24, 0xF4	; 244
			break;
	}
	return ret;
}
    15ca:	08 95       	ret

000015cc <m2m_wifi_cb>:
}

sint8 m2m_wifi_default_connect(void)
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}
    15cc:	cf 92       	push	r12
    15ce:	df 92       	push	r13
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	cc 56       	subi	r28, 0x6C	; 108
    15e0:	d1 09       	sbc	r29, r1
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	69 01       	movw	r12, r18
    15e8:	7a 01       	movw	r14, r20
    15ea:	8c 32       	cpi	r24, 0x2C	; 44
    15ec:	c9 f4       	brne	.+50     	; 0x1620 <m2m_wifi_cb+0x54>
    15ee:	00 e0       	ldi	r16, 0x00	; 0
    15f0:	24 e0       	ldi	r18, 0x04	; 4
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	ae 01       	movw	r20, r28
    15f6:	47 5f       	subi	r20, 0xF7	; 247
    15f8:	5f 4f       	sbci	r21, 0xFF	; 255
    15fa:	c7 01       	movw	r24, r14
    15fc:	b6 01       	movw	r22, r12
    15fe:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    1602:	81 11       	cpse	r24, r1
    1604:	6d c1       	rjmp	.+730    	; 0x18e0 <m2m_wifi_cb+0x314>
    1606:	e0 91 09 2e 	lds	r30, 0x2E09	; 0x802e09 <gpfAppWifiCb>
    160a:	f0 91 0a 2e 	lds	r31, 0x2E0A	; 0x802e0a <gpfAppWifiCb+0x1>
    160e:	30 97       	sbiw	r30, 0x00	; 0
    1610:	09 f4       	brne	.+2      	; 0x1614 <m2m_wifi_cb+0x48>
    1612:	66 c1       	rjmp	.+716    	; 0x18e0 <m2m_wifi_cb+0x314>
    1614:	be 01       	movw	r22, r28
    1616:	67 5f       	subi	r22, 0xF7	; 247
    1618:	7f 4f       	sbci	r23, 0xFF	; 255
    161a:	8c e2       	ldi	r24, 0x2C	; 44
    161c:	09 95       	icall
    161e:	60 c1       	rjmp	.+704    	; 0x18e0 <m2m_wifi_cb+0x314>
    1620:	8b 31       	cpi	r24, 0x1B	; 27
    1622:	c9 f4       	brne	.+50     	; 0x1656 <m2m_wifi_cb+0x8a>
    1624:	00 e0       	ldi	r16, 0x00	; 0
    1626:	28 e0       	ldi	r18, 0x08	; 8
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	ae 01       	movw	r20, r28
    162c:	47 5f       	subi	r20, 0xF7	; 247
    162e:	5f 4f       	sbci	r21, 0xFF	; 255
    1630:	c7 01       	movw	r24, r14
    1632:	b6 01       	movw	r22, r12
    1634:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    1638:	81 11       	cpse	r24, r1
    163a:	52 c1       	rjmp	.+676    	; 0x18e0 <m2m_wifi_cb+0x314>
    163c:	e0 91 09 2e 	lds	r30, 0x2E09	; 0x802e09 <gpfAppWifiCb>
    1640:	f0 91 0a 2e 	lds	r31, 0x2E0A	; 0x802e0a <gpfAppWifiCb+0x1>
    1644:	30 97       	sbiw	r30, 0x00	; 0
    1646:	09 f4       	brne	.+2      	; 0x164a <m2m_wifi_cb+0x7e>
    1648:	4b c1       	rjmp	.+662    	; 0x18e0 <m2m_wifi_cb+0x314>
    164a:	be 01       	movw	r22, r28
    164c:	67 5f       	subi	r22, 0xF7	; 247
    164e:	7f 4f       	sbci	r23, 0xFF	; 255
    1650:	8b e1       	ldi	r24, 0x1B	; 27
    1652:	09 95       	icall
    1654:	45 c1       	rjmp	.+650    	; 0x18e0 <m2m_wifi_cb+0x314>
    1656:	86 30       	cpi	r24, 0x06	; 6
    1658:	c9 f4       	brne	.+50     	; 0x168c <m2m_wifi_cb+0xc0>
    165a:	01 e0       	ldi	r16, 0x01	; 1
    165c:	20 e3       	ldi	r18, 0x30	; 48
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	ae 01       	movw	r20, r28
    1662:	47 5f       	subi	r20, 0xF7	; 247
    1664:	5f 4f       	sbci	r21, 0xFF	; 255
    1666:	c7 01       	movw	r24, r14
    1668:	b6 01       	movw	r22, r12
    166a:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    166e:	81 11       	cpse	r24, r1
    1670:	37 c1       	rjmp	.+622    	; 0x18e0 <m2m_wifi_cb+0x314>
    1672:	e0 91 09 2e 	lds	r30, 0x2E09	; 0x802e09 <gpfAppWifiCb>
    1676:	f0 91 0a 2e 	lds	r31, 0x2E0A	; 0x802e0a <gpfAppWifiCb+0x1>
    167a:	30 97       	sbiw	r30, 0x00	; 0
    167c:	09 f4       	brne	.+2      	; 0x1680 <m2m_wifi_cb+0xb4>
    167e:	30 c1       	rjmp	.+608    	; 0x18e0 <m2m_wifi_cb+0x314>
    1680:	be 01       	movw	r22, r28
    1682:	67 5f       	subi	r22, 0xF7	; 247
    1684:	7f 4f       	sbci	r23, 0xFF	; 255
    1686:	86 e0       	ldi	r24, 0x06	; 6
    1688:	09 95       	icall
    168a:	2a c1       	rjmp	.+596    	; 0x18e0 <m2m_wifi_cb+0x314>
    168c:	8e 30       	cpi	r24, 0x0E	; 14
    168e:	09 f4       	brne	.+2      	; 0x1692 <m2m_wifi_cb+0xc6>
    1690:	27 c1       	rjmp	.+590    	; 0x18e0 <m2m_wifi_cb+0x314>
    1692:	82 33       	cpi	r24, 0x32	; 50
    1694:	c9 f4       	brne	.+50     	; 0x16c8 <m2m_wifi_cb+0xfc>
    1696:	00 e0       	ldi	r16, 0x00	; 0
    1698:	24 e1       	ldi	r18, 0x14	; 20
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	ae 01       	movw	r20, r28
    169e:	47 5f       	subi	r20, 0xF7	; 247
    16a0:	5f 4f       	sbci	r21, 0xFF	; 255
    16a2:	c7 01       	movw	r24, r14
    16a4:	b6 01       	movw	r22, r12
    16a6:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    16aa:	81 11       	cpse	r24, r1
    16ac:	19 c1       	rjmp	.+562    	; 0x18e0 <m2m_wifi_cb+0x314>
    16ae:	e0 91 09 2e 	lds	r30, 0x2E09	; 0x802e09 <gpfAppWifiCb>
    16b2:	f0 91 0a 2e 	lds	r31, 0x2E0A	; 0x802e0a <gpfAppWifiCb+0x1>
    16b6:	30 97       	sbiw	r30, 0x00	; 0
    16b8:	09 f4       	brne	.+2      	; 0x16bc <m2m_wifi_cb+0xf0>
    16ba:	12 c1       	rjmp	.+548    	; 0x18e0 <m2m_wifi_cb+0x314>
    16bc:	be 01       	movw	r22, r28
    16be:	67 5f       	subi	r22, 0xF7	; 247
    16c0:	7f 4f       	sbci	r23, 0xFF	; 255
    16c2:	82 e3       	ldi	r24, 0x32	; 50
    16c4:	09 95       	icall
    16c6:	0c c1       	rjmp	.+536    	; 0x18e0 <m2m_wifi_cb+0x314>
    16c8:	8f 32       	cpi	r24, 0x2F	; 47
    16ca:	11 f5       	brne	.+68     	; 0x1710 <m2m_wifi_cb+0x144>
    16cc:	24 e6       	ldi	r18, 0x64	; 100
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	ce 01       	movw	r24, r28
    16d8:	09 96       	adiw	r24, 0x09	; 9
    16da:	0e 94 61 06 	call	0xcc2	; 0xcc2 <m2m_memset>
    16de:	00 e0       	ldi	r16, 0x00	; 0
    16e0:	24 e6       	ldi	r18, 0x64	; 100
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	ae 01       	movw	r20, r28
    16e6:	47 5f       	subi	r20, 0xF7	; 247
    16e8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ea:	c7 01       	movw	r24, r14
    16ec:	b6 01       	movw	r22, r12
    16ee:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    16f2:	81 11       	cpse	r24, r1
    16f4:	f5 c0       	rjmp	.+490    	; 0x18e0 <m2m_wifi_cb+0x314>
    16f6:	e0 91 09 2e 	lds	r30, 0x2E09	; 0x802e09 <gpfAppWifiCb>
    16fa:	f0 91 0a 2e 	lds	r31, 0x2E0A	; 0x802e0a <gpfAppWifiCb+0x1>
    16fe:	30 97       	sbiw	r30, 0x00	; 0
    1700:	09 f4       	brne	.+2      	; 0x1704 <m2m_wifi_cb+0x138>
    1702:	ee c0       	rjmp	.+476    	; 0x18e0 <m2m_wifi_cb+0x314>
    1704:	be 01       	movw	r22, r28
    1706:	67 5f       	subi	r22, 0xF7	; 247
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	8f e2       	ldi	r24, 0x2F	; 47
    170c:	09 95       	icall
    170e:	e8 c0       	rjmp	.+464    	; 0x18e0 <m2m_wifi_cb+0x314>
    1710:	84 33       	cpi	r24, 0x34	; 52
    1712:	c1 f4       	brne	.+48     	; 0x1744 <m2m_wifi_cb+0x178>
    1714:	00 e0       	ldi	r16, 0x00	; 0
    1716:	24 e0       	ldi	r18, 0x04	; 4
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	ae 01       	movw	r20, r28
    171c:	47 5f       	subi	r20, 0xF7	; 247
    171e:	5f 4f       	sbci	r21, 0xFF	; 255
    1720:	c7 01       	movw	r24, r14
    1722:	b6 01       	movw	r22, r12
    1724:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    1728:	81 11       	cpse	r24, r1
    172a:	da c0       	rjmp	.+436    	; 0x18e0 <m2m_wifi_cb+0x314>
    172c:	e0 91 09 2e 	lds	r30, 0x2E09	; 0x802e09 <gpfAppWifiCb>
    1730:	f0 91 0a 2e 	lds	r31, 0x2E0A	; 0x802e0a <gpfAppWifiCb+0x1>
    1734:	30 97       	sbiw	r30, 0x00	; 0
    1736:	09 f4       	brne	.+2      	; 0x173a <m2m_wifi_cb+0x16e>
    1738:	d3 c0       	rjmp	.+422    	; 0x18e0 <m2m_wifi_cb+0x314>
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	84 e3       	ldi	r24, 0x34	; 52
    1740:	09 95       	icall
    1742:	ce c0       	rjmp	.+412    	; 0x18e0 <m2m_wifi_cb+0x314>
    1744:	81 31       	cpi	r24, 0x11	; 17
    1746:	f1 f4       	brne	.+60     	; 0x1784 <m2m_wifi_cb+0x1b8>
    1748:	10 92 0b 2e 	sts	0x2E0B, r1	; 0x802e0b <gu8scanInProgress>
    174c:	00 e0       	ldi	r16, 0x00	; 0
    174e:	24 e0       	ldi	r18, 0x04	; 4
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	ae 01       	movw	r20, r28
    1754:	47 5f       	subi	r20, 0xF7	; 247
    1756:	5f 4f       	sbci	r21, 0xFF	; 255
    1758:	c7 01       	movw	r24, r14
    175a:	b6 01       	movw	r22, r12
    175c:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    1760:	81 11       	cpse	r24, r1
    1762:	be c0       	rjmp	.+380    	; 0x18e0 <m2m_wifi_cb+0x314>
    1764:	89 85       	ldd	r24, Y+9	; 0x09
    1766:	80 93 0c 2e 	sts	0x2E0C, r24	; 0x802e0c <gu8ChNum>
    176a:	e0 91 09 2e 	lds	r30, 0x2E09	; 0x802e09 <gpfAppWifiCb>
    176e:	f0 91 0a 2e 	lds	r31, 0x2E0A	; 0x802e0a <gpfAppWifiCb+0x1>
    1772:	30 97       	sbiw	r30, 0x00	; 0
    1774:	09 f4       	brne	.+2      	; 0x1778 <m2m_wifi_cb+0x1ac>
    1776:	b4 c0       	rjmp	.+360    	; 0x18e0 <m2m_wifi_cb+0x314>
    1778:	be 01       	movw	r22, r28
    177a:	67 5f       	subi	r22, 0xF7	; 247
    177c:	7f 4f       	sbci	r23, 0xFF	; 255
    177e:	81 e1       	ldi	r24, 0x11	; 17
    1780:	09 95       	icall
    1782:	ae c0       	rjmp	.+348    	; 0x18e0 <m2m_wifi_cb+0x314>
    1784:	83 31       	cpi	r24, 0x13	; 19
    1786:	c9 f4       	brne	.+50     	; 0x17ba <m2m_wifi_cb+0x1ee>
    1788:	00 e0       	ldi	r16, 0x00	; 0
    178a:	2c e2       	ldi	r18, 0x2C	; 44
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	ae 01       	movw	r20, r28
    1790:	47 5f       	subi	r20, 0xF7	; 247
    1792:	5f 4f       	sbci	r21, 0xFF	; 255
    1794:	c7 01       	movw	r24, r14
    1796:	b6 01       	movw	r22, r12
    1798:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    179c:	81 11       	cpse	r24, r1
    179e:	a0 c0       	rjmp	.+320    	; 0x18e0 <m2m_wifi_cb+0x314>
    17a0:	e0 91 09 2e 	lds	r30, 0x2E09	; 0x802e09 <gpfAppWifiCb>
    17a4:	f0 91 0a 2e 	lds	r31, 0x2E0A	; 0x802e0a <gpfAppWifiCb+0x1>
    17a8:	30 97       	sbiw	r30, 0x00	; 0
    17aa:	09 f4       	brne	.+2      	; 0x17ae <m2m_wifi_cb+0x1e2>
    17ac:	99 c0       	rjmp	.+306    	; 0x18e0 <m2m_wifi_cb+0x314>
    17ae:	be 01       	movw	r22, r28
    17b0:	67 5f       	subi	r22, 0xF7	; 247
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	83 e1       	ldi	r24, 0x13	; 19
    17b6:	09 95       	icall
    17b8:	93 c0       	rjmp	.+294    	; 0x18e0 <m2m_wifi_cb+0x314>
    17ba:	84 30       	cpi	r24, 0x04	; 4
    17bc:	c9 f4       	brne	.+50     	; 0x17f0 <m2m_wifi_cb+0x224>
    17be:	00 e0       	ldi	r16, 0x00	; 0
    17c0:	24 e0       	ldi	r18, 0x04	; 4
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	ae 01       	movw	r20, r28
    17c6:	4f 5f       	subi	r20, 0xFF	; 255
    17c8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ca:	c7 01       	movw	r24, r14
    17cc:	b6 01       	movw	r22, r12
    17ce:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    17d2:	81 11       	cpse	r24, r1
    17d4:	85 c0       	rjmp	.+266    	; 0x18e0 <m2m_wifi_cb+0x314>
    17d6:	e0 91 09 2e 	lds	r30, 0x2E09	; 0x802e09 <gpfAppWifiCb>
    17da:	f0 91 0a 2e 	lds	r31, 0x2E0A	; 0x802e0a <gpfAppWifiCb+0x1>
    17de:	30 97       	sbiw	r30, 0x00	; 0
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <m2m_wifi_cb+0x218>
    17e2:	7e c0       	rjmp	.+252    	; 0x18e0 <m2m_wifi_cb+0x314>
    17e4:	be 01       	movw	r22, r28
    17e6:	6f 5f       	subi	r22, 0xFF	; 255
    17e8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ea:	84 e0       	ldi	r24, 0x04	; 4
    17ec:	09 95       	icall
    17ee:	78 c0       	rjmp	.+240    	; 0x18e0 <m2m_wifi_cb+0x314>
    17f0:	85 36       	cpi	r24, 0x65	; 101
    17f2:	c9 f4       	brne	.+50     	; 0x1826 <m2m_wifi_cb+0x25a>
    17f4:	00 e0       	ldi	r16, 0x00	; 0
    17f6:	24 e0       	ldi	r18, 0x04	; 4
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	ae 01       	movw	r20, r28
    17fc:	4f 5f       	subi	r20, 0xFF	; 255
    17fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1800:	c7 01       	movw	r24, r14
    1802:	b6 01       	movw	r22, r12
    1804:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    1808:	81 11       	cpse	r24, r1
    180a:	6a c0       	rjmp	.+212    	; 0x18e0 <m2m_wifi_cb+0x314>
    180c:	e0 91 09 2e 	lds	r30, 0x2E09	; 0x802e09 <gpfAppWifiCb>
    1810:	f0 91 0a 2e 	lds	r31, 0x2E0A	; 0x802e0a <gpfAppWifiCb+0x1>
    1814:	30 97       	sbiw	r30, 0x00	; 0
    1816:	09 f4       	brne	.+2      	; 0x181a <m2m_wifi_cb+0x24e>
    1818:	63 c0       	rjmp	.+198    	; 0x18e0 <m2m_wifi_cb+0x314>
    181a:	be 01       	movw	r22, r28
    181c:	6f 5f       	subi	r22, 0xFF	; 255
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	85 e6       	ldi	r24, 0x65	; 101
    1822:	09 95       	icall
    1824:	5d c0       	rjmp	.+186    	; 0x18e0 <m2m_wifi_cb+0x314>
    1826:	89 30       	cpi	r24, 0x09	; 9
    1828:	c9 f4       	brne	.+50     	; 0x185c <m2m_wifi_cb+0x290>
    182a:	01 e0       	ldi	r16, 0x01	; 1
    182c:	24 e6       	ldi	r18, 0x64	; 100
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	ae 01       	movw	r20, r28
    1832:	47 5f       	subi	r20, 0xF7	; 247
    1834:	5f 4f       	sbci	r21, 0xFF	; 255
    1836:	c7 01       	movw	r24, r14
    1838:	b6 01       	movw	r22, r12
    183a:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    183e:	81 11       	cpse	r24, r1
    1840:	4f c0       	rjmp	.+158    	; 0x18e0 <m2m_wifi_cb+0x314>
    1842:	e0 91 09 2e 	lds	r30, 0x2E09	; 0x802e09 <gpfAppWifiCb>
    1846:	f0 91 0a 2e 	lds	r31, 0x2E0A	; 0x802e0a <gpfAppWifiCb+0x1>
    184a:	30 97       	sbiw	r30, 0x00	; 0
    184c:	09 f4       	brne	.+2      	; 0x1850 <m2m_wifi_cb+0x284>
    184e:	48 c0       	rjmp	.+144    	; 0x18e0 <m2m_wifi_cb+0x314>
    1850:	be 01       	movw	r22, r28
    1852:	67 5f       	subi	r22, 0xF7	; 247
    1854:	7f 4f       	sbci	r23, 0xFF	; 255
    1856:	89 e0       	ldi	r24, 0x09	; 9
    1858:	09 95       	icall
    185a:	42 c0       	rjmp	.+132    	; 0x18e0 <m2m_wifi_cb+0x314>
    185c:	8a 32       	cpi	r24, 0x2A	; 42
    185e:	c1 f4       	brne	.+48     	; 0x1890 <m2m_wifi_cb+0x2c4>
    1860:	01 e0       	ldi	r16, 0x01	; 1
    1862:	24 e0       	ldi	r18, 0x04	; 4
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	ae 01       	movw	r20, r28
    1868:	47 5f       	subi	r20, 0xF7	; 247
    186a:	5f 4f       	sbci	r21, 0xFF	; 255
    186c:	c7 01       	movw	r24, r14
    186e:	b6 01       	movw	r22, r12
    1870:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    1874:	81 11       	cpse	r24, r1
    1876:	34 c0       	rjmp	.+104    	; 0x18e0 <m2m_wifi_cb+0x314>
    1878:	e0 91 09 2e 	lds	r30, 0x2E09	; 0x802e09 <gpfAppWifiCb>
    187c:	f0 91 0a 2e 	lds	r31, 0x2E0A	; 0x802e0a <gpfAppWifiCb+0x1>
    1880:	30 97       	sbiw	r30, 0x00	; 0
    1882:	71 f1       	breq	.+92     	; 0x18e0 <m2m_wifi_cb+0x314>
    1884:	be 01       	movw	r22, r28
    1886:	67 5f       	subi	r22, 0xF7	; 247
    1888:	7f 4f       	sbci	r23, 0xFF	; 255
    188a:	8a e2       	ldi	r24, 0x2A	; 42
    188c:	09 95       	icall
    188e:	28 c0       	rjmp	.+80     	; 0x18e0 <m2m_wifi_cb+0x314>
    1890:	80 32       	cpi	r24, 0x20	; 32
    1892:	31 f5       	brne	.+76     	; 0x18e0 <m2m_wifi_cb+0x314>
    1894:	00 e0       	ldi	r16, 0x00	; 0
    1896:	26 e0       	ldi	r18, 0x06	; 6
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	ae 01       	movw	r20, r28
    189c:	47 5f       	subi	r20, 0xF7	; 247
    189e:	5f 4f       	sbci	r21, 0xFF	; 255
    18a0:	c7 01       	movw	r24, r14
    18a2:	b6 01       	movw	r22, r12
    18a4:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    18a8:	81 11       	cpse	r24, r1
    18aa:	1a c0       	rjmp	.+52     	; 0x18e0 <m2m_wifi_cb+0x314>
    18ac:	2b 85       	ldd	r18, Y+11	; 0x0b
    18ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    18b0:	49 85       	ldd	r20, Y+9	; 0x09
    18b2:	5a 85       	ldd	r21, Y+10	; 0x0a
    18b4:	c7 01       	movw	r24, r14
    18b6:	b6 01       	movw	r22, r12
    18b8:	6a 5f       	subi	r22, 0xFA	; 250
    18ba:	7f 4f       	sbci	r23, 0xFF	; 255
    18bc:	8f 4f       	sbci	r24, 0xFF	; 255
    18be:	9f 4f       	sbci	r25, 0xFF	; 255
    18c0:	01 e0       	ldi	r16, 0x01	; 1
    18c2:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    18c6:	81 11       	cpse	r24, r1
    18c8:	0b c0       	rjmp	.+22     	; 0x18e0 <m2m_wifi_cb+0x314>
    18ca:	e0 91 09 2e 	lds	r30, 0x2E09	; 0x802e09 <gpfAppWifiCb>
    18ce:	f0 91 0a 2e 	lds	r31, 0x2E0A	; 0x802e0a <gpfAppWifiCb+0x1>
    18d2:	30 97       	sbiw	r30, 0x00	; 0
    18d4:	29 f0       	breq	.+10     	; 0x18e0 <m2m_wifi_cb+0x314>
    18d6:	be 01       	movw	r22, r28
    18d8:	67 5f       	subi	r22, 0xF7	; 247
    18da:	7f 4f       	sbci	r23, 0xFF	; 255
    18dc:	80 e2       	ldi	r24, 0x20	; 32
    18de:	09 95       	icall
    18e0:	c4 59       	subi	r28, 0x94	; 148
    18e2:	df 4f       	sbci	r29, 0xFF	; 255
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	0f 91       	pop	r16
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	df 90       	pop	r13
    18f4:	cf 90       	pop	r12
    18f6:	08 95       	ret

000018f8 <m2m_wifi_init>:
    18f8:	1f 93       	push	r17
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	a7 97       	sbiw	r28, 0x27	; 39
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	21 e0       	ldi	r18, 0x01	; 1
    190a:	2f a3       	std	Y+39, r18	; 0x27
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	39 f1       	breq	.+78     	; 0x195e <m2m_wifi_init+0x66>
    1910:	fc 01       	movw	r30, r24
    1912:	80 81       	ld	r24, Z
    1914:	91 81       	ldd	r25, Z+1	; 0x01
    1916:	80 93 09 2e 	sts	0x2E09, r24	; 0x802e09 <gpfAppWifiCb>
    191a:	90 93 0a 2e 	sts	0x2E0A, r25	; 0x802e0a <gpfAppWifiCb+0x1>
    191e:	10 92 0b 2e 	sts	0x2E0B, r1	; 0x802e0b <gu8scanInProgress>
    1922:	ce 01       	movw	r24, r28
    1924:	87 96       	adiw	r24, 0x27	; 39
    1926:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <nm_drv_init>
    192a:	18 2f       	mov	r17, r24
    192c:	81 11       	cpse	r24, r1
    192e:	18 c0       	rjmp	.+48     	; 0x1960 <m2m_wifi_init+0x68>
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 ed 06 	call	0xdda	; 0xdda <hif_init>
    1938:	18 2f       	mov	r17, r24
    193a:	81 11       	cpse	r24, r1
    193c:	0b c0       	rjmp	.+22     	; 0x1954 <m2m_wifi_init+0x5c>
    193e:	66 ee       	ldi	r22, 0xE6	; 230
    1940:	7a e0       	ldi	r23, 0x0A	; 10
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	0e 94 b0 0a 	call	0x1560	; 0x1560 <hif_register_cb>
    1948:	ce 01       	movw	r24, r28
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	0e 94 39 12 	call	0x2472	; 0x2472 <nm_get_firmware_full_info>
    1950:	18 2f       	mov	r17, r24
    1952:	06 c0       	rjmp	.+12     	; 0x1960 <m2m_wifi_init+0x68>
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	0e 94 10 13 	call	0x2620	; 0x2620 <nm_drv_deinit>
    195c:	01 c0       	rjmp	.+2      	; 0x1960 <m2m_wifi_init+0x68>
    195e:	14 ef       	ldi	r17, 0xF4	; 244
    1960:	81 2f       	mov	r24, r17
    1962:	a7 96       	adiw	r28, 0x27	; 39
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	08 95       	ret

00001970 <m2m_wifi_handle_events>:
    1970:	0e 94 9d 08 	call	0x113a	; 0x113a <hif_handle_isr>
    1974:	08 95       	ret

00001976 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    1976:	8f 92       	push	r8
    1978:	9f 92       	push	r9
    197a:	af 92       	push	r10
    197c:	bf 92       	push	r11
    197e:	cf 92       	push	r12
    1980:	df 92       	push	r13
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	cc 56       	subi	r28, 0x6C	; 108
    1994:	d1 09       	sbc	r29, r1
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	4c 01       	movw	r8, r24
    199c:	d6 2e       	mov	r13, r22
    199e:	f4 2e       	mov	r15, r20
    19a0:	59 01       	movw	r10, r18
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	48 17       	cp	r20, r24
    19a6:	99 f1       	breq	.+102    	; 0x1a0e <m2m_wifi_connect_sc+0x98>
	{
		if(pvAuthInfo == NULL)
    19a8:	21 15       	cp	r18, r1
    19aa:	31 05       	cpc	r19, r1
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <m2m_wifi_connect_sc+0x3a>
    19ae:	b9 c0       	rjmp	.+370    	; 0x1b22 <m2m_wifi_connect_sc+0x1ac>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    19b0:	e2 e0       	ldi	r30, 0x02	; 2
    19b2:	4e 13       	cpse	r20, r30
    19b4:	2c c0       	rjmp	.+88     	; 0x1a0e <m2m_wifi_connect_sc+0x98>
    19b6:	c9 01       	movw	r24, r18
    19b8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <m2m_strlen>
    19bc:	80 34       	cpi	r24, 0x40	; 64
    19be:	91 05       	cpc	r25, r1
    19c0:	31 f5       	brne	.+76     	; 0x1a0e <m2m_wifi_connect_sc+0x98>
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    19c2:	f5 01       	movw	r30, r10
    19c4:	80 81       	ld	r24, Z
    19c6:	90 ed       	ldi	r25, 0xD0	; 208
    19c8:	98 0f       	add	r25, r24
    19ca:	97 33       	cpi	r25, 0x37	; 55
    19cc:	08 f0       	brcs	.+2      	; 0x19d0 <m2m_wifi_connect_sc+0x5a>
    19ce:	ab c0       	rjmp	.+342    	; 0x1b26 <m2m_wifi_connect_sc+0x1b0>
    19d0:	96 ec       	ldi	r25, 0xC6	; 198
    19d2:	98 0f       	add	r25, r24
    19d4:	97 30       	cpi	r25, 0x07	; 7
    19d6:	08 f4       	brcc	.+2      	; 0x19da <m2m_wifi_connect_sc+0x64>
    19d8:	a8 c0       	rjmp	.+336    	; 0x1b2a <m2m_wifi_connect_sc+0x1b4>
    19da:	87 54       	subi	r24, 0x47	; 71
    19dc:	8a 31       	cpi	r24, 0x1A	; 26
    19de:	08 f4       	brcc	.+2      	; 0x19e2 <m2m_wifi_connect_sc+0x6c>
    19e0:	a6 c0       	rjmp	.+332    	; 0x1b2e <m2m_wifi_connect_sc+0x1b8>
    19e2:	31 96       	adiw	r30, 0x01	; 1
    19e4:	95 01       	movw	r18, r10
    19e6:	20 5c       	subi	r18, 0xC0	; 192
    19e8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ea:	81 91       	ld	r24, Z+
    19ec:	90 ed       	ldi	r25, 0xD0	; 208
    19ee:	98 0f       	add	r25, r24
    19f0:	97 33       	cpi	r25, 0x37	; 55
    19f2:	08 f0       	brcs	.+2      	; 0x19f6 <m2m_wifi_connect_sc+0x80>
    19f4:	9e c0       	rjmp	.+316    	; 0x1b32 <m2m_wifi_connect_sc+0x1bc>
    19f6:	96 ec       	ldi	r25, 0xC6	; 198
    19f8:	98 0f       	add	r25, r24
    19fa:	97 30       	cpi	r25, 0x07	; 7
    19fc:	08 f4       	brcc	.+2      	; 0x1a00 <m2m_wifi_connect_sc+0x8a>
    19fe:	9b c0       	rjmp	.+310    	; 0x1b36 <m2m_wifi_connect_sc+0x1c0>
    1a00:	87 54       	subi	r24, 0x47	; 71
    1a02:	8a 31       	cpi	r24, 0x1A	; 26
    1a04:	08 f4       	brcc	.+2      	; 0x1a08 <m2m_wifi_connect_sc+0x92>
    1a06:	99 c0       	rjmp	.+306    	; 0x1b3a <m2m_wifi_connect_sc+0x1c4>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    1a08:	e2 17       	cp	r30, r18
    1a0a:	f3 07       	cpc	r31, r19
    1a0c:	71 f7       	brne	.-36     	; 0x19ea <m2m_wifi_connect_sc+0x74>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    1a0e:	8f ef       	ldi	r24, 0xFF	; 255
    1a10:	8d 0d       	add	r24, r13
    1a12:	80 32       	cpi	r24, 0x20	; 32
    1a14:	08 f0       	brcs	.+2      	; 0x1a18 <m2m_wifi_connect_sc+0xa2>
    1a16:	93 c0       	rjmp	.+294    	; 0x1b3e <m2m_wifi_connect_sc+0x1c8>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    1a18:	c8 01       	movw	r24, r16
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	0e 97       	sbiw	r24, 0x0e	; 14
    1a1e:	20 f0       	brcs	.+8      	; 0x1a28 <m2m_wifi_connect_sc+0xb2>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1a20:	0f 3f       	cpi	r16, 0xFF	; 255
    1a22:	11 05       	cpc	r17, r1
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <m2m_wifi_connect_sc+0xb2>
    1a26:	8d c0       	rjmp	.+282    	; 0x1b42 <m2m_wifi_connect_sc+0x1cc>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1a28:	2d 2d       	mov	r18, r13
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	50 e0       	ldi	r21, 0x00	; 0
    1a30:	b4 01       	movw	r22, r8
    1a32:	ce 01       	movw	r24, r28
    1a34:	89 5b       	subi	r24, 0xB9	; 185
    1a36:	9f 4f       	sbci	r25, 0xFF	; 255
    1a38:	0e 94 51 06 	call	0xca2	; 0xca2 <m2m_memcpy>
	strConnect.au8SSID[u8SsidLen]	= 0;
    1a3c:	e7 e4       	ldi	r30, 0x47	; 71
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	ec 0f       	add	r30, r28
    1a42:	fd 1f       	adc	r31, r29
    1a44:	ed 0d       	add	r30, r13
    1a46:	f1 1d       	adc	r31, r1
    1a48:	10 82       	st	Z, r1
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    1a4a:	27 96       	adiw	r28, 0x07	; 7
    1a4c:	0e af       	std	Y+62, r16	; 0x3e
    1a4e:	1f af       	std	Y+63, r17	; 0x3f
    1a50:	27 97       	sbiw	r28, 0x07	; 7
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	e1 10       	cpse	r14, r1
    1a56:	01 c0       	rjmp	.+2      	; 0x1a5a <m2m_wifi_connect_sc+0xe4>
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	a9 96       	adiw	r28, 0x29	; 41
    1a5c:	8f af       	std	Y+63, r24	; 0x3f
    1a5e:	a9 97       	sbiw	r28, 0x29	; 41
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    1a60:	23 96       	adiw	r28, 0x03	; 3
    1a62:	ff ae       	std	Y+63, r15	; 0x3f
    1a64:	23 97       	sbiw	r28, 0x03	; 3

	if(u8SecType == M2M_WIFI_SEC_WEP)
    1a66:	f3 e0       	ldi	r31, 0x03	; 3
    1a68:	ff 12       	cpse	r15, r31
    1a6a:	24 c0       	rjmp	.+72     	; 0x1ab4 <m2m_wifi_connect_sc+0x13e>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    1a6c:	f5 01       	movw	r30, r10
    1a6e:	80 81       	ld	r24, Z
    1a70:	81 50       	subi	r24, 0x01	; 1
    1a72:	89 83       	std	Y+1, r24	; 0x01

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    1a74:	84 30       	cpi	r24, 0x04	; 4
    1a76:	08 f0       	brcs	.+2      	; 0x1a7a <m2m_wifi_connect_sc+0x104>
    1a78:	66 c0       	rjmp	.+204    	; 0x1b46 <m2m_wifi_connect_sc+0x1d0>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    1a7a:	21 81       	ldd	r18, Z+1	; 0x01
    1a7c:	8f ef       	ldi	r24, 0xFF	; 255
    1a7e:	82 0f       	add	r24, r18
    1a80:	8a 83       	std	Y+2, r24	; 0x02
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    1a82:	82 2f       	mov	r24, r18
    1a84:	8f 7e       	andi	r24, 0xEF	; 239
    1a86:	8b 30       	cpi	r24, 0x0B	; 11
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <m2m_wifi_connect_sc+0x116>
    1a8a:	5f c0       	rjmp	.+190    	; 0x1b4a <m2m_wifi_connect_sc+0x1d4>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	b5 01       	movw	r22, r10
    1a94:	6e 5f       	subi	r22, 0xFE	; 254
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	ce 01       	movw	r24, r28
    1a9a:	03 96       	adiw	r24, 0x03	; 3
    1a9c:	0e 94 51 06 	call	0xca2	; 0xca2 <m2m_memcpy>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    1aa0:	f5 01       	movw	r30, r10
    1aa2:	81 81       	ldd	r24, Z+1	; 0x01
    1aa4:	e3 e0       	ldi	r30, 0x03	; 3
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	ec 0f       	add	r30, r28
    1aaa:	fd 1f       	adc	r31, r29
    1aac:	e8 0f       	add	r30, r24
    1aae:	f1 1d       	adc	r31, r1
    1ab0:	10 82       	st	Z, r1
    1ab2:	27 c0       	rjmp	.+78     	; 0x1b02 <m2m_wifi_connect_sc+0x18c>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    1ab4:	f2 e0       	ldi	r31, 0x02	; 2
    1ab6:	ff 12       	cpse	r15, r31
    1ab8:	14 c0       	rjmp	.+40     	; 0x1ae2 <m2m_wifi_connect_sc+0x16c>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    1aba:	c5 01       	movw	r24, r10
    1abc:	0e 94 6e 06 	call	0xcdc	; 0xcdc <m2m_strlen>
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    1ac0:	9c 01       	movw	r18, r24
    1ac2:	21 50       	subi	r18, 0x01	; 1
    1ac4:	31 09       	sbc	r19, r1
    1ac6:	20 34       	cpi	r18, 0x40	; 64
    1ac8:	31 05       	cpc	r19, r1
    1aca:	08 f0       	brcs	.+2      	; 0x1ace <m2m_wifi_connect_sc+0x158>
    1acc:	40 c0       	rjmp	.+128    	; 0x1b4e <m2m_wifi_connect_sc+0x1d8>
		{
			M2M_ERR("Incorrect PSK key length\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    1ace:	2e 5f       	subi	r18, 0xFE	; 254
    1ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad2:	40 e0       	ldi	r20, 0x00	; 0
    1ad4:	50 e0       	ldi	r21, 0x00	; 0
    1ad6:	b5 01       	movw	r22, r10
    1ad8:	ce 01       	movw	r24, r28
    1ada:	01 96       	adiw	r24, 0x01	; 1
    1adc:	0e 94 51 06 	call	0xca2	; 0xca2 <m2m_memcpy>
    1ae0:	10 c0       	rjmp	.+32     	; 0x1b02 <m2m_wifi_connect_sc+0x18c>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    1ae2:	84 e0       	ldi	r24, 0x04	; 4
    1ae4:	f8 12       	cpse	r15, r24
    1ae6:	0a c0       	rjmp	.+20     	; 0x1afc <m2m_wifi_connect_sc+0x186>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    1ae8:	2e e3       	ldi	r18, 0x3E	; 62
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	b5 01       	movw	r22, r10
    1af2:	ce 01       	movw	r24, r28
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	0e 94 51 06 	call	0xca2	; 0xca2 <m2m_memcpy>
    1afa:	03 c0       	rjmp	.+6      	; 0x1b02 <m2m_wifi_connect_sc+0x18c>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    1afc:	e1 e0       	ldi	r30, 0x01	; 1
    1afe:	fe 12       	cpse	r15, r30
    1b00:	28 c0       	rjmp	.+80     	; 0x1b52 <m2m_wifi_connect_sc+0x1dc>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    1b02:	c1 2c       	mov	r12, r1
    1b04:	d1 2c       	mov	r13, r1
    1b06:	e1 2c       	mov	r14, r1
    1b08:	f1 2c       	mov	r15, r1
    1b0a:	00 e0       	ldi	r16, 0x00	; 0
    1b0c:	10 e0       	ldi	r17, 0x00	; 0
    1b0e:	2c e6       	ldi	r18, 0x6C	; 108
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	ae 01       	movw	r20, r28
    1b14:	4f 5f       	subi	r20, 0xFF	; 255
    1b16:	5f 4f       	sbci	r21, 0xFF	; 255
    1b18:	68 e2       	ldi	r22, 0x28	; 40
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	0e 94 02 07 	call	0xe04	; 0xe04 <hif_send>
    1b20:	19 c0       	rjmp	.+50     	; 0x1b54 <m2m_wifi_connect_sc+0x1de>
	if(u8SecType != M2M_WIFI_SEC_OPEN)
	{
		if(pvAuthInfo == NULL)
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
    1b22:	84 ef       	ldi	r24, 0xF4	; 244
    1b24:	17 c0       	rjmp	.+46     	; 0x1b54 <m2m_wifi_connect_sc+0x1de>
			while(i < (M2M_MAX_PSK_LEN-1))
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
				{
					M2M_ERR("Invalid Key\n");
					ret = M2M_ERR_FAIL;
    1b26:	84 ef       	ldi	r24, 0xF4	; 244
    1b28:	15 c0       	rjmp	.+42     	; 0x1b54 <m2m_wifi_connect_sc+0x1de>
    1b2a:	84 ef       	ldi	r24, 0xF4	; 244
    1b2c:	13 c0       	rjmp	.+38     	; 0x1b54 <m2m_wifi_connect_sc+0x1de>
    1b2e:	84 ef       	ldi	r24, 0xF4	; 244
    1b30:	11 c0       	rjmp	.+34     	; 0x1b54 <m2m_wifi_connect_sc+0x1de>
    1b32:	84 ef       	ldi	r24, 0xF4	; 244
    1b34:	0f c0       	rjmp	.+30     	; 0x1b54 <m2m_wifi_connect_sc+0x1de>
    1b36:	84 ef       	ldi	r24, 0xF4	; 244
    1b38:	0d c0       	rjmp	.+26     	; 0x1b54 <m2m_wifi_connect_sc+0x1de>
    1b3a:	84 ef       	ldi	r24, 0xF4	; 244
    1b3c:	0b c0       	rjmp	.+22     	; 0x1b54 <m2m_wifi_connect_sc+0x1de>
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
	{
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
    1b3e:	84 ef       	ldi	r24, 0xF4	; 244
    1b40:	09 c0       	rjmp	.+18     	; 0x1b54 <m2m_wifi_connect_sc+0x1de>
	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
		{
			M2M_ERR("CH INVALID\n");
			ret = M2M_ERR_FAIL;
    1b42:	84 ef       	ldi	r24, 0xF4	; 244
    1b44:	07 c0       	rjmp	.+14     	; 0x1b54 <m2m_wifi_connect_sc+0x1de>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
			ret = M2M_ERR_FAIL;
    1b46:	84 ef       	ldi	r24, 0xF4	; 244
    1b48:	05 c0       	rjmp	.+10     	; 0x1b54 <m2m_wifi_connect_sc+0x1de>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
			ret = M2M_ERR_FAIL;
    1b4a:	84 ef       	ldi	r24, 0xF4	; 244
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <m2m_wifi_connect_sc+0x1de>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
		{
			M2M_ERR("Incorrect PSK key length\n");
			ret = M2M_ERR_FAIL;
    1b4e:	84 ef       	ldi	r24, 0xF4	; 244
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <m2m_wifi_connect_sc+0x1de>

	}
	else
	{
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
    1b52:	84 ef       	ldi	r24, 0xF4	; 244

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);

ERR1:
	return ret;
}
    1b54:	c4 59       	subi	r28, 0x94	; 148
    1b56:	df 4f       	sbci	r29, 0xFF	; 255
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	ff 90       	pop	r15
    1b66:	ef 90       	pop	r14
    1b68:	df 90       	pop	r13
    1b6a:	cf 90       	pop	r12
    1b6c:	bf 90       	pop	r11
    1b6e:	af 90       	pop	r10
    1b70:	9f 90       	pop	r9
    1b72:	8f 90       	pop	r8
    1b74:	08 95       	ret

00001b76 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    1b76:	ef 92       	push	r14
    1b78:	0f 93       	push	r16
    1b7a:	1f 93       	push	r17
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    1b7c:	e1 2c       	mov	r14, r1
    1b7e:	0e 94 bb 0c 	call	0x1976	; 0x1976 <m2m_wifi_connect_sc>
}
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	ef 90       	pop	r14
    1b88:	08 95       	ret

00001b8a <chip_apply_conf>:
	if(ret != M2M_SUCCESS) goto ERR1;
	ret = cpu_halt();
	if(ret != M2M_SUCCESS) goto ERR1;	
ERR1:
	return ret;
}
    1b8a:	cf 92       	push	r12
    1b8c:	df 92       	push	r13
    1b8e:	ef 92       	push	r14
    1b90:	ff 92       	push	r15
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <chip_apply_conf+0xe>
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <chip_apply_conf+0x10>
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	6b 01       	movw	r12, r22
    1ba0:	7c 01       	movw	r14, r24
    1ba2:	68 94       	set
    1ba4:	d0 f8       	bld	r13, 0
    1ba6:	a7 01       	movw	r20, r14
    1ba8:	96 01       	movw	r18, r12
    1baa:	60 ea       	ldi	r22, 0xA0	; 160
    1bac:	74 e1       	ldi	r23, 0x14	; 20
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
    1bb6:	19 82       	std	Y+1, r1	; 0x01
    1bb8:	1a 82       	std	Y+2, r1	; 0x02
    1bba:	1b 82       	std	Y+3, r1	; 0x03
    1bbc:	1c 82       	std	Y+4, r1	; 0x04
    1bbe:	ae 01       	movw	r20, r28
    1bc0:	4f 5f       	subi	r20, 0xFF	; 255
    1bc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc4:	60 ea       	ldi	r22, 0xA0	; 160
    1bc6:	74 e1       	ldi	r23, 0x14	; 20
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
    1bd0:	81 11       	cpse	r24, r1
    1bd2:	e9 cf       	rjmp	.-46     	; 0x1ba6 <chip_apply_conf+0x1c>
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd8:	ab 81       	ldd	r26, Y+3	; 0x03
    1bda:	bc 81       	ldd	r27, Y+4	; 0x04
    1bdc:	c8 16       	cp	r12, r24
    1bde:	d9 06       	cpc	r13, r25
    1be0:	ea 06       	cpc	r14, r26
    1be2:	fb 06       	cpc	r15, r27
    1be4:	01 f7       	brne	.-64     	; 0x1ba6 <chip_apply_conf+0x1c>
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	24 96       	adiw	r28, 0x04	; 4
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	ff 90       	pop	r15
    1bf4:	ef 90       	pop	r14
    1bf6:	df 90       	pop	r13
    1bf8:	cf 90       	pop	r12
    1bfa:	08 95       	ret

00001bfc <enable_interrupts>:
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <enable_interrupts+0x6>
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <enable_interrupts+0x8>
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	19 82       	std	Y+1, r1	; 0x01
    1c0a:	1a 82       	std	Y+2, r1	; 0x02
    1c0c:	1b 82       	std	Y+3, r1	; 0x03
    1c0e:	1c 82       	std	Y+4, r1	; 0x04
    1c10:	ae 01       	movw	r20, r28
    1c12:	4f 5f       	subi	r20, 0xFF	; 255
    1c14:	5f 4f       	sbci	r21, 0xFF	; 255
    1c16:	68 e0       	ldi	r22, 0x08	; 8
    1c18:	74 e1       	ldi	r23, 0x14	; 20
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
    1c22:	81 11       	cpse	r24, r1
    1c24:	2f c0       	rjmp	.+94     	; 0x1c84 <enable_interrupts+0x88>
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	ab 81       	ldd	r26, Y+3	; 0x03
    1c2c:	bc 81       	ldd	r27, Y+4	; 0x04
    1c2e:	9c 01       	movw	r18, r24
    1c30:	ad 01       	movw	r20, r26
    1c32:	31 60       	ori	r19, 0x01	; 1
    1c34:	29 83       	std	Y+1, r18	; 0x01
    1c36:	3a 83       	std	Y+2, r19	; 0x02
    1c38:	4b 83       	std	Y+3, r20	; 0x03
    1c3a:	5c 83       	std	Y+4, r21	; 0x04
    1c3c:	68 e0       	ldi	r22, 0x08	; 8
    1c3e:	74 e1       	ldi	r23, 0x14	; 20
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
    1c48:	81 11       	cpse	r24, r1
    1c4a:	1c c0       	rjmp	.+56     	; 0x1c84 <enable_interrupts+0x88>
    1c4c:	ae 01       	movw	r20, r28
    1c4e:	4f 5f       	subi	r20, 0xFF	; 255
    1c50:	5f 4f       	sbci	r21, 0xFF	; 255
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	7a e1       	ldi	r23, 0x1A	; 26
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
    1c5e:	81 11       	cpse	r24, r1
    1c60:	11 c0       	rjmp	.+34     	; 0x1c84 <enable_interrupts+0x88>
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	9a 81       	ldd	r25, Y+2	; 0x02
    1c66:	ab 81       	ldd	r26, Y+3	; 0x03
    1c68:	bc 81       	ldd	r27, Y+4	; 0x04
    1c6a:	9c 01       	movw	r18, r24
    1c6c:	ad 01       	movw	r20, r26
    1c6e:	41 60       	ori	r20, 0x01	; 1
    1c70:	29 83       	std	Y+1, r18	; 0x01
    1c72:	3a 83       	std	Y+2, r19	; 0x02
    1c74:	4b 83       	std	Y+3, r20	; 0x03
    1c76:	5c 83       	std	Y+4, r21	; 0x04
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	7a e1       	ldi	r23, 0x1A	; 26
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
    1c84:	24 96       	adiw	r28, 0x04	; 4
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	08 95       	ret

00001c90 <nmi_get_chipid>:
    1c90:	cf 92       	push	r12
    1c92:	df 92       	push	r13
    1c94:	ef 92       	push	r14
    1c96:	ff 92       	push	r15
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <nmi_get_chipid+0xe>
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <nmi_get_chipid+0x10>
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	c0 90 0d 2e 	lds	r12, 0x2E0D	; 0x802e0d <chipid.2327>
    1ca8:	d0 90 0e 2e 	lds	r13, 0x2E0E	; 0x802e0e <chipid.2327+0x1>
    1cac:	e0 90 0f 2e 	lds	r14, 0x2E0F	; 0x802e0f <chipid.2327+0x2>
    1cb0:	f0 90 10 2e 	lds	r15, 0x2E10	; 0x802e10 <chipid.2327+0x3>
    1cb4:	c1 14       	cp	r12, r1
    1cb6:	d1 04       	cpc	r13, r1
    1cb8:	e1 04       	cpc	r14, r1
    1cba:	f1 04       	cpc	r15, r1
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <nmi_get_chipid+0x30>
    1cbe:	a4 c0       	rjmp	.+328    	; 0x1e08 <nmi_get_chipid+0x178>
    1cc0:	4d e0       	ldi	r20, 0x0D	; 13
    1cc2:	5e e2       	ldi	r21, 0x2E	; 46
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	70 e1       	ldi	r23, 0x10	; 16
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
    1cd0:	88 23       	and	r24, r24
    1cd2:	49 f0       	breq	.+18     	; 0x1ce6 <nmi_get_chipid+0x56>
    1cd4:	10 92 0d 2e 	sts	0x2E0D, r1	; 0x802e0d <chipid.2327>
    1cd8:	10 92 0e 2e 	sts	0x2E0E, r1	; 0x802e0e <chipid.2327+0x1>
    1cdc:	10 92 0f 2e 	sts	0x2E0F, r1	; 0x802e0f <chipid.2327+0x2>
    1ce0:	10 92 10 2e 	sts	0x2E10, r1	; 0x802e10 <chipid.2327+0x3>
    1ce4:	99 c0       	rjmp	.+306    	; 0x1e18 <nmi_get_chipid+0x188>
    1ce6:	ae 01       	movw	r20, r28
    1ce8:	4f 5f       	subi	r20, 0xFF	; 255
    1cea:	5f 4f       	sbci	r21, 0xFF	; 255
    1cec:	64 ef       	ldi	r22, 0xF4	; 244
    1cee:	73 e1       	ldi	r23, 0x13	; 19
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
    1cf8:	88 23       	and	r24, r24
    1cfa:	49 f0       	breq	.+18     	; 0x1d0e <nmi_get_chipid+0x7e>
    1cfc:	10 92 0d 2e 	sts	0x2E0D, r1	; 0x802e0d <chipid.2327>
    1d00:	10 92 0e 2e 	sts	0x2E0E, r1	; 0x802e0e <chipid.2327+0x1>
    1d04:	10 92 0f 2e 	sts	0x2E0F, r1	; 0x802e0f <chipid.2327+0x2>
    1d08:	10 92 10 2e 	sts	0x2E10, r1	; 0x802e10 <chipid.2327+0x3>
    1d0c:	85 c0       	rjmp	.+266    	; 0x1e18 <nmi_get_chipid+0x188>
    1d0e:	80 91 0d 2e 	lds	r24, 0x2E0D	; 0x802e0d <chipid.2327>
    1d12:	90 91 0e 2e 	lds	r25, 0x2E0E	; 0x802e0e <chipid.2327+0x1>
    1d16:	a0 91 0f 2e 	lds	r26, 0x2E0F	; 0x802e0f <chipid.2327+0x2>
    1d1a:	b0 91 10 2e 	lds	r27, 0x2E10	; 0x802e10 <chipid.2327+0x3>
    1d1e:	80 3a       	cpi	r24, 0xA0	; 160
    1d20:	22 e0       	ldi	r18, 0x02	; 2
    1d22:	92 07       	cpc	r25, r18
    1d24:	20 e1       	ldi	r18, 0x10	; 16
    1d26:	a2 07       	cpc	r26, r18
    1d28:	b1 05       	cpc	r27, r1
    1d2a:	b1 f4       	brne	.+44     	; 0x1d58 <nmi_get_chipid+0xc8>
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	ab 81       	ldd	r26, Y+3	; 0x03
    1d32:	bc 81       	ldd	r27, Y+4	; 0x04
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	a1 05       	cpc	r26, r1
    1d38:	b1 05       	cpc	r27, r1
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <nmi_get_chipid+0xae>
    1d3c:	53 c0       	rjmp	.+166    	; 0x1de4 <nmi_get_chipid+0x154>
    1d3e:	81 ea       	ldi	r24, 0xA1	; 161
    1d40:	92 e0       	ldi	r25, 0x02	; 2
    1d42:	a0 e1       	ldi	r26, 0x10	; 16
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	80 93 0d 2e 	sts	0x2E0D, r24	; 0x802e0d <chipid.2327>
    1d4a:	90 93 0e 2e 	sts	0x2E0E, r25	; 0x802e0e <chipid.2327+0x1>
    1d4e:	a0 93 0f 2e 	sts	0x2E0F, r26	; 0x802e0f <chipid.2327+0x2>
    1d52:	b0 93 10 2e 	sts	0x2E10, r27	; 0x802e10 <chipid.2327+0x3>
    1d56:	46 c0       	rjmp	.+140    	; 0x1de4 <nmi_get_chipid+0x154>
    1d58:	80 3b       	cpi	r24, 0xB0	; 176
    1d5a:	22 e0       	ldi	r18, 0x02	; 2
    1d5c:	92 07       	cpc	r25, r18
    1d5e:	20 e1       	ldi	r18, 0x10	; 16
    1d60:	a2 07       	cpc	r26, r18
    1d62:	b1 05       	cpc	r27, r1
    1d64:	39 f5       	brne	.+78     	; 0x1db4 <nmi_get_chipid+0x124>
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6a:	ab 81       	ldd	r26, Y+3	; 0x03
    1d6c:	bc 81       	ldd	r27, Y+4	; 0x04
    1d6e:	83 30       	cpi	r24, 0x03	; 3
    1d70:	91 05       	cpc	r25, r1
    1d72:	a1 05       	cpc	r26, r1
    1d74:	b1 05       	cpc	r27, r1
    1d76:	b1 f1       	breq	.+108    	; 0x1de4 <nmi_get_chipid+0x154>
    1d78:	04 97       	sbiw	r24, 0x04	; 4
    1d7a:	a1 05       	cpc	r26, r1
    1d7c:	b1 05       	cpc	r27, r1
    1d7e:	69 f4       	brne	.+26     	; 0x1d9a <nmi_get_chipid+0x10a>
    1d80:	81 eb       	ldi	r24, 0xB1	; 177
    1d82:	92 e0       	ldi	r25, 0x02	; 2
    1d84:	a0 e1       	ldi	r26, 0x10	; 16
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	80 93 0d 2e 	sts	0x2E0D, r24	; 0x802e0d <chipid.2327>
    1d8c:	90 93 0e 2e 	sts	0x2E0E, r25	; 0x802e0e <chipid.2327+0x1>
    1d90:	a0 93 0f 2e 	sts	0x2E0F, r26	; 0x802e0f <chipid.2327+0x2>
    1d94:	b0 93 10 2e 	sts	0x2E10, r27	; 0x802e10 <chipid.2327+0x3>
    1d98:	25 c0       	rjmp	.+74     	; 0x1de4 <nmi_get_chipid+0x154>
    1d9a:	82 eb       	ldi	r24, 0xB2	; 178
    1d9c:	92 e0       	ldi	r25, 0x02	; 2
    1d9e:	a0 e1       	ldi	r26, 0x10	; 16
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	80 93 0d 2e 	sts	0x2E0D, r24	; 0x802e0d <chipid.2327>
    1da6:	90 93 0e 2e 	sts	0x2E0E, r25	; 0x802e0e <chipid.2327+0x1>
    1daa:	a0 93 0f 2e 	sts	0x2E0F, r26	; 0x802e0f <chipid.2327+0x2>
    1dae:	b0 93 10 2e 	sts	0x2E10, r27	; 0x802e10 <chipid.2327+0x3>
    1db2:	18 c0       	rjmp	.+48     	; 0x1de4 <nmi_get_chipid+0x154>
    1db4:	80 3f       	cpi	r24, 0xF0	; 240
    1db6:	91 05       	cpc	r25, r1
    1db8:	a0 41       	sbci	r26, 0x10	; 16
    1dba:	b1 05       	cpc	r27, r1
    1dbc:	99 f4       	brne	.+38     	; 0x1de4 <nmi_get_chipid+0x154>
    1dbe:	4d e0       	ldi	r20, 0x0D	; 13
    1dc0:	5e e2       	ldi	r21, 0x2E	; 46
    1dc2:	60 e0       	ldi	r22, 0x00	; 0
    1dc4:	70 e0       	ldi	r23, 0x00	; 0
    1dc6:	8b e3       	ldi	r24, 0x3B	; 59
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
    1dce:	88 23       	and	r24, r24
    1dd0:	49 f0       	breq	.+18     	; 0x1de4 <nmi_get_chipid+0x154>
    1dd2:	10 92 0d 2e 	sts	0x2E0D, r1	; 0x802e0d <chipid.2327>
    1dd6:	10 92 0e 2e 	sts	0x2E0E, r1	; 0x802e0e <chipid.2327+0x1>
    1dda:	10 92 0f 2e 	sts	0x2E0F, r1	; 0x802e0f <chipid.2327+0x2>
    1dde:	10 92 10 2e 	sts	0x2E10, r1	; 0x802e10 <chipid.2327+0x3>
    1de2:	1a c0       	rjmp	.+52     	; 0x1e18 <nmi_get_chipid+0x188>
    1de4:	80 91 0d 2e 	lds	r24, 0x2E0D	; 0x802e0d <chipid.2327>
    1de8:	90 91 0e 2e 	lds	r25, 0x2E0E	; 0x802e0e <chipid.2327+0x1>
    1dec:	a0 91 0f 2e 	lds	r26, 0x2E0F	; 0x802e0f <chipid.2327+0x2>
    1df0:	b0 91 10 2e 	lds	r27, 0x2E10	; 0x802e10 <chipid.2327+0x3>
    1df4:	a0 7f       	andi	r26, 0xF0	; 240
    1df6:	a5 60       	ori	r26, 0x05	; 5
    1df8:	80 93 0d 2e 	sts	0x2E0D, r24	; 0x802e0d <chipid.2327>
    1dfc:	90 93 0e 2e 	sts	0x2E0E, r25	; 0x802e0e <chipid.2327+0x1>
    1e00:	a0 93 0f 2e 	sts	0x2E0F, r26	; 0x802e0f <chipid.2327+0x2>
    1e04:	b0 93 10 2e 	sts	0x2E10, r27	; 0x802e10 <chipid.2327+0x3>
    1e08:	c0 90 0d 2e 	lds	r12, 0x2E0D	; 0x802e0d <chipid.2327>
    1e0c:	d0 90 0e 2e 	lds	r13, 0x2E0E	; 0x802e0e <chipid.2327+0x1>
    1e10:	e0 90 0f 2e 	lds	r14, 0x2E0F	; 0x802e0f <chipid.2327+0x2>
    1e14:	f0 90 10 2e 	lds	r15, 0x2E10	; 0x802e10 <chipid.2327+0x3>
    1e18:	c7 01       	movw	r24, r14
    1e1a:	b6 01       	movw	r22, r12
    1e1c:	24 96       	adiw	r28, 0x04	; 4
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	ff 90       	pop	r15
    1e28:	ef 90       	pop	r14
    1e2a:	df 90       	pop	r13
    1e2c:	cf 90       	pop	r12
    1e2e:	08 95       	ret

00001e30 <chip_sleep>:
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <chip_sleep+0x6>
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <chip_sleep+0x8>
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	ae 01       	movw	r20, r28
    1e3e:	4f 5f       	subi	r20, 0xFF	; 255
    1e40:	5f 4f       	sbci	r21, 0xFF	; 255
    1e42:	60 e1       	ldi	r22, 0x10	; 16
    1e44:	70 e0       	ldi	r23, 0x00	; 0
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
    1e4e:	81 11       	cpse	r24, r1
    1e50:	41 c0       	rjmp	.+130    	; 0x1ed4 <chip_sleep+0xa4>
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	80 fd       	sbrc	r24, 0
    1e56:	f2 cf       	rjmp	.-28     	; 0x1e3c <chip_sleep+0xc>
    1e58:	ae 01       	movw	r20, r28
    1e5a:	4f 5f       	subi	r20, 0xFF	; 255
    1e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e5e:	61 e0       	ldi	r22, 0x01	; 1
    1e60:	70 e0       	ldi	r23, 0x00	; 0
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
    1e6a:	81 11       	cpse	r24, r1
    1e6c:	33 c0       	rjmp	.+102    	; 0x1ed4 <chip_sleep+0xa4>
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	9a 81       	ldd	r25, Y+2	; 0x02
    1e72:	ab 81       	ldd	r26, Y+3	; 0x03
    1e74:	bc 81       	ldd	r27, Y+4	; 0x04
    1e76:	81 ff       	sbrs	r24, 1
    1e78:	0f c0       	rjmp	.+30     	; 0x1e98 <chip_sleep+0x68>
    1e7a:	9c 01       	movw	r18, r24
    1e7c:	ad 01       	movw	r20, r26
    1e7e:	2d 7f       	andi	r18, 0xFD	; 253
    1e80:	29 83       	std	Y+1, r18	; 0x01
    1e82:	3a 83       	std	Y+2, r19	; 0x02
    1e84:	4b 83       	std	Y+3, r20	; 0x03
    1e86:	5c 83       	std	Y+4, r21	; 0x04
    1e88:	61 e0       	ldi	r22, 0x01	; 1
    1e8a:	70 e0       	ldi	r23, 0x00	; 0
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
    1e94:	81 11       	cpse	r24, r1
    1e96:	1e c0       	rjmp	.+60     	; 0x1ed4 <chip_sleep+0xa4>
    1e98:	ae 01       	movw	r20, r28
    1e9a:	4f 5f       	subi	r20, 0xFF	; 255
    1e9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9e:	6b e0       	ldi	r22, 0x0B	; 11
    1ea0:	70 e0       	ldi	r23, 0x00	; 0
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
    1eaa:	81 11       	cpse	r24, r1
    1eac:	13 c0       	rjmp	.+38     	; 0x1ed4 <chip_sleep+0xa4>
    1eae:	49 81       	ldd	r20, Y+1	; 0x01
    1eb0:	5a 81       	ldd	r21, Y+2	; 0x02
    1eb2:	6b 81       	ldd	r22, Y+3	; 0x03
    1eb4:	7c 81       	ldd	r23, Y+4	; 0x04
    1eb6:	40 ff       	sbrs	r20, 0
    1eb8:	0d c0       	rjmp	.+26     	; 0x1ed4 <chip_sleep+0xa4>
    1eba:	9a 01       	movw	r18, r20
    1ebc:	ab 01       	movw	r20, r22
    1ebe:	2e 7f       	andi	r18, 0xFE	; 254
    1ec0:	29 83       	std	Y+1, r18	; 0x01
    1ec2:	3a 83       	std	Y+2, r19	; 0x02
    1ec4:	4b 83       	std	Y+3, r20	; 0x03
    1ec6:	5c 83       	std	Y+4, r21	; 0x04
    1ec8:	6b e0       	ldi	r22, 0x0B	; 11
    1eca:	70 e0       	ldi	r23, 0x00	; 0
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
    1ed4:	24 96       	adiw	r28, 0x04	; 4
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	08 95       	ret

00001ee0 <chip_wake>:
    1ee0:	ef 92       	push	r14
    1ee2:	ff 92       	push	r15
    1ee4:	1f 93       	push	r17
    1ee6:	cf 93       	push	r28
    1ee8:	df 93       	push	r29
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	28 97       	sbiw	r28, 0x08	; 8
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	19 82       	std	Y+1, r1	; 0x01
    1ef6:	1a 82       	std	Y+2, r1	; 0x02
    1ef8:	1b 82       	std	Y+3, r1	; 0x03
    1efa:	1c 82       	std	Y+4, r1	; 0x04
    1efc:	1d 82       	std	Y+5, r1	; 0x05
    1efe:	1e 82       	std	Y+6, r1	; 0x06
    1f00:	1f 82       	std	Y+7, r1	; 0x07
    1f02:	18 86       	std	Y+8, r1	; 0x08
    1f04:	ae 01       	movw	r20, r28
    1f06:	4f 5f       	subi	r20, 0xFF	; 255
    1f08:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0a:	6b e0       	ldi	r22, 0x0B	; 11
    1f0c:	70 e0       	ldi	r23, 0x00	; 0
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
    1f16:	18 2f       	mov	r17, r24
    1f18:	81 11       	cpse	r24, r1
    1f1a:	53 c0       	rjmp	.+166    	; 0x1fc2 <chip_wake+0xe2>
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f20:	ab 81       	ldd	r26, Y+3	; 0x03
    1f22:	bc 81       	ldd	r27, Y+4	; 0x04
    1f24:	80 fd       	sbrc	r24, 0
    1f26:	0c c0       	rjmp	.+24     	; 0x1f40 <chip_wake+0x60>
    1f28:	9c 01       	movw	r18, r24
    1f2a:	ad 01       	movw	r20, r26
    1f2c:	21 60       	ori	r18, 0x01	; 1
    1f2e:	6b e0       	ldi	r22, 0x0B	; 11
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
    1f3a:	18 2f       	mov	r17, r24
    1f3c:	81 11       	cpse	r24, r1
    1f3e:	41 c0       	rjmp	.+130    	; 0x1fc2 <chip_wake+0xe2>
    1f40:	ae 01       	movw	r20, r28
    1f42:	4f 5f       	subi	r20, 0xFF	; 255
    1f44:	5f 4f       	sbci	r21, 0xFF	; 255
    1f46:	61 e0       	ldi	r22, 0x01	; 1
    1f48:	70 e0       	ldi	r23, 0x00	; 0
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
    1f52:	18 2f       	mov	r17, r24
    1f54:	81 11       	cpse	r24, r1
    1f56:	35 c0       	rjmp	.+106    	; 0x1fc2 <chip_wake+0xe2>
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5c:	ab 81       	ldd	r26, Y+3	; 0x03
    1f5e:	bc 81       	ldd	r27, Y+4	; 0x04
    1f60:	81 fd       	sbrc	r24, 1
    1f62:	0c c0       	rjmp	.+24     	; 0x1f7c <chip_wake+0x9c>
    1f64:	9c 01       	movw	r18, r24
    1f66:	ad 01       	movw	r20, r26
    1f68:	22 60       	ori	r18, 0x02	; 2
    1f6a:	61 e0       	ldi	r22, 0x01	; 1
    1f6c:	70 e0       	ldi	r23, 0x00	; 0
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
    1f76:	18 2f       	mov	r17, r24
    1f78:	81 11       	cpse	r24, r1
    1f7a:	23 c0       	rjmp	.+70     	; 0x1fc2 <chip_wake+0xe2>
    1f7c:	e1 2c       	mov	r14, r1
    1f7e:	f1 2c       	mov	r15, r1
    1f80:	ae 01       	movw	r20, r28
    1f82:	4b 5f       	subi	r20, 0xFB	; 251
    1f84:	5f 4f       	sbci	r21, 0xFF	; 255
    1f86:	6f e0       	ldi	r22, 0x0F	; 15
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
    1f92:	18 2f       	mov	r17, r24
    1f94:	81 11       	cpse	r24, r1
    1f96:	15 c0       	rjmp	.+42     	; 0x1fc2 <chip_wake+0xe2>
    1f98:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9a:	82 fd       	sbrc	r24, 2
    1f9c:	0e c0       	rjmp	.+28     	; 0x1fba <chip_wake+0xda>
    1f9e:	62 e0       	ldi	r22, 0x02	; 2
    1fa0:	70 e0       	ldi	r23, 0x00	; 0
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	0e 94 93 05 	call	0xb26	; 0xb26 <nm_bsp_sleep>
    1faa:	8f ef       	ldi	r24, 0xFF	; 255
    1fac:	e8 1a       	sub	r14, r24
    1fae:	f8 0a       	sbc	r15, r24
    1fb0:	85 e0       	ldi	r24, 0x05	; 5
    1fb2:	e8 16       	cp	r14, r24
    1fb4:	f1 04       	cpc	r15, r1
    1fb6:	21 f7       	brne	.-56     	; 0x1f80 <chip_wake+0xa0>
    1fb8:	03 c0       	rjmp	.+6      	; 0x1fc0 <chip_wake+0xe0>
    1fba:	0e 94 37 11 	call	0x226e	; 0x226e <nm_bus_reset>
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <chip_wake+0xe2>
    1fc0:	1c ef       	ldi	r17, 0xFC	; 252
    1fc2:	81 2f       	mov	r24, r17
    1fc4:	28 96       	adiw	r28, 0x08	; 8
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	df 91       	pop	r29
    1fcc:	cf 91       	pop	r28
    1fce:	1f 91       	pop	r17
    1fd0:	ff 90       	pop	r15
    1fd2:	ef 90       	pop	r14
    1fd4:	08 95       	ret

00001fd6 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    1fd6:	cf 92       	push	r12
    1fd8:	df 92       	push	r13
    1fda:	ef 92       	push	r14
    1fdc:	ff 92       	push	r15
    1fde:	cf 93       	push	r28
    1fe0:	c8 2f       	mov	r28, r24
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    1fe2:	64 e1       	ldi	r22, 0x14	; 20
    1fe4:	70 e1       	ldi	r23, 0x10	; 16
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	0e 94 3a 11 	call	0x2274	; 0x2274 <nm_read_reg>
		if (reg & 0x80000000) {
    1fee:	99 23       	and	r25, r25
    1ff0:	3c f0       	brlt	.+14     	; 0x2000 <wait_for_bootrom+0x2a>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1ff2:	61 e0       	ldi	r22, 0x01	; 1
    1ff4:	70 e0       	ldi	r23, 0x00	; 0
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	0e 94 93 05 	call	0xb26	; 0xb26 <nm_bsp_sleep>
	}
    1ffe:	f1 cf       	rjmp	.-30     	; 0x1fe2 <wait_for_bootrom+0xc>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    2000:	6c eb       	ldi	r22, 0xBC	; 188
    2002:	77 e0       	ldi	r23, 0x07	; 7
    2004:	82 e0       	ldi	r24, 0x02	; 2
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	0e 94 3a 11 	call	0x2274	; 0x2274 <nm_read_reg>
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    200c:	60 fd       	sbrc	r22, 0
    200e:	10 c0       	rjmp	.+32     	; 0x2030 <wait_for_bootrom+0x5a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    2010:	61 e0       	ldi	r22, 0x01	; 1
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	0e 94 93 05 	call	0xb26	; 0xb26 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
    201c:	6c e0       	ldi	r22, 0x0C	; 12
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	cb 01       	movw	r24, r22
    2022:	0e 94 3a 11 	call	0x2274	; 0x2274 <nm_read_reg>

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    2026:	6e 39       	cpi	r22, 0x9E	; 158
    2028:	70 4d       	sbci	r23, 0xD0	; 208
    202a:	8d 4a       	sbci	r24, 0xAD	; 173
    202c:	90 41       	sbci	r25, 0x10	; 16
    202e:	81 f7       	brne	.-32     	; 0x2010 <wait_for_bootrom+0x3a>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    2030:	c2 30       	cpi	r28, 0x02	; 2
    2032:	c1 f4       	brne	.+48     	; 0x2064 <wait_for_bootrom+0x8e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2034:	2d e7       	ldi	r18, 0x7D	; 125
    2036:	35 ed       	ldi	r19, 0xD5	; 213
    2038:	4c e1       	ldi	r20, 0x1C	; 28
    203a:	5c e3       	ldi	r21, 0x3C	; 60
    203c:	6c ea       	ldi	r22, 0xAC	; 172
    203e:	77 e0       	ldi	r23, 0x07	; 7
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e1       	ldi	r20, 0x10	; 16
    204e:	50 e0       	ldi	r21, 0x00	; 0
    2050:	6c e8       	ldi	r22, 0x8C	; 140
    2052:	70 e1       	ldi	r23, 0x10	; 16
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
    205c:	c1 2c       	mov	r12, r1
    205e:	d1 2c       	mov	r13, r1
    2060:	76 01       	movw	r14, r12
    2062:	36 c0       	rjmp	.+108    	; 0x20d0 <wait_for_bootrom+0xfa>
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    2064:	c3 30       	cpi	r28, 0x03	; 3
    2066:	b9 f4       	brne	.+46     	; 0x2096 <wait_for_bootrom+0xc0>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2068:	2d e7       	ldi	r18, 0x7D	; 125
    206a:	35 ed       	ldi	r19, 0xD5	; 213
    206c:	4c e1       	ldi	r20, 0x1C	; 28
    206e:	5c e3       	ldi	r21, 0x3C	; 60
    2070:	6c ea       	ldi	r22, 0xAC	; 172
    2072:	77 e0       	ldi	r23, 0x07	; 7
    2074:	82 e0       	ldi	r24, 0x02	; 2
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	a9 01       	movw	r20, r18
    2082:	6c e8       	ldi	r22, 0x8C	; 140
    2084:	70 e1       	ldi	r23, 0x10	; 16
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
    208e:	c1 2c       	mov	r12, r1
    2090:	d1 2c       	mov	r13, r1
    2092:	76 01       	movw	r14, r12
    2094:	1d c0       	rjmp	.+58     	; 0x20d0 <wait_for_bootrom+0xfa>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    2096:	c4 30       	cpi	r28, 0x04	; 4
    2098:	79 f4       	brne	.+30     	; 0x20b8 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    209a:	22 e5       	ldi	r18, 0x52	; 82
    209c:	33 e1       	ldi	r19, 0x13	; 19
    209e:	a9 01       	movw	r20, r18
    20a0:	6c e8       	ldi	r22, 0x8C	; 140
    20a2:	70 e1       	ldi	r23, 0x10	; 16
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    20ac:	c1 2c       	mov	r12, r1
    20ae:	d1 2c       	mov	r13, r1
    20b0:	76 01       	movw	r14, r12
    20b2:	68 94       	set
    20b4:	c7 f8       	bld	r12, 7
    20b6:	0c c0       	rjmp	.+24     	; 0x20d0 <wait_for_bootrom+0xfa>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    20b8:	22 e5       	ldi	r18, 0x52	; 82
    20ba:	33 e1       	ldi	r19, 0x13	; 19
    20bc:	a9 01       	movw	r20, r18
    20be:	6c e8       	ldi	r22, 0x8C	; 140
    20c0:	70 e1       	ldi	r23, 0x10	; 16
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
    20ca:	c1 2c       	mov	r12, r1
    20cc:	d1 2c       	mov	r13, r1
    20ce:	76 01       	movw	r14, r12
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    20d0:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <nmi_get_chipid>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9f 70       	andi	r25, 0x0F	; 15
    20da:	aa 27       	eor	r26, r26
    20dc:	bb 27       	eor	r27, r27
    20de:	80 3a       	cpi	r24, 0xA0	; 160
    20e0:	93 40       	sbci	r25, 0x03	; 3
    20e2:	a1 05       	cpc	r26, r1
    20e4:	b1 05       	cpc	r27, r1
    20e6:	30 f0       	brcs	.+12     	; 0x20f4 <wait_for_bootrom+0x11e>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    20e8:	c7 01       	movw	r24, r14
    20ea:	b6 01       	movw	r22, r12
    20ec:	62 60       	ori	r22, 0x02	; 2
    20ee:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <chip_apply_conf>
    20f2:	04 c0       	rjmp	.+8      	; 0x20fc <wait_for_bootrom+0x126>
	} else {
		chip_apply_conf(u32GpReg1);
    20f4:	c7 01       	movw	r24, r14
    20f6:	b6 01       	movw	r22, r12
    20f8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    20fc:	21 e6       	ldi	r18, 0x61	; 97
    20fe:	3f e2       	ldi	r19, 0x2F	; 47
    2100:	42 e5       	ldi	r20, 0x52	; 82
    2102:	5f ee       	ldi	r21, 0xEF	; 239
    2104:	6c e0       	ldi	r22, 0x0C	; 12
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	cb 01       	movw	r24, r22
    210a:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	cf 91       	pop	r28
    2112:	ff 90       	pop	r15
    2114:	ef 90       	pop	r14
    2116:	df 90       	pop	r13
    2118:	cf 90       	pop	r12
    211a:	08 95       	ret

0000211c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    211c:	cf 92       	push	r12
    211e:	df 92       	push	r13
    2120:	ef 92       	push	r14
    2122:	ff 92       	push	r15
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	28 97       	sbiw	r28, 0x08	; 8
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	de bf       	out	0x3e, r29	; 62
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    2136:	4c e8       	ldi	r20, 0x8C	; 140
    2138:	50 e1       	ldi	r21, 0x10	; 16
    213a:	60 e0       	ldi	r22, 0x00	; 0
    213c:	70 e0       	ldi	r23, 0x00	; 0
    213e:	49 83       	std	Y+1, r20	; 0x01
    2140:	5a 83       	std	Y+2, r21	; 0x02
    2142:	6b 83       	std	Y+3, r22	; 0x03
    2144:	7c 83       	std	Y+4, r23	; 0x04
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2146:	46 e3       	ldi	r20, 0x36	; 54
    2148:	56 e2       	ldi	r21, 0x26	; 38
    214a:	63 e5       	ldi	r22, 0x53	; 83
    214c:	72 e0       	ldi	r23, 0x02	; 2
    214e:	4d 83       	std	Y+5, r20	; 0x05
    2150:	5e 83       	std	Y+6, r21	; 0x06
    2152:	6f 83       	std	Y+7, r22	; 0x07
    2154:	78 87       	std	Y+8, r23	; 0x08
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    2156:	82 50       	subi	r24, 0x02	; 2
    2158:	82 30       	cpi	r24, 0x02	; 2
    215a:	20 f5       	brcc	.+72     	; 0x21a4 <wait_for_firmware_start+0x88>
		regAddress = NMI_REV_REG;
    215c:	8c ea       	ldi	r24, 0xAC	; 172
    215e:	97 e0       	ldi	r25, 0x07	; 7
    2160:	a2 e0       	ldi	r26, 0x02	; 2
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	ab 83       	std	Y+3, r26	; 0x03
    216a:	bc 83       	std	Y+4, r27	; 0x04
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    216c:	83 ec       	ldi	r24, 0xC3	; 195
    216e:	91 ec       	ldi	r25, 0xC1	; 193
    2170:	ad e5       	ldi	r26, 0x5D	; 93
    2172:	b7 ed       	ldi	r27, 0xD7	; 215
    2174:	8d 83       	std	Y+5, r24	; 0x05
    2176:	9e 83       	std	Y+6, r25	; 0x06
    2178:	af 83       	std	Y+7, r26	; 0x07
    217a:	b8 87       	std	Y+8, r27	; 0x08
    217c:	13 c0       	rjmp	.+38     	; 0x21a4 <wait_for_firmware_start+0x88>
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    217e:	62 e0       	ldi	r22, 0x02	; 2
    2180:	70 e0       	ldi	r23, 0x00	; 0
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	0e 94 93 05 	call	0xb26	; 0xb26 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    218a:	69 81       	ldd	r22, Y+1	; 0x01
    218c:	7a 81       	ldd	r23, Y+2	; 0x02
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	9c 81       	ldd	r25, Y+4	; 0x04
    2192:	0e 94 3a 11 	call	0x2274	; 0x2274 <nm_read_reg>
    2196:	21 e0       	ldi	r18, 0x01	; 1
    2198:	c2 1a       	sub	r12, r18
    219a:	d1 08       	sbc	r13, r1
    219c:	e1 08       	sbc	r14, r1
    219e:	f1 08       	sbc	r15, r1
		if(++cnt >= u32Timeout)
    21a0:	41 f4       	brne	.+16     	; 0x21b2 <wait_for_firmware_start+0x96>
    21a2:	24 c0       	rjmp	.+72     	; 0x21ec <wait_for_firmware_start+0xd0>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
    21a4:	cc 24       	eor	r12, r12
    21a6:	ca 94       	dec	r12
    21a8:	dc 2c       	mov	r13, r12
    21aa:	76 01       	movw	r14, r12
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	70 e0       	ldi	r23, 0x00	; 0
    21b0:	cb 01       	movw	r24, r22
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    21b2:	0d 81       	ldd	r16, Y+5	; 0x05
    21b4:	1e 81       	ldd	r17, Y+6	; 0x06
    21b6:	2f 81       	ldd	r18, Y+7	; 0x07
    21b8:	38 85       	ldd	r19, Y+8	; 0x08
    21ba:	60 17       	cp	r22, r16
    21bc:	71 07       	cpc	r23, r17
    21be:	82 07       	cpc	r24, r18
    21c0:	93 07       	cpc	r25, r19
    21c2:	e9 f6       	brne	.-70     	; 0x217e <wait_for_firmware_start+0x62>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	9e 81       	ldd	r25, Y+6	; 0x06
    21c8:	af 81       	ldd	r26, Y+7	; 0x07
    21ca:	b8 85       	ldd	r27, Y+8	; 0x08
    21cc:	86 33       	cpi	r24, 0x36	; 54
    21ce:	96 42       	sbci	r25, 0x26	; 38
    21d0:	a3 45       	sbci	r26, 0x53	; 83
    21d2:	b2 40       	sbci	r27, 0x02	; 2
    21d4:	69 f4       	brne	.+26     	; 0x21f0 <wait_for_firmware_start+0xd4>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	a9 01       	movw	r20, r18
    21dc:	6c e8       	ldi	r22, 0x8C	; 140
    21de:	70 e1       	ldi	r23, 0x10	; 16
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	03 c0       	rjmp	.+6      	; 0x21f2 <wait_for_firmware_start+0xd6>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt >= u32Timeout)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    21ec:	8b ef       	ldi	r24, 0xFB	; 251
    21ee:	01 c0       	rjmp	.+2      	; 0x21f2 <wait_for_firmware_start+0xd6>
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    21f0:	80 e0       	ldi	r24, 0x00	; 0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    21f2:	28 96       	adiw	r28, 0x08	; 8
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	df 91       	pop	r29
    21fa:	cf 91       	pop	r28
    21fc:	1f 91       	pop	r17
    21fe:	0f 91       	pop	r16
    2200:	ff 90       	pop	r15
    2202:	ef 90       	pop	r14
    2204:	df 90       	pop	r13
    2206:	cf 90       	pop	r12
    2208:	08 95       	ret

0000220a <chip_deinit>:

sint8 chip_deinit(void)
{
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	00 d0       	rcall	.+0      	; 0x2210 <chip_deinit+0x6>
    2210:	00 d0       	rcall	.+0      	; 0x2212 <chip_deinit+0x8>
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
	uint32 reg = 0;
    2216:	19 82       	std	Y+1, r1	; 0x01
    2218:	1a 82       	std	Y+2, r1	; 0x02
    221a:	1b 82       	std	Y+3, r1	; 0x03
    221c:	1c 82       	std	Y+4, r1	; 0x04
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    221e:	ae 01       	movw	r20, r28
    2220:	4f 5f       	subi	r20, 0xFF	; 255
    2222:	5f 4f       	sbci	r21, 0xFF	; 255
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	74 e1       	ldi	r23, 0x14	; 20
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
	if (ret != M2M_SUCCESS) {
    2230:	81 11       	cpse	r24, r1
    2232:	11 c0       	rjmp	.+34     	; 0x2256 <chip_deinit+0x4c>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	ab 81       	ldd	r26, Y+3	; 0x03
    223a:	bc 81       	ldd	r27, Y+4	; 0x04
    223c:	9c 01       	movw	r18, r24
    223e:	ad 01       	movw	r20, r26
    2240:	3b 7f       	andi	r19, 0xFB	; 251
    2242:	29 83       	std	Y+1, r18	; 0x01
    2244:	3a 83       	std	Y+2, r19	; 0x02
    2246:	4b 83       	std	Y+3, r20	; 0x03
    2248:	5c 83       	std	Y+4, r21	; 0x04
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	74 e1       	ldi	r23, 0x14	; 20
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
		goto ERR1;
	}

ERR1:
	return ret;
}
    2256:	24 96       	adiw	r28, 0x04	; 4
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	de bf       	out	0x3e, r29	; 62
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	08 95       	ret

00002262 <nm_bus_iface_init>:
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
	ret = nm_uart_reconfigure(ptr);
#endif
	return ret;
}
    2262:	0e 94 e5 05 	call	0xbca	; 0xbca <nm_bus_init>
    2266:	08 95       	ret

00002268 <nm_bus_iface_deinit>:
    2268:	0e 94 4f 06 	call	0xc9e	; 0xc9e <nm_bus_deinit>
    226c:	08 95       	ret

0000226e <nm_bus_reset>:
    226e:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <nm_spi_reset>
    2272:	08 95       	ret

00002274 <nm_read_reg>:
uint32 nm_read_reg(uint32 u32Addr)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2274:	0e 94 02 16 	call	0x2c04	; 0x2c04 <nm_spi_read_reg>
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    2278:	08 95       	ret

0000227a <nm_read_reg_with_ret>:
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    227a:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <nm_spi_read_reg_with_ret>
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    227e:	08 95       	ret

00002280 <nm_write_reg>:
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2280:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <nm_spi_write_reg>
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2284:	08 95       	ret

00002286 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2286:	2f 92       	push	r2
    2288:	3f 92       	push	r3
    228a:	4f 92       	push	r4
    228c:	5f 92       	push	r5
    228e:	6f 92       	push	r6
    2290:	7f 92       	push	r7
    2292:	8f 92       	push	r8
    2294:	9f 92       	push	r9
    2296:	af 92       	push	r10
    2298:	bf 92       	push	r11
    229a:	cf 92       	push	r12
    229c:	df 92       	push	r13
    229e:	ef 92       	push	r14
    22a0:	ff 92       	push	r15
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	26 97       	sbiw	r28, 0x06	; 6
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	4b 01       	movw	r8, r22
    22b6:	5c 01       	movw	r10, r24
    22b8:	1a 01       	movw	r2, r20
    22ba:	28 01       	movw	r4, r16
    22bc:	39 01       	movw	r6, r18
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    22be:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <egstrNmBusCapabilities>
    22c2:	90 91 43 28 	lds	r25, 0x2843	; 0x802843 <egstrNmBusCapabilities+0x1>
    22c6:	08 97       	sbiw	r24, 0x08	; 8
    22c8:	8d 83       	std	Y+5, r24	; 0x05
    22ca:	9e 83       	std	Y+6, r25	; 0x06
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    22cc:	6c 01       	movw	r12, r24
    22ce:	e1 2c       	mov	r14, r1
    22d0:	f1 2c       	mov	r15, r1
    22d2:	c0 16       	cp	r12, r16
    22d4:	d1 06       	cpc	r13, r17
    22d6:	e2 06       	cpc	r14, r18
    22d8:	f3 06       	cpc	r15, r19
    22da:	70 f0       	brcs	.+28     	; 0x22f8 <nm_read_block+0x72>
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    22dc:	19 82       	std	Y+1, r1	; 0x01
    22de:	1a 82       	std	Y+2, r1	; 0x02
    22e0:	1b 82       	std	Y+3, r1	; 0x03
    22e2:	1c 82       	std	Y+4, r1	; 0x04
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    22e4:	49 81       	ldd	r20, Y+1	; 0x01
    22e6:	5a 81       	ldd	r21, Y+2	; 0x02
    22e8:	42 0d       	add	r20, r2
    22ea:	53 1d       	adc	r21, r3
    22ec:	92 01       	movw	r18, r4
    22ee:	c5 01       	movw	r24, r10
    22f0:	b4 01       	movw	r22, r8
    22f2:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <nm_spi_read_block>
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
			break;
    22f6:	2c c0       	rjmp	.+88     	; 0x2350 <nm_read_block+0xca>
    22f8:	8a 01       	movw	r16, r20
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    22fa:	19 82       	std	Y+1, r1	; 0x01
    22fc:	1a 82       	std	Y+2, r1	; 0x02
    22fe:	1b 82       	std	Y+3, r1	; 0x03
    2300:	1c 82       	std	Y+4, r1	; 0x04
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2302:	2d 81       	ldd	r18, Y+5	; 0x05
    2304:	3e 81       	ldd	r19, Y+6	; 0x06
    2306:	a8 01       	movw	r20, r16
    2308:	c5 01       	movw	r24, r10
    230a:	b4 01       	movw	r22, r8
    230c:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <nm_spi_read_block>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2310:	81 11       	cpse	r24, r1
    2312:	1e c0       	rjmp	.+60     	; 0x2350 <nm_read_block+0xca>
			u32Sz -= u16MaxTrxSz;
    2314:	4c 18       	sub	r4, r12
    2316:	5d 08       	sbc	r5, r13
    2318:	6e 08       	sbc	r6, r14
    231a:	7f 08       	sbc	r7, r15
			off += u16MaxTrxSz;
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	9a 81       	ldd	r25, Y+2	; 0x02
    2320:	ab 81       	ldd	r26, Y+3	; 0x03
    2322:	bc 81       	ldd	r27, Y+4	; 0x04
    2324:	8c 0d       	add	r24, r12
    2326:	9d 1d       	adc	r25, r13
    2328:	ae 1d       	adc	r26, r14
    232a:	bf 1d       	adc	r27, r15
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	ab 83       	std	Y+3, r26	; 0x03
    2332:	bc 83       	std	Y+4, r27	; 0x04
			u32Addr += u16MaxTrxSz;
    2334:	8c 0c       	add	r8, r12
    2336:	9d 1c       	adc	r9, r13
    2338:	ae 1c       	adc	r10, r14
    233a:	bf 1c       	adc	r11, r15
    233c:	ad 81       	ldd	r26, Y+5	; 0x05
    233e:	be 81       	ldd	r27, Y+6	; 0x06
    2340:	0a 0f       	add	r16, r26
    2342:	1b 1f       	adc	r17, r27
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2344:	c4 14       	cp	r12, r4
    2346:	d5 04       	cpc	r13, r5
    2348:	e6 04       	cpc	r14, r6
    234a:	f7 04       	cpc	r15, r7
    234c:	d0 f2       	brcs	.-76     	; 0x2302 <nm_read_block+0x7c>
    234e:	ca cf       	rjmp	.-108    	; 0x22e4 <nm_read_block+0x5e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
    2350:	26 96       	adiw	r28, 0x06	; 6
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	df 91       	pop	r29
    2358:	cf 91       	pop	r28
    235a:	1f 91       	pop	r17
    235c:	0f 91       	pop	r16
    235e:	ff 90       	pop	r15
    2360:	ef 90       	pop	r14
    2362:	df 90       	pop	r13
    2364:	cf 90       	pop	r12
    2366:	bf 90       	pop	r11
    2368:	af 90       	pop	r10
    236a:	9f 90       	pop	r9
    236c:	8f 90       	pop	r8
    236e:	7f 90       	pop	r7
    2370:	6f 90       	pop	r6
    2372:	5f 90       	pop	r5
    2374:	4f 90       	pop	r4
    2376:	3f 90       	pop	r3
    2378:	2f 90       	pop	r2
    237a:	08 95       	ret

0000237c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    237c:	2f 92       	push	r2
    237e:	3f 92       	push	r3
    2380:	4f 92       	push	r4
    2382:	5f 92       	push	r5
    2384:	6f 92       	push	r6
    2386:	7f 92       	push	r7
    2388:	8f 92       	push	r8
    238a:	9f 92       	push	r9
    238c:	af 92       	push	r10
    238e:	bf 92       	push	r11
    2390:	cf 92       	push	r12
    2392:	df 92       	push	r13
    2394:	ef 92       	push	r14
    2396:	ff 92       	push	r15
    2398:	0f 93       	push	r16
    239a:	1f 93       	push	r17
    239c:	cf 93       	push	r28
    239e:	df 93       	push	r29
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	26 97       	sbiw	r28, 0x06	; 6
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	4b 01       	movw	r8, r22
    23ac:	5c 01       	movw	r10, r24
    23ae:	1a 01       	movw	r2, r20
    23b0:	28 01       	movw	r4, r16
    23b2:	39 01       	movw	r6, r18
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    23b4:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <egstrNmBusCapabilities>
    23b8:	90 91 43 28 	lds	r25, 0x2843	; 0x802843 <egstrNmBusCapabilities+0x1>
    23bc:	08 97       	sbiw	r24, 0x08	; 8
    23be:	8d 83       	std	Y+5, r24	; 0x05
    23c0:	9e 83       	std	Y+6, r25	; 0x06
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    23c2:	6c 01       	movw	r12, r24
    23c4:	e1 2c       	mov	r14, r1
    23c6:	f1 2c       	mov	r15, r1
    23c8:	c0 16       	cp	r12, r16
    23ca:	d1 06       	cpc	r13, r17
    23cc:	e2 06       	cpc	r14, r18
    23ce:	f3 06       	cpc	r15, r19
    23d0:	70 f0       	brcs	.+28     	; 0x23ee <nm_write_block+0x72>
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    23d2:	19 82       	std	Y+1, r1	; 0x01
    23d4:	1a 82       	std	Y+2, r1	; 0x02
    23d6:	1b 82       	std	Y+3, r1	; 0x03
    23d8:	1c 82       	std	Y+4, r1	; 0x04
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    23da:	49 81       	ldd	r20, Y+1	; 0x01
    23dc:	5a 81       	ldd	r21, Y+2	; 0x02
    23de:	42 0d       	add	r20, r2
    23e0:	53 1d       	adc	r21, r3
    23e2:	92 01       	movw	r18, r4
    23e4:	c5 01       	movw	r24, r10
    23e6:	b4 01       	movw	r22, r8
    23e8:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <nm_spi_write_block>
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
			break;
    23ec:	2c c0       	rjmp	.+88     	; 0x2446 <nm_write_block+0xca>
    23ee:	8a 01       	movw	r16, r20
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    23f0:	19 82       	std	Y+1, r1	; 0x01
    23f2:	1a 82       	std	Y+2, r1	; 0x02
    23f4:	1b 82       	std	Y+3, r1	; 0x03
    23f6:	1c 82       	std	Y+4, r1	; 0x04
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    23f8:	2d 81       	ldd	r18, Y+5	; 0x05
    23fa:	3e 81       	ldd	r19, Y+6	; 0x06
    23fc:	a8 01       	movw	r20, r16
    23fe:	c5 01       	movw	r24, r10
    2400:	b4 01       	movw	r22, r8
    2402:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <nm_spi_write_block>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2406:	81 11       	cpse	r24, r1
    2408:	1e c0       	rjmp	.+60     	; 0x2446 <nm_write_block+0xca>
			u32Sz -= u16MaxTrxSz;
    240a:	4c 18       	sub	r4, r12
    240c:	5d 08       	sbc	r5, r13
    240e:	6e 08       	sbc	r6, r14
    2410:	7f 08       	sbc	r7, r15
			off += u16MaxTrxSz;
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	9a 81       	ldd	r25, Y+2	; 0x02
    2416:	ab 81       	ldd	r26, Y+3	; 0x03
    2418:	bc 81       	ldd	r27, Y+4	; 0x04
    241a:	8c 0d       	add	r24, r12
    241c:	9d 1d       	adc	r25, r13
    241e:	ae 1d       	adc	r26, r14
    2420:	bf 1d       	adc	r27, r15
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	9a 83       	std	Y+2, r25	; 0x02
    2426:	ab 83       	std	Y+3, r26	; 0x03
    2428:	bc 83       	std	Y+4, r27	; 0x04
			u32Addr += u16MaxTrxSz;
    242a:	8c 0c       	add	r8, r12
    242c:	9d 1c       	adc	r9, r13
    242e:	ae 1c       	adc	r10, r14
    2430:	bf 1c       	adc	r11, r15
    2432:	ad 81       	ldd	r26, Y+5	; 0x05
    2434:	be 81       	ldd	r27, Y+6	; 0x06
    2436:	0a 0f       	add	r16, r26
    2438:	1b 1f       	adc	r17, r27
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    243a:	c4 14       	cp	r12, r4
    243c:	d5 04       	cpc	r13, r5
    243e:	e6 04       	cpc	r14, r6
    2440:	f7 04       	cpc	r15, r7
    2442:	d0 f2       	brcs	.-76     	; 0x23f8 <nm_write_block+0x7c>
    2444:	ca cf       	rjmp	.-108    	; 0x23da <nm_write_block+0x5e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
    2446:	26 96       	adiw	r28, 0x06	; 6
    2448:	cd bf       	out	0x3d, r28	; 61
    244a:	de bf       	out	0x3e, r29	; 62
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28
    2450:	1f 91       	pop	r17
    2452:	0f 91       	pop	r16
    2454:	ff 90       	pop	r15
    2456:	ef 90       	pop	r14
    2458:	df 90       	pop	r13
    245a:	cf 90       	pop	r12
    245c:	bf 90       	pop	r11
    245e:	af 90       	pop	r10
    2460:	9f 90       	pop	r9
    2462:	8f 90       	pop	r8
    2464:	7f 90       	pop	r7
    2466:	6f 90       	pop	r6
    2468:	5f 90       	pop	r5
    246a:	4f 90       	pop	r4
    246c:	3f 90       	pop	r3
    246e:	2f 90       	pop	r2
    2470:	08 95       	ret

00002472 <nm_get_firmware_full_info>:
	/*disable all interrupt in ROM (to disable uart) in 2b0 chip*/
	nm_write_reg(0x20300,0);

ERR1:
	return ret;
}
    2472:	ef 92       	push	r14
    2474:	ff 92       	push	r15
    2476:	0f 93       	push	r16
    2478:	1f 93       	push	r17
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	2c 97       	sbiw	r28, 0x0c	; 12
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	19 82       	std	Y+1, r1	; 0x01
    248a:	1a 82       	std	Y+2, r1	; 0x02
    248c:	1b 82       	std	Y+3, r1	; 0x03
    248e:	1c 82       	std	Y+4, r1	; 0x04
    2490:	fe 01       	movw	r30, r28
    2492:	35 96       	adiw	r30, 0x05	; 5
    2494:	28 e0       	ldi	r18, 0x08	; 8
    2496:	df 01       	movw	r26, r30
    2498:	1d 92       	st	X+, r1
    249a:	2a 95       	dec	r18
    249c:	e9 f7       	brne	.-6      	; 0x2498 <nm_get_firmware_full_info+0x26>
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <nm_get_firmware_full_info+0x32>
    24a2:	7a c0       	rjmp	.+244    	; 0x2598 <nm_get_firmware_full_info+0x126>
    24a4:	7c 01       	movw	r14, r24
    24a6:	26 e2       	ldi	r18, 0x26	; 38
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	40 e0       	ldi	r20, 0x00	; 0
    24ac:	50 e0       	ldi	r21, 0x00	; 0
    24ae:	60 e0       	ldi	r22, 0x00	; 0
    24b0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <m2m_memset>
    24b4:	ae 01       	movw	r20, r28
    24b6:	4f 5f       	subi	r20, 0xFF	; 255
    24b8:	5f 4f       	sbci	r21, 0xFF	; 255
    24ba:	68 e0       	ldi	r22, 0x08	; 8
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	8c e0       	ldi	r24, 0x0C	; 12
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
    24c6:	81 11       	cpse	r24, r1
    24c8:	72 c0       	rjmp	.+228    	; 0x25ae <nm_get_firmware_full_info+0x13c>
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	9a 81       	ldd	r25, Y+2	; 0x02
    24ce:	ab 81       	ldd	r26, Y+3	; 0x03
    24d0:	bc 81       	ldd	r27, Y+4	; 0x04
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	a1 05       	cpc	r26, r1
    24d6:	b1 05       	cpc	r27, r1
    24d8:	09 f4       	brne	.+2      	; 0x24dc <nm_get_firmware_full_info+0x6a>
    24da:	60 c0       	rjmp	.+192    	; 0x259c <nm_get_firmware_full_info+0x12a>
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	83 60       	ori	r24, 0x03	; 3
    24e2:	08 e0       	ldi	r16, 0x08	; 8
    24e4:	10 e0       	ldi	r17, 0x00	; 0
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	ae 01       	movw	r20, r28
    24ec:	4b 5f       	subi	r20, 0xFB	; 251
    24ee:	5f 4f       	sbci	r21, 0xFF	; 255
    24f0:	0e 94 43 11 	call	0x2286	; 0x2286 <nm_read_block>
    24f4:	81 11       	cpse	r24, r1
    24f6:	5b c0       	rjmp	.+182    	; 0x25ae <nm_get_firmware_full_info+0x13c>
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
    24fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fc:	ab 85       	ldd	r26, Y+11	; 0x0b
    24fe:	bc 85       	ldd	r27, Y+12	; 0x0c
    2500:	aa 27       	eor	r26, r26
    2502:	bb 27       	eor	r27, r27
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	9a 83       	std	Y+2, r25	; 0x02
    2508:	ab 83       	std	Y+3, r26	; 0x03
    250a:	bc 83       	std	Y+4, r27	; 0x04
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	a1 05       	cpc	r26, r1
    2510:	b1 05       	cpc	r27, r1
    2512:	09 f4       	brne	.+2      	; 0x2516 <nm_get_firmware_full_info+0xa4>
    2514:	45 c0       	rjmp	.+138    	; 0x25a0 <nm_get_firmware_full_info+0x12e>
    2516:	bc 01       	movw	r22, r24
    2518:	cd 01       	movw	r24, r26
    251a:	83 60       	ori	r24, 0x03	; 3
    251c:	06 e2       	ldi	r16, 0x26	; 38
    251e:	10 e0       	ldi	r17, 0x00	; 0
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	a7 01       	movw	r20, r14
    2526:	0e 94 43 11 	call	0x2286	; 0x2286 <nm_read_block>
    252a:	81 11       	cpse	r24, r1
    252c:	40 c0       	rjmp	.+128    	; 0x25ae <nm_get_firmware_full_info+0x13c>
    252e:	f7 01       	movw	r30, r14
    2530:	24 81       	ldd	r18, Z+4	; 0x04
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	32 2f       	mov	r19, r18
    2536:	22 27       	eor	r18, r18
    2538:	96 81       	ldd	r25, Z+6	; 0x06
    253a:	9f 70       	andi	r25, 0x0F	; 15
    253c:	a9 01       	movw	r20, r18
    253e:	49 2b       	or	r20, r25
    2540:	25 81       	ldd	r18, Z+5	; 0x05
    2542:	f0 e1       	ldi	r31, 0x10	; 16
    2544:	2f 9f       	mul	r18, r31
    2546:	90 01       	movw	r18, r0
    2548:	11 24       	eor	r1, r1
    254a:	33 27       	eor	r19, r19
    254c:	24 2b       	or	r18, r20
    254e:	35 2b       	or	r19, r21
    2550:	d7 01       	movw	r26, r14
    2552:	17 96       	adiw	r26, 0x07	; 7
    2554:	4c 91       	ld	r20, X
    2556:	17 97       	sbiw	r26, 0x07	; 7
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	54 2f       	mov	r21, r20
    255c:	44 27       	eor	r20, r20
    255e:	19 96       	adiw	r26, 0x09	; 9
    2560:	9c 91       	ld	r25, X
    2562:	19 97       	sbiw	r26, 0x09	; 9
    2564:	9f 70       	andi	r25, 0x0F	; 15
    2566:	ba 01       	movw	r22, r20
    2568:	69 2b       	or	r22, r25
    256a:	18 96       	adiw	r26, 0x08	; 8
    256c:	9c 91       	ld	r25, X
    256e:	b0 e1       	ldi	r27, 0x10	; 16
    2570:	9b 9f       	mul	r25, r27
    2572:	a0 01       	movw	r20, r0
    2574:	11 24       	eor	r1, r1
    2576:	55 27       	eor	r21, r21
    2578:	46 2b       	or	r20, r22
    257a:	57 2b       	or	r21, r23
    257c:	21 15       	cp	r18, r1
    257e:	31 05       	cpc	r19, r1
    2580:	89 f0       	breq	.+34     	; 0x25a4 <nm_get_firmware_full_info+0x132>
    2582:	41 15       	cp	r20, r1
    2584:	51 05       	cpc	r21, r1
    2586:	81 f0       	breq	.+32     	; 0x25a8 <nm_get_firmware_full_info+0x136>
    2588:	43 35       	cpi	r20, 0x53	; 83
    258a:	53 41       	sbci	r21, 0x13	; 19
    258c:	78 f4       	brcc	.+30     	; 0x25ac <nm_get_firmware_full_info+0x13a>
    258e:	22 35       	cpi	r18, 0x52	; 82
    2590:	33 41       	sbci	r19, 0x13	; 19
    2592:	68 f4       	brcc	.+26     	; 0x25ae <nm_get_firmware_full_info+0x13c>
    2594:	83 ef       	ldi	r24, 0xF3	; 243
    2596:	0b c0       	rjmp	.+22     	; 0x25ae <nm_get_firmware_full_info+0x13c>
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	09 c0       	rjmp	.+18     	; 0x25ae <nm_get_firmware_full_info+0x13c>
    259c:	84 ef       	ldi	r24, 0xF4	; 244
    259e:	07 c0       	rjmp	.+14     	; 0x25ae <nm_get_firmware_full_info+0x13c>
    25a0:	84 ef       	ldi	r24, 0xF4	; 244
    25a2:	05 c0       	rjmp	.+10     	; 0x25ae <nm_get_firmware_full_info+0x13c>
    25a4:	84 ef       	ldi	r24, 0xF4	; 244
    25a6:	03 c0       	rjmp	.+6      	; 0x25ae <nm_get_firmware_full_info+0x13c>
    25a8:	84 ef       	ldi	r24, 0xF4	; 244
    25aa:	01 c0       	rjmp	.+2      	; 0x25ae <nm_get_firmware_full_info+0x13c>
    25ac:	83 ef       	ldi	r24, 0xF3	; 243
    25ae:	2c 96       	adiw	r28, 0x0c	; 12
    25b0:	cd bf       	out	0x3d, r28	; 61
    25b2:	de bf       	out	0x3e, r29	; 62
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	1f 91       	pop	r17
    25ba:	0f 91       	pop	r16
    25bc:	ff 90       	pop	r15
    25be:	ef 90       	pop	r14
    25c0:	08 95       	ret

000025c2 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	41 f0       	breq	.+16     	; 0x25da <nm_drv_init+0x18>
		u8Mode = *((uint8 *)arg);
    25ca:	fc 01       	movw	r30, r24
    25cc:	d0 81       	ld	r29, Z
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    25ce:	8f ef       	ldi	r24, 0xFF	; 255
    25d0:	8d 0f       	add	r24, r29
    25d2:	84 30       	cpi	r24, 0x04	; 4
    25d4:	18 f0       	brcs	.+6      	; 0x25dc <nm_drv_init+0x1a>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    25d6:	d1 e0       	ldi	r29, 0x01	; 1
    25d8:	01 c0       	rjmp	.+2      	; 0x25dc <nm_drv_init+0x1a>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    25da:	d1 e0       	ldi	r29, 0x01	; 1
	}
	
	ret = nm_bus_iface_init(NULL);
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	0e 94 31 11 	call	0x2262	; 0x2262 <nm_bus_iface_init>
    25e4:	c8 2f       	mov	r28, r24
	if (M2M_SUCCESS != ret) {
    25e6:	81 11       	cpse	r24, r1
    25e8:	17 c0       	rjmp	.+46     	; 0x2618 <nm_drv_init+0x56>
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    25ea:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <nm_spi_init>
#endif
	ret = wait_for_bootrom(u8Mode);
    25ee:	8d 2f       	mov	r24, r29
    25f0:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <wait_for_bootrom>
    25f4:	c8 2f       	mov	r28, r24
	if (M2M_SUCCESS != ret) {
    25f6:	81 11       	cpse	r24, r1
    25f8:	0d c0       	rjmp	.+26     	; 0x2614 <nm_drv_init+0x52>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    25fa:	8d 2f       	mov	r24, r29
    25fc:	0e 94 8e 10 	call	0x211c	; 0x211c <wait_for_firmware_start>
    2600:	c8 2f       	mov	r28, r24
	if (M2M_SUCCESS != ret) {
    2602:	81 11       	cpse	r24, r1
    2604:	07 c0       	rjmp	.+14     	; 0x2614 <nm_drv_init+0x52>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    2606:	d2 50       	subi	r29, 0x02	; 2
    2608:	d2 30       	cpi	r29, 0x02	; 2
    260a:	30 f0       	brcs	.+12     	; 0x2618 <nm_drv_init+0x56>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    260c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <enable_interrupts>
    2610:	c8 2f       	mov	r28, r24
	if (M2M_SUCCESS != ret) {
    2612:	81 11       	cpse	r24, r1
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    2614:	0e 94 34 11 	call	0x2268	; 0x2268 <nm_bus_iface_deinit>
ERR1:
	return ret;
}
    2618:	8c 2f       	mov	r24, r28
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	08 95       	ret

00002620 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    2620:	cf 93       	push	r28
	sint8 ret;

	ret = chip_deinit();
    2622:	0e 94 05 11 	call	0x220a	; 0x220a <chip_deinit>
    2626:	c8 2f       	mov	r28, r24
	if (M2M_SUCCESS != ret) {
    2628:	81 11       	cpse	r24, r1
    262a:	0d c0       	rjmp	.+26     	; 0x2646 <nm_drv_deinit+0x26>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <spi_flash_enable>
    2632:	c8 2f       	mov	r28, r24
	if (M2M_SUCCESS != ret) {
    2634:	81 11       	cpse	r24, r1
    2636:	07 c0       	rjmp	.+14     	; 0x2646 <nm_drv_deinit+0x26>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    2638:	0e 94 34 11 	call	0x2268	; 0x2268 <nm_bus_iface_deinit>
    263c:	c8 2f       	mov	r28, r24
	if (M2M_SUCCESS != ret) {
    263e:	81 11       	cpse	r24, r1
    2640:	02 c0       	rjmp	.+4      	; 0x2646 <nm_drv_deinit+0x26>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    2642:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <nm_spi_deinit>
#endif

ERR1:
	return ret;
}
    2646:	8c 2f       	mov	r24, r28
    2648:	cf 91       	pop	r28
    264a:	08 95       	ret

0000264c <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    264c:	cf 93       	push	r28
    264e:	df 93       	push	r29
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    2654:	26 97       	sbiw	r28, 0x06	; 6
    2656:	cd bf       	out	0x3d, r28	; 61
    2658:	de bf       	out	0x3e, r29	; 62
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	9a 83       	std	Y+2, r25	; 0x02
	spi.pu8OutBuf = NULL;
    265e:	1b 82       	std	Y+3, r1	; 0x03
    2660:	1c 82       	std	Y+4, r1	; 0x04
	spi.u16Sz = sz;
    2662:	6d 83       	std	Y+5, r22	; 0x05
    2664:	7e 83       	std	Y+6, r23	; 0x06
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2666:	be 01       	movw	r22, r28
    2668:	6f 5f       	subi	r22, 0xFF	; 255
    266a:	7f 4f       	sbci	r23, 0xFF	; 255
    266c:	83 e0       	ldi	r24, 0x03	; 3
    266e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <nm_bus_ioctl>
}
    2672:	26 96       	adiw	r28, 0x06	; 6
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	08 95       	ret

0000267e <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    267e:	af 92       	push	r10
    2680:	cf 92       	push	r12
    2682:	df 92       	push	r13
    2684:	ef 92       	push	r14
    2686:	ff 92       	push	r15
    2688:	0f 93       	push	r16
    268a:	1f 93       	push	r17
    268c:	cf 93       	push	r28
    268e:	df 93       	push	r29
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	29 97       	sbiw	r28, 0x09	; 9
    2696:	cd bf       	out	0x3d, r28	; 61
    2698:	de bf       	out	0x3e, r29	; 62
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    269a:	89 83       	std	Y+1, r24	; 0x01
	switch (cmd) {
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	fc 01       	movw	r30, r24
    26a0:	e1 5c       	subi	r30, 0xC1	; 193
    26a2:	f1 09       	sbc	r31, r1
    26a4:	ef 30       	cpi	r30, 0x0F	; 15
    26a6:	f1 05       	cpc	r31, r1
    26a8:	08 f0       	brcs	.+2      	; 0x26ac <spi_cmd+0x2e>
    26aa:	70 c0       	rjmp	.+224    	; 0x278c <spi_cmd+0x10e>
    26ac:	e9 5a       	subi	r30, 0xA9	; 169
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <__tablejump2__>
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    26b4:	6a 83       	std	Y+2, r22	; 0x02
		bc[2] = (uint8)(adr >> 8);
    26b6:	5b 83       	std	Y+3, r21	; 0x03
		bc[3] = (uint8)adr;
    26b8:	4c 83       	std	Y+4, r20	; 0x04
		len = 5;
    26ba:	35 e0       	ldi	r19, 0x05	; 5
		break;
    26bc:	79 c0       	rjmp	.+242    	; 0x27b0 <spi_cmd+0x132>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    26be:	bb 27       	eor	r27, r27
    26c0:	a7 2f       	mov	r26, r23
    26c2:	96 2f       	mov	r25, r22
    26c4:	85 2f       	mov	r24, r21
		if(clockless)  bc[1] |= (1 << 7);
    26c6:	a1 10       	cpse	r10, r1
    26c8:	02 c0       	rjmp	.+4      	; 0x26ce <spi_cmd+0x50>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    26ca:	8a 83       	std	Y+2, r24	; 0x02
    26cc:	02 c0       	rjmp	.+4      	; 0x26d2 <spi_cmd+0x54>
		if(clockless)  bc[1] |= (1 << 7);
    26ce:	80 68       	ori	r24, 0x80	; 128
    26d0:	8a 83       	std	Y+2, r24	; 0x02
		bc[2] = (uint8)adr;
    26d2:	4b 83       	std	Y+3, r20	; 0x03
		bc[3] = 0x00;
    26d4:	1c 82       	std	Y+4, r1	; 0x04
		len = 5;
    26d6:	35 e0       	ldi	r19, 0x05	; 5
		break;
    26d8:	6b c0       	rjmp	.+214    	; 0x27b0 <spi_cmd+0x132>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    26da:	1a 82       	std	Y+2, r1	; 0x02
		bc[2] = 0x00;
    26dc:	1b 82       	std	Y+3, r1	; 0x03
		bc[3] = 0x00;
    26de:	1c 82       	std	Y+4, r1	; 0x04
		len = 5;
    26e0:	35 e0       	ldi	r19, 0x05	; 5
		break;
    26e2:	66 c0       	rjmp	.+204    	; 0x27b0 <spi_cmd+0x132>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    26e4:	1a 82       	std	Y+2, r1	; 0x02
		bc[2] = 0x00;
    26e6:	1b 82       	std	Y+3, r1	; 0x03
		bc[3] = 0x00;
    26e8:	1c 82       	std	Y+4, r1	; 0x04
		len = 5;
    26ea:	35 e0       	ldi	r19, 0x05	; 5
		break;
    26ec:	61 c0       	rjmp	.+194    	; 0x27b0 <spi_cmd+0x132>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    26ee:	8f ef       	ldi	r24, 0xFF	; 255
    26f0:	8a 83       	std	Y+2, r24	; 0x02
		bc[2] = 0xff;
    26f2:	8b 83       	std	Y+3, r24	; 0x03
		bc[3] = 0xff;
    26f4:	8c 83       	std	Y+4, r24	; 0x04
		len = 5;
    26f6:	35 e0       	ldi	r19, 0x05	; 5
		break;
    26f8:	5b c0       	rjmp	.+182    	; 0x27b0 <spi_cmd+0x132>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    26fa:	6a 83       	std	Y+2, r22	; 0x02
		bc[2] = (uint8)(adr >> 8);
    26fc:	5b 83       	std	Y+3, r21	; 0x03
		bc[3] = (uint8)adr;
    26fe:	4c 83       	std	Y+4, r20	; 0x04
		bc[4] = (uint8)(sz >> 8);
    2700:	dd 82       	std	Y+5, r13	; 0x05
		bc[5] = (uint8)(sz);
    2702:	ce 82       	std	Y+6, r12	; 0x06
		len = 7;
    2704:	37 e0       	ldi	r19, 0x07	; 7
		break;
    2706:	54 c0       	rjmp	.+168    	; 0x27b0 <spi_cmd+0x132>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    2708:	6a 83       	std	Y+2, r22	; 0x02
		bc[2] = (uint8)(adr >> 8);
    270a:	5b 83       	std	Y+3, r21	; 0x03
		bc[3] = (uint8)adr;
    270c:	4c 83       	std	Y+4, r20	; 0x04
		bc[4] = (uint8)(sz >> 16);
    270e:	ed 82       	std	Y+5, r14	; 0x05
		bc[5] = (uint8)(sz >> 8);
    2710:	de 82       	std	Y+6, r13	; 0x06
		bc[6] = (uint8)(sz);
    2712:	cf 82       	std	Y+7, r12	; 0x07
		len = 8;
    2714:	38 e0       	ldi	r19, 0x08	; 8
		break;
    2716:	4c c0       	rjmp	.+152    	; 0x27b0 <spi_cmd+0x132>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    2718:	bb 27       	eor	r27, r27
    271a:	a7 2f       	mov	r26, r23
    271c:	96 2f       	mov	r25, r22
    271e:	85 2f       	mov	r24, r21
		if(clockless)  bc[1] |= (1 << 7);
    2720:	a1 10       	cpse	r10, r1
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <spi_cmd+0xaa>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    2724:	8a 83       	std	Y+2, r24	; 0x02
    2726:	02 c0       	rjmp	.+4      	; 0x272c <spi_cmd+0xae>
		if(clockless)  bc[1] |= (1 << 7);
    2728:	80 68       	ori	r24, 0x80	; 128
    272a:	8a 83       	std	Y+2, r24	; 0x02
		bc[2] = (uint8)(adr);
    272c:	4b 83       	std	Y+3, r20	; 0x03
		bc[3] = (uint8)(u32data >> 24);
    272e:	3c 83       	std	Y+4, r19	; 0x04
		bc[4] = (uint8)(u32data >> 16);
    2730:	2d 83       	std	Y+5, r18	; 0x05
		bc[5] = (uint8)(u32data >> 8);
    2732:	1e 83       	std	Y+6, r17	; 0x06
		bc[6] = (uint8)(u32data);
    2734:	0f 83       	std	Y+7, r16	; 0x07
		len = 8;
    2736:	38 e0       	ldi	r19, 0x08	; 8
		break;
    2738:	3b c0       	rjmp	.+118    	; 0x27b0 <spi_cmd+0x132>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    273a:	6a 83       	std	Y+2, r22	; 0x02
		bc[2] = (uint8)(adr >> 8);
    273c:	5b 83       	std	Y+3, r21	; 0x03
		bc[3] = (uint8)(adr);
    273e:	4c 83       	std	Y+4, r20	; 0x04
		bc[4] = (uint8)(u32data >> 24);
    2740:	3d 83       	std	Y+5, r19	; 0x05
		bc[5] = (uint8)(u32data >> 16);
    2742:	2e 83       	std	Y+6, r18	; 0x06
		bc[6] = (uint8)(u32data >> 8);
    2744:	1f 83       	std	Y+7, r17	; 0x07
		bc[7] = (uint8)(u32data);
    2746:	08 87       	std	Y+8, r16	; 0x08
		len = 9;
    2748:	39 e0       	ldi	r19, 0x09	; 9
		break;
    274a:	32 c0       	rjmp	.+100    	; 0x27b0 <spi_cmd+0x132>
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
		crc = crc7_byte(crc, *buffer++);
    274c:	2d 91       	ld	r18, X+
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return pgm_read_byte(&(crc7_syndrome_table[(crc << 1) ^ data]));
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	ee 0f       	add	r30, r30
    2752:	ff 1f       	adc	r31, r31
    2754:	e2 27       	eor	r30, r18
    2756:	e4 53       	subi	r30, 0x34	; 52
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	e4 91       	lpm	r30, Z
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    275c:	41 50       	subi	r20, 0x01	; 1
    275e:	51 09       	sbc	r21, r1
    2760:	61 09       	sbc	r22, r1
    2762:	71 09       	sbc	r23, r1
    2764:	98 f7       	brcc	.-26     	; 0x274c <spi_cmd+0xce>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2766:	de 01       	movw	r26, r28
    2768:	a8 0f       	add	r26, r24
    276a:	b9 1f       	adc	r27, r25
    276c:	ee 0f       	add	r30, r30
    276e:	11 96       	adiw	r26, 0x01	; 1
    2770:	ec 93       	st	X, r30
    2772:	01 c0       	rjmp	.+2      	; 0x2776 <spi_cmd+0xf8>
		else
			len-=1;
    2774:	31 50       	subi	r19, 0x01	; 1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    2776:	63 2f       	mov	r22, r19
    2778:	70 e0       	ldi	r23, 0x00	; 0
    277a:	ce 01       	movw	r24, r28
    277c:	01 96       	adiw	r24, 0x01	; 1
    277e:	0e 94 26 13 	call	0x264c	; 0x264c <nmi_spi_write>
    2782:	91 e0       	ldi	r25, 0x01	; 1
    2784:	88 23       	and	r24, r24
    2786:	c9 f0       	breq	.+50     	; 0x27ba <spi_cmd+0x13c>
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	17 c0       	rjmp	.+46     	; 0x27ba <spi_cmd+0x13c>
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
    278c:	90 e0       	ldi	r25, 0x00	; 0
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
    278e:	15 c0       	rjmp	.+42     	; 0x27ba <spi_cmd+0x13c>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2790:	83 2f       	mov	r24, r19
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	ac 01       	movw	r20, r24
    2798:	09 2e       	mov	r0, r25
    279a:	00 0c       	add	r0, r0
    279c:	66 0b       	sbc	r22, r22
    279e:	77 0b       	sbc	r23, r23
	return pgm_read_byte(&(crc7_syndrome_table[(crc << 1) ^ data]));
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    27a0:	41 50       	subi	r20, 0x01	; 1
    27a2:	51 09       	sbc	r21, r1
    27a4:	61 09       	sbc	r22, r1
    27a6:	71 09       	sbc	r23, r1
    27a8:	de 01       	movw	r26, r28
    27aa:	11 96       	adiw	r26, 0x01	; 1
    27ac:	ef e7       	ldi	r30, 0x7F	; 127
    27ae:	ce cf       	rjmp	.-100    	; 0x274c <spi_cmd+0xce>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    27b0:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <gu8Crc_off>
    27b4:	81 11       	cpse	r24, r1
    27b6:	de cf       	rjmp	.-68     	; 0x2774 <spi_cmd+0xf6>
    27b8:	eb cf       	rjmp	.-42     	; 0x2790 <spi_cmd+0x112>
			result = N_FAIL;
		}
	}

	return result;
}
    27ba:	89 2f       	mov	r24, r25
    27bc:	29 96       	adiw	r28, 0x09	; 9
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	df 91       	pop	r29
    27c4:	cf 91       	pop	r28
    27c6:	1f 91       	pop	r17
    27c8:	0f 91       	pop	r16
    27ca:	ff 90       	pop	r15
    27cc:	ef 90       	pop	r14
    27ce:	df 90       	pop	r13
    27d0:	cf 90       	pop	r12
    27d2:	af 90       	pop	r10
    27d4:	08 95       	ret

000027d6 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	26 97       	sbiw	r28, 0x06	; 6
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	de bf       	out	0x3e, r29	; 62
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    27e4:	19 82       	std	Y+1, r1	; 0x01
    27e6:	1a 82       	std	Y+2, r1	; 0x02
	spi.pu8OutBuf = b;
    27e8:	8b 83       	std	Y+3, r24	; 0x03
    27ea:	9c 83       	std	Y+4, r25	; 0x04
	spi.u16Sz = sz;
    27ec:	6d 83       	std	Y+5, r22	; 0x05
    27ee:	7e 83       	std	Y+6, r23	; 0x06
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    27f0:	be 01       	movw	r22, r28
    27f2:	6f 5f       	subi	r22, 0xFF	; 255
    27f4:	7f 4f       	sbci	r23, 0xFF	; 255
    27f6:	83 e0       	ldi	r24, 0x03	; 3
    27f8:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <nm_bus_ioctl>
}
    27fc:	26 96       	adiw	r28, 0x06	; 6
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	08 95       	ret

00002808 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2808:	0f 93       	push	r16
    280a:	1f 93       	push	r17
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	1f 92       	push	r1
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	08 2f       	mov	r16, r24
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    2818:	8f 3c       	cpi	r24, 0xCF	; 207
    281a:	21 f0       	breq	.+8      	; 0x2824 <spi_cmd_rsp+0x1c>
    281c:	8b e3       	ldi	r24, 0x3B	; 59
    281e:	80 0f       	add	r24, r16
    2820:	82 30       	cpi	r24, 0x02	; 2
    2822:	40 f4       	brcc	.+16     	; 0x2834 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2824:	61 e0       	ldi	r22, 0x01	; 1
    2826:	70 e0       	ldi	r23, 0x00	; 0
    2828:	ce 01       	movw	r24, r28
    282a:	01 96       	adiw	r24, 0x01	; 1
    282c:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <nmi_spi_read>
    2830:	81 11       	cpse	r24, r1
    2832:	20 c0       	rjmp	.+64     	; 0x2874 <spi_cmd_rsp+0x6c>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2834:	1b e0       	ldi	r17, 0x0B	; 11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2836:	61 e0       	ldi	r22, 0x01	; 1
    2838:	70 e0       	ldi	r23, 0x00	; 0
    283a:	ce 01       	movw	r24, r28
    283c:	01 96       	adiw	r24, 0x01	; 1
    283e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <nmi_spi_read>
    2842:	81 11       	cpse	r24, r1
    2844:	19 c0       	rjmp	.+50     	; 0x2878 <spi_cmd_rsp+0x70>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	08 17       	cp	r16, r24
    284a:	21 f0       	breq	.+8      	; 0x2854 <spi_cmd_rsp+0x4c>
    284c:	11 50       	subi	r17, 0x01	; 1
    284e:	99 f7       	brne	.-26     	; 0x2836 <spi_cmd_rsp+0x2e>
    2850:	1b e0       	ldi	r17, 0x0B	; 11
    2852:	01 c0       	rjmp	.+2      	; 0x2856 <spi_cmd_rsp+0x4e>
    2854:	1b e0       	ldi	r17, 0x0B	; 11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2856:	61 e0       	ldi	r22, 0x01	; 1
    2858:	70 e0       	ldi	r23, 0x00	; 0
    285a:	ce 01       	movw	r24, r28
    285c:	01 96       	adiw	r24, 0x01	; 1
    285e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <nmi_spi_read>
    2862:	81 11       	cpse	r24, r1
    2864:	0b c0       	rjmp	.+22     	; 0x287c <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	88 23       	and	r24, r24
    286a:	51 f0       	breq	.+20     	; 0x2880 <spi_cmd_rsp+0x78>
    286c:	11 50       	subi	r17, 0x01	; 1
    286e:	99 f7       	brne	.-26     	; 0x2856 <spi_cmd_rsp+0x4e>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	07 c0       	rjmp	.+14     	; 0x2882 <spi_cmd_rsp+0x7a>
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			result = N_FAIL;
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	05 c0       	rjmp	.+10     	; 0x2882 <spi_cmd_rsp+0x7a>
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	03 c0       	rjmp	.+6      	; 0x2882 <spi_cmd_rsp+0x7a>
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	01 c0       	rjmp	.+2      	; 0x2882 <spi_cmd_rsp+0x7a>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
    2880:	81 e0       	ldi	r24, 0x01	; 1
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
}
    2882:	0f 90       	pop	r0
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	1f 91       	pop	r17
    288a:	0f 91       	pop	r16
    288c:	08 95       	ret

0000288e <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    288e:	5f 92       	push	r5
    2890:	6f 92       	push	r6
    2892:	7f 92       	push	r7
    2894:	8f 92       	push	r8
    2896:	9f 92       	push	r9
    2898:	af 92       	push	r10
    289a:	bf 92       	push	r11
    289c:	cf 92       	push	r12
    289e:	df 92       	push	r13
    28a0:	ef 92       	push	r14
    28a2:	ff 92       	push	r15
    28a4:	0f 93       	push	r16
    28a6:	1f 93       	push	r17
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <spi_data_read+0x20>
    28ae:	1f 92       	push	r1
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	5c 01       	movw	r10, r24
    28b6:	7b 01       	movw	r14, r22
    28b8:	74 2e       	mov	r7, r20
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    28ba:	c1 2c       	mov	r12, r1
    28bc:	d1 2c       	mov	r13, r1
	do {
		if (sz <= DATA_PKT_SZ)
			nbytes = sz;
		else
			nbytes = DATA_PKT_SZ;
    28be:	51 2c       	mov	r5, r1
    28c0:	68 94       	set
    28c2:	66 24       	eor	r6, r6
    28c4:	65 f8       	bld	r6, 5
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	e8 16       	cp	r14, r24
    28ca:	80 e2       	ldi	r24, 0x20	; 32
    28cc:	f8 06       	cpc	r15, r24
    28ce:	10 f4       	brcc	.+4      	; 0x28d4 <spi_data_read+0x46>
			nbytes = sz;
    28d0:	87 01       	movw	r16, r14
    28d2:	02 c0       	rjmp	.+4      	; 0x28d8 <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    28d4:	05 2d       	mov	r16, r5
    28d6:	16 2d       	mov	r17, r6

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    28d8:	0f 2e       	mov	r0, r31
    28da:	fa e0       	ldi	r31, 0x0A	; 10
    28dc:	8f 2e       	mov	r8, r31
    28de:	91 2c       	mov	r9, r1
    28e0:	f0 2d       	mov	r31, r0
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    28e2:	61 e0       	ldi	r22, 0x01	; 1
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	ce 01       	movw	r24, r28
    28e8:	03 96       	adiw	r24, 0x03	; 3
    28ea:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <nmi_spi_read>
    28ee:	81 11       	cpse	r24, r1
    28f0:	2d c0       	rjmp	.+90     	; 0x294c <spi_data_read+0xbe>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	82 95       	swap	r24
    28f6:	8f 70       	andi	r24, 0x0F	; 15
    28f8:	8f 30       	cpi	r24, 0x0F	; 15
    28fa:	31 f0       	breq	.+12     	; 0x2908 <spi_data_read+0x7a>
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	88 1a       	sub	r8, r24
    2900:	91 08       	sbc	r9, r1
    2902:	78 f7       	brcc	.-34     	; 0x28e2 <spi_data_read+0x54>
		if (result == N_FAIL)
			break;

		if (retry <= 0) {
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	29 c0       	rjmp	.+82     	; 0x295a <spi_data_read+0xcc>
		} while (retry--);

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
    2908:	18 14       	cp	r1, r8
    290a:	19 04       	cpc	r1, r9
    290c:	0c f5       	brge	.+66     	; 0x2950 <spi_data_read+0xc2>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    290e:	48 01       	movw	r8, r16
    2910:	b8 01       	movw	r22, r16
    2912:	c5 01       	movw	r24, r10
    2914:	8c 0d       	add	r24, r12
    2916:	9d 1d       	adc	r25, r13
    2918:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <nmi_spi_read>
    291c:	81 11       	cpse	r24, r1
    291e:	1a c0       	rjmp	.+52     	; 0x2954 <spi_data_read+0xc6>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
			break;
		}
		if(!clockless)
    2920:	71 10       	cpse	r7, r1
    2922:	0c c0       	rjmp	.+24     	; 0x293c <spi_data_read+0xae>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    2924:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <gu8Crc_off>
    2928:	81 11       	cpse	r24, r1
    292a:	08 c0       	rjmp	.+16     	; 0x293c <spi_data_read+0xae>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    292c:	62 e0       	ldi	r22, 0x02	; 2
    292e:	70 e0       	ldi	r23, 0x00	; 0
    2930:	ce 01       	movw	r24, r28
    2932:	01 96       	adiw	r24, 0x01	; 1
    2934:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <nmi_spi_read>
    2938:	81 11       	cpse	r24, r1
    293a:	0e c0       	rjmp	.+28     	; 0x2958 <spi_data_read+0xca>
					result = N_FAIL;
					break;
				}
			}
		}
		ix += nbytes;
    293c:	c0 0e       	add	r12, r16
    293e:	d1 1e       	adc	r13, r17
		sz -= nbytes;
    2940:	e8 18       	sub	r14, r8
    2942:	f9 08       	sbc	r15, r9

	} while (sz);
    2944:	09 f0       	breq	.+2      	; 0x2948 <spi_data_read+0xba>
    2946:	bf cf       	rjmp	.-130    	; 0x28c6 <spi_data_read+0x38>
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	07 c0       	rjmp	.+14     	; 0x295a <spi_data_read+0xcc>
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	05 c0       	rjmp	.+10     	; 0x295a <spi_data_read+0xcc>
		if (result == N_FAIL)
			break;

		if (retry <= 0) {
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	03 c0       	rjmp	.+6      	; 0x295a <spi_data_read+0xcc>
		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	01 c0       	rjmp	.+2      	; 0x295a <spi_data_read+0xcc>
			Read Crc
			**/
			if (!gu8Crc_off) {
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
					result = N_FAIL;
    2958:	80 e0       	ldi	r24, 0x00	; 0
		sz -= nbytes;

	} while (sz);

	return result;
}
    295a:	23 96       	adiw	r28, 0x03	; 3
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	de bf       	out	0x3e, r29	; 62
    2960:	df 91       	pop	r29
    2962:	cf 91       	pop	r28
    2964:	1f 91       	pop	r17
    2966:	0f 91       	pop	r16
    2968:	ff 90       	pop	r15
    296a:	ef 90       	pop	r14
    296c:	df 90       	pop	r13
    296e:	cf 90       	pop	r12
    2970:	bf 90       	pop	r11
    2972:	af 90       	pop	r10
    2974:	9f 90       	pop	r9
    2976:	8f 90       	pop	r8
    2978:	7f 90       	pop	r7
    297a:	6f 90       	pop	r6
    297c:	5f 90       	pop	r5
    297e:	08 95       	ret

00002980 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    2980:	4f 92       	push	r4
    2982:	5f 92       	push	r5
    2984:	6f 92       	push	r6
    2986:	7f 92       	push	r7
    2988:	9f 92       	push	r9
    298a:	af 92       	push	r10
    298c:	bf 92       	push	r11
    298e:	cf 92       	push	r12
    2990:	df 92       	push	r13
    2992:	ef 92       	push	r14
    2994:	ff 92       	push	r15
    2996:	0f 93       	push	r16
    2998:	1f 93       	push	r17
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	26 97       	sbiw	r28, 0x06	; 6
    29a4:	cd bf       	out	0x3d, r28	; 61
    29a6:	de bf       	out	0x3e, r29	; 62
    29a8:	2b 01       	movw	r4, r22
    29aa:	3c 01       	movw	r6, r24
    29ac:	29 83       	std	Y+1, r18	; 0x01
    29ae:	3a 83       	std	Y+2, r19	; 0x02
    29b0:	4b 83       	std	Y+3, r20	; 0x03
    29b2:	5c 83       	std	Y+4, r21	; 0x04
    29b4:	81 e3       	ldi	r24, 0x31	; 49
    29b6:	48 16       	cp	r4, r24
    29b8:	51 04       	cpc	r5, r1
    29ba:	61 04       	cpc	r6, r1
    29bc:	71 04       	cpc	r7, r1
    29be:	10 f4       	brcc	.+4      	; 0x29c4 <spi_write_reg+0x44>
    29c0:	83 ec       	ldi	r24, 0xC3	; 195
    29c2:	01 c0       	rjmp	.+2      	; 0x29c6 <spi_write_reg+0x46>
    29c4:	89 ec       	ldi	r24, 0xC9	; 201
    29c6:	b8 2e       	mov	r11, r24
    29c8:	81 e3       	ldi	r24, 0x31	; 49
    29ca:	48 16       	cp	r4, r24
    29cc:	51 04       	cpc	r5, r1
    29ce:	61 04       	cpc	r6, r1
    29d0:	71 04       	cpc	r7, r1
    29d2:	10 f4       	brcc	.+4      	; 0x29d8 <spi_write_reg+0x58>
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	01 c0       	rjmp	.+2      	; 0x29da <spi_write_reg+0x5a>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	98 2e       	mov	r9, r24
    29dc:	8a e0       	ldi	r24, 0x0A	; 10
    29de:	8d 83       	std	Y+5, r24	; 0x05
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    29e0:	a9 2c       	mov	r10, r9
    29e2:	c1 2c       	mov	r12, r1
    29e4:	d1 2c       	mov	r13, r1
    29e6:	76 01       	movw	r14, r12
    29e8:	68 94       	set
    29ea:	c2 f8       	bld	r12, 2
    29ec:	09 81       	ldd	r16, Y+1	; 0x01
    29ee:	1a 81       	ldd	r17, Y+2	; 0x02
    29f0:	2b 81       	ldd	r18, Y+3	; 0x03
    29f2:	3c 81       	ldd	r19, Y+4	; 0x04
    29f4:	b3 01       	movw	r22, r6
    29f6:	a2 01       	movw	r20, r4
    29f8:	8b 2d       	mov	r24, r11
    29fa:	0e 94 3f 13 	call	0x267e	; 0x267e <spi_cmd>
    29fe:	8e 83       	std	Y+6, r24	; 0x06
	if (result != N_OK) {
    2a00:	81 30       	cpi	r24, 0x01	; 1
    2a02:	31 f4       	brne	.+12     	; 0x2a10 <spi_write_reg+0x90>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    2a04:	8b 2d       	mov	r24, r11
    2a06:	0e 94 04 14 	call	0x2808	; 0x2808 <spi_cmd_rsp>
    2a0a:	8e 83       	std	Y+6, r24	; 0x06
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    2a0c:	81 30       	cpi	r24, 0x01	; 1
    2a0e:	09 f1       	breq	.+66     	; 0x2a52 <spi_write_reg+0xd2>
	{
		nm_bsp_sleep(1);
    2a10:	61 e0       	ldi	r22, 0x01	; 1
    2a12:	70 e0       	ldi	r23, 0x00	; 0
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	0e 94 93 05 	call	0xb26	; 0xb26 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2a1c:	a1 2c       	mov	r10, r1
    2a1e:	c1 2c       	mov	r12, r1
    2a20:	d1 2c       	mov	r13, r1
    2a22:	76 01       	movw	r14, r12
    2a24:	00 e0       	ldi	r16, 0x00	; 0
    2a26:	10 e0       	ldi	r17, 0x00	; 0
    2a28:	98 01       	movw	r18, r16
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	50 e0       	ldi	r21, 0x00	; 0
    2a2e:	ba 01       	movw	r22, r20
    2a30:	8f ec       	ldi	r24, 0xCF	; 207
    2a32:	0e 94 3f 13 	call	0x267e	; 0x267e <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    2a36:	8f ec       	ldi	r24, 0xCF	; 207
    2a38:	0e 94 04 14 	call	0x2808	; 0x2808 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
		nm_bsp_sleep(1);
    2a3c:	61 e0       	ldi	r22, 0x01	; 1
    2a3e:	70 e0       	ldi	r23, 0x00	; 0
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	0e 94 93 05 	call	0xb26	; 0xb26 <nm_bsp_sleep>
    2a48:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4a:	81 50       	subi	r24, 0x01	; 1
    2a4c:	8d 83       	std	Y+5, r24	; 0x05
		retry--;
		if(retry) goto _RETRY_;
    2a4e:	81 11       	cpse	r24, r1
    2a50:	c7 cf       	rjmp	.-114    	; 0x29e0 <spi_write_reg+0x60>
	}

	return result;
}
    2a52:	8e 81       	ldd	r24, Y+6	; 0x06
    2a54:	26 96       	adiw	r28, 0x06	; 6
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	1f 91       	pop	r17
    2a60:	0f 91       	pop	r16
    2a62:	ff 90       	pop	r15
    2a64:	ef 90       	pop	r14
    2a66:	df 90       	pop	r13
    2a68:	cf 90       	pop	r12
    2a6a:	bf 90       	pop	r11
    2a6c:	af 90       	pop	r10
    2a6e:	9f 90       	pop	r9
    2a70:	7f 90       	pop	r7
    2a72:	6f 90       	pop	r6
    2a74:	5f 90       	pop	r5
    2a76:	4f 90       	pop	r4
    2a78:	08 95       	ret

00002a7a <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    2a7a:	3f 92       	push	r3
    2a7c:	4f 92       	push	r4
    2a7e:	5f 92       	push	r5
    2a80:	6f 92       	push	r6
    2a82:	7f 92       	push	r7
    2a84:	8f 92       	push	r8
    2a86:	9f 92       	push	r9
    2a88:	af 92       	push	r10
    2a8a:	bf 92       	push	r11
    2a8c:	cf 92       	push	r12
    2a8e:	df 92       	push	r13
    2a90:	ef 92       	push	r14
    2a92:	ff 92       	push	r15
    2a94:	0f 93       	push	r16
    2a96:	1f 93       	push	r17
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	26 97       	sbiw	r28, 0x06	; 6
    2aa2:	cd bf       	out	0x3d, r28	; 61
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	2b 01       	movw	r4, r22
    2aa8:	3c 01       	movw	r6, r24
    2aaa:	4d 83       	std	Y+5, r20	; 0x05
    2aac:	5e 83       	std	Y+6, r21	; 0x06
    2aae:	8f ef       	ldi	r24, 0xFF	; 255
    2ab0:	48 16       	cp	r4, r24
    2ab2:	51 04       	cpc	r5, r1
    2ab4:	61 04       	cpc	r6, r1
    2ab6:	71 04       	cpc	r7, r1
    2ab8:	09 f0       	breq	.+2      	; 0x2abc <spi_read_reg+0x42>
    2aba:	10 f4       	brcc	.+4      	; 0x2ac0 <spi_read_reg+0x46>
    2abc:	84 ec       	ldi	r24, 0xC4	; 196
    2abe:	01 c0       	rjmp	.+2      	; 0x2ac2 <spi_read_reg+0x48>
    2ac0:	8a ec       	ldi	r24, 0xCA	; 202
    2ac2:	88 2e       	mov	r8, r24
    2ac4:	ef ef       	ldi	r30, 0xFF	; 255
    2ac6:	4e 16       	cp	r4, r30
    2ac8:	51 04       	cpc	r5, r1
    2aca:	61 04       	cpc	r6, r1
    2acc:	71 04       	cpc	r7, r1
    2ace:	09 f0       	breq	.+2      	; 0x2ad2 <spi_read_reg+0x58>
    2ad0:	10 f4       	brcc	.+4      	; 0x2ad6 <spi_read_reg+0x5c>
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	01 c0       	rjmp	.+2      	; 0x2ad8 <spi_read_reg+0x5e>
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	38 2e       	mov	r3, r24
    2ada:	0f 2e       	mov	r0, r31
    2adc:	fa e0       	ldi	r31, 0x0A	; 10
    2ade:	bf 2e       	mov	r11, r31
    2ae0:	f0 2d       	mov	r31, r0
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2ae2:	a3 2c       	mov	r10, r3
    2ae4:	c1 2c       	mov	r12, r1
    2ae6:	d1 2c       	mov	r13, r1
    2ae8:	76 01       	movw	r14, r12
    2aea:	68 94       	set
    2aec:	c2 f8       	bld	r12, 2
    2aee:	00 e0       	ldi	r16, 0x00	; 0
    2af0:	10 e0       	ldi	r17, 0x00	; 0
    2af2:	98 01       	movw	r18, r16
    2af4:	b3 01       	movw	r22, r6
    2af6:	a2 01       	movw	r20, r4
    2af8:	88 2d       	mov	r24, r8
    2afa:	0e 94 3f 13 	call	0x267e	; 0x267e <spi_cmd>
    2afe:	98 2e       	mov	r9, r24
	if (result != N_OK) {
    2b00:	f1 e0       	ldi	r31, 0x01	; 1
    2b02:	8f 13       	cpse	r24, r31
    2b04:	26 c0       	rjmp	.+76     	; 0x2b52 <spi_read_reg+0xd8>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    2b06:	88 2d       	mov	r24, r8
    2b08:	0e 94 04 14 	call	0x2808	; 0x2808 <spi_cmd_rsp>
    2b0c:	98 2e       	mov	r9, r24
	if (result != N_OK) {
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	98 12       	cpse	r9, r24
    2b12:	1f c0       	rjmp	.+62     	; 0x2b52 <spi_read_reg+0xd8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    2b14:	43 2d       	mov	r20, r3
    2b16:	64 e0       	ldi	r22, 0x04	; 4
    2b18:	70 e0       	ldi	r23, 0x00	; 0
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	01 96       	adiw	r24, 0x01	; 1
    2b1e:	0e 94 47 14 	call	0x288e	; 0x288e <spi_data_read>
    2b22:	98 2e       	mov	r9, r24
	if (result != N_OK) {
    2b24:	e1 e0       	ldi	r30, 0x01	; 1
    2b26:	8e 13       	cpse	r24, r30
    2b28:	14 c0       	rjmp	.+40     	; 0x2b52 <spi_read_reg+0xd8>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    2b2a:	2a 81       	ldd	r18, Y+2	; 0x02
    2b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	a0 e0       	ldi	r26, 0x00	; 0
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	dc 01       	movw	r26, r24
    2b36:	99 27       	eor	r25, r25
    2b38:	88 27       	eor	r24, r24
    2b3a:	92 2b       	or	r25, r18
    2b3c:	29 81       	ldd	r18, Y+1	; 0x01
    2b3e:	82 2b       	or	r24, r18
    2b40:	2c 81       	ldd	r18, Y+4	; 0x04
    2b42:	b2 2b       	or	r27, r18
    2b44:	ed 81       	ldd	r30, Y+5	; 0x05
    2b46:	fe 81       	ldd	r31, Y+6	; 0x06
    2b48:	80 83       	st	Z, r24
    2b4a:	91 83       	std	Z+1, r25	; 0x01
    2b4c:	a2 83       	std	Z+2, r26	; 0x02
    2b4e:	b3 83       	std	Z+3, r27	; 0x03
    2b50:	1f c0       	rjmp	.+62     	; 0x2b90 <spi_read_reg+0x116>
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    2b52:	61 e0       	ldi	r22, 0x01	; 1
    2b54:	70 e0       	ldi	r23, 0x00	; 0
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	0e 94 93 05 	call	0xb26	; 0xb26 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2b5e:	a1 2c       	mov	r10, r1
    2b60:	c1 2c       	mov	r12, r1
    2b62:	d1 2c       	mov	r13, r1
    2b64:	76 01       	movw	r14, r12
    2b66:	00 e0       	ldi	r16, 0x00	; 0
    2b68:	10 e0       	ldi	r17, 0x00	; 0
    2b6a:	98 01       	movw	r18, r16
    2b6c:	40 e0       	ldi	r20, 0x00	; 0
    2b6e:	50 e0       	ldi	r21, 0x00	; 0
    2b70:	ba 01       	movw	r22, r20
    2b72:	8f ec       	ldi	r24, 0xCF	; 207
    2b74:	0e 94 3f 13 	call	0x267e	; 0x267e <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    2b78:	8f ec       	ldi	r24, 0xCF	; 207
    2b7a:	0e 94 04 14 	call	0x2808	; 0x2808 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
    2b7e:	61 e0       	ldi	r22, 0x01	; 1
    2b80:	70 e0       	ldi	r23, 0x00	; 0
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	0e 94 93 05 	call	0xb26	; 0xb26 <nm_bsp_sleep>
    2b8a:	ba 94       	dec	r11
		retry--;
		if(retry) goto _RETRY_;
    2b8c:	b1 10       	cpse	r11, r1
    2b8e:	a9 cf       	rjmp	.-174    	; 0x2ae2 <spi_read_reg+0x68>
	}
		
	return result;
}
    2b90:	89 2d       	mov	r24, r9
    2b92:	26 96       	adiw	r28, 0x06	; 6
    2b94:	cd bf       	out	0x3d, r28	; 61
    2b96:	de bf       	out	0x3e, r29	; 62
    2b98:	df 91       	pop	r29
    2b9a:	cf 91       	pop	r28
    2b9c:	1f 91       	pop	r17
    2b9e:	0f 91       	pop	r16
    2ba0:	ff 90       	pop	r15
    2ba2:	ef 90       	pop	r14
    2ba4:	df 90       	pop	r13
    2ba6:	cf 90       	pop	r12
    2ba8:	bf 90       	pop	r11
    2baa:	af 90       	pop	r10
    2bac:	9f 90       	pop	r9
    2bae:	8f 90       	pop	r8
    2bb0:	7f 90       	pop	r7
    2bb2:	6f 90       	pop	r6
    2bb4:	5f 90       	pop	r5
    2bb6:	4f 90       	pop	r4
    2bb8:	3f 90       	pop	r3
    2bba:	08 95       	ret

00002bbc <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    2bbc:	af 92       	push	r10
    2bbe:	cf 92       	push	r12
    2bc0:	df 92       	push	r13
    2bc2:	ef 92       	push	r14
    2bc4:	ff 92       	push	r15
    2bc6:	0f 93       	push	r16
    2bc8:	1f 93       	push	r17
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2bca:	a1 2c       	mov	r10, r1
    2bcc:	c1 2c       	mov	r12, r1
    2bce:	d1 2c       	mov	r13, r1
    2bd0:	76 01       	movw	r14, r12
    2bd2:	00 e0       	ldi	r16, 0x00	; 0
    2bd4:	10 e0       	ldi	r17, 0x00	; 0
    2bd6:	98 01       	movw	r18, r16
    2bd8:	40 e0       	ldi	r20, 0x00	; 0
    2bda:	50 e0       	ldi	r21, 0x00	; 0
    2bdc:	ba 01       	movw	r22, r20
    2bde:	8f ec       	ldi	r24, 0xCF	; 207
    2be0:	0e 94 3f 13 	call	0x267e	; 0x267e <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
    2be4:	8f ec       	ldi	r24, 0xCF	; 207
    2be6:	0e 94 04 14 	call	0x2808	; 0x2808 <spi_cmd_rsp>
	return M2M_SUCCESS;
}
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	1f 91       	pop	r17
    2bee:	0f 91       	pop	r16
    2bf0:	ff 90       	pop	r15
    2bf2:	ef 90       	pop	r14
    2bf4:	df 90       	pop	r13
    2bf6:	cf 90       	pop	r12
    2bf8:	af 90       	pop	r10
    2bfa:	08 95       	ret

00002bfc <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    2bfc:	10 92 11 2e 	sts	0x2E11, r1	; 0x802e11 <gu8Crc_off>
	return M2M_SUCCESS;
}
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	08 95       	ret

00002c04 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    2c04:	cf 93       	push	r28
    2c06:	df 93       	push	r29
    2c08:	00 d0       	rcall	.+0      	; 0x2c0a <nm_spi_read_reg+0x6>
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <nm_spi_read_reg+0x8>
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    2c10:	ae 01       	movw	r20, r28
    2c12:	4f 5f       	subi	r20, 0xFF	; 255
    2c14:	5f 4f       	sbci	r21, 0xFF	; 255
    2c16:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <spi_read_reg>

	return u32Val;
    2c1a:	69 81       	ldd	r22, Y+1	; 0x01
    2c1c:	7a 81       	ldd	r23, Y+2	; 0x02
    2c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c20:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2c22:	24 96       	adiw	r28, 0x04	; 4
    2c24:	cd bf       	out	0x3d, r28	; 61
    2c26:	de bf       	out	0x3e, r29	; 62
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	08 95       	ret

00002c2e <nm_spi_read_reg_with_ret>:
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    2c2e:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <spi_read_reg>

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2c32:	81 30       	cpi	r24, 0x01	; 1
    2c34:	11 f0       	breq	.+4      	; 0x2c3a <nm_spi_read_reg_with_ret+0xc>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2c36:	8a ef       	ldi	r24, 0xFA	; 250
    2c38:	08 95       	ret
{
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2c3c:	08 95       	ret

00002c3e <nm_spi_write_reg>:
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    2c3e:	0e 94 c0 14 	call	0x2980	; 0x2980 <spi_write_reg>

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2c42:	81 30       	cpi	r24, 0x01	; 1
    2c44:	11 f0       	breq	.+4      	; 0x2c4a <nm_spi_write_reg+0xc>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2c46:	8a ef       	ldi	r24, 0xFA	; 250
    2c48:	08 95       	ret
{
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2c4c:	08 95       	ret

00002c4e <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
    2c56:	28 97       	sbiw	r28, 0x08	; 8
    2c58:	cd bf       	out	0x3d, r28	; 61
    2c5a:	de bf       	out	0x3e, r29	; 62
	uint32 chipid;
	uint32 reg = 0;
    2c5c:	1d 82       	std	Y+5, r1	; 0x05
    2c5e:	1e 82       	std	Y+6, r1	; 0x06
    2c60:	1f 82       	std	Y+7, r1	; 0x07
    2c62:	18 86       	std	Y+8, r1	; 0x08
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    2c64:	10 92 11 2e 	sts	0x2E11, r1	; 0x802e11 <gu8Crc_off>

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    2c68:	ae 01       	movw	r20, r28
    2c6a:	4b 5f       	subi	r20, 0xFB	; 251
    2c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c6e:	64 e2       	ldi	r22, 0x24	; 36
    2c70:	78 ee       	ldi	r23, 0xE8	; 232
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <spi_read_reg>
    2c7a:	81 11       	cpse	r24, r1
    2c7c:	0e c0       	rjmp	.+28     	; 0x2c9a <nm_spi_init+0x4c>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	80 93 11 2e 	sts	0x2E11, r24	; 0x802e11 <gu8Crc_off>
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    2c84:	ae 01       	movw	r20, r28
    2c86:	4b 5f       	subi	r20, 0xFB	; 251
    2c88:	5f 4f       	sbci	r21, 0xFF	; 255
    2c8a:	64 e2       	ldi	r22, 0x24	; 36
    2c8c:	78 ee       	ldi	r23, 0xE8	; 232
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <spi_read_reg>
    2c96:	88 23       	and	r24, r24
    2c98:	d9 f1       	breq	.+118    	; 0x2d10 <nm_spi_init+0xc2>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
		}
	}
	if(gu8Crc_off == 0)
    2c9a:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <gu8Crc_off>
    2c9e:	81 11       	cpse	r24, r1
    2ca0:	17 c0       	rjmp	.+46     	; 0x2cd0 <nm_spi_init+0x82>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
    2ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca6:	af 81       	ldd	r26, Y+7	; 0x07
    2ca8:	b8 85       	ldd	r27, Y+8	; 0x08
    2caa:	83 78       	andi	r24, 0x83	; 131
    2cac:	9c 01       	movw	r18, r24
    2cae:	ad 01       	movw	r20, r26
    2cb0:	20 65       	ori	r18, 0x50	; 80
    2cb2:	2d 83       	std	Y+5, r18	; 0x05
    2cb4:	3e 83       	std	Y+6, r19	; 0x06
    2cb6:	4f 83       	std	Y+7, r20	; 0x07
    2cb8:	58 87       	std	Y+8, r21	; 0x08
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    2cba:	64 e2       	ldi	r22, 0x24	; 36
    2cbc:	78 ee       	ldi	r23, 0xE8	; 232
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	0e 94 c0 14 	call	0x2980	; 0x2980 <spi_write_reg>
    2cc6:	88 23       	and	r24, r24
    2cc8:	19 f1       	breq	.+70     	; 0x2d10 <nm_spi_init+0xc2>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
		}
		gu8Crc_off = 1;
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	80 93 11 2e 	sts	0x2E11, r24	; 0x802e11 <gu8Crc_off>
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    2cd0:	ae 01       	movw	r20, r28
    2cd2:	4f 5f       	subi	r20, 0xFF	; 255
    2cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cd6:	60 e0       	ldi	r22, 0x00	; 0
    2cd8:	70 e1       	ldi	r23, 0x10	; 16
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <spi_read_reg>
    2ce2:	88 23       	and	r24, r24
    2ce4:	a1 f0       	breq	.+40     	; 0x2d0e <nm_spi_init+0xc0>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    2ce6:	64 e2       	ldi	r22, 0x24	; 36
    2ce8:	78 ee       	ldi	r23, 0xE8	; 232
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	0e 94 02 16 	call	0x2c04	; 0x2c04 <nm_spi_read_reg>
	val32 &= ~(0x7 << 4);
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	8f 78       	andi	r24, 0x8F	; 143
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    2cf8:	9c 01       	movw	r18, r24
    2cfa:	ad 01       	movw	r20, r26
    2cfc:	20 65       	ori	r18, 0x50	; 80
    2cfe:	64 e2       	ldi	r22, 0x24	; 36
    2d00:	78 ee       	ldi	r23, 0xE8	; 232
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <nm_spi_write_reg>

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	01 c0       	rjmp	.+2      	; 0x2d10 <nm_spi_init+0xc2>
	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
    2d0e:	8a ef       	ldi	r24, 0xFA	; 250
	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
}
    2d10:	28 96       	adiw	r28, 0x08	; 8
    2d12:	cd bf       	out	0x3d, r28	; 61
    2d14:	de bf       	out	0x3e, r29	; 62
    2d16:	df 91       	pop	r29
    2d18:	cf 91       	pop	r28
    2d1a:	08 95       	ret

00002d1c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2d1c:	3f 92       	push	r3
    2d1e:	4f 92       	push	r4
    2d20:	5f 92       	push	r5
    2d22:	6f 92       	push	r6
    2d24:	7f 92       	push	r7
    2d26:	8f 92       	push	r8
    2d28:	9f 92       	push	r9
    2d2a:	af 92       	push	r10
    2d2c:	bf 92       	push	r11
    2d2e:	cf 92       	push	r12
    2d30:	df 92       	push	r13
    2d32:	ef 92       	push	r14
    2d34:	ff 92       	push	r15
    2d36:	0f 93       	push	r16
    2d38:	1f 93       	push	r17
    2d3a:	cf 93       	push	r28
    2d3c:	df 93       	push	r29
    2d3e:	00 d0       	rcall	.+0      	; 0x2d40 <nm_spi_read_block+0x24>
    2d40:	00 d0       	rcall	.+0      	; 0x2d42 <nm_spi_read_block+0x26>
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	2b 01       	movw	r4, r22
    2d48:	3c 01       	movw	r6, r24
    2d4a:	4b 83       	std	Y+3, r20	; 0x03
    2d4c:	5c 83       	std	Y+4, r21	; 0x04
    2d4e:	49 01       	movw	r8, r18
    2d50:	0f 2e       	mov	r0, r31
    2d52:	fa e0       	ldi	r31, 0x0A	; 10
    2d54:	bf 2e       	mov	r11, r31
    2d56:	f0 2d       	mov	r31, r0
	uint8 cmd = CMD_DMA_EXT_READ;
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    2d58:	31 2c       	mov	r3, r1

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	88 16       	cp	r8, r24
    2d5e:	91 04       	cpc	r9, r1
    2d60:	31 f4       	brne	.+12     	; 0x2d6e <nm_spi_read_block+0x52>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
		single_byte_workaround = 1;
    2d62:	33 24       	eor	r3, r3
    2d64:	33 94       	inc	r3
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    2d66:	68 94       	set
    2d68:	88 24       	eor	r8, r8
    2d6a:	81 f8       	bld	r8, 1
    2d6c:	91 2c       	mov	r9, r1
		single_byte_workaround = 1;
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    2d6e:	64 01       	movw	r12, r8
    2d70:	e1 2c       	mov	r14, r1
    2d72:	f1 2c       	mov	r15, r1
    2d74:	a1 2c       	mov	r10, r1
    2d76:	00 e0       	ldi	r16, 0x00	; 0
    2d78:	10 e0       	ldi	r17, 0x00	; 0
    2d7a:	98 01       	movw	r18, r16
    2d7c:	b3 01       	movw	r22, r6
    2d7e:	a2 01       	movw	r20, r4
    2d80:	88 ec       	ldi	r24, 0xC8	; 200
    2d82:	0e 94 3f 13 	call	0x267e	; 0x267e <spi_cmd>
	if (result != N_OK) {
    2d86:	81 30       	cpi	r24, 0x01	; 1
    2d88:	d1 f4       	brne	.+52     	; 0x2dbe <nm_spi_read_block+0xa2>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    2d8a:	88 ec       	ldi	r24, 0xC8	; 200
    2d8c:	0e 94 04 14 	call	0x2808	; 0x2808 <spi_cmd_rsp>
	if (result != N_OK) {
    2d90:	81 30       	cpi	r24, 0x01	; 1
    2d92:	a9 f4       	brne	.+42     	; 0x2dbe <nm_spi_read_block+0xa2>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    2d94:	33 20       	and	r3, r3
    2d96:	59 f0       	breq	.+22     	; 0x2dae <nm_spi_read_block+0x92>
	{
		result = spi_data_read(tmp, size,0);
    2d98:	40 e0       	ldi	r20, 0x00	; 0
    2d9a:	b4 01       	movw	r22, r8
    2d9c:	ce 01       	movw	r24, r28
    2d9e:	01 96       	adiw	r24, 0x01	; 1
    2da0:	0e 94 47 14 	call	0x288e	; 0x288e <spi_data_read>
		buf[0] = tmp[0];
    2da4:	99 81       	ldd	r25, Y+1	; 0x01
    2da6:	eb 81       	ldd	r30, Y+3	; 0x03
    2da8:	fc 81       	ldd	r31, Y+4	; 0x04
    2daa:	90 83       	st	Z, r25
    2dac:	06 c0       	rjmp	.+12     	; 0x2dba <nm_spi_read_block+0x9e>
	}
	else
		result = spi_data_read(buf, size,0);
    2dae:	40 e0       	ldi	r20, 0x00	; 0
    2db0:	b4 01       	movw	r22, r8
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	9c 81       	ldd	r25, Y+4	; 0x04
    2db6:	0e 94 47 14 	call	0x288e	; 0x288e <spi_data_read>
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    2dba:	81 30       	cpi	r24, 0x01	; 1
    2dbc:	01 f1       	breq	.+64     	; 0x2dfe <nm_spi_read_block+0xe2>
	{
		nm_bsp_sleep(1);
    2dbe:	61 e0       	ldi	r22, 0x01	; 1
    2dc0:	70 e0       	ldi	r23, 0x00	; 0
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 93 05 	call	0xb26	; 0xb26 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2dca:	a1 2c       	mov	r10, r1
    2dcc:	c1 2c       	mov	r12, r1
    2dce:	d1 2c       	mov	r13, r1
    2dd0:	76 01       	movw	r14, r12
    2dd2:	00 e0       	ldi	r16, 0x00	; 0
    2dd4:	10 e0       	ldi	r17, 0x00	; 0
    2dd6:	98 01       	movw	r18, r16
    2dd8:	40 e0       	ldi	r20, 0x00	; 0
    2dda:	50 e0       	ldi	r21, 0x00	; 0
    2ddc:	ba 01       	movw	r22, r20
    2dde:	8f ec       	ldi	r24, 0xCF	; 207
    2de0:	0e 94 3f 13 	call	0x267e	; 0x267e <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    2de4:	8f ec       	ldi	r24, 0xCF	; 207
    2de6:	0e 94 04 14 	call	0x2808	; 0x2808 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
    2dea:	61 e0       	ldi	r22, 0x01	; 1
    2dec:	70 e0       	ldi	r23, 0x00	; 0
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	0e 94 93 05 	call	0xb26	; 0xb26 <nm_bsp_sleep>
    2df6:	ba 94       	dec	r11
		retry--;
		if(retry) goto _RETRY_;
    2df8:	b1 10       	cpse	r11, r1
    2dfa:	af cf       	rjmp	.-162    	; 0x2d5a <nm_spi_read_block+0x3e>
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <nm_spi_read_block+0xe6>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	01 c0       	rjmp	.+2      	; 0x2e04 <nm_spi_read_block+0xe8>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2e02:	8a ef       	ldi	r24, 0xFA	; 250

	return s8Ret;
}
    2e04:	24 96       	adiw	r28, 0x04	; 4
    2e06:	cd bf       	out	0x3d, r28	; 61
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	df 91       	pop	r29
    2e0c:	cf 91       	pop	r28
    2e0e:	1f 91       	pop	r17
    2e10:	0f 91       	pop	r16
    2e12:	ff 90       	pop	r15
    2e14:	ef 90       	pop	r14
    2e16:	df 90       	pop	r13
    2e18:	cf 90       	pop	r12
    2e1a:	bf 90       	pop	r11
    2e1c:	af 90       	pop	r10
    2e1e:	9f 90       	pop	r9
    2e20:	8f 90       	pop	r8
    2e22:	7f 90       	pop	r7
    2e24:	6f 90       	pop	r6
    2e26:	5f 90       	pop	r5
    2e28:	4f 90       	pop	r4
    2e2a:	3f 90       	pop	r3
    2e2c:	08 95       	ret

00002e2e <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2e2e:	2f 92       	push	r2
    2e30:	3f 92       	push	r3
    2e32:	4f 92       	push	r4
    2e34:	5f 92       	push	r5
    2e36:	6f 92       	push	r6
    2e38:	7f 92       	push	r7
    2e3a:	8f 92       	push	r8
    2e3c:	9f 92       	push	r9
    2e3e:	af 92       	push	r10
    2e40:	bf 92       	push	r11
    2e42:	cf 92       	push	r12
    2e44:	df 92       	push	r13
    2e46:	ef 92       	push	r14
    2e48:	ff 92       	push	r15
    2e4a:	0f 93       	push	r16
    2e4c:	1f 93       	push	r17
    2e4e:	cf 93       	push	r28
    2e50:	df 93       	push	r29
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
    2e56:	28 97       	sbiw	r28, 0x08	; 8
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	6d 83       	std	Y+5, r22	; 0x05
    2e5e:	7e 83       	std	Y+6, r23	; 0x06
    2e60:	8f 83       	std	Y+7, r24	; 0x07
    2e62:	98 87       	std	Y+8, r25	; 0x08
    2e64:	3a 01       	movw	r6, r20
    2e66:	49 01       	movw	r8, r18
    2e68:	0f 2e       	mov	r0, r31
    2e6a:	fa e0       	ldi	r31, 0x0A	; 10
    2e6c:	bf 2e       	mov	r11, r31
    2e6e:	f0 2d       	mov	r31, r0
    2e70:	31 2c       	mov	r3, r1
    2e72:	68 94       	set
    2e74:	22 24       	eor	r2, r2
    2e76:	25 f8       	bld	r2, 5
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	88 16       	cp	r8, r24
    2e7c:	91 04       	cpc	r9, r1
    2e7e:	21 f4       	brne	.+8      	; 0x2e88 <nm_spi_write_block+0x5a>
		size = 2;
    2e80:	68 94       	set
    2e82:	88 24       	eor	r8, r8
    2e84:	81 f8       	bld	r8, 1
    2e86:	91 2c       	mov	r9, r1

	result = spi_cmd(cmd, addr, 0, size,0);
    2e88:	64 01       	movw	r12, r8
    2e8a:	e1 2c       	mov	r14, r1
    2e8c:	f1 2c       	mov	r15, r1
    2e8e:	a1 2c       	mov	r10, r1
    2e90:	00 e0       	ldi	r16, 0x00	; 0
    2e92:	10 e0       	ldi	r17, 0x00	; 0
    2e94:	98 01       	movw	r18, r16
    2e96:	4d 81       	ldd	r20, Y+5	; 0x05
    2e98:	5e 81       	ldd	r21, Y+6	; 0x06
    2e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9c:	78 85       	ldd	r23, Y+8	; 0x08
    2e9e:	87 ec       	ldi	r24, 0xC7	; 199
    2ea0:	0e 94 3f 13 	call	0x267e	; 0x267e <spi_cmd>
	if (result != N_OK) {
    2ea4:	81 30       	cpi	r24, 0x01	; 1
    2ea6:	09 f0       	breq	.+2      	; 0x2eaa <nm_spi_write_block+0x7c>
    2ea8:	6f c0       	rjmp	.+222    	; 0x2f88 <nm_spi_write_block+0x15a>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    2eaa:	87 ec       	ldi	r24, 0xC7	; 199
    2eac:	0e 94 04 14 	call	0x2808	; 0x2808 <spi_cmd_rsp>
	if (result != N_OK) {
    2eb0:	81 30       	cpi	r24, 0x01	; 1
    2eb2:	09 f0       	breq	.+2      	; 0x2eb6 <nm_spi_write_block+0x88>
    2eb4:	69 c0       	rjmp	.+210    	; 0x2f88 <nm_spi_write_block+0x15a>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
    2eb6:	19 82       	std	Y+1, r1	; 0x01
    2eb8:	1a 82       	std	Y+2, r1	; 0x02
    2eba:	84 01       	movw	r16, r8
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2ebc:	e1 2c       	mov	r14, r1
    2ebe:	f1 2c       	mov	r15, r1
    2ec0:	68 01       	movw	r12, r16
    2ec2:	01 30       	cpi	r16, 0x01	; 1
    2ec4:	80 e2       	ldi	r24, 0x20	; 32
    2ec6:	18 07       	cpc	r17, r24
    2ec8:	10 f0       	brcs	.+4      	; 0x2ece <nm_spi_write_block+0xa0>
    2eca:	c3 2c       	mov	r12, r3
    2ecc:	d2 2c       	mov	r13, r2

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
    2ece:	e1 14       	cp	r14, r1
    2ed0:	f1 04       	cpc	r15, r1
    2ed2:	31 f4       	brne	.+12     	; 0x2ee0 <nm_spi_write_block+0xb2>
			if (sz <= DATA_PKT_SZ)
    2ed4:	01 30       	cpi	r16, 0x01	; 1
    2ed6:	80 e2       	ldi	r24, 0x20	; 32
    2ed8:	18 07       	cpc	r17, r24
    2eda:	40 f0       	brcs	.+16     	; 0x2eec <nm_spi_write_block+0xbe>
				order = 0x3;
			else
				order = 0x1;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	09 c0       	rjmp	.+18     	; 0x2ef2 <nm_spi_write_block+0xc4>
		} else {
			if (sz <= DATA_PKT_SZ)
    2ee0:	01 30       	cpi	r16, 0x01	; 1
    2ee2:	80 e2       	ldi	r24, 0x20	; 32
    2ee4:	18 07       	cpc	r17, r24
    2ee6:	20 f0       	brcs	.+8      	; 0x2ef0 <nm_spi_write_block+0xc2>
				order = 0x3;
			else
				order = 0x2;
    2ee8:	82 e0       	ldi	r24, 0x02	; 2
    2eea:	03 c0       	rjmp	.+6      	; 0x2ef2 <nm_spi_write_block+0xc4>
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
    2eec:	83 e0       	ldi	r24, 0x03	; 3
    2eee:	01 c0       	rjmp	.+2      	; 0x2ef2 <nm_spi_write_block+0xc4>
			else
				order = 0x1;
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
    2ef0:	83 e0       	ldi	r24, 0x03	; 3
			else
				order = 0x2;
		}
		cmd |= order;
    2ef2:	80 6f       	ori	r24, 0xF0	; 240
    2ef4:	8c 83       	std	Y+4, r24	; 0x04
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    2ef6:	61 e0       	ldi	r22, 0x01	; 1
    2ef8:	70 e0       	ldi	r23, 0x00	; 0
    2efa:	ce 01       	movw	r24, r28
    2efc:	04 96       	adiw	r24, 0x04	; 4
    2efe:	0e 94 26 13 	call	0x264c	; 0x264c <nmi_spi_write>
    2f02:	81 11       	cpse	r24, r1
    2f04:	41 c0       	rjmp	.+130    	; 0x2f88 <nm_spi_write_block+0x15a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    2f06:	27 01       	movw	r4, r14
    2f08:	b6 01       	movw	r22, r12
    2f0a:	c3 01       	movw	r24, r6
    2f0c:	8e 0d       	add	r24, r14
    2f0e:	9f 1d       	adc	r25, r15
    2f10:	0e 94 26 13 	call	0x264c	; 0x264c <nmi_spi_write>
    2f14:	81 11       	cpse	r24, r1
    2f16:	38 c0       	rjmp	.+112    	; 0x2f88 <nm_spi_write_block+0x15a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    2f18:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <gu8Crc_off>
    2f1c:	81 11       	cpse	r24, r1
    2f1e:	08 c0       	rjmp	.+16     	; 0x2f30 <nm_spi_write_block+0x102>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    2f20:	62 e0       	ldi	r22, 0x02	; 2
    2f22:	70 e0       	ldi	r23, 0x00	; 0
    2f24:	ce 01       	movw	r24, r28
    2f26:	01 96       	adiw	r24, 0x01	; 1
    2f28:	0e 94 26 13 	call	0x264c	; 0x264c <nmi_spi_write>
    2f2c:	81 11       	cpse	r24, r1
    2f2e:	2c c0       	rjmp	.+88     	; 0x2f88 <nm_spi_write_block+0x15a>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
    2f30:	72 01       	movw	r14, r4
    2f32:	ec 0c       	add	r14, r12
    2f34:	fd 1c       	adc	r15, r13
		sz -= nbytes;
    2f36:	0c 19       	sub	r16, r12
    2f38:	1d 09       	sbc	r17, r13
	} while (sz);
    2f3a:	09 f0       	breq	.+2      	; 0x2f3e <nm_spi_write_block+0x110>
    2f3c:	c1 cf       	rjmp	.-126    	; 0x2ec0 <nm_spi_write_block+0x92>
    2f3e:	47 c0       	rjmp	.+142    	; 0x2fce <nm_spi_write_block+0x1a0>
	sint8 result = N_OK;

    if (!gu8Crc_off)
		len = 2;
	else
		len = 3;
    2f40:	13 e0       	ldi	r17, 0x03	; 3
    2f42:	01 c0       	rjmp	.+2      	; 0x2f46 <nm_spi_write_block+0x118>
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;

    if (!gu8Crc_off)
		len = 2;
    2f44:	12 e0       	ldi	r17, 0x02	; 2
	else
		len = 3;

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    2f46:	61 2f       	mov	r22, r17
    2f48:	70 e0       	ldi	r23, 0x00	; 0
    2f4a:	ce 01       	movw	r24, r28
    2f4c:	01 96       	adiw	r24, 0x01	; 1
    2f4e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <nmi_spi_read>
    2f52:	81 11       	cpse	r24, r1
    2f54:	14 c0       	rjmp	.+40     	; 0x2f7e <nm_spi_write_block+0x150>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
		goto _fail_;
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    2f56:	81 2f       	mov	r24, r17
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	e8 0f       	add	r30, r24
    2f5e:	f9 1f       	adc	r31, r25
    2f60:	20 81       	ld	r18, Z
    2f62:	21 11       	cpse	r18, r1
    2f64:	0e c0       	rjmp	.+28     	; 0x2f82 <nm_spi_write_block+0x154>
    2f66:	ef ef       	ldi	r30, 0xFF	; 255
    2f68:	ff ef       	ldi	r31, 0xFF	; 255
    2f6a:	ec 0f       	add	r30, r28
    2f6c:	fd 1f       	adc	r31, r29
    2f6e:	e8 0f       	add	r30, r24
    2f70:	f9 1f       	adc	r31, r25
	else
		len = 3;

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
    2f72:	21 e0       	ldi	r18, 0x01	; 1
    2f74:	80 81       	ld	r24, Z
    2f76:	83 3c       	cpi	r24, 0xC3	; 195
    2f78:	29 f0       	breq	.+10     	; 0x2f84 <nm_spi_write_block+0x156>
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	03 c0       	rjmp	.+6      	; 0x2f84 <nm_spi_write_block+0x156>
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	01 c0       	rjmp	.+2      	; 0x2f84 <nm_spi_write_block+0x156>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
		result = N_FAIL;
    2f82:	20 e0       	ldi	r18, 0x00	; 0
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
	}
	
_FAIL_:
	if(result != N_OK)
    2f84:	21 30       	cpi	r18, 0x01	; 1
    2f86:	09 f1       	breq	.+66     	; 0x2fca <nm_spi_write_block+0x19c>
	{
		nm_bsp_sleep(1);
    2f88:	61 e0       	ldi	r22, 0x01	; 1
    2f8a:	70 e0       	ldi	r23, 0x00	; 0
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	0e 94 93 05 	call	0xb26	; 0xb26 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2f94:	a1 2c       	mov	r10, r1
    2f96:	c1 2c       	mov	r12, r1
    2f98:	d1 2c       	mov	r13, r1
    2f9a:	76 01       	movw	r14, r12
    2f9c:	00 e0       	ldi	r16, 0x00	; 0
    2f9e:	10 e0       	ldi	r17, 0x00	; 0
    2fa0:	98 01       	movw	r18, r16
    2fa2:	40 e0       	ldi	r20, 0x00	; 0
    2fa4:	50 e0       	ldi	r21, 0x00	; 0
    2fa6:	ba 01       	movw	r22, r20
    2fa8:	8f ec       	ldi	r24, 0xCF	; 207
    2faa:	0e 94 3f 13 	call	0x267e	; 0x267e <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    2fae:	8f ec       	ldi	r24, 0xCF	; 207
    2fb0:	0e 94 04 14 	call	0x2808	; 0x2808 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
    2fb4:	61 e0       	ldi	r22, 0x01	; 1
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	0e 94 93 05 	call	0xb26	; 0xb26 <nm_bsp_sleep>
    2fc0:	ba 94       	dec	r11
		retry--;
		if(retry) goto _RETRY_;
    2fc2:	b1 10       	cpse	r11, r1
    2fc4:	59 cf       	rjmp	.-334    	; 0x2e78 <nm_spi_write_block+0x4a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    2fc6:	8a ef       	ldi	r24, 0xFA	; 250
    2fc8:	08 c0       	rjmp	.+16     	; 0x2fda <nm_spi_write_block+0x1ac>
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2fca:	80 e0       	ldi	r24, 0x00	; 0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
    2fcc:	06 c0       	rjmp	.+12     	; 0x2fda <nm_spi_write_block+0x1ac>
{
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;

    if (!gu8Crc_off)
    2fce:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <gu8Crc_off>
    2fd2:	88 23       	and	r24, r24
    2fd4:	09 f4       	brne	.+2      	; 0x2fd8 <nm_spi_write_block+0x1aa>
    2fd6:	b6 cf       	rjmp	.-148    	; 0x2f44 <nm_spi_write_block+0x116>
    2fd8:	b3 cf       	rjmp	.-154    	; 0x2f40 <nm_spi_write_block+0x112>

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2fda:	28 96       	adiw	r28, 0x08	; 8
    2fdc:	cd bf       	out	0x3d, r28	; 61
    2fde:	de bf       	out	0x3e, r29	; 62
    2fe0:	df 91       	pop	r29
    2fe2:	cf 91       	pop	r28
    2fe4:	1f 91       	pop	r17
    2fe6:	0f 91       	pop	r16
    2fe8:	ff 90       	pop	r15
    2fea:	ef 90       	pop	r14
    2fec:	df 90       	pop	r13
    2fee:	cf 90       	pop	r12
    2ff0:	bf 90       	pop	r11
    2ff2:	af 90       	pop	r10
    2ff4:	9f 90       	pop	r9
    2ff6:	8f 90       	pop	r8
    2ff8:	7f 90       	pop	r7
    2ffa:	6f 90       	pop	r6
    2ffc:	5f 90       	pop	r5
    2ffe:	4f 90       	pop	r4
    3000:	3f 90       	pop	r3
    3002:	2f 90       	pop	r2
    3004:	08 95       	ret

00003006 <Socket_ReadSocketData>:
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
    3006:	2f 92       	push	r2
    3008:	3f 92       	push	r3
    300a:	4f 92       	push	r4
    300c:	5f 92       	push	r5
    300e:	6f 92       	push	r6
    3010:	7f 92       	push	r7
    3012:	8f 92       	push	r8
    3014:	9f 92       	push	r9
    3016:	af 92       	push	r10
    3018:	bf 92       	push	r11
    301a:	cf 92       	push	r12
    301c:	df 92       	push	r13
    301e:	ef 92       	push	r14
    3020:	ff 92       	push	r15
    3022:	0f 93       	push	r16
    3024:	1f 93       	push	r17
    3026:	cf 93       	push	r28
    3028:	df 93       	push	r29
    302a:	00 d0       	rcall	.+0      	; 0x302c <Socket_ReadSocketData+0x26>
    302c:	00 d0       	rcall	.+0      	; 0x302e <Socket_ReadSocketData+0x28>
    302e:	cd b7       	in	r28, 0x3d	; 61
    3030:	de b7       	in	r29, 0x3e	; 62
    3032:	38 2e       	mov	r3, r24
    3034:	6b 01       	movw	r12, r22
    3036:	24 2e       	mov	r2, r20
    3038:	28 01       	movw	r4, r16
    303a:	39 01       	movw	r6, r18
    303c:	e1 14       	cp	r14, r1
    303e:	f1 04       	cpc	r15, r1
    3040:	09 f4       	brne	.+2      	; 0x3044 <Socket_ReadSocketData+0x3e>
    3042:	97 c0       	rjmp	.+302    	; 0x3172 <Socket_ReadSocketData+0x16c>
    3044:	08 2e       	mov	r0, r24
    3046:	00 0c       	add	r0, r0
    3048:	99 0b       	sbc	r25, r25
    304a:	23 2d       	mov	r18, r3
    304c:	3b e0       	ldi	r19, 0x0B	; 11
    304e:	23 02       	muls	r18, r19
    3050:	f0 01       	movw	r30, r0
    3052:	11 24       	eor	r1, r1
    3054:	e8 55       	subi	r30, 0x58	; 88
    3056:	f1 4d       	sbci	r31, 0xD1	; 209
    3058:	20 81       	ld	r18, Z
    305a:	31 81       	ldd	r19, Z+1	; 0x01
    305c:	23 2b       	or	r18, r19
    305e:	09 f4       	brne	.+2      	; 0x3062 <Socket_ReadSocketData+0x5c>
    3060:	88 c0       	rjmp	.+272    	; 0x3172 <Socket_ReadSocketData+0x16c>
    3062:	2b e0       	ldi	r18, 0x0B	; 11
    3064:	28 9f       	mul	r18, r24
    3066:	f0 01       	movw	r30, r0
    3068:	29 9f       	mul	r18, r25
    306a:	f0 0d       	add	r31, r0
    306c:	11 24       	eor	r1, r1
    306e:	e8 55       	subi	r30, 0x58	; 88
    3070:	f1 4d       	sbci	r31, 0xD1	; 209
    3072:	22 81       	ldd	r18, Z+2	; 0x02
    3074:	33 81       	ldd	r19, Z+3	; 0x03
    3076:	23 2b       	or	r18, r19
    3078:	09 f4       	brne	.+2      	; 0x307c <Socket_ReadSocketData+0x76>
    307a:	7b c0       	rjmp	.+246    	; 0x3172 <Socket_ReadSocketData+0x16c>
    307c:	2b e0       	ldi	r18, 0x0B	; 11
    307e:	28 9f       	mul	r18, r24
    3080:	f0 01       	movw	r30, r0
    3082:	29 9f       	mul	r18, r25
    3084:	f0 0d       	add	r31, r0
    3086:	11 24       	eor	r1, r1
    3088:	e8 55       	subi	r30, 0x58	; 88
    308a:	f1 4d       	sbci	r31, 0xD1	; 209
    308c:	20 85       	ldd	r18, Z+8	; 0x08
    308e:	21 30       	cpi	r18, 0x01	; 1
    3090:	09 f0       	breq	.+2      	; 0x3094 <Socket_ReadSocketData+0x8e>
    3092:	6f c0       	rjmp	.+222    	; 0x3172 <Socket_ReadSocketData+0x16c>
    3094:	fb 01       	movw	r30, r22
    3096:	e4 82       	std	Z+4, r14	; 0x04
    3098:	f5 82       	std	Z+5, r15	; 0x05
    309a:	4b e0       	ldi	r20, 0x0B	; 11
    309c:	48 9f       	mul	r20, r24
    309e:	90 01       	movw	r18, r0
    30a0:	49 9f       	mul	r20, r25
    30a2:	30 0d       	add	r19, r0
    30a4:	11 24       	eor	r1, r1
    30a6:	c9 01       	movw	r24, r18
    30a8:	88 55       	subi	r24, 0x58	; 88
    30aa:	91 4d       	sbci	r25, 0xD1	; 209
    30ac:	5c 01       	movw	r10, r24
    30ae:	4c 01       	movw	r8, r24
    30b0:	92 e0       	ldi	r25, 0x02	; 2
    30b2:	89 0e       	add	r8, r25
    30b4:	91 1c       	adc	r9, r1
    30b6:	f5 01       	movw	r30, r10
    30b8:	38 96       	adiw	r30, 0x08	; 8
    30ba:	e9 83       	std	Y+1, r30	; 0x01
    30bc:	fa 83       	std	Y+2, r31	; 0x02
    30be:	f4 01       	movw	r30, r8
    30c0:	80 81       	ld	r24, Z
    30c2:	91 81       	ldd	r25, Z+1	; 0x01
    30c4:	97 01       	movw	r18, r14
    30c6:	28 1b       	sub	r18, r24
    30c8:	39 0b       	sbc	r19, r25
    30ca:	c9 01       	movw	r24, r18
    30cc:	18 16       	cp	r1, r24
    30ce:	19 06       	cpc	r1, r25
    30d0:	34 f4       	brge	.+12     	; 0x30de <Socket_ReadSocketData+0xd8>
    30d2:	80 81       	ld	r24, Z
    30d4:	91 81       	ldd	r25, Z+1	; 0x01
    30d6:	8b 83       	std	Y+3, r24	; 0x03
    30d8:	9c 83       	std	Y+4, r25	; 0x04
    30da:	00 e0       	ldi	r16, 0x00	; 0
    30dc:	03 c0       	rjmp	.+6      	; 0x30e4 <Socket_ReadSocketData+0xde>
    30de:	eb 82       	std	Y+3, r14	; 0x03
    30e0:	fc 82       	std	Y+4, r15	; 0x04
    30e2:	01 e0       	ldi	r16, 0x01	; 1
    30e4:	f5 01       	movw	r30, r10
    30e6:	40 81       	ld	r20, Z
    30e8:	51 81       	ldd	r21, Z+1	; 0x01
    30ea:	2b 81       	ldd	r18, Y+3	; 0x03
    30ec:	3c 81       	ldd	r19, Y+4	; 0x04
    30ee:	c3 01       	movw	r24, r6
    30f0:	b2 01       	movw	r22, r4
    30f2:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    30f6:	81 11       	cpse	r24, r1
    30f8:	3c c0       	rjmp	.+120    	; 0x3172 <Socket_ReadSocketData+0x16c>
    30fa:	f5 01       	movw	r30, r10
    30fc:	80 81       	ld	r24, Z
    30fe:	91 81       	ldd	r25, Z+1	; 0x01
    3100:	f6 01       	movw	r30, r12
    3102:	80 83       	st	Z, r24
    3104:	91 83       	std	Z+1, r25	; 0x01
    3106:	2b 81       	ldd	r18, Y+3	; 0x03
    3108:	3c 81       	ldd	r19, Y+4	; 0x04
    310a:	22 83       	std	Z+2, r18	; 0x02
    310c:	33 83       	std	Z+3, r19	; 0x03
    310e:	84 81       	ldd	r24, Z+4	; 0x04
    3110:	95 81       	ldd	r25, Z+5	; 0x05
    3112:	82 1b       	sub	r24, r18
    3114:	93 0b       	sbc	r25, r19
    3116:	84 83       	std	Z+4, r24	; 0x04
    3118:	95 83       	std	Z+5, r25	; 0x05
    311a:	80 91 21 2f 	lds	r24, 0x2F21	; 0x802f21 <gpfAppSocketCb>
    311e:	90 91 22 2f 	lds	r25, 0x2F22	; 0x802f22 <gpfAppSocketCb+0x1>
    3122:	89 2b       	or	r24, r25
    3124:	41 f0       	breq	.+16     	; 0x3136 <Socket_ReadSocketData+0x130>
    3126:	e0 91 21 2f 	lds	r30, 0x2F21	; 0x802f21 <gpfAppSocketCb>
    312a:	f0 91 22 2f 	lds	r31, 0x2F22	; 0x802f22 <gpfAppSocketCb+0x1>
    312e:	a6 01       	movw	r20, r12
    3130:	62 2d       	mov	r22, r2
    3132:	83 2d       	mov	r24, r3
    3134:	09 95       	icall
    3136:	8b 81       	ldd	r24, Y+3	; 0x03
    3138:	9c 81       	ldd	r25, Y+4	; 0x04
    313a:	e8 1a       	sub	r14, r24
    313c:	f9 0a       	sbc	r15, r25
    313e:	48 0e       	add	r4, r24
    3140:	59 1e       	adc	r5, r25
    3142:	61 1c       	adc	r6, r1
    3144:	71 1c       	adc	r7, r1
    3146:	e9 81       	ldd	r30, Y+1	; 0x01
    3148:	fa 81       	ldd	r31, Y+2	; 0x02
    314a:	80 81       	ld	r24, Z
    314c:	81 11       	cpse	r24, r1
    314e:	0d c0       	rjmp	.+26     	; 0x316a <Socket_ReadSocketData+0x164>
    3150:	ef 28       	or	r14, r15
    3152:	79 f0       	breq	.+30     	; 0x3172 <Socket_ReadSocketData+0x16c>
    3154:	01 e0       	ldi	r16, 0x01	; 1
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	40 e0       	ldi	r20, 0x00	; 0
    315c:	50 e0       	ldi	r21, 0x00	; 0
    315e:	60 e0       	ldi	r22, 0x00	; 0
    3160:	70 e0       	ldi	r23, 0x00	; 0
    3162:	cb 01       	movw	r24, r22
    3164:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    3168:	04 c0       	rjmp	.+8      	; 0x3172 <Socket_ReadSocketData+0x16c>
    316a:	e1 14       	cp	r14, r1
    316c:	f1 04       	cpc	r15, r1
    316e:	09 f0       	breq	.+2      	; 0x3172 <Socket_ReadSocketData+0x16c>
    3170:	a6 cf       	rjmp	.-180    	; 0x30be <Socket_ReadSocketData+0xb8>
    3172:	24 96       	adiw	r28, 0x04	; 4
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	df 91       	pop	r29
    317a:	cf 91       	pop	r28
    317c:	1f 91       	pop	r17
    317e:	0f 91       	pop	r16
    3180:	ff 90       	pop	r15
    3182:	ef 90       	pop	r14
    3184:	df 90       	pop	r13
    3186:	cf 90       	pop	r12
    3188:	bf 90       	pop	r11
    318a:	af 90       	pop	r10
    318c:	9f 90       	pop	r9
    318e:	8f 90       	pop	r8
    3190:	7f 90       	pop	r7
    3192:	6f 90       	pop	r6
    3194:	5f 90       	pop	r5
    3196:	4f 90       	pop	r4
    3198:	3f 90       	pop	r3
    319a:	2f 90       	pop	r2
    319c:	08 95       	ret

0000319e <m2m_ip_cb>:
    319e:	4f 92       	push	r4
    31a0:	5f 92       	push	r5
    31a2:	6f 92       	push	r6
    31a4:	7f 92       	push	r7
    31a6:	9f 92       	push	r9
    31a8:	af 92       	push	r10
    31aa:	bf 92       	push	r11
    31ac:	cf 92       	push	r12
    31ae:	df 92       	push	r13
    31b0:	ef 92       	push	r14
    31b2:	ff 92       	push	r15
    31b4:	0f 93       	push	r16
    31b6:	1f 93       	push	r17
    31b8:	cf 93       	push	r28
    31ba:	df 93       	push	r29
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
    31c0:	c4 55       	subi	r28, 0x54	; 84
    31c2:	d1 09       	sbc	r29, r1
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	5b 01       	movw	r10, r22
    31ca:	69 01       	movw	r12, r18
    31cc:	7a 01       	movw	r14, r20
    31ce:	81 34       	cpi	r24, 0x41	; 65
    31d0:	11 f0       	breq	.+4      	; 0x31d6 <m2m_ip_cb+0x38>
    31d2:	84 35       	cpi	r24, 0x54	; 84
    31d4:	11 f5       	brne	.+68     	; 0x321a <m2m_ip_cb+0x7c>
    31d6:	00 e0       	ldi	r16, 0x00	; 0
    31d8:	24 e0       	ldi	r18, 0x04	; 4
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	ae 01       	movw	r20, r28
    31de:	4f 5f       	subi	r20, 0xFF	; 255
    31e0:	5f 4f       	sbci	r21, 0xFF	; 255
    31e2:	c7 01       	movw	r24, r14
    31e4:	b6 01       	movw	r22, r12
    31e6:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    31ea:	81 11       	cpse	r24, r1
    31ec:	02 c2       	rjmp	.+1028   	; 0x35f2 <m2m_ip_cb+0x454>
    31ee:	8a 81       	ldd	r24, Y+2	; 0x02
    31f0:	26 96       	adiw	r28, 0x06	; 6
    31f2:	8f af       	std	Y+63, r24	; 0x3f
    31f4:	26 97       	sbiw	r28, 0x06	; 6
    31f6:	80 91 21 2f 	lds	r24, 0x2F21	; 0x802f21 <gpfAppSocketCb>
    31fa:	90 91 22 2f 	lds	r25, 0x2F22	; 0x802f22 <gpfAppSocketCb+0x1>
    31fe:	89 2b       	or	r24, r25
    3200:	09 f4       	brne	.+2      	; 0x3204 <m2m_ip_cb+0x66>
    3202:	f7 c1       	rjmp	.+1006   	; 0x35f2 <m2m_ip_cb+0x454>
    3204:	e0 91 21 2f 	lds	r30, 0x2F21	; 0x802f21 <gpfAppSocketCb>
    3208:	f0 91 22 2f 	lds	r31, 0x2F22	; 0x802f22 <gpfAppSocketCb+0x1>
    320c:	ae 01       	movw	r20, r28
    320e:	4b 5b       	subi	r20, 0xBB	; 187
    3210:	5f 4f       	sbci	r21, 0xFF	; 255
    3212:	61 e0       	ldi	r22, 0x01	; 1
    3214:	89 81       	ldd	r24, Y+1	; 0x01
    3216:	09 95       	icall
    3218:	ec c1       	rjmp	.+984    	; 0x35f2 <m2m_ip_cb+0x454>
    321a:	82 34       	cpi	r24, 0x42	; 66
    321c:	11 f5       	brne	.+68     	; 0x3262 <m2m_ip_cb+0xc4>
    321e:	00 e0       	ldi	r16, 0x00	; 0
    3220:	24 e0       	ldi	r18, 0x04	; 4
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	ae 01       	movw	r20, r28
    3226:	4f 5f       	subi	r20, 0xFF	; 255
    3228:	5f 4f       	sbci	r21, 0xFF	; 255
    322a:	c7 01       	movw	r24, r14
    322c:	b6 01       	movw	r22, r12
    322e:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    3232:	81 11       	cpse	r24, r1
    3234:	de c1       	rjmp	.+956    	; 0x35f2 <m2m_ip_cb+0x454>
    3236:	8a 81       	ldd	r24, Y+2	; 0x02
    3238:	26 96       	adiw	r28, 0x06	; 6
    323a:	8f af       	std	Y+63, r24	; 0x3f
    323c:	26 97       	sbiw	r28, 0x06	; 6
    323e:	80 91 21 2f 	lds	r24, 0x2F21	; 0x802f21 <gpfAppSocketCb>
    3242:	90 91 22 2f 	lds	r25, 0x2F22	; 0x802f22 <gpfAppSocketCb+0x1>
    3246:	89 2b       	or	r24, r25
    3248:	09 f4       	brne	.+2      	; 0x324c <m2m_ip_cb+0xae>
    324a:	d3 c1       	rjmp	.+934    	; 0x35f2 <m2m_ip_cb+0x454>
    324c:	e0 91 21 2f 	lds	r30, 0x2F21	; 0x802f21 <gpfAppSocketCb>
    3250:	f0 91 22 2f 	lds	r31, 0x2F22	; 0x802f22 <gpfAppSocketCb+0x1>
    3254:	ae 01       	movw	r20, r28
    3256:	4b 5b       	subi	r20, 0xBB	; 187
    3258:	5f 4f       	sbci	r21, 0xFF	; 255
    325a:	62 e0       	ldi	r22, 0x02	; 2
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	09 95       	icall
    3260:	c8 c1       	rjmp	.+912    	; 0x35f2 <m2m_ip_cb+0x454>
    3262:	83 34       	cpi	r24, 0x43	; 67
    3264:	09 f0       	breq	.+2      	; 0x3268 <m2m_ip_cb+0xca>
    3266:	83 c0       	rjmp	.+262    	; 0x336e <m2m_ip_cb+0x1d0>
    3268:	00 e0       	ldi	r16, 0x00	; 0
    326a:	2c e0       	ldi	r18, 0x0C	; 12
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	ae 01       	movw	r20, r28
    3270:	4b 5b       	subi	r20, 0xBB	; 187
    3272:	5f 4f       	sbci	r21, 0xFF	; 255
    3274:	c7 01       	movw	r24, r14
    3276:	b6 01       	movw	r22, r12
    3278:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    327c:	81 11       	cpse	r24, r1
    327e:	b9 c1       	rjmp	.+882    	; 0x35f2 <m2m_ip_cb+0x454>
    3280:	2f 96       	adiw	r28, 0x0f	; 15
    3282:	8f ad       	ldd	r24, Y+63	; 0x3f
    3284:	2f 97       	sbiw	r28, 0x0f	; 15
    3286:	88 23       	and	r24, r24
    3288:	0c f4       	brge	.+2      	; 0x328c <m2m_ip_cb+0xee>
    328a:	48 c0       	rjmp	.+144    	; 0x331c <m2m_ip_cb+0x17e>
    328c:	48 2f       	mov	r20, r24
    328e:	08 2e       	mov	r0, r24
    3290:	00 0c       	add	r0, r0
    3292:	55 0b       	sbc	r21, r21
    3294:	2e 96       	adiw	r28, 0x0e	; 14
    3296:	2f ad       	ldd	r18, Y+63	; 0x3f
    3298:	2e 97       	sbiw	r28, 0x0e	; 14
    329a:	3b e0       	ldi	r19, 0x0B	; 11
    329c:	23 03       	mulsu	r18, r19
    329e:	f0 01       	movw	r30, r0
    32a0:	11 24       	eor	r1, r1
    32a2:	e8 55       	subi	r30, 0x58	; 88
    32a4:	f1 4d       	sbci	r31, 0xD1	; 209
    32a6:	91 85       	ldd	r25, Z+9	; 0x09
    32a8:	34 9f       	mul	r19, r20
    32aa:	f0 01       	movw	r30, r0
    32ac:	35 9f       	mul	r19, r21
    32ae:	f0 0d       	add	r31, r0
    32b0:	11 24       	eor	r1, r1
    32b2:	e8 55       	subi	r30, 0x58	; 88
    32b4:	f1 4d       	sbci	r31, 0xD1	; 209
    32b6:	91 87       	std	Z+9, r25	; 0x09
    32b8:	91 e0       	ldi	r25, 0x01	; 1
    32ba:	90 87       	std	Z+8, r25	; 0x08
    32bc:	61 96       	adiw	r28, 0x11	; 17
    32be:	2e ad       	ldd	r18, Y+62	; 0x3e
    32c0:	3f ad       	ldd	r19, Y+63	; 0x3f
    32c2:	61 97       	sbiw	r28, 0x11	; 17
    32c4:	28 50       	subi	r18, 0x08	; 8
    32c6:	31 09       	sbc	r19, r1
    32c8:	26 83       	std	Z+6, r18	; 0x06
    32ca:	37 83       	std	Z+7, r19	; 0x07
    32cc:	20 91 15 2e 	lds	r18, 0x2E15	; 0x802e15 <gu16SessionID>
    32d0:	30 91 16 2e 	lds	r19, 0x2E16	; 0x802e16 <gu16SessionID+0x1>
    32d4:	2f 5f       	subi	r18, 0xFF	; 255
    32d6:	3f 4f       	sbci	r19, 0xFF	; 255
    32d8:	20 93 15 2e 	sts	0x2E15, r18	; 0x802e15 <gu16SessionID>
    32dc:	30 93 16 2e 	sts	0x2E16, r19	; 0x802e16 <gu16SessionID+0x1>
    32e0:	20 91 15 2e 	lds	r18, 0x2E15	; 0x802e15 <gu16SessionID>
    32e4:	30 91 16 2e 	lds	r19, 0x2E16	; 0x802e16 <gu16SessionID+0x1>
    32e8:	23 2b       	or	r18, r19
    32ea:	51 f4       	brne	.+20     	; 0x3300 <m2m_ip_cb+0x162>
    32ec:	20 91 15 2e 	lds	r18, 0x2E15	; 0x802e15 <gu16SessionID>
    32f0:	30 91 16 2e 	lds	r19, 0x2E16	; 0x802e16 <gu16SessionID+0x1>
    32f4:	2f 5f       	subi	r18, 0xFF	; 255
    32f6:	3f 4f       	sbci	r19, 0xFF	; 255
    32f8:	20 93 15 2e 	sts	0x2E15, r18	; 0x802e15 <gu16SessionID>
    32fc:	30 93 16 2e 	sts	0x2E16, r19	; 0x802e16 <gu16SessionID+0x1>
    3300:	20 91 15 2e 	lds	r18, 0x2E15	; 0x802e15 <gu16SessionID>
    3304:	30 91 16 2e 	lds	r19, 0x2E16	; 0x802e16 <gu16SessionID+0x1>
    3308:	9b e0       	ldi	r25, 0x0B	; 11
    330a:	94 9f       	mul	r25, r20
    330c:	f0 01       	movw	r30, r0
    330e:	95 9f       	mul	r25, r21
    3310:	f0 0d       	add	r31, r0
    3312:	11 24       	eor	r1, r1
    3314:	e8 55       	subi	r30, 0x58	; 88
    3316:	f1 4d       	sbci	r31, 0xD1	; 209
    3318:	24 83       	std	Z+4, r18	; 0x04
    331a:	35 83       	std	Z+5, r19	; 0x05
    331c:	89 83       	std	Y+1, r24	; 0x01
    331e:	82 e0       	ldi	r24, 0x02	; 2
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	8a 83       	std	Y+2, r24	; 0x02
    3324:	9b 83       	std	Y+3, r25	; 0x03
    3326:	29 96       	adiw	r28, 0x09	; 9
    3328:	8e ad       	ldd	r24, Y+62	; 0x3e
    332a:	9f ad       	ldd	r25, Y+63	; 0x3f
    332c:	29 97       	sbiw	r28, 0x09	; 9
    332e:	8c 83       	std	Y+4, r24	; 0x04
    3330:	9d 83       	std	Y+5, r25	; 0x05
    3332:	2d 96       	adiw	r28, 0x0d	; 13
    3334:	8c ad       	ldd	r24, Y+60	; 0x3c
    3336:	9d ad       	ldd	r25, Y+61	; 0x3d
    3338:	ae ad       	ldd	r26, Y+62	; 0x3e
    333a:	bf ad       	ldd	r27, Y+63	; 0x3f
    333c:	2d 97       	sbiw	r28, 0x0d	; 13
    333e:	8e 83       	std	Y+6, r24	; 0x06
    3340:	9f 83       	std	Y+7, r25	; 0x07
    3342:	a8 87       	std	Y+8, r26	; 0x08
    3344:	b9 87       	std	Y+9, r27	; 0x09
    3346:	80 91 21 2f 	lds	r24, 0x2F21	; 0x802f21 <gpfAppSocketCb>
    334a:	90 91 22 2f 	lds	r25, 0x2F22	; 0x802f22 <gpfAppSocketCb+0x1>
    334e:	89 2b       	or	r24, r25
    3350:	09 f4       	brne	.+2      	; 0x3354 <m2m_ip_cb+0x1b6>
    3352:	4f c1       	rjmp	.+670    	; 0x35f2 <m2m_ip_cb+0x454>
    3354:	e0 91 21 2f 	lds	r30, 0x2F21	; 0x802f21 <gpfAppSocketCb>
    3358:	f0 91 22 2f 	lds	r31, 0x2F22	; 0x802f22 <gpfAppSocketCb+0x1>
    335c:	ae 01       	movw	r20, r28
    335e:	4f 5f       	subi	r20, 0xFF	; 255
    3360:	5f 4f       	sbci	r21, 0xFF	; 255
    3362:	64 e0       	ldi	r22, 0x04	; 4
    3364:	2e 96       	adiw	r28, 0x0e	; 14
    3366:	8f ad       	ldd	r24, Y+63	; 0x3f
    3368:	2e 97       	sbiw	r28, 0x0e	; 14
    336a:	09 95       	icall
    336c:	42 c1       	rjmp	.+644    	; 0x35f2 <m2m_ip_cb+0x454>
    336e:	84 34       	cpi	r24, 0x44	; 68
    3370:	11 f0       	breq	.+4      	; 0x3376 <m2m_ip_cb+0x1d8>
    3372:	8b 34       	cpi	r24, 0x4B	; 75
    3374:	99 f5       	brne	.+102    	; 0x33dc <m2m_ip_cb+0x23e>
    3376:	00 e0       	ldi	r16, 0x00	; 0
    3378:	24 e0       	ldi	r18, 0x04	; 4
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	ae 01       	movw	r20, r28
    337e:	4f 5f       	subi	r20, 0xFF	; 255
    3380:	5f 4f       	sbci	r21, 0xFF	; 255
    3382:	c7 01       	movw	r24, r14
    3384:	b6 01       	movw	r22, r12
    3386:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    338a:	81 11       	cpse	r24, r1
    338c:	32 c1       	rjmp	.+612    	; 0x35f2 <m2m_ip_cb+0x454>
    338e:	89 81       	ldd	r24, Y+1	; 0x01
    3390:	26 96       	adiw	r28, 0x06	; 6
    3392:	8f af       	std	Y+63, r24	; 0x3f
    3394:	26 97       	sbiw	r28, 0x06	; 6
    3396:	9a 81       	ldd	r25, Y+2	; 0x02
    3398:	27 96       	adiw	r28, 0x07	; 7
    339a:	9f af       	std	Y+63, r25	; 0x3f
    339c:	27 97       	sbiw	r28, 0x07	; 7
    339e:	91 11       	cpse	r25, r1
    33a0:	0c c0       	rjmp	.+24     	; 0x33ba <m2m_ip_cb+0x21c>
    33a2:	2b 81       	ldd	r18, Y+3	; 0x03
    33a4:	3c 81       	ldd	r19, Y+4	; 0x04
    33a6:	28 50       	subi	r18, 0x08	; 8
    33a8:	31 09       	sbc	r19, r1
    33aa:	9b e0       	ldi	r25, 0x0B	; 11
    33ac:	89 02       	muls	r24, r25
    33ae:	f0 01       	movw	r30, r0
    33b0:	11 24       	eor	r1, r1
    33b2:	e8 55       	subi	r30, 0x58	; 88
    33b4:	f1 4d       	sbci	r31, 0xD1	; 209
    33b6:	26 83       	std	Z+6, r18	; 0x06
    33b8:	37 83       	std	Z+7, r19	; 0x07
    33ba:	20 91 21 2f 	lds	r18, 0x2F21	; 0x802f21 <gpfAppSocketCb>
    33be:	30 91 22 2f 	lds	r19, 0x2F22	; 0x802f22 <gpfAppSocketCb+0x1>
    33c2:	23 2b       	or	r18, r19
    33c4:	09 f4       	brne	.+2      	; 0x33c8 <m2m_ip_cb+0x22a>
    33c6:	15 c1       	rjmp	.+554    	; 0x35f2 <m2m_ip_cb+0x454>
    33c8:	e0 91 21 2f 	lds	r30, 0x2F21	; 0x802f21 <gpfAppSocketCb>
    33cc:	f0 91 22 2f 	lds	r31, 0x2F22	; 0x802f22 <gpfAppSocketCb+0x1>
    33d0:	ae 01       	movw	r20, r28
    33d2:	4b 5b       	subi	r20, 0xBB	; 187
    33d4:	5f 4f       	sbci	r21, 0xFF	; 255
    33d6:	65 e0       	ldi	r22, 0x05	; 5
    33d8:	09 95       	icall
    33da:	0b c1       	rjmp	.+534    	; 0x35f2 <m2m_ip_cb+0x454>
    33dc:	8a 34       	cpi	r24, 0x4A	; 74
    33de:	09 f5       	brne	.+66     	; 0x3422 <m2m_ip_cb+0x284>
    33e0:	00 e0       	ldi	r16, 0x00	; 0
    33e2:	24 e4       	ldi	r18, 0x44	; 68
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	ae 01       	movw	r20, r28
    33e8:	4f 5f       	subi	r20, 0xFF	; 255
    33ea:	5f 4f       	sbci	r21, 0xFF	; 255
    33ec:	c7 01       	movw	r24, r14
    33ee:	b6 01       	movw	r22, r12
    33f0:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    33f4:	81 11       	cpse	r24, r1
    33f6:	fd c0       	rjmp	.+506    	; 0x35f2 <m2m_ip_cb+0x454>
    33f8:	80 91 25 2f 	lds	r24, 0x2F25	; 0x802f25 <gpfAppResolveCb>
    33fc:	90 91 26 2f 	lds	r25, 0x2F26	; 0x802f26 <gpfAppResolveCb+0x1>
    3400:	89 2b       	or	r24, r25
    3402:	09 f4       	brne	.+2      	; 0x3406 <m2m_ip_cb+0x268>
    3404:	f6 c0       	rjmp	.+492    	; 0x35f2 <m2m_ip_cb+0x454>
    3406:	e0 91 25 2f 	lds	r30, 0x2F25	; 0x802f25 <gpfAppResolveCb>
    340a:	f0 91 26 2f 	lds	r31, 0x2F26	; 0x802f26 <gpfAppResolveCb+0x1>
    340e:	25 96       	adiw	r28, 0x05	; 5
    3410:	4c ad       	ldd	r20, Y+60	; 0x3c
    3412:	5d ad       	ldd	r21, Y+61	; 0x3d
    3414:	6e ad       	ldd	r22, Y+62	; 0x3e
    3416:	7f ad       	ldd	r23, Y+63	; 0x3f
    3418:	25 97       	sbiw	r28, 0x05	; 5
    341a:	ce 01       	movw	r24, r28
    341c:	01 96       	adiw	r24, 0x01	; 1
    341e:	09 95       	icall
    3420:	e8 c0       	rjmp	.+464    	; 0x35f2 <m2m_ip_cb+0x454>
    3422:	86 34       	cpi	r24, 0x46	; 70
    3424:	51 f0       	breq	.+20     	; 0x343a <m2m_ip_cb+0x29c>
    3426:	88 34       	cpi	r24, 0x48	; 72
    3428:	69 f0       	breq	.+26     	; 0x3444 <m2m_ip_cb+0x2a6>
    342a:	8d 34       	cpi	r24, 0x4D	; 77
    342c:	09 f0       	breq	.+2      	; 0x3430 <m2m_ip_cb+0x292>
    342e:	7e c0       	rjmp	.+252    	; 0x352c <m2m_ip_cb+0x38e>
    3430:	0f 2e       	mov	r0, r31
    3432:	f6 e0       	ldi	r31, 0x06	; 6
    3434:	9f 2e       	mov	r9, r31
    3436:	f0 2d       	mov	r31, r0
    3438:	09 c0       	rjmp	.+18     	; 0x344c <m2m_ip_cb+0x2ae>
    343a:	0f 2e       	mov	r0, r31
    343c:	f6 e0       	ldi	r31, 0x06	; 6
    343e:	9f 2e       	mov	r9, r31
    3440:	f0 2d       	mov	r31, r0
    3442:	04 c0       	rjmp	.+8      	; 0x344c <m2m_ip_cb+0x2ae>
    3444:	0f 2e       	mov	r0, r31
    3446:	f9 e0       	ldi	r31, 0x09	; 9
    3448:	9f 2e       	mov	r9, r31
    344a:	f0 2d       	mov	r31, r0
    344c:	00 e0       	ldi	r16, 0x00	; 0
    344e:	20 e1       	ldi	r18, 0x10	; 16
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	ae 01       	movw	r20, r28
    3454:	4b 5b       	subi	r20, 0xBB	; 187
    3456:	5f 4f       	sbci	r21, 0xFF	; 255
    3458:	c7 01       	movw	r24, r14
    345a:	b6 01       	movw	r22, r12
    345c:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    3460:	81 11       	cpse	r24, r1
    3462:	c7 c0       	rjmp	.+398    	; 0x35f2 <m2m_ip_cb+0x454>
    3464:	62 96       	adiw	r28, 0x12	; 18
    3466:	8f ad       	ldd	r24, Y+63	; 0x3f
    3468:	62 97       	sbiw	r28, 0x12	; 18
    346a:	65 96       	adiw	r28, 0x15	; 21
    346c:	2e ad       	ldd	r18, Y+62	; 0x3e
    346e:	3f ad       	ldd	r19, Y+63	; 0x3f
    3470:	65 97       	sbiw	r28, 0x15	; 21
    3472:	9b e0       	ldi	r25, 0x0B	; 11
    3474:	89 02       	muls	r24, r25
    3476:	f0 01       	movw	r30, r0
    3478:	11 24       	eor	r1, r1
    347a:	e8 55       	subi	r30, 0x58	; 88
    347c:	f1 4d       	sbci	r31, 0xD1	; 209
    347e:	12 86       	std	Z+10, r1	; 0x0a
    3480:	2f 96       	adiw	r28, 0x0f	; 15
    3482:	6e ad       	ldd	r22, Y+62	; 0x3e
    3484:	7f ad       	ldd	r23, Y+63	; 0x3f
    3486:	2f 97       	sbiw	r28, 0x0f	; 15
    3488:	61 96       	adiw	r28, 0x11	; 17
    348a:	ae ad       	ldd	r26, Y+62	; 0x3e
    348c:	bf ad       	ldd	r27, Y+63	; 0x3f
    348e:	61 97       	sbiw	r28, 0x11	; 17
    3490:	29 96       	adiw	r28, 0x09	; 9
    3492:	4e ad       	ldd	r20, Y+62	; 0x3e
    3494:	5f ad       	ldd	r21, Y+63	; 0x3f
    3496:	29 97       	sbiw	r28, 0x09	; 9
    3498:	49 87       	std	Y+9, r20	; 0x09
    349a:	5a 87       	std	Y+10, r21	; 0x0a
    349c:	2d 96       	adiw	r28, 0x0d	; 13
    349e:	4c ac       	ldd	r4, Y+60	; 0x3c
    34a0:	5d ac       	ldd	r5, Y+61	; 0x3d
    34a2:	6e ac       	ldd	r6, Y+62	; 0x3e
    34a4:	7f ac       	ldd	r7, Y+63	; 0x3f
    34a6:	2d 97       	sbiw	r28, 0x0d	; 13
    34a8:	4b 86       	std	Y+11, r4	; 0x0b
    34aa:	5c 86       	std	Y+12, r5	; 0x0c
    34ac:	6d 86       	std	Y+13, r6	; 0x0d
    34ae:	7e 86       	std	Y+14, r7	; 0x0e
    34b0:	44 81       	ldd	r20, Z+4	; 0x04
    34b2:	55 81       	ldd	r21, Z+5	; 0x05
    34b4:	24 17       	cp	r18, r20
    34b6:	35 07       	cpc	r19, r21
    34b8:	49 f5       	brne	.+82     	; 0x350c <m2m_ip_cb+0x36e>
    34ba:	16 16       	cp	r1, r22
    34bc:	17 06       	cpc	r1, r23
    34be:	8c f4       	brge	.+34     	; 0x34e2 <m2m_ip_cb+0x344>
    34c0:	6a 15       	cp	r22, r10
    34c2:	7b 05       	cpc	r23, r11
    34c4:	70 f4       	brcc	.+28     	; 0x34e2 <m2m_ip_cb+0x344>
    34c6:	97 01       	movw	r18, r14
    34c8:	86 01       	movw	r16, r12
    34ca:	0a 0f       	add	r16, r26
    34cc:	1b 1f       	adc	r17, r27
    34ce:	21 1d       	adc	r18, r1
    34d0:	31 1d       	adc	r19, r1
    34d2:	7b 01       	movw	r14, r22
    34d4:	49 2d       	mov	r20, r9
    34d6:	be 01       	movw	r22, r28
    34d8:	6f 5f       	subi	r22, 0xFF	; 255
    34da:	7f 4f       	sbci	r23, 0xFF	; 255
    34dc:	0e 94 03 18 	call	0x3006	; 0x3006 <Socket_ReadSocketData>
    34e0:	88 c0       	rjmp	.+272    	; 0x35f2 <m2m_ip_cb+0x454>
    34e2:	6b 83       	std	Y+3, r22	; 0x03
    34e4:	7c 83       	std	Y+4, r23	; 0x04
    34e6:	19 82       	std	Y+1, r1	; 0x01
    34e8:	1a 82       	std	Y+2, r1	; 0x02
    34ea:	20 91 21 2f 	lds	r18, 0x2F21	; 0x802f21 <gpfAppSocketCb>
    34ee:	30 91 22 2f 	lds	r19, 0x2F22	; 0x802f22 <gpfAppSocketCb+0x1>
    34f2:	23 2b       	or	r18, r19
    34f4:	09 f4       	brne	.+2      	; 0x34f8 <m2m_ip_cb+0x35a>
    34f6:	7d c0       	rjmp	.+250    	; 0x35f2 <m2m_ip_cb+0x454>
    34f8:	e0 91 21 2f 	lds	r30, 0x2F21	; 0x802f21 <gpfAppSocketCb>
    34fc:	f0 91 22 2f 	lds	r31, 0x2F22	; 0x802f22 <gpfAppSocketCb+0x1>
    3500:	ae 01       	movw	r20, r28
    3502:	4f 5f       	subi	r20, 0xFF	; 255
    3504:	5f 4f       	sbci	r21, 0xFF	; 255
    3506:	69 2d       	mov	r22, r9
    3508:	09 95       	icall
    350a:	73 c0       	rjmp	.+230    	; 0x35f2 <m2m_ip_cb+0x454>
    350c:	81 e1       	ldi	r24, 0x11	; 17
    350e:	a8 16       	cp	r10, r24
    3510:	b1 04       	cpc	r11, r1
    3512:	08 f4       	brcc	.+2      	; 0x3516 <m2m_ip_cb+0x378>
    3514:	6e c0       	rjmp	.+220    	; 0x35f2 <m2m_ip_cb+0x454>
    3516:	01 e0       	ldi	r16, 0x01	; 1
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	40 e0       	ldi	r20, 0x00	; 0
    351e:	50 e0       	ldi	r21, 0x00	; 0
    3520:	60 e0       	ldi	r22, 0x00	; 0
    3522:	70 e0       	ldi	r23, 0x00	; 0
    3524:	cb 01       	movw	r24, r22
    3526:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    352a:	63 c0       	rjmp	.+198    	; 0x35f2 <m2m_ip_cb+0x454>
    352c:	85 34       	cpi	r24, 0x45	; 69
    352e:	31 f0       	breq	.+12     	; 0x353c <m2m_ip_cb+0x39e>
    3530:	87 34       	cpi	r24, 0x47	; 71
    3532:	31 f0       	breq	.+12     	; 0x3540 <m2m_ip_cb+0x3a2>
    3534:	8c 34       	cpi	r24, 0x4C	; 76
    3536:	a9 f5       	brne	.+106    	; 0x35a2 <m2m_ip_cb+0x404>
    3538:	17 e0       	ldi	r17, 0x07	; 7
    353a:	03 c0       	rjmp	.+6      	; 0x3542 <m2m_ip_cb+0x3a4>
    353c:	17 e0       	ldi	r17, 0x07	; 7
    353e:	01 c0       	rjmp	.+2      	; 0x3542 <m2m_ip_cb+0x3a4>
    3540:	18 e0       	ldi	r17, 0x08	; 8
    3542:	00 e0       	ldi	r16, 0x00	; 0
    3544:	28 e0       	ldi	r18, 0x08	; 8
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	ae 01       	movw	r20, r28
    354a:	4f 5f       	subi	r20, 0xFF	; 255
    354c:	5f 4f       	sbci	r21, 0xFF	; 255
    354e:	c7 01       	movw	r24, r14
    3550:	b6 01       	movw	r22, r12
    3552:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    3556:	81 11       	cpse	r24, r1
    3558:	4c c0       	rjmp	.+152    	; 0x35f2 <m2m_ip_cb+0x454>
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	4d 81       	ldd	r20, Y+5	; 0x05
    355e:	5e 81       	ldd	r21, Y+6	; 0x06
    3560:	2b 81       	ldd	r18, Y+3	; 0x03
    3562:	3c 81       	ldd	r19, Y+4	; 0x04
    3564:	27 96       	adiw	r28, 0x07	; 7
    3566:	2e af       	std	Y+62, r18	; 0x3e
    3568:	3f af       	std	Y+63, r19	; 0x3f
    356a:	27 97       	sbiw	r28, 0x07	; 7
    356c:	9b e0       	ldi	r25, 0x0B	; 11
    356e:	89 02       	muls	r24, r25
    3570:	f0 01       	movw	r30, r0
    3572:	11 24       	eor	r1, r1
    3574:	e8 55       	subi	r30, 0x58	; 88
    3576:	f1 4d       	sbci	r31, 0xD1	; 209
    3578:	24 81       	ldd	r18, Z+4	; 0x04
    357a:	35 81       	ldd	r19, Z+5	; 0x05
    357c:	42 17       	cp	r20, r18
    357e:	53 07       	cpc	r21, r19
    3580:	c1 f5       	brne	.+112    	; 0x35f2 <m2m_ip_cb+0x454>
    3582:	20 91 21 2f 	lds	r18, 0x2F21	; 0x802f21 <gpfAppSocketCb>
    3586:	30 91 22 2f 	lds	r19, 0x2F22	; 0x802f22 <gpfAppSocketCb+0x1>
    358a:	23 2b       	or	r18, r19
    358c:	91 f1       	breq	.+100    	; 0x35f2 <m2m_ip_cb+0x454>
    358e:	e0 91 21 2f 	lds	r30, 0x2F21	; 0x802f21 <gpfAppSocketCb>
    3592:	f0 91 22 2f 	lds	r31, 0x2F22	; 0x802f22 <gpfAppSocketCb+0x1>
    3596:	ae 01       	movw	r20, r28
    3598:	4b 5b       	subi	r20, 0xBB	; 187
    359a:	5f 4f       	sbci	r21, 0xFF	; 255
    359c:	61 2f       	mov	r22, r17
    359e:	09 95       	icall
    35a0:	28 c0       	rjmp	.+80     	; 0x35f2 <m2m_ip_cb+0x454>
    35a2:	82 35       	cpi	r24, 0x52	; 82
    35a4:	31 f5       	brne	.+76     	; 0x35f2 <m2m_ip_cb+0x454>
    35a6:	01 e0       	ldi	r16, 0x01	; 1
    35a8:	24 e1       	ldi	r18, 0x14	; 20
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	ae 01       	movw	r20, r28
    35ae:	4f 5f       	subi	r20, 0xFF	; 255
    35b0:	5f 4f       	sbci	r21, 0xFF	; 255
    35b2:	c7 01       	movw	r24, r14
    35b4:	b6 01       	movw	r22, r12
    35b6:	0e 94 25 0a 	call	0x144a	; 0x144a <hif_receive>
    35ba:	81 11       	cpse	r24, r1
    35bc:	1a c0       	rjmp	.+52     	; 0x35f2 <m2m_ip_cb+0x454>
    35be:	8d 81       	ldd	r24, Y+5	; 0x05
    35c0:	9e 81       	ldd	r25, Y+6	; 0x06
    35c2:	80 93 23 2f 	sts	0x2F23, r24	; 0x802f23 <gfpPingCb>
    35c6:	90 93 24 2f 	sts	0x2F24, r25	; 0x802f24 <gfpPingCb+0x1>
    35ca:	80 91 23 2f 	lds	r24, 0x2F23	; 0x802f23 <gfpPingCb>
    35ce:	90 91 24 2f 	lds	r25, 0x2F24	; 0x802f24 <gfpPingCb+0x1>
    35d2:	89 2b       	or	r24, r25
    35d4:	71 f0       	breq	.+28     	; 0x35f2 <m2m_ip_cb+0x454>
    35d6:	e0 91 23 2f 	lds	r30, 0x2F23	; 0x802f23 <gfpPingCb>
    35da:	f0 91 24 2f 	lds	r31, 0x2F24	; 0x802f24 <gfpPingCb+0x1>
    35de:	29 85       	ldd	r18, Y+9	; 0x09
    35e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    35e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    35e4:	5c 85       	ldd	r21, Y+12	; 0x0c
    35e6:	69 81       	ldd	r22, Y+1	; 0x01
    35e8:	7a 81       	ldd	r23, Y+2	; 0x02
    35ea:	8b 81       	ldd	r24, Y+3	; 0x03
    35ec:	9c 81       	ldd	r25, Y+4	; 0x04
    35ee:	09 89       	ldd	r16, Y+17	; 0x11
    35f0:	09 95       	icall
    35f2:	cc 5a       	subi	r28, 0xAC	; 172
    35f4:	df 4f       	sbci	r29, 0xFF	; 255
    35f6:	cd bf       	out	0x3d, r28	; 61
    35f8:	de bf       	out	0x3e, r29	; 62
    35fa:	df 91       	pop	r29
    35fc:	cf 91       	pop	r28
    35fe:	1f 91       	pop	r17
    3600:	0f 91       	pop	r16
    3602:	ff 90       	pop	r15
    3604:	ef 90       	pop	r14
    3606:	df 90       	pop	r13
    3608:	cf 90       	pop	r12
    360a:	bf 90       	pop	r11
    360c:	af 90       	pop	r10
    360e:	9f 90       	pop	r9
    3610:	7f 90       	pop	r7
    3612:	6f 90       	pop	r6
    3614:	5f 90       	pop	r5
    3616:	4f 90       	pop	r4
    3618:	08 95       	ret

0000361a <socketInit>:
    361a:	80 91 14 2e 	lds	r24, 0x2E14	; 0x802e14 <gbSocketInit>
    361e:	81 11       	cpse	r24, r1
    3620:	15 c0       	rjmp	.+42     	; 0x364c <socketInit+0x32>
    3622:	29 e7       	ldi	r18, 0x79	; 121
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	40 e0       	ldi	r20, 0x00	; 0
    3628:	50 e0       	ldi	r21, 0x00	; 0
    362a:	60 e0       	ldi	r22, 0x00	; 0
    362c:	88 ea       	ldi	r24, 0xA8	; 168
    362e:	9e e2       	ldi	r25, 0x2E	; 46
    3630:	0e 94 61 06 	call	0xcc2	; 0xcc2 <m2m_memset>
    3634:	6f ec       	ldi	r22, 0xCF	; 207
    3636:	78 e1       	ldi	r23, 0x18	; 24
    3638:	82 e0       	ldi	r24, 0x02	; 2
    363a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <hif_register_cb>
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	80 93 14 2e 	sts	0x2E14, r24	; 0x802e14 <gbSocketInit>
    3644:	10 92 15 2e 	sts	0x2E15, r1	; 0x802e15 <gu16SessionID>
    3648:	10 92 16 2e 	sts	0x2E16, r1	; 0x802e16 <gu16SessionID+0x1>
    364c:	08 95       	ret

0000364e <registerSocketCallback>:
    364e:	80 93 21 2f 	sts	0x2F21, r24	; 0x802f21 <gpfAppSocketCb>
    3652:	90 93 22 2f 	sts	0x2F22, r25	; 0x802f22 <gpfAppSocketCb+0x1>
    3656:	60 93 25 2f 	sts	0x2F25, r22	; 0x802f25 <gpfAppResolveCb>
    365a:	70 93 26 2f 	sts	0x2F26, r23	; 0x802f26 <gpfAppResolveCb+0x1>
    365e:	08 95       	ret

00003660 <socket>:
    3660:	bf 92       	push	r11
    3662:	cf 92       	push	r12
    3664:	df 92       	push	r13
    3666:	ef 92       	push	r14
    3668:	ff 92       	push	r15
    366a:	0f 93       	push	r16
    366c:	1f 93       	push	r17
    366e:	cf 93       	push	r28
    3670:	df 93       	push	r29
    3672:	00 d0       	rcall	.+0      	; 0x3674 <socket+0x14>
    3674:	00 d0       	rcall	.+0      	; 0x3676 <socket+0x16>
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
    367a:	02 97       	sbiw	r24, 0x02	; 2
    367c:	09 f0       	breq	.+2      	; 0x3680 <socket+0x20>
    367e:	df c0       	rjmp	.+446    	; 0x383e <socket+0x1de>
    3680:	61 30       	cpi	r22, 0x01	; 1
    3682:	09 f0       	breq	.+2      	; 0x3686 <socket+0x26>
    3684:	51 c0       	rjmp	.+162    	; 0x3728 <socket+0xc8>
    3686:	b0 90 13 2e 	lds	r11, 0x2E13	; 0x802e13 <u8NextTcpSock.2561>
    368a:	e0 91 13 2e 	lds	r30, 0x2E13	; 0x802e13 <u8NextTcpSock.2561>
    368e:	80 91 13 2e 	lds	r24, 0x2E13	; 0x802e13 <u8NextTcpSock.2561>
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	01 96       	adiw	r24, 0x01	; 1
    3696:	67 e0       	ldi	r22, 0x07	; 7
    3698:	70 e0       	ldi	r23, 0x00	; 0
    369a:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divmodhi4>
    369e:	80 93 13 2e 	sts	0x2E13, r24	; 0x802e13 <u8NextTcpSock.2561>
    36a2:	2e 2f       	mov	r18, r30
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	8b e0       	ldi	r24, 0x0B	; 11
    36a8:	e8 9f       	mul	r30, r24
    36aa:	f0 01       	movw	r30, r0
    36ac:	11 24       	eor	r1, r1
    36ae:	e8 55       	subi	r30, 0x58	; 88
    36b0:	f1 4d       	sbci	r31, 0xD1	; 209
    36b2:	80 85       	ldd	r24, Z+8	; 0x08
    36b4:	81 11       	cpse	r24, r1
    36b6:	09 c0       	rjmp	.+18     	; 0x36ca <socket+0x6a>
    36b8:	8b e0       	ldi	r24, 0x0B	; 11
    36ba:	82 9f       	mul	r24, r18
    36bc:	80 01       	movw	r16, r0
    36be:	83 9f       	mul	r24, r19
    36c0:	10 0d       	add	r17, r0
    36c2:	11 24       	eor	r1, r1
    36c4:	08 55       	subi	r16, 0x58	; 88
    36c6:	11 4d       	sbci	r17, 0xD1	; 209
    36c8:	77 c0       	rjmp	.+238    	; 0x37b8 <socket+0x158>
    36ca:	0f 2e       	mov	r0, r31
    36cc:	f6 e0       	ldi	r31, 0x06	; 6
    36ce:	ff 2e       	mov	r15, r31
    36d0:	f0 2d       	mov	r31, r0
    36d2:	07 e0       	ldi	r16, 0x07	; 7
    36d4:	10 e0       	ldi	r17, 0x00	; 0
    36d6:	0f 2e       	mov	r0, r31
    36d8:	fb e0       	ldi	r31, 0x0B	; 11
    36da:	ef 2e       	mov	r14, r31
    36dc:	f0 2d       	mov	r31, r0
    36de:	b0 90 13 2e 	lds	r11, 0x2E13	; 0x802e13 <u8NextTcpSock.2561>
    36e2:	20 91 13 2e 	lds	r18, 0x2E13	; 0x802e13 <u8NextTcpSock.2561>
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	80 91 13 2e 	lds	r24, 0x2E13	; 0x802e13 <u8NextTcpSock.2561>
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	01 96       	adiw	r24, 0x01	; 1
    36f0:	b8 01       	movw	r22, r16
    36f2:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divmodhi4>
    36f6:	80 93 13 2e 	sts	0x2E13, r24	; 0x802e13 <u8NextTcpSock.2561>
    36fa:	e2 9e       	mul	r14, r18
    36fc:	f0 01       	movw	r30, r0
    36fe:	e3 9e       	mul	r14, r19
    3700:	f0 0d       	add	r31, r0
    3702:	11 24       	eor	r1, r1
    3704:	e8 55       	subi	r30, 0x58	; 88
    3706:	f1 4d       	sbci	r31, 0xD1	; 209
    3708:	80 85       	ldd	r24, Z+8	; 0x08
    370a:	81 11       	cpse	r24, r1
    370c:	09 c0       	rjmp	.+18     	; 0x3720 <socket+0xc0>
    370e:	8b e0       	ldi	r24, 0x0B	; 11
    3710:	82 9f       	mul	r24, r18
    3712:	80 01       	movw	r16, r0
    3714:	83 9f       	mul	r24, r19
    3716:	10 0d       	add	r17, r0
    3718:	11 24       	eor	r1, r1
    371a:	08 55       	subi	r16, 0x58	; 88
    371c:	11 4d       	sbci	r17, 0xD1	; 209
    371e:	4c c0       	rjmp	.+152    	; 0x37b8 <socket+0x158>
    3720:	fa 94       	dec	r15
    3722:	f1 10       	cpse	r15, r1
    3724:	dc cf       	rjmp	.-72     	; 0x36de <socket+0x7e>
    3726:	8e c0       	rjmp	.+284    	; 0x3844 <socket+0x1e4>
    3728:	62 30       	cpi	r22, 0x02	; 2
    372a:	09 f0       	breq	.+2      	; 0x372e <socket+0xce>
    372c:	8b c0       	rjmp	.+278    	; 0x3844 <socket+0x1e4>
    372e:	50 91 12 2e 	lds	r21, 0x2E12	; 0x802e12 <u8NextUdpSock.2562>
    3732:	00 91 12 2e 	lds	r16, 0x2E12	; 0x802e12 <u8NextUdpSock.2562>
    3736:	eb e0       	ldi	r30, 0x0B	; 11
    3738:	0e 9f       	mul	r16, r30
    373a:	80 01       	movw	r16, r0
    373c:	11 24       	eor	r1, r1
    373e:	0b 50       	subi	r16, 0x0B	; 11
    3740:	11 4d       	sbci	r17, 0xD1	; 209
    3742:	80 91 12 2e 	lds	r24, 0x2E12	; 0x802e12 <u8NextUdpSock.2562>
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	01 96       	adiw	r24, 0x01	; 1
    374a:	83 70       	andi	r24, 0x03	; 3
    374c:	90 78       	andi	r25, 0x80	; 128
    374e:	99 23       	and	r25, r25
    3750:	24 f4       	brge	.+8      	; 0x375a <socket+0xfa>
    3752:	01 97       	sbiw	r24, 0x01	; 1
    3754:	8c 6f       	ori	r24, 0xFC	; 252
    3756:	9f 6f       	ori	r25, 0xFF	; 255
    3758:	01 96       	adiw	r24, 0x01	; 1
    375a:	80 93 12 2e 	sts	0x2E12, r24	; 0x802e12 <u8NextUdpSock.2562>
    375e:	f8 01       	movw	r30, r16
    3760:	80 85       	ldd	r24, Z+8	; 0x08
    3762:	88 23       	and	r24, r24
    3764:	01 f1       	breq	.+64     	; 0x37a6 <socket+0x146>
    3766:	83 e0       	ldi	r24, 0x03	; 3
    3768:	6b e0       	ldi	r22, 0x0B	; 11
    376a:	50 91 12 2e 	lds	r21, 0x2E12	; 0x802e12 <u8NextUdpSock.2562>
    376e:	00 91 12 2e 	lds	r16, 0x2E12	; 0x802e12 <u8NextUdpSock.2562>
    3772:	60 9f       	mul	r22, r16
    3774:	80 01       	movw	r16, r0
    3776:	11 24       	eor	r1, r1
    3778:	0b 50       	subi	r16, 0x0B	; 11
    377a:	11 4d       	sbci	r17, 0xD1	; 209
    377c:	20 91 12 2e 	lds	r18, 0x2E12	; 0x802e12 <u8NextUdpSock.2562>
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	2f 5f       	subi	r18, 0xFF	; 255
    3784:	3f 4f       	sbci	r19, 0xFF	; 255
    3786:	23 70       	andi	r18, 0x03	; 3
    3788:	30 78       	andi	r19, 0x80	; 128
    378a:	33 23       	and	r19, r19
    378c:	34 f4       	brge	.+12     	; 0x379a <socket+0x13a>
    378e:	21 50       	subi	r18, 0x01	; 1
    3790:	31 09       	sbc	r19, r1
    3792:	2c 6f       	ori	r18, 0xFC	; 252
    3794:	3f 6f       	ori	r19, 0xFF	; 255
    3796:	2f 5f       	subi	r18, 0xFF	; 255
    3798:	3f 4f       	sbci	r19, 0xFF	; 255
    379a:	20 93 12 2e 	sts	0x2E12, r18	; 0x802e12 <u8NextUdpSock.2562>
    379e:	f8 01       	movw	r30, r16
    37a0:	90 85       	ldd	r25, Z+8	; 0x08
    37a2:	91 11       	cpse	r25, r1
    37a4:	06 c0       	rjmp	.+12     	; 0x37b2 <socket+0x152>
    37a6:	0f 2e       	mov	r0, r31
    37a8:	f7 e0       	ldi	r31, 0x07	; 7
    37aa:	bf 2e       	mov	r11, r31
    37ac:	f0 2d       	mov	r31, r0
    37ae:	b5 0e       	add	r11, r21
    37b0:	03 c0       	rjmp	.+6      	; 0x37b8 <socket+0x158>
    37b2:	81 50       	subi	r24, 0x01	; 1
    37b4:	d1 f6       	brne	.-76     	; 0x376a <socket+0x10a>
    37b6:	46 c0       	rjmp	.+140    	; 0x3844 <socket+0x1e4>
    37b8:	bb 20       	and	r11, r11
    37ba:	0c f4       	brge	.+2      	; 0x37be <socket+0x15e>
    37bc:	45 c0       	rjmp	.+138    	; 0x3848 <socket+0x1e8>
    37be:	f4 2e       	mov	r15, r20
    37c0:	2b e0       	ldi	r18, 0x0B	; 11
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	40 e0       	ldi	r20, 0x00	; 0
    37c6:	50 e0       	ldi	r21, 0x00	; 0
    37c8:	60 e0       	ldi	r22, 0x00	; 0
    37ca:	c8 01       	movw	r24, r16
    37cc:	0e 94 61 06 	call	0xcc2	; 0xcc2 <m2m_memset>
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	f8 01       	movw	r30, r16
    37d4:	80 87       	std	Z+8, r24	; 0x08
    37d6:	80 91 15 2e 	lds	r24, 0x2E15	; 0x802e15 <gu16SessionID>
    37da:	90 91 16 2e 	lds	r25, 0x2E16	; 0x802e16 <gu16SessionID+0x1>
    37de:	01 96       	adiw	r24, 0x01	; 1
    37e0:	80 93 15 2e 	sts	0x2E15, r24	; 0x802e15 <gu16SessionID>
    37e4:	90 93 16 2e 	sts	0x2E16, r25	; 0x802e16 <gu16SessionID+0x1>
    37e8:	80 91 15 2e 	lds	r24, 0x2E15	; 0x802e15 <gu16SessionID>
    37ec:	90 91 16 2e 	lds	r25, 0x2E16	; 0x802e16 <gu16SessionID+0x1>
    37f0:	89 2b       	or	r24, r25
    37f2:	49 f4       	brne	.+18     	; 0x3806 <socket+0x1a6>
    37f4:	80 91 15 2e 	lds	r24, 0x2E15	; 0x802e15 <gu16SessionID>
    37f8:	90 91 16 2e 	lds	r25, 0x2E16	; 0x802e16 <gu16SessionID+0x1>
    37fc:	01 96       	adiw	r24, 0x01	; 1
    37fe:	80 93 15 2e 	sts	0x2E15, r24	; 0x802e15 <gu16SessionID>
    3802:	90 93 16 2e 	sts	0x2E16, r25	; 0x802e16 <gu16SessionID+0x1>
    3806:	80 91 15 2e 	lds	r24, 0x2E15	; 0x802e15 <gu16SessionID>
    380a:	90 91 16 2e 	lds	r25, 0x2E16	; 0x802e16 <gu16SessionID+0x1>
    380e:	f8 01       	movw	r30, r16
    3810:	84 83       	std	Z+4, r24	; 0x04
    3812:	95 83       	std	Z+5, r25	; 0x05
    3814:	f0 fe       	sbrs	r15, 0
    3816:	18 c0       	rjmp	.+48     	; 0x3848 <socket+0x1e8>
    3818:	b9 82       	std	Y+1, r11	; 0x01
    381a:	81 e2       	ldi	r24, 0x21	; 33
    381c:	81 87       	std	Z+9, r24	; 0x09
    381e:	c1 2c       	mov	r12, r1
    3820:	d1 2c       	mov	r13, r1
    3822:	e1 2c       	mov	r14, r1
    3824:	f1 2c       	mov	r15, r1
    3826:	00 e0       	ldi	r16, 0x00	; 0
    3828:	10 e0       	ldi	r17, 0x00	; 0
    382a:	24 e0       	ldi	r18, 0x04	; 4
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	ae 01       	movw	r20, r28
    3830:	4f 5f       	subi	r20, 0xFF	; 255
    3832:	5f 4f       	sbci	r21, 0xFF	; 255
    3834:	60 e5       	ldi	r22, 0x50	; 80
    3836:	82 e0       	ldi	r24, 0x02	; 2
    3838:	0e 94 02 07 	call	0xe04	; 0xe04 <hif_send>
    383c:	05 c0       	rjmp	.+10     	; 0x3848 <socket+0x1e8>
    383e:	bb 24       	eor	r11, r11
    3840:	ba 94       	dec	r11
    3842:	02 c0       	rjmp	.+4      	; 0x3848 <socket+0x1e8>
    3844:	bb 24       	eor	r11, r11
    3846:	ba 94       	dec	r11
    3848:	8b 2d       	mov	r24, r11
    384a:	24 96       	adiw	r28, 0x04	; 4
    384c:	cd bf       	out	0x3d, r28	; 61
    384e:	de bf       	out	0x3e, r29	; 62
    3850:	df 91       	pop	r29
    3852:	cf 91       	pop	r28
    3854:	1f 91       	pop	r17
    3856:	0f 91       	pop	r16
    3858:	ff 90       	pop	r15
    385a:	ef 90       	pop	r14
    385c:	df 90       	pop	r13
    385e:	cf 90       	pop	r12
    3860:	bf 90       	pop	r11
    3862:	08 95       	ret

00003864 <bind>:
    3864:	bf 92       	push	r11
    3866:	cf 92       	push	r12
    3868:	df 92       	push	r13
    386a:	ef 92       	push	r14
    386c:	ff 92       	push	r15
    386e:	0f 93       	push	r16
    3870:	1f 93       	push	r17
    3872:	cf 93       	push	r28
    3874:	df 93       	push	r29
    3876:	cd b7       	in	r28, 0x3d	; 61
    3878:	de b7       	in	r29, 0x3e	; 62
    387a:	2c 97       	sbiw	r28, 0x0c	; 12
    387c:	cd bf       	out	0x3d, r28	; 61
    387e:	de bf       	out	0x3e, r29	; 62
    3880:	61 15       	cp	r22, r1
    3882:	71 05       	cpc	r23, r1
    3884:	09 f4       	brne	.+2      	; 0x3888 <bind+0x24>
    3886:	50 c0       	rjmp	.+160    	; 0x3928 <bind+0xc4>
    3888:	88 23       	and	r24, r24
    388a:	0c f4       	brge	.+2      	; 0x388e <bind+0x2a>
    388c:	4f c0       	rjmp	.+158    	; 0x392c <bind+0xc8>
    388e:	08 2f       	mov	r16, r24
    3890:	08 2e       	mov	r0, r24
    3892:	00 0c       	add	r0, r0
    3894:	11 0b       	sbc	r17, r17
    3896:	9b e0       	ldi	r25, 0x0B	; 11
    3898:	89 02       	muls	r24, r25
    389a:	f0 01       	movw	r30, r0
    389c:	11 24       	eor	r1, r1
    389e:	e8 55       	subi	r30, 0x58	; 88
    38a0:	f1 4d       	sbci	r31, 0xD1	; 209
    38a2:	90 85       	ldd	r25, Z+8	; 0x08
    38a4:	91 30       	cpi	r25, 0x01	; 1
    38a6:	09 f0       	breq	.+2      	; 0x38aa <bind+0x46>
    38a8:	43 c0       	rjmp	.+134    	; 0x3930 <bind+0xcc>
    38aa:	44 23       	and	r20, r20
    38ac:	09 f4       	brne	.+2      	; 0x38b0 <bind+0x4c>
    38ae:	42 c0       	rjmp	.+132    	; 0x3934 <bind+0xd0>
    38b0:	9b e0       	ldi	r25, 0x0B	; 11
    38b2:	90 9f       	mul	r25, r16
    38b4:	f0 01       	movw	r30, r0
    38b6:	91 9f       	mul	r25, r17
    38b8:	f0 0d       	add	r31, r0
    38ba:	11 24       	eor	r1, r1
    38bc:	e8 55       	subi	r30, 0x58	; 88
    38be:	f1 4d       	sbci	r31, 0xD1	; 209
    38c0:	91 85       	ldd	r25, Z+9	; 0x09
    38c2:	90 ff       	sbrs	r25, 0
    38c4:	05 c0       	rjmp	.+10     	; 0x38d0 <bind+0x6c>
    38c6:	0f 2e       	mov	r0, r31
    38c8:	f4 e5       	ldi	r31, 0x54	; 84
    38ca:	bf 2e       	mov	r11, r31
    38cc:	f0 2d       	mov	r31, r0
    38ce:	04 c0       	rjmp	.+8      	; 0x38d8 <bind+0x74>
    38d0:	0f 2e       	mov	r0, r31
    38d2:	f1 e4       	ldi	r31, 0x41	; 65
    38d4:	bf 2e       	mov	r11, r31
    38d6:	f0 2d       	mov	r31, r0
    38d8:	89 87       	std	Y+9, r24	; 0x09
    38da:	28 e0       	ldi	r18, 0x08	; 8
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	40 e0       	ldi	r20, 0x00	; 0
    38e0:	50 e0       	ldi	r21, 0x00	; 0
    38e2:	ce 01       	movw	r24, r28
    38e4:	01 96       	adiw	r24, 0x01	; 1
    38e6:	0e 94 51 06 	call	0xca2	; 0xca2 <m2m_memcpy>
    38ea:	8b e0       	ldi	r24, 0x0B	; 11
    38ec:	80 9f       	mul	r24, r16
    38ee:	f0 01       	movw	r30, r0
    38f0:	81 9f       	mul	r24, r17
    38f2:	f0 0d       	add	r31, r0
    38f4:	11 24       	eor	r1, r1
    38f6:	e8 55       	subi	r30, 0x58	; 88
    38f8:	f1 4d       	sbci	r31, 0xD1	; 209
    38fa:	84 81       	ldd	r24, Z+4	; 0x04
    38fc:	95 81       	ldd	r25, Z+5	; 0x05
    38fe:	8b 87       	std	Y+11, r24	; 0x0b
    3900:	9c 87       	std	Y+12, r25	; 0x0c
    3902:	c1 2c       	mov	r12, r1
    3904:	d1 2c       	mov	r13, r1
    3906:	e1 2c       	mov	r14, r1
    3908:	f1 2c       	mov	r15, r1
    390a:	00 e0       	ldi	r16, 0x00	; 0
    390c:	10 e0       	ldi	r17, 0x00	; 0
    390e:	2c e0       	ldi	r18, 0x0C	; 12
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	ae 01       	movw	r20, r28
    3914:	4f 5f       	subi	r20, 0xFF	; 255
    3916:	5f 4f       	sbci	r21, 0xFF	; 255
    3918:	6b 2d       	mov	r22, r11
    391a:	82 e0       	ldi	r24, 0x02	; 2
    391c:	0e 94 02 07 	call	0xe04	; 0xe04 <hif_send>
    3920:	88 23       	and	r24, r24
    3922:	49 f0       	breq	.+18     	; 0x3936 <bind+0xd2>
    3924:	87 ef       	ldi	r24, 0xF7	; 247
    3926:	07 c0       	rjmp	.+14     	; 0x3936 <bind+0xd2>
    3928:	8a ef       	ldi	r24, 0xFA	; 250
    392a:	05 c0       	rjmp	.+10     	; 0x3936 <bind+0xd2>
    392c:	8a ef       	ldi	r24, 0xFA	; 250
    392e:	03 c0       	rjmp	.+6      	; 0x3936 <bind+0xd2>
    3930:	8a ef       	ldi	r24, 0xFA	; 250
    3932:	01 c0       	rjmp	.+2      	; 0x3936 <bind+0xd2>
    3934:	8a ef       	ldi	r24, 0xFA	; 250
    3936:	2c 96       	adiw	r28, 0x0c	; 12
    3938:	cd bf       	out	0x3d, r28	; 61
    393a:	de bf       	out	0x3e, r29	; 62
    393c:	df 91       	pop	r29
    393e:	cf 91       	pop	r28
    3940:	1f 91       	pop	r17
    3942:	0f 91       	pop	r16
    3944:	ff 90       	pop	r15
    3946:	ef 90       	pop	r14
    3948:	df 90       	pop	r13
    394a:	cf 90       	pop	r12
    394c:	bf 90       	pop	r11
    394e:	08 95       	ret

00003950 <listen>:
    3950:	cf 92       	push	r12
    3952:	df 92       	push	r13
    3954:	ef 92       	push	r14
    3956:	ff 92       	push	r15
    3958:	0f 93       	push	r16
    395a:	1f 93       	push	r17
    395c:	cf 93       	push	r28
    395e:	df 93       	push	r29
    3960:	00 d0       	rcall	.+0      	; 0x3962 <listen+0x12>
    3962:	00 d0       	rcall	.+0      	; 0x3964 <listen+0x14>
    3964:	cd b7       	in	r28, 0x3d	; 61
    3966:	de b7       	in	r29, 0x3e	; 62
    3968:	88 23       	and	r24, r24
    396a:	74 f1       	brlt	.+92     	; 0x39c8 <listen+0x78>
    396c:	28 2f       	mov	r18, r24
    396e:	08 2e       	mov	r0, r24
    3970:	00 0c       	add	r0, r0
    3972:	33 0b       	sbc	r19, r19
    3974:	9b e0       	ldi	r25, 0x0B	; 11
    3976:	89 02       	muls	r24, r25
    3978:	f0 01       	movw	r30, r0
    397a:	11 24       	eor	r1, r1
    397c:	e8 55       	subi	r30, 0x58	; 88
    397e:	f1 4d       	sbci	r31, 0xD1	; 209
    3980:	90 85       	ldd	r25, Z+8	; 0x08
    3982:	91 30       	cpi	r25, 0x01	; 1
    3984:	19 f5       	brne	.+70     	; 0x39cc <listen+0x7c>
    3986:	89 83       	std	Y+1, r24	; 0x01
    3988:	6a 83       	std	Y+2, r22	; 0x02
    398a:	8b e0       	ldi	r24, 0x0B	; 11
    398c:	82 9f       	mul	r24, r18
    398e:	f0 01       	movw	r30, r0
    3990:	83 9f       	mul	r24, r19
    3992:	f0 0d       	add	r31, r0
    3994:	11 24       	eor	r1, r1
    3996:	e8 55       	subi	r30, 0x58	; 88
    3998:	f1 4d       	sbci	r31, 0xD1	; 209
    399a:	84 81       	ldd	r24, Z+4	; 0x04
    399c:	95 81       	ldd	r25, Z+5	; 0x05
    399e:	8b 83       	std	Y+3, r24	; 0x03
    39a0:	9c 83       	std	Y+4, r25	; 0x04
    39a2:	c1 2c       	mov	r12, r1
    39a4:	d1 2c       	mov	r13, r1
    39a6:	e1 2c       	mov	r14, r1
    39a8:	f1 2c       	mov	r15, r1
    39aa:	00 e0       	ldi	r16, 0x00	; 0
    39ac:	10 e0       	ldi	r17, 0x00	; 0
    39ae:	24 e0       	ldi	r18, 0x04	; 4
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	ae 01       	movw	r20, r28
    39b4:	4f 5f       	subi	r20, 0xFF	; 255
    39b6:	5f 4f       	sbci	r21, 0xFF	; 255
    39b8:	62 e4       	ldi	r22, 0x42	; 66
    39ba:	82 e0       	ldi	r24, 0x02	; 2
    39bc:	0e 94 02 07 	call	0xe04	; 0xe04 <hif_send>
    39c0:	88 23       	and	r24, r24
    39c2:	29 f0       	breq	.+10     	; 0x39ce <listen+0x7e>
    39c4:	87 ef       	ldi	r24, 0xF7	; 247
    39c6:	03 c0       	rjmp	.+6      	; 0x39ce <listen+0x7e>
    39c8:	8a ef       	ldi	r24, 0xFA	; 250
    39ca:	01 c0       	rjmp	.+2      	; 0x39ce <listen+0x7e>
    39cc:	8a ef       	ldi	r24, 0xFA	; 250
    39ce:	24 96       	adiw	r28, 0x04	; 4
    39d0:	cd bf       	out	0x3d, r28	; 61
    39d2:	de bf       	out	0x3e, r29	; 62
    39d4:	df 91       	pop	r29
    39d6:	cf 91       	pop	r28
    39d8:	1f 91       	pop	r17
    39da:	0f 91       	pop	r16
    39dc:	ff 90       	pop	r15
    39de:	ef 90       	pop	r14
    39e0:	df 90       	pop	r13
    39e2:	cf 90       	pop	r12
    39e4:	08 95       	ret

000039e6 <accept>:
    39e6:	88 23       	and	r24, r24
    39e8:	5c f0       	brlt	.+22     	; 0x3a00 <accept+0x1a>
    39ea:	9b e0       	ldi	r25, 0x0B	; 11
    39ec:	89 02       	muls	r24, r25
    39ee:	f0 01       	movw	r30, r0
    39f0:	11 24       	eor	r1, r1
    39f2:	e8 55       	subi	r30, 0x58	; 88
    39f4:	f1 4d       	sbci	r31, 0xD1	; 209
    39f6:	80 85       	ldd	r24, Z+8	; 0x08
    39f8:	81 30       	cpi	r24, 0x01	; 1
    39fa:	21 f4       	brne	.+8      	; 0x3a04 <accept+0x1e>
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	08 95       	ret
    3a00:	8a ef       	ldi	r24, 0xFA	; 250
    3a02:	08 95       	ret
    3a04:	8a ef       	ldi	r24, 0xFA	; 250
    3a06:	08 95       	ret

00003a08 <send>:
    3a08:	cf 92       	push	r12
    3a0a:	df 92       	push	r13
    3a0c:	ef 92       	push	r14
    3a0e:	ff 92       	push	r15
    3a10:	0f 93       	push	r16
    3a12:	1f 93       	push	r17
    3a14:	cf 93       	push	r28
    3a16:	df 93       	push	r29
    3a18:	cd b7       	in	r28, 0x3d	; 61
    3a1a:	de b7       	in	r29, 0x3e	; 62
    3a1c:	60 97       	sbiw	r28, 0x10	; 16
    3a1e:	cd bf       	out	0x3d, r28	; 61
    3a20:	de bf       	out	0x3e, r29	; 62
    3a22:	88 23       	and	r24, r24
    3a24:	0c f4       	brge	.+2      	; 0x3a28 <send+0x20>
    3a26:	60 c0       	rjmp	.+192    	; 0x3ae8 <send+0xe0>
    3a28:	61 15       	cp	r22, r1
    3a2a:	71 05       	cpc	r23, r1
    3a2c:	09 f4       	brne	.+2      	; 0x3a30 <send+0x28>
    3a2e:	5f c0       	rjmp	.+190    	; 0x3aee <send+0xe6>
    3a30:	49 37       	cpi	r20, 0x79	; 121
    3a32:	95 e0       	ldi	r25, 0x05	; 5
    3a34:	59 07       	cpc	r21, r25
    3a36:	08 f0       	brcs	.+2      	; 0x3a3a <send+0x32>
    3a38:	5d c0       	rjmp	.+186    	; 0x3af4 <send+0xec>
    3a3a:	28 2f       	mov	r18, r24
    3a3c:	08 2e       	mov	r0, r24
    3a3e:	00 0c       	add	r0, r0
    3a40:	33 0b       	sbc	r19, r19
    3a42:	9b e0       	ldi	r25, 0x0B	; 11
    3a44:	89 02       	muls	r24, r25
    3a46:	f0 01       	movw	r30, r0
    3a48:	11 24       	eor	r1, r1
    3a4a:	e8 55       	subi	r30, 0x58	; 88
    3a4c:	f1 4d       	sbci	r31, 0xD1	; 209
    3a4e:	90 85       	ldd	r25, Z+8	; 0x08
    3a50:	91 30       	cpi	r25, 0x01	; 1
    3a52:	09 f0       	breq	.+2      	; 0x3a56 <send+0x4e>
    3a54:	52 c0       	rjmp	.+164    	; 0x3afa <send+0xf2>
    3a56:	89 83       	std	Y+1, r24	; 0x01
    3a58:	4b 83       	std	Y+3, r20	; 0x03
    3a5a:	5c 83       	std	Y+4, r21	; 0x04
    3a5c:	9b e0       	ldi	r25, 0x0B	; 11
    3a5e:	92 9f       	mul	r25, r18
    3a60:	f0 01       	movw	r30, r0
    3a62:	93 9f       	mul	r25, r19
    3a64:	f0 0d       	add	r31, r0
    3a66:	11 24       	eor	r1, r1
    3a68:	e8 55       	subi	r30, 0x58	; 88
    3a6a:	f1 4d       	sbci	r31, 0xD1	; 209
    3a6c:	04 80       	ldd	r0, Z+4	; 0x04
    3a6e:	f5 81       	ldd	r31, Z+5	; 0x05
    3a70:	e0 2d       	mov	r30, r0
    3a72:	ed 87       	std	Y+13, r30	; 0x0d
    3a74:	fe 87       	std	Y+14, r31	; 0x0e
    3a76:	87 30       	cpi	r24, 0x07	; 7
    3a78:	34 f0       	brlt	.+12     	; 0x3a86 <send+0x7e>
    3a7a:	0f 2e       	mov	r0, r31
    3a7c:	f4 e4       	ldi	r31, 0x44	; 68
    3a7e:	cf 2e       	mov	r12, r31
    3a80:	d1 2c       	mov	r13, r1
    3a82:	f0 2d       	mov	r31, r0
    3a84:	05 c0       	rjmp	.+10     	; 0x3a90 <send+0x88>
    3a86:	0f 2e       	mov	r0, r31
    3a88:	f0 e5       	ldi	r31, 0x50	; 80
    3a8a:	cf 2e       	mov	r12, r31
    3a8c:	d1 2c       	mov	r13, r1
    3a8e:	f0 2d       	mov	r31, r0
    3a90:	8b e0       	ldi	r24, 0x0B	; 11
    3a92:	82 9f       	mul	r24, r18
    3a94:	f0 01       	movw	r30, r0
    3a96:	83 9f       	mul	r24, r19
    3a98:	f0 0d       	add	r31, r0
    3a9a:	11 24       	eor	r1, r1
    3a9c:	e8 55       	subi	r30, 0x58	; 88
    3a9e:	f1 4d       	sbci	r31, 0xD1	; 209
    3aa0:	81 85       	ldd	r24, Z+9	; 0x09
    3aa2:	80 ff       	sbrs	r24, 0
    3aa4:	0c c0       	rjmp	.+24     	; 0x3abe <send+0xb6>
    3aa6:	8b e0       	ldi	r24, 0x0B	; 11
    3aa8:	82 9f       	mul	r24, r18
    3aaa:	f0 01       	movw	r30, r0
    3aac:	83 9f       	mul	r24, r19
    3aae:	f0 0d       	add	r31, r0
    3ab0:	11 24       	eor	r1, r1
    3ab2:	e8 55       	subi	r30, 0x58	; 88
    3ab4:	f1 4d       	sbci	r31, 0xD1	; 209
    3ab6:	c6 80       	ldd	r12, Z+6	; 0x06
    3ab8:	d7 80       	ldd	r13, Z+7	; 0x07
    3aba:	8c e4       	ldi	r24, 0x4C	; 76
    3abc:	01 c0       	rjmp	.+2      	; 0x3ac0 <send+0xb8>
    3abe:	85 e4       	ldi	r24, 0x45	; 69
    3ac0:	7a 01       	movw	r14, r20
    3ac2:	8b 01       	movw	r16, r22
    3ac4:	68 2f       	mov	r22, r24
    3ac6:	60 68       	ori	r22, 0x80	; 128
    3ac8:	20 e1       	ldi	r18, 0x10	; 16
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	ae 01       	movw	r20, r28
    3ace:	4f 5f       	subi	r20, 0xFF	; 255
    3ad0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ad2:	82 e0       	ldi	r24, 0x02	; 2
    3ad4:	0e 94 02 07 	call	0xe04	; 0xe04 <hif_send>
    3ad8:	88 23       	and	r24, r24
    3ada:	19 f0       	breq	.+6      	; 0x3ae2 <send+0xda>
    3adc:	82 ef       	ldi	r24, 0xF2	; 242
    3ade:	9f ef       	ldi	r25, 0xFF	; 255
    3ae0:	0e c0       	rjmp	.+28     	; 0x3afe <send+0xf6>
    3ae2:	80 e0       	ldi	r24, 0x00	; 0
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	0b c0       	rjmp	.+22     	; 0x3afe <send+0xf6>
    3ae8:	8a ef       	ldi	r24, 0xFA	; 250
    3aea:	9f ef       	ldi	r25, 0xFF	; 255
    3aec:	08 c0       	rjmp	.+16     	; 0x3afe <send+0xf6>
    3aee:	8a ef       	ldi	r24, 0xFA	; 250
    3af0:	9f ef       	ldi	r25, 0xFF	; 255
    3af2:	05 c0       	rjmp	.+10     	; 0x3afe <send+0xf6>
    3af4:	8a ef       	ldi	r24, 0xFA	; 250
    3af6:	9f ef       	ldi	r25, 0xFF	; 255
    3af8:	02 c0       	rjmp	.+4      	; 0x3afe <send+0xf6>
    3afa:	8a ef       	ldi	r24, 0xFA	; 250
    3afc:	9f ef       	ldi	r25, 0xFF	; 255
    3afe:	60 96       	adiw	r28, 0x10	; 16
    3b00:	cd bf       	out	0x3d, r28	; 61
    3b02:	de bf       	out	0x3e, r29	; 62
    3b04:	df 91       	pop	r29
    3b06:	cf 91       	pop	r28
    3b08:	1f 91       	pop	r17
    3b0a:	0f 91       	pop	r16
    3b0c:	ff 90       	pop	r15
    3b0e:	ef 90       	pop	r14
    3b10:	df 90       	pop	r13
    3b12:	cf 90       	pop	r12
    3b14:	08 95       	ret

00003b16 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    3b16:	cf 92       	push	r12
    3b18:	df 92       	push	r13
    3b1a:	ef 92       	push	r14
    3b1c:	ff 92       	push	r15
    3b1e:	0f 93       	push	r16
    3b20:	1f 93       	push	r17
    3b22:	cf 93       	push	r28
    3b24:	df 93       	push	r29
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
    3b2a:	28 97       	sbiw	r28, 0x08	; 8
    3b2c:	cd bf       	out	0x3d, r28	; 61
    3b2e:	de bf       	out	0x3e, r29	; 62
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    3b30:	88 23       	and	r24, r24
    3b32:	0c f4       	brge	.+2      	; 0x3b36 <recv+0x20>
    3b34:	6a c0       	rjmp	.+212    	; 0x3c0a <recv+0xf4>
    3b36:	61 15       	cp	r22, r1
    3b38:	71 05       	cpc	r23, r1
    3b3a:	09 f4       	brne	.+2      	; 0x3b3e <recv+0x28>
    3b3c:	69 c0       	rjmp	.+210    	; 0x3c10 <recv+0xfa>
    3b3e:	41 15       	cp	r20, r1
    3b40:	51 05       	cpc	r21, r1
    3b42:	09 f4       	brne	.+2      	; 0x3b46 <recv+0x30>
    3b44:	68 c0       	rjmp	.+208    	; 0x3c16 <recv+0x100>
    3b46:	a8 2f       	mov	r26, r24
    3b48:	08 2e       	mov	r0, r24
    3b4a:	00 0c       	add	r0, r0
    3b4c:	bb 0b       	sbc	r27, r27
    3b4e:	9b e0       	ldi	r25, 0x0B	; 11
    3b50:	89 02       	muls	r24, r25
    3b52:	f0 01       	movw	r30, r0
    3b54:	11 24       	eor	r1, r1
    3b56:	e8 55       	subi	r30, 0x58	; 88
    3b58:	f1 4d       	sbci	r31, 0xD1	; 209
    3b5a:	90 85       	ldd	r25, Z+8	; 0x08
    3b5c:	91 30       	cpi	r25, 0x01	; 1
    3b5e:	09 f0       	breq	.+2      	; 0x3b62 <recv+0x4c>
    3b60:	5d c0       	rjmp	.+186    	; 0x3c1c <recv+0x106>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    3b62:	9b e0       	ldi	r25, 0x0B	; 11
    3b64:	9a 9f       	mul	r25, r26
    3b66:	f0 01       	movw	r30, r0
    3b68:	9b 9f       	mul	r25, r27
    3b6a:	f0 0d       	add	r31, r0
    3b6c:	11 24       	eor	r1, r1
    3b6e:	e8 55       	subi	r30, 0x58	; 88
    3b70:	f1 4d       	sbci	r31, 0xD1	; 209
    3b72:	60 83       	st	Z, r22
    3b74:	71 83       	std	Z+1, r23	; 0x01
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    3b76:	42 83       	std	Z+2, r20	; 0x02
    3b78:	53 83       	std	Z+3, r21	; 0x03

		if(!gastrSockets[sock].bIsRecvPending)
    3b7a:	92 85       	ldd	r25, Z+10	; 0x0a
    3b7c:	91 11       	cpse	r25, r1
    3b7e:	51 c0       	rjmp	.+162    	; 0x3c22 <recv+0x10c>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    3b80:	9b e0       	ldi	r25, 0x0B	; 11
    3b82:	9a 9f       	mul	r25, r26
    3b84:	f0 01       	movw	r30, r0
    3b86:	9b 9f       	mul	r25, r27
    3b88:	f0 0d       	add	r31, r0
    3b8a:	11 24       	eor	r1, r1
    3b8c:	e8 55       	subi	r30, 0x58	; 88
    3b8e:	f1 4d       	sbci	r31, 0xD1	; 209
    3b90:	91 e0       	ldi	r25, 0x01	; 1
    3b92:	92 87       	std	Z+10, r25	; 0x0a
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3b94:	91 85       	ldd	r25, Z+9	; 0x09
    3b96:	90 ff       	sbrs	r25, 0
    3b98:	02 c0       	rjmp	.+4      	; 0x3b9e <recv+0x88>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    3b9a:	6d e4       	ldi	r22, 0x4D	; 77
    3b9c:	01 c0       	rjmp	.+2      	; 0x3ba0 <recv+0x8a>
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;

		if(!gastrSockets[sock].bIsRecvPending)
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    3b9e:	66 e4       	ldi	r22, 0x46	; 70
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    3ba0:	01 15       	cp	r16, r1
    3ba2:	11 05       	cpc	r17, r1
    3ba4:	21 05       	cpc	r18, r1
    3ba6:	31 05       	cpc	r19, r1
    3ba8:	49 f4       	brne	.+18     	; 0x3bbc <recv+0xa6>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    3baa:	cc 24       	eor	r12, r12
    3bac:	ca 94       	dec	r12
    3bae:	dc 2c       	mov	r13, r12
    3bb0:	76 01       	movw	r14, r12
    3bb2:	c9 82       	std	Y+1, r12	; 0x01
    3bb4:	da 82       	std	Y+2, r13	; 0x02
    3bb6:	eb 82       	std	Y+3, r14	; 0x03
    3bb8:	fc 82       	std	Y+4, r15	; 0x04
    3bba:	04 c0       	rjmp	.+8      	; 0x3bc4 <recv+0xae>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    3bbc:	09 83       	std	Y+1, r16	; 0x01
    3bbe:	1a 83       	std	Y+2, r17	; 0x02
    3bc0:	2b 83       	std	Y+3, r18	; 0x03
    3bc2:	3c 83       	std	Y+4, r19	; 0x04
			strRecv.sock = sock;
    3bc4:	8d 83       	std	Y+5, r24	; 0x05
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    3bc6:	8b e0       	ldi	r24, 0x0B	; 11
    3bc8:	8a 9f       	mul	r24, r26
    3bca:	f0 01       	movw	r30, r0
    3bcc:	8b 9f       	mul	r24, r27
    3bce:	f0 0d       	add	r31, r0
    3bd0:	11 24       	eor	r1, r1
    3bd2:	e8 55       	subi	r30, 0x58	; 88
    3bd4:	f1 4d       	sbci	r31, 0xD1	; 209
    3bd6:	84 81       	ldd	r24, Z+4	; 0x04
    3bd8:	95 81       	ldd	r25, Z+5	; 0x05
    3bda:	8f 83       	std	Y+7, r24	; 0x07
    3bdc:	98 87       	std	Y+8, r25	; 0x08
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    3bde:	c1 2c       	mov	r12, r1
    3be0:	d1 2c       	mov	r13, r1
    3be2:	e1 2c       	mov	r14, r1
    3be4:	f1 2c       	mov	r15, r1
    3be6:	00 e0       	ldi	r16, 0x00	; 0
    3be8:	10 e0       	ldi	r17, 0x00	; 0
    3bea:	28 e0       	ldi	r18, 0x08	; 8
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	ae 01       	movw	r20, r28
    3bf0:	4f 5f       	subi	r20, 0xFF	; 255
    3bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    3bf4:	82 e0       	ldi	r24, 0x02	; 2
    3bf6:	0e 94 02 07 	call	0xe04	; 0xe04 <hif_send>
			if(s16Ret != SOCK_ERR_NO_ERROR)
    3bfa:	88 23       	and	r24, r24
    3bfc:	19 f0       	breq	.+6      	; 0x3c04 <recv+0xee>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    3bfe:	82 ef       	ldi	r24, 0xF2	; 242
    3c00:	9f ef       	ldi	r25, 0xFF	; 255
    3c02:	11 c0       	rjmp	.+34     	; 0x3c26 <recv+0x110>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    3c04:	80 e0       	ldi	r24, 0x00	; 0
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	0e c0       	rjmp	.+28     	; 0x3c26 <recv+0x110>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3c0a:	8a ef       	ldi	r24, 0xFA	; 250
    3c0c:	9f ef       	ldi	r25, 0xFF	; 255
    3c0e:	0b c0       	rjmp	.+22     	; 0x3c26 <recv+0x110>
    3c10:	8a ef       	ldi	r24, 0xFA	; 250
    3c12:	9f ef       	ldi	r25, 0xFF	; 255
    3c14:	08 c0       	rjmp	.+16     	; 0x3c26 <recv+0x110>
    3c16:	8a ef       	ldi	r24, 0xFA	; 250
    3c18:	9f ef       	ldi	r25, 0xFF	; 255
    3c1a:	05 c0       	rjmp	.+10     	; 0x3c26 <recv+0x110>
    3c1c:	8a ef       	ldi	r24, 0xFA	; 250
    3c1e:	9f ef       	ldi	r25, 0xFF	; 255
    3c20:	02 c0       	rjmp	.+4      	; 0x3c26 <recv+0x110>
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	90 e0       	ldi	r25, 0x00	; 0
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
    3c26:	28 96       	adiw	r28, 0x08	; 8
    3c28:	cd bf       	out	0x3d, r28	; 61
    3c2a:	de bf       	out	0x3e, r29	; 62
    3c2c:	df 91       	pop	r29
    3c2e:	cf 91       	pop	r28
    3c30:	1f 91       	pop	r17
    3c32:	0f 91       	pop	r16
    3c34:	ff 90       	pop	r15
    3c36:	ef 90       	pop	r14
    3c38:	df 90       	pop	r13
    3c3a:	cf 90       	pop	r12
    3c3c:	08 95       	ret

00003c3e <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    3c3e:	af 92       	push	r10
    3c40:	bf 92       	push	r11
    3c42:	cf 92       	push	r12
    3c44:	df 92       	push	r13
    3c46:	ef 92       	push	r14
    3c48:	ff 92       	push	r15
    3c4a:	0f 93       	push	r16
    3c4c:	1f 93       	push	r17
    3c4e:	cf 93       	push	r28
    3c50:	df 93       	push	r29
    3c52:	00 d0       	rcall	.+0      	; 0x3c54 <close+0x16>
    3c54:	00 d0       	rcall	.+0      	; 0x3c56 <close+0x18>
    3c56:	cd b7       	in	r28, 0x3d	; 61
    3c58:	de b7       	in	r29, 0x3e	; 62
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    3c5a:	88 23       	and	r24, r24
    3c5c:	0c f4       	brge	.+2      	; 0x3c60 <close+0x22>
    3c5e:	44 c0       	rjmp	.+136    	; 0x3ce8 <close+0xaa>
    3c60:	a8 2e       	mov	r10, r24
    3c62:	08 2e       	mov	r0, r24
    3c64:	00 0c       	add	r0, r0
    3c66:	bb 08       	sbc	r11, r11
    3c68:	9b e0       	ldi	r25, 0x0B	; 11
    3c6a:	89 02       	muls	r24, r25
    3c6c:	f0 01       	movw	r30, r0
    3c6e:	11 24       	eor	r1, r1
    3c70:	e8 55       	subi	r30, 0x58	; 88
    3c72:	f1 4d       	sbci	r31, 0xD1	; 209
    3c74:	90 85       	ldd	r25, Z+8	; 0x08
    3c76:	91 30       	cpi	r25, 0x01	; 1
    3c78:	c9 f5       	brne	.+114    	; 0x3cec <close+0xae>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    3c7a:	89 83       	std	Y+1, r24	; 0x01
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    3c7c:	8b e0       	ldi	r24, 0x0B	; 11
    3c7e:	8a 9d       	mul	r24, r10
    3c80:	f0 01       	movw	r30, r0
    3c82:	8b 9d       	mul	r24, r11
    3c84:	f0 0d       	add	r31, r0
    3c86:	11 24       	eor	r1, r1
    3c88:	e8 55       	subi	r30, 0x58	; 88
    3c8a:	f1 4d       	sbci	r31, 0xD1	; 209
    3c8c:	84 81       	ldd	r24, Z+4	; 0x04
    3c8e:	95 81       	ldd	r25, Z+5	; 0x05
    3c90:	8b 83       	std	Y+3, r24	; 0x03
    3c92:	9c 83       	std	Y+4, r25	; 0x04
		
		gastrSockets[sock].bIsUsed = 0;
    3c94:	10 86       	std	Z+8, r1	; 0x08
		gastrSockets[sock].u16SessionID =0;
    3c96:	14 82       	std	Z+4, r1	; 0x04
    3c98:	15 82       	std	Z+5, r1	; 0x05
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3c9a:	81 85       	ldd	r24, Z+9	; 0x09
    3c9c:	80 ff       	sbrs	r24, 0
    3c9e:	02 c0       	rjmp	.+4      	; 0x3ca4 <close+0x66>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    3ca0:	6e e4       	ldi	r22, 0x4E	; 78
    3ca2:	01 c0       	rjmp	.+2      	; 0x3ca6 <close+0x68>
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    3ca4:	69 e4       	ldi	r22, 0x49	; 73
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    3ca6:	c1 2c       	mov	r12, r1
    3ca8:	d1 2c       	mov	r13, r1
    3caa:	e1 2c       	mov	r14, r1
    3cac:	f1 2c       	mov	r15, r1
    3cae:	00 e0       	ldi	r16, 0x00	; 0
    3cb0:	10 e0       	ldi	r17, 0x00	; 0
    3cb2:	24 e0       	ldi	r18, 0x04	; 4
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	ae 01       	movw	r20, r28
    3cb8:	4f 5f       	subi	r20, 0xFF	; 255
    3cba:	5f 4f       	sbci	r21, 0xFF	; 255
    3cbc:	82 e0       	ldi	r24, 0x02	; 2
    3cbe:	0e 94 02 07 	call	0xe04	; 0xe04 <hif_send>
    3cc2:	18 2f       	mov	r17, r24
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3cc4:	81 11       	cpse	r24, r1
		{
			s8Ret = SOCK_ERR_INVALID;
    3cc6:	17 ef       	ldi	r17, 0xF7	; 247
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    3cc8:	2b e0       	ldi	r18, 0x0B	; 11
    3cca:	2a 9d       	mul	r18, r10
    3ccc:	c0 01       	movw	r24, r0
    3cce:	2b 9d       	mul	r18, r11
    3cd0:	90 0d       	add	r25, r0
    3cd2:	11 24       	eor	r1, r1
    3cd4:	2b e0       	ldi	r18, 0x0B	; 11
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	40 e0       	ldi	r20, 0x00	; 0
    3cda:	50 e0       	ldi	r21, 0x00	; 0
    3cdc:	60 e0       	ldi	r22, 0x00	; 0
    3cde:	88 55       	subi	r24, 0x58	; 88
    3ce0:	91 4d       	sbci	r25, 0xD1	; 209
    3ce2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <m2m_memset>
    3ce6:	03 c0       	rjmp	.+6      	; 0x3cee <close+0xb0>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3ce8:	1a ef       	ldi	r17, 0xFA	; 250
    3cea:	01 c0       	rjmp	.+2      	; 0x3cee <close+0xb0>
    3cec:	1a ef       	ldi	r17, 0xFA	; 250
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
}
    3cee:	81 2f       	mov	r24, r17
    3cf0:	24 96       	adiw	r28, 0x04	; 4
    3cf2:	cd bf       	out	0x3d, r28	; 61
    3cf4:	de bf       	out	0x3e, r29	; 62
    3cf6:	df 91       	pop	r29
    3cf8:	cf 91       	pop	r28
    3cfa:	1f 91       	pop	r17
    3cfc:	0f 91       	pop	r16
    3cfe:	ff 90       	pop	r15
    3d00:	ef 90       	pop	r14
    3d02:	df 90       	pop	r13
    3d04:	cf 90       	pop	r12
    3d06:	bf 90       	pop	r11
    3d08:	af 90       	pop	r10
    3d0a:	08 95       	ret

00003d0c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    3d0c:	0f 93       	push	r16
    3d0e:	1f 93       	push	r17
    3d10:	cf 93       	push	r28
    3d12:	df 93       	push	r29
    3d14:	00 d0       	rcall	.+0      	; 0x3d16 <spi_flash_enable+0xa>
    3d16:	00 d0       	rcall	.+0      	; 0x3d18 <spi_flash_enable+0xc>
    3d18:	cd b7       	in	r28, 0x3d	; 61
    3d1a:	de b7       	in	r29, 0x3e	; 62
    3d1c:	08 2f       	mov	r16, r24
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3d1e:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <nmi_get_chipid>
    3d22:	dc 01       	movw	r26, r24
    3d24:	cb 01       	movw	r24, r22
    3d26:	9f 70       	andi	r25, 0x0F	; 15
    3d28:	aa 27       	eor	r26, r26
    3d2a:	bb 27       	eor	r27, r27
    3d2c:	80 3a       	cpi	r24, 0xA0	; 160
    3d2e:	93 40       	sbci	r25, 0x03	; 3
    3d30:	a1 05       	cpc	r26, r1
    3d32:	b1 05       	cpc	r27, r1
    3d34:	08 f4       	brcc	.+2      	; 0x3d38 <spi_flash_enable+0x2c>
    3d36:	b0 c0       	rjmp	.+352    	; 0x3e98 <spi_flash_enable+0x18c>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    3d38:	ae 01       	movw	r20, r28
    3d3a:	4f 5f       	subi	r20, 0xFF	; 255
    3d3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d3e:	60 e1       	ldi	r22, 0x10	; 16
    3d40:	74 e1       	ldi	r23, 0x14	; 20
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	0e 94 3d 11 	call	0x227a	; 0x227a <nm_read_reg_with_ret>
    3d4a:	18 2f       	mov	r17, r24
		if(s8Ret != M2M_SUCCESS) {
    3d4c:	81 11       	cpse	r24, r1
    3d4e:	a5 c0       	rjmp	.+330    	; 0x3e9a <spi_flash_enable+0x18e>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
    3d50:	89 81       	ldd	r24, Y+1	; 0x01
    3d52:	9a 81       	ldd	r25, Y+2	; 0x02
    3d54:	ab 81       	ldd	r26, Y+3	; 0x03
    3d56:	bc 81       	ldd	r27, Y+4	; 0x04
    3d58:	9f 78       	andi	r25, 0x8F	; 143
    3d5a:	a8 78       	andi	r26, 0x88	; 136
    3d5c:	b8 7f       	andi	r27, 0xF8	; 248
    3d5e:	9c 01       	movw	r18, r24
    3d60:	ad 01       	movw	r20, r26
    3d62:	30 61       	ori	r19, 0x10	; 16
    3d64:	41 61       	ori	r20, 0x11	; 17
    3d66:	51 60       	ori	r21, 0x01	; 1
    3d68:	29 83       	std	Y+1, r18	; 0x01
    3d6a:	3a 83       	std	Y+2, r19	; 0x02
    3d6c:	4b 83       	std	Y+3, r20	; 0x03
    3d6e:	5c 83       	std	Y+4, r21	; 0x04
		nm_write_reg(0x1410, u32Val);
    3d70:	60 e1       	ldi	r22, 0x10	; 16
    3d72:	74 e1       	ldi	r23, 0x14	; 20
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
		if(enable) {
    3d7c:	00 23       	and	r16, r16
    3d7e:	e1 f1       	breq	.+120    	; 0x3df8 <spi_flash_enable+0xec>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	a9 01       	movw	r20, r18
    3d86:	68 e0       	ldi	r22, 0x08	; 8
    3d88:	72 e0       	ldi	r23, 0x02	; 2
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3d92:	2b ea       	ldi	r18, 0xAB	; 171
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	40 e0       	ldi	r20, 0x00	; 0
    3d98:	50 e0       	ldi	r21, 0x00	; 0
    3d9a:	6c e0       	ldi	r22, 0x0C	; 12
    3d9c:	72 e0       	ldi	r23, 0x02	; 2
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    3da6:	21 e0       	ldi	r18, 0x01	; 1
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	40 e0       	ldi	r20, 0x00	; 0
    3dac:	50 e0       	ldi	r21, 0x00	; 0
    3dae:	64 e1       	ldi	r22, 0x14	; 20
    3db0:	72 e0       	ldi	r23, 0x02	; 2
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3dba:	20 e0       	ldi	r18, 0x00	; 0
    3dbc:	30 e0       	ldi	r19, 0x00	; 0
    3dbe:	a9 01       	movw	r20, r18
    3dc0:	6c e1       	ldi	r22, 0x1C	; 28
    3dc2:	72 e0       	ldi	r23, 0x02	; 2
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    3dcc:	21 e8       	ldi	r18, 0x81	; 129
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	40 e0       	ldi	r20, 0x00	; 0
    3dd2:	50 e0       	ldi	r21, 0x00	; 0
    3dd4:	64 e0       	ldi	r22, 0x04	; 4
    3dd6:	72 e0       	ldi	r23, 0x02	; 2
    3dd8:	81 e0       	ldi	r24, 0x01	; 1
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3de0:	68 e1       	ldi	r22, 0x18	; 24
    3de2:	72 e0       	ldi	r23, 0x02	; 2
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	0e 94 3a 11 	call	0x2274	; 0x2274 <nm_read_reg>
    3dec:	61 30       	cpi	r22, 0x01	; 1
    3dee:	71 05       	cpc	r23, r1
    3df0:	81 05       	cpc	r24, r1
    3df2:	91 05       	cpc	r25, r1
    3df4:	a9 f7       	brne	.-22     	; 0x3de0 <spi_flash_enable+0xd4>
    3df6:	3b c0       	rjmp	.+118    	; 0x3e6e <spi_flash_enable+0x162>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	a9 01       	movw	r20, r18
    3dfe:	68 e0       	ldi	r22, 0x08	; 8
    3e00:	72 e0       	ldi	r23, 0x02	; 2
    3e02:	81 e0       	ldi	r24, 0x01	; 1
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3e0a:	29 eb       	ldi	r18, 0xB9	; 185
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	40 e0       	ldi	r20, 0x00	; 0
    3e10:	50 e0       	ldi	r21, 0x00	; 0
    3e12:	6c e0       	ldi	r22, 0x0C	; 12
    3e14:	72 e0       	ldi	r23, 0x02	; 2
    3e16:	81 e0       	ldi	r24, 0x01	; 1
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    3e1e:	21 e0       	ldi	r18, 0x01	; 1
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	40 e0       	ldi	r20, 0x00	; 0
    3e24:	50 e0       	ldi	r21, 0x00	; 0
    3e26:	64 e1       	ldi	r22, 0x14	; 20
    3e28:	72 e0       	ldi	r23, 0x02	; 2
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	a9 01       	movw	r20, r18
    3e38:	6c e1       	ldi	r22, 0x1C	; 28
    3e3a:	72 e0       	ldi	r23, 0x02	; 2
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    3e44:	21 e8       	ldi	r18, 0x81	; 129
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	40 e0       	ldi	r20, 0x00	; 0
    3e4a:	50 e0       	ldi	r21, 0x00	; 0
    3e4c:	64 e0       	ldi	r22, 0x04	; 4
    3e4e:	72 e0       	ldi	r23, 0x02	; 2
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3e58:	68 e1       	ldi	r22, 0x18	; 24
    3e5a:	72 e0       	ldi	r23, 0x02	; 2
    3e5c:	81 e0       	ldi	r24, 0x01	; 1
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	0e 94 3a 11 	call	0x2274	; 0x2274 <nm_read_reg>
    3e64:	61 30       	cpi	r22, 0x01	; 1
    3e66:	71 05       	cpc	r23, r1
    3e68:	81 05       	cpc	r24, r1
    3e6a:	91 05       	cpc	r25, r1
    3e6c:	a9 f7       	brne	.-22     	; 0x3e58 <spi_flash_enable+0x14c>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
    3e6e:	89 81       	ldd	r24, Y+1	; 0x01
    3e70:	9a 81       	ldd	r25, Y+2	; 0x02
    3e72:	ab 81       	ldd	r26, Y+3	; 0x03
    3e74:	bc 81       	ldd	r27, Y+4	; 0x04
    3e76:	9f 78       	andi	r25, 0x8F	; 143
    3e78:	a8 78       	andi	r26, 0x88	; 136
    3e7a:	b8 7f       	andi	r27, 0xF8	; 248
    3e7c:	9c 01       	movw	r18, r24
    3e7e:	ad 01       	movw	r20, r26
    3e80:	41 60       	ori	r20, 0x01	; 1
    3e82:	29 83       	std	Y+1, r18	; 0x01
    3e84:	3a 83       	std	Y+2, r19	; 0x02
    3e86:	4b 83       	std	Y+3, r20	; 0x03
    3e88:	5c 83       	std	Y+4, r21	; 0x04
		nm_write_reg(0x1410, u32Val);
    3e8a:	60 e1       	ldi	r22, 0x10	; 16
    3e8c:	74 e1       	ldi	r23, 0x14	; 20
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	0e 94 40 11 	call	0x2280	; 0x2280 <nm_write_reg>
    3e96:	01 c0       	rjmp	.+2      	; 0x3e9a <spi_flash_enable+0x18e>
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
    3e98:	10 e0       	ldi	r17, 0x00	; 0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    3e9a:	81 2f       	mov	r24, r17
    3e9c:	24 96       	adiw	r28, 0x04	; 4
    3e9e:	cd bf       	out	0x3d, r28	; 61
    3ea0:	de bf       	out	0x3e, r29	; 62
    3ea2:	df 91       	pop	r29
    3ea4:	cf 91       	pop	r28
    3ea6:	1f 91       	pop	r17
    3ea8:	0f 91       	pop	r16
    3eaa:	08 95       	ret

00003eac <__divmodhi4>:
    3eac:	97 fb       	bst	r25, 7
    3eae:	07 2e       	mov	r0, r23
    3eb0:	16 f4       	brtc	.+4      	; 0x3eb6 <__divmodhi4+0xa>
    3eb2:	00 94       	com	r0
    3eb4:	07 d0       	rcall	.+14     	; 0x3ec4 <__divmodhi4_neg1>
    3eb6:	77 fd       	sbrc	r23, 7
    3eb8:	09 d0       	rcall	.+18     	; 0x3ecc <__divmodhi4_neg2>
    3eba:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__udivmodhi4>
    3ebe:	07 fc       	sbrc	r0, 7
    3ec0:	05 d0       	rcall	.+10     	; 0x3ecc <__divmodhi4_neg2>
    3ec2:	3e f4       	brtc	.+14     	; 0x3ed2 <__divmodhi4_exit>

00003ec4 <__divmodhi4_neg1>:
    3ec4:	90 95       	com	r25
    3ec6:	81 95       	neg	r24
    3ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eca:	08 95       	ret

00003ecc <__divmodhi4_neg2>:
    3ecc:	70 95       	com	r23
    3ece:	61 95       	neg	r22
    3ed0:	7f 4f       	sbci	r23, 0xFF	; 255

00003ed2 <__divmodhi4_exit>:
    3ed2:	08 95       	ret

00003ed4 <__tablejump2__>:
    3ed4:	ee 0f       	add	r30, r30
    3ed6:	ff 1f       	adc	r31, r31
    3ed8:	05 90       	lpm	r0, Z+
    3eda:	f4 91       	lpm	r31, Z
    3edc:	e0 2d       	mov	r30, r0
    3ede:	09 94       	ijmp

00003ee0 <__udivmodhi4>:
    3ee0:	aa 1b       	sub	r26, r26
    3ee2:	bb 1b       	sub	r27, r27
    3ee4:	51 e1       	ldi	r21, 0x11	; 17
    3ee6:	07 c0       	rjmp	.+14     	; 0x3ef6 <__udivmodhi4_ep>

00003ee8 <__udivmodhi4_loop>:
    3ee8:	aa 1f       	adc	r26, r26
    3eea:	bb 1f       	adc	r27, r27
    3eec:	a6 17       	cp	r26, r22
    3eee:	b7 07       	cpc	r27, r23
    3ef0:	10 f0       	brcs	.+4      	; 0x3ef6 <__udivmodhi4_ep>
    3ef2:	a6 1b       	sub	r26, r22
    3ef4:	b7 0b       	sbc	r27, r23

00003ef6 <__udivmodhi4_ep>:
    3ef6:	88 1f       	adc	r24, r24
    3ef8:	99 1f       	adc	r25, r25
    3efa:	5a 95       	dec	r21
    3efc:	a9 f7       	brne	.-22     	; 0x3ee8 <__udivmodhi4_loop>
    3efe:	80 95       	com	r24
    3f00:	90 95       	com	r25
    3f02:	bc 01       	movw	r22, r24
    3f04:	cd 01       	movw	r24, r26
    3f06:	08 95       	ret

00003f08 <strcmp>:
    3f08:	fb 01       	movw	r30, r22
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	8d 91       	ld	r24, X+
    3f0e:	01 90       	ld	r0, Z+
    3f10:	80 19       	sub	r24, r0
    3f12:	01 10       	cpse	r0, r1
    3f14:	d9 f3       	breq	.-10     	; 0x3f0c <strcmp+0x4>
    3f16:	99 0b       	sbc	r25, r25
    3f18:	08 95       	ret

00003f1a <printf>:
    3f1a:	a0 e0       	ldi	r26, 0x00	; 0
    3f1c:	b0 e0       	ldi	r27, 0x00	; 0
    3f1e:	e3 e9       	ldi	r30, 0x93	; 147
    3f20:	ff e1       	ldi	r31, 0x1F	; 31
    3f22:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__prologue_saves__+0x20>
    3f26:	ae 01       	movw	r20, r28
    3f28:	4b 5f       	subi	r20, 0xFB	; 251
    3f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f2c:	fa 01       	movw	r30, r20
    3f2e:	61 91       	ld	r22, Z+
    3f30:	71 91       	ld	r23, Z+
    3f32:	af 01       	movw	r20, r30
    3f34:	80 91 29 2f 	lds	r24, 0x2F29	; 0x802f29 <__iob+0x2>
    3f38:	90 91 2a 2f 	lds	r25, 0x2F2A	; 0x802f2a <__iob+0x3>
    3f3c:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <vfprintf>
    3f40:	e2 e0       	ldi	r30, 0x02	; 2
    3f42:	0c 94 8d 22 	jmp	0x451a	; 0x451a <__epilogue_restores__+0x20>

00003f46 <puts>:
    3f46:	0f 93       	push	r16
    3f48:	1f 93       	push	r17
    3f4a:	cf 93       	push	r28
    3f4c:	df 93       	push	r29
    3f4e:	e0 91 29 2f 	lds	r30, 0x2F29	; 0x802f29 <__iob+0x2>
    3f52:	f0 91 2a 2f 	lds	r31, 0x2F2A	; 0x802f2a <__iob+0x3>
    3f56:	23 81       	ldd	r18, Z+3	; 0x03
    3f58:	21 ff       	sbrs	r18, 1
    3f5a:	1b c0       	rjmp	.+54     	; 0x3f92 <puts+0x4c>
    3f5c:	8c 01       	movw	r16, r24
    3f5e:	d0 e0       	ldi	r29, 0x00	; 0
    3f60:	c0 e0       	ldi	r28, 0x00	; 0
    3f62:	f8 01       	movw	r30, r16
    3f64:	81 91       	ld	r24, Z+
    3f66:	8f 01       	movw	r16, r30
    3f68:	60 91 29 2f 	lds	r22, 0x2F29	; 0x802f29 <__iob+0x2>
    3f6c:	70 91 2a 2f 	lds	r23, 0x2F2A	; 0x802f2a <__iob+0x3>
    3f70:	db 01       	movw	r26, r22
    3f72:	18 96       	adiw	r26, 0x08	; 8
    3f74:	ed 91       	ld	r30, X+
    3f76:	fc 91       	ld	r31, X
    3f78:	19 97       	sbiw	r26, 0x09	; 9
    3f7a:	88 23       	and	r24, r24
    3f7c:	31 f0       	breq	.+12     	; 0x3f8a <puts+0x44>
    3f7e:	09 95       	icall
    3f80:	89 2b       	or	r24, r25
    3f82:	79 f3       	breq	.-34     	; 0x3f62 <puts+0x1c>
    3f84:	df ef       	ldi	r29, 0xFF	; 255
    3f86:	cf ef       	ldi	r28, 0xFF	; 255
    3f88:	ec cf       	rjmp	.-40     	; 0x3f62 <puts+0x1c>
    3f8a:	8a e0       	ldi	r24, 0x0A	; 10
    3f8c:	09 95       	icall
    3f8e:	89 2b       	or	r24, r25
    3f90:	19 f0       	breq	.+6      	; 0x3f98 <puts+0x52>
    3f92:	8f ef       	ldi	r24, 0xFF	; 255
    3f94:	9f ef       	ldi	r25, 0xFF	; 255
    3f96:	02 c0       	rjmp	.+4      	; 0x3f9c <puts+0x56>
    3f98:	8d 2f       	mov	r24, r29
    3f9a:	9c 2f       	mov	r25, r28
    3f9c:	df 91       	pop	r29
    3f9e:	cf 91       	pop	r28
    3fa0:	1f 91       	pop	r17
    3fa2:	0f 91       	pop	r16
    3fa4:	08 95       	ret

00003fa6 <vfprintf>:
    3fa6:	ab e0       	ldi	r26, 0x0B	; 11
    3fa8:	b0 e0       	ldi	r27, 0x00	; 0
    3faa:	e9 ed       	ldi	r30, 0xD9	; 217
    3fac:	ff e1       	ldi	r31, 0x1F	; 31
    3fae:	0c 94 64 22 	jmp	0x44c8	; 0x44c8 <__prologue_saves__>
    3fb2:	6c 01       	movw	r12, r24
    3fb4:	7b 01       	movw	r14, r22
    3fb6:	8a 01       	movw	r16, r20
    3fb8:	fc 01       	movw	r30, r24
    3fba:	16 82       	std	Z+6, r1	; 0x06
    3fbc:	17 82       	std	Z+7, r1	; 0x07
    3fbe:	83 81       	ldd	r24, Z+3	; 0x03
    3fc0:	81 ff       	sbrs	r24, 1
    3fc2:	cc c1       	rjmp	.+920    	; 0x435c <__RODATA_PM_OFFSET__+0x35c>
    3fc4:	ce 01       	movw	r24, r28
    3fc6:	01 96       	adiw	r24, 0x01	; 1
    3fc8:	3c 01       	movw	r6, r24
    3fca:	f6 01       	movw	r30, r12
    3fcc:	93 81       	ldd	r25, Z+3	; 0x03
    3fce:	f7 01       	movw	r30, r14
    3fd0:	93 fd       	sbrc	r25, 3
    3fd2:	85 91       	lpm	r24, Z+
    3fd4:	93 ff       	sbrs	r25, 3
    3fd6:	81 91       	ld	r24, Z+
    3fd8:	7f 01       	movw	r14, r30
    3fda:	88 23       	and	r24, r24
    3fdc:	09 f4       	brne	.+2      	; 0x3fe0 <vfprintf+0x3a>
    3fde:	ba c1       	rjmp	.+884    	; 0x4354 <__RODATA_PM_OFFSET__+0x354>
    3fe0:	85 32       	cpi	r24, 0x25	; 37
    3fe2:	39 f4       	brne	.+14     	; 0x3ff2 <vfprintf+0x4c>
    3fe4:	93 fd       	sbrc	r25, 3
    3fe6:	85 91       	lpm	r24, Z+
    3fe8:	93 ff       	sbrs	r25, 3
    3fea:	81 91       	ld	r24, Z+
    3fec:	7f 01       	movw	r14, r30
    3fee:	85 32       	cpi	r24, 0x25	; 37
    3ff0:	29 f4       	brne	.+10     	; 0x3ffc <vfprintf+0x56>
    3ff2:	b6 01       	movw	r22, r12
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	0e 94 ca 21 	call	0x4394	; 0x4394 <fputc>
    3ffa:	e7 cf       	rjmp	.-50     	; 0x3fca <vfprintf+0x24>
    3ffc:	91 2c       	mov	r9, r1
    3ffe:	21 2c       	mov	r2, r1
    4000:	31 2c       	mov	r3, r1
    4002:	ff e1       	ldi	r31, 0x1F	; 31
    4004:	f3 15       	cp	r31, r3
    4006:	d8 f0       	brcs	.+54     	; 0x403e <__RODATA_PM_OFFSET__+0x3e>
    4008:	8b 32       	cpi	r24, 0x2B	; 43
    400a:	79 f0       	breq	.+30     	; 0x402a <__RODATA_PM_OFFSET__+0x2a>
    400c:	38 f4       	brcc	.+14     	; 0x401c <__RODATA_PM_OFFSET__+0x1c>
    400e:	80 32       	cpi	r24, 0x20	; 32
    4010:	79 f0       	breq	.+30     	; 0x4030 <__RODATA_PM_OFFSET__+0x30>
    4012:	83 32       	cpi	r24, 0x23	; 35
    4014:	a1 f4       	brne	.+40     	; 0x403e <__RODATA_PM_OFFSET__+0x3e>
    4016:	23 2d       	mov	r18, r3
    4018:	20 61       	ori	r18, 0x10	; 16
    401a:	1d c0       	rjmp	.+58     	; 0x4056 <__RODATA_PM_OFFSET__+0x56>
    401c:	8d 32       	cpi	r24, 0x2D	; 45
    401e:	61 f0       	breq	.+24     	; 0x4038 <__RODATA_PM_OFFSET__+0x38>
    4020:	80 33       	cpi	r24, 0x30	; 48
    4022:	69 f4       	brne	.+26     	; 0x403e <__RODATA_PM_OFFSET__+0x3e>
    4024:	23 2d       	mov	r18, r3
    4026:	21 60       	ori	r18, 0x01	; 1
    4028:	16 c0       	rjmp	.+44     	; 0x4056 <__RODATA_PM_OFFSET__+0x56>
    402a:	83 2d       	mov	r24, r3
    402c:	82 60       	ori	r24, 0x02	; 2
    402e:	38 2e       	mov	r3, r24
    4030:	e3 2d       	mov	r30, r3
    4032:	e4 60       	ori	r30, 0x04	; 4
    4034:	3e 2e       	mov	r3, r30
    4036:	2a c0       	rjmp	.+84     	; 0x408c <__RODATA_PM_OFFSET__+0x8c>
    4038:	f3 2d       	mov	r31, r3
    403a:	f8 60       	ori	r31, 0x08	; 8
    403c:	1d c0       	rjmp	.+58     	; 0x4078 <__RODATA_PM_OFFSET__+0x78>
    403e:	37 fc       	sbrc	r3, 7
    4040:	2d c0       	rjmp	.+90     	; 0x409c <__RODATA_PM_OFFSET__+0x9c>
    4042:	20 ed       	ldi	r18, 0xD0	; 208
    4044:	28 0f       	add	r18, r24
    4046:	2a 30       	cpi	r18, 0x0A	; 10
    4048:	40 f0       	brcs	.+16     	; 0x405a <__RODATA_PM_OFFSET__+0x5a>
    404a:	8e 32       	cpi	r24, 0x2E	; 46
    404c:	b9 f4       	brne	.+46     	; 0x407c <__RODATA_PM_OFFSET__+0x7c>
    404e:	36 fc       	sbrc	r3, 6
    4050:	81 c1       	rjmp	.+770    	; 0x4354 <__RODATA_PM_OFFSET__+0x354>
    4052:	23 2d       	mov	r18, r3
    4054:	20 64       	ori	r18, 0x40	; 64
    4056:	32 2e       	mov	r3, r18
    4058:	19 c0       	rjmp	.+50     	; 0x408c <__RODATA_PM_OFFSET__+0x8c>
    405a:	36 fe       	sbrs	r3, 6
    405c:	06 c0       	rjmp	.+12     	; 0x406a <__RODATA_PM_OFFSET__+0x6a>
    405e:	8a e0       	ldi	r24, 0x0A	; 10
    4060:	98 9e       	mul	r9, r24
    4062:	20 0d       	add	r18, r0
    4064:	11 24       	eor	r1, r1
    4066:	92 2e       	mov	r9, r18
    4068:	11 c0       	rjmp	.+34     	; 0x408c <__RODATA_PM_OFFSET__+0x8c>
    406a:	ea e0       	ldi	r30, 0x0A	; 10
    406c:	2e 9e       	mul	r2, r30
    406e:	20 0d       	add	r18, r0
    4070:	11 24       	eor	r1, r1
    4072:	22 2e       	mov	r2, r18
    4074:	f3 2d       	mov	r31, r3
    4076:	f0 62       	ori	r31, 0x20	; 32
    4078:	3f 2e       	mov	r3, r31
    407a:	08 c0       	rjmp	.+16     	; 0x408c <__RODATA_PM_OFFSET__+0x8c>
    407c:	8c 36       	cpi	r24, 0x6C	; 108
    407e:	21 f4       	brne	.+8      	; 0x4088 <__RODATA_PM_OFFSET__+0x88>
    4080:	83 2d       	mov	r24, r3
    4082:	80 68       	ori	r24, 0x80	; 128
    4084:	38 2e       	mov	r3, r24
    4086:	02 c0       	rjmp	.+4      	; 0x408c <__RODATA_PM_OFFSET__+0x8c>
    4088:	88 36       	cpi	r24, 0x68	; 104
    408a:	41 f4       	brne	.+16     	; 0x409c <__RODATA_PM_OFFSET__+0x9c>
    408c:	f7 01       	movw	r30, r14
    408e:	93 fd       	sbrc	r25, 3
    4090:	85 91       	lpm	r24, Z+
    4092:	93 ff       	sbrs	r25, 3
    4094:	81 91       	ld	r24, Z+
    4096:	7f 01       	movw	r14, r30
    4098:	81 11       	cpse	r24, r1
    409a:	b3 cf       	rjmp	.-154    	; 0x4002 <__RODATA_PM_OFFSET__+0x2>
    409c:	98 2f       	mov	r25, r24
    409e:	9f 7d       	andi	r25, 0xDF	; 223
    40a0:	95 54       	subi	r25, 0x45	; 69
    40a2:	93 30       	cpi	r25, 0x03	; 3
    40a4:	28 f4       	brcc	.+10     	; 0x40b0 <__RODATA_PM_OFFSET__+0xb0>
    40a6:	0c 5f       	subi	r16, 0xFC	; 252
    40a8:	1f 4f       	sbci	r17, 0xFF	; 255
    40aa:	9f e3       	ldi	r25, 0x3F	; 63
    40ac:	99 83       	std	Y+1, r25	; 0x01
    40ae:	0d c0       	rjmp	.+26     	; 0x40ca <__RODATA_PM_OFFSET__+0xca>
    40b0:	83 36       	cpi	r24, 0x63	; 99
    40b2:	31 f0       	breq	.+12     	; 0x40c0 <__RODATA_PM_OFFSET__+0xc0>
    40b4:	83 37       	cpi	r24, 0x73	; 115
    40b6:	71 f0       	breq	.+28     	; 0x40d4 <__RODATA_PM_OFFSET__+0xd4>
    40b8:	83 35       	cpi	r24, 0x53	; 83
    40ba:	09 f0       	breq	.+2      	; 0x40be <__RODATA_PM_OFFSET__+0xbe>
    40bc:	59 c0       	rjmp	.+178    	; 0x4170 <__RODATA_PM_OFFSET__+0x170>
    40be:	21 c0       	rjmp	.+66     	; 0x4102 <__RODATA_PM_OFFSET__+0x102>
    40c0:	f8 01       	movw	r30, r16
    40c2:	80 81       	ld	r24, Z
    40c4:	89 83       	std	Y+1, r24	; 0x01
    40c6:	0e 5f       	subi	r16, 0xFE	; 254
    40c8:	1f 4f       	sbci	r17, 0xFF	; 255
    40ca:	88 24       	eor	r8, r8
    40cc:	83 94       	inc	r8
    40ce:	91 2c       	mov	r9, r1
    40d0:	53 01       	movw	r10, r6
    40d2:	13 c0       	rjmp	.+38     	; 0x40fa <__RODATA_PM_OFFSET__+0xfa>
    40d4:	28 01       	movw	r4, r16
    40d6:	f2 e0       	ldi	r31, 0x02	; 2
    40d8:	4f 0e       	add	r4, r31
    40da:	51 1c       	adc	r5, r1
    40dc:	f8 01       	movw	r30, r16
    40de:	a0 80       	ld	r10, Z
    40e0:	b1 80       	ldd	r11, Z+1	; 0x01
    40e2:	36 fe       	sbrs	r3, 6
    40e4:	03 c0       	rjmp	.+6      	; 0x40ec <__RODATA_PM_OFFSET__+0xec>
    40e6:	69 2d       	mov	r22, r9
    40e8:	70 e0       	ldi	r23, 0x00	; 0
    40ea:	02 c0       	rjmp	.+4      	; 0x40f0 <__RODATA_PM_OFFSET__+0xf0>
    40ec:	6f ef       	ldi	r22, 0xFF	; 255
    40ee:	7f ef       	ldi	r23, 0xFF	; 255
    40f0:	c5 01       	movw	r24, r10
    40f2:	0e 94 bf 21 	call	0x437e	; 0x437e <strnlen>
    40f6:	4c 01       	movw	r8, r24
    40f8:	82 01       	movw	r16, r4
    40fa:	f3 2d       	mov	r31, r3
    40fc:	ff 77       	andi	r31, 0x7F	; 127
    40fe:	3f 2e       	mov	r3, r31
    4100:	16 c0       	rjmp	.+44     	; 0x412e <__RODATA_PM_OFFSET__+0x12e>
    4102:	28 01       	movw	r4, r16
    4104:	22 e0       	ldi	r18, 0x02	; 2
    4106:	42 0e       	add	r4, r18
    4108:	51 1c       	adc	r5, r1
    410a:	f8 01       	movw	r30, r16
    410c:	a0 80       	ld	r10, Z
    410e:	b1 80       	ldd	r11, Z+1	; 0x01
    4110:	36 fe       	sbrs	r3, 6
    4112:	03 c0       	rjmp	.+6      	; 0x411a <__RODATA_PM_OFFSET__+0x11a>
    4114:	69 2d       	mov	r22, r9
    4116:	70 e0       	ldi	r23, 0x00	; 0
    4118:	02 c0       	rjmp	.+4      	; 0x411e <__RODATA_PM_OFFSET__+0x11e>
    411a:	6f ef       	ldi	r22, 0xFF	; 255
    411c:	7f ef       	ldi	r23, 0xFF	; 255
    411e:	c5 01       	movw	r24, r10
    4120:	0e 94 b4 21 	call	0x4368	; 0x4368 <strnlen_P>
    4124:	4c 01       	movw	r8, r24
    4126:	f3 2d       	mov	r31, r3
    4128:	f0 68       	ori	r31, 0x80	; 128
    412a:	3f 2e       	mov	r3, r31
    412c:	82 01       	movw	r16, r4
    412e:	33 fc       	sbrc	r3, 3
    4130:	1b c0       	rjmp	.+54     	; 0x4168 <__RODATA_PM_OFFSET__+0x168>
    4132:	82 2d       	mov	r24, r2
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	88 16       	cp	r8, r24
    4138:	99 06       	cpc	r9, r25
    413a:	b0 f4       	brcc	.+44     	; 0x4168 <__RODATA_PM_OFFSET__+0x168>
    413c:	b6 01       	movw	r22, r12
    413e:	80 e2       	ldi	r24, 0x20	; 32
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	0e 94 ca 21 	call	0x4394	; 0x4394 <fputc>
    4146:	2a 94       	dec	r2
    4148:	f4 cf       	rjmp	.-24     	; 0x4132 <__RODATA_PM_OFFSET__+0x132>
    414a:	f5 01       	movw	r30, r10
    414c:	37 fc       	sbrc	r3, 7
    414e:	85 91       	lpm	r24, Z+
    4150:	37 fe       	sbrs	r3, 7
    4152:	81 91       	ld	r24, Z+
    4154:	5f 01       	movw	r10, r30
    4156:	b6 01       	movw	r22, r12
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	0e 94 ca 21 	call	0x4394	; 0x4394 <fputc>
    415e:	21 10       	cpse	r2, r1
    4160:	2a 94       	dec	r2
    4162:	21 e0       	ldi	r18, 0x01	; 1
    4164:	82 1a       	sub	r8, r18
    4166:	91 08       	sbc	r9, r1
    4168:	81 14       	cp	r8, r1
    416a:	91 04       	cpc	r9, r1
    416c:	71 f7       	brne	.-36     	; 0x414a <__RODATA_PM_OFFSET__+0x14a>
    416e:	e8 c0       	rjmp	.+464    	; 0x4340 <__RODATA_PM_OFFSET__+0x340>
    4170:	84 36       	cpi	r24, 0x64	; 100
    4172:	11 f0       	breq	.+4      	; 0x4178 <__RODATA_PM_OFFSET__+0x178>
    4174:	89 36       	cpi	r24, 0x69	; 105
    4176:	41 f5       	brne	.+80     	; 0x41c8 <__RODATA_PM_OFFSET__+0x1c8>
    4178:	f8 01       	movw	r30, r16
    417a:	37 fe       	sbrs	r3, 7
    417c:	07 c0       	rjmp	.+14     	; 0x418c <__RODATA_PM_OFFSET__+0x18c>
    417e:	60 81       	ld	r22, Z
    4180:	71 81       	ldd	r23, Z+1	; 0x01
    4182:	82 81       	ldd	r24, Z+2	; 0x02
    4184:	93 81       	ldd	r25, Z+3	; 0x03
    4186:	0c 5f       	subi	r16, 0xFC	; 252
    4188:	1f 4f       	sbci	r17, 0xFF	; 255
    418a:	08 c0       	rjmp	.+16     	; 0x419c <__RODATA_PM_OFFSET__+0x19c>
    418c:	60 81       	ld	r22, Z
    418e:	71 81       	ldd	r23, Z+1	; 0x01
    4190:	07 2e       	mov	r0, r23
    4192:	00 0c       	add	r0, r0
    4194:	88 0b       	sbc	r24, r24
    4196:	99 0b       	sbc	r25, r25
    4198:	0e 5f       	subi	r16, 0xFE	; 254
    419a:	1f 4f       	sbci	r17, 0xFF	; 255
    419c:	f3 2d       	mov	r31, r3
    419e:	ff 76       	andi	r31, 0x6F	; 111
    41a0:	3f 2e       	mov	r3, r31
    41a2:	97 ff       	sbrs	r25, 7
    41a4:	09 c0       	rjmp	.+18     	; 0x41b8 <__RODATA_PM_OFFSET__+0x1b8>
    41a6:	90 95       	com	r25
    41a8:	80 95       	com	r24
    41aa:	70 95       	com	r23
    41ac:	61 95       	neg	r22
    41ae:	7f 4f       	sbci	r23, 0xFF	; 255
    41b0:	8f 4f       	sbci	r24, 0xFF	; 255
    41b2:	9f 4f       	sbci	r25, 0xFF	; 255
    41b4:	f0 68       	ori	r31, 0x80	; 128
    41b6:	3f 2e       	mov	r3, r31
    41b8:	2a e0       	ldi	r18, 0x0A	; 10
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	a3 01       	movw	r20, r6
    41be:	0e 94 06 22 	call	0x440c	; 0x440c <__ultoa_invert>
    41c2:	88 2e       	mov	r8, r24
    41c4:	86 18       	sub	r8, r6
    41c6:	45 c0       	rjmp	.+138    	; 0x4252 <__RODATA_PM_OFFSET__+0x252>
    41c8:	85 37       	cpi	r24, 0x75	; 117
    41ca:	31 f4       	brne	.+12     	; 0x41d8 <__RODATA_PM_OFFSET__+0x1d8>
    41cc:	23 2d       	mov	r18, r3
    41ce:	2f 7e       	andi	r18, 0xEF	; 239
    41d0:	b2 2e       	mov	r11, r18
    41d2:	2a e0       	ldi	r18, 0x0A	; 10
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	25 c0       	rjmp	.+74     	; 0x4222 <__RODATA_PM_OFFSET__+0x222>
    41d8:	93 2d       	mov	r25, r3
    41da:	99 7f       	andi	r25, 0xF9	; 249
    41dc:	b9 2e       	mov	r11, r25
    41de:	8f 36       	cpi	r24, 0x6F	; 111
    41e0:	c1 f0       	breq	.+48     	; 0x4212 <__RODATA_PM_OFFSET__+0x212>
    41e2:	18 f4       	brcc	.+6      	; 0x41ea <__RODATA_PM_OFFSET__+0x1ea>
    41e4:	88 35       	cpi	r24, 0x58	; 88
    41e6:	79 f0       	breq	.+30     	; 0x4206 <__RODATA_PM_OFFSET__+0x206>
    41e8:	b5 c0       	rjmp	.+362    	; 0x4354 <__RODATA_PM_OFFSET__+0x354>
    41ea:	80 37       	cpi	r24, 0x70	; 112
    41ec:	19 f0       	breq	.+6      	; 0x41f4 <__RODATA_PM_OFFSET__+0x1f4>
    41ee:	88 37       	cpi	r24, 0x78	; 120
    41f0:	21 f0       	breq	.+8      	; 0x41fa <__RODATA_PM_OFFSET__+0x1fa>
    41f2:	b0 c0       	rjmp	.+352    	; 0x4354 <__RODATA_PM_OFFSET__+0x354>
    41f4:	e9 2f       	mov	r30, r25
    41f6:	e0 61       	ori	r30, 0x10	; 16
    41f8:	be 2e       	mov	r11, r30
    41fa:	b4 fe       	sbrs	r11, 4
    41fc:	0d c0       	rjmp	.+26     	; 0x4218 <__RODATA_PM_OFFSET__+0x218>
    41fe:	fb 2d       	mov	r31, r11
    4200:	f4 60       	ori	r31, 0x04	; 4
    4202:	bf 2e       	mov	r11, r31
    4204:	09 c0       	rjmp	.+18     	; 0x4218 <__RODATA_PM_OFFSET__+0x218>
    4206:	34 fe       	sbrs	r3, 4
    4208:	0a c0       	rjmp	.+20     	; 0x421e <__RODATA_PM_OFFSET__+0x21e>
    420a:	29 2f       	mov	r18, r25
    420c:	26 60       	ori	r18, 0x06	; 6
    420e:	b2 2e       	mov	r11, r18
    4210:	06 c0       	rjmp	.+12     	; 0x421e <__RODATA_PM_OFFSET__+0x21e>
    4212:	28 e0       	ldi	r18, 0x08	; 8
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	05 c0       	rjmp	.+10     	; 0x4222 <__RODATA_PM_OFFSET__+0x222>
    4218:	20 e1       	ldi	r18, 0x10	; 16
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	02 c0       	rjmp	.+4      	; 0x4222 <__RODATA_PM_OFFSET__+0x222>
    421e:	20 e1       	ldi	r18, 0x10	; 16
    4220:	32 e0       	ldi	r19, 0x02	; 2
    4222:	f8 01       	movw	r30, r16
    4224:	b7 fe       	sbrs	r11, 7
    4226:	07 c0       	rjmp	.+14     	; 0x4236 <__RODATA_PM_OFFSET__+0x236>
    4228:	60 81       	ld	r22, Z
    422a:	71 81       	ldd	r23, Z+1	; 0x01
    422c:	82 81       	ldd	r24, Z+2	; 0x02
    422e:	93 81       	ldd	r25, Z+3	; 0x03
    4230:	0c 5f       	subi	r16, 0xFC	; 252
    4232:	1f 4f       	sbci	r17, 0xFF	; 255
    4234:	06 c0       	rjmp	.+12     	; 0x4242 <__RODATA_PM_OFFSET__+0x242>
    4236:	60 81       	ld	r22, Z
    4238:	71 81       	ldd	r23, Z+1	; 0x01
    423a:	80 e0       	ldi	r24, 0x00	; 0
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	0e 5f       	subi	r16, 0xFE	; 254
    4240:	1f 4f       	sbci	r17, 0xFF	; 255
    4242:	a3 01       	movw	r20, r6
    4244:	0e 94 06 22 	call	0x440c	; 0x440c <__ultoa_invert>
    4248:	88 2e       	mov	r8, r24
    424a:	86 18       	sub	r8, r6
    424c:	fb 2d       	mov	r31, r11
    424e:	ff 77       	andi	r31, 0x7F	; 127
    4250:	3f 2e       	mov	r3, r31
    4252:	36 fe       	sbrs	r3, 6
    4254:	0d c0       	rjmp	.+26     	; 0x4270 <__RODATA_PM_OFFSET__+0x270>
    4256:	23 2d       	mov	r18, r3
    4258:	2e 7f       	andi	r18, 0xFE	; 254
    425a:	a2 2e       	mov	r10, r18
    425c:	89 14       	cp	r8, r9
    425e:	58 f4       	brcc	.+22     	; 0x4276 <__RODATA_PM_OFFSET__+0x276>
    4260:	34 fe       	sbrs	r3, 4
    4262:	0b c0       	rjmp	.+22     	; 0x427a <__RODATA_PM_OFFSET__+0x27a>
    4264:	32 fc       	sbrc	r3, 2
    4266:	09 c0       	rjmp	.+18     	; 0x427a <__RODATA_PM_OFFSET__+0x27a>
    4268:	83 2d       	mov	r24, r3
    426a:	8e 7e       	andi	r24, 0xEE	; 238
    426c:	a8 2e       	mov	r10, r24
    426e:	05 c0       	rjmp	.+10     	; 0x427a <__RODATA_PM_OFFSET__+0x27a>
    4270:	b8 2c       	mov	r11, r8
    4272:	a3 2c       	mov	r10, r3
    4274:	03 c0       	rjmp	.+6      	; 0x427c <__RODATA_PM_OFFSET__+0x27c>
    4276:	b8 2c       	mov	r11, r8
    4278:	01 c0       	rjmp	.+2      	; 0x427c <__RODATA_PM_OFFSET__+0x27c>
    427a:	b9 2c       	mov	r11, r9
    427c:	a4 fe       	sbrs	r10, 4
    427e:	0f c0       	rjmp	.+30     	; 0x429e <__RODATA_PM_OFFSET__+0x29e>
    4280:	fe 01       	movw	r30, r28
    4282:	e8 0d       	add	r30, r8
    4284:	f1 1d       	adc	r31, r1
    4286:	80 81       	ld	r24, Z
    4288:	80 33       	cpi	r24, 0x30	; 48
    428a:	21 f4       	brne	.+8      	; 0x4294 <__RODATA_PM_OFFSET__+0x294>
    428c:	9a 2d       	mov	r25, r10
    428e:	99 7e       	andi	r25, 0xE9	; 233
    4290:	a9 2e       	mov	r10, r25
    4292:	09 c0       	rjmp	.+18     	; 0x42a6 <__RODATA_PM_OFFSET__+0x2a6>
    4294:	a2 fe       	sbrs	r10, 2
    4296:	06 c0       	rjmp	.+12     	; 0x42a4 <__RODATA_PM_OFFSET__+0x2a4>
    4298:	b3 94       	inc	r11
    429a:	b3 94       	inc	r11
    429c:	04 c0       	rjmp	.+8      	; 0x42a6 <__RODATA_PM_OFFSET__+0x2a6>
    429e:	8a 2d       	mov	r24, r10
    42a0:	86 78       	andi	r24, 0x86	; 134
    42a2:	09 f0       	breq	.+2      	; 0x42a6 <__RODATA_PM_OFFSET__+0x2a6>
    42a4:	b3 94       	inc	r11
    42a6:	a3 fc       	sbrc	r10, 3
    42a8:	11 c0       	rjmp	.+34     	; 0x42cc <__RODATA_PM_OFFSET__+0x2cc>
    42aa:	a0 fe       	sbrs	r10, 0
    42ac:	06 c0       	rjmp	.+12     	; 0x42ba <__RODATA_PM_OFFSET__+0x2ba>
    42ae:	b2 14       	cp	r11, r2
    42b0:	88 f4       	brcc	.+34     	; 0x42d4 <__RODATA_PM_OFFSET__+0x2d4>
    42b2:	28 0c       	add	r2, r8
    42b4:	92 2c       	mov	r9, r2
    42b6:	9b 18       	sub	r9, r11
    42b8:	0e c0       	rjmp	.+28     	; 0x42d6 <__RODATA_PM_OFFSET__+0x2d6>
    42ba:	b2 14       	cp	r11, r2
    42bc:	60 f4       	brcc	.+24     	; 0x42d6 <__RODATA_PM_OFFSET__+0x2d6>
    42be:	b6 01       	movw	r22, r12
    42c0:	80 e2       	ldi	r24, 0x20	; 32
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	0e 94 ca 21 	call	0x4394	; 0x4394 <fputc>
    42c8:	b3 94       	inc	r11
    42ca:	f7 cf       	rjmp	.-18     	; 0x42ba <__RODATA_PM_OFFSET__+0x2ba>
    42cc:	b2 14       	cp	r11, r2
    42ce:	18 f4       	brcc	.+6      	; 0x42d6 <__RODATA_PM_OFFSET__+0x2d6>
    42d0:	2b 18       	sub	r2, r11
    42d2:	02 c0       	rjmp	.+4      	; 0x42d8 <__RODATA_PM_OFFSET__+0x2d8>
    42d4:	98 2c       	mov	r9, r8
    42d6:	21 2c       	mov	r2, r1
    42d8:	a4 fe       	sbrs	r10, 4
    42da:	10 c0       	rjmp	.+32     	; 0x42fc <__RODATA_PM_OFFSET__+0x2fc>
    42dc:	b6 01       	movw	r22, r12
    42de:	80 e3       	ldi	r24, 0x30	; 48
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	0e 94 ca 21 	call	0x4394	; 0x4394 <fputc>
    42e6:	a2 fe       	sbrs	r10, 2
    42e8:	17 c0       	rjmp	.+46     	; 0x4318 <__RODATA_PM_OFFSET__+0x318>
    42ea:	a1 fc       	sbrc	r10, 1
    42ec:	03 c0       	rjmp	.+6      	; 0x42f4 <__RODATA_PM_OFFSET__+0x2f4>
    42ee:	88 e7       	ldi	r24, 0x78	; 120
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	02 c0       	rjmp	.+4      	; 0x42f8 <__RODATA_PM_OFFSET__+0x2f8>
    42f4:	88 e5       	ldi	r24, 0x58	; 88
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	b6 01       	movw	r22, r12
    42fa:	0c c0       	rjmp	.+24     	; 0x4314 <__RODATA_PM_OFFSET__+0x314>
    42fc:	8a 2d       	mov	r24, r10
    42fe:	86 78       	andi	r24, 0x86	; 134
    4300:	59 f0       	breq	.+22     	; 0x4318 <__RODATA_PM_OFFSET__+0x318>
    4302:	a1 fe       	sbrs	r10, 1
    4304:	02 c0       	rjmp	.+4      	; 0x430a <__RODATA_PM_OFFSET__+0x30a>
    4306:	8b e2       	ldi	r24, 0x2B	; 43
    4308:	01 c0       	rjmp	.+2      	; 0x430c <__RODATA_PM_OFFSET__+0x30c>
    430a:	80 e2       	ldi	r24, 0x20	; 32
    430c:	a7 fc       	sbrc	r10, 7
    430e:	8d e2       	ldi	r24, 0x2D	; 45
    4310:	b6 01       	movw	r22, r12
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	0e 94 ca 21 	call	0x4394	; 0x4394 <fputc>
    4318:	89 14       	cp	r8, r9
    431a:	38 f4       	brcc	.+14     	; 0x432a <__RODATA_PM_OFFSET__+0x32a>
    431c:	b6 01       	movw	r22, r12
    431e:	80 e3       	ldi	r24, 0x30	; 48
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	0e 94 ca 21 	call	0x4394	; 0x4394 <fputc>
    4326:	9a 94       	dec	r9
    4328:	f7 cf       	rjmp	.-18     	; 0x4318 <__RODATA_PM_OFFSET__+0x318>
    432a:	8a 94       	dec	r8
    432c:	f3 01       	movw	r30, r6
    432e:	e8 0d       	add	r30, r8
    4330:	f1 1d       	adc	r31, r1
    4332:	80 81       	ld	r24, Z
    4334:	b6 01       	movw	r22, r12
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	0e 94 ca 21 	call	0x4394	; 0x4394 <fputc>
    433c:	81 10       	cpse	r8, r1
    433e:	f5 cf       	rjmp	.-22     	; 0x432a <__RODATA_PM_OFFSET__+0x32a>
    4340:	22 20       	and	r2, r2
    4342:	09 f4       	brne	.+2      	; 0x4346 <__RODATA_PM_OFFSET__+0x346>
    4344:	42 ce       	rjmp	.-892    	; 0x3fca <vfprintf+0x24>
    4346:	b6 01       	movw	r22, r12
    4348:	80 e2       	ldi	r24, 0x20	; 32
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	0e 94 ca 21 	call	0x4394	; 0x4394 <fputc>
    4350:	2a 94       	dec	r2
    4352:	f6 cf       	rjmp	.-20     	; 0x4340 <__RODATA_PM_OFFSET__+0x340>
    4354:	f6 01       	movw	r30, r12
    4356:	86 81       	ldd	r24, Z+6	; 0x06
    4358:	97 81       	ldd	r25, Z+7	; 0x07
    435a:	02 c0       	rjmp	.+4      	; 0x4360 <__RODATA_PM_OFFSET__+0x360>
    435c:	8f ef       	ldi	r24, 0xFF	; 255
    435e:	9f ef       	ldi	r25, 0xFF	; 255
    4360:	2b 96       	adiw	r28, 0x0b	; 11
    4362:	e2 e1       	ldi	r30, 0x12	; 18
    4364:	0c 94 7d 22 	jmp	0x44fa	; 0x44fa <__epilogue_restores__>

00004368 <strnlen_P>:
    4368:	fc 01       	movw	r30, r24
    436a:	05 90       	lpm	r0, Z+
    436c:	61 50       	subi	r22, 0x01	; 1
    436e:	70 40       	sbci	r23, 0x00	; 0
    4370:	01 10       	cpse	r0, r1
    4372:	d8 f7       	brcc	.-10     	; 0x436a <strnlen_P+0x2>
    4374:	80 95       	com	r24
    4376:	90 95       	com	r25
    4378:	8e 0f       	add	r24, r30
    437a:	9f 1f       	adc	r25, r31
    437c:	08 95       	ret

0000437e <strnlen>:
    437e:	fc 01       	movw	r30, r24
    4380:	61 50       	subi	r22, 0x01	; 1
    4382:	70 40       	sbci	r23, 0x00	; 0
    4384:	01 90       	ld	r0, Z+
    4386:	01 10       	cpse	r0, r1
    4388:	d8 f7       	brcc	.-10     	; 0x4380 <strnlen+0x2>
    438a:	80 95       	com	r24
    438c:	90 95       	com	r25
    438e:	8e 0f       	add	r24, r30
    4390:	9f 1f       	adc	r25, r31
    4392:	08 95       	ret

00004394 <fputc>:
    4394:	0f 93       	push	r16
    4396:	1f 93       	push	r17
    4398:	cf 93       	push	r28
    439a:	df 93       	push	r29
    439c:	fb 01       	movw	r30, r22
    439e:	23 81       	ldd	r18, Z+3	; 0x03
    43a0:	21 fd       	sbrc	r18, 1
    43a2:	03 c0       	rjmp	.+6      	; 0x43aa <fputc+0x16>
    43a4:	8f ef       	ldi	r24, 0xFF	; 255
    43a6:	9f ef       	ldi	r25, 0xFF	; 255
    43a8:	2c c0       	rjmp	.+88     	; 0x4402 <fputc+0x6e>
    43aa:	22 ff       	sbrs	r18, 2
    43ac:	16 c0       	rjmp	.+44     	; 0x43da <fputc+0x46>
    43ae:	46 81       	ldd	r20, Z+6	; 0x06
    43b0:	57 81       	ldd	r21, Z+7	; 0x07
    43b2:	24 81       	ldd	r18, Z+4	; 0x04
    43b4:	35 81       	ldd	r19, Z+5	; 0x05
    43b6:	42 17       	cp	r20, r18
    43b8:	53 07       	cpc	r21, r19
    43ba:	44 f4       	brge	.+16     	; 0x43cc <fputc+0x38>
    43bc:	a0 81       	ld	r26, Z
    43be:	b1 81       	ldd	r27, Z+1	; 0x01
    43c0:	9d 01       	movw	r18, r26
    43c2:	2f 5f       	subi	r18, 0xFF	; 255
    43c4:	3f 4f       	sbci	r19, 0xFF	; 255
    43c6:	20 83       	st	Z, r18
    43c8:	31 83       	std	Z+1, r19	; 0x01
    43ca:	8c 93       	st	X, r24
    43cc:	26 81       	ldd	r18, Z+6	; 0x06
    43ce:	37 81       	ldd	r19, Z+7	; 0x07
    43d0:	2f 5f       	subi	r18, 0xFF	; 255
    43d2:	3f 4f       	sbci	r19, 0xFF	; 255
    43d4:	26 83       	std	Z+6, r18	; 0x06
    43d6:	37 83       	std	Z+7, r19	; 0x07
    43d8:	14 c0       	rjmp	.+40     	; 0x4402 <fputc+0x6e>
    43da:	8b 01       	movw	r16, r22
    43dc:	ec 01       	movw	r28, r24
    43de:	fb 01       	movw	r30, r22
    43e0:	00 84       	ldd	r0, Z+8	; 0x08
    43e2:	f1 85       	ldd	r31, Z+9	; 0x09
    43e4:	e0 2d       	mov	r30, r0
    43e6:	09 95       	icall
    43e8:	89 2b       	or	r24, r25
    43ea:	e1 f6       	brne	.-72     	; 0x43a4 <fputc+0x10>
    43ec:	d8 01       	movw	r26, r16
    43ee:	16 96       	adiw	r26, 0x06	; 6
    43f0:	8d 91       	ld	r24, X+
    43f2:	9c 91       	ld	r25, X
    43f4:	17 97       	sbiw	r26, 0x07	; 7
    43f6:	01 96       	adiw	r24, 0x01	; 1
    43f8:	16 96       	adiw	r26, 0x06	; 6
    43fa:	8d 93       	st	X+, r24
    43fc:	9c 93       	st	X, r25
    43fe:	17 97       	sbiw	r26, 0x07	; 7
    4400:	ce 01       	movw	r24, r28
    4402:	df 91       	pop	r29
    4404:	cf 91       	pop	r28
    4406:	1f 91       	pop	r17
    4408:	0f 91       	pop	r16
    440a:	08 95       	ret

0000440c <__ultoa_invert>:
    440c:	fa 01       	movw	r30, r20
    440e:	aa 27       	eor	r26, r26
    4410:	28 30       	cpi	r18, 0x08	; 8
    4412:	51 f1       	breq	.+84     	; 0x4468 <__ultoa_invert+0x5c>
    4414:	20 31       	cpi	r18, 0x10	; 16
    4416:	81 f1       	breq	.+96     	; 0x4478 <__ultoa_invert+0x6c>
    4418:	e8 94       	clt
    441a:	6f 93       	push	r22
    441c:	6e 7f       	andi	r22, 0xFE	; 254
    441e:	6e 5f       	subi	r22, 0xFE	; 254
    4420:	7f 4f       	sbci	r23, 0xFF	; 255
    4422:	8f 4f       	sbci	r24, 0xFF	; 255
    4424:	9f 4f       	sbci	r25, 0xFF	; 255
    4426:	af 4f       	sbci	r26, 0xFF	; 255
    4428:	b1 e0       	ldi	r27, 0x01	; 1
    442a:	3e d0       	rcall	.+124    	; 0x44a8 <__ultoa_invert+0x9c>
    442c:	b4 e0       	ldi	r27, 0x04	; 4
    442e:	3c d0       	rcall	.+120    	; 0x44a8 <__ultoa_invert+0x9c>
    4430:	67 0f       	add	r22, r23
    4432:	78 1f       	adc	r23, r24
    4434:	89 1f       	adc	r24, r25
    4436:	9a 1f       	adc	r25, r26
    4438:	a1 1d       	adc	r26, r1
    443a:	68 0f       	add	r22, r24
    443c:	79 1f       	adc	r23, r25
    443e:	8a 1f       	adc	r24, r26
    4440:	91 1d       	adc	r25, r1
    4442:	a1 1d       	adc	r26, r1
    4444:	6a 0f       	add	r22, r26
    4446:	71 1d       	adc	r23, r1
    4448:	81 1d       	adc	r24, r1
    444a:	91 1d       	adc	r25, r1
    444c:	a1 1d       	adc	r26, r1
    444e:	20 d0       	rcall	.+64     	; 0x4490 <__ultoa_invert+0x84>
    4450:	09 f4       	brne	.+2      	; 0x4454 <__ultoa_invert+0x48>
    4452:	68 94       	set
    4454:	3f 91       	pop	r19
    4456:	2a e0       	ldi	r18, 0x0A	; 10
    4458:	26 9f       	mul	r18, r22
    445a:	11 24       	eor	r1, r1
    445c:	30 19       	sub	r19, r0
    445e:	30 5d       	subi	r19, 0xD0	; 208
    4460:	31 93       	st	Z+, r19
    4462:	de f6       	brtc	.-74     	; 0x441a <__ultoa_invert+0xe>
    4464:	cf 01       	movw	r24, r30
    4466:	08 95       	ret
    4468:	46 2f       	mov	r20, r22
    446a:	47 70       	andi	r20, 0x07	; 7
    446c:	40 5d       	subi	r20, 0xD0	; 208
    446e:	41 93       	st	Z+, r20
    4470:	b3 e0       	ldi	r27, 0x03	; 3
    4472:	0f d0       	rcall	.+30     	; 0x4492 <__ultoa_invert+0x86>
    4474:	c9 f7       	brne	.-14     	; 0x4468 <__ultoa_invert+0x5c>
    4476:	f6 cf       	rjmp	.-20     	; 0x4464 <__ultoa_invert+0x58>
    4478:	46 2f       	mov	r20, r22
    447a:	4f 70       	andi	r20, 0x0F	; 15
    447c:	40 5d       	subi	r20, 0xD0	; 208
    447e:	4a 33       	cpi	r20, 0x3A	; 58
    4480:	18 f0       	brcs	.+6      	; 0x4488 <__ultoa_invert+0x7c>
    4482:	49 5d       	subi	r20, 0xD9	; 217
    4484:	31 fd       	sbrc	r19, 1
    4486:	40 52       	subi	r20, 0x20	; 32
    4488:	41 93       	st	Z+, r20
    448a:	02 d0       	rcall	.+4      	; 0x4490 <__ultoa_invert+0x84>
    448c:	a9 f7       	brne	.-22     	; 0x4478 <__ultoa_invert+0x6c>
    448e:	ea cf       	rjmp	.-44     	; 0x4464 <__ultoa_invert+0x58>
    4490:	b4 e0       	ldi	r27, 0x04	; 4
    4492:	a6 95       	lsr	r26
    4494:	97 95       	ror	r25
    4496:	87 95       	ror	r24
    4498:	77 95       	ror	r23
    449a:	67 95       	ror	r22
    449c:	ba 95       	dec	r27
    449e:	c9 f7       	brne	.-14     	; 0x4492 <__ultoa_invert+0x86>
    44a0:	00 97       	sbiw	r24, 0x00	; 0
    44a2:	61 05       	cpc	r22, r1
    44a4:	71 05       	cpc	r23, r1
    44a6:	08 95       	ret
    44a8:	9b 01       	movw	r18, r22
    44aa:	ac 01       	movw	r20, r24
    44ac:	0a 2e       	mov	r0, r26
    44ae:	06 94       	lsr	r0
    44b0:	57 95       	ror	r21
    44b2:	47 95       	ror	r20
    44b4:	37 95       	ror	r19
    44b6:	27 95       	ror	r18
    44b8:	ba 95       	dec	r27
    44ba:	c9 f7       	brne	.-14     	; 0x44ae <__ultoa_invert+0xa2>
    44bc:	62 0f       	add	r22, r18
    44be:	73 1f       	adc	r23, r19
    44c0:	84 1f       	adc	r24, r20
    44c2:	95 1f       	adc	r25, r21
    44c4:	a0 1d       	adc	r26, r0
    44c6:	08 95       	ret

000044c8 <__prologue_saves__>:
    44c8:	2f 92       	push	r2
    44ca:	3f 92       	push	r3
    44cc:	4f 92       	push	r4
    44ce:	5f 92       	push	r5
    44d0:	6f 92       	push	r6
    44d2:	7f 92       	push	r7
    44d4:	8f 92       	push	r8
    44d6:	9f 92       	push	r9
    44d8:	af 92       	push	r10
    44da:	bf 92       	push	r11
    44dc:	cf 92       	push	r12
    44de:	df 92       	push	r13
    44e0:	ef 92       	push	r14
    44e2:	ff 92       	push	r15
    44e4:	0f 93       	push	r16
    44e6:	1f 93       	push	r17
    44e8:	cf 93       	push	r28
    44ea:	df 93       	push	r29
    44ec:	cd b7       	in	r28, 0x3d	; 61
    44ee:	de b7       	in	r29, 0x3e	; 62
    44f0:	ca 1b       	sub	r28, r26
    44f2:	db 0b       	sbc	r29, r27
    44f4:	cd bf       	out	0x3d, r28	; 61
    44f6:	de bf       	out	0x3e, r29	; 62
    44f8:	09 94       	ijmp

000044fa <__epilogue_restores__>:
    44fa:	2a 88       	ldd	r2, Y+18	; 0x12
    44fc:	39 88       	ldd	r3, Y+17	; 0x11
    44fe:	48 88       	ldd	r4, Y+16	; 0x10
    4500:	5f 84       	ldd	r5, Y+15	; 0x0f
    4502:	6e 84       	ldd	r6, Y+14	; 0x0e
    4504:	7d 84       	ldd	r7, Y+13	; 0x0d
    4506:	8c 84       	ldd	r8, Y+12	; 0x0c
    4508:	9b 84       	ldd	r9, Y+11	; 0x0b
    450a:	aa 84       	ldd	r10, Y+10	; 0x0a
    450c:	b9 84       	ldd	r11, Y+9	; 0x09
    450e:	c8 84       	ldd	r12, Y+8	; 0x08
    4510:	df 80       	ldd	r13, Y+7	; 0x07
    4512:	ee 80       	ldd	r14, Y+6	; 0x06
    4514:	fd 80       	ldd	r15, Y+5	; 0x05
    4516:	0c 81       	ldd	r16, Y+4	; 0x04
    4518:	1b 81       	ldd	r17, Y+3	; 0x03
    451a:	aa 81       	ldd	r26, Y+2	; 0x02
    451c:	b9 81       	ldd	r27, Y+1	; 0x01
    451e:	ce 0f       	add	r28, r30
    4520:	d1 1d       	adc	r29, r1
    4522:	cd bf       	out	0x3d, r28	; 61
    4524:	de bf       	out	0x3e, r29	; 62
    4526:	ed 01       	movw	r28, r26
    4528:	08 95       	ret

0000452a <_exit>:
    452a:	f8 94       	cli

0000452c <__stop_program>:
    452c:	ff cf       	rjmp	.-2      	; 0x452c <__stop_program>
