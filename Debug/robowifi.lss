
robowifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000240  00802800  00007f3c  00007ff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007d84  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0000bd84  00007d84  00007e38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000998  00802a40  00802a40  00008230  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00008230  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000828c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000d60  00000000  00000000  000082d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e8e6  00000000  00000000  00009030  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004765  00000000  00000000  00017916  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008a6a  00000000  00000000  0001c07b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000374c  00000000  00000000  00024ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000066ac  00000000  00000000  00028234  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000765d  00000000  00000000  0002e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d10  00000000  00000000  00035f3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__ctors_end>
       4:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       8:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       c:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__vector_3>
      10:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      14:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      18:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      1c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      20:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      24:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      28:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      2c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      30:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      34:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      38:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      3c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      40:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      44:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      48:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      4c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      50:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      54:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      58:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      5c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      60:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__vector_24>
      64:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      68:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      6c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      70:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      74:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      78:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      7c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      80:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      84:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      88:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      8c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      90:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      94:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      98:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      9c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      a0:	72 1a       	sub	r7, r18
      a2:	6b 1a       	sub	r6, r27
      a4:	80 1a       	sub	r8, r16
      a6:	79 1a       	sub	r7, r25
      a8:	95 1a       	sub	r9, r21
      aa:	87 1a       	sub	r8, r23
      ac:	8e 1a       	sub	r8, r30
      ae:	35 29       	or	r19, r5
      b0:	35 29       	or	r19, r5
      b2:	7f 29       	or	r23, r15
      b4:	0b 29       	or	r16, r11
      b6:	20 29       	or	r18, r0
      b8:	26 29       	or	r18, r6
      ba:	56 29       	or	r21, r6
      bc:	56 29       	or	r21, r6
      be:	af 29       	or	r26, r15
      c0:	f5 28       	or	r15, r5
      c2:	e1 29       	or	r30, r1
      c4:	e1 29       	or	r30, r1
      c6:	e1 29       	or	r30, r1
      c8:	e1 29       	or	r30, r1
      ca:	2c 29       	or	r18, r12

000000cc <__trampolines_end>:
      cc:	00 09       	sbc	r16, r0
      ce:	12 1b       	sub	r17, r18
      d0:	24 2d       	mov	r18, r4
      d2:	36 3f       	cpi	r19, 0xF6	; 246
      d4:	48 41       	sbci	r20, 0x18	; 24
      d6:	5a 53       	subi	r21, 0x3A	; 58
      d8:	6c 65       	ori	r22, 0x5C	; 92
      da:	7e 77       	andi	r23, 0x7E	; 126
      dc:	19 10       	cpse	r1, r9
      de:	0b 02       	muls	r16, r27
      e0:	3d 34       	cpi	r19, 0x4D	; 77
      e2:	2f 26       	eor	r2, r31
      e4:	51 58       	subi	r21, 0x81	; 129
      e6:	43 4a       	sbci	r20, 0xA3	; 163
      e8:	75 7c       	andi	r23, 0xC5	; 197
      ea:	67 6e       	ori	r22, 0xE7	; 231
      ec:	32 3b       	cpi	r19, 0xB2	; 178
      ee:	20 29       	or	r18, r0
      f0:	16 1f       	adc	r17, r22
      f2:	04 0d       	add	r16, r4
      f4:	7a 73       	andi	r23, 0x3A	; 58
      f6:	68 61       	ori	r22, 0x18	; 24
      f8:	5e 57       	subi	r21, 0x7E	; 126
      fa:	4c 45       	sbci	r20, 0x5C	; 92
      fc:	2b 22       	and	r2, r27
      fe:	39 30       	cpi	r19, 0x09	; 9
     100:	0f 06       	cpc	r0, r31
     102:	1d 14       	cp	r1, r13
     104:	63 6a       	ori	r22, 0xA3	; 163
     106:	71 78       	andi	r23, 0x81	; 129
     108:	47 4e       	sbci	r20, 0xE7	; 231
     10a:	55 5c       	subi	r21, 0xC5	; 197
     10c:	64 6d       	ori	r22, 0xD4	; 212
     10e:	76 7f       	andi	r23, 0xF6	; 246
     110:	40 49       	sbci	r20, 0x90	; 144
     112:	52 5b       	subi	r21, 0xB2	; 178
     114:	2c 25       	eor	r18, r12
     116:	3e 37       	cpi	r19, 0x7E	; 126
     118:	08 01       	movw	r0, r16
     11a:	1a 13       	cpse	r17, r26
     11c:	7d 74       	andi	r23, 0x4D	; 77
     11e:	6f 66       	ori	r22, 0x6F	; 111
     120:	59 50       	subi	r21, 0x09	; 9
     122:	4b 42       	sbci	r20, 0x2B	; 43
     124:	35 3c       	cpi	r19, 0xC5	; 197
     126:	27 2e       	mov	r2, r23
     128:	11 18       	sub	r1, r1
     12a:	03 0a       	sbc	r0, r19
     12c:	56 5f       	subi	r21, 0xF6	; 246
     12e:	44 4d       	sbci	r20, 0xD4	; 212
     130:	72 7b       	andi	r23, 0xB2	; 178
     132:	60 69       	ori	r22, 0x90	; 144
     134:	1e 17       	cp	r17, r30
     136:	0c 05       	cpc	r16, r12
     138:	3a 33       	cpi	r19, 0x3A	; 58
     13a:	28 21       	and	r18, r8
     13c:	4f 46       	sbci	r20, 0x6F	; 111
     13e:	5d 54       	subi	r21, 0x4D	; 77
     140:	6b 62       	ori	r22, 0x2B	; 43
     142:	79 70       	andi	r23, 0x09	; 9
     144:	07 0e       	add	r0, r23
     146:	15 1c       	adc	r1, r5
     148:	23 2a       	or	r2, r19
     14a:	31 38       	cpi	r19, 0x81	; 129
     14c:	41 48       	sbci	r20, 0x81	; 129
     14e:	53 5a       	subi	r21, 0xA3	; 163
     150:	65 6c       	ori	r22, 0xC5	; 197
     152:	77 7e       	andi	r23, 0xE7	; 231
     154:	09 00       	.word	0x0009	; ????
     156:	1b 12       	cpse	r1, r27
     158:	2d 24       	eor	r2, r13
     15a:	3f 36       	cpi	r19, 0x6F	; 111
     15c:	58 51       	subi	r21, 0x18	; 24
     15e:	4a 43       	sbci	r20, 0x3A	; 58
     160:	7c 75       	andi	r23, 0x5C	; 92
     162:	6e 67       	ori	r22, 0x7E	; 126
     164:	10 19       	sub	r17, r0
     166:	02 0b       	sbc	r16, r18
     168:	34 3d       	cpi	r19, 0xD4	; 212
     16a:	26 2f       	mov	r18, r22
     16c:	73 7a       	andi	r23, 0xA3	; 163
     16e:	61 68       	ori	r22, 0x81	; 129
     170:	57 5e       	subi	r21, 0xE7	; 231
     172:	45 4c       	sbci	r20, 0xC5	; 197
     174:	3b 32       	cpi	r19, 0x2B	; 43
     176:	29 20       	and	r2, r9
     178:	1f 16       	cp	r1, r31
     17a:	0d 04       	cpc	r0, r13
     17c:	6a 63       	ori	r22, 0x3A	; 58
     17e:	78 71       	andi	r23, 0x18	; 24
     180:	4e 47       	sbci	r20, 0x7E	; 126
     182:	5c 55       	subi	r21, 0x5C	; 92
     184:	22 2b       	or	r18, r18
     186:	30 39       	cpi	r19, 0x90	; 144
     188:	06 0f       	add	r16, r22
     18a:	14 1d       	adc	r17, r4
     18c:	25 2c       	mov	r2, r5
     18e:	37 3e       	cpi	r19, 0xE7	; 231
     190:	01 08       	sbc	r0, r1
     192:	13 1a       	sub	r1, r19
     194:	6d 64       	ori	r22, 0x4D	; 77
     196:	7f 76       	andi	r23, 0x6F	; 111
     198:	49 40       	sbci	r20, 0x09	; 9
     19a:	5b 52       	subi	r21, 0x2B	; 43
     19c:	3c 35       	cpi	r19, 0x5C	; 92
     19e:	2e 27       	eor	r18, r30
     1a0:	18 11       	cpse	r17, r8
     1a2:	0a 03       	fmul	r16, r18
     1a4:	74 7d       	andi	r23, 0xD4	; 212
     1a6:	66 6f       	ori	r22, 0xF6	; 246
     1a8:	50 59       	subi	r21, 0x90	; 144
     1aa:	42 4b       	sbci	r20, 0xB2	; 178
     1ac:	17 1e       	adc	r1, r23
     1ae:	05 0c       	add	r0, r5
     1b0:	33 3a       	cpi	r19, 0xA3	; 163
     1b2:	21 28       	or	r2, r1
     1b4:	5f 56       	subi	r21, 0x6F	; 111
     1b6:	4d 44       	sbci	r20, 0x4D	; 77
     1b8:	7b 72       	andi	r23, 0x2B	; 43
     1ba:	69 60       	ori	r22, 0x09	; 9
     1bc:	0e 07       	cpc	r16, r30
     1be:	1c 15       	cp	r17, r12
     1c0:	2a 23       	and	r18, r26
     1c2:	38 31       	cpi	r19, 0x18	; 24
     1c4:	46 4f       	sbci	r20, 0xF6	; 246
     1c6:	54 5d       	subi	r21, 0xD4	; 212
     1c8:	62 6b       	ori	r22, 0xB2	; 178
     1ca:	70 79       	andi	r23, 0x90	; 144

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	df e3       	ldi	r29, 0x3F	; 63
     1d6:	de bf       	out	0x3e, r29	; 62

000001d8 <__do_copy_data>:
     1d8:	1a e2       	ldi	r17, 0x2A	; 42
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b8 e2       	ldi	r27, 0x28	; 40
     1de:	ec e3       	ldi	r30, 0x3C	; 60
     1e0:	ff e7       	ldi	r31, 0x7F	; 127
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__do_copy_data+0x10>
     1e4:	05 90       	lpm	r0, Z+
     1e6:	0d 92       	st	X+, r0
     1e8:	a0 34       	cpi	r26, 0x40	; 64
     1ea:	b1 07       	cpc	r27, r17
     1ec:	d9 f7       	brne	.-10     	; 0x1e4 <__do_copy_data+0xc>

000001ee <__do_clear_bss>:
     1ee:	23 e3       	ldi	r18, 0x33	; 51
     1f0:	a0 e4       	ldi	r26, 0x40	; 64
     1f2:	ba e2       	ldi	r27, 0x2A	; 42
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <.do_clear_bss_start>

000001f6 <.do_clear_bss_loop>:
     1f6:	1d 92       	st	X+, r1

000001f8 <.do_clear_bss_start>:
     1f8:	a8 3d       	cpi	r26, 0xD8	; 216
     1fa:	b2 07       	cpc	r27, r18
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <.do_clear_bss_loop>
     1fe:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <main>
     202:	0c 94 c0 3e 	jmp	0x7d80	; 0x7d80 <_exit>

00000206 <__bad_interrupt>:
     206:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020a <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
	system_init();
     212:	0e 94 b0 0c 	call	0x1960	; 0x1960 <system_init>
}
     216:	00 00       	nop
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <motor_dir_port_init>:
#define LEFT_WHEEL_DUTY 0xC8
#define RIGHT_WHEEL_DUTY 0xC8



void motor_dir_port_init(){
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
	
	/* left wheel */
	PORTE.DIR |= PIN3_bm;
     226:	80 e8       	ldi	r24, 0x80	; 128
     228:	94 e0       	ldi	r25, 0x04	; 4
     22a:	20 e8       	ldi	r18, 0x80	; 128
     22c:	34 e0       	ldi	r19, 0x04	; 4
     22e:	f9 01       	movw	r30, r18
     230:	20 81       	ld	r18, Z
     232:	28 60       	ori	r18, 0x08	; 8
     234:	fc 01       	movw	r30, r24
     236:	20 83       	st	Z, r18
	PORTE.DIR |= PIN2_bm;
     238:	80 e8       	ldi	r24, 0x80	; 128
     23a:	94 e0       	ldi	r25, 0x04	; 4
     23c:	20 e8       	ldi	r18, 0x80	; 128
     23e:	34 e0       	ldi	r19, 0x04	; 4
     240:	f9 01       	movw	r30, r18
     242:	20 81       	ld	r18, Z
     244:	24 60       	ori	r18, 0x04	; 4
     246:	fc 01       	movw	r30, r24
     248:	20 83       	st	Z, r18
	
	PORTE.OUT &= ~PIN2_bm;
     24a:	80 e8       	ldi	r24, 0x80	; 128
     24c:	94 e0       	ldi	r25, 0x04	; 4
     24e:	20 e8       	ldi	r18, 0x80	; 128
     250:	34 e0       	ldi	r19, 0x04	; 4
     252:	f9 01       	movw	r30, r18
     254:	24 81       	ldd	r18, Z+4	; 0x04
     256:	2b 7f       	andi	r18, 0xFB	; 251
     258:	fc 01       	movw	r30, r24
     25a:	24 83       	std	Z+4, r18	; 0x04
	PORTE.OUT |= PIN3_bm;
     25c:	80 e8       	ldi	r24, 0x80	; 128
     25e:	94 e0       	ldi	r25, 0x04	; 4
     260:	20 e8       	ldi	r18, 0x80	; 128
     262:	34 e0       	ldi	r19, 0x04	; 4
     264:	f9 01       	movw	r30, r18
     266:	24 81       	ldd	r18, Z+4	; 0x04
     268:	28 60       	ori	r18, 0x08	; 8
     26a:	fc 01       	movw	r30, r24
     26c:	24 83       	std	Z+4, r18	; 0x04
	
	/* right wheel */
	PORTF.DIR |= PIN6_bm;
     26e:	80 ea       	ldi	r24, 0xA0	; 160
     270:	94 e0       	ldi	r25, 0x04	; 4
     272:	20 ea       	ldi	r18, 0xA0	; 160
     274:	34 e0       	ldi	r19, 0x04	; 4
     276:	f9 01       	movw	r30, r18
     278:	20 81       	ld	r18, Z
     27a:	20 64       	ori	r18, 0x40	; 64
     27c:	fc 01       	movw	r30, r24
     27e:	20 83       	st	Z, r18
	PORTF.DIR |= PIN4_bm;
     280:	80 ea       	ldi	r24, 0xA0	; 160
     282:	94 e0       	ldi	r25, 0x04	; 4
     284:	20 ea       	ldi	r18, 0xA0	; 160
     286:	34 e0       	ldi	r19, 0x04	; 4
     288:	f9 01       	movw	r30, r18
     28a:	20 81       	ld	r18, Z
     28c:	20 61       	ori	r18, 0x10	; 16
     28e:	fc 01       	movw	r30, r24
     290:	20 83       	st	Z, r18
	
	PORTF.OUT &= ~PIN6_bm;
     292:	80 ea       	ldi	r24, 0xA0	; 160
     294:	94 e0       	ldi	r25, 0x04	; 4
     296:	20 ea       	ldi	r18, 0xA0	; 160
     298:	34 e0       	ldi	r19, 0x04	; 4
     29a:	f9 01       	movw	r30, r18
     29c:	24 81       	ldd	r18, Z+4	; 0x04
     29e:	2f 7b       	andi	r18, 0xBF	; 191
     2a0:	fc 01       	movw	r30, r24
     2a2:	24 83       	std	Z+4, r18	; 0x04
	PORTF.OUT |= PIN4_bm;
     2a4:	80 ea       	ldi	r24, 0xA0	; 160
     2a6:	94 e0       	ldi	r25, 0x04	; 4
     2a8:	20 ea       	ldi	r18, 0xA0	; 160
     2aa:	34 e0       	ldi	r19, 0x04	; 4
     2ac:	f9 01       	movw	r30, r18
     2ae:	24 81       	ldd	r18, Z+4	; 0x04
     2b0:	20 61       	ori	r18, 0x10	; 16
     2b2:	fc 01       	movw	r30, r24
     2b4:	24 83       	std	Z+4, r18	; 0x04
}
     2b6:	00 00       	nop
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <LEFT_WHEEL_TCB3_PWM_init>:

void LEFT_WHEEL_TCB3_PWM_init (void)
{
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
	PORTB_DIR |= PIN5_bm;
     2c6:	80 e2       	ldi	r24, 0x20	; 32
     2c8:	94 e0       	ldi	r25, 0x04	; 4
     2ca:	20 e2       	ldi	r18, 0x20	; 32
     2cc:	34 e0       	ldi	r19, 0x04	; 4
     2ce:	f9 01       	movw	r30, r18
     2d0:	20 81       	ld	r18, Z
     2d2:	20 62       	ori	r18, 0x20	; 32
     2d4:	fc 01       	movw	r30, r24
     2d6:	20 83       	st	Z, r18
	PORTB_OUT |= PIN5_bm;
     2d8:	84 e2       	ldi	r24, 0x24	; 36
     2da:	94 e0       	ldi	r25, 0x04	; 4
     2dc:	24 e2       	ldi	r18, 0x24	; 36
     2de:	34 e0       	ldi	r19, 0x04	; 4
     2e0:	f9 01       	movw	r30, r18
     2e2:	20 81       	ld	r18, Z
     2e4:	20 62       	ori	r18, 0x20	; 32
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
	/* Load CCMP register with the period and duty cycle of the PWM */
	//TCB3.CCMP = TCB_CMP_EXAMPLE_VALUE;
	TCB3.CCMPL = WHEEL_PWM_PERIOD; // period of pwm
     2ea:	80 eb       	ldi	r24, 0xB0	; 176
     2ec:	9a e0       	ldi	r25, 0x0A	; 10
     2ee:	2a ef       	ldi	r18, 0xFA	; 250
     2f0:	fc 01       	movw	r30, r24
     2f2:	24 87       	std	Z+12, r18	; 0x0c
	TCB3.CCMPH = LEFT_WHEEL_DUTY; // duty cycle
     2f4:	80 eb       	ldi	r24, 0xB0	; 176
     2f6:	9a e0       	ldi	r25, 0x0A	; 10
     2f8:	28 ec       	ldi	r18, 0xC8	; 200
     2fa:	fc 01       	movw	r30, r24
     2fc:	25 87       	std	Z+13, r18	; 0x0d
	/* Enable TCB3 and Divide CLK_PER by 2 */
	TCB3.CTRLA |= TCB_ENABLE_bm;
     2fe:	80 eb       	ldi	r24, 0xB0	; 176
     300:	9a e0       	ldi	r25, 0x0A	; 10
     302:	20 eb       	ldi	r18, 0xB0	; 176
     304:	3a e0       	ldi	r19, 0x0A	; 10
     306:	f9 01       	movw	r30, r18
     308:	20 81       	ld	r18, Z
     30a:	21 60       	ori	r18, 0x01	; 1
     30c:	fc 01       	movw	r30, r24
     30e:	20 83       	st	Z, r18
	

	/* Enable Pin Output and configure TCB in 8-bit PWM mode */
	TCB3.CTRLB |= TCB_CCMPEN_bm;
     310:	80 eb       	ldi	r24, 0xB0	; 176
     312:	9a e0       	ldi	r25, 0x0A	; 10
     314:	20 eb       	ldi	r18, 0xB0	; 176
     316:	3a e0       	ldi	r19, 0x0A	; 10
     318:	f9 01       	movw	r30, r18
     31a:	21 81       	ldd	r18, Z+1	; 0x01
     31c:	20 61       	ori	r18, 0x10	; 16
     31e:	fc 01       	movw	r30, r24
     320:	21 83       	std	Z+1, r18	; 0x01
	TCB3.CTRLB |= TCB_CNTMODE_PWM8_gc;
     322:	80 eb       	ldi	r24, 0xB0	; 176
     324:	9a e0       	ldi	r25, 0x0A	; 10
     326:	20 eb       	ldi	r18, 0xB0	; 176
     328:	3a e0       	ldi	r19, 0x0A	; 10
     32a:	f9 01       	movw	r30, r18
     32c:	21 81       	ldd	r18, Z+1	; 0x01
     32e:	27 60       	ori	r18, 0x07	; 7
     330:	fc 01       	movw	r30, r24
     332:	21 83       	std	Z+1, r18	; 0x01
}
     334:	00 00       	nop
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	08 95       	ret

0000033c <RIGHT_WHEEL_TCB1_PWM_init>:

void RIGHT_WHEEL_TCB1_PWM_init(void){
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
		PORTF.DIR |= PIN5_bm;
     344:	80 ea       	ldi	r24, 0xA0	; 160
     346:	94 e0       	ldi	r25, 0x04	; 4
     348:	20 ea       	ldi	r18, 0xA0	; 160
     34a:	34 e0       	ldi	r19, 0x04	; 4
     34c:	f9 01       	movw	r30, r18
     34e:	20 81       	ld	r18, Z
     350:	20 62       	ori	r18, 0x20	; 32
     352:	fc 01       	movw	r30, r24
     354:	20 83       	st	Z, r18
		PORTF.OUT |= PIN5_bm;
     356:	80 ea       	ldi	r24, 0xA0	; 160
     358:	94 e0       	ldi	r25, 0x04	; 4
     35a:	20 ea       	ldi	r18, 0xA0	; 160
     35c:	34 e0       	ldi	r19, 0x04	; 4
     35e:	f9 01       	movw	r30, r18
     360:	24 81       	ldd	r18, Z+4	; 0x04
     362:	20 62       	ori	r18, 0x20	; 32
     364:	fc 01       	movw	r30, r24
     366:	24 83       	std	Z+4, r18	; 0x04
		/* Load CCMP register with the period and duty cycle of the PWM */

		TCB1.CCMPL = WHEEL_PWM_PERIOD; // period of pwm
     368:	80 e9       	ldi	r24, 0x90	; 144
     36a:	9a e0       	ldi	r25, 0x0A	; 10
     36c:	2a ef       	ldi	r18, 0xFA	; 250
     36e:	fc 01       	movw	r30, r24
     370:	24 87       	std	Z+12, r18	; 0x0c
		TCB1.CCMPH = RIGHT_WHEEL_DUTY; // duty cycle
     372:	80 e9       	ldi	r24, 0x90	; 144
     374:	9a e0       	ldi	r25, 0x0A	; 10
     376:	28 ec       	ldi	r18, 0xC8	; 200
     378:	fc 01       	movw	r30, r24
     37a:	25 87       	std	Z+13, r18	; 0x0d
		/* Enable TCB3 and Divide CLK_PER by 2 */
		TCB1.CTRLA |= TCB_ENABLE_bm;
     37c:	80 e9       	ldi	r24, 0x90	; 144
     37e:	9a e0       	ldi	r25, 0x0A	; 10
     380:	20 e9       	ldi	r18, 0x90	; 144
     382:	3a e0       	ldi	r19, 0x0A	; 10
     384:	f9 01       	movw	r30, r18
     386:	20 81       	ld	r18, Z
     388:	21 60       	ori	r18, 0x01	; 1
     38a:	fc 01       	movw	r30, r24
     38c:	20 83       	st	Z, r18
		
		/* Enable Pin Output and configure TCB in 8-bit PWM mode */
		TCB1.CTRLB |= TCB_CCMPEN_bm;
     38e:	80 e9       	ldi	r24, 0x90	; 144
     390:	9a e0       	ldi	r25, 0x0A	; 10
     392:	20 e9       	ldi	r18, 0x90	; 144
     394:	3a e0       	ldi	r19, 0x0A	; 10
     396:	f9 01       	movw	r30, r18
     398:	21 81       	ldd	r18, Z+1	; 0x01
     39a:	20 61       	ori	r18, 0x10	; 16
     39c:	fc 01       	movw	r30, r24
     39e:	21 83       	std	Z+1, r18	; 0x01
		TCB1.CTRLB |= TCB_CNTMODE_PWM8_gc;
     3a0:	80 e9       	ldi	r24, 0x90	; 144
     3a2:	9a e0       	ldi	r25, 0x0A	; 10
     3a4:	20 e9       	ldi	r18, 0x90	; 144
     3a6:	3a e0       	ldi	r19, 0x0A	; 10
     3a8:	f9 01       	movw	r30, r18
     3aa:	21 81       	ldd	r18, Z+1	; 0x01
     3ac:	27 60       	ori	r18, 0x07	; 7
     3ae:	fc 01       	movw	r30, r24
     3b0:	21 83       	std	Z+1, r18	; 0x01
		PORTMUX.TCBROUTEA |= PIN1_bm;
     3b2:	80 ee       	ldi	r24, 0xE0	; 224
     3b4:	95 e0       	ldi	r25, 0x05	; 5
     3b6:	20 ee       	ldi	r18, 0xE0	; 224
     3b8:	35 e0       	ldi	r19, 0x05	; 5
     3ba:	f9 01       	movw	r30, r18
     3bc:	25 81       	ldd	r18, Z+5	; 0x05
     3be:	22 60       	ori	r18, 0x02	; 2
     3c0:	fc 01       	movw	r30, r24
     3c2:	25 83       	std	Z+5, r18	; 0x05
	
}
     3c4:	00 00       	nop
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <motor_start_left_wheel>:

void motor_start_left_wheel(){
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
	
	TCB3.CTRLA &= ~PIN0_bm;  // disable TCB3
     3d4:	80 eb       	ldi	r24, 0xB0	; 176
     3d6:	9a e0       	ldi	r25, 0x0A	; 10
     3d8:	20 eb       	ldi	r18, 0xB0	; 176
     3da:	3a e0       	ldi	r19, 0x0A	; 10
     3dc:	f9 01       	movw	r30, r18
     3de:	20 81       	ld	r18, Z
     3e0:	2e 7f       	andi	r18, 0xFE	; 254
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 83       	st	Z, r18
	TCB3.CCMPL = 0xFA;
     3e6:	80 eb       	ldi	r24, 0xB0	; 176
     3e8:	9a e0       	ldi	r25, 0x0A	; 10
     3ea:	2a ef       	ldi	r18, 0xFA	; 250
     3ec:	fc 01       	movw	r30, r24
     3ee:	24 87       	std	Z+12, r18	; 0x0c
	TCB3.CCMPH = 0xC8; // change duty cycle
     3f0:	80 eb       	ldi	r24, 0xB0	; 176
     3f2:	9a e0       	ldi	r25, 0x0A	; 10
     3f4:	28 ec       	ldi	r18, 0xC8	; 200
     3f6:	fc 01       	movw	r30, r24
     3f8:	25 87       	std	Z+13, r18	; 0x0d
	TCB3.CNT = 0x00;
     3fa:	80 eb       	ldi	r24, 0xB0	; 176
     3fc:	9a e0       	ldi	r25, 0x0A	; 10
     3fe:	fc 01       	movw	r30, r24
     400:	12 86       	std	Z+10, r1	; 0x0a
     402:	13 86       	std	Z+11, r1	; 0x0b
	TCB3.CTRLA |=  TCB_ENABLE_bm; // re-enable TCB3;
     404:	80 eb       	ldi	r24, 0xB0	; 176
     406:	9a e0       	ldi	r25, 0x0A	; 10
     408:	20 eb       	ldi	r18, 0xB0	; 176
     40a:	3a e0       	ldi	r19, 0x0A	; 10
     40c:	f9 01       	movw	r30, r18
     40e:	20 81       	ld	r18, Z
     410:	21 60       	ori	r18, 0x01	; 1
     412:	fc 01       	movw	r30, r24
     414:	20 83       	st	Z, r18
	
	/* Start means always going forward */
	PORTE.OUT &= ~PIN2_bm;
     416:	80 e8       	ldi	r24, 0x80	; 128
     418:	94 e0       	ldi	r25, 0x04	; 4
     41a:	20 e8       	ldi	r18, 0x80	; 128
     41c:	34 e0       	ldi	r19, 0x04	; 4
     41e:	f9 01       	movw	r30, r18
     420:	24 81       	ldd	r18, Z+4	; 0x04
     422:	2b 7f       	andi	r18, 0xFB	; 251
     424:	fc 01       	movw	r30, r24
     426:	24 83       	std	Z+4, r18	; 0x04
	PORTE.OUT |= PIN3_bm;
     428:	80 e8       	ldi	r24, 0x80	; 128
     42a:	94 e0       	ldi	r25, 0x04	; 4
     42c:	20 e8       	ldi	r18, 0x80	; 128
     42e:	34 e0       	ldi	r19, 0x04	; 4
     430:	f9 01       	movw	r30, r18
     432:	24 81       	ldd	r18, Z+4	; 0x04
     434:	28 60       	ori	r18, 0x08	; 8
     436:	fc 01       	movw	r30, r24
     438:	24 83       	std	Z+4, r18	; 0x04
	
}
     43a:	00 00       	nop
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <motor_stop_left_wheel>:


void motor_stop_left_wheel(){
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
	
	TCB3.CTRLA &= ~PIN0_bm;  // disable TCB3
     44a:	80 eb       	ldi	r24, 0xB0	; 176
     44c:	9a e0       	ldi	r25, 0x0A	; 10
     44e:	20 eb       	ldi	r18, 0xB0	; 176
     450:	3a e0       	ldi	r19, 0x0A	; 10
     452:	f9 01       	movw	r30, r18
     454:	20 81       	ld	r18, Z
     456:	2e 7f       	andi	r18, 0xFE	; 254
     458:	fc 01       	movw	r30, r24
     45a:	20 83       	st	Z, r18
	TCB3.CCMPL = 0xFA;
     45c:	80 eb       	ldi	r24, 0xB0	; 176
     45e:	9a e0       	ldi	r25, 0x0A	; 10
     460:	2a ef       	ldi	r18, 0xFA	; 250
     462:	fc 01       	movw	r30, r24
     464:	24 87       	std	Z+12, r18	; 0x0c
	TCB3.CCMPH = 0x00; // change duty cycle
     466:	80 eb       	ldi	r24, 0xB0	; 176
     468:	9a e0       	ldi	r25, 0x0A	; 10
     46a:	fc 01       	movw	r30, r24
     46c:	15 86       	std	Z+13, r1	; 0x0d
	TCB3.CNT = 0x00;
     46e:	80 eb       	ldi	r24, 0xB0	; 176
     470:	9a e0       	ldi	r25, 0x0A	; 10
     472:	fc 01       	movw	r30, r24
     474:	12 86       	std	Z+10, r1	; 0x0a
     476:	13 86       	std	Z+11, r1	; 0x0b
	TCB3.CTRLA |= TCB_ENABLE_bm; // re-enable TCB3;
     478:	80 eb       	ldi	r24, 0xB0	; 176
     47a:	9a e0       	ldi	r25, 0x0A	; 10
     47c:	20 eb       	ldi	r18, 0xB0	; 176
     47e:	3a e0       	ldi	r19, 0x0A	; 10
     480:	f9 01       	movw	r30, r18
     482:	20 81       	ld	r18, Z
     484:	21 60       	ori	r18, 0x01	; 1
     486:	fc 01       	movw	r30, r24
     488:	20 83       	st	Z, r18
}
     48a:	00 00       	nop
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	08 95       	ret

00000492 <motor_start_right_wheel>:


void motor_start_right_wheel(){
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
	
	TCB1.CTRLA &= ~PIN0_bm;  // disable TCB3
     49a:	80 e9       	ldi	r24, 0x90	; 144
     49c:	9a e0       	ldi	r25, 0x0A	; 10
     49e:	20 e9       	ldi	r18, 0x90	; 144
     4a0:	3a e0       	ldi	r19, 0x0A	; 10
     4a2:	f9 01       	movw	r30, r18
     4a4:	20 81       	ld	r18, Z
     4a6:	2e 7f       	andi	r18, 0xFE	; 254
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18
	TCB1.CCMPL = 0xFA;
     4ac:	80 e9       	ldi	r24, 0x90	; 144
     4ae:	9a e0       	ldi	r25, 0x0A	; 10
     4b0:	2a ef       	ldi	r18, 0xFA	; 250
     4b2:	fc 01       	movw	r30, r24
     4b4:	24 87       	std	Z+12, r18	; 0x0c
	TCB1.CCMPH = 0xC8; // change duty cycle
     4b6:	80 e9       	ldi	r24, 0x90	; 144
     4b8:	9a e0       	ldi	r25, 0x0A	; 10
     4ba:	28 ec       	ldi	r18, 0xC8	; 200
     4bc:	fc 01       	movw	r30, r24
     4be:	25 87       	std	Z+13, r18	; 0x0d
	TCB1.CNT = 0x00;
     4c0:	80 e9       	ldi	r24, 0x90	; 144
     4c2:	9a e0       	ldi	r25, 0x0A	; 10
     4c4:	fc 01       	movw	r30, r24
     4c6:	12 86       	std	Z+10, r1	; 0x0a
     4c8:	13 86       	std	Z+11, r1	; 0x0b
	TCB1.CTRLA |= TCB_ENABLE_bm; // re-enable TCB3;
     4ca:	80 e9       	ldi	r24, 0x90	; 144
     4cc:	9a e0       	ldi	r25, 0x0A	; 10
     4ce:	20 e9       	ldi	r18, 0x90	; 144
     4d0:	3a e0       	ldi	r19, 0x0A	; 10
     4d2:	f9 01       	movw	r30, r18
     4d4:	20 81       	ld	r18, Z
     4d6:	21 60       	ori	r18, 0x01	; 1
     4d8:	fc 01       	movw	r30, r24
     4da:	20 83       	st	Z, r18
	
	/* Start means always going forward */
	PORTF.OUT &= ~PIN6_bm;
     4dc:	80 ea       	ldi	r24, 0xA0	; 160
     4de:	94 e0       	ldi	r25, 0x04	; 4
     4e0:	20 ea       	ldi	r18, 0xA0	; 160
     4e2:	34 e0       	ldi	r19, 0x04	; 4
     4e4:	f9 01       	movw	r30, r18
     4e6:	24 81       	ldd	r18, Z+4	; 0x04
     4e8:	2f 7b       	andi	r18, 0xBF	; 191
     4ea:	fc 01       	movw	r30, r24
     4ec:	24 83       	std	Z+4, r18	; 0x04
	PORTF.OUT |= PIN4_bm;
     4ee:	80 ea       	ldi	r24, 0xA0	; 160
     4f0:	94 e0       	ldi	r25, 0x04	; 4
     4f2:	20 ea       	ldi	r18, 0xA0	; 160
     4f4:	34 e0       	ldi	r19, 0x04	; 4
     4f6:	f9 01       	movw	r30, r18
     4f8:	24 81       	ldd	r18, Z+4	; 0x04
     4fa:	20 61       	ori	r18, 0x10	; 16
     4fc:	fc 01       	movw	r30, r24
     4fe:	24 83       	std	Z+4, r18	; 0x04
}
     500:	00 00       	nop
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	08 95       	ret

00000508 <motor_stop_right_wheel>:


void motor_stop_right_wheel(){
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
	
	TCB1.CTRLA &= ~PIN0_bm;  // disable TCB3
     510:	80 e9       	ldi	r24, 0x90	; 144
     512:	9a e0       	ldi	r25, 0x0A	; 10
     514:	20 e9       	ldi	r18, 0x90	; 144
     516:	3a e0       	ldi	r19, 0x0A	; 10
     518:	f9 01       	movw	r30, r18
     51a:	20 81       	ld	r18, Z
     51c:	2e 7f       	andi	r18, 0xFE	; 254
     51e:	fc 01       	movw	r30, r24
     520:	20 83       	st	Z, r18
	TCB1.CCMPL = 0xFA;
     522:	80 e9       	ldi	r24, 0x90	; 144
     524:	9a e0       	ldi	r25, 0x0A	; 10
     526:	2a ef       	ldi	r18, 0xFA	; 250
     528:	fc 01       	movw	r30, r24
     52a:	24 87       	std	Z+12, r18	; 0x0c
	TCB1.CCMPH = 0x00; // change duty cycle
     52c:	80 e9       	ldi	r24, 0x90	; 144
     52e:	9a e0       	ldi	r25, 0x0A	; 10
     530:	fc 01       	movw	r30, r24
     532:	15 86       	std	Z+13, r1	; 0x0d
	TCB1.CNT = 0x00;
     534:	80 e9       	ldi	r24, 0x90	; 144
     536:	9a e0       	ldi	r25, 0x0A	; 10
     538:	fc 01       	movw	r30, r24
     53a:	12 86       	std	Z+10, r1	; 0x0a
     53c:	13 86       	std	Z+11, r1	; 0x0b
	TCB1.CTRLA |= TCB_ENABLE_bm; // re-enable TCB3;
     53e:	80 e9       	ldi	r24, 0x90	; 144
     540:	9a e0       	ldi	r25, 0x0A	; 10
     542:	20 e9       	ldi	r18, 0x90	; 144
     544:	3a e0       	ldi	r19, 0x0A	; 10
     546:	f9 01       	movw	r30, r18
     548:	20 81       	ld	r18, Z
     54a:	21 60       	ori	r18, 0x01	; 1
     54c:	fc 01       	movw	r30, r24
     54e:	20 83       	st	Z, r18
}
     550:	00 00       	nop
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	08 95       	ret

00000558 <motor_reverse_left_wheel>:

void motor_reverse_left_wheel(){
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
	
	PORTE.OUT ^= PIN3_bm;
     560:	80 e8       	ldi	r24, 0x80	; 128
     562:	94 e0       	ldi	r25, 0x04	; 4
     564:	20 e8       	ldi	r18, 0x80	; 128
     566:	34 e0       	ldi	r19, 0x04	; 4
     568:	f9 01       	movw	r30, r18
     56a:	34 81       	ldd	r19, Z+4	; 0x04
     56c:	28 e0       	ldi	r18, 0x08	; 8
     56e:	23 27       	eor	r18, r19
     570:	fc 01       	movw	r30, r24
     572:	24 83       	std	Z+4, r18	; 0x04
	PORTE.OUT ^= PIN2_bm;
     574:	80 e8       	ldi	r24, 0x80	; 128
     576:	94 e0       	ldi	r25, 0x04	; 4
     578:	20 e8       	ldi	r18, 0x80	; 128
     57a:	34 e0       	ldi	r19, 0x04	; 4
     57c:	f9 01       	movw	r30, r18
     57e:	34 81       	ldd	r19, Z+4	; 0x04
     580:	24 e0       	ldi	r18, 0x04	; 4
     582:	23 27       	eor	r18, r19
     584:	fc 01       	movw	r30, r24
     586:	24 83       	std	Z+4, r18	; 0x04
}
     588:	00 00       	nop
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <motor_reverse_right_wheel>:

void motor_reverse_right_wheel(){
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
	
	PORTF.OUT ^= PIN6_bm;
     598:	80 ea       	ldi	r24, 0xA0	; 160
     59a:	94 e0       	ldi	r25, 0x04	; 4
     59c:	20 ea       	ldi	r18, 0xA0	; 160
     59e:	34 e0       	ldi	r19, 0x04	; 4
     5a0:	f9 01       	movw	r30, r18
     5a2:	34 81       	ldd	r19, Z+4	; 0x04
     5a4:	20 e4       	ldi	r18, 0x40	; 64
     5a6:	23 27       	eor	r18, r19
     5a8:	fc 01       	movw	r30, r24
     5aa:	24 83       	std	Z+4, r18	; 0x04
	PORTF.OUT ^= PIN4_bm;
     5ac:	80 ea       	ldi	r24, 0xA0	; 160
     5ae:	94 e0       	ldi	r25, 0x04	; 4
     5b0:	20 ea       	ldi	r18, 0xA0	; 160
     5b2:	34 e0       	ldi	r19, 0x04	; 4
     5b4:	f9 01       	movw	r30, r18
     5b6:	34 81       	ldd	r19, Z+4	; 0x04
     5b8:	20 e1       	ldi	r18, 0x10	; 16
     5ba:	23 27       	eor	r18, r19
     5bc:	fc 01       	movw	r30, r24
     5be:	24 83       	std	Z+4, r18	; 0x04
     5c0:	00 00       	nop
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <MQTT_ClientInitialise>:
static uint8_t     mqttTxBuff[TX_BUFF_SIZE];
static uint8_t     mqttRxBuff[RX_BUFF_SIZE];
static int8_t      mqqtSocket = -1;

void MQTT_ClientInitialise(void)
{
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
	MQTT_initialiseState();
     5d0:	0e 94 34 03 	call	0x668	; 0x668 <MQTT_initialiseState>
	memset(mqttTxBuff, 0, sizeof(TX_BUFF_SIZE));
     5d4:	42 e0       	ldi	r20, 0x02	; 2
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	82 e5       	ldi	r24, 0x52	; 82
     5de:	9a e2       	ldi	r25, 0x2A	; 42
     5e0:	0e 94 9f 3b 	call	0x773e	; 0x773e <memset>
	memset(mqttRxBuff, 0, sizeof(RX_BUFF_SIZE));
     5e4:	42 e0       	ldi	r20, 0x02	; 2
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	82 ee       	ldi	r24, 0xE2	; 226
     5ee:	9b e2       	ldi	r25, 0x2B	; 43
     5f0:	0e 94 9f 3b 	call	0x773e	; 0x773e <memset>
	mqttConn.mqttDataExchangeBuffers.txbuff.start           = mqttTxBuff;
     5f4:	82 e5       	ldi	r24, 0x52	; 82
     5f6:	9a e2       	ldi	r25, 0x2A	; 42
     5f8:	80 93 40 2a 	sts	0x2A40, r24	; 0x802a40 <__data_end>
     5fc:	90 93 41 2a 	sts	0x2A41, r25	; 0x802a41 <__data_end+0x1>
	mqttConn.mqttDataExchangeBuffers.txbuff.bufferLength    = TX_BUFF_SIZE;
     600:	80 e9       	ldi	r24, 0x90	; 144
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	80 93 44 2a 	sts	0x2A44, r24	; 0x802a44 <__data_end+0x4>
     608:	90 93 45 2a 	sts	0x2A45, r25	; 0x802a45 <__data_end+0x5>
	mqttConn.mqttDataExchangeBuffers.txbuff.currentLocation = mqttConn.mqttDataExchangeBuffers.txbuff.start;
     60c:	80 91 40 2a 	lds	r24, 0x2A40	; 0x802a40 <__data_end>
     610:	90 91 41 2a 	lds	r25, 0x2A41	; 0x802a41 <__data_end+0x1>
     614:	80 93 42 2a 	sts	0x2A42, r24	; 0x802a42 <__data_end+0x2>
     618:	90 93 43 2a 	sts	0x2A43, r25	; 0x802a43 <__data_end+0x3>
	mqttConn.mqttDataExchangeBuffers.txbuff.dataLength      = 0;
     61c:	10 92 46 2a 	sts	0x2A46, r1	; 0x802a46 <__data_end+0x6>
     620:	10 92 47 2a 	sts	0x2A47, r1	; 0x802a47 <__data_end+0x7>
	mqttConn.mqttDataExchangeBuffers.rxbuff.start           = mqttRxBuff;
     624:	82 ee       	ldi	r24, 0xE2	; 226
     626:	9b e2       	ldi	r25, 0x2B	; 43
     628:	80 93 48 2a 	sts	0x2A48, r24	; 0x802a48 <__data_end+0x8>
     62c:	90 93 49 2a 	sts	0x2A49, r25	; 0x802a49 <__data_end+0x9>
	mqttConn.mqttDataExchangeBuffers.rxbuff.bufferLength    = RX_BUFF_SIZE;
     630:	88 ec       	ldi	r24, 0xC8	; 200
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	80 93 4c 2a 	sts	0x2A4C, r24	; 0x802a4c <__data_end+0xc>
     638:	90 93 4d 2a 	sts	0x2A4D, r25	; 0x802a4d <__data_end+0xd>
	mqttConn.mqttDataExchangeBuffers.rxbuff.currentLocation = mqttConn.mqttDataExchangeBuffers.rxbuff.start;
     63c:	80 91 48 2a 	lds	r24, 0x2A48	; 0x802a48 <__data_end+0x8>
     640:	90 91 49 2a 	lds	r25, 0x2A49	; 0x802a49 <__data_end+0x9>
     644:	80 93 4a 2a 	sts	0x2A4A, r24	; 0x802a4a <__data_end+0xa>
     648:	90 93 4b 2a 	sts	0x2A4B, r25	; 0x802a4b <__data_end+0xb>
	mqttConn.mqttDataExchangeBuffers.rxbuff.dataLength      = 0;
     64c:	10 92 4e 2a 	sts	0x2A4E, r1	; 0x802a4e <__data_end+0xe>
     650:	10 92 4f 2a 	sts	0x2A4F, r1	; 0x802a4f <__data_end+0xf>

	mqttConn.tcpClientSocket = &mqqtSocket;
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	98 e2       	ldi	r25, 0x28	; 40
     658:	80 93 50 2a 	sts	0x2A50, r24	; 0x802a50 <__data_end+0x10>
     65c:	90 93 51 2a 	sts	0x2A51, r25	; 0x802a51 <__data_end+0x11>
}
     660:	00 00       	nop
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <MQTT_initialiseState>:
}

mqttCurrentState MQTT_GetConnectionState(void)
{
	return mqttState;
}
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	10 92 c8 2c 	sts	0x2CC8, r1	; 0x802cc8 <mqttState>
     674:	00 00       	nop
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <MQTT_CreateConnectPacket>:

bool MQTT_CreateConnectPacket(mqttConnectPacket *newConnectPacket)
{
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	00 d0       	rcall	.+0      	; 0x682 <MQTT_CreateConnectPacket+0x6>
     682:	00 d0       	rcall	.+0      	; 0x684 <MQTT_CreateConnectPacket+0x8>
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
     688:	8b 83       	std	Y+3, r24	; 0x03
     68a:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t payloadLength = 0;
     68c:	19 82       	std	Y+1, r1	; 0x01
     68e:	1a 82       	std	Y+2, r1	; 0x02
	memset(&txConnectPacket, 0, sizeof(txConnectPacket));
     690:	4d e1       	ldi	r20, 0x1D	; 29
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	8b ea       	ldi	r24, 0xAB	; 171
     69a:	9c e2       	ldi	r25, 0x2C	; 44
     69c:	0e 94 9f 3b 	call	0x773e	; 0x773e <memset>

	// Fixed header
	txConnectPacket.connectFixedHeaderFlags.controlPacketType = CONNECT;
     6a0:	80 91 ab 2c 	lds	r24, 0x2CAB	; 0x802cab <txConnectPacket>
     6a4:	8f 70       	andi	r24, 0x0F	; 15
     6a6:	80 61       	ori	r24, 0x10	; 16
     6a8:	80 93 ab 2c 	sts	0x2CAB, r24	; 0x802cab <txConnectPacket>
	txConnectPacket.connectFixedHeaderFlags.duplicate         = 0;
     6ac:	80 91 ab 2c 	lds	r24, 0x2CAB	; 0x802cab <txConnectPacket>
     6b0:	87 7f       	andi	r24, 0xF7	; 247
     6b2:	80 93 ab 2c 	sts	0x2CAB, r24	; 0x802cab <txConnectPacket>
	txConnectPacket.connectFixedHeaderFlags.qos               = 0;
     6b6:	80 91 ab 2c 	lds	r24, 0x2CAB	; 0x802cab <txConnectPacket>
     6ba:	89 7f       	andi	r24, 0xF9	; 249
     6bc:	80 93 ab 2c 	sts	0x2CAB, r24	; 0x802cab <txConnectPacket>
	txConnectPacket.connectFixedHeaderFlags.retain            = 0;
     6c0:	80 91 ab 2c 	lds	r24, 0x2CAB	; 0x802cab <txConnectPacket>
     6c4:	8e 7f       	andi	r24, 0xFE	; 254
     6c6:	80 93 ab 2c 	sts	0x2CAB, r24	; 0x802cab <txConnectPacket>

	// Variable header
	txConnectPacket.connectVariableHeader.protocolName[0] = 0x00;
     6ca:	10 92 b0 2c 	sts	0x2CB0, r1	; 0x802cb0 <txConnectPacket+0x5>
	txConnectPacket.connectVariableHeader.protocolName[1] = 0x04;
     6ce:	84 e0       	ldi	r24, 0x04	; 4
     6d0:	80 93 b1 2c 	sts	0x2CB1, r24	; 0x802cb1 <txConnectPacket+0x6>
	txConnectPacket.connectVariableHeader.protocolName[2] = 'M';
     6d4:	8d e4       	ldi	r24, 0x4D	; 77
     6d6:	80 93 b2 2c 	sts	0x2CB2, r24	; 0x802cb2 <txConnectPacket+0x7>
	txConnectPacket.connectVariableHeader.protocolName[3] = 'Q';
     6da:	81 e5       	ldi	r24, 0x51	; 81
     6dc:	80 93 b3 2c 	sts	0x2CB3, r24	; 0x802cb3 <txConnectPacket+0x8>
	txConnectPacket.connectVariableHeader.protocolName[4] = 'T';
     6e0:	84 e5       	ldi	r24, 0x54	; 84
     6e2:	80 93 b4 2c 	sts	0x2CB4, r24	; 0x802cb4 <txConnectPacket+0x9>
	txConnectPacket.connectVariableHeader.protocolName[5] = 'T';
     6e6:	84 e5       	ldi	r24, 0x54	; 84
     6e8:	80 93 b5 2c 	sts	0x2CB5, r24	; 0x802cb5 <txConnectPacket+0xa>
	txConnectPacket.connectVariableHeader.protocolLevel   = 0x04;
     6ec:	84 e0       	ldi	r24, 0x04	; 4
     6ee:	80 93 b6 2c 	sts	0x2CB6, r24	; 0x802cb6 <txConnectPacket+0xb>
	if ((newConnectPacket->passwordLength > 0) || (newConnectPacket->usernameLength > 0)) {
     6f2:	8b 81       	ldd	r24, Y+3	; 0x03
     6f4:	9c 81       	ldd	r25, Y+4	; 0x04
     6f6:	fc 01       	movw	r30, r24
     6f8:	87 89       	ldd	r24, Z+23	; 0x17
     6fa:	90 8d       	ldd	r25, Z+24	; 0x18
     6fc:	89 2b       	or	r24, r25
     6fe:	39 f4       	brne	.+14     	; 0x70e <MQTT_CreateConnectPacket+0x92>
     700:	8b 81       	ldd	r24, Y+3	; 0x03
     702:	9c 81       	ldd	r25, Y+4	; 0x04
     704:	fc 01       	movw	r30, r24
     706:	83 89       	ldd	r24, Z+19	; 0x13
     708:	94 89       	ldd	r25, Z+20	; 0x14
     70a:	89 2b       	or	r24, r25
     70c:	21 f0       	breq	.+8      	; 0x716 <MQTT_CreateConnectPacket+0x9a>
		txConnectPacket.connectVariableHeader.connectFlagsByte.All = 0xC2;
     70e:	82 ec       	ldi	r24, 0xC2	; 194
     710:	80 93 b7 2c 	sts	0x2CB7, r24	; 0x802cb7 <txConnectPacket+0xc>
     714:	03 c0       	rjmp	.+6      	; 0x71c <MQTT_CreateConnectPacket+0xa0>
	} else {
		txConnectPacket.connectVariableHeader.connectFlagsByte.All = 0x02;
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	80 93 b7 2c 	sts	0x2CB7, r24	; 0x802cb7 <txConnectPacket+0xc>
	}
	txConnectPacket.connectVariableHeader.keepAliveTimer
	    = htons(newConnectPacket->connectVariableHeader.keepAliveTimer);
     71c:	8b 81       	ldd	r24, Y+3	; 0x03
     71e:	9c 81       	ldd	r25, Y+4	; 0x04
     720:	fc 01       	movw	r30, r24
     722:	85 85       	ldd	r24, Z+13	; 0x0d
     724:	96 85       	ldd	r25, Z+14	; 0x0e
     726:	98 27       	eor	r25, r24
     728:	89 27       	eor	r24, r25
     72a:	98 27       	eor	r25, r24
     72c:	80 93 b8 2c 	sts	0x2CB8, r24	; 0x802cb8 <txConnectPacket+0xd>
     730:	90 93 b9 2c 	sts	0x2CB9, r25	; 0x802cb9 <txConnectPacket+0xe>

	// Payload
	txConnectPacket.clientID       = newConnectPacket->clientID;
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	9c 81       	ldd	r25, Y+4	; 0x04
     738:	fc 01       	movw	r30, r24
     73a:	81 89       	ldd	r24, Z+17	; 0x11
     73c:	92 89       	ldd	r25, Z+18	; 0x12
     73e:	80 93 bc 2c 	sts	0x2CBC, r24	; 0x802cbc <txConnectPacket+0x11>
     742:	90 93 bd 2c 	sts	0x2CBD, r25	; 0x802cbd <txConnectPacket+0x12>
	txConnectPacket.clientIDLength = strlen((char *)txConnectPacket.clientID);
     746:	80 91 bc 2c 	lds	r24, 0x2CBC	; 0x802cbc <txConnectPacket+0x11>
     74a:	90 91 bd 2c 	lds	r25, 0x2CBD	; 0x802cbd <txConnectPacket+0x12>
     74e:	0e 94 af 3b 	call	0x775e	; 0x775e <strlen>
     752:	80 93 ba 2c 	sts	0x2CBA, r24	; 0x802cba <txConnectPacket+0xf>
     756:	90 93 bb 2c 	sts	0x2CBB, r25	; 0x802cbb <txConnectPacket+0x10>
	if (txConnectPacket.connectVariableHeader.connectFlagsByte.passwordFlag == 1) {
     75a:	80 91 b7 2c 	lds	r24, 0x2CB7	; 0x802cb7 <txConnectPacket+0xc>
     75e:	80 74       	andi	r24, 0x40	; 64
     760:	88 23       	and	r24, r24
     762:	91 f0       	breq	.+36     	; 0x788 <MQTT_CreateConnectPacket+0x10c>
		txConnectPacket.password       = newConnectPacket->password;
     764:	8b 81       	ldd	r24, Y+3	; 0x03
     766:	9c 81       	ldd	r25, Y+4	; 0x04
     768:	fc 01       	movw	r30, r24
     76a:	81 8d       	ldd	r24, Z+25	; 0x19
     76c:	92 8d       	ldd	r25, Z+26	; 0x1a
     76e:	80 93 c4 2c 	sts	0x2CC4, r24	; 0x802cc4 <txConnectPacket+0x19>
     772:	90 93 c5 2c 	sts	0x2CC5, r25	; 0x802cc5 <txConnectPacket+0x1a>
		txConnectPacket.passwordLength = newConnectPacket->passwordLength;
     776:	8b 81       	ldd	r24, Y+3	; 0x03
     778:	9c 81       	ldd	r25, Y+4	; 0x04
     77a:	fc 01       	movw	r30, r24
     77c:	87 89       	ldd	r24, Z+23	; 0x17
     77e:	90 8d       	ldd	r25, Z+24	; 0x18
     780:	80 93 c2 2c 	sts	0x2CC2, r24	; 0x802cc2 <txConnectPacket+0x17>
     784:	90 93 c3 2c 	sts	0x2CC3, r25	; 0x802cc3 <txConnectPacket+0x18>
	}
	if (txConnectPacket.connectVariableHeader.connectFlagsByte.usernameFlag == 1) {
     788:	80 91 b7 2c 	lds	r24, 0x2CB7	; 0x802cb7 <txConnectPacket+0xc>
     78c:	80 78       	andi	r24, 0x80	; 128
     78e:	88 23       	and	r24, r24
     790:	91 f0       	breq	.+36     	; 0x7b6 <MQTT_CreateConnectPacket+0x13a>
		txConnectPacket.username       = newConnectPacket->username;
     792:	8b 81       	ldd	r24, Y+3	; 0x03
     794:	9c 81       	ldd	r25, Y+4	; 0x04
     796:	fc 01       	movw	r30, r24
     798:	85 89       	ldd	r24, Z+21	; 0x15
     79a:	96 89       	ldd	r25, Z+22	; 0x16
     79c:	80 93 c0 2c 	sts	0x2CC0, r24	; 0x802cc0 <txConnectPacket+0x15>
     7a0:	90 93 c1 2c 	sts	0x2CC1, r25	; 0x802cc1 <txConnectPacket+0x16>
		txConnectPacket.usernameLength = newConnectPacket->usernameLength;
     7a4:	8b 81       	ldd	r24, Y+3	; 0x03
     7a6:	9c 81       	ldd	r25, Y+4	; 0x04
     7a8:	fc 01       	movw	r30, r24
     7aa:	83 89       	ldd	r24, Z+19	; 0x13
     7ac:	94 89       	ldd	r25, Z+20	; 0x14
     7ae:	80 93 be 2c 	sts	0x2CBE, r24	; 0x802cbe <txConnectPacket+0x13>
     7b2:	90 93 bf 2c 	sts	0x2CBF, r25	; 0x802cbf <txConnectPacket+0x14>
	}
	if (txConnectPacket.connectVariableHeader.connectFlagsByte.usernameFlag == 0) {
     7b6:	80 91 b7 2c 	lds	r24, 0x2CB7	; 0x802cb7 <txConnectPacket+0xc>
     7ba:	80 78       	andi	r24, 0x80	; 128
     7bc:	88 23       	and	r24, r24
     7be:	39 f4       	brne	.+14     	; 0x7ce <MQTT_CreateConnectPacket+0x152>
		payloadLength = txConnectPacket.clientIDLength;
     7c0:	80 91 ba 2c 	lds	r24, 0x2CBA	; 0x802cba <txConnectPacket+0xf>
     7c4:	90 91 bb 2c 	lds	r25, 0x2CBB	; 0x802cbb <txConnectPacket+0x10>
     7c8:	89 83       	std	Y+1, r24	; 0x01
     7ca:	9a 83       	std	Y+2, r25	; 0x02
     7cc:	13 c0       	rjmp	.+38     	; 0x7f4 <MQTT_CreateConnectPacket+0x178>
	} else {
		payloadLength
		    = txConnectPacket.clientIDLength + txConnectPacket.passwordLength + txConnectPacket.usernameLength + 4;
     7ce:	20 91 ba 2c 	lds	r18, 0x2CBA	; 0x802cba <txConnectPacket+0xf>
     7d2:	30 91 bb 2c 	lds	r19, 0x2CBB	; 0x802cbb <txConnectPacket+0x10>
     7d6:	80 91 c2 2c 	lds	r24, 0x2CC2	; 0x802cc2 <txConnectPacket+0x17>
     7da:	90 91 c3 2c 	lds	r25, 0x2CC3	; 0x802cc3 <txConnectPacket+0x18>
     7de:	28 0f       	add	r18, r24
     7e0:	39 1f       	adc	r19, r25
     7e2:	80 91 be 2c 	lds	r24, 0x2CBE	; 0x802cbe <txConnectPacket+0x13>
     7e6:	90 91 bf 2c 	lds	r25, 0x2CBF	; 0x802cbf <txConnectPacket+0x14>
     7ea:	82 0f       	add	r24, r18
     7ec:	93 1f       	adc	r25, r19
     7ee:	04 96       	adiw	r24, 0x04	; 4
     7f0:	89 83       	std	Y+1, r24	; 0x01
     7f2:	9a 83       	std	Y+2, r25	; 0x02
	}
	txConnectPacket.totalLength = sizeof(txConnectPacket.connectVariableHeader) + sizeof(payloadLength) + payloadLength;
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
     7f6:	9a 81       	ldd	r25, Y+2	; 0x02
     7f8:	0c 96       	adiw	r24, 0x0c	; 12
     7fa:	80 93 c6 2c 	sts	0x2CC6, r24	; 0x802cc6 <txConnectPacket+0x1b>
     7fe:	90 93 c7 2c 	sts	0x2CC7, r25	; 0x802cc7 <txConnectPacket+0x1c>
	if (txConnectPacket.connectVariableHeader.connectFlagsByte.usernameFlag == 1
     802:	80 91 b7 2c 	lds	r24, 0x2CB7	; 0x802cb7 <txConnectPacket+0xc>
     806:	80 78       	andi	r24, 0x80	; 128
     808:	88 23       	and	r24, r24
     80a:	29 f4       	brne	.+10     	; 0x816 <MQTT_CreateConnectPacket+0x19a>
	    || txConnectPacket.connectVariableHeader.connectFlagsByte.passwordFlag == 1) {
     80c:	80 91 b7 2c 	lds	r24, 0x2CB7	; 0x802cb7 <txConnectPacket+0xc>
     810:	80 74       	andi	r24, 0x40	; 64
     812:	88 23       	and	r24, r24
     814:	b1 f0       	breq	.+44     	; 0x842 <MQTT_CreateConnectPacket+0x1c6>
		txConnectPacket.passwordLength = htons(txConnectPacket.passwordLength);
     816:	80 91 c2 2c 	lds	r24, 0x2CC2	; 0x802cc2 <txConnectPacket+0x17>
     81a:	90 91 c3 2c 	lds	r25, 0x2CC3	; 0x802cc3 <txConnectPacket+0x18>
     81e:	98 27       	eor	r25, r24
     820:	89 27       	eor	r24, r25
     822:	98 27       	eor	r25, r24
     824:	80 93 c2 2c 	sts	0x2CC2, r24	; 0x802cc2 <txConnectPacket+0x17>
     828:	90 93 c3 2c 	sts	0x2CC3, r25	; 0x802cc3 <txConnectPacket+0x18>
		txConnectPacket.usernameLength = htons(txConnectPacket.usernameLength);
     82c:	80 91 be 2c 	lds	r24, 0x2CBE	; 0x802cbe <txConnectPacket+0x13>
     830:	90 91 bf 2c 	lds	r25, 0x2CBF	; 0x802cbf <txConnectPacket+0x14>
     834:	98 27       	eor	r25, r24
     836:	89 27       	eor	r24, r25
     838:	98 27       	eor	r25, r24
     83a:	80 93 be 2c 	sts	0x2CBE, r24	; 0x802cbe <txConnectPacket+0x13>
     83e:	90 93 bf 2c 	sts	0x2CBF, r25	; 0x802cbf <txConnectPacket+0x14>
	}
	txConnectPacket.clientIDLength = htons(txConnectPacket.clientIDLength);
     842:	80 91 ba 2c 	lds	r24, 0x2CBA	; 0x802cba <txConnectPacket+0xf>
     846:	90 91 bb 2c 	lds	r25, 0x2CBB	; 0x802cbb <txConnectPacket+0x10>
     84a:	98 27       	eor	r25, r24
     84c:	89 27       	eor	r24, r25
     84e:	98 27       	eor	r25, r24
     850:	80 93 ba 2c 	sts	0x2CBA, r24	; 0x802cba <txConnectPacket+0xf>
     854:	90 93 bb 2c 	sts	0x2CBB, r25	; 0x802cbb <txConnectPacket+0x10>

	// Clear all pending transmissions first
	mqttTxFlags.All = 0;
     858:	10 92 aa 2c 	sts	0x2CAA, r1	; 0x802caa <mqttTxFlags>

	// Now mark the Connect for sending
	mqttTxFlags.newTxConnectPacket = 1;
     85c:	80 91 aa 2c 	lds	r24, 0x2CAA	; 0x802caa <mqttTxFlags>
     860:	81 60       	ori	r24, 0x01	; 1
     862:	80 93 aa 2c 	sts	0x2CAA, r24	; 0x802caa <mqttTxFlags>
	mqttState                      = CONNECTING;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	80 93 c8 2c 	sts	0x2CC8, r24	; 0x802cc8 <mqttState>

	return true;
     86c:	81 e0       	ldi	r24, 0x01	; 1
}
     86e:	24 96       	adiw	r28, 0x04	; 4
     870:	cd bf       	out	0x3d, r28	; 61
     872:	de bf       	out	0x3e, r29	; 62
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <wifi_init>:

/*
 * \brief Initialize Wifi library
 */
void wifi_init(tstrWifiInitParam *params)
{
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	61 97       	sbiw	r28, 0x11	; 17
     884:	cd bf       	out	0x3d, r28	; 61
     886:	de bf       	out	0x3e, r29	; 62
     888:	88 8b       	std	Y+16, r24	; 0x10
     88a:	99 8b       	std	Y+17, r25	; 0x11
	tstrWifiInitParam param;
	int8_t            ret;

//	set_winc_spi_descriptor(&WINC_SPI);
	/* Initialize the BSP. */
	nm_bsp_init();
     88c:	0e 94 a0 11 	call	0x2340	; 0x2340 <nm_bsp_init>
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
     890:	ce 01       	movw	r24, r28
     892:	02 96       	adiw	r24, 0x02	; 2
     894:	4e e0       	ldi	r20, 0x0E	; 14
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	0e 94 9f 3b 	call	0x773e	; 0x773e <memset>
	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = params->pfAppWifiCb;
     8a0:	88 89       	ldd	r24, Y+16	; 0x10
     8a2:	99 89       	ldd	r25, Y+17	; 0x11
     8a4:	fc 01       	movw	r30, r24
     8a6:	80 81       	ld	r24, Z
     8a8:	91 81       	ldd	r25, Z+1	; 0x01
     8aa:	8a 83       	std	Y+2, r24	; 0x02
     8ac:	9b 83       	std	Y+3, r25	; 0x03
	ret               = m2m_wifi_init(&param);
     8ae:	ce 01       	movw	r24, r28
     8b0:	02 96       	adiw	r24, 0x02	; 2
     8b2:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <m2m_wifi_init>
     8b6:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	88 23       	and	r24, r24
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <wifi_init+0x46>
		while (1) {
		}
     8be:	ff cf       	rjmp	.-2      	; 0x8be <wifi_init+0x44>





}
     8c0:	00 00       	nop
     8c2:	61 96       	adiw	r28, 0x11	; 17
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	08 95       	ret

000008ce <usart_putchar_printf>:
 int usart_putchar_printf(char var, FILE *stream);
 
 static FILE mystdout = FDEV_SETUP_STREAM(usart_putchar_printf, NULL, _FDEV_SETUP_WRITE);


int usart_putchar_printf(char var, FILE *stream){
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <usart_putchar_printf+0x6>
     8d4:	1f 92       	push	r1
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	89 83       	std	Y+1, r24	; 0x01
     8dc:	6a 83       	std	Y+2, r22	; 0x02
     8de:	7b 83       	std	Y+3, r23	; 0x03
	
	USART_1_write(var);
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	88 2f       	mov	r24, r24
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <USART_1_write>
}
     8ea:	00 00       	nop
     8ec:	23 96       	adiw	r28, 0x03	; 3
     8ee:	cd bf       	out	0x3d, r28	; 61
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <get_command>:
char mqttTopic[MQTT_TOPIC_LENGTH];
char mqttHost[] = "io.adafruit.com";
char Username[]="aphosura4ever";
char insecurePort[]="1883";

void get_command(char *str,tstrSocketRecvMsg *pCommand){
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	26 97       	sbiw	r28, 0x06	; 6
     902:	cd bf       	out	0x3d, r28	; 61
     904:	de bf       	out	0x3e, r29	; 62
     906:	8b 83       	std	Y+3, r24	; 0x03
     908:	9c 83       	std	Y+4, r25	; 0x04
     90a:	6d 83       	std	Y+5, r22	; 0x05
     90c:	7e 83       	std	Y+6, r23	; 0x06



int i=0;
     90e:	19 82       	std	Y+1, r1	; 0x01
     910:	1a 82       	std	Y+2, r1	; 0x02
for(i=0;i<sizeof(order);i++){
     912:	19 82       	std	Y+1, r1	; 0x01
     914:	1a 82       	std	Y+2, r1	; 0x02
     916:	0b c0       	rjmp	.+22     	; 0x92e <get_command+0x36>
	order[i]=0x00;
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	9a 81       	ldd	r25, Y+2	; 0x02
     91c:	85 5d       	subi	r24, 0xD5	; 213
     91e:	9c 4c       	sbci	r25, 0xCC	; 204
     920:	fc 01       	movw	r30, r24
     922:	10 82       	st	Z, r1
void get_command(char *str,tstrSocketRecvMsg *pCommand){



int i=0;
for(i=0;i<sizeof(order);i++){
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	9a 81       	ldd	r25, Y+2	; 0x02
     928:	01 96       	adiw	r24, 0x01	; 1
     92a:	89 83       	std	Y+1, r24	; 0x01
     92c:	9a 83       	std	Y+2, r25	; 0x02
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	9a 81       	ldd	r25, Y+2	; 0x02
     932:	0a 97       	sbiw	r24, 0x0a	; 10
     934:	88 f3       	brcs	.-30     	; 0x918 <get_command+0x20>
	order[i]=0x00;
}
i=0;
     936:	19 82       	std	Y+1, r1	; 0x01
     938:	1a 82       	std	Y+2, r1	; 0x02
while(*(pCommand->pu8Buffer+i) != 0x0D){
     93a:	18 c0       	rjmp	.+48     	; 0x96c <get_command+0x74>
 	
	*(str+i)=*(pCommand->pu8Buffer+i);
     93c:	89 81       	ldd	r24, Y+1	; 0x01
     93e:	9a 81       	ldd	r25, Y+2	; 0x02
     940:	2b 81       	ldd	r18, Y+3	; 0x03
     942:	3c 81       	ldd	r19, Y+4	; 0x04
     944:	82 0f       	add	r24, r18
     946:	93 1f       	adc	r25, r19
     948:	2d 81       	ldd	r18, Y+5	; 0x05
     94a:	3e 81       	ldd	r19, Y+6	; 0x06
     94c:	f9 01       	movw	r30, r18
     94e:	40 81       	ld	r20, Z
     950:	51 81       	ldd	r21, Z+1	; 0x01
     952:	29 81       	ldd	r18, Y+1	; 0x01
     954:	3a 81       	ldd	r19, Y+2	; 0x02
     956:	24 0f       	add	r18, r20
     958:	35 1f       	adc	r19, r21
     95a:	f9 01       	movw	r30, r18
     95c:	20 81       	ld	r18, Z
     95e:	fc 01       	movw	r30, r24
     960:	20 83       	st	Z, r18
	i++;
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	9a 81       	ldd	r25, Y+2	; 0x02
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	89 83       	std	Y+1, r24	; 0x01
     96a:	9a 83       	std	Y+2, r25	; 0x02
int i=0;
for(i=0;i<sizeof(order);i++){
	order[i]=0x00;
}
i=0;
while(*(pCommand->pu8Buffer+i) != 0x0D){
     96c:	8d 81       	ldd	r24, Y+5	; 0x05
     96e:	9e 81       	ldd	r25, Y+6	; 0x06
     970:	fc 01       	movw	r30, r24
     972:	20 81       	ld	r18, Z
     974:	31 81       	ldd	r19, Z+1	; 0x01
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	9a 81       	ldd	r25, Y+2	; 0x02
     97a:	82 0f       	add	r24, r18
     97c:	93 1f       	adc	r25, r19
     97e:	fc 01       	movw	r30, r24
     980:	80 81       	ld	r24, Z
     982:	8d 30       	cpi	r24, 0x0D	; 13
     984:	d9 f6       	brne	.-74     	; 0x93c <get_command+0x44>
	*(str+i)=*(pCommand->pu8Buffer+i);
	i++;
	
}

}
     986:	00 00       	nop
     988:	26 96       	adiw	r28, 0x06	; 6
     98a:	cd bf       	out	0x3d, r28	; 61
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	2c 97       	sbiw	r28, 0x0c	; 12
     9a2:	cd bf       	out	0x3d, r28	; 61
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	89 87       	std	Y+9, r24	; 0x09
     9a8:	6a 87       	std	Y+10, r22	; 0x0a
     9aa:	4b 87       	std	Y+11, r20	; 0x0b
     9ac:	5c 87       	std	Y+12, r21	; 0x0c
	switch (u8Msg) {
     9ae:	8a 85       	ldd	r24, Y+10	; 0x0a
     9b0:	88 2f       	mov	r24, r24
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	84 30       	cpi	r24, 0x04	; 4
     9b6:	91 05       	cpc	r25, r1
     9b8:	09 f4       	brne	.+2      	; 0x9bc <socket_cb+0x28>
     9ba:	5c c0       	rjmp	.+184    	; 0xa74 <socket_cb+0xe0>
     9bc:	85 30       	cpi	r24, 0x05	; 5
     9be:	91 05       	cpc	r25, r1
     9c0:	34 f4       	brge	.+12     	; 0x9ce <socket_cb+0x3a>
     9c2:	81 30       	cpi	r24, 0x01	; 1
     9c4:	91 05       	cpc	r25, r1
     9c6:	59 f0       	breq	.+22     	; 0x9de <socket_cb+0x4a>
     9c8:	02 97       	sbiw	r24, 0x02	; 2
     9ca:	69 f1       	breq	.+90     	; 0xa26 <socket_cb+0x92>
	}

	break;

	default:
		break;
     9cc:	36 c1       	rjmp	.+620    	; 0xc3a <socket_cb+0x2a6>
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	switch (u8Msg) {
     9ce:	86 30       	cpi	r24, 0x06	; 6
     9d0:	91 05       	cpc	r25, r1
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <socket_cb+0x42>
     9d4:	95 c0       	rjmp	.+298    	; 0xb00 <socket_cb+0x16c>
     9d6:	07 97       	sbiw	r24, 0x07	; 7
     9d8:	09 f4       	brne	.+2      	; 0x9dc <socket_cb+0x48>
     9da:	7e c0       	rjmp	.+252    	; 0xad8 <socket_cb+0x144>
	}

	break;

	default:
		break;
     9dc:	2e c1       	rjmp	.+604    	; 0xc3a <socket_cb+0x2a6>
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	switch (u8Msg) {
	/* Socket bind */
	case SOCKET_MSG_BIND: {
		tstrSocketBindMsg *pstrBind = (tstrSocketBindMsg *)pvMsg;
     9de:	8b 85       	ldd	r24, Y+11	; 0x0b
     9e0:	9c 85       	ldd	r25, Y+12	; 0x0c
     9e2:	89 83       	std	Y+1, r24	; 0x01
     9e4:	9a 83       	std	Y+2, r25	; 0x02
		if (pstrBind && pstrBind->status == 0) {
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ea:	89 2b       	or	r24, r25
     9ec:	81 f0       	breq	.+32     	; 0xa0e <socket_cb+0x7a>
     9ee:	89 81       	ldd	r24, Y+1	; 0x01
     9f0:	9a 81       	ldd	r25, Y+2	; 0x02
     9f2:	fc 01       	movw	r30, r24
     9f4:	80 81       	ld	r24, Z
     9f6:	88 23       	and	r24, r24
     9f8:	51 f4       	brne	.+20     	; 0xa0e <socket_cb+0x7a>
			printf("socket_cb: bind success!\r\n");
     9fa:	84 e8       	ldi	r24, 0x84	; 132
     9fc:	9d eb       	ldi	r25, 0xBD	; 189
     9fe:	0e 94 ce 3b 	call	0x779c	; 0x779c <puts>
			listen(tcp_server_socket, 0);
     a02:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_server_socket>
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <listen>
		} else {
			printf("socket_cb: bind error!\r\n");
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	} break;
     a0c:	16 c1       	rjmp	.+556    	; 0xc3a <socket_cb+0x2a6>
		tstrSocketBindMsg *pstrBind = (tstrSocketBindMsg *)pvMsg;
		if (pstrBind && pstrBind->status == 0) {
			printf("socket_cb: bind success!\r\n");
			listen(tcp_server_socket, 0);
		} else {
			printf("socket_cb: bind error!\r\n");
     a0e:	8e e9       	ldi	r24, 0x9E	; 158
     a10:	9d eb       	ldi	r25, 0xBD	; 189
     a12:	0e 94 ce 3b 	call	0x779c	; 0x779c <puts>
			close(tcp_server_socket);
     a16:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_server_socket>
     a1a:	0e 94 89 38 	call	0x7112	; 0x7112 <close>
			tcp_server_socket = -1;
     a1e:	8f ef       	ldi	r24, 0xFF	; 255
     a20:	80 93 0f 28 	sts	0x280F, r24	; 0x80280f <tcp_server_socket>
		}
	} break;
     a24:	0a c1       	rjmp	.+532    	; 0xc3a <socket_cb+0x2a6>

	/* Socket listen */
	case SOCKET_MSG_LISTEN: {
		tstrSocketListenMsg *pstrListen = (tstrSocketListenMsg *)pvMsg;
     a26:	8b 85       	ldd	r24, Y+11	; 0x0b
     a28:	9c 85       	ldd	r25, Y+12	; 0x0c
     a2a:	8b 83       	std	Y+3, r24	; 0x03
     a2c:	9c 83       	std	Y+4, r25	; 0x04
		if (pstrListen && pstrListen->status == 0) {
     a2e:	8b 81       	ldd	r24, Y+3	; 0x03
     a30:	9c 81       	ldd	r25, Y+4	; 0x04
     a32:	89 2b       	or	r24, r25
     a34:	99 f0       	breq	.+38     	; 0xa5c <socket_cb+0xc8>
     a36:	8b 81       	ldd	r24, Y+3	; 0x03
     a38:	9c 81       	ldd	r25, Y+4	; 0x04
     a3a:	fc 01       	movw	r30, r24
     a3c:	80 81       	ld	r24, Z
     a3e:	88 23       	and	r24, r24
     a40:	69 f4       	brne	.+26     	; 0xa5c <socket_cb+0xc8>
			printf("socket_cb: listen success!\r\n");
     a42:	86 eb       	ldi	r24, 0xB6	; 182
     a44:	9d eb       	ldi	r25, 0xBD	; 189
     a46:	0e 94 ce 3b 	call	0x779c	; 0x779c <puts>
			accept(tcp_server_socket, NULL, NULL);
     a4a:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_server_socket>
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	0e 94 c3 36 	call	0x6d86	; 0x6d86 <accept>
		} else {
			printf("socket_cb: listen error!\r\n");
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	} break;
     a5a:	ef c0       	rjmp	.+478    	; 0xc3a <socket_cb+0x2a6>
		tstrSocketListenMsg *pstrListen = (tstrSocketListenMsg *)pvMsg;
		if (pstrListen && pstrListen->status == 0) {
			printf("socket_cb: listen success!\r\n");
			accept(tcp_server_socket, NULL, NULL);
		} else {
			printf("socket_cb: listen error!\r\n");
     a5c:	82 ed       	ldi	r24, 0xD2	; 210
     a5e:	9d eb       	ldi	r25, 0xBD	; 189
     a60:	0e 94 ce 3b 	call	0x779c	; 0x779c <puts>
			close(tcp_server_socket);
     a64:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_server_socket>
     a68:	0e 94 89 38 	call	0x7112	; 0x7112 <close>
			tcp_server_socket = -1;
     a6c:	8f ef       	ldi	r24, 0xFF	; 255
     a6e:	80 93 0f 28 	sts	0x280F, r24	; 0x80280f <tcp_server_socket>
		}
	} break;
     a72:	e3 c0       	rjmp	.+454    	; 0xc3a <socket_cb+0x2a6>

	/* Connect accept */
	case SOCKET_MSG_ACCEPT: {
		tstrSocketAcceptMsg *pstrAccept = (tstrSocketAcceptMsg *)pvMsg;
     a74:	8b 85       	ldd	r24, Y+11	; 0x0b
     a76:	9c 85       	ldd	r25, Y+12	; 0x0c
     a78:	8d 83       	std	Y+5, r24	; 0x05
     a7a:	9e 83       	std	Y+6, r25	; 0x06
		if (pstrAccept) {
     a7c:	8d 81       	ldd	r24, Y+5	; 0x05
     a7e:	9e 81       	ldd	r25, Y+6	; 0x06
     a80:	89 2b       	or	r24, r25
     a82:	f1 f0       	breq	.+60     	; 0xac0 <socket_cb+0x12c>
			printf("socket_cb: accept success!\r\n");
     a84:	8c ee       	ldi	r24, 0xEC	; 236
     a86:	9d eb       	ldi	r25, 0xBD	; 189
     a88:	0e 94 ce 3b 	call	0x779c	; 0x779c <puts>
			accept(tcp_server_socket, NULL, NULL);
     a8c:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_server_socket>
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	0e 94 c3 36 	call	0x6d86	; 0x6d86 <accept>
			tcp_client_socket = pstrAccept->sock;
     a9c:	8d 81       	ldd	r24, Y+5	; 0x05
     a9e:	9e 81       	ldd	r25, Y+6	; 0x06
     aa0:	fc 01       	movw	r30, r24
     aa2:	80 81       	ld	r24, Z
     aa4:	80 93 10 28 	sts	0x2810, r24	; 0x802810 <tcp_client_socket>
			recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
     aa8:	80 91 10 28 	lds	r24, 0x2810	; 0x802810 <tcp_client_socket>
     aac:	00 e0       	ldi	r16, 0x00	; 0
     aae:	10 e0       	ldi	r17, 0x00	; 0
     ab0:	98 01       	movw	r18, r16
     ab2:	44 eb       	ldi	r20, 0xB4	; 180
     ab4:	55 e0       	ldi	r21, 0x05	; 5
     ab6:	6a ec       	ldi	r22, 0xCA	; 202
     ab8:	7c e2       	ldi	r23, 0x2C	; 44
     aba:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <recv>
		} else {
			printf("socket_cb: accept error!\r\n");
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	} break;
     abe:	bd c0       	rjmp	.+378    	; 0xc3a <socket_cb+0x2a6>
			printf("socket_cb: accept success!\r\n");
			accept(tcp_server_socket, NULL, NULL);
			tcp_client_socket = pstrAccept->sock;
			recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
		} else {
			printf("socket_cb: accept error!\r\n");
     ac0:	88 e0       	ldi	r24, 0x08	; 8
     ac2:	9e eb       	ldi	r25, 0xBE	; 190
     ac4:	0e 94 ce 3b 	call	0x779c	; 0x779c <puts>
			close(tcp_server_socket);
     ac8:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_server_socket>
     acc:	0e 94 89 38 	call	0x7112	; 0x7112 <close>
			tcp_server_socket = -1;
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	80 93 0f 28 	sts	0x280F, r24	; 0x80280f <tcp_server_socket>
		}
	} break;
     ad6:	b1 c0       	rjmp	.+354    	; 0xc3a <socket_cb+0x2a6>

	/* Message send */

	case SOCKET_MSG_SEND: {
//  		printf("socket_cb: send success!\r\n");
 		recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
     ad8:	80 91 10 28 	lds	r24, 0x2810	; 0x802810 <tcp_client_socket>
     adc:	00 e0       	ldi	r16, 0x00	; 0
     ade:	10 e0       	ldi	r17, 0x00	; 0
     ae0:	98 01       	movw	r18, r16
     ae2:	44 eb       	ldi	r20, 0xB4	; 180
     ae4:	55 e0       	ldi	r21, 0x05	; 5
     ae6:	6a ec       	ldi	r22, 0xCA	; 202
     ae8:	7c e2       	ldi	r23, 0x2C	; 44
     aea:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <recv>
		 printf("TCP Server Test Complete!\r\n");
     aee:	82 e2       	ldi	r24, 0x22	; 34
     af0:	9e eb       	ldi	r25, 0xBE	; 190
     af2:	0e 94 ce 3b 	call	0x779c	; 0x779c <puts>
 		printf("close socket\n");
     af6:	8d e3       	ldi	r24, 0x3D	; 61
     af8:	9e eb       	ldi	r25, 0xBE	; 190
     afa:	0e 94 ce 3b 	call	0x779c	; 0x779c <puts>
 	
 	} break;
     afe:	9d c0       	rjmp	.+314    	; 0xc3a <socket_cb+0x2a6>



	/* Message receive */
	case SOCKET_MSG_RECV: {
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
     b00:	8b 85       	ldd	r24, Y+11	; 0x0b
     b02:	9c 85       	ldd	r25, Y+12	; 0x0c
     b04:	8f 83       	std	Y+7, r24	; 0x07
     b06:	98 87       	std	Y+8, r25	; 0x08
		if (pstrRecv && pstrRecv->s16BufferSize > 0) {
     b08:	8f 81       	ldd	r24, Y+7	; 0x07
     b0a:	98 85       	ldd	r25, Y+8	; 0x08
     b0c:	89 2b       	or	r24, r25
     b0e:	09 f4       	brne	.+2      	; 0xb12 <socket_cb+0x17e>
     b10:	88 c0       	rjmp	.+272    	; 0xc22 <socket_cb+0x28e>
     b12:	8f 81       	ldd	r24, Y+7	; 0x07
     b14:	98 85       	ldd	r25, Y+8	; 0x08
     b16:	fc 01       	movw	r30, r24
     b18:	82 81       	ldd	r24, Z+2	; 0x02
     b1a:	93 81       	ldd	r25, Z+3	; 0x03
     b1c:	18 16       	cp	r1, r24
     b1e:	19 06       	cpc	r1, r25
     b20:	0c f0       	brlt	.+2      	; 0xb24 <socket_cb+0x190>
     b22:	7f c0       	rjmp	.+254    	; 0xc22 <socket_cb+0x28e>
			printf("socket_cb: recv success!\r\n");
     b24:	8a e4       	ldi	r24, 0x4A	; 74
     b26:	9e eb       	ldi	r25, 0xBE	; 190
     b28:	0e 94 ce 3b 	call	0x779c	; 0x779c <puts>
			
			get_command(order, pstrRecv);
     b2c:	8f 81       	ldd	r24, Y+7	; 0x07
     b2e:	98 85       	ldd	r25, Y+8	; 0x08
     b30:	bc 01       	movw	r22, r24
     b32:	8b e2       	ldi	r24, 0x2B	; 43
     b34:	93 e3       	ldi	r25, 0x33	; 51
     b36:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <get_command>
			if(strcmp(order,"rotate")==0){		
     b3a:	64 e6       	ldi	r22, 0x64	; 100
     b3c:	7e eb       	ldi	r23, 0xBE	; 190
     b3e:	8b e2       	ldi	r24, 0x2B	; 43
     b40:	93 e3       	ldi	r25, 0x33	; 51
     b42:	0e 94 a6 3b 	call	0x774c	; 0x774c <strcmp>
     b46:	89 2b       	or	r24, r25
     b48:	89 f4       	brne	.+34     	; 0xb6c <socket_cb+0x1d8>
				motor_start_left_wheel();
     b4a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <motor_start_left_wheel>
				motor_start_right_wheel();
     b4e:	0e 94 49 02 	call	0x492	; 0x492 <motor_start_right_wheel>
				motor_reverse_left_wheel();
     b52:	0e 94 ac 02 	call	0x558	; 0x558 <motor_reverse_left_wheel>
				printf("rotating !!");
     b56:	8b e6       	ldi	r24, 0x6B	; 107
     b58:	9e eb       	ldi	r25, 0xBE	; 190
     b5a:	89 2f       	mov	r24, r25
     b5c:	8f 93       	push	r24
     b5e:	8b e6       	ldi	r24, 0x6B	; 107
     b60:	9e eb       	ldi	r25, 0xBE	; 190
     b62:	8f 93       	push	r24
     b64:	0e 94 b8 3b 	call	0x7770	; 0x7770 <printf>
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
			}
			if(strcmp(order,"forward")==0){
     b6c:	67 e7       	ldi	r22, 0x77	; 119
     b6e:	7e eb       	ldi	r23, 0xBE	; 190
     b70:	8b e2       	ldi	r24, 0x2B	; 43
     b72:	93 e3       	ldi	r25, 0x33	; 51
     b74:	0e 94 a6 3b 	call	0x774c	; 0x774c <strcmp>
     b78:	89 2b       	or	r24, r25
     b7a:	21 f4       	brne	.+8      	; 0xb84 <socket_cb+0x1f0>
				motor_start_left_wheel();
     b7c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <motor_start_left_wheel>
				motor_start_right_wheel();
     b80:	0e 94 49 02 	call	0x492	; 0x492 <motor_start_right_wheel>
				
			}
			if(strcmp(order,"backward")==0){
     b84:	6f e7       	ldi	r22, 0x7F	; 127
     b86:	7e eb       	ldi	r23, 0xBE	; 190
     b88:	8b e2       	ldi	r24, 0x2B	; 43
     b8a:	93 e3       	ldi	r25, 0x33	; 51
     b8c:	0e 94 a6 3b 	call	0x774c	; 0x774c <strcmp>
     b90:	89 2b       	or	r24, r25
     b92:	41 f4       	brne	.+16     	; 0xba4 <socket_cb+0x210>
				motor_start_left_wheel();
     b94:	0e 94 e6 01 	call	0x3cc	; 0x3cc <motor_start_left_wheel>
				motor_start_right_wheel();
     b98:	0e 94 49 02 	call	0x492	; 0x492 <motor_start_right_wheel>
				motor_reverse_left_wheel();
     b9c:	0e 94 ac 02 	call	0x558	; 0x558 <motor_reverse_left_wheel>
				motor_reverse_right_wheel();
     ba0:	0e 94 c8 02 	call	0x590	; 0x590 <motor_reverse_right_wheel>
				
				
			}
			if(strcmp(order,"stop")==0){
     ba4:	68 e8       	ldi	r22, 0x88	; 136
     ba6:	7e eb       	ldi	r23, 0xBE	; 190
     ba8:	8b e2       	ldi	r24, 0x2B	; 43
     baa:	93 e3       	ldi	r25, 0x33	; 51
     bac:	0e 94 a6 3b 	call	0x774c	; 0x774c <strcmp>
     bb0:	89 2b       	or	r24, r25
     bb2:	21 f4       	brne	.+8      	; 0xbbc <socket_cb+0x228>
				motor_stop_left_wheel();
     bb4:	0e 94 21 02 	call	0x442	; 0x442 <motor_stop_left_wheel>
				motor_stop_right_wheel();
     bb8:	0e 94 84 02 	call	0x508	; 0x508 <motor_stop_right_wheel>
			}
					
				if(strcmp(order,"close")==0){
     bbc:	6d e8       	ldi	r22, 0x8D	; 141
     bbe:	7e eb       	ldi	r23, 0xBE	; 190
     bc0:	8b e2       	ldi	r24, 0x2B	; 43
     bc2:	93 e3       	ldi	r25, 0x33	; 51
     bc4:	0e 94 a6 3b 	call	0x774c	; 0x774c <strcmp>
     bc8:	89 2b       	or	r24, r25
     bca:	61 f4       	brne	.+24     	; 0xbe4 <socket_cb+0x250>
					motor_stop_left_wheel();
     bcc:	0e 94 21 02 	call	0x442	; 0x442 <motor_stop_left_wheel>
					motor_stop_right_wheel();
     bd0:	0e 94 84 02 	call	0x508	; 0x508 <motor_stop_right_wheel>
					close(tcp_client_socket);
     bd4:	80 91 10 28 	lds	r24, 0x2810	; 0x802810 <tcp_client_socket>
     bd8:	0e 94 89 38 	call	0x7112	; 0x7112 <close>
					close(tcp_server_socket);
     bdc:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_server_socket>
     be0:	0e 94 89 38 	call	0x7112	; 0x7112 <close>
				}
			
			printf("%s \n \r ",order);
     be4:	8b e2       	ldi	r24, 0x2B	; 43
     be6:	93 e3       	ldi	r25, 0x33	; 51
     be8:	89 2f       	mov	r24, r25
     bea:	8f 93       	push	r24
     bec:	8b e2       	ldi	r24, 0x2B	; 43
     bee:	93 e3       	ldi	r25, 0x33	; 51
     bf0:	8f 93       	push	r24
     bf2:	83 e9       	ldi	r24, 0x93	; 147
     bf4:	9e eb       	ldi	r25, 0xBE	; 190
     bf6:	89 2f       	mov	r24, r25
     bf8:	8f 93       	push	r24
     bfa:	83 e9       	ldi	r24, 0x93	; 147
     bfc:	9e eb       	ldi	r25, 0xBE	; 190
     bfe:	8f 93       	push	r24
     c00:	0e 94 b8 3b 	call	0x7770	; 0x7770 <printf>
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
			
			send(tcp_client_socket, &msg_wifi_product, sizeof(msg_wifi_product), 0);
     c0c:	80 91 10 28 	lds	r24, 0x2810	; 0x802810 <tcp_client_socket>
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	48 e2       	ldi	r20, 0x28	; 40
     c16:	50 e0       	ldi	r21, 0x00	; 0
     c18:	61 e1       	ldi	r22, 0x11	; 17
     c1a:	78 e2       	ldi	r23, 0x28	; 40
     c1c:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <send>
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	}

	break;
     c20:	0b c0       	rjmp	.+22     	; 0xc38 <socket_cb+0x2a4>
			printf("%s \n \r ",order);
			
			send(tcp_client_socket, &msg_wifi_product, sizeof(msg_wifi_product), 0);
		
		} else {
			printf("socket_cb: recv error!\r\n");
     c22:	8b e9       	ldi	r24, 0x9B	; 155
     c24:	9e eb       	ldi	r25, 0xBE	; 190
     c26:	0e 94 ce 3b 	call	0x779c	; 0x779c <puts>
			close(tcp_server_socket);
     c2a:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_server_socket>
     c2e:	0e 94 89 38 	call	0x7112	; 0x7112 <close>
			tcp_server_socket = -1;
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	80 93 0f 28 	sts	0x280F, r24	; 0x80280f <tcp_server_socket>
		}
	}

	break;
     c38:	00 00       	nop

	default:
		break;
	}
}
     c3a:	00 00       	nop
     c3c:	2c 96       	adiw	r28, 0x0c	; 12
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	08 95       	ret

00000c4c <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	27 97       	sbiw	r28, 0x07	; 7
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	8d 83       	std	Y+5, r24	; 0x05
     c5c:	6e 83       	std	Y+6, r22	; 0x06
     c5e:	7f 83       	std	Y+7, r23	; 0x07
	switch (u8MsgType) {
     c60:	8d 81       	ldd	r24, Y+5	; 0x05
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	8c 32       	cpi	r24, 0x2C	; 44
     c68:	91 05       	cpc	r25, r1
     c6a:	19 f0       	breq	.+6      	; 0xc72 <wifi_cb+0x26>
     c6c:	c2 97       	sbiw	r24, 0x32	; 50
     c6e:	e9 f0       	breq	.+58     	; 0xcaa <wifi_cb+0x5e>
		
		break;
	}

	default: {
		break;
     c70:	5e c0       	rjmp	.+188    	; 0xd2e <wifi_cb+0xe2>
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED: {
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
     c72:	8e 81       	ldd	r24, Y+6	; 0x06
     c74:	9f 81       	ldd	r25, Y+7	; 0x07
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	9a 83       	std	Y+2, r25	; 0x02
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	fc 01       	movw	r30, r24
     c80:	80 81       	ld	r24, Z
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	21 f4       	brne	.+8      	; 0xc8e <wifi_cb+0x42>
			wifi_connected = 1;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	80 93 c9 2c 	sts	0x2CC9, r24	; 0x802cc9 <wifi_connected>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
			wifi_connected = 0;
			printf("Station disconnected\r\n");
		}

		break;
     c8c:	4f c0       	rjmp	.+158    	; 0xd2c <wifi_cb+0xe0>
	switch (u8MsgType) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED: {
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
			wifi_connected = 1;
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	fc 01       	movw	r30, r24
     c94:	80 81       	ld	r24, Z
     c96:	88 23       	and	r24, r24
     c98:	09 f0       	breq	.+2      	; 0xc9c <wifi_cb+0x50>
     c9a:	48 c0       	rjmp	.+144    	; 0xd2c <wifi_cb+0xe0>
			wifi_connected = 0;
     c9c:	10 92 c9 2c 	sts	0x2CC9, r1	; 0x802cc9 <wifi_connected>
			printf("Station disconnected\r\n");
     ca0:	83 eb       	ldi	r24, 0xB3	; 179
     ca2:	9e eb       	ldi	r25, 0xBE	; 190
     ca4:	0e 94 ce 3b 	call	0x779c	; 0x779c <puts>
		}

		break;
     ca8:	41 c0       	rjmp	.+130    	; 0xd2c <wifi_cb+0xe0>
	}

	case M2M_WIFI_REQ_DHCP_CONF: {
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
     caa:	8e 81       	ldd	r24, Y+6	; 0x06
     cac:	9f 81       	ldd	r25, Y+7	; 0x07
     cae:	8b 83       	std	Y+3, r24	; 0x03
     cb0:	9c 83       	std	Y+4, r25	; 0x04
		wifi_connected = 1; 
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	80 93 c9 2c 	sts	0x2CC9, r24	; 0x802cc9 <wifi_connected>
		printf("Station connected\r\n");
     cb8:	89 ec       	ldi	r24, 0xC9	; 201
     cba:	9e eb       	ldi	r25, 0xBE	; 190
     cbc:	0e 94 ce 3b 	call	0x779c	; 0x779c <puts>
		printf("Station IP is %u.%u.%u.%u\r\n",pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]); //pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	9c 81       	ldd	r25, Y+4	; 0x04
     cc4:	03 96       	adiw	r24, 0x03	; 3
     cc6:	fc 01       	movw	r30, r24
     cc8:	80 81       	ld	r24, Z
     cca:	68 2f       	mov	r22, r24
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	02 96       	adiw	r24, 0x02	; 2
     cd4:	fc 01       	movw	r30, r24
     cd6:	80 81       	ld	r24, Z
     cd8:	48 2f       	mov	r20, r24
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	9c 81       	ldd	r25, Y+4	; 0x04
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	fc 01       	movw	r30, r24
     ce4:	80 81       	ld	r24, Z
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	fc 01       	movw	r30, r24
     cf0:	80 81       	ld	r24, Z
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	e7 2f       	mov	r30, r23
     cf8:	ef 93       	push	r30
     cfa:	6f 93       	push	r22
     cfc:	65 2f       	mov	r22, r21
     cfe:	6f 93       	push	r22
     d00:	4f 93       	push	r20
     d02:	43 2f       	mov	r20, r19
     d04:	4f 93       	push	r20
     d06:	2f 93       	push	r18
     d08:	29 2f       	mov	r18, r25
     d0a:	2f 93       	push	r18
     d0c:	8f 93       	push	r24
     d0e:	8c ed       	ldi	r24, 0xDC	; 220
     d10:	9e eb       	ldi	r25, 0xBE	; 190
     d12:	89 2f       	mov	r24, r25
     d14:	8f 93       	push	r24
     d16:	8c ed       	ldi	r24, 0xDC	; 220
     d18:	9e eb       	ldi	r25, 0xBE	; 190
     d1a:	8f 93       	push	r24
     d1c:	0e 94 b8 3b 	call	0x7770	; 0x7770 <printf>
     d20:	8d b7       	in	r24, 0x3d	; 61
     d22:	9e b7       	in	r25, 0x3e	; 62
     d24:	0a 96       	adiw	r24, 0x0a	; 10
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	de bf       	out	0x3e, r29	; 62
		
		break;
     d2a:	01 c0       	rjmp	.+2      	; 0xd2e <wifi_cb+0xe2>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
			wifi_connected = 0;
			printf("Station disconnected\r\n");
		}

		break;
     d2c:	00 00       	nop

	default: {
		break;
	}
	}
}
     d2e:	00 00       	nop
     d30:	27 96       	adiw	r28, 0x07	; 7
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <mqtt_client_connect>:




bool mqtt_client_connect(){
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	6e 97       	sbiw	r28, 0x1e	; 30
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	de bf       	out	0x3e, r29	; 62
	bool result;
	MQTT_ClientInitialise();
     d4a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <MQTT_ClientInitialise>
	mqttConnectPacket adafruitConnectPacket;
	
	memset(&adafruitConnectPacket, 0, sizeof(mqttConnectPacket));
     d4e:	ce 01       	movw	r24, r28
     d50:	02 96       	adiw	r24, 0x02	; 2
     d52:	4d e1       	ldi	r20, 0x1D	; 29
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	0e 94 9f 3b 	call	0x773e	; 0x773e <memset>
	
	adafruitConnectPacket.connectVariableHeader.connectFlagsByte.All = 0x02;
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	8e 87       	std	Y+14, r24	; 0x0e
	adafruitConnectPacket.connectVariableHeader.keepAliveTimer       = 10;
     d62:	8a e0       	ldi	r24, 0x0A	; 10
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	8f 87       	std	Y+15, r24	; 0x0f
     d68:	98 8b       	std	Y+16, r25	; 0x10
	adafruitConnectPacket.clientID                                   = (uint8_t *)clientID;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	9a e2       	ldi	r25, 0x2A	; 42
     d6e:	8b 8b       	std	Y+19, r24	; 0x13
     d70:	9c 8b       	std	Y+20, r25	; 0x14
	adafruitConnectPacket.password                                   = (uint8_t *)Password;
     d72:	89 e3       	ldi	r24, 0x39	; 57
     d74:	98 e2       	ldi	r25, 0x28	; 40
     d76:	8b 8f       	std	Y+27, r24	; 0x1b
     d78:	9c 8f       	std	Y+28, r25	; 0x1c
	adafruitConnectPacket.passwordLength                             = strlen(Password);
     d7a:	89 e3       	ldi	r24, 0x39	; 57
     d7c:	98 e2       	ldi	r25, 0x28	; 40
     d7e:	0e 94 af 3b 	call	0x775e	; 0x775e <strlen>
     d82:	89 8f       	std	Y+25, r24	; 0x19
     d84:	9a 8f       	std	Y+26, r25	; 0x1a
	adafruitConnectPacket.username                                   = (uint8_t *) Username;
     d86:	86 e2       	ldi	r24, 0x26	; 38
     d88:	9a e2       	ldi	r25, 0x2A	; 42
     d8a:	8f 8b       	std	Y+23, r24	; 0x17
     d8c:	98 8f       	std	Y+24, r25	; 0x18
	adafruitConnectPacket.usernameLength                             = strlen(Username);
     d8e:	86 e2       	ldi	r24, 0x26	; 38
     d90:	9a e2       	ldi	r25, 0x2A	; 42
     d92:	0e 94 af 3b 	call	0x775e	; 0x775e <strlen>
     d96:	8d 8b       	std	Y+21, r24	; 0x15
     d98:	9e 8b       	std	Y+22, r25	; 0x16
	
	
	
	
	result=MQTT_CreateConnectPacket(&adafruitConnectPacket);
     d9a:	ce 01       	movw	r24, r28
     d9c:	02 96       	adiw	r24, 0x02	; 2
     d9e:	0e 94 3e 03 	call	0x67c	; 0x67c <MQTT_CreateConnectPacket>
     da2:	89 83       	std	Y+1, r24	; 0x01
	
	return result;
     da4:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     da6:	6e 96       	adiw	r28, 0x1e	; 30
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	08 95       	ret

00000db2 <main>:




int main(void){
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	c7 5a       	subi	r28, 0xA7	; 167
     dc0:	d1 09       	sbc	r29, r1
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	de bf       	out	0x3e, r29	; 62
	
	tstrWifiInitParam param;
	tstrM2MAPConfig   strM2MAPConfig;
	int8_t            ret = 0;
     dc6:	19 82       	std	Y+1, r1	; 0x01
	struct sockaddr_in addr;
	
	// Redirect stream to Tera Term
	stdout = &mystdout;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	98 e2       	ldi	r25, 0x28	; 40
     dcc:	80 93 d4 33 	sts	0x33D4, r24	; 0x8033d4 <__iob+0x2>
     dd0:	90 93 d5 33 	sts	0x33D5, r25	; 0x8033d5 <__iob+0x3>
// 	/* Initializes MCU, drivers and middleware */
	
	atmel_start_init();
     dd4:	0e 94 05 01 	call	0x20a	; 0x20a <atmel_start_init>
 	motor_dir_port_init();
     dd8:	0e 94 0f 01 	call	0x21e	; 0x21e <motor_dir_port_init>
 	LEFT_WHEEL_TCB3_PWM_init();
     ddc:	0e 94 5f 01 	call	0x2be	; 0x2be <LEFT_WHEEL_TCB3_PWM_init>
	RIGHT_WHEEL_TCB1_PWM_init();
     de0:	0e 94 9e 01 	call	0x33c	; 0x33c <RIGHT_WHEEL_TCB1_PWM_init>
 	
 	
      sei();
     de4:	78 94       	sei
 
 	/* Initialize BSP */
 	nm_bsp_init();
     de6:	0e 94 a0 11 	call	0x2340	; 0x2340 <nm_bsp_init>
 
 
 	/* Initialize socket address structure */
 	addr.sin_family = AF_INET;
     dea:	ce 01       	movw	r24, r28
     dec:	88 56       	subi	r24, 0x68	; 104
     dee:	9f 4f       	sbci	r25, 0xFF	; 255
     df0:	22 e0       	ldi	r18, 0x02	; 2
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	fc 01       	movw	r30, r24
     df6:	20 83       	st	Z, r18
     df8:	31 83       	std	Z+1, r19	; 0x01
 	addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
     dfa:	ce 01       	movw	r24, r28
     dfc:	88 56       	subi	r24, 0x68	; 104
     dfe:	9f 4f       	sbci	r25, 0xFF	; 255
     e00:	2a e1       	ldi	r18, 0x1A	; 26
     e02:	3a e0       	ldi	r19, 0x0A	; 10
     e04:	fc 01       	movw	r30, r24
     e06:	22 83       	std	Z+2, r18	; 0x02
     e08:	33 83       	std	Z+3, r19	; 0x03
	addr.sin_addr.s_addr = _htonl(MAIN_WIFI_M2M_SERVER_IP);
     e0a:	9e 01       	movw	r18, r28
     e0c:	28 56       	subi	r18, 0x68	; 104
     e0e:	3f 4f       	sbci	r19, 0xFF	; 255
     e10:	8f ef       	ldi	r24, 0xFF	; 255
     e12:	9f ef       	ldi	r25, 0xFF	; 255
     e14:	dc 01       	movw	r26, r24
     e16:	f9 01       	movw	r30, r18
     e18:	84 83       	std	Z+4, r24	; 0x04
     e1a:	95 83       	std	Z+5, r25	; 0x05
     e1c:	a6 83       	std	Z+6, r26	; 0x06
     e1e:	b7 83       	std	Z+7, r27	; 0x07




	/* Initialize Wi-Fi parameters structure. */
 	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
     e20:	ce 01       	movw	r24, r28
     e22:	02 96       	adiw	r24, 0x02	; 2
     e24:	4e e0       	ldi	r20, 0x0E	; 14
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	0e 94 9f 3b 	call	0x773e	; 0x773e <memset>
 
 	/* Initialize Wi-Fi driver with data and status callbacks. */
 	param.pfAppWifiCb = wifi_cb;
     e30:	86 e2       	ldi	r24, 0x26	; 38
     e32:	96 e0       	ldi	r25, 0x06	; 6
     e34:	8a 83       	std	Y+2, r24	; 0x02
     e36:	9b 83       	std	Y+3, r25	; 0x03
 	wifi_init(&param);
     e38:	ce 01       	movw	r24, r28
     e3a:	02 96       	adiw	r24, 0x02	; 2
     e3c:	0e 94 3d 04 	call	0x87a	; 0x87a <wifi_init>



	/* Initialize socket module */
	socketInit();
     e40:	0e 94 c0 34 	call	0x6980	; 0x6980 <socketInit>
	registerSocketCallback(socket_cb, NULL);
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	8a ec       	ldi	r24, 0xCA	; 202
     e4a:	94 e0       	ldi	r25, 0x04	; 4
     e4c:	0e 94 e1 34 	call	0x69c2	; 0x69c2 <registerSocketCallback>


	/* Initialize AP mode parameters structure with SSID, channel and OPEN security type. */
	memset(&strM2MAPConfig, 0x00, sizeof(tstrM2MAPConfig));
     e50:	ce 01       	movw	r24, r28
     e52:	40 96       	adiw	r24, 0x10	; 16
     e54:	48 e8       	ldi	r20, 0x88	; 136
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	0e 94 9f 3b 	call	0x773e	; 0x773e <memset>
	strcpy((char *)&strM2MAPConfig.au8SSID, MAIN_WLAN_SSID);
     e60:	ce 01       	movw	r24, r28
     e62:	40 96       	adiw	r24, 0x10	; 16
     e64:	29 e0       	ldi	r18, 0x09	; 9
     e66:	e8 ef       	ldi	r30, 0xF8	; 248
     e68:	fe eb       	ldi	r31, 0xBE	; 190
     e6a:	dc 01       	movw	r26, r24
     e6c:	01 90       	ld	r0, Z+
     e6e:	0d 92       	st	X+, r0
     e70:	2a 95       	dec	r18
     e72:	e1 f7       	brne	.-8      	; 0xe6c <main+0xba>
	strM2MAPConfig.u8ListenChannel = MAIN_WLAN_CHANNEL;
     e74:	86 e0       	ldi	r24, 0x06	; 6
     e76:	89 ab       	std	Y+49, r24	; 0x31
	strM2MAPConfig.u8SecType       = MAIN_WLAN_AUTH;
     e78:	ce 01       	movw	r24, r28
     e7a:	81 5b       	subi	r24, 0xB1	; 177
     e7c:	9f 4f       	sbci	r25, 0xFF	; 255
     e7e:	22 e0       	ldi	r18, 0x02	; 2
     e80:	fc 01       	movw	r30, r24
     e82:	20 83       	st	Z, r18

	strM2MAPConfig.au8DHCPServerIP[0] = 192;
     e84:	ce 01       	movw	r24, r28
     e86:	8f 5a       	subi	r24, 0xAF	; 175
     e88:	9f 4f       	sbci	r25, 0xFF	; 255
     e8a:	20 ec       	ldi	r18, 0xC0	; 192
     e8c:	fc 01       	movw	r30, r24
     e8e:	20 83       	st	Z, r18
	strM2MAPConfig.au8DHCPServerIP[1] = 168;
     e90:	ce 01       	movw	r24, r28
     e92:	8e 5a       	subi	r24, 0xAE	; 174
     e94:	9f 4f       	sbci	r25, 0xFF	; 255
     e96:	28 ea       	ldi	r18, 0xA8	; 168
     e98:	fc 01       	movw	r30, r24
     e9a:	20 83       	st	Z, r18
	strM2MAPConfig.au8DHCPServerIP[2] = 0;
     e9c:	ce 01       	movw	r24, r28
     e9e:	8d 5a       	subi	r24, 0xAD	; 173
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	fc 01       	movw	r30, r24
     ea4:	10 82       	st	Z, r1
	strM2MAPConfig.au8DHCPServerIP[3] = 1;
     ea6:	ce 01       	movw	r24, r28
     ea8:	8c 5a       	subi	r24, 0xAC	; 172
     eaa:	9f 4f       	sbci	r25, 0xFF	; 255
     eac:	21 e0       	ldi	r18, 0x01	; 1
     eae:	fc 01       	movw	r30, r24
     eb0:	20 83       	st	Z, r18

// 	printf("AP mode started. You can connect to %s.\r\n", (char *)MAIN_WLAN_SSID);


/* Connect to router. */
	m2m_wifi_connect(
     eb2:	0f ef       	ldi	r16, 0xFF	; 255
     eb4:	10 e0       	ldi	r17, 0x00	; 0
     eb6:	21 e0       	ldi	r18, 0x01	; 1
     eb8:	3f eb       	ldi	r19, 0xBF	; 191
     eba:	42 e0       	ldi	r20, 0x02	; 2
     ebc:	69 e0       	ldi	r22, 0x09	; 9
     ebe:	88 ef       	ldi	r24, 0xF8	; 248
     ec0:	9e eb       	ldi	r25, 0xBE	; 190
     ec2:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <m2m_wifi_connect>
/* MQTT STUFF ?*/ 



		
mqtt_client_connect();
     ec6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <mqtt_client_connect>
		//PORTB.OUT ^= PIN5_bm;
	//_delay_ms(1000);	
	/* Handle pending events from network controller. */
	
	
	while (m2m_wifi_handle_events(NULL) == M2M_SUCCESS) {
     eca:	23 c0       	rjmp	.+70     	; 0xf12 <main+0x160>
		
		if (wifi_connected == M2M_WIFI_CONNECTED) {
     ecc:	80 91 c9 2c 	lds	r24, 0x2CC9	; 0x802cc9 <wifi_connected>
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	f9 f4       	brne	.+62     	; 0xf12 <main+0x160>
			
			if (tcp_server_socket < 0) {
     ed4:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_server_socket>
     ed8:	88 23       	and	r24, r24
     eda:	dc f4       	brge	.+54     	; 0xf12 <main+0x160>
				/* Open TCP server socket */
				if ((tcp_server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 fe 34 	call	0x69fc	; 0x69fc <socket>
     ee8:	80 93 0f 28 	sts	0x280F, r24	; 0x80280f <tcp_server_socket>
     eec:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_server_socket>
     ef0:	88 23       	and	r24, r24
     ef2:	2c f4       	brge	.+10     	; 0xefe <main+0x14c>
					printf("main: failed to create TCP server socket error!\r\n");
     ef4:	8b e0       	ldi	r24, 0x0B	; 11
     ef6:	9f eb       	ldi	r25, 0xBF	; 191
     ef8:	0e 94 ce 3b 	call	0x779c	; 0x779c <puts>
					
					continue;
     efc:	0a c0       	rjmp	.+20     	; 0xf12 <main+0x160>
				}

				/* Bind service*/
				bind(tcp_server_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
     efe:	20 91 0f 28 	lds	r18, 0x280F	; 0x80280f <tcp_server_socket>
     f02:	ce 01       	movw	r24, r28
     f04:	88 56       	subi	r24, 0x68	; 104
     f06:	9f 4f       	sbci	r25, 0xFF	; 255
     f08:	40 e1       	ldi	r20, 0x10	; 16
     f0a:	bc 01       	movw	r22, r24
     f0c:	82 2f       	mov	r24, r18
     f0e:	0e 94 e0 35 	call	0x6bc0	; 0x6bc0 <bind>
		//PORTB.OUT ^= PIN5_bm;
	//_delay_ms(1000);	
	/* Handle pending events from network controller. */
	
	
	while (m2m_wifi_handle_events(NULL) == M2M_SUCCESS) {
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <m2m_wifi_handle_events>
     f1a:	88 23       	and	r24, r24
     f1c:	b9 f2       	breq	.-82     	; 0xecc <main+0x11a>



	}

}
     f1e:	d5 cf       	rjmp	.-86     	; 0xeca <main+0x118>

00000f20 <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
     f28:	80 e0       	ldi	r24, 0x00	; 0
}
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	00 d0       	rcall	.+0      	; 0xf36 <ccp_write_io+0x6>
     f36:	1f 92       	push	r1
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	4b 81       	ldd	r20, Y+3	; 0x03
     f48:	68 ed       	ldi	r22, 0xD8	; 216
     f4a:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <protected_write_io>
}
     f4e:	00 00       	nop
     f50:	23 96       	adiw	r28, 0x03	; 3
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	08 95       	ret

00000f5c <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
	//		 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */
	//		 | 0 << CLKCTRL_SEL_bp /* Select: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.OSC20MCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLB),
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	81 e6       	ldi	r24, 0x61	; 97
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 98 07 	call	0xf30	; 0xf30 <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
     f6e:	80 e0       	ldi	r24, 0x00	; 0
}
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
     f7e:	80 e0       	ldi	r24, 0x00	; 0
}
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <PORTA_set_pin_pull_mode>:
	PD6_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD6_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
}
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <PORTA_set_pin_pull_mode+0x6>
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <PORTA_set_pin_pull_mode+0x8>
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	8b 83       	std	Y+3, r24	; 0x03
     f94:	6c 83       	std	Y+4, r22	; 0x04
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	88 2f       	mov	r24, r24
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	80 5f       	subi	r24, 0xF0	; 240
     f9e:	9b 4f       	sbci	r25, 0xFB	; 251
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	59 f4       	brne	.+22     	; 0xfc0 <PORTA_set_pin_pull_mode+0x3a>
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	fc 01       	movw	r30, r24
     fb0:	80 81       	ld	r24, Z
     fb2:	28 2f       	mov	r18, r24
     fb4:	28 60       	ori	r18, 0x08	; 8
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	fc 01       	movw	r30, r24
     fbc:	20 83       	st	Z, r18
     fbe:	0d c0       	rjmp	.+26     	; 0xfda <PORTA_set_pin_pull_mode+0x54>
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	88 23       	and	r24, r24
     fc4:	51 f4       	brne	.+20     	; 0xfda <PORTA_set_pin_pull_mode+0x54>
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	9a 81       	ldd	r25, Y+2	; 0x02
     fca:	fc 01       	movw	r30, r24
     fcc:	80 81       	ld	r24, Z
     fce:	28 2f       	mov	r18, r24
     fd0:	27 7f       	andi	r18, 0xF7	; 247
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	9a 81       	ldd	r25, Y+2	; 0x02
     fd6:	fc 01       	movw	r30, r24
     fd8:	20 83       	st	Z, r18
     fda:	00 00       	nop
     fdc:	24 96       	adiw	r28, 0x04	; 4
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <PORTA_set_pin_dir>:
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	00 d0       	rcall	.+0      	; 0xfee <PORTA_set_pin_dir+0x6>
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	6a 83       	std	Y+2, r22	; 0x02
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	91 05       	cpc	r25, r1
    1000:	e1 f0       	breq	.+56     	; 0x103a <PORTA_set_pin_dir+0x52>
    1002:	82 30       	cpi	r24, 0x02	; 2
    1004:	91 05       	cpc	r25, r1
    1006:	71 f1       	breq	.+92     	; 0x1064 <PORTA_set_pin_dir+0x7c>
    1008:	89 2b       	or	r24, r25
    100a:	09 f0       	breq	.+2      	; 0x100e <PORTA_set_pin_dir+0x26>
    100c:	3b c0       	rjmp	.+118    	; 0x1084 <PORTA_set_pin_dir+0x9c>
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	fc 01       	movw	r30, r24
    1018:	80 81       	ld	r24, Z
    101a:	68 2f       	mov	r22, r24
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	48 2f       	mov	r20, r24
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 c0       	rjmp	.+4      	; 0x102c <PORTA_set_pin_dir+0x44>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	4a 95       	dec	r20
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <PORTA_set_pin_dir+0x40>
    1030:	80 95       	com	r24
    1032:	86 23       	and	r24, r22
    1034:	f9 01       	movw	r30, r18
    1036:	80 83       	st	Z, r24
    1038:	25 c0       	rjmp	.+74     	; 0x1084 <PORTA_set_pin_dir+0x9c>
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	fc 01       	movw	r30, r24
    1044:	80 81       	ld	r24, Z
    1046:	68 2f       	mov	r22, r24
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	48 2f       	mov	r20, r24
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <PORTA_set_pin_dir+0x70>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	4a 95       	dec	r20
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <PORTA_set_pin_dir+0x6c>
    105c:	86 2b       	or	r24, r22
    105e:	f9 01       	movw	r30, r18
    1060:	80 83       	st	Z, r24
    1062:	10 c0       	rjmp	.+32     	; 0x1084 <PORTA_set_pin_dir+0x9c>
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	80 5f       	subi	r24, 0xF0	; 240
    106c:	9b 4f       	sbci	r25, 0xFB	; 251
    106e:	29 81       	ldd	r18, Y+1	; 0x01
    1070:	22 2f       	mov	r18, r18
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	20 5f       	subi	r18, 0xF0	; 240
    1076:	3b 4f       	sbci	r19, 0xFB	; 251
    1078:	f9 01       	movw	r30, r18
    107a:	20 81       	ld	r18, Z
    107c:	28 60       	ori	r18, 0x08	; 8
    107e:	fc 01       	movw	r30, r24
    1080:	20 83       	st	Z, r18
    1082:	00 00       	nop
    1084:	00 00       	nop
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <PORTA_set_pin_level>:
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	00 d0       	rcall	.+0      	; 0x1096 <PORTA_set_pin_level+0x6>
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	6a 83       	std	Y+2, r22	; 0x02
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	88 23       	and	r24, r24
    10a2:	a9 f0       	breq	.+42     	; 0x10ce <PORTA_set_pin_level+0x3e>
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	fc 01       	movw	r30, r24
    10ae:	81 81       	ldd	r24, Z+1	; 0x01
    10b0:	68 2f       	mov	r22, r24
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	48 2f       	mov	r20, r24
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <PORTA_set_pin_level+0x32>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	4a 95       	dec	r20
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <PORTA_set_pin_level+0x2e>
    10c6:	86 2b       	or	r24, r22
    10c8:	f9 01       	movw	r30, r18
    10ca:	81 83       	std	Z+1, r24	; 0x01
    10cc:	15 c0       	rjmp	.+42     	; 0x10f8 <PORTA_set_pin_level+0x68>
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	fc 01       	movw	r30, r24
    10d8:	81 81       	ldd	r24, Z+1	; 0x01
    10da:	68 2f       	mov	r22, r24
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	48 2f       	mov	r20, r24
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <PORTA_set_pin_level+0x5c>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	4a 95       	dec	r20
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <PORTA_set_pin_level+0x58>
    10f0:	80 95       	com	r24
    10f2:	86 23       	and	r24, r22
    10f4:	f9 01       	movw	r30, r18
    10f6:	81 83       	std	Z+1, r24	; 0x01
    10f8:	00 00       	nop
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	08 95       	ret

00001104 <PORTB_set_pin_pull_mode>:
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	00 d0       	rcall	.+0      	; 0x110a <PORTB_set_pin_pull_mode+0x6>
    110a:	00 d0       	rcall	.+0      	; 0x110c <PORTB_set_pin_pull_mode+0x8>
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	8b 83       	std	Y+3, r24	; 0x03
    1112:	6c 83       	std	Y+4, r22	; 0x04
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	80 5d       	subi	r24, 0xD0	; 208
    111c:	9b 4f       	sbci	r25, 0xFB	; 251
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	9a 83       	std	Y+2, r25	; 0x02
    1122:	8c 81       	ldd	r24, Y+4	; 0x04
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	59 f4       	brne	.+22     	; 0x113e <PORTB_set_pin_pull_mode+0x3a>
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	9a 81       	ldd	r25, Y+2	; 0x02
    112c:	fc 01       	movw	r30, r24
    112e:	80 81       	ld	r24, Z
    1130:	28 2f       	mov	r18, r24
    1132:	28 60       	ori	r18, 0x08	; 8
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	fc 01       	movw	r30, r24
    113a:	20 83       	st	Z, r18
    113c:	0d c0       	rjmp	.+26     	; 0x1158 <PORTB_set_pin_pull_mode+0x54>
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	88 23       	and	r24, r24
    1142:	51 f4       	brne	.+20     	; 0x1158 <PORTB_set_pin_pull_mode+0x54>
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	fc 01       	movw	r30, r24
    114a:	80 81       	ld	r24, Z
    114c:	28 2f       	mov	r18, r24
    114e:	27 7f       	andi	r18, 0xF7	; 247
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	9a 81       	ldd	r25, Y+2	; 0x02
    1154:	fc 01       	movw	r30, r24
    1156:	20 83       	st	Z, r18
    1158:	00 00       	nop
    115a:	24 96       	adiw	r28, 0x04	; 4
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	08 95       	ret

00001166 <PORTB_set_pin_dir>:
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	00 d0       	rcall	.+0      	; 0x116c <PORTB_set_pin_dir+0x6>
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	6a 83       	std	Y+2, r22	; 0x02
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	88 2f       	mov	r24, r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	91 05       	cpc	r25, r1
    117e:	e1 f0       	breq	.+56     	; 0x11b8 <PORTB_set_pin_dir+0x52>
    1180:	82 30       	cpi	r24, 0x02	; 2
    1182:	91 05       	cpc	r25, r1
    1184:	71 f1       	breq	.+92     	; 0x11e2 <PORTB_set_pin_dir+0x7c>
    1186:	89 2b       	or	r24, r25
    1188:	09 f0       	breq	.+2      	; 0x118c <PORTB_set_pin_dir+0x26>
    118a:	3b c0       	rjmp	.+118    	; 0x1202 <PORTB_set_pin_dir+0x9c>
    118c:	84 e0       	ldi	r24, 0x04	; 4
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	24 e0       	ldi	r18, 0x04	; 4
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	f9 01       	movw	r30, r18
    1196:	20 81       	ld	r18, Z
    1198:	62 2f       	mov	r22, r18
    119a:	29 81       	ldd	r18, Y+1	; 0x01
    119c:	42 2f       	mov	r20, r18
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	21 e0       	ldi	r18, 0x01	; 1
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <PORTB_set_pin_dir+0x44>
    11a6:	22 0f       	add	r18, r18
    11a8:	33 1f       	adc	r19, r19
    11aa:	4a 95       	dec	r20
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <PORTB_set_pin_dir+0x40>
    11ae:	20 95       	com	r18
    11b0:	26 23       	and	r18, r22
    11b2:	fc 01       	movw	r30, r24
    11b4:	20 83       	st	Z, r18
    11b6:	25 c0       	rjmp	.+74     	; 0x1202 <PORTB_set_pin_dir+0x9c>
    11b8:	84 e0       	ldi	r24, 0x04	; 4
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	24 e0       	ldi	r18, 0x04	; 4
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	f9 01       	movw	r30, r18
    11c2:	20 81       	ld	r18, Z
    11c4:	62 2f       	mov	r22, r18
    11c6:	29 81       	ldd	r18, Y+1	; 0x01
    11c8:	42 2f       	mov	r20, r18
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	21 e0       	ldi	r18, 0x01	; 1
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <PORTB_set_pin_dir+0x70>
    11d2:	22 0f       	add	r18, r18
    11d4:	33 1f       	adc	r19, r19
    11d6:	4a 95       	dec	r20
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <PORTB_set_pin_dir+0x6c>
    11da:	26 2b       	or	r18, r22
    11dc:	fc 01       	movw	r30, r24
    11de:	20 83       	st	Z, r18
    11e0:	10 c0       	rjmp	.+32     	; 0x1202 <PORTB_set_pin_dir+0x9c>
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	88 2f       	mov	r24, r24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	80 5d       	subi	r24, 0xD0	; 208
    11ea:	9b 4f       	sbci	r25, 0xFB	; 251
    11ec:	29 81       	ldd	r18, Y+1	; 0x01
    11ee:	22 2f       	mov	r18, r18
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	20 5d       	subi	r18, 0xD0	; 208
    11f4:	3b 4f       	sbci	r19, 0xFB	; 251
    11f6:	f9 01       	movw	r30, r18
    11f8:	20 81       	ld	r18, Z
    11fa:	28 60       	ori	r18, 0x08	; 8
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 83       	st	Z, r18
    1200:	00 00       	nop
    1202:	00 00       	nop
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	08 95       	ret

0000120e <PORTB_set_pin_level>:
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	00 d0       	rcall	.+0      	; 0x1214 <PORTB_set_pin_level+0x6>
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	6a 83       	std	Y+2, r22	; 0x02
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	88 23       	and	r24, r24
    1220:	a9 f0       	breq	.+42     	; 0x124c <PORTB_set_pin_level+0x3e>
    1222:	84 e0       	ldi	r24, 0x04	; 4
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	24 e0       	ldi	r18, 0x04	; 4
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	f9 01       	movw	r30, r18
    122c:	21 81       	ldd	r18, Z+1	; 0x01
    122e:	62 2f       	mov	r22, r18
    1230:	29 81       	ldd	r18, Y+1	; 0x01
    1232:	42 2f       	mov	r20, r18
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	21 e0       	ldi	r18, 0x01	; 1
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <PORTB_set_pin_level+0x32>
    123c:	22 0f       	add	r18, r18
    123e:	33 1f       	adc	r19, r19
    1240:	4a 95       	dec	r20
    1242:	e2 f7       	brpl	.-8      	; 0x123c <PORTB_set_pin_level+0x2e>
    1244:	26 2b       	or	r18, r22
    1246:	fc 01       	movw	r30, r24
    1248:	21 83       	std	Z+1, r18	; 0x01
    124a:	15 c0       	rjmp	.+42     	; 0x1276 <PORTB_set_pin_level+0x68>
    124c:	84 e0       	ldi	r24, 0x04	; 4
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	24 e0       	ldi	r18, 0x04	; 4
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	f9 01       	movw	r30, r18
    1256:	21 81       	ldd	r18, Z+1	; 0x01
    1258:	62 2f       	mov	r22, r18
    125a:	29 81       	ldd	r18, Y+1	; 0x01
    125c:	42 2f       	mov	r20, r18
    125e:	50 e0       	ldi	r21, 0x00	; 0
    1260:	21 e0       	ldi	r18, 0x01	; 1
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	02 c0       	rjmp	.+4      	; 0x126a <PORTB_set_pin_level+0x5c>
    1266:	22 0f       	add	r18, r18
    1268:	33 1f       	adc	r19, r19
    126a:	4a 95       	dec	r20
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <PORTB_set_pin_level+0x58>
    126e:	20 95       	com	r18
    1270:	26 23       	and	r18, r22
    1272:	fc 01       	movw	r30, r24
    1274:	21 83       	std	Z+1, r18	; 0x01
    1276:	00 00       	nop
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <PORTC_set_pin_pull_mode>:
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	00 d0       	rcall	.+0      	; 0x1288 <PORTC_set_pin_pull_mode+0x6>
    1288:	00 d0       	rcall	.+0      	; 0x128a <PORTC_set_pin_pull_mode+0x8>
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	8b 83       	std	Y+3, r24	; 0x03
    1290:	6c 83       	std	Y+4, r22	; 0x04
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	80 5b       	subi	r24, 0xB0	; 176
    129a:	9b 4f       	sbci	r25, 0xFB	; 251
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	9a 83       	std	Y+2, r25	; 0x02
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	59 f4       	brne	.+22     	; 0x12bc <PORTC_set_pin_pull_mode+0x3a>
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	9a 81       	ldd	r25, Y+2	; 0x02
    12aa:	fc 01       	movw	r30, r24
    12ac:	80 81       	ld	r24, Z
    12ae:	28 2f       	mov	r18, r24
    12b0:	28 60       	ori	r18, 0x08	; 8
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	fc 01       	movw	r30, r24
    12b8:	20 83       	st	Z, r18
    12ba:	0d c0       	rjmp	.+26     	; 0x12d6 <PORTC_set_pin_pull_mode+0x54>
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	88 23       	and	r24, r24
    12c0:	51 f4       	brne	.+20     	; 0x12d6 <PORTC_set_pin_pull_mode+0x54>
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	9a 81       	ldd	r25, Y+2	; 0x02
    12c6:	fc 01       	movw	r30, r24
    12c8:	80 81       	ld	r24, Z
    12ca:	28 2f       	mov	r18, r24
    12cc:	27 7f       	andi	r18, 0xF7	; 247
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	9a 81       	ldd	r25, Y+2	; 0x02
    12d2:	fc 01       	movw	r30, r24
    12d4:	20 83       	st	Z, r18
    12d6:	00 00       	nop
    12d8:	24 96       	adiw	r28, 0x04	; 4
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	08 95       	ret

000012e4 <PORTC_pin_set_inverted>:
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <PORTC_pin_set_inverted+0x6>
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <PORTC_pin_set_inverted+0x8>
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	8b 83       	std	Y+3, r24	; 0x03
    12f2:	6c 83       	std	Y+4, r22	; 0x04
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	80 5b       	subi	r24, 0xB0	; 176
    12fc:	9b 4f       	sbci	r25, 0xFB	; 251
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	9a 83       	std	Y+2, r25	; 0x02
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	88 23       	and	r24, r24
    1306:	59 f0       	breq	.+22     	; 0x131e <PORTC_pin_set_inverted+0x3a>
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	9a 81       	ldd	r25, Y+2	; 0x02
    130c:	fc 01       	movw	r30, r24
    130e:	80 81       	ld	r24, Z
    1310:	28 2f       	mov	r18, r24
    1312:	20 68       	ori	r18, 0x80	; 128
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	9a 81       	ldd	r25, Y+2	; 0x02
    1318:	fc 01       	movw	r30, r24
    131a:	20 83       	st	Z, r18
    131c:	0a c0       	rjmp	.+20     	; 0x1332 <PORTC_pin_set_inverted+0x4e>
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	fc 01       	movw	r30, r24
    1324:	80 81       	ld	r24, Z
    1326:	28 2f       	mov	r18, r24
    1328:	2f 77       	andi	r18, 0x7F	; 127
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	9a 81       	ldd	r25, Y+2	; 0x02
    132e:	fc 01       	movw	r30, r24
    1330:	20 83       	st	Z, r18
    1332:	00 00       	nop
    1334:	24 96       	adiw	r28, 0x04	; 4
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	08 95       	ret

00001340 <PORTC_pin_set_isc>:
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	00 d0       	rcall	.+0      	; 0x1346 <PORTC_pin_set_isc+0x6>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <PORTC_pin_set_isc+0x8>
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	8b 83       	std	Y+3, r24	; 0x03
    134e:	6c 83       	std	Y+4, r22	; 0x04
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	80 5b       	subi	r24, 0xB0	; 176
    1358:	9b 4f       	sbci	r25, 0xFB	; 251
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	9a 83       	std	Y+2, r25	; 0x02
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	fc 01       	movw	r30, r24
    1364:	80 81       	ld	r24, Z
    1366:	98 2f       	mov	r25, r24
    1368:	98 7f       	andi	r25, 0xF8	; 248
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	89 2b       	or	r24, r25
    136e:	28 2f       	mov	r18, r24
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	fc 01       	movw	r30, r24
    1376:	20 83       	st	Z, r18
    1378:	00 00       	nop
    137a:	24 96       	adiw	r28, 0x04	; 4
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	08 95       	ret

00001386 <PORTC_set_pin_dir>:
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	00 d0       	rcall	.+0      	; 0x138c <PORTC_set_pin_dir+0x6>
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	6a 83       	std	Y+2, r22	; 0x02
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	91 05       	cpc	r25, r1
    139e:	e1 f0       	breq	.+56     	; 0x13d8 <PORTC_set_pin_dir+0x52>
    13a0:	82 30       	cpi	r24, 0x02	; 2
    13a2:	91 05       	cpc	r25, r1
    13a4:	71 f1       	breq	.+92     	; 0x1402 <PORTC_set_pin_dir+0x7c>
    13a6:	89 2b       	or	r24, r25
    13a8:	09 f0       	breq	.+2      	; 0x13ac <PORTC_set_pin_dir+0x26>
    13aa:	3b c0       	rjmp	.+118    	; 0x1422 <PORTC_set_pin_dir+0x9c>
    13ac:	88 e0       	ldi	r24, 0x08	; 8
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	28 e0       	ldi	r18, 0x08	; 8
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	f9 01       	movw	r30, r18
    13b6:	20 81       	ld	r18, Z
    13b8:	62 2f       	mov	r22, r18
    13ba:	29 81       	ldd	r18, Y+1	; 0x01
    13bc:	42 2f       	mov	r20, r18
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	21 e0       	ldi	r18, 0x01	; 1
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <PORTC_set_pin_dir+0x44>
    13c6:	22 0f       	add	r18, r18
    13c8:	33 1f       	adc	r19, r19
    13ca:	4a 95       	dec	r20
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <PORTC_set_pin_dir+0x40>
    13ce:	20 95       	com	r18
    13d0:	26 23       	and	r18, r22
    13d2:	fc 01       	movw	r30, r24
    13d4:	20 83       	st	Z, r18
    13d6:	25 c0       	rjmp	.+74     	; 0x1422 <PORTC_set_pin_dir+0x9c>
    13d8:	88 e0       	ldi	r24, 0x08	; 8
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	28 e0       	ldi	r18, 0x08	; 8
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	f9 01       	movw	r30, r18
    13e2:	20 81       	ld	r18, Z
    13e4:	62 2f       	mov	r22, r18
    13e6:	29 81       	ldd	r18, Y+1	; 0x01
    13e8:	42 2f       	mov	r20, r18
    13ea:	50 e0       	ldi	r21, 0x00	; 0
    13ec:	21 e0       	ldi	r18, 0x01	; 1
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <PORTC_set_pin_dir+0x70>
    13f2:	22 0f       	add	r18, r18
    13f4:	33 1f       	adc	r19, r19
    13f6:	4a 95       	dec	r20
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <PORTC_set_pin_dir+0x6c>
    13fa:	26 2b       	or	r18, r22
    13fc:	fc 01       	movw	r30, r24
    13fe:	20 83       	st	Z, r18
    1400:	10 c0       	rjmp	.+32     	; 0x1422 <PORTC_set_pin_dir+0x9c>
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	80 5b       	subi	r24, 0xB0	; 176
    140a:	9b 4f       	sbci	r25, 0xFB	; 251
    140c:	29 81       	ldd	r18, Y+1	; 0x01
    140e:	22 2f       	mov	r18, r18
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	20 5b       	subi	r18, 0xB0	; 176
    1414:	3b 4f       	sbci	r19, 0xFB	; 251
    1416:	f9 01       	movw	r30, r18
    1418:	20 81       	ld	r18, Z
    141a:	28 60       	ori	r18, 0x08	; 8
    141c:	fc 01       	movw	r30, r24
    141e:	20 83       	st	Z, r18
    1420:	00 00       	nop
    1422:	00 00       	nop
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <PORTC_set_pin_level>:
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	00 d0       	rcall	.+0      	; 0x1434 <PORTC_set_pin_level+0x6>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	6a 83       	std	Y+2, r22	; 0x02
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	88 23       	and	r24, r24
    1440:	a9 f0       	breq	.+42     	; 0x146c <PORTC_set_pin_level+0x3e>
    1442:	88 e0       	ldi	r24, 0x08	; 8
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	28 e0       	ldi	r18, 0x08	; 8
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	f9 01       	movw	r30, r18
    144c:	21 81       	ldd	r18, Z+1	; 0x01
    144e:	62 2f       	mov	r22, r18
    1450:	29 81       	ldd	r18, Y+1	; 0x01
    1452:	42 2f       	mov	r20, r18
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	21 e0       	ldi	r18, 0x01	; 1
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <PORTC_set_pin_level+0x32>
    145c:	22 0f       	add	r18, r18
    145e:	33 1f       	adc	r19, r19
    1460:	4a 95       	dec	r20
    1462:	e2 f7       	brpl	.-8      	; 0x145c <PORTC_set_pin_level+0x2e>
    1464:	26 2b       	or	r18, r22
    1466:	fc 01       	movw	r30, r24
    1468:	21 83       	std	Z+1, r18	; 0x01
    146a:	15 c0       	rjmp	.+42     	; 0x1496 <PORTC_set_pin_level+0x68>
    146c:	88 e0       	ldi	r24, 0x08	; 8
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	28 e0       	ldi	r18, 0x08	; 8
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	f9 01       	movw	r30, r18
    1476:	21 81       	ldd	r18, Z+1	; 0x01
    1478:	62 2f       	mov	r22, r18
    147a:	29 81       	ldd	r18, Y+1	; 0x01
    147c:	42 2f       	mov	r20, r18
    147e:	50 e0       	ldi	r21, 0x00	; 0
    1480:	21 e0       	ldi	r18, 0x01	; 1
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	02 c0       	rjmp	.+4      	; 0x148a <PORTC_set_pin_level+0x5c>
    1486:	22 0f       	add	r18, r18
    1488:	33 1f       	adc	r19, r19
    148a:	4a 95       	dec	r20
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <PORTC_set_pin_level+0x58>
    148e:	20 95       	com	r18
    1490:	26 23       	and	r18, r22
    1492:	fc 01       	movw	r30, r24
    1494:	21 83       	std	Z+1, r18	; 0x01
    1496:	00 00       	nop
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	08 95       	ret

000014a2 <CONF_WIFI_M2M_RESET_PIN_set_dir>:
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	1f 92       	push	r1
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	69 81       	ldd	r22, Y+1	; 0x01
    14b0:	82 e0       	ldi	r24, 0x02	; 2
    14b2:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <PORTA_set_pin_dir>
    14b6:	00 00       	nop
    14b8:	0f 90       	pop	r0
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	08 95       	ret

000014c0 <CONF_WIFI_M2M_RESET_PIN_set_level>:
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	1f 92       	push	r1
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	69 81       	ldd	r22, Y+1	; 0x01
    14ce:	82 e0       	ldi	r24, 0x02	; 2
    14d0:	0e 94 48 08 	call	0x1090	; 0x1090 <PORTA_set_pin_level>
    14d4:	00 00       	nop
    14d6:	0f 90       	pop	r0
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	08 95       	ret

000014de <CONF_WIFI_M2M_WAKE_PIN_set_dir>:
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	1f 92       	push	r1
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	69 81       	ldd	r22, Y+1	; 0x01
    14ec:	83 e0       	ldi	r24, 0x03	; 3
    14ee:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <PORTA_set_pin_dir>
    14f2:	00 00       	nop
    14f4:	0f 90       	pop	r0
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <CONF_WIFI_M2M_WAKE_PIN_set_level>:
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	1f 92       	push	r1
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	69 81       	ldd	r22, Y+1	; 0x01
    150a:	83 e0       	ldi	r24, 0x03	; 3
    150c:	0e 94 48 08 	call	0x1090	; 0x1090 <PORTA_set_pin_level>
    1510:	00 00       	nop
    1512:	0f 90       	pop	r0
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	08 95       	ret

0000151a <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>:
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	1f 92       	push	r1
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	69 81       	ldd	r22, Y+1	; 0x01
    1528:	84 e0       	ldi	r24, 0x04	; 4
    152a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <PORTA_set_pin_dir>
    152e:	00 00       	nop
    1530:	0f 90       	pop	r0
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	08 95       	ret

00001538 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>:
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	1f 92       	push	r1
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	69 81       	ldd	r22, Y+1	; 0x01
    1546:	84 e0       	ldi	r24, 0x04	; 4
    1548:	0e 94 48 08 	call	0x1090	; 0x1090 <PORTA_set_pin_level>
    154c:	00 00       	nop
    154e:	0f 90       	pop	r0
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	08 95       	ret

00001556 <CONF_WIFI_M2M_SPI_MISO_PIN_set_pull_mode>:
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	1f 92       	push	r1
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	89 83       	std	Y+1, r24	; 0x01
    1562:	69 81       	ldd	r22, Y+1	; 0x01
    1564:	85 e0       	ldi	r24, 0x05	; 5
    1566:	0e 94 c3 07 	call	0xf86	; 0xf86 <PORTA_set_pin_pull_mode>
    156a:	00 00       	nop
    156c:	0f 90       	pop	r0
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>:
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	1f 92       	push	r1
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	69 81       	ldd	r22, Y+1	; 0x01
    1582:	85 e0       	ldi	r24, 0x05	; 5
    1584:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <PORTA_set_pin_dir>
    1588:	00 00       	nop
    158a:	0f 90       	pop	r0
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	08 95       	ret

00001592 <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>:
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	1f 92       	push	r1
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	69 81       	ldd	r22, Y+1	; 0x01
    15a0:	86 e0       	ldi	r24, 0x06	; 6
    15a2:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <PORTA_set_pin_dir>
    15a6:	00 00       	nop
    15a8:	0f 90       	pop	r0
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	08 95       	ret

000015b0 <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>:
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	1f 92       	push	r1
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	69 81       	ldd	r22, Y+1	; 0x01
    15be:	86 e0       	ldi	r24, 0x06	; 6
    15c0:	0e 94 48 08 	call	0x1090	; 0x1090 <PORTA_set_pin_level>
    15c4:	00 00       	nop
    15c6:	0f 90       	pop	r0
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	08 95       	ret

000015ce <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>:
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	1f 92       	push	r1
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	69 81       	ldd	r22, Y+1	; 0x01
    15dc:	87 e0       	ldi	r24, 0x07	; 7
    15de:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <PORTA_set_pin_dir>
    15e2:	00 00       	nop
    15e4:	0f 90       	pop	r0
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	08 95       	ret

000015ec <CONF_WIFI_M2M_SPI_CS_PIN_set_level>:
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	1f 92       	push	r1
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	69 81       	ldd	r22, Y+1	; 0x01
    15fa:	87 e0       	ldi	r24, 0x07	; 7
    15fc:	0e 94 48 08 	call	0x1090	; 0x1090 <PORTA_set_pin_level>
    1600:	00 00       	nop
    1602:	0f 90       	pop	r0
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	08 95       	ret

0000160a <SW0_set_pull_mode>:
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	1f 92       	push	r1
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	69 81       	ldd	r22, Y+1	; 0x01
    1618:	82 e0       	ldi	r24, 0x02	; 2
    161a:	0e 94 82 08 	call	0x1104	; 0x1104 <PORTB_set_pin_pull_mode>
    161e:	00 00       	nop
    1620:	0f 90       	pop	r0
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

00001628 <SW0_set_dir>:
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	1f 92       	push	r1
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	69 81       	ldd	r22, Y+1	; 0x01
    1636:	82 e0       	ldi	r24, 0x02	; 2
    1638:	0e 94 b3 08 	call	0x1166	; 0x1166 <PORTB_set_pin_dir>
    163c:	00 00       	nop
    163e:	0f 90       	pop	r0
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	08 95       	ret

00001646 <LED0_set_dir>:
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	1f 92       	push	r1
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	69 81       	ldd	r22, Y+1	; 0x01
    1654:	85 e0       	ldi	r24, 0x05	; 5
    1656:	0e 94 b3 08 	call	0x1166	; 0x1166 <PORTB_set_pin_dir>
    165a:	00 00       	nop
    165c:	0f 90       	pop	r0
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	08 95       	ret

00001664 <LED0_set_level>:
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	1f 92       	push	r1
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	69 81       	ldd	r22, Y+1	; 0x01
    1672:	85 e0       	ldi	r24, 0x05	; 5
    1674:	0e 94 07 09 	call	0x120e	; 0x120e <PORTB_set_pin_level>
    1678:	00 00       	nop
    167a:	0f 90       	pop	r0
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	08 95       	ret

00001682 <PC0_set_dir>:
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	1f 92       	push	r1
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	69 81       	ldd	r22, Y+1	; 0x01
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	0e 94 c3 09 	call	0x1386	; 0x1386 <PORTC_set_pin_dir>
    1696:	00 00       	nop
    1698:	0f 90       	pop	r0
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	08 95       	ret

000016a0 <PC0_set_level>:
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	1f 92       	push	r1
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	69 81       	ldd	r22, Y+1	; 0x01
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	0e 94 17 0a 	call	0x142e	; 0x142e <PORTC_set_pin_level>
    16b4:	00 00       	nop
    16b6:	0f 90       	pop	r0
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	08 95       	ret

000016be <PC1_set_pull_mode>:
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	1f 92       	push	r1
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	69 81       	ldd	r22, Y+1	; 0x01
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	0e 94 41 09 	call	0x1282	; 0x1282 <PORTC_set_pin_pull_mode>
    16d2:	00 00       	nop
    16d4:	0f 90       	pop	r0
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	08 95       	ret

000016dc <PC1_set_dir>:
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	1f 92       	push	r1
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	69 81       	ldd	r22, Y+1	; 0x01
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	0e 94 c3 09 	call	0x1386	; 0x1386 <PORTC_set_pin_dir>
    16f0:	00 00       	nop
    16f2:	0f 90       	pop	r0
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <CONF_WIFI_M2M_INT_PIN_set_pull_mode>:
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	1f 92       	push	r1
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	69 81       	ldd	r22, Y+1	; 0x01
    1708:	86 e0       	ldi	r24, 0x06	; 6
    170a:	0e 94 41 09 	call	0x1282	; 0x1282 <PORTC_set_pin_pull_mode>
    170e:	00 00       	nop
    1710:	0f 90       	pop	r0
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	08 95       	ret

00001718 <CONF_WIFI_M2M_INT_PIN_set_dir>:
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	1f 92       	push	r1
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	69 81       	ldd	r22, Y+1	; 0x01
    1726:	86 e0       	ldi	r24, 0x06	; 6
    1728:	0e 94 c3 09 	call	0x1386	; 0x1386 <PORTC_set_pin_dir>
    172c:	00 00       	nop
    172e:	0f 90       	pop	r0
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	08 95       	ret

00001736 <CONF_WIFI_M2M_INT_PIN_set_isc>:
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	1f 92       	push	r1
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	69 81       	ldd	r22, Y+1	; 0x01
    1744:	86 e0       	ldi	r24, 0x06	; 6
    1746:	0e 94 a0 09 	call	0x1340	; 0x1340 <PORTC_pin_set_isc>
    174a:	00 00       	nop
    174c:	0f 90       	pop	r0
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	08 95       	ret

00001754 <CONF_WIFI_M2M_INT_PIN_set_inverted>:
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	1f 92       	push	r1
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	69 81       	ldd	r22, Y+1	; 0x01
    1762:	86 e0       	ldi	r24, 0x06	; 6
    1764:	0e 94 72 09 	call	0x12e4	; 0x12e4 <PORTC_pin_set_inverted>
    1768:	00 00       	nop
    176a:	0f 90       	pop	r0
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	08 95       	ret

00001772 <CONF_WIFI_M2M_INT_PIN_set_level>:
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	1f 92       	push	r1
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	69 81       	ldd	r22, Y+1	; 0x01
    1780:	86 e0       	ldi	r24, 0x06	; 6
    1782:	0e 94 17 0a 	call	0x142e	; 0x142e <PORTC_set_pin_level>
    1786:	00 00       	nop
    1788:	0f 90       	pop	r0
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	08 95       	ret

00001790 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>:
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	1f 92       	push	r1
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	69 81       	ldd	r22, Y+1	; 0x01
    179e:	87 e0       	ldi	r24, 0x07	; 7
    17a0:	0e 94 c3 09 	call	0x1386	; 0x1386 <PORTC_set_pin_dir>
    17a4:	00 00       	nop
    17a6:	0f 90       	pop	r0
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	08 95       	ret

000017ae <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>:
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	1f 92       	push	r1
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	69 81       	ldd	r22, Y+1	; 0x01
    17bc:	87 e0       	ldi	r24, 0x07	; 7
    17be:	0e 94 17 0a 	call	0x142e	; 0x142e <PORTC_set_pin_level>
    17c2:	00 00       	nop
    17c4:	0f 90       	pop	r0
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	08 95       	ret

000017cc <mcu_init>:
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	26 97       	sbiw	r28, 0x06	; 6
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	19 82       	std	Y+1, r1	; 0x01
    17dc:	12 c0       	rjmp	.+36     	; 0x1802 <mcu_init+0x36>
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	80 5f       	subi	r24, 0xF0	; 240
    17e6:	9b 4f       	sbci	r25, 0xFB	; 251
    17e8:	29 81       	ldd	r18, Y+1	; 0x01
    17ea:	22 2f       	mov	r18, r18
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	20 5f       	subi	r18, 0xF0	; 240
    17f0:	3b 4f       	sbci	r19, 0xFB	; 251
    17f2:	f9 01       	movw	r30, r18
    17f4:	20 81       	ld	r18, Z
    17f6:	28 60       	ori	r18, 0x08	; 8
    17f8:	fc 01       	movw	r30, r24
    17fa:	20 83       	st	Z, r18
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	8f 5f       	subi	r24, 0xFF	; 255
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	88 30       	cpi	r24, 0x08	; 8
    1806:	58 f3       	brcs	.-42     	; 0x17de <mcu_init+0x12>
    1808:	1a 82       	std	Y+2, r1	; 0x02
    180a:	12 c0       	rjmp	.+36     	; 0x1830 <mcu_init+0x64>
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	88 2f       	mov	r24, r24
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	80 5d       	subi	r24, 0xD0	; 208
    1814:	9b 4f       	sbci	r25, 0xFB	; 251
    1816:	2a 81       	ldd	r18, Y+2	; 0x02
    1818:	22 2f       	mov	r18, r18
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	20 5d       	subi	r18, 0xD0	; 208
    181e:	3b 4f       	sbci	r19, 0xFB	; 251
    1820:	f9 01       	movw	r30, r18
    1822:	20 81       	ld	r18, Z
    1824:	28 60       	ori	r18, 0x08	; 8
    1826:	fc 01       	movw	r30, r24
    1828:	20 83       	st	Z, r18
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	8f 5f       	subi	r24, 0xFF	; 255
    182e:	8a 83       	std	Y+2, r24	; 0x02
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	88 30       	cpi	r24, 0x08	; 8
    1834:	58 f3       	brcs	.-42     	; 0x180c <mcu_init+0x40>
    1836:	1b 82       	std	Y+3, r1	; 0x03
    1838:	12 c0       	rjmp	.+36     	; 0x185e <mcu_init+0x92>
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	88 2f       	mov	r24, r24
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	80 5b       	subi	r24, 0xB0	; 176
    1842:	9b 4f       	sbci	r25, 0xFB	; 251
    1844:	2b 81       	ldd	r18, Y+3	; 0x03
    1846:	22 2f       	mov	r18, r18
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	20 5b       	subi	r18, 0xB0	; 176
    184c:	3b 4f       	sbci	r19, 0xFB	; 251
    184e:	f9 01       	movw	r30, r18
    1850:	20 81       	ld	r18, Z
    1852:	28 60       	ori	r18, 0x08	; 8
    1854:	fc 01       	movw	r30, r24
    1856:	20 83       	st	Z, r18
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	8f 5f       	subi	r24, 0xFF	; 255
    185c:	8b 83       	std	Y+3, r24	; 0x03
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	88 30       	cpi	r24, 0x08	; 8
    1862:	58 f3       	brcs	.-42     	; 0x183a <mcu_init+0x6e>
    1864:	1c 82       	std	Y+4, r1	; 0x04
    1866:	12 c0       	rjmp	.+36     	; 0x188c <mcu_init+0xc0>
    1868:	8c 81       	ldd	r24, Y+4	; 0x04
    186a:	88 2f       	mov	r24, r24
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	80 59       	subi	r24, 0x90	; 144
    1870:	9b 4f       	sbci	r25, 0xFB	; 251
    1872:	2c 81       	ldd	r18, Y+4	; 0x04
    1874:	22 2f       	mov	r18, r18
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	20 59       	subi	r18, 0x90	; 144
    187a:	3b 4f       	sbci	r19, 0xFB	; 251
    187c:	f9 01       	movw	r30, r18
    187e:	20 81       	ld	r18, Z
    1880:	28 60       	ori	r18, 0x08	; 8
    1882:	fc 01       	movw	r30, r24
    1884:	20 83       	st	Z, r18
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	8f 5f       	subi	r24, 0xFF	; 255
    188a:	8c 83       	std	Y+4, r24	; 0x04
    188c:	8c 81       	ldd	r24, Y+4	; 0x04
    188e:	88 30       	cpi	r24, 0x08	; 8
    1890:	58 f3       	brcs	.-42     	; 0x1868 <mcu_init+0x9c>
    1892:	1d 82       	std	Y+5, r1	; 0x05
    1894:	12 c0       	rjmp	.+36     	; 0x18ba <mcu_init+0xee>
    1896:	8d 81       	ldd	r24, Y+5	; 0x05
    1898:	88 2f       	mov	r24, r24
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	80 57       	subi	r24, 0x70	; 112
    189e:	9b 4f       	sbci	r25, 0xFB	; 251
    18a0:	2d 81       	ldd	r18, Y+5	; 0x05
    18a2:	22 2f       	mov	r18, r18
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	20 57       	subi	r18, 0x70	; 112
    18a8:	3b 4f       	sbci	r19, 0xFB	; 251
    18aa:	f9 01       	movw	r30, r18
    18ac:	20 81       	ld	r18, Z
    18ae:	28 60       	ori	r18, 0x08	; 8
    18b0:	fc 01       	movw	r30, r24
    18b2:	20 83       	st	Z, r18
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
    18b6:	8f 5f       	subi	r24, 0xFF	; 255
    18b8:	8d 83       	std	Y+5, r24	; 0x05
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	88 30       	cpi	r24, 0x08	; 8
    18be:	58 f3       	brcs	.-42     	; 0x1896 <mcu_init+0xca>
    18c0:	1e 82       	std	Y+6, r1	; 0x06
    18c2:	12 c0       	rjmp	.+36     	; 0x18e8 <mcu_init+0x11c>
    18c4:	8e 81       	ldd	r24, Y+6	; 0x06
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	80 55       	subi	r24, 0x50	; 80
    18cc:	9b 4f       	sbci	r25, 0xFB	; 251
    18ce:	2e 81       	ldd	r18, Y+6	; 0x06
    18d0:	22 2f       	mov	r18, r18
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	20 55       	subi	r18, 0x50	; 80
    18d6:	3b 4f       	sbci	r19, 0xFB	; 251
    18d8:	f9 01       	movw	r30, r18
    18da:	20 81       	ld	r18, Z
    18dc:	28 60       	ori	r18, 0x08	; 8
    18de:	fc 01       	movw	r30, r24
    18e0:	20 83       	st	Z, r18
    18e2:	8e 81       	ldd	r24, Y+6	; 0x06
    18e4:	8f 5f       	subi	r24, 0xFF	; 255
    18e6:	8e 83       	std	Y+6, r24	; 0x06
    18e8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ea:	88 30       	cpi	r24, 0x08	; 8
    18ec:	58 f3       	brcs	.-42     	; 0x18c4 <mcu_init+0xf8>
    18ee:	00 00       	nop
    18f0:	26 96       	adiw	r28, 0x06	; 6
    18f2:	cd bf       	out	0x3d, r28	; 61
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	08 95       	ret

000018fc <USART_0_initialization>:
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <PC1_set_dir>
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	0e 94 5f 0b 	call	0x16be	; 0x16be <PC1_set_pull_mode>
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	0e 94 41 0b 	call	0x1682	; 0x1682 <PC0_set_dir>
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <PC0_set_level>
    191c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <USART_0_init>
    1920:	00 00       	nop
    1922:	df 91       	pop	r29
    1924:	cf 91       	pop	r28
    1926:	08 95       	ret

00001928 <SPI_0_initialization>:
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	0e 94 ba 0a 	call	0x1574	; 0x1574 <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	0e 94 ab 0a 	call	0x1556	; 0x1556 <CONF_WIFI_M2M_SPI_MISO_PIN_set_pull_mode>
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	0e 94 8d 0a 	call	0x151a	; 0x151a <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	0e 94 9c 0a 	call	0x1538	; 0x1538 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>
    1954:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <SPI_0_init>
    1958:	00 00       	nop
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	08 95       	ret

00001960 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    1968:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <mcu_init>
//	ADC_0_initialization();


	CLKCTRL_init();
    196c:	0e 94 ae 07 	call	0xf5c	; 0xf5c <CLKCTRL_init>

//	scheduler_timeout_init();

	USART_0_initialization();
    1970:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <USART_0_initialization>
	//return;
	/* PORT setting on PA2 */

	// Set pin direction to output
	CONF_WIFI_M2M_RESET_PIN_set_dir(PORT_DIR_OUT);
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CONF_WIFI_M2M_RESET_PIN_set_dir>

	CONF_WIFI_M2M_RESET_PIN_set_level(
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <CONF_WIFI_M2M_RESET_PIN_set_level>
	    false);

	/* PORT setting on PA3 */

	// Set pin direction to output
	CONF_WIFI_M2M_WAKE_PIN_set_dir(PORT_DIR_OUT);
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	0e 94 6f 0a 	call	0x14de	; 0x14de <CONF_WIFI_M2M_WAKE_PIN_set_dir>

	CONF_WIFI_M2M_WAKE_PIN_set_level(
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <CONF_WIFI_M2M_WAKE_PIN_set_level>
	    false);

	/* PORT setting on PA7 */

	// Set pin direction to output
	CONF_WIFI_M2M_SPI_CS_PIN_set_dir(PORT_DIR_OUT);
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>

	CONF_WIFI_M2M_SPI_CS_PIN_set_level(
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <CONF_WIFI_M2M_SPI_CS_PIN_set_level>
	    true);

	/* PORT setting on PB2 */

	// Set pin direction to input
	SW0_set_dir(PORT_DIR_IN);
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	0e 94 14 0b 	call	0x1628	; 0x1628 <SW0_set_dir>

	SW0_set_pull_mode(
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	0e 94 05 0b 	call	0x160a	; 0x160a <SW0_set_pull_mode>
	    PORT_PULL_UP);

	/* PORT setting on PB5 */

	// Set pin direction to output
	LED0_set_dir(PORT_DIR_OUT);
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	0e 94 23 0b 	call	0x1646	; 0x1646 <LED0_set_dir>

	LED0_set_level(
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	0e 94 32 0b 	call	0x1664	; 0x1664 <LED0_set_level>
	    // <true"> High
	    false);

	/* PORT setting on PC6 */

	CONF_WIFI_M2M_INT_PIN_set_dir(
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	0e 94 8c 0b 	call	0x1718	; 0x1718 <CONF_WIFI_M2M_INT_PIN_set_dir>
	    // <PORT_DIR_OFF"> Off
	    // <PORT_DIR_IN"> In
	    // <PORT_DIR_OUT"> Out
	    PORT_DIR_IN);

	CONF_WIFI_M2M_INT_PIN_set_level(
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	0e 94 b9 0b 	call	0x1772	; 0x1772 <CONF_WIFI_M2M_INT_PIN_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CONF_WIFI_M2M_INT_PIN_set_pull_mode(
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <CONF_WIFI_M2M_INT_PIN_set_pull_mode>
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_UP);

	CONF_WIFI_M2M_INT_PIN_set_inverted(
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	0e 94 aa 0b 	call	0x1754	; 0x1754 <CONF_WIFI_M2M_INT_PIN_set_inverted>
	    // <id> pad_invert
	    // <false"> Not inverted
	    // <true"> Inverted
	    false);

	CONF_WIFI_M2M_INT_PIN_set_isc(
    19c8:	83 e0       	ldi	r24, 0x03	; 3
    19ca:	0e 94 9b 0b 	call	0x1736	; 0x1736 <CONF_WIFI_M2M_INT_PIN_set_isc>
	    PORT_ISC_FALLING_gc);

	/* PORT setting on PC7 */

	// Set pin direction to output
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir(PORT_DIR_OUT);
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	0e 94 c8 0b 	call	0x1790	; 0x1790 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>

	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CLKCTRL_init();
    19da:	0e 94 ae 07 	call	0xf5c	; 0xf5c <CLKCTRL_init>

	scheduler_timeout_init();
    19de:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <scheduler_timeout_init>

	USART_0_initialization();
    19e2:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <USART_0_initialization>

	SPI_0_initialization();
    19e6:	0e 94 94 0c 	call	0x1928	; 0x1928 <SPI_0_initialization>

	CPUINT_init();
    19ea:	0e 94 bb 07 	call	0xf76	; 0xf76 <CPUINT_init>

	SLPCTRL_init();
    19ee:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <SLPCTRL_init>

	BOD_init();
    19f2:	0e 94 90 07 	call	0xf20	; 0xf20 <BOD_init>
}
    19f6:	00 00       	nop
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	08 95       	ret

000019fe <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    19fe:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    1a00:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    1a02:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    1a04:	40 83       	st	Z, r20
	ret                             // Return to caller
    1a06:	08 95       	ret

00001a08 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
    1a10:	80 e0       	ldi	r24, 0x00	; 0
}
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	08 95       	ret

00001a18 <SPI_0_init>:
 * \return Nothing
 */
void SPI_0_disable()
{
	SPI0.CTRLA &= ~SPI_ENABLE_bm;
}
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	80 ec       	ldi	r24, 0xC0	; 192
    1a22:	98 e0       	ldi	r25, 0x08	; 8
    1a24:	21 e3       	ldi	r18, 0x31	; 49
    1a26:	fc 01       	movw	r30, r24
    1a28:	20 83       	st	Z, r18
    1a2a:	10 92 7e 32 	sts	0x327E, r1	; 0x80327e <SPI_0_desc>
    1a2e:	00 00       	nop
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	08 95       	ret

00001a36 <SPI_0_enable>:
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	80 ec       	ldi	r24, 0xC0	; 192
    1a40:	98 e0       	ldi	r25, 0x08	; 8
    1a42:	20 ec       	ldi	r18, 0xC0	; 192
    1a44:	38 e0       	ldi	r19, 0x08	; 8
    1a46:	f9 01       	movw	r30, r18
    1a48:	20 81       	ld	r18, Z
    1a4a:	21 60       	ori	r18, 0x01	; 1
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	20 83       	st	Z, r18
    1a50:	00 00       	nop
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	08 95       	ret

00001a58 <SPI_0_exchange_byte>:
 * \param[in] data The byte to transfer
 *
 * \return Received data byte.
 */
uint8_t SPI_0_exchange_byte(uint8_t data)
{
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	1f 92       	push	r1
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	89 83       	std	Y+1, r24	; 0x01
	// Blocking wait for SPI free makes the function work
	// seamlessly also with IRQ drivers.
	while (SPI_0_desc.status == SPI_BUSY)
    1a64:	00 00       	nop
    1a66:	80 91 7e 32 	lds	r24, 0x327E	; 0x80327e <SPI_0_desc>
    1a6a:	82 30       	cpi	r24, 0x02	; 2
    1a6c:	e1 f3       	breq	.-8      	; 0x1a66 <SPI_0_exchange_byte+0xe>
		;
	SPI0.DATA = data;
    1a6e:	80 ec       	ldi	r24, 0xC0	; 192
    1a70:	98 e0       	ldi	r25, 0x08	; 8
    1a72:	29 81       	ldd	r18, Y+1	; 0x01
    1a74:	fc 01       	movw	r30, r24
    1a76:	24 83       	std	Z+4, r18	; 0x04
	while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
    1a78:	00 00       	nop
    1a7a:	80 ec       	ldi	r24, 0xC0	; 192
    1a7c:	98 e0       	ldi	r25, 0x08	; 8
    1a7e:	fc 01       	movw	r30, r24
    1a80:	83 81       	ldd	r24, Z+3	; 0x03
    1a82:	88 23       	and	r24, r24
    1a84:	d4 f7       	brge	.-12     	; 0x1a7a <SPI_0_exchange_byte+0x22>
		;
	return SPI0.DATA;
    1a86:	80 ec       	ldi	r24, 0xC0	; 192
    1a88:	98 e0       	ldi	r25, 0x08	; 8
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	84 81       	ldd	r24, Z+4	; 0x04
}
    1a8e:	0f 90       	pop	r0
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	08 95       	ret

00001a96 <scheduler_dummy_handler>:
		scheduler_start_timer_at_head();
	} else {
		if (scheduler_is_running)
			RTC.INTCTRL |= RTC_OVF_bm;
	}
}
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <scheduler_dummy_handler+0x6>
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	bc 01       	movw	r22, r24
    1aac:	cd 01       	movw	r24, r26
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	08 95       	ret

00001ab8 <scheduler_timeout_init>:
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	00 00       	nop
    1ac2:	80 e4       	ldi	r24, 0x40	; 64
    1ac4:	91 e0       	ldi	r25, 0x01	; 1
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	81 81       	ldd	r24, Z+1	; 0x01
    1aca:	88 23       	and	r24, r24
    1acc:	d1 f7       	brne	.-12     	; 0x1ac2 <scheduler_timeout_init+0xa>
    1ace:	80 e4       	ldi	r24, 0x40	; 64
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	21 e0       	ldi	r18, 0x01	; 1
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	20 83       	st	Z, r18
    1ad8:	80 e4       	ldi	r24, 0x40	; 64
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	21 e0       	ldi	r18, 0x01	; 1
    1ade:	fc 01       	movw	r30, r24
    1ae0:	27 83       	std	Z+7, r18	; 0x07
    1ae2:	80 e4       	ldi	r24, 0x40	; 64
    1ae4:	91 e0       	ldi	r25, 0x01	; 1
    1ae6:	21 e0       	ldi	r18, 0x01	; 1
    1ae8:	fc 01       	movw	r30, r24
    1aea:	22 83       	std	Z+2, r18	; 0x02
    1aec:	00 00       	nop
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	08 95       	ret

00001af4 <scheduler_stop_timeouts>:
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	80 e4       	ldi	r24, 0x40	; 64
    1afe:	91 e0       	ldi	r25, 0x01	; 1
    1b00:	20 e4       	ldi	r18, 0x40	; 64
    1b02:	31 e0       	ldi	r19, 0x01	; 1
    1b04:	f9 01       	movw	r30, r18
    1b06:	22 81       	ldd	r18, Z+2	; 0x02
    1b08:	2e 7f       	andi	r18, 0xFE	; 254
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	22 83       	std	Z+2, r18	; 0x02
    1b0e:	10 92 83 32 	sts	0x3283, r1	; 0x803283 <scheduler_absolute_time_of_last_timeout>
    1b12:	10 92 84 32 	sts	0x3284, r1	; 0x803284 <scheduler_absolute_time_of_last_timeout+0x1>
    1b16:	10 92 85 32 	sts	0x3285, r1	; 0x803285 <scheduler_absolute_time_of_last_timeout+0x2>
    1b1a:	10 92 86 32 	sts	0x3286, r1	; 0x803286 <scheduler_absolute_time_of_last_timeout+0x3>
    1b1e:	10 92 8b 32 	sts	0x328B, r1	; 0x80328b <scheduler_is_running>
    1b22:	00 00       	nop
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	08 95       	ret

00001b2a <scheduler_set_timer_duration>:
    1b2a:	ef 92       	push	r14
    1b2c:	ff 92       	push	r15
    1b2e:	0f 93       	push	r16
    1b30:	1f 93       	push	r17
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <scheduler_set_timer_duration+0xe>
    1b38:	00 d0       	rcall	.+0      	; 0x1b3a <scheduler_set_timer_duration+0x10>
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	69 83       	std	Y+1, r22	; 0x01
    1b40:	7a 83       	std	Y+2, r23	; 0x02
    1b42:	8b 83       	std	Y+3, r24	; 0x03
    1b44:	9c 83       	std	Y+4, r25	; 0x04
    1b46:	2f ef       	ldi	r18, 0xFF	; 255
    1b48:	3f ef       	ldi	r19, 0xFF	; 255
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	ab 81       	ldd	r26, Y+3	; 0x03
    1b54:	bc 81       	ldd	r27, Y+4	; 0x04
    1b56:	79 01       	movw	r14, r18
    1b58:	8a 01       	movw	r16, r20
    1b5a:	e8 1a       	sub	r14, r24
    1b5c:	f9 0a       	sbc	r15, r25
    1b5e:	0a 0b       	sbc	r16, r26
    1b60:	1b 0b       	sbc	r17, r27
    1b62:	d8 01       	movw	r26, r16
    1b64:	c7 01       	movw	r24, r14
    1b66:	80 93 87 32 	sts	0x3287, r24	; 0x803287 <scheduler_last_timer_load>
    1b6a:	90 93 88 32 	sts	0x3288, r25	; 0x803288 <scheduler_last_timer_load+0x1>
    1b6e:	a0 93 89 32 	sts	0x3289, r26	; 0x803289 <scheduler_last_timer_load+0x2>
    1b72:	b0 93 8a 32 	sts	0x328A, r27	; 0x80328a <scheduler_last_timer_load+0x3>
    1b76:	20 e4       	ldi	r18, 0x40	; 64
    1b78:	31 e0       	ldi	r19, 0x01	; 1
    1b7a:	80 91 87 32 	lds	r24, 0x3287	; 0x803287 <scheduler_last_timer_load>
    1b7e:	90 91 88 32 	lds	r25, 0x3288	; 0x803288 <scheduler_last_timer_load+0x1>
    1b82:	a0 91 89 32 	lds	r26, 0x3289	; 0x803289 <scheduler_last_timer_load+0x2>
    1b86:	b0 91 8a 32 	lds	r27, 0x328A	; 0x80328a <scheduler_last_timer_load+0x3>
    1b8a:	f9 01       	movw	r30, r18
    1b8c:	80 87       	std	Z+8, r24	; 0x08
    1b8e:	91 87       	std	Z+9, r25	; 0x09
    1b90:	00 00       	nop
    1b92:	80 e4       	ldi	r24, 0x40	; 64
    1b94:	91 e0       	ldi	r25, 0x01	; 1
    1b96:	fc 01       	movw	r30, r24
    1b98:	81 81       	ldd	r24, Z+1	; 0x01
    1b9a:	88 2f       	mov	r24, r24
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	82 70       	andi	r24, 0x02	; 2
    1ba0:	99 27       	eor	r25, r25
    1ba2:	89 2b       	or	r24, r25
    1ba4:	b1 f7       	brne	.-20     	; 0x1b92 <scheduler_set_timer_duration+0x68>
    1ba6:	00 00       	nop
    1ba8:	24 96       	adiw	r28, 0x04	; 4
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	1f 91       	pop	r17
    1bb4:	0f 91       	pop	r16
    1bb6:	ff 90       	pop	r15
    1bb8:	ef 90       	pop	r14
    1bba:	08 95       	ret

00001bbc <scheduler_start_timer_at_head>:
    1bbc:	cf 93       	push	r28
    1bbe:	df 93       	push	r29
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <scheduler_start_timer_at_head+0x6>
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <scheduler_start_timer_at_head+0x8>
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	80 e4       	ldi	r24, 0x40	; 64
    1bca:	91 e0       	ldi	r25, 0x01	; 1
    1bcc:	20 e4       	ldi	r18, 0x40	; 64
    1bce:	31 e0       	ldi	r19, 0x01	; 1
    1bd0:	f9 01       	movw	r30, r18
    1bd2:	22 81       	ldd	r18, Z+2	; 0x02
    1bd4:	2e 7f       	andi	r18, 0xFE	; 254
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	22 83       	std	Z+2, r18	; 0x02
    1bda:	80 91 7f 32 	lds	r24, 0x327F	; 0x80327f <scheduler_list_head>
    1bde:	90 91 80 32 	lds	r25, 0x3280	; 0x803280 <scheduler_list_head+0x1>
    1be2:	89 2b       	or	r24, r25
    1be4:	19 f4       	brne	.+6      	; 0x1bec <scheduler_start_timer_at_head+0x30>
    1be6:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <scheduler_stop_timeouts>
    1bea:	68 c0       	rjmp	.+208    	; 0x1cbc <scheduler_start_timer_at_head+0x100>
    1bec:	80 91 7f 32 	lds	r24, 0x327F	; 0x80327f <scheduler_list_head>
    1bf0:	90 91 80 32 	lds	r25, 0x3280	; 0x803280 <scheduler_list_head+0x1>
    1bf4:	89 2b       	or	r24, r25
    1bf6:	51 f0       	breq	.+20     	; 0x1c0c <scheduler_start_timer_at_head+0x50>
    1bf8:	80 91 7f 32 	lds	r24, 0x327F	; 0x80327f <scheduler_list_head>
    1bfc:	90 91 80 32 	lds	r25, 0x3280	; 0x803280 <scheduler_list_head+0x1>
    1c00:	fc 01       	movw	r30, r24
    1c02:	86 81       	ldd	r24, Z+6	; 0x06
    1c04:	97 81       	ldd	r25, Z+7	; 0x07
    1c06:	a0 85       	ldd	r26, Z+8	; 0x08
    1c08:	b1 85       	ldd	r27, Z+9	; 0x09
    1c0a:	03 c0       	rjmp	.+6      	; 0x1c12 <scheduler_start_timer_at_head+0x56>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	dc 01       	movw	r26, r24
    1c12:	20 91 83 32 	lds	r18, 0x3283	; 0x803283 <scheduler_absolute_time_of_last_timeout>
    1c16:	30 91 84 32 	lds	r19, 0x3284	; 0x803284 <scheduler_absolute_time_of_last_timeout+0x1>
    1c1a:	40 91 85 32 	lds	r20, 0x3285	; 0x803285 <scheduler_absolute_time_of_last_timeout+0x2>
    1c1e:	50 91 86 32 	lds	r21, 0x3286	; 0x803286 <scheduler_absolute_time_of_last_timeout+0x3>
    1c22:	82 1b       	sub	r24, r18
    1c24:	93 0b       	sbc	r25, r19
    1c26:	a4 0b       	sbc	r26, r20
    1c28:	b5 0b       	sbc	r27, r21
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	ab 83       	std	Y+3, r26	; 0x03
    1c30:	bc 83       	std	Y+4, r27	; 0x04
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	9a 81       	ldd	r25, Y+2	; 0x02
    1c36:	ab 81       	ldd	r26, Y+3	; 0x03
    1c38:	bc 81       	ldd	r27, Y+4	; 0x04
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	a1 40       	sbci	r26, 0x01	; 1
    1c3e:	b1 05       	cpc	r27, r1
    1c40:	48 f1       	brcs	.+82     	; 0x1c94 <scheduler_start_timer_at_head+0xd8>
    1c42:	80 91 83 32 	lds	r24, 0x3283	; 0x803283 <scheduler_absolute_time_of_last_timeout>
    1c46:	90 91 84 32 	lds	r25, 0x3284	; 0x803284 <scheduler_absolute_time_of_last_timeout+0x1>
    1c4a:	a0 91 85 32 	lds	r26, 0x3285	; 0x803285 <scheduler_absolute_time_of_last_timeout+0x2>
    1c4e:	b0 91 86 32 	lds	r27, 0x3286	; 0x803286 <scheduler_absolute_time_of_last_timeout+0x3>
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	af 4f       	sbci	r26, 0xFF	; 255
    1c56:	bf 4f       	sbci	r27, 0xFF	; 255
    1c58:	80 93 3a 2a 	sts	0x2A3A, r24	; 0x802a3a <scheduler_dummy+0x6>
    1c5c:	90 93 3b 2a 	sts	0x2A3B, r25	; 0x802a3b <scheduler_dummy+0x7>
    1c60:	a0 93 3c 2a 	sts	0x2A3C, r26	; 0x802a3c <scheduler_dummy+0x8>
    1c64:	b0 93 3d 2a 	sts	0x2A3D, r27	; 0x802a3d <scheduler_dummy+0x9>
    1c68:	80 91 7f 32 	lds	r24, 0x327F	; 0x80327f <scheduler_list_head>
    1c6c:	90 91 80 32 	lds	r25, 0x3280	; 0x803280 <scheduler_list_head+0x1>
    1c70:	80 93 38 2a 	sts	0x2A38, r24	; 0x802a38 <scheduler_dummy+0x4>
    1c74:	90 93 39 2a 	sts	0x2A39, r25	; 0x802a39 <scheduler_dummy+0x5>
    1c78:	84 e3       	ldi	r24, 0x34	; 52
    1c7a:	9a e2       	ldi	r25, 0x2A	; 42
    1c7c:	80 93 7f 32 	sts	0x327F, r24	; 0x80327f <scheduler_list_head>
    1c80:	90 93 80 32 	sts	0x3280, r25	; 0x803280 <scheduler_list_head+0x1>
    1c84:	8f ef       	ldi	r24, 0xFF	; 255
    1c86:	9f ef       	ldi	r25, 0xFF	; 255
    1c88:	a0 e0       	ldi	r26, 0x00	; 0
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	ab 83       	std	Y+3, r26	; 0x03
    1c92:	bc 83       	std	Y+4, r27	; 0x04
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	ab 81       	ldd	r26, Y+3	; 0x03
    1c9a:	bc 81       	ldd	r27, Y+4	; 0x04
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <scheduler_set_timer_duration>
    1ca4:	80 e4       	ldi	r24, 0x40	; 64
    1ca6:	91 e0       	ldi	r25, 0x01	; 1
    1ca8:	20 e4       	ldi	r18, 0x40	; 64
    1caa:	31 e0       	ldi	r19, 0x01	; 1
    1cac:	f9 01       	movw	r30, r18
    1cae:	22 81       	ldd	r18, Z+2	; 0x02
    1cb0:	21 60       	ori	r18, 0x01	; 1
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	22 83       	std	Z+2, r18	; 0x02
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	80 93 8b 32 	sts	0x328B, r24	; 0x80328b <scheduler_is_running>
    1cbc:	24 96       	adiw	r28, 0x04	; 4
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	08 95       	ret

00001cc8 <scheduler_enqueue_callback>:
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <scheduler_enqueue_callback+0x6>
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <scheduler_enqueue_callback+0x8>
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	8b 83       	std	Y+3, r24	; 0x03
    1cd6:	9c 83       	std	Y+4, r25	; 0x04
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	fc 01       	movw	r30, r24
    1cde:	14 82       	std	Z+4, r1	; 0x04
    1ce0:	15 82       	std	Z+5, r1	; 0x05
    1ce2:	80 91 81 32 	lds	r24, 0x3281	; 0x803281 <scheduler_execute_queue_head>
    1ce6:	90 91 82 32 	lds	r25, 0x3282	; 0x803282 <scheduler_execute_queue_head+0x1>
    1cea:	89 2b       	or	r24, r25
    1cec:	39 f4       	brne	.+14     	; 0x1cfc <scheduler_enqueue_callback+0x34>
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	80 93 81 32 	sts	0x3281, r24	; 0x803281 <scheduler_execute_queue_head>
    1cf6:	90 93 82 32 	sts	0x3282, r25	; 0x803282 <scheduler_execute_queue_head+0x1>
    1cfa:	1c c0       	rjmp	.+56     	; 0x1d34 <scheduler_enqueue_callback+0x6c>
    1cfc:	80 91 81 32 	lds	r24, 0x3281	; 0x803281 <scheduler_execute_queue_head>
    1d00:	90 91 82 32 	lds	r25, 0x3282	; 0x803282 <scheduler_execute_queue_head+0x1>
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	07 c0       	rjmp	.+14     	; 0x1d18 <scheduler_enqueue_callback+0x50>
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0e:	fc 01       	movw	r30, r24
    1d10:	84 81       	ldd	r24, Z+4	; 0x04
    1d12:	95 81       	ldd	r25, Z+5	; 0x05
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	84 81       	ldd	r24, Z+4	; 0x04
    1d20:	95 81       	ldd	r25, Z+5	; 0x05
    1d22:	89 2b       	or	r24, r25
    1d24:	91 f7       	brne	.-28     	; 0x1d0a <scheduler_enqueue_callback+0x42>
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2e:	fc 01       	movw	r30, r24
    1d30:	24 83       	std	Z+4, r18	; 0x04
    1d32:	35 83       	std	Z+5, r19	; 0x05
    1d34:	24 96       	adiw	r28, 0x04	; 4
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	08 95       	ret

00001d40 <__vector_3>:

// NOTE: assumes the callback completes before the next timer tick
ISR(RTC_CNT_vect)
{
    1d40:	1f 92       	push	r1
    1d42:	0f 92       	push	r0
    1d44:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1d48:	0f 92       	push	r0
    1d4a:	11 24       	eor	r1, r1
    1d4c:	2f 93       	push	r18
    1d4e:	3f 93       	push	r19
    1d50:	4f 93       	push	r20
    1d52:	5f 93       	push	r21
    1d54:	6f 93       	push	r22
    1d56:	7f 93       	push	r23
    1d58:	8f 93       	push	r24
    1d5a:	9f 93       	push	r25
    1d5c:	af 93       	push	r26
    1d5e:	bf 93       	push	r27
    1d60:	ef 93       	push	r30
    1d62:	ff 93       	push	r31
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <__vector_3+0x2a>
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
	timer_struct_t *next                    = scheduler_list_head->next;
    1d6e:	80 91 7f 32 	lds	r24, 0x327F	; 0x80327f <scheduler_list_head>
    1d72:	90 91 80 32 	lds	r25, 0x3280	; 0x803280 <scheduler_list_head+0x1>
    1d76:	fc 01       	movw	r30, r24
    1d78:	84 81       	ldd	r24, Z+4	; 0x04
    1d7a:	95 81       	ldd	r25, Z+5	; 0x05
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
	scheduler_absolute_time_of_last_timeout = scheduler_list_head->absolute_time;
    1d80:	80 91 7f 32 	lds	r24, 0x327F	; 0x80327f <scheduler_list_head>
    1d84:	90 91 80 32 	lds	r25, 0x3280	; 0x803280 <scheduler_list_head+0x1>
    1d88:	fc 01       	movw	r30, r24
    1d8a:	86 81       	ldd	r24, Z+6	; 0x06
    1d8c:	97 81       	ldd	r25, Z+7	; 0x07
    1d8e:	a0 85       	ldd	r26, Z+8	; 0x08
    1d90:	b1 85       	ldd	r27, Z+9	; 0x09
    1d92:	80 93 83 32 	sts	0x3283, r24	; 0x803283 <scheduler_absolute_time_of_last_timeout>
    1d96:	90 93 84 32 	sts	0x3284, r25	; 0x803284 <scheduler_absolute_time_of_last_timeout+0x1>
    1d9a:	a0 93 85 32 	sts	0x3285, r26	; 0x803285 <scheduler_absolute_time_of_last_timeout+0x2>
    1d9e:	b0 93 86 32 	sts	0x3286, r27	; 0x803286 <scheduler_absolute_time_of_last_timeout+0x3>
	scheduler_last_timer_load               = 0;
    1da2:	10 92 87 32 	sts	0x3287, r1	; 0x803287 <scheduler_last_timer_load>
    1da6:	10 92 88 32 	sts	0x3288, r1	; 0x803288 <scheduler_last_timer_load+0x1>
    1daa:	10 92 89 32 	sts	0x3289, r1	; 0x803289 <scheduler_last_timer_load+0x2>
    1dae:	10 92 8a 32 	sts	0x328A, r1	; 0x80328a <scheduler_last_timer_load+0x3>

	if (scheduler_list_head != &scheduler_dummy)
    1db2:	80 91 7f 32 	lds	r24, 0x327F	; 0x80327f <scheduler_list_head>
    1db6:	90 91 80 32 	lds	r25, 0x3280	; 0x803280 <scheduler_list_head+0x1>
    1dba:	84 53       	subi	r24, 0x34	; 52
    1dbc:	9a 42       	sbci	r25, 0x2A	; 42
    1dbe:	31 f0       	breq	.+12     	; 0x1dcc <__vector_3+0x8c>
		scheduler_enqueue_callback(scheduler_list_head);
    1dc0:	80 91 7f 32 	lds	r24, 0x327F	; 0x80327f <scheduler_list_head>
    1dc4:	90 91 80 32 	lds	r25, 0x3280	; 0x803280 <scheduler_list_head+0x1>
    1dc8:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <scheduler_enqueue_callback>

	// Remove expired timer for the list now (it is always the one at the head)
	scheduler_list_head = next;
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd0:	80 93 7f 32 	sts	0x327F, r24	; 0x80327f <scheduler_list_head>
    1dd4:	90 93 80 32 	sts	0x3280, r25	; 0x803280 <scheduler_list_head+0x1>

	scheduler_start_timer_at_head();
    1dd8:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <scheduler_start_timer_at_head>

	RTC.INTFLAGS = RTC_OVF_bm;
    1ddc:	80 e4       	ldi	r24, 0x40	; 64
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	21 e0       	ldi	r18, 0x01	; 1
    1de2:	fc 01       	movw	r30, r24
    1de4:	23 83       	std	Z+3, r18	; 0x03
}
    1de6:	00 00       	nop
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	ff 91       	pop	r31
    1df2:	ef 91       	pop	r30
    1df4:	bf 91       	pop	r27
    1df6:	af 91       	pop	r26
    1df8:	9f 91       	pop	r25
    1dfa:	8f 91       	pop	r24
    1dfc:	7f 91       	pop	r23
    1dfe:	6f 91       	pop	r22
    1e00:	5f 91       	pop	r21
    1e02:	4f 91       	pop	r20
    1e04:	3f 91       	pop	r19
    1e06:	2f 91       	pop	r18
    1e08:	0f 90       	pop	r0
    1e0a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1e0e:	0f 90       	pop	r0
    1e10:	1f 90       	pop	r1
    1e12:	18 95       	reti

00001e14 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART1.STATUS & USART_RXCIF_bm))
		;
	return USART1.RXDATAL;
}
    1e14:	cf 93       	push	r28
    1e16:	df 93       	push	r29
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	80 e2       	ldi	r24, 0x20	; 32
    1e1e:	98 e0       	ldi	r25, 0x08	; 8
    1e20:	2c e2       	ldi	r18, 0x2C	; 44
    1e22:	32 e0       	ldi	r19, 0x02	; 2
    1e24:	fc 01       	movw	r30, r24
    1e26:	20 87       	std	Z+8, r18	; 0x08
    1e28:	31 87       	std	Z+9, r19	; 0x09
    1e2a:	80 e2       	ldi	r24, 0x20	; 32
    1e2c:	98 e0       	ldi	r25, 0x08	; 8
    1e2e:	20 ec       	ldi	r18, 0xC0	; 192
    1e30:	fc 01       	movw	r30, r24
    1e32:	26 83       	std	Z+6, r18	; 0x06
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	08 95       	ret

00001e3c <USART_1_write>:
 * \param[in] data The character to write to the USART
 *
 * \return Nothing
 */
void USART_1_write(const uint8_t data)
{
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	1f 92       	push	r1
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	89 83       	std	Y+1, r24	; 0x01
	while (!(USART1.STATUS & USART_DREIF_bm))
    1e48:	00 00       	nop
    1e4a:	80 e2       	ldi	r24, 0x20	; 32
    1e4c:	98 e0       	ldi	r25, 0x08	; 8
    1e4e:	fc 01       	movw	r30, r24
    1e50:	84 81       	ldd	r24, Z+4	; 0x04
    1e52:	88 2f       	mov	r24, r24
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	80 72       	andi	r24, 0x20	; 32
    1e58:	99 27       	eor	r25, r25
    1e5a:	89 2b       	or	r24, r25
    1e5c:	b1 f3       	breq	.-20     	; 0x1e4a <USART_1_write+0xe>
		;
	USART1.TXDATAL = data;
    1e5e:	80 e2       	ldi	r24, 0x20	; 32
    1e60:	98 e0       	ldi	r25, 0x08	; 8
    1e62:	29 81       	ldd	r18, Y+1	; 0x01
    1e64:	fc 01       	movw	r30, r24
    1e66:	22 83       	std	Z+2, r18	; 0x02
}
    1e68:	00 00       	nop
    1e6a:	0f 90       	pop	r0
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	08 95       	ret

00001e72 <PORTA_set_pin_dir>:
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_deinit(void)
{
	return M2M_SUCCESS;
}
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <PORTA_set_pin_dir+0x6>
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	6a 83       	std	Y+2, r22	; 0x02
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	88 2f       	mov	r24, r24
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	81 30       	cpi	r24, 0x01	; 1
    1e88:	91 05       	cpc	r25, r1
    1e8a:	e1 f0       	breq	.+56     	; 0x1ec4 <PORTA_set_pin_dir+0x52>
    1e8c:	82 30       	cpi	r24, 0x02	; 2
    1e8e:	91 05       	cpc	r25, r1
    1e90:	71 f1       	breq	.+92     	; 0x1eee <PORTA_set_pin_dir+0x7c>
    1e92:	89 2b       	or	r24, r25
    1e94:	09 f0       	breq	.+2      	; 0x1e98 <PORTA_set_pin_dir+0x26>
    1e96:	3b c0       	rjmp	.+118    	; 0x1f0e <PORTA_set_pin_dir+0x9c>
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	80 81       	ld	r24, Z
    1ea4:	68 2f       	mov	r22, r24
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	48 2f       	mov	r20, r24
    1eaa:	50 e0       	ldi	r21, 0x00	; 0
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <PORTA_set_pin_dir+0x44>
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	4a 95       	dec	r20
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <PORTA_set_pin_dir+0x40>
    1eba:	80 95       	com	r24
    1ebc:	86 23       	and	r24, r22
    1ebe:	f9 01       	movw	r30, r18
    1ec0:	80 83       	st	Z, r24
    1ec2:	25 c0       	rjmp	.+74     	; 0x1f0e <PORTA_set_pin_dir+0x9c>
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	fc 01       	movw	r30, r24
    1ece:	80 81       	ld	r24, Z
    1ed0:	68 2f       	mov	r22, r24
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	48 2f       	mov	r20, r24
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <PORTA_set_pin_dir+0x70>
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	4a 95       	dec	r20
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <PORTA_set_pin_dir+0x6c>
    1ee6:	86 2b       	or	r24, r22
    1ee8:	f9 01       	movw	r30, r18
    1eea:	80 83       	st	Z, r24
    1eec:	10 c0       	rjmp	.+32     	; 0x1f0e <PORTA_set_pin_dir+0x9c>
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	88 2f       	mov	r24, r24
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	80 5f       	subi	r24, 0xF0	; 240
    1ef6:	9b 4f       	sbci	r25, 0xFB	; 251
    1ef8:	29 81       	ldd	r18, Y+1	; 0x01
    1efa:	22 2f       	mov	r18, r18
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	20 5f       	subi	r18, 0xF0	; 240
    1f00:	3b 4f       	sbci	r19, 0xFB	; 251
    1f02:	f9 01       	movw	r30, r18
    1f04:	20 81       	ld	r18, Z
    1f06:	28 60       	ori	r18, 0x08	; 8
    1f08:	fc 01       	movw	r30, r24
    1f0a:	20 83       	st	Z, r18
    1f0c:	00 00       	nop
    1f0e:	00 00       	nop
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	08 95       	ret

00001f1a <PORTA_set_pin_level>:
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <PORTA_set_pin_level+0x6>
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	89 83       	std	Y+1, r24	; 0x01
    1f26:	6a 83       	std	Y+2, r22	; 0x02
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	88 23       	and	r24, r24
    1f2c:	a9 f0       	breq	.+42     	; 0x1f58 <PORTA_set_pin_level+0x3e>
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	fc 01       	movw	r30, r24
    1f38:	81 81       	ldd	r24, Z+1	; 0x01
    1f3a:	68 2f       	mov	r22, r24
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	48 2f       	mov	r20, r24
    1f40:	50 e0       	ldi	r21, 0x00	; 0
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <PORTA_set_pin_level+0x32>
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	4a 95       	dec	r20
    1f4e:	e2 f7       	brpl	.-8      	; 0x1f48 <PORTA_set_pin_level+0x2e>
    1f50:	86 2b       	or	r24, r22
    1f52:	f9 01       	movw	r30, r18
    1f54:	81 83       	std	Z+1, r24	; 0x01
    1f56:	15 c0       	rjmp	.+42     	; 0x1f82 <PORTA_set_pin_level+0x68>
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	fc 01       	movw	r30, r24
    1f62:	81 81       	ldd	r24, Z+1	; 0x01
    1f64:	68 2f       	mov	r22, r24
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	48 2f       	mov	r20, r24
    1f6a:	50 e0       	ldi	r21, 0x00	; 0
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <PORTA_set_pin_level+0x5c>
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	4a 95       	dec	r20
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <PORTA_set_pin_level+0x58>
    1f7a:	80 95       	com	r24
    1f7c:	86 23       	and	r24, r22
    1f7e:	f9 01       	movw	r30, r18
    1f80:	81 83       	std	Z+1, r24	; 0x01
    1f82:	00 00       	nop
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	08 95       	ret

00001f8e <PORTC_set_pin_pull_mode>:
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <PORTC_set_pin_pull_mode+0x6>
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <PORTC_set_pin_pull_mode+0x8>
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	8b 83       	std	Y+3, r24	; 0x03
    1f9c:	6c 83       	std	Y+4, r22	; 0x04
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	88 2f       	mov	r24, r24
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	80 5b       	subi	r24, 0xB0	; 176
    1fa6:	9b 4f       	sbci	r25, 0xFB	; 251
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	9a 83       	std	Y+2, r25	; 0x02
    1fac:	8c 81       	ldd	r24, Y+4	; 0x04
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	59 f4       	brne	.+22     	; 0x1fc8 <PORTC_set_pin_pull_mode+0x3a>
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	80 81       	ld	r24, Z
    1fba:	28 2f       	mov	r18, r24
    1fbc:	28 60       	ori	r18, 0x08	; 8
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	20 83       	st	Z, r18
    1fc6:	0d c0       	rjmp	.+26     	; 0x1fe2 <PORTC_set_pin_pull_mode+0x54>
    1fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fca:	88 23       	and	r24, r24
    1fcc:	51 f4       	brne	.+20     	; 0x1fe2 <PORTC_set_pin_pull_mode+0x54>
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	80 81       	ld	r24, Z
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	27 7f       	andi	r18, 0xF7	; 247
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fde:	fc 01       	movw	r30, r24
    1fe0:	20 83       	st	Z, r18
    1fe2:	00 00       	nop
    1fe4:	24 96       	adiw	r28, 0x04	; 4
    1fe6:	cd bf       	out	0x3d, r28	; 61
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	08 95       	ret

00001ff0 <PORTC_pin_set_isc>:
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <PORTC_pin_set_isc+0x6>
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <PORTC_pin_set_isc+0x8>
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	8b 83       	std	Y+3, r24	; 0x03
    1ffe:	6c 83       	std	Y+4, r22	; 0x04
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	88 2f       	mov	r24, r24
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	80 5b       	subi	r24, 0xB0	; 176
    2008:	9b 4f       	sbci	r25, 0xFB	; 251
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	9a 83       	std	Y+2, r25	; 0x02
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	9a 81       	ldd	r25, Y+2	; 0x02
    2012:	fc 01       	movw	r30, r24
    2014:	80 81       	ld	r24, Z
    2016:	98 2f       	mov	r25, r24
    2018:	98 7f       	andi	r25, 0xF8	; 248
    201a:	8c 81       	ldd	r24, Y+4	; 0x04
    201c:	89 2b       	or	r24, r25
    201e:	28 2f       	mov	r18, r24
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	9a 81       	ldd	r25, Y+2	; 0x02
    2024:	fc 01       	movw	r30, r24
    2026:	20 83       	st	Z, r18
    2028:	00 00       	nop
    202a:	24 96       	adiw	r28, 0x04	; 4
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	08 95       	ret

00002036 <PORTC_set_pin_dir>:
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	00 d0       	rcall	.+0      	; 0x203c <PORTC_set_pin_dir+0x6>
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	6a 83       	std	Y+2, r22	; 0x02
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
    2046:	88 2f       	mov	r24, r24
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	91 05       	cpc	r25, r1
    204e:	e1 f0       	breq	.+56     	; 0x2088 <PORTC_set_pin_dir+0x52>
    2050:	82 30       	cpi	r24, 0x02	; 2
    2052:	91 05       	cpc	r25, r1
    2054:	71 f1       	breq	.+92     	; 0x20b2 <PORTC_set_pin_dir+0x7c>
    2056:	89 2b       	or	r24, r25
    2058:	09 f0       	breq	.+2      	; 0x205c <PORTC_set_pin_dir+0x26>
    205a:	3b c0       	rjmp	.+118    	; 0x20d2 <PORTC_set_pin_dir+0x9c>
    205c:	88 e0       	ldi	r24, 0x08	; 8
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	28 e0       	ldi	r18, 0x08	; 8
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	f9 01       	movw	r30, r18
    2066:	20 81       	ld	r18, Z
    2068:	62 2f       	mov	r22, r18
    206a:	29 81       	ldd	r18, Y+1	; 0x01
    206c:	42 2f       	mov	r20, r18
    206e:	50 e0       	ldi	r21, 0x00	; 0
    2070:	21 e0       	ldi	r18, 0x01	; 1
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	02 c0       	rjmp	.+4      	; 0x207a <PORTC_set_pin_dir+0x44>
    2076:	22 0f       	add	r18, r18
    2078:	33 1f       	adc	r19, r19
    207a:	4a 95       	dec	r20
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <PORTC_set_pin_dir+0x40>
    207e:	20 95       	com	r18
    2080:	26 23       	and	r18, r22
    2082:	fc 01       	movw	r30, r24
    2084:	20 83       	st	Z, r18
    2086:	25 c0       	rjmp	.+74     	; 0x20d2 <PORTC_set_pin_dir+0x9c>
    2088:	88 e0       	ldi	r24, 0x08	; 8
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	28 e0       	ldi	r18, 0x08	; 8
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	f9 01       	movw	r30, r18
    2092:	20 81       	ld	r18, Z
    2094:	62 2f       	mov	r22, r18
    2096:	29 81       	ldd	r18, Y+1	; 0x01
    2098:	42 2f       	mov	r20, r18
    209a:	50 e0       	ldi	r21, 0x00	; 0
    209c:	21 e0       	ldi	r18, 0x01	; 1
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <PORTC_set_pin_dir+0x70>
    20a2:	22 0f       	add	r18, r18
    20a4:	33 1f       	adc	r19, r19
    20a6:	4a 95       	dec	r20
    20a8:	e2 f7       	brpl	.-8      	; 0x20a2 <PORTC_set_pin_dir+0x6c>
    20aa:	26 2b       	or	r18, r22
    20ac:	fc 01       	movw	r30, r24
    20ae:	20 83       	st	Z, r18
    20b0:	10 c0       	rjmp	.+32     	; 0x20d2 <PORTC_set_pin_dir+0x9c>
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	88 2f       	mov	r24, r24
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	80 5b       	subi	r24, 0xB0	; 176
    20ba:	9b 4f       	sbci	r25, 0xFB	; 251
    20bc:	29 81       	ldd	r18, Y+1	; 0x01
    20be:	22 2f       	mov	r18, r18
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	20 5b       	subi	r18, 0xB0	; 176
    20c4:	3b 4f       	sbci	r19, 0xFB	; 251
    20c6:	f9 01       	movw	r30, r18
    20c8:	20 81       	ld	r18, Z
    20ca:	28 60       	ori	r18, 0x08	; 8
    20cc:	fc 01       	movw	r30, r24
    20ce:	20 83       	st	Z, r18
    20d0:	00 00       	nop
    20d2:	00 00       	nop
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	08 95       	ret

000020de <PORTC_set_pin_level>:
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	00 d0       	rcall	.+0      	; 0x20e4 <PORTC_set_pin_level+0x6>
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	6a 83       	std	Y+2, r22	; 0x02
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	88 23       	and	r24, r24
    20f0:	a9 f0       	breq	.+42     	; 0x211c <PORTC_set_pin_level+0x3e>
    20f2:	88 e0       	ldi	r24, 0x08	; 8
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	28 e0       	ldi	r18, 0x08	; 8
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	f9 01       	movw	r30, r18
    20fc:	21 81       	ldd	r18, Z+1	; 0x01
    20fe:	62 2f       	mov	r22, r18
    2100:	29 81       	ldd	r18, Y+1	; 0x01
    2102:	42 2f       	mov	r20, r18
    2104:	50 e0       	ldi	r21, 0x00	; 0
    2106:	21 e0       	ldi	r18, 0x01	; 1
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <PORTC_set_pin_level+0x32>
    210c:	22 0f       	add	r18, r18
    210e:	33 1f       	adc	r19, r19
    2110:	4a 95       	dec	r20
    2112:	e2 f7       	brpl	.-8      	; 0x210c <PORTC_set_pin_level+0x2e>
    2114:	26 2b       	or	r18, r22
    2116:	fc 01       	movw	r30, r24
    2118:	21 83       	std	Z+1, r18	; 0x01
    211a:	15 c0       	rjmp	.+42     	; 0x2146 <PORTC_set_pin_level+0x68>
    211c:	88 e0       	ldi	r24, 0x08	; 8
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	28 e0       	ldi	r18, 0x08	; 8
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	f9 01       	movw	r30, r18
    2126:	21 81       	ldd	r18, Z+1	; 0x01
    2128:	62 2f       	mov	r22, r18
    212a:	29 81       	ldd	r18, Y+1	; 0x01
    212c:	42 2f       	mov	r20, r18
    212e:	50 e0       	ldi	r21, 0x00	; 0
    2130:	21 e0       	ldi	r18, 0x01	; 1
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	02 c0       	rjmp	.+4      	; 0x213a <PORTC_set_pin_level+0x5c>
    2136:	22 0f       	add	r18, r18
    2138:	33 1f       	adc	r19, r19
    213a:	4a 95       	dec	r20
    213c:	e2 f7       	brpl	.-8      	; 0x2136 <PORTC_set_pin_level+0x58>
    213e:	20 95       	com	r18
    2140:	26 23       	and	r18, r22
    2142:	fc 01       	movw	r30, r24
    2144:	21 83       	std	Z+1, r18	; 0x01
    2146:	00 00       	nop
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	08 95       	ret

00002152 <PORTC_get_pin_level>:
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	1f 92       	push	r1
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	88 e0       	ldi	r24, 0x08	; 8
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	fc 01       	movw	r30, r24
    2164:	82 81       	ldd	r24, Z+2	; 0x02
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	48 2f       	mov	r20, r24
    216e:	50 e0       	ldi	r21, 0x00	; 0
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	02 c0       	rjmp	.+4      	; 0x217a <PORTC_get_pin_level+0x28>
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	4a 95       	dec	r20
    217c:	e2 f7       	brpl	.-8      	; 0x2176 <PORTC_get_pin_level+0x24>
    217e:	82 23       	and	r24, r18
    2180:	93 23       	and	r25, r19
    2182:	21 e0       	ldi	r18, 0x01	; 1
    2184:	89 2b       	or	r24, r25
    2186:	09 f4       	brne	.+2      	; 0x218a <PORTC_get_pin_level+0x38>
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	82 2f       	mov	r24, r18
    218c:	0f 90       	pop	r0
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	08 95       	ret

00002194 <CONF_WIFI_M2M_RESET_PIN_set_dir>:
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	1f 92       	push	r1
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	69 81       	ldd	r22, Y+1	; 0x01
    21a2:	82 e0       	ldi	r24, 0x02	; 2
    21a4:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <PORTA_set_pin_dir>
    21a8:	00 00       	nop
    21aa:	0f 90       	pop	r0
    21ac:	df 91       	pop	r29
    21ae:	cf 91       	pop	r28
    21b0:	08 95       	ret

000021b2 <CONF_WIFI_M2M_RESET_PIN_set_level>:
    21b2:	cf 93       	push	r28
    21b4:	df 93       	push	r29
    21b6:	1f 92       	push	r1
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	69 81       	ldd	r22, Y+1	; 0x01
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <PORTA_set_pin_level>
    21c6:	00 00       	nop
    21c8:	0f 90       	pop	r0
    21ca:	df 91       	pop	r29
    21cc:	cf 91       	pop	r28
    21ce:	08 95       	ret

000021d0 <CONF_WIFI_M2M_WAKE_PIN_set_dir>:
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	1f 92       	push	r1
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	69 81       	ldd	r22, Y+1	; 0x01
    21de:	83 e0       	ldi	r24, 0x03	; 3
    21e0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <PORTA_set_pin_dir>
    21e4:	00 00       	nop
    21e6:	0f 90       	pop	r0
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	08 95       	ret

000021ee <CONF_WIFI_M2M_INT_PIN_set_pull_mode>:
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	1f 92       	push	r1
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	89 83       	std	Y+1, r24	; 0x01
    21fa:	69 81       	ldd	r22, Y+1	; 0x01
    21fc:	86 e0       	ldi	r24, 0x06	; 6
    21fe:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <PORTC_set_pin_pull_mode>
    2202:	00 00       	nop
    2204:	0f 90       	pop	r0
    2206:	df 91       	pop	r29
    2208:	cf 91       	pop	r28
    220a:	08 95       	ret

0000220c <CONF_WIFI_M2M_INT_PIN_set_dir>:
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	1f 92       	push	r1
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	69 81       	ldd	r22, Y+1	; 0x01
    221a:	86 e0       	ldi	r24, 0x06	; 6
    221c:	0e 94 1b 10 	call	0x2036	; 0x2036 <PORTC_set_pin_dir>
    2220:	00 00       	nop
    2222:	0f 90       	pop	r0
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	08 95       	ret

0000222a <CONF_WIFI_M2M_INT_PIN_set_isc>:
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	1f 92       	push	r1
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	89 83       	std	Y+1, r24	; 0x01
    2236:	69 81       	ldd	r22, Y+1	; 0x01
    2238:	86 e0       	ldi	r24, 0x06	; 6
    223a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <PORTC_pin_set_isc>
    223e:	00 00       	nop
    2240:	0f 90       	pop	r0
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	08 95       	ret

00002248 <CONF_WIFI_M2M_INT_PIN_get_level>:
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	86 e0       	ldi	r24, 0x06	; 6
    2252:	0e 94 a9 10 	call	0x2152	; 0x2152 <PORTC_get_pin_level>
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	08 95       	ret

0000225c <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>:
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29
    2260:	1f 92       	push	r1
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	69 81       	ldd	r22, Y+1	; 0x01
    226a:	87 e0       	ldi	r24, 0x07	; 7
    226c:	0e 94 1b 10 	call	0x2036	; 0x2036 <PORTC_set_pin_dir>
    2270:	00 00       	nop
    2272:	0f 90       	pop	r0
    2274:	df 91       	pop	r29
    2276:	cf 91       	pop	r28
    2278:	08 95       	ret

0000227a <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>:
    227a:	cf 93       	push	r28
    227c:	df 93       	push	r29
    227e:	1f 92       	push	r1
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	89 83       	std	Y+1, r24	; 0x01
    2286:	69 81       	ldd	r22, Y+1	; 0x01
    2288:	87 e0       	ldi	r24, 0x07	; 7
    228a:	0e 94 6f 10 	call	0x20de	; 0x20de <PORTC_set_pin_level>
    228e:	00 00       	nop
    2290:	0f 90       	pop	r0
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	08 95       	ret

00002298 <__vector_24>:
    2298:	1f 92       	push	r1
    229a:	0f 92       	push	r0
    229c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    22a0:	0f 92       	push	r0
    22a2:	11 24       	eor	r1, r1
    22a4:	2f 93       	push	r18
    22a6:	3f 93       	push	r19
    22a8:	4f 93       	push	r20
    22aa:	5f 93       	push	r21
    22ac:	6f 93       	push	r22
    22ae:	7f 93       	push	r23
    22b0:	8f 93       	push	r24
    22b2:	9f 93       	push	r25
    22b4:	af 93       	push	r26
    22b6:	bf 93       	push	r27
    22b8:	ef 93       	push	r30
    22ba:	ff 93       	push	r31
    22bc:	cf 93       	push	r28
    22be:	df 93       	push	r29
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	0e 94 24 11 	call	0x2248	; 0x2248 <CONF_WIFI_M2M_INT_PIN_get_level>
    22c8:	98 2f       	mov	r25, r24
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	89 27       	eor	r24, r25
    22ce:	88 23       	and	r24, r24
    22d0:	61 f0       	breq	.+24     	; 0x22ea <__vector_24+0x52>
    22d2:	80 91 8c 32 	lds	r24, 0x328C	; 0x80328c <gpfIsr>
    22d6:	90 91 8d 32 	lds	r25, 0x328D	; 0x80328d <gpfIsr+0x1>
    22da:	89 2b       	or	r24, r25
    22dc:	31 f0       	breq	.+12     	; 0x22ea <__vector_24+0x52>
    22de:	80 91 8c 32 	lds	r24, 0x328C	; 0x80328c <gpfIsr>
    22e2:	90 91 8d 32 	lds	r25, 0x328D	; 0x80328d <gpfIsr+0x1>
    22e6:	fc 01       	movw	r30, r24
    22e8:	09 95       	icall
    22ea:	8b e0       	ldi	r24, 0x0B	; 11
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	20 ec       	ldi	r18, 0xC0	; 192
    22f0:	fc 01       	movw	r30, r24
    22f2:	20 83       	st	Z, r18
    22f4:	00 00       	nop
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	ff 91       	pop	r31
    22fc:	ef 91       	pop	r30
    22fe:	bf 91       	pop	r27
    2300:	af 91       	pop	r26
    2302:	9f 91       	pop	r25
    2304:	8f 91       	pop	r24
    2306:	7f 91       	pop	r23
    2308:	6f 91       	pop	r22
    230a:	5f 91       	pop	r21
    230c:	4f 91       	pop	r20
    230e:	3f 91       	pop	r19
    2310:	2f 91       	pop	r18
    2312:	0f 90       	pop	r0
    2314:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2318:	0f 90       	pop	r0
    231a:	1f 90       	pop	r1
    231c:	18 95       	reti

0000231e <init_chip_pins>:
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	0e 94 ca 10 	call	0x2194	; 0x2194 <CONF_WIFI_M2M_RESET_PIN_set_dir>
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	0e 94 2e 11 	call	0x225c	; 0x225c <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <CONF_WIFI_M2M_WAKE_PIN_set_dir>
    2338:	00 00       	nop
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	08 95       	ret

00002340 <nm_bsp_init>:
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	10 92 8c 32 	sts	0x328C, r1	; 0x80328c <gpfIsr>
    234c:	10 92 8d 32 	sts	0x328D, r1	; 0x80328d <gpfIsr+0x1>
    2350:	0e 94 8f 11 	call	0x231e	; 0x231e <init_chip_pins>
    2354:	0e 94 b1 11 	call	0x2362	; 0x2362 <nm_bsp_reset>
    2358:	78 94       	sei
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	08 95       	ret

00002362 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
	//ioport_set_pin_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, false);
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(false);
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	0e 94 3d 11 	call	0x227a	; 0x227a <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>
	
	//ioport_set_pin_level(CONF_WIFI_M2M_RESET_PIN, false);
	CONF_WIFI_M2M_RESET_PIN_set_level(false);
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <CONF_WIFI_M2M_RESET_PIN_set_level>
	
// 	asm volatile ("nop");
// 	PORTB_set_pin_level(5,true);
	nm_bsp_sleep(1);
    2376:	61 e0       	ldi	r22, 0x01	; 1
    2378:	70 e0       	ldi	r23, 0x00	; 0
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <nm_bsp_sleep>
// 	PORTB_set_pin_level(5,false);
// 	asm volatile ("nop");

	//ioport_set_pin_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, true);
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(true);
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	0e 94 3d 11 	call	0x227a	; 0x227a <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>
	
	nm_bsp_sleep(10);
    2388:	6a e0       	ldi	r22, 0x0A	; 10
    238a:	70 e0       	ldi	r23, 0x00	; 0
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <nm_bsp_sleep>

	//ioport_set_pin_level(CONF_WIFI_M2M_RESET_PIN, true);
	CONF_WIFI_M2M_RESET_PIN_set_level(true);
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <CONF_WIFI_M2M_RESET_PIN_set_level>
	
	//nm_bsp_sleep(100);
}
    239a:	00 00       	nop
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	08 95       	ret

000023a2 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	62 97       	sbiw	r28, 0x12	; 18
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	6f 87       	std	Y+15, r22	; 0x0f
    23b2:	78 8b       	std	Y+16, r23	; 0x10
    23b4:	89 8b       	std	Y+17, r24	; 0x11
    23b6:	9a 8b       	std	Y+18, r25	; 0x12
	while (u32TimeMsec--) {
    23b8:	72 c0       	rjmp	.+228    	; 0x249e <nm_bsp_sleep+0xfc>
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	a0 e8       	ldi	r26, 0x80	; 128
    23c0:	bf e3       	ldi	r27, 0x3F	; 63
    23c2:	89 83       	std	Y+1, r24	; 0x01
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	ab 83       	std	Y+3, r26	; 0x03
    23c8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e4       	ldi	r19, 0x40	; 64
    23ce:	4c e1       	ldi	r20, 0x1C	; 28
    23d0:	55 e4       	ldi	r21, 0x45	; 69
    23d2:	69 81       	ldd	r22, Y+1	; 0x01
    23d4:	7a 81       	ldd	r23, Y+2	; 0x02
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	0e 94 dc 3a 	call	0x75b8	; 0x75b8 <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	8d 83       	std	Y+5, r24	; 0x05
    23e4:	9e 83       	std	Y+6, r25	; 0x06
    23e6:	af 83       	std	Y+7, r26	; 0x07
    23e8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e8       	ldi	r20, 0x80	; 128
    23f0:	5f e3       	ldi	r21, 0x3F	; 63
    23f2:	6d 81       	ldd	r22, Y+5	; 0x05
    23f4:	7e 81       	ldd	r23, Y+6	; 0x06
    23f6:	8f 81       	ldd	r24, Y+7	; 0x07
    23f8:	98 85       	ldd	r25, Y+8	; 0x08
    23fa:	0e 94 56 3a 	call	0x74ac	; 0x74ac <__cmpsf2>
    23fe:	88 23       	and	r24, r24
    2400:	2c f4       	brge	.+10     	; 0x240c <nm_bsp_sleep+0x6a>
		__ticks = 1;
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	89 87       	std	Y+9, r24	; 0x09
    2408:	9a 87       	std	Y+10, r25	; 0x0a
    240a:	3f c0       	rjmp	.+126    	; 0x248a <nm_bsp_sleep+0xe8>
	else if (__tmp > 65535)
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	3f ef       	ldi	r19, 0xFF	; 255
    2410:	4f e7       	ldi	r20, 0x7F	; 127
    2412:	57 e4       	ldi	r21, 0x47	; 71
    2414:	6d 81       	ldd	r22, Y+5	; 0x05
    2416:	7e 81       	ldd	r23, Y+6	; 0x06
    2418:	8f 81       	ldd	r24, Y+7	; 0x07
    241a:	98 85       	ldd	r25, Y+8	; 0x08
    241c:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <__gesf2>
    2420:	18 16       	cp	r1, r24
    2422:	4c f5       	brge	.+82     	; 0x2476 <nm_bsp_sleep+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e2       	ldi	r20, 0x20	; 32
    242a:	51 e4       	ldi	r21, 0x41	; 65
    242c:	69 81       	ldd	r22, Y+1	; 0x01
    242e:	7a 81       	ldd	r23, Y+2	; 0x02
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	0e 94 dc 3a 	call	0x75b8	; 0x75b8 <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	bc 01       	movw	r22, r24
    243e:	cd 01       	movw	r24, r26
    2440:	0e 94 5b 3a 	call	0x74b6	; 0x74b6 <__fixunssfsi>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	89 87       	std	Y+9, r24	; 0x09
    244a:	9a 87       	std	Y+10, r25	; 0x0a
    244c:	0f c0       	rjmp	.+30     	; 0x246c <nm_bsp_sleep+0xca>
    244e:	8a ef       	ldi	r24, 0xFA	; 250
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	8b 87       	std	Y+11, r24	; 0x0b
    2454:	9c 87       	std	Y+12, r25	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2456:	8b 85       	ldd	r24, Y+11	; 0x0b
    2458:	9c 85       	ldd	r25, Y+12	; 0x0c
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <nm_bsp_sleep+0xb8>
    245e:	8b 87       	std	Y+11, r24	; 0x0b
    2460:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2462:	89 85       	ldd	r24, Y+9	; 0x09
    2464:	9a 85       	ldd	r25, Y+10	; 0x0a
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	89 87       	std	Y+9, r24	; 0x09
    246a:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246c:	89 85       	ldd	r24, Y+9	; 0x09
    246e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2470:	89 2b       	or	r24, r25
    2472:	69 f7       	brne	.-38     	; 0x244e <nm_bsp_sleep+0xac>
    2474:	14 c0       	rjmp	.+40     	; 0x249e <nm_bsp_sleep+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2476:	6d 81       	ldd	r22, Y+5	; 0x05
    2478:	7e 81       	ldd	r23, Y+6	; 0x06
    247a:	8f 81       	ldd	r24, Y+7	; 0x07
    247c:	98 85       	ldd	r25, Y+8	; 0x08
    247e:	0e 94 5b 3a 	call	0x74b6	; 0x74b6 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	89 87       	std	Y+9, r24	; 0x09
    2488:	9a 87       	std	Y+10, r25	; 0x0a
    248a:	89 85       	ldd	r24, Y+9	; 0x09
    248c:	9a 85       	ldd	r25, Y+10	; 0x0a
    248e:	8d 87       	std	Y+13, r24	; 0x0d
    2490:	9e 87       	std	Y+14, r25	; 0x0e
    2492:	8d 85       	ldd	r24, Y+13	; 0x0d
    2494:	9e 85       	ldd	r25, Y+14	; 0x0e
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <nm_bsp_sleep+0xf4>
    249a:	8d 87       	std	Y+13, r24	; 0x0d
    249c:	9e 87       	std	Y+14, r25	; 0x0e
    249e:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a0:	98 89       	ldd	r25, Y+16	; 0x10
    24a2:	a9 89       	ldd	r26, Y+17	; 0x11
    24a4:	ba 89       	ldd	r27, Y+18	; 0x12
    24a6:	9c 01       	movw	r18, r24
    24a8:	ad 01       	movw	r20, r26
    24aa:	21 50       	subi	r18, 0x01	; 1
    24ac:	31 09       	sbc	r19, r1
    24ae:	41 09       	sbc	r20, r1
    24b0:	51 09       	sbc	r21, r1
    24b2:	2f 87       	std	Y+15, r18	; 0x0f
    24b4:	38 8b       	std	Y+16, r19	; 0x10
    24b6:	49 8b       	std	Y+17, r20	; 0x11
    24b8:	5a 8b       	std	Y+18, r21	; 0x12
    24ba:	89 2b       	or	r24, r25
    24bc:	8a 2b       	or	r24, r26
    24be:	8b 2b       	or	r24, r27
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <nm_bsp_sleep+0x122>
    24c2:	7b cf       	rjmp	.-266    	; 0x23ba <nm_bsp_sleep+0x18>
		_delay_ms(1);
	}
}
    24c4:	00 00       	nop
    24c6:	62 96       	adiw	r28, 0x12	; 18
    24c8:	cd bf       	out	0x3d, r28	; 61
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	08 95       	ret

000024d2 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <nm_bsp_register_isr+0x6>
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	9a 83       	std	Y+2, r25	; 0x02
	gpfIsr = pfIsr;
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	9a 81       	ldd	r25, Y+2	; 0x02
    24e4:	80 93 8c 32 	sts	0x328C, r24	; 0x80328c <gpfIsr>
    24e8:	90 93 8d 32 	sts	0x328D, r25	; 0x80328d <gpfIsr+0x1>

	//ioport_configure_pin(CONF_WIFI_M2M_INT_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	CONF_WIFI_M2M_INT_PIN_set_dir(PORT_DIR_IN);
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	0e 94 06 11 	call	0x220c	; 0x220c <CONF_WIFI_M2M_INT_PIN_set_dir>
	CONF_WIFI_M2M_INT_PIN_set_pull_mode(PORT_PULL_UP);
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	0e 94 f7 10 	call	0x21ee	; 0x21ee <CONF_WIFI_M2M_INT_PIN_set_pull_mode>
	CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    24f8:	83 e0       	ldi	r24, 0x03	; 3
    24fa:	0e 94 15 11 	call	0x222a	; 0x222a <CONF_WIFI_M2M_INT_PIN_set_isc>
	
	/* Enable interrupt */
// 	CONF_WIFI_M2M_INT_INTMASK_reg = CONF_WIFI_M2M_INT_INTFLAG_Msk;
// 	CONF_WIFI_M2M_INT_INTCTRL_reg = CONF_WIFI_M2M_INT_INTCTRL_Msk;
	CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    24fe:	83 e0       	ldi	r24, 0x03	; 3
    2500:	0e 94 15 11 	call	0x222a	; 0x222a <CONF_WIFI_M2M_INT_PIN_set_isc>
	//ENABLE_INTERRUPTS();
	sei();
    2504:	78 94       	sei
}
    2506:	00 00       	nop
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	08 95       	ret

00002512 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	1f 92       	push	r1
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
    251c:	89 83       	std	Y+1, r24	; 0x01
	if (u8Enable)
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	88 23       	and	r24, r24
    2522:	21 f0       	breq	.+8      	; 0x252c <nm_bsp_interrupt_ctrl+0x1a>
	{
		//CONF_WIFI_M2M_INT_INTMASK_reg |= CONF_WIFI_M2M_INT_INTFLAG_Msk;
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    2524:	83 e0       	ldi	r24, 0x03	; 3
    2526:	0e 94 15 11 	call	0x222a	; 0x222a <CONF_WIFI_M2M_INT_PIN_set_isc>
	else
	{
		//CONF_WIFI_M2M_INT_INTMASK_reg &= ~CONF_WIFI_M2M_INT_INTFLAG_Msk;
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_INTDISABLE_gc);
	}
}
    252a:	03 c0       	rjmp	.+6      	; 0x2532 <nm_bsp_interrupt_ctrl+0x20>
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
	}
	else
	{
		//CONF_WIFI_M2M_INT_INTMASK_reg &= ~CONF_WIFI_M2M_INT_INTFLAG_Msk;
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_INTDISABLE_gc);
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	0e 94 15 11 	call	0x222a	; 0x222a <CONF_WIFI_M2M_INT_PIN_set_isc>
	}
}
    2532:	00 00       	nop
    2534:	0f 90       	pop	r0
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	08 95       	ret

0000253c <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	00 d0       	rcall	.+0      	; 0x2542 <PORTA_set_pin_dir+0x6>
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	89 83       	std	Y+1, r24	; 0x01
    2548:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    254a:	8a 81       	ldd	r24, Y+2	; 0x02
    254c:	88 2f       	mov	r24, r24
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	81 30       	cpi	r24, 0x01	; 1
    2552:	91 05       	cpc	r25, r1
    2554:	e1 f0       	breq	.+56     	; 0x258e <PORTA_set_pin_dir+0x52>
    2556:	82 30       	cpi	r24, 0x02	; 2
    2558:	91 05       	cpc	r25, r1
    255a:	71 f1       	breq	.+92     	; 0x25b8 <PORTA_set_pin_dir+0x7c>
    255c:	89 2b       	or	r24, r25
    255e:	09 f0       	breq	.+2      	; 0x2562 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    2560:	3b c0       	rjmp	.+118    	; 0x25d8 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	fc 01       	movw	r30, r24
    256c:	80 81       	ld	r24, Z
    256e:	68 2f       	mov	r22, r24
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	48 2f       	mov	r20, r24
    2574:	50 e0       	ldi	r21, 0x00	; 0
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <PORTA_set_pin_dir+0x44>
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	4a 95       	dec	r20
    2582:	e2 f7       	brpl	.-8      	; 0x257c <PORTA_set_pin_dir+0x40>
    2584:	80 95       	com	r24
    2586:	86 23       	and	r24, r22
    2588:	f9 01       	movw	r30, r18
    258a:	80 83       	st	Z, r24
		break;
    258c:	25 c0       	rjmp	.+74     	; 0x25d8 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	fc 01       	movw	r30, r24
    2598:	80 81       	ld	r24, Z
    259a:	68 2f       	mov	r22, r24
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	48 2f       	mov	r20, r24
    25a0:	50 e0       	ldi	r21, 0x00	; 0
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <PORTA_set_pin_dir+0x70>
    25a8:	88 0f       	add	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	4a 95       	dec	r20
    25ae:	e2 f7       	brpl	.-8      	; 0x25a8 <PORTA_set_pin_dir+0x6c>
    25b0:	86 2b       	or	r24, r22
    25b2:	f9 01       	movw	r30, r18
    25b4:	80 83       	st	Z, r24
		break;
    25b6:	10 c0       	rjmp	.+32     	; 0x25d8 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	88 2f       	mov	r24, r24
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	80 5f       	subi	r24, 0xF0	; 240
    25c0:	9b 4f       	sbci	r25, 0xFB	; 251
    25c2:	29 81       	ldd	r18, Y+1	; 0x01
    25c4:	22 2f       	mov	r18, r18
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	20 5f       	subi	r18, 0xF0	; 240
    25ca:	3b 4f       	sbci	r19, 0xFB	; 251
    25cc:	f9 01       	movw	r30, r18
    25ce:	20 81       	ld	r18, Z
    25d0:	28 60       	ori	r18, 0x08	; 8
    25d2:	fc 01       	movw	r30, r24
    25d4:	20 83       	st	Z, r18
		break;
    25d6:	00 00       	nop
	default:
		break;
	}
}
    25d8:	00 00       	nop
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	08 95       	ret

000025e4 <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	00 d0       	rcall	.+0      	; 0x25ea <PORTA_set_pin_level+0x6>
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	89 83       	std	Y+1, r24	; 0x01
    25f0:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	88 23       	and	r24, r24
    25f6:	a9 f0       	breq	.+42     	; 0x2622 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	fc 01       	movw	r30, r24
    2602:	81 81       	ldd	r24, Z+1	; 0x01
    2604:	68 2f       	mov	r22, r24
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	48 2f       	mov	r20, r24
    260a:	50 e0       	ldi	r21, 0x00	; 0
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <PORTA_set_pin_level+0x32>
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	4a 95       	dec	r20
    2618:	e2 f7       	brpl	.-8      	; 0x2612 <PORTA_set_pin_level+0x2e>
    261a:	86 2b       	or	r24, r22
    261c:	f9 01       	movw	r30, r18
    261e:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
    2620:	15 c0       	rjmp	.+42     	; 0x264c <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	fc 01       	movw	r30, r24
    262c:	81 81       	ldd	r24, Z+1	; 0x01
    262e:	68 2f       	mov	r22, r24
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	48 2f       	mov	r20, r24
    2634:	50 e0       	ldi	r21, 0x00	; 0
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	02 c0       	rjmp	.+4      	; 0x2640 <PORTA_set_pin_level+0x5c>
    263c:	88 0f       	add	r24, r24
    263e:	99 1f       	adc	r25, r25
    2640:	4a 95       	dec	r20
    2642:	e2 f7       	brpl	.-8      	; 0x263c <PORTA_set_pin_level+0x58>
    2644:	80 95       	com	r24
    2646:	86 23       	and	r24, r22
    2648:	f9 01       	movw	r30, r18
    264a:	81 83       	std	Z+1, r24	; 0x01
	}
}
    264c:	00 00       	nop
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir(const enum port_dir dir)
{
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	1f 92       	push	r1
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(4, dir);
    2664:	69 81       	ldd	r22, Y+1	; 0x01
    2666:	84 e0       	ldi	r24, 0x04	; 4
    2668:	0e 94 9e 12 	call	0x253c	; 0x253c <PORTA_set_pin_dir>
}
    266c:	00 00       	nop
    266e:	0f 90       	pop	r0
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	08 95       	ret

00002676 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void CONF_WIFI_M2M_SPI_MOSI_PIN_set_level(const bool level)
{
    2676:	cf 93       	push	r28
    2678:	df 93       	push	r29
    267a:	1f 92       	push	r1
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(4, level);
    2682:	69 81       	ldd	r22, Y+1	; 0x01
    2684:	84 e0       	ldi	r24, 0x04	; 4
    2686:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <PORTA_set_pin_level>
}
    268a:	00 00       	nop
    268c:	0f 90       	pop	r0
    268e:	df 91       	pop	r29
    2690:	cf 91       	pop	r28
    2692:	08 95       	ret

00002694 <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_MISO_PIN_set_dir(const enum port_dir dir)
{
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	1f 92       	push	r1
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(5, dir);
    26a0:	69 81       	ldd	r22, Y+1	; 0x01
    26a2:	85 e0       	ldi	r24, 0x05	; 5
    26a4:	0e 94 9e 12 	call	0x253c	; 0x253c <PORTA_set_pin_dir>
}
    26a8:	00 00       	nop
    26aa:	0f 90       	pop	r0
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	08 95       	ret

000026b2 <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_SCK_PIN_set_dir(const enum port_dir dir)
{
    26b2:	cf 93       	push	r28
    26b4:	df 93       	push	r29
    26b6:	1f 92       	push	r1
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(6, dir);
    26be:	69 81       	ldd	r22, Y+1	; 0x01
    26c0:	86 e0       	ldi	r24, 0x06	; 6
    26c2:	0e 94 9e 12 	call	0x253c	; 0x253c <PORTA_set_pin_dir>
}
    26c6:	00 00       	nop
    26c8:	0f 90       	pop	r0
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	08 95       	ret

000026d0 <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void CONF_WIFI_M2M_SPI_SCK_PIN_set_level(const bool level)
{
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	1f 92       	push	r1
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(6, level);
    26dc:	69 81       	ldd	r22, Y+1	; 0x01
    26de:	86 e0       	ldi	r24, 0x06	; 6
    26e0:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <PORTA_set_pin_level>
}
    26e4:	00 00       	nop
    26e6:	0f 90       	pop	r0
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	08 95       	ret

000026ee <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_CS_PIN_set_dir(const enum port_dir dir)
{
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	1f 92       	push	r1
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(7, dir);
    26fa:	69 81       	ldd	r22, Y+1	; 0x01
    26fc:	87 e0       	ldi	r24, 0x07	; 7
    26fe:	0e 94 9e 12 	call	0x253c	; 0x253c <PORTA_set_pin_dir>
}
    2702:	00 00       	nop
    2704:	0f 90       	pop	r0
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	08 95       	ret

0000270c <CONF_WIFI_M2M_SPI_CS_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void CONF_WIFI_M2M_SPI_CS_PIN_set_level(const bool level)
{
    270c:	cf 93       	push	r28
    270e:	df 93       	push	r29
    2710:	1f 92       	push	r1
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
    2716:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(7, level);
    2718:	69 81       	ldd	r22, Y+1	; 0x01
    271a:	87 e0       	ldi	r24, 0x07	; 7
    271c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <PORTA_set_pin_level>
}
    2720:	00 00       	nop
    2722:	0f 90       	pop	r0
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	08 95       	ret

0000272a <spi_rw>:
}
#endif

#ifdef CONF_WINC_USE_SPI
static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	2d 97       	sbiw	r28, 0x0d	; 13
    2734:	cd bf       	out	0x3d, r28	; 61
    2736:	de bf       	out	0x3e, r29	; 62
    2738:	88 87       	std	Y+8, r24	; 0x08
    273a:	99 87       	std	Y+9, r25	; 0x09
    273c:	6a 87       	std	Y+10, r22	; 0x0a
    273e:	7b 87       	std	Y+11, r23	; 0x0b
    2740:	4c 87       	std	Y+12, r20	; 0x0c
    2742:	5d 87       	std	Y+13, r21	; 0x0d
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8 u8Dummy = 0;
    2744:	1f 82       	std	Y+7, r1	; 0x07
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    2746:	19 82       	std	Y+1, r1	; 0x01
    2748:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t txd_data = 0;
    274a:	1b 82       	std	Y+3, r1	; 0x03
    274c:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t rxd_data = 0;
    274e:	1d 82       	std	Y+5, r1	; 0x05
    2750:	1e 82       	std	Y+6, r1	; 0x06

	if (!pu8Mosi) {
    2752:	88 85       	ldd	r24, Y+8	; 0x08
    2754:	99 85       	ldd	r25, Y+9	; 0x09
    2756:	89 2b       	or	r24, r25
    2758:	39 f4       	brne	.+14     	; 0x2768 <spi_rw+0x3e>
		pu8Mosi = &u8Dummy;
    275a:	ce 01       	movw	r24, r28
    275c:	07 96       	adiw	r24, 0x07	; 7
    275e:	88 87       	std	Y+8, r24	; 0x08
    2760:	99 87       	std	Y+9, r25	; 0x09
		u8SkipMosi = 1;
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	89 83       	std	Y+1, r24	; 0x01
    2766:	0d c0       	rjmp	.+26     	; 0x2782 <spi_rw+0x58>
	}
	else if(!pu8Miso) {
    2768:	8a 85       	ldd	r24, Y+10	; 0x0a
    276a:	9b 85       	ldd	r25, Y+11	; 0x0b
    276c:	89 2b       	or	r24, r25
    276e:	39 f4       	brne	.+14     	; 0x277e <spi_rw+0x54>
		pu8Miso = &u8Dummy;
    2770:	ce 01       	movw	r24, r28
    2772:	07 96       	adiw	r24, 0x07	; 7
    2774:	8a 87       	std	Y+10, r24	; 0x0a
    2776:	9b 87       	std	Y+11, r25	; 0x0b
		u8SkipMiso = 1;
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	8a 83       	std	Y+2, r24	; 0x02
    277c:	02 c0       	rjmp	.+4      	; 0x2782 <spi_rw+0x58>
	}
	else {
		return M2M_ERR_BUS_FAIL;
    277e:	8a ef       	ldi	r24, 0xFA	; 250
    2780:	34 c0       	rjmp	.+104    	; 0x27ea <spi_rw+0xc0>
	}

	//spi_select_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(false);
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	0e 94 86 13 	call	0x270c	; 0x270c <CONF_WIFI_M2M_SPI_CS_PIN_set_level>
	
	while (u16Sz) {
    2788:	28 c0       	rjmp	.+80     	; 0x27da <spi_rw+0xb0>
		txd_data = *pu8Mosi;
    278a:	88 85       	ldd	r24, Y+8	; 0x08
    278c:	99 85       	ldd	r25, Y+9	; 0x09
    278e:	fc 01       	movw	r30, r24
    2790:	80 81       	ld	r24, Z
    2792:	88 2f       	mov	r24, r24
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	8b 83       	std	Y+3, r24	; 0x03
    2798:	9c 83       	std	Y+4, r25	; 0x04
//		spi_read_single((uint8_t*)(&rxd_data));
		//SPI_0_read_block((uint8_t*)(&rxd_data), 1);
		
		
		
		rxd_data = SPI_0_exchange_byte(txd_data);		
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	9c 81       	ldd	r25, Y+4	; 0x04
    279e:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <SPI_0_exchange_byte>
    27a2:	8d 83       	std	Y+5, r24	; 0x05
    27a4:	9e 83       	std	Y+6, r25	; 0x06
		
		*pu8Miso = rxd_data;
    27a6:	2d 81       	ldd	r18, Y+5	; 0x05
    27a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    27aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    27ac:	fc 01       	movw	r30, r24
    27ae:	20 83       	st	Z, r18

		u16Sz--;
    27b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    27b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	8c 87       	std	Y+12, r24	; 0x0c
    27b8:	9d 87       	std	Y+13, r25	; 0x0d
		if (!u8SkipMiso)
    27ba:	8a 81       	ldd	r24, Y+2	; 0x02
    27bc:	88 23       	and	r24, r24
    27be:	29 f4       	brne	.+10     	; 0x27ca <spi_rw+0xa0>
			pu8Miso++;
    27c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    27c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	8a 87       	std	Y+10, r24	; 0x0a
    27c8:	9b 87       	std	Y+11, r25	; 0x0b
		if (!u8SkipMosi)
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	88 23       	and	r24, r24
    27ce:	29 f4       	brne	.+10     	; 0x27da <spi_rw+0xb0>
			pu8Mosi++;
    27d0:	88 85       	ldd	r24, Y+8	; 0x08
    27d2:	99 85       	ldd	r25, Y+9	; 0x09
    27d4:	01 96       	adiw	r24, 0x01	; 1
    27d6:	88 87       	std	Y+8, r24	; 0x08
    27d8:	99 87       	std	Y+9, r25	; 0x09
	}

	//spi_select_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(false);
	
	while (u16Sz) {
    27da:	8c 85       	ldd	r24, Y+12	; 0x0c
    27dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    27de:	89 2b       	or	r24, r25
    27e0:	a1 f6       	brne	.-88     	; 0x278a <spi_rw+0x60>
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	//spi_deselect_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(true);
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	0e 94 86 13 	call	0x270c	; 0x270c <CONF_WIFI_M2M_SPI_CS_PIN_set_level>

	return M2M_SUCCESS;
    27e8:	80 e0       	ldi	r24, 0x00	; 0
}
    27ea:	2d 96       	adiw	r28, 0x0d	; 13
    27ec:	cd bf       	out	0x3d, r28	; 61
    27ee:	de bf       	out	0x3e, r29	; 62
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	08 95       	ret

000027f6 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 volatile nm_bus_init(void *pvinit)
{
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <nm_bus_init+0x6>
    27fc:	1f 92       	push	r1
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	8a 83       	std	Y+2, r24	; 0x02
    2804:	9b 83       	std	Y+3, r25	; 0x03
	sint8 result = M2M_SUCCESS;
    2806:	19 82       	std	Y+1, r1	; 0x01
#ifdef CONF_WINC_USE_I2C
		/* Not implemented */
#elif defined CONF_WINC_USE_SPI
	/* Configure pins */
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_CS_PIN, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
	CONF_WIFI_M2M_SPI_CS_PIN_set_dir(PORT_DIR_OUT);
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	0e 94 77 13 	call	0x26ee	; 0x26ee <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(true);
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	0e 94 86 13 	call	0x270c	; 0x270c <CONF_WIFI_M2M_SPI_CS_PIN_set_level>
	
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_MOSI_PIN, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
	CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir(PORT_DIR_OUT);
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	0e 94 2c 13 	call	0x2658	; 0x2658 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>
	CONF_WIFI_M2M_SPI_MOSI_PIN_set_level(true);
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	0e 94 3b 13 	call	0x2676	; 0x2676 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>
	
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_MISO_PIN, IOPORT_DIR_INPUT);
	CONF_WIFI_M2M_SPI_MISO_PIN_set_dir(PORT_DIR_IN);
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	0e 94 4a 13 	call	0x2694	; 0x2694 <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>
	
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_SCK_PIN, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	CONF_WIFI_M2M_SPI_SCK_PIN_set_dir(PORT_DIR_OUT);
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	0e 94 59 13 	call	0x26b2	; 0x26b2 <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>
	CONF_WIFI_M2M_SPI_SCK_PIN_set_level(false);
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	 
	/* Configure the SPI master. */
	//spi_master_init(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_init();
    2832:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <SPI_0_init>
	
	//spi_master_setup_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf, SPI_MODE_0, CONF_WIFI_M2M_SPI_BAUDRATE, 0);
	
	/* Enable the SPI master. */
	//spi_enable(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_enable();
    2836:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <SPI_0_enable>

	nm_bsp_reset();
    283a:	0e 94 b1 11 	call	0x2362	; 0x2362 <nm_bsp_reset>
	nm_bsp_sleep(1);
    283e:	61 e0       	ldi	r22, 0x01	; 1
    2840:	70 e0       	ldi	r23, 0x00	; 0
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <nm_bsp_sleep>
#endif
	return result;
    284a:	89 81       	ldd	r24, Y+1	; 0x01
}
    284c:	23 96       	adiw	r28, 0x03	; 3
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	de bf       	out	0x3e, r29	; 62
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	08 95       	ret

00002858 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    2858:	cf 93       	push	r28
    285a:	df 93       	push	r29
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	26 97       	sbiw	r28, 0x06	; 6
    2862:	cd bf       	out	0x3d, r28	; 61
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	8c 83       	std	Y+4, r24	; 0x04
    2868:	6d 83       	std	Y+5, r22	; 0x05
    286a:	7e 83       	std	Y+6, r23	; 0x06
	sint8 s8Ret = 0;
    286c:	19 82       	std	Y+1, r1	; 0x01
	switch(u8Cmd)
    286e:	8c 81       	ldd	r24, Y+4	; 0x04
    2870:	88 2f       	mov	r24, r24
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	03 97       	sbiw	r24, 0x03	; 3
    2876:	c1 f4       	brne	.+48     	; 0x28a8 <nm_bus_ioctl+0x50>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    2878:	8d 81       	ldd	r24, Y+5	; 0x05
    287a:	9e 81       	ldd	r25, Y+6	; 0x06
    287c:	8a 83       	std	Y+2, r24	; 0x02
    287e:	9b 83       	std	Y+3, r25	; 0x03
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	9b 81       	ldd	r25, Y+3	; 0x03
    2884:	fc 01       	movw	r30, r24
    2886:	44 81       	ldd	r20, Z+4	; 0x04
    2888:	55 81       	ldd	r21, Z+5	; 0x05
    288a:	8a 81       	ldd	r24, Y+2	; 0x02
    288c:	9b 81       	ldd	r25, Y+3	; 0x03
    288e:	fc 01       	movw	r30, r24
    2890:	22 81       	ldd	r18, Z+2	; 0x02
    2892:	33 81       	ldd	r19, Z+3	; 0x03
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	9b 81       	ldd	r25, Y+3	; 0x03
    2898:	fc 01       	movw	r30, r24
    289a:	80 81       	ld	r24, Z
    289c:	91 81       	ldd	r25, Z+1	; 0x01
    289e:	b9 01       	movw	r22, r18
    28a0:	0e 94 95 13 	call	0x272a	; 0x272a <spi_rw>
    28a4:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    28a6:	03 c0       	rjmp	.+6      	; 0x28ae <nm_bus_ioctl+0x56>
#endif
		default:
			s8Ret = -1;
    28a8:	8f ef       	ldi	r24, 0xFF	; 255
    28aa:	89 83       	std	Y+1, r24	; 0x01
			M2M_ERR("invalide ioclt cmd\n");
			break;
    28ac:	00 00       	nop
	}

	return s8Ret;
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    28b0:	26 96       	adiw	r28, 0x06	; 6
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	df 91       	pop	r29
    28b8:	cf 91       	pop	r28
    28ba:	08 95       	ret

000028bc <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
	return M2M_SUCCESS;
    28c4:	80 e0       	ldi	r24, 0x00	; 0
}
    28c6:	df 91       	pop	r29
    28c8:	cf 91       	pop	r28
    28ca:	08 95       	ret

000028cc <m2m_memcpy>:
		cs ^= *buf;
		buf++;
	}

	return cs;
}
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
    28d4:	28 97       	sbiw	r28, 0x08	; 8
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	de bf       	out	0x3e, r29	; 62
    28da:	89 83       	std	Y+1, r24	; 0x01
    28dc:	9a 83       	std	Y+2, r25	; 0x02
    28de:	6b 83       	std	Y+3, r22	; 0x03
    28e0:	7c 83       	std	Y+4, r23	; 0x04
    28e2:	2d 83       	std	Y+5, r18	; 0x05
    28e4:	3e 83       	std	Y+6, r19	; 0x06
    28e6:	4f 83       	std	Y+7, r20	; 0x07
    28e8:	58 87       	std	Y+8, r21	; 0x08
    28ea:	8d 81       	ldd	r24, Y+5	; 0x05
    28ec:	9e 81       	ldd	r25, Y+6	; 0x06
    28ee:	af 81       	ldd	r26, Y+7	; 0x07
    28f0:	b8 85       	ldd	r27, Y+8	; 0x08
    28f2:	89 2b       	or	r24, r25
    28f4:	8a 2b       	or	r24, r26
    28f6:	8b 2b       	or	r24, r27
    28f8:	31 f1       	breq	.+76     	; 0x2946 <m2m_memcpy+0x7a>
    28fa:	8b 81       	ldd	r24, Y+3	; 0x03
    28fc:	9c 81       	ldd	r25, Y+4	; 0x04
    28fe:	fc 01       	movw	r30, r24
    2900:	20 81       	ld	r18, Z
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	9a 81       	ldd	r25, Y+2	; 0x02
    2906:	fc 01       	movw	r30, r24
    2908:	20 83       	st	Z, r18
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	01 96       	adiw	r24, 0x01	; 1
    2910:	89 83       	std	Y+1, r24	; 0x01
    2912:	9a 83       	std	Y+2, r25	; 0x02
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	9c 81       	ldd	r25, Y+4	; 0x04
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	8b 83       	std	Y+3, r24	; 0x03
    291c:	9c 83       	std	Y+4, r25	; 0x04
    291e:	8d 81       	ldd	r24, Y+5	; 0x05
    2920:	9e 81       	ldd	r25, Y+6	; 0x06
    2922:	af 81       	ldd	r26, Y+7	; 0x07
    2924:	b8 85       	ldd	r27, Y+8	; 0x08
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	a1 09       	sbc	r26, r1
    292a:	b1 09       	sbc	r27, r1
    292c:	8d 83       	std	Y+5, r24	; 0x05
    292e:	9e 83       	std	Y+6, r25	; 0x06
    2930:	af 83       	std	Y+7, r26	; 0x07
    2932:	b8 87       	std	Y+8, r27	; 0x08
    2934:	8d 81       	ldd	r24, Y+5	; 0x05
    2936:	9e 81       	ldd	r25, Y+6	; 0x06
    2938:	af 81       	ldd	r26, Y+7	; 0x07
    293a:	b8 85       	ldd	r27, Y+8	; 0x08
    293c:	89 2b       	or	r24, r25
    293e:	8a 2b       	or	r24, r26
    2940:	8b 2b       	or	r24, r27
    2942:	d9 f6       	brne	.-74     	; 0x28fa <m2m_memcpy+0x2e>
    2944:	01 c0       	rjmp	.+2      	; 0x2948 <m2m_memcpy+0x7c>
    2946:	00 00       	nop
    2948:	28 96       	adiw	r28, 0x08	; 8
    294a:	cd bf       	out	0x3d, r28	; 61
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	08 95       	ret

00002954 <m2m_memset>:

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	27 97       	sbiw	r28, 0x07	; 7
    295e:	cd bf       	out	0x3d, r28	; 61
    2960:	de bf       	out	0x3e, r29	; 62
    2962:	89 83       	std	Y+1, r24	; 0x01
    2964:	9a 83       	std	Y+2, r25	; 0x02
    2966:	6b 83       	std	Y+3, r22	; 0x03
    2968:	2c 83       	std	Y+4, r18	; 0x04
    296a:	3d 83       	std	Y+5, r19	; 0x05
    296c:	4e 83       	std	Y+6, r20	; 0x06
    296e:	5f 83       	std	Y+7, r21	; 0x07
	if(sz == 0) return;
    2970:	8c 81       	ldd	r24, Y+4	; 0x04
    2972:	9d 81       	ldd	r25, Y+5	; 0x05
    2974:	ae 81       	ldd	r26, Y+6	; 0x06
    2976:	bf 81       	ldd	r27, Y+7	; 0x07
    2978:	89 2b       	or	r24, r25
    297a:	8a 2b       	or	r24, r26
    297c:	8b 2b       	or	r24, r27
    297e:	f1 f0       	breq	.+60     	; 0x29bc <m2m_memset+0x68>
	do
	{
		*pBuf = val;
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	9a 81       	ldd	r25, Y+2	; 0x02
    2984:	2b 81       	ldd	r18, Y+3	; 0x03
    2986:	fc 01       	movw	r30, r24
    2988:	20 83       	st	Z, r18
		pBuf++;
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	9a 81       	ldd	r25, Y+2	; 0x02
    298e:	01 96       	adiw	r24, 0x01	; 1
    2990:	89 83       	std	Y+1, r24	; 0x01
    2992:	9a 83       	std	Y+2, r25	; 0x02
	}while(--sz);
    2994:	8c 81       	ldd	r24, Y+4	; 0x04
    2996:	9d 81       	ldd	r25, Y+5	; 0x05
    2998:	ae 81       	ldd	r26, Y+6	; 0x06
    299a:	bf 81       	ldd	r27, Y+7	; 0x07
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	a1 09       	sbc	r26, r1
    29a0:	b1 09       	sbc	r27, r1
    29a2:	8c 83       	std	Y+4, r24	; 0x04
    29a4:	9d 83       	std	Y+5, r25	; 0x05
    29a6:	ae 83       	std	Y+6, r26	; 0x06
    29a8:	bf 83       	std	Y+7, r27	; 0x07
    29aa:	8c 81       	ldd	r24, Y+4	; 0x04
    29ac:	9d 81       	ldd	r25, Y+5	; 0x05
    29ae:	ae 81       	ldd	r26, Y+6	; 0x06
    29b0:	bf 81       	ldd	r27, Y+7	; 0x07
    29b2:	89 2b       	or	r24, r25
    29b4:	8a 2b       	or	r24, r26
    29b6:	8b 2b       	or	r24, r27
    29b8:	19 f7       	brne	.-58     	; 0x2980 <m2m_memset+0x2c>
    29ba:	01 c0       	rjmp	.+2      	; 0x29be <m2m_memset+0x6a>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    29bc:	00 00       	nop
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
    29be:	27 96       	adiw	r28, 0x07	; 7
    29c0:	cd bf       	out	0x3d, r28	; 61
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	df 91       	pop	r29
    29c6:	cf 91       	pop	r28
    29c8:	08 95       	ret

000029ca <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <m2m_strlen+0x6>
    29d0:	00 d0       	rcall	.+0      	; 0x29d2 <m2m_strlen+0x8>
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	8b 83       	std	Y+3, r24	; 0x03
    29d8:	9c 83       	std	Y+4, r25	; 0x04
	uint16	u16StrLen = 0;
    29da:	19 82       	std	Y+1, r1	; 0x01
    29dc:	1a 82       	std	Y+2, r1	; 0x02
	while(*pcStr)
    29de:	0a c0       	rjmp	.+20     	; 0x29f4 <m2m_strlen+0x2a>
	{
		u16StrLen ++;
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	9a 81       	ldd	r25, Y+2	; 0x02
    29e4:	01 96       	adiw	r24, 0x01	; 1
    29e6:	89 83       	std	Y+1, r24	; 0x01
    29e8:	9a 83       	std	Y+2, r25	; 0x02
		pcStr++;
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	9c 81       	ldd	r25, Y+4	; 0x04
    29ee:	01 96       	adiw	r24, 0x01	; 1
    29f0:	8b 83       	std	Y+3, r24	; 0x03
    29f2:	9c 83       	std	Y+4, r25	; 0x04
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    29f4:	8b 81       	ldd	r24, Y+3	; 0x03
    29f6:	9c 81       	ldd	r25, Y+4	; 0x04
    29f8:	fc 01       	movw	r30, r24
    29fa:	80 81       	ld	r24, Z
    29fc:	88 23       	and	r24, r24
    29fe:	81 f7       	brne	.-32     	; 0x29e0 <m2m_strlen+0x16>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a04:	24 96       	adiw	r28, 0x04	; 4
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	df 91       	pop	r29
    2a0c:	cf 91       	pop	r28
    2a0e:	08 95       	ret

00002a10 <isr>:
{
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
	return ret;
}
    2a10:	cf 93       	push	r28
    2a12:	df 93       	push	r29
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	80 91 38 33 	lds	r24, 0x3338	; 0x803338 <gstrHifCxt+0x3>
    2a1c:	8f 5f       	subi	r24, 0xFF	; 255
    2a1e:	80 93 38 33 	sts	0x3338, r24	; 0x803338 <gstrHifCxt+0x3>
    2a22:	00 00       	nop
    2a24:	df 91       	pop	r29
    2a26:	cf 91       	pop	r28
    2a28:	08 95       	ret

00002a2a <hif_set_rx_done>:
    2a2a:	cf 93       	push	r28
    2a2c:	df 93       	push	r29
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	25 97       	sbiw	r28, 0x05	; 5
    2a34:	cd bf       	out	0x3d, r28	; 61
    2a36:	de bf       	out	0x3e, r29	; 62
    2a38:	19 82       	std	Y+1, r1	; 0x01
    2a3a:	10 92 37 33 	sts	0x3337, r1	; 0x803337 <gstrHifCxt+0x2>
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	0e 94 89 12 	call	0x2512	; 0x2512 <nm_bsp_interrupt_ctrl>
    2a44:	ce 01       	movw	r24, r28
    2a46:	02 96       	adiw	r24, 0x02	; 2
    2a48:	ac 01       	movw	r20, r24
    2a4a:	60 e7       	ldi	r22, 0x70	; 112
    2a4c:	70 e1       	ldi	r23, 0x10	; 16
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    2a56:	89 83       	std	Y+1, r24	; 0x01
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	88 23       	and	r24, r24
    2a5c:	b9 f4       	brne	.+46     	; 0x2a8c <hif_set_rx_done+0x62>
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	9b 81       	ldd	r25, Y+3	; 0x03
    2a62:	ac 81       	ldd	r26, Y+4	; 0x04
    2a64:	bd 81       	ldd	r27, Y+5	; 0x05
    2a66:	82 60       	ori	r24, 0x02	; 2
    2a68:	8a 83       	std	Y+2, r24	; 0x02
    2a6a:	9b 83       	std	Y+3, r25	; 0x03
    2a6c:	ac 83       	std	Y+4, r26	; 0x04
    2a6e:	bd 83       	std	Y+5, r27	; 0x05
    2a70:	8a 81       	ldd	r24, Y+2	; 0x02
    2a72:	9b 81       	ldd	r25, Y+3	; 0x03
    2a74:	ac 81       	ldd	r26, Y+4	; 0x04
    2a76:	bd 81       	ldd	r27, Y+5	; 0x05
    2a78:	9c 01       	movw	r18, r24
    2a7a:	ad 01       	movw	r20, r26
    2a7c:	60 e7       	ldi	r22, 0x70	; 112
    2a7e:	70 e1       	ldi	r23, 0x10	; 16
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    2a88:	89 83       	std	Y+1, r24	; 0x01
    2a8a:	01 c0       	rjmp	.+2      	; 0x2a8e <hif_set_rx_done+0x64>
    2a8c:	00 00       	nop
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	25 96       	adiw	r28, 0x05	; 5
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	df 91       	pop	r29
    2a98:	cf 91       	pop	r28
    2a9a:	08 95       	ret

00002a9c <m2m_hif_cb>:
    2a9c:	cf 93       	push	r28
    2a9e:	df 93       	push	r29
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	27 97       	sbiw	r28, 0x07	; 7
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	89 83       	std	Y+1, r24	; 0x01
    2aac:	6a 83       	std	Y+2, r22	; 0x02
    2aae:	7b 83       	std	Y+3, r23	; 0x03
    2ab0:	2c 83       	std	Y+4, r18	; 0x04
    2ab2:	3d 83       	std	Y+5, r19	; 0x05
    2ab4:	4e 83       	std	Y+6, r20	; 0x06
    2ab6:	5f 83       	std	Y+7, r21	; 0x07
    2ab8:	00 00       	nop
    2aba:	27 96       	adiw	r28, 0x07	; 7
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	08 95       	ret

00002ac6 <hif_chip_wake>:
    2ac6:	cf 93       	push	r28
    2ac8:	df 93       	push	r29
    2aca:	1f 92       	push	r1
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
    2ad0:	19 82       	std	Y+1, r1	; 0x01
    2ad2:	80 91 37 33 	lds	r24, 0x3337	; 0x803337 <gstrHifCxt+0x2>
    2ad6:	88 23       	and	r24, r24
    2ad8:	11 f0       	breq	.+4      	; 0x2ade <hif_chip_wake+0x18>
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
    2adc:	16 c0       	rjmp	.+44     	; 0x2b0a <hif_chip_wake+0x44>
    2ade:	80 91 36 33 	lds	r24, 0x3336	; 0x803336 <gstrHifCxt+0x1>
    2ae2:	88 23       	and	r24, r24
    2ae4:	51 f4       	brne	.+20     	; 0x2afa <hif_chip_wake+0x34>
    2ae6:	80 91 35 33 	lds	r24, 0x3335	; 0x803335 <gstrHifCxt>
    2aea:	88 23       	and	r24, r24
    2aec:	31 f0       	breq	.+12     	; 0x2afa <hif_chip_wake+0x34>
    2aee:	0e 94 12 22 	call	0x4424	; 0x4424 <chip_wake>
    2af2:	89 83       	std	Y+1, r24	; 0x01
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	88 23       	and	r24, r24
    2af8:	31 f4       	brne	.+12     	; 0x2b06 <hif_chip_wake+0x40>
    2afa:	80 91 36 33 	lds	r24, 0x3336	; 0x803336 <gstrHifCxt+0x1>
    2afe:	8f 5f       	subi	r24, 0xFF	; 255
    2b00:	80 93 36 33 	sts	0x3336, r24	; 0x803336 <gstrHifCxt+0x1>
    2b04:	01 c0       	rjmp	.+2      	; 0x2b08 <hif_chip_wake+0x42>
    2b06:	00 00       	nop
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	0f 90       	pop	r0
    2b0c:	df 91       	pop	r29
    2b0e:	cf 91       	pop	r28
    2b10:	08 95       	ret

00002b12 <hif_chip_sleep_sc>:
    2b12:	cf 93       	push	r28
    2b14:	df 93       	push	r29
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	80 91 36 33 	lds	r24, 0x3336	; 0x803336 <gstrHifCxt+0x1>
    2b1e:	88 23       	and	r24, r24
    2b20:	29 f0       	breq	.+10     	; 0x2b2c <hif_chip_sleep_sc+0x1a>
    2b22:	80 91 36 33 	lds	r24, 0x3336	; 0x803336 <gstrHifCxt+0x1>
    2b26:	81 50       	subi	r24, 0x01	; 1
    2b28:	80 93 36 33 	sts	0x3336, r24	; 0x803336 <gstrHifCxt+0x1>
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	08 95       	ret

00002b34 <hif_chip_sleep>:
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	1f 92       	push	r1
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
    2b3e:	19 82       	std	Y+1, r1	; 0x01
    2b40:	80 91 36 33 	lds	r24, 0x3336	; 0x803336 <gstrHifCxt+0x1>
    2b44:	88 23       	and	r24, r24
    2b46:	29 f0       	breq	.+10     	; 0x2b52 <hif_chip_sleep+0x1e>
    2b48:	80 91 36 33 	lds	r24, 0x3336	; 0x803336 <gstrHifCxt+0x1>
    2b4c:	81 50       	subi	r24, 0x01	; 1
    2b4e:	80 93 36 33 	sts	0x3336, r24	; 0x803336 <gstrHifCxt+0x1>
    2b52:	80 91 36 33 	lds	r24, 0x3336	; 0x803336 <gstrHifCxt+0x1>
    2b56:	88 23       	and	r24, r24
    2b58:	39 f4       	brne	.+14     	; 0x2b68 <hif_chip_sleep+0x34>
    2b5a:	80 91 35 33 	lds	r24, 0x3335	; 0x803335 <gstrHifCxt>
    2b5e:	88 23       	and	r24, r24
    2b60:	19 f0       	breq	.+6      	; 0x2b68 <hif_chip_sleep+0x34>
    2b62:	0e 94 7d 21 	call	0x42fa	; 0x42fa <chip_sleep>
    2b66:	89 83       	std	Y+1, r24	; 0x01
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	0f 90       	pop	r0
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	08 95       	ret

00002b72 <hif_init>:
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <hif_init+0x6>
    2b78:	cd b7       	in	r28, 0x3d	; 61
    2b7a:	de b7       	in	r29, 0x3e	; 62
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    2b7e:	9a 83       	std	Y+2, r25	; 0x02
    2b80:	2a e1       	ldi	r18, 0x1A	; 26
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e0       	ldi	r20, 0x00	; 0
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	85 e3       	ldi	r24, 0x35	; 53
    2b8c:	93 e3       	ldi	r25, 0x33	; 51
    2b8e:	0e 94 aa 14 	call	0x2954	; 0x2954 <m2m_memset>
    2b92:	88 e0       	ldi	r24, 0x08	; 8
    2b94:	95 e1       	ldi	r25, 0x15	; 21
    2b96:	0e 94 69 12 	call	0x24d2	; 0x24d2 <nm_bsp_register_isr>
    2b9a:	6e e4       	ldi	r22, 0x4E	; 78
    2b9c:	75 e1       	ldi	r23, 0x15	; 21
    2b9e:	83 e0       	ldi	r24, 0x03	; 3
    2ba0:	0e 94 4c 1a 	call	0x3498	; 0x3498 <hif_register_cb>
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	0f 90       	pop	r0
    2ba8:	0f 90       	pop	r0
    2baa:	df 91       	pop	r29
    2bac:	cf 91       	pop	r28
    2bae:	08 95       	ret

00002bb0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    2bb0:	cf 92       	push	r12
    2bb2:	df 92       	push	r13
    2bb4:	ef 92       	push	r14
    2bb6:	ff 92       	push	r15
    2bb8:	0f 93       	push	r16
    2bba:	1f 93       	push	r17
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
    2bc4:	6f 97       	sbiw	r28, 0x1f	; 31
    2bc6:	cd bf       	out	0x3d, r28	; 61
    2bc8:	de bf       	out	0x3e, r29	; 62
    2bca:	8c 8b       	std	Y+20, r24	; 0x14
    2bcc:	6d 8b       	std	Y+21, r22	; 0x15
    2bce:	4e 8b       	std	Y+22, r20	; 0x16
    2bd0:	5f 8b       	std	Y+23, r21	; 0x17
    2bd2:	28 8f       	std	Y+24, r18	; 0x18
    2bd4:	39 8f       	std	Y+25, r19	; 0x19
    2bd6:	0a 8f       	std	Y+26, r16	; 0x1a
    2bd8:	1b 8f       	std	Y+27, r17	; 0x1b
    2bda:	ec 8e       	std	Y+28, r14	; 0x1c
    2bdc:	fd 8e       	std	Y+29, r15	; 0x1d
    2bde:	ce 8e       	std	Y+30, r12	; 0x1e
    2be0:	df 8e       	std	Y+31, r13	; 0x1f
	sint8		ret = M2M_ERR_SEND;
    2be2:	8f ef       	ldi	r24, 0xFF	; 255
    2be4:	89 83       	std	Y+1, r24	; 0x01
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    2be6:	8d 89       	ldd	r24, Y+21	; 0x15
    2be8:	8f 77       	andi	r24, 0x7F	; 127
    2bea:	8b 83       	std	Y+3, r24	; 0x03
	strHif.u8Gid		= u8Gid;
    2bec:	8c 89       	ldd	r24, Y+20	; 0x14
    2bee:	8a 83       	std	Y+2, r24	; 0x02
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    2bf0:	88 e0       	ldi	r24, 0x08	; 8
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	8c 83       	std	Y+4, r24	; 0x04
    2bf6:	9d 83       	std	Y+5, r25	; 0x05
	if(pu8DataBuf != NULL)
    2bf8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bfa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2bfc:	89 2b       	or	r24, r25
    2bfe:	69 f0       	breq	.+26     	; 0x2c1a <hif_send+0x6a>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    2c00:	2c 81       	ldd	r18, Y+4	; 0x04
    2c02:	3d 81       	ldd	r19, Y+5	; 0x05
    2c04:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2c06:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2c08:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c0a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c0c:	84 0f       	add	r24, r20
    2c0e:	95 1f       	adc	r25, r21
    2c10:	82 0f       	add	r24, r18
    2c12:	93 1f       	adc	r25, r19
    2c14:	8c 83       	std	Y+4, r24	; 0x04
    2c16:	9d 83       	std	Y+5, r25	; 0x05
    2c18:	08 c0       	rjmp	.+16     	; 0x2c2a <hif_send+0x7a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    2c1a:	2c 81       	ldd	r18, Y+4	; 0x04
    2c1c:	3d 81       	ldd	r19, Y+5	; 0x05
    2c1e:	88 8d       	ldd	r24, Y+24	; 0x18
    2c20:	99 8d       	ldd	r25, Y+25	; 0x19
    2c22:	82 0f       	add	r24, r18
    2c24:	93 1f       	adc	r25, r19
    2c26:	8c 83       	std	Y+4, r24	; 0x04
    2c28:	9d 83       	std	Y+5, r25	; 0x05
	}
	ret = hif_chip_wake();
    2c2a:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <hif_chip_wake>
    2c2e:	89 83       	std	Y+1, r24	; 0x01
	if(ret == M2M_SUCCESS)
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	88 23       	and	r24, r24
    2c34:	09 f0       	breq	.+2      	; 0x2c38 <hif_send+0x88>
    2c36:	a6 c1       	rjmp	.+844    	; 0x2f84 <hif_send+0x3d4>
	{
		volatile uint32 reg, dma_addr = 0;
    2c38:	1a 86       	std	Y+10, r1	; 0x0a
    2c3a:	1b 86       	std	Y+11, r1	; 0x0b
    2c3c:	1c 86       	std	Y+12, r1	; 0x0c
    2c3e:	1d 86       	std	Y+13, r1	; 0x0d
		volatile uint16 cnt = 0;
    2c40:	1e 86       	std	Y+14, r1	; 0x0e
    2c42:	1f 86       	std	Y+15, r1	; 0x0f
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    2c44:	1e 82       	std	Y+6, r1	; 0x06
    2c46:	1f 82       	std	Y+7, r1	; 0x07
    2c48:	18 86       	std	Y+8, r1	; 0x08
    2c4a:	19 86       	std	Y+9, r1	; 0x09
		reg |= (uint32)u8Gid;
    2c4c:	8c 89       	ldd	r24, Y+20	; 0x14
    2c4e:	28 2f       	mov	r18, r24
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	40 e0       	ldi	r20, 0x00	; 0
    2c54:	50 e0       	ldi	r21, 0x00	; 0
    2c56:	8e 81       	ldd	r24, Y+6	; 0x06
    2c58:	9f 81       	ldd	r25, Y+7	; 0x07
    2c5a:	a8 85       	ldd	r26, Y+8	; 0x08
    2c5c:	b9 85       	ldd	r27, Y+9	; 0x09
    2c5e:	82 2b       	or	r24, r18
    2c60:	93 2b       	or	r25, r19
    2c62:	a4 2b       	or	r26, r20
    2c64:	b5 2b       	or	r27, r21
    2c66:	8e 83       	std	Y+6, r24	; 0x06
    2c68:	9f 83       	std	Y+7, r25	; 0x07
    2c6a:	a8 87       	std	Y+8, r26	; 0x08
    2c6c:	b9 87       	std	Y+9, r27	; 0x09
		reg |= ((uint32)u8Opcode<<8);
    2c6e:	8d 89       	ldd	r24, Y+21	; 0x15
    2c70:	88 2f       	mov	r24, r24
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	a0 e0       	ldi	r26, 0x00	; 0
    2c76:	b0 e0       	ldi	r27, 0x00	; 0
    2c78:	22 27       	eor	r18, r18
    2c7a:	38 2f       	mov	r19, r24
    2c7c:	49 2f       	mov	r20, r25
    2c7e:	5a 2f       	mov	r21, r26
    2c80:	8e 81       	ldd	r24, Y+6	; 0x06
    2c82:	9f 81       	ldd	r25, Y+7	; 0x07
    2c84:	a8 85       	ldd	r26, Y+8	; 0x08
    2c86:	b9 85       	ldd	r27, Y+9	; 0x09
    2c88:	82 2b       	or	r24, r18
    2c8a:	93 2b       	or	r25, r19
    2c8c:	a4 2b       	or	r26, r20
    2c8e:	b5 2b       	or	r27, r21
    2c90:	8e 83       	std	Y+6, r24	; 0x06
    2c92:	9f 83       	std	Y+7, r25	; 0x07
    2c94:	a8 87       	std	Y+8, r26	; 0x08
    2c96:	b9 87       	std	Y+9, r27	; 0x09
		reg |= ((uint32)strHif.u16Length<<16);
    2c98:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c9c:	cc 01       	movw	r24, r24
    2c9e:	a0 e0       	ldi	r26, 0x00	; 0
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	ac 01       	movw	r20, r24
    2ca4:	33 27       	eor	r19, r19
    2ca6:	22 27       	eor	r18, r18
    2ca8:	8e 81       	ldd	r24, Y+6	; 0x06
    2caa:	9f 81       	ldd	r25, Y+7	; 0x07
    2cac:	a8 85       	ldd	r26, Y+8	; 0x08
    2cae:	b9 85       	ldd	r27, Y+9	; 0x09
    2cb0:	82 2b       	or	r24, r18
    2cb2:	93 2b       	or	r25, r19
    2cb4:	a4 2b       	or	r26, r20
    2cb6:	b5 2b       	or	r27, r21
    2cb8:	8e 83       	std	Y+6, r24	; 0x06
    2cba:	9f 83       	std	Y+7, r25	; 0x07
    2cbc:	a8 87       	std	Y+8, r26	; 0x08
    2cbe:	b9 87       	std	Y+9, r27	; 0x09
		ret = nm_write_reg(NMI_STATE_REG,reg);
    2cc0:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc2:	9f 81       	ldd	r25, Y+7	; 0x07
    2cc4:	a8 85       	ldd	r26, Y+8	; 0x08
    2cc6:	b9 85       	ldd	r27, Y+9	; 0x09
    2cc8:	9c 01       	movw	r18, r24
    2cca:	ad 01       	movw	r20, r26
    2ccc:	6c e8       	ldi	r22, 0x8C	; 140
    2cce:	70 e1       	ldi	r23, 0x10	; 16
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    2cd8:	89 83       	std	Y+1, r24	; 0x01
		if(M2M_SUCCESS != ret) goto ERR1;
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	88 23       	and	r24, r24
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <hif_send+0x132>
    2ce0:	45 c1       	rjmp	.+650    	; 0x2f6c <hif_send+0x3bc>

		reg = 0UL;
    2ce2:	1e 82       	std	Y+6, r1	; 0x06
    2ce4:	1f 82       	std	Y+7, r1	; 0x07
    2ce6:	18 86       	std	Y+8, r1	; 0x08
    2ce8:	19 86       	std	Y+9, r1	; 0x09
		reg |= NBIT1;
    2cea:	8e 81       	ldd	r24, Y+6	; 0x06
    2cec:	9f 81       	ldd	r25, Y+7	; 0x07
    2cee:	a8 85       	ldd	r26, Y+8	; 0x08
    2cf0:	b9 85       	ldd	r27, Y+9	; 0x09
    2cf2:	82 60       	ori	r24, 0x02	; 2
    2cf4:	8e 83       	std	Y+6, r24	; 0x06
    2cf6:	9f 83       	std	Y+7, r25	; 0x07
    2cf8:	a8 87       	std	Y+8, r26	; 0x08
    2cfa:	b9 87       	std	Y+9, r27	; 0x09
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    2cfc:	8e 81       	ldd	r24, Y+6	; 0x06
    2cfe:	9f 81       	ldd	r25, Y+7	; 0x07
    2d00:	a8 85       	ldd	r26, Y+8	; 0x08
    2d02:	b9 85       	ldd	r27, Y+9	; 0x09
    2d04:	9c 01       	movw	r18, r24
    2d06:	ad 01       	movw	r20, r26
    2d08:	68 e7       	ldi	r22, 0x78	; 120
    2d0a:	70 e1       	ldi	r23, 0x10	; 16
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    2d14:	89 83       	std	Y+1, r24	; 0x01
		if(M2M_SUCCESS != ret) goto ERR1;
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	88 23       	and	r24, r24
    2d1a:	09 f0       	breq	.+2      	; 0x2d1e <hif_send+0x16e>
    2d1c:	29 c1       	rjmp	.+594    	; 0x2f70 <hif_send+0x3c0>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    2d1e:	1a 86       	std	Y+10, r1	; 0x0a
    2d20:	1b 86       	std	Y+11, r1	; 0x0b
    2d22:	1c 86       	std	Y+12, r1	; 0x0c
    2d24:	1d 86       	std	Y+13, r1	; 0x0d
		
		for(cnt = 0; cnt < 1000; cnt ++)
    2d26:	1e 86       	std	Y+14, r1	; 0x0e
    2d28:	1f 86       	std	Y+15, r1	; 0x0f
    2d2a:	3d c0       	rjmp	.+122    	; 0x2da6 <hif_send+0x1f6>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    2d2c:	ce 01       	movw	r24, r28
    2d2e:	06 96       	adiw	r24, 0x06	; 6
    2d30:	ac 01       	movw	r20, r24
    2d32:	68 e7       	ldi	r22, 0x78	; 120
    2d34:	70 e1       	ldi	r23, 0x10	; 16
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    2d3e:	89 83       	std	Y+1, r24	; 0x01
			if(ret != M2M_SUCCESS) break;
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
    2d42:	88 23       	and	r24, r24
    2d44:	b9 f5       	brne	.+110    	; 0x2db4 <hif_send+0x204>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    2d46:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d48:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d4a:	84 3f       	cpi	r24, 0xF4	; 244
    2d4c:	91 40       	sbci	r25, 0x01	; 1
    2d4e:	40 f0       	brcs	.+16     	; 0x2d60 <hif_send+0x1b0>
				if(cnt < 501) {
    2d50:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d52:	9f 85       	ldd	r25, Y+15	; 0x0f
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    2d54:	61 e0       	ldi	r22, 0x01	; 1
    2d56:	70 e0       	ldi	r23, 0x00	; 0
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
    2d60:	8e 81       	ldd	r24, Y+6	; 0x06
    2d62:	9f 81       	ldd	r25, Y+7	; 0x07
    2d64:	a8 85       	ldd	r26, Y+8	; 0x08
    2d66:	b9 85       	ldd	r27, Y+9	; 0x09
    2d68:	82 70       	andi	r24, 0x02	; 2
    2d6a:	99 27       	eor	r25, r25
    2d6c:	aa 27       	eor	r26, r26
    2d6e:	bb 27       	eor	r27, r27
    2d70:	89 2b       	or	r24, r25
    2d72:	8a 2b       	or	r24, r26
    2d74:	8b 2b       	or	r24, r27
    2d76:	91 f4       	brne	.+36     	; 0x2d9c <hif_send+0x1ec>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    2d78:	ce 01       	movw	r24, r28
    2d7a:	0a 96       	adiw	r24, 0x0a	; 10
    2d7c:	ac 01       	movw	r20, r24
    2d7e:	60 e0       	ldi	r22, 0x00	; 0
    2d80:	74 e0       	ldi	r23, 0x04	; 4
    2d82:	85 e1       	ldi	r24, 0x15	; 21
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    2d8a:	89 83       	std	Y+1, r24	; 0x01
				if(ret != M2M_SUCCESS) {
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	88 23       	and	r24, r24
    2d90:	99 f0       	breq	.+38     	; 0x2db8 <hif_send+0x208>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    2d92:	1a 86       	std	Y+10, r1	; 0x0a
    2d94:	1b 86       	std	Y+11, r1	; 0x0b
    2d96:	1c 86       	std	Y+12, r1	; 0x0c
    2d98:	1d 86       	std	Y+13, r1	; 0x0d
					goto ERR1;
    2d9a:	f1 c0       	rjmp	.+482    	; 0x2f7e <hif_send+0x3ce>
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
		
		for(cnt = 0; cnt < 1000; cnt ++)
    2d9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2da0:	01 96       	adiw	r24, 0x01	; 1
    2da2:	8e 87       	std	Y+14, r24	; 0x0e
    2da4:	9f 87       	std	Y+15, r25	; 0x0f
    2da6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2da8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2daa:	88 3e       	cpi	r24, 0xE8	; 232
    2dac:	93 40       	sbci	r25, 0x03	; 3
    2dae:	08 f4       	brcc	.+2      	; 0x2db2 <hif_send+0x202>
    2db0:	bd cf       	rjmp	.-134    	; 0x2d2c <hif_send+0x17c>
    2db2:	03 c0       	rjmp	.+6      	; 0x2dba <hif_send+0x20a>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
    2db4:	00 00       	nop
    2db6:	01 c0       	rjmp	.+2      	; 0x2dba <hif_send+0x20a>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
					goto ERR1;
				}
				/*in case of success break */
				break;
    2db8:	00 00       	nop
			}
		}

		if (dma_addr != 0)
    2dba:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dbc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dbe:	ac 85       	ldd	r26, Y+12	; 0x0c
    2dc0:	bd 85       	ldd	r27, Y+13	; 0x0d
    2dc2:	89 2b       	or	r24, r25
    2dc4:	8a 2b       	or	r24, r26
    2dc6:	8b 2b       	or	r24, r27
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <hif_send+0x21c>
    2dca:	c5 c0       	rjmp	.+394    	; 0x2f56 <hif_send+0x3a6>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    2dcc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dce:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dd0:	ac 85       	ldd	r26, Y+12	; 0x0c
    2dd2:	bd 85       	ldd	r27, Y+13	; 0x0d
    2dd4:	88 8b       	std	Y+16, r24	; 0x10
    2dd6:	99 8b       	std	Y+17, r25	; 0x11
    2dd8:	aa 8b       	std	Y+18, r26	; 0x12
    2dda:	bb 8b       	std	Y+19, r27	; 0x13
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    2ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dde:	9d 81       	ldd	r25, Y+5	; 0x05
    2de0:	8c 83       	std	Y+4, r24	; 0x04
    2de2:	9d 83       	std	Y+5, r25	; 0x05
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    2de4:	88 89       	ldd	r24, Y+16	; 0x10
    2de6:	99 89       	ldd	r25, Y+17	; 0x11
    2de8:	aa 89       	ldd	r26, Y+18	; 0x12
    2dea:	bb 89       	ldd	r27, Y+19	; 0x13
    2dec:	ae 01       	movw	r20, r28
    2dee:	4e 5f       	subi	r20, 0xFE	; 254
    2df0:	5f 4f       	sbci	r21, 0xFF	; 255
    2df2:	08 e0       	ldi	r16, 0x08	; 8
    2df4:	10 e0       	ldi	r17, 0x00	; 0
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	bc 01       	movw	r22, r24
    2dfc:	cd 01       	movw	r24, r26
    2dfe:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <nm_write_block>
    2e02:	89 83       	std	Y+1, r24	; 0x01
			if(M2M_SUCCESS != ret) goto ERR1;
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	88 23       	and	r24, r24
    2e08:	09 f0       	breq	.+2      	; 0x2e0c <hif_send+0x25c>
    2e0a:	b4 c0       	rjmp	.+360    	; 0x2f74 <hif_send+0x3c4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    2e0c:	88 89       	ldd	r24, Y+16	; 0x10
    2e0e:	99 89       	ldd	r25, Y+17	; 0x11
    2e10:	aa 89       	ldd	r26, Y+18	; 0x12
    2e12:	bb 89       	ldd	r27, Y+19	; 0x13
    2e14:	08 96       	adiw	r24, 0x08	; 8
    2e16:	a1 1d       	adc	r26, r1
    2e18:	b1 1d       	adc	r27, r1
    2e1a:	88 8b       	std	Y+16, r24	; 0x10
    2e1c:	99 8b       	std	Y+17, r25	; 0x11
    2e1e:	aa 8b       	std	Y+18, r26	; 0x12
    2e20:	bb 8b       	std	Y+19, r27	; 0x13
			if(pu8CtrlBuf != NULL)
    2e22:	8e 89       	ldd	r24, Y+22	; 0x16
    2e24:	9f 89       	ldd	r25, Y+23	; 0x17
    2e26:	89 2b       	or	r24, r25
    2e28:	41 f1       	breq	.+80     	; 0x2e7a <hif_send+0x2ca>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    2e2a:	88 8d       	ldd	r24, Y+24	; 0x18
    2e2c:	99 8d       	ldd	r25, Y+25	; 0x19
    2e2e:	9c 01       	movw	r18, r24
    2e30:	40 e0       	ldi	r20, 0x00	; 0
    2e32:	50 e0       	ldi	r21, 0x00	; 0
    2e34:	88 89       	ldd	r24, Y+16	; 0x10
    2e36:	99 89       	ldd	r25, Y+17	; 0x11
    2e38:	aa 89       	ldd	r26, Y+18	; 0x12
    2e3a:	bb 89       	ldd	r27, Y+19	; 0x13
    2e3c:	6e 89       	ldd	r22, Y+22	; 0x16
    2e3e:	7f 89       	ldd	r23, Y+23	; 0x17
    2e40:	89 01       	movw	r16, r18
    2e42:	9a 01       	movw	r18, r20
    2e44:	ab 01       	movw	r20, r22
    2e46:	bc 01       	movw	r22, r24
    2e48:	cd 01       	movw	r24, r26
    2e4a:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <nm_write_block>
    2e4e:	89 83       	std	Y+1, r24	; 0x01
				if(M2M_SUCCESS != ret) goto ERR1;
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	88 23       	and	r24, r24
    2e54:	09 f0       	breq	.+2      	; 0x2e58 <hif_send+0x2a8>
    2e56:	90 c0       	rjmp	.+288    	; 0x2f78 <hif_send+0x3c8>
				u32CurrAddr += u16CtrlBufSize;
    2e58:	88 8d       	ldd	r24, Y+24	; 0x18
    2e5a:	99 8d       	ldd	r25, Y+25	; 0x19
    2e5c:	9c 01       	movw	r18, r24
    2e5e:	40 e0       	ldi	r20, 0x00	; 0
    2e60:	50 e0       	ldi	r21, 0x00	; 0
    2e62:	88 89       	ldd	r24, Y+16	; 0x10
    2e64:	99 89       	ldd	r25, Y+17	; 0x11
    2e66:	aa 89       	ldd	r26, Y+18	; 0x12
    2e68:	bb 89       	ldd	r27, Y+19	; 0x13
    2e6a:	82 0f       	add	r24, r18
    2e6c:	93 1f       	adc	r25, r19
    2e6e:	a4 1f       	adc	r26, r20
    2e70:	b5 1f       	adc	r27, r21
    2e72:	88 8b       	std	Y+16, r24	; 0x10
    2e74:	99 8b       	std	Y+17, r25	; 0x11
    2e76:	aa 8b       	std	Y+18, r26	; 0x12
    2e78:	bb 8b       	std	Y+19, r27	; 0x13
			}
			if(pu8DataBuf != NULL)
    2e7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e7c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e7e:	89 2b       	or	r24, r25
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <hif_send+0x2d4>
    2e82:	3f c0       	rjmp	.+126    	; 0x2f02 <hif_send+0x352>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    2e84:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2e86:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2e88:	88 8d       	ldd	r24, Y+24	; 0x18
    2e8a:	99 8d       	ldd	r25, Y+25	; 0x19
    2e8c:	a9 01       	movw	r20, r18
    2e8e:	48 1b       	sub	r20, r24
    2e90:	59 0b       	sbc	r21, r25
    2e92:	ca 01       	movw	r24, r20
    2e94:	9c 01       	movw	r18, r24
    2e96:	40 e0       	ldi	r20, 0x00	; 0
    2e98:	50 e0       	ldi	r21, 0x00	; 0
    2e9a:	88 89       	ldd	r24, Y+16	; 0x10
    2e9c:	99 89       	ldd	r25, Y+17	; 0x11
    2e9e:	aa 89       	ldd	r26, Y+18	; 0x12
    2ea0:	bb 89       	ldd	r27, Y+19	; 0x13
    2ea2:	82 0f       	add	r24, r18
    2ea4:	93 1f       	adc	r25, r19
    2ea6:	a4 1f       	adc	r26, r20
    2ea8:	b5 1f       	adc	r27, r21
    2eaa:	88 8b       	std	Y+16, r24	; 0x10
    2eac:	99 8b       	std	Y+17, r25	; 0x11
    2eae:	aa 8b       	std	Y+18, r26	; 0x12
    2eb0:	bb 8b       	std	Y+19, r27	; 0x13
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    2eb2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2eb4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2eb6:	9c 01       	movw	r18, r24
    2eb8:	40 e0       	ldi	r20, 0x00	; 0
    2eba:	50 e0       	ldi	r21, 0x00	; 0
    2ebc:	88 89       	ldd	r24, Y+16	; 0x10
    2ebe:	99 89       	ldd	r25, Y+17	; 0x11
    2ec0:	aa 89       	ldd	r26, Y+18	; 0x12
    2ec2:	bb 89       	ldd	r27, Y+19	; 0x13
    2ec4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2ec6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2ec8:	89 01       	movw	r16, r18
    2eca:	9a 01       	movw	r18, r20
    2ecc:	ab 01       	movw	r20, r22
    2ece:	bc 01       	movw	r22, r24
    2ed0:	cd 01       	movw	r24, r26
    2ed2:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <nm_write_block>
    2ed6:	89 83       	std	Y+1, r24	; 0x01
				if(M2M_SUCCESS != ret) goto ERR1;
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	88 23       	and	r24, r24
    2edc:	09 f0       	breq	.+2      	; 0x2ee0 <hif_send+0x330>
    2ede:	4e c0       	rjmp	.+156    	; 0x2f7c <hif_send+0x3cc>
				u32CurrAddr += u16DataSize;
    2ee0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ee2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ee4:	9c 01       	movw	r18, r24
    2ee6:	40 e0       	ldi	r20, 0x00	; 0
    2ee8:	50 e0       	ldi	r21, 0x00	; 0
    2eea:	88 89       	ldd	r24, Y+16	; 0x10
    2eec:	99 89       	ldd	r25, Y+17	; 0x11
    2eee:	aa 89       	ldd	r26, Y+18	; 0x12
    2ef0:	bb 89       	ldd	r27, Y+19	; 0x13
    2ef2:	82 0f       	add	r24, r18
    2ef4:	93 1f       	adc	r25, r19
    2ef6:	a4 1f       	adc	r26, r20
    2ef8:	b5 1f       	adc	r27, r21
    2efa:	88 8b       	std	Y+16, r24	; 0x10
    2efc:	99 8b       	std	Y+17, r25	; 0x11
    2efe:	aa 8b       	std	Y+18, r26	; 0x12
    2f00:	bb 8b       	std	Y+19, r27	; 0x13
			}

			reg = dma_addr << 2;
    2f02:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f04:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f06:	ac 85       	ldd	r26, Y+12	; 0x0c
    2f08:	bd 85       	ldd	r27, Y+13	; 0x0d
    2f0a:	88 0f       	add	r24, r24
    2f0c:	99 1f       	adc	r25, r25
    2f0e:	aa 1f       	adc	r26, r26
    2f10:	bb 1f       	adc	r27, r27
    2f12:	88 0f       	add	r24, r24
    2f14:	99 1f       	adc	r25, r25
    2f16:	aa 1f       	adc	r26, r26
    2f18:	bb 1f       	adc	r27, r27
    2f1a:	8e 83       	std	Y+6, r24	; 0x06
    2f1c:	9f 83       	std	Y+7, r25	; 0x07
    2f1e:	a8 87       	std	Y+8, r26	; 0x08
    2f20:	b9 87       	std	Y+9, r27	; 0x09
			reg |= NBIT1;
    2f22:	8e 81       	ldd	r24, Y+6	; 0x06
    2f24:	9f 81       	ldd	r25, Y+7	; 0x07
    2f26:	a8 85       	ldd	r26, Y+8	; 0x08
    2f28:	b9 85       	ldd	r27, Y+9	; 0x09
    2f2a:	82 60       	ori	r24, 0x02	; 2
    2f2c:	8e 83       	std	Y+6, r24	; 0x06
    2f2e:	9f 83       	std	Y+7, r25	; 0x07
    2f30:	a8 87       	std	Y+8, r26	; 0x08
    2f32:	b9 87       	std	Y+9, r27	; 0x09
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    2f34:	8e 81       	ldd	r24, Y+6	; 0x06
    2f36:	9f 81       	ldd	r25, Y+7	; 0x07
    2f38:	a8 85       	ldd	r26, Y+8	; 0x08
    2f3a:	b9 85       	ldd	r27, Y+9	; 0x09
    2f3c:	9c 01       	movw	r18, r24
    2f3e:	ad 01       	movw	r20, r26
    2f40:	6c e6       	ldi	r22, 0x6C	; 108
    2f42:	70 e1       	ldi	r23, 0x10	; 16
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    2f4c:	89 83       	std	Y+1, r24	; 0x01
			if(M2M_SUCCESS != ret) goto ERR1;
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	88 23       	and	r24, r24
    2f52:	39 f0       	breq	.+14     	; 0x2f62 <hif_send+0x3b2>
    2f54:	14 c0       	rjmp	.+40     	; 0x2f7e <hif_send+0x3ce>
		}
		else
		{
			ret = hif_chip_sleep();
    2f56:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <hif_chip_sleep>
    2f5a:	89 83       	std	Y+1, r24	; 0x01
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    2f5c:	8d ef       	ldi	r24, 0xFD	; 253
    2f5e:	89 83       	std	Y+1, r24	; 0x01
			goto ERR2;
    2f60:	12 c0       	rjmp	.+36     	; 0x2f86 <hif_send+0x3d6>
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR2;
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    2f62:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <hif_chip_sleep>
    2f66:	89 83       	std	Y+1, r24	; 0x01
	return ret;
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	0e c0       	rjmp	.+28     	; 0x2f88 <hif_send+0x3d8>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    2f6c:	00 00       	nop
    2f6e:	07 c0       	rjmp	.+14     	; 0x2f7e <hif_send+0x3ce>

		reg = 0UL;
		reg |= NBIT1;
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    2f70:	00 00       	nop
    2f72:	05 c0       	rjmp	.+10     	; 0x2f7e <hif_send+0x3ce>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
			if(M2M_SUCCESS != ret) goto ERR1;
    2f74:	00 00       	nop
    2f76:	03 c0       	rjmp	.+6      	; 0x2f7e <hif_send+0x3ce>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
			if(pu8CtrlBuf != NULL)
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
				if(M2M_SUCCESS != ret) goto ERR1;
    2f78:	00 00       	nop
    2f7a:	01 c0       	rjmp	.+2      	; 0x2f7e <hif_send+0x3ce>
			}
			if(pu8DataBuf != NULL)
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
				if(M2M_SUCCESS != ret) goto ERR1;
    2f7c:	00 00       	nop
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    2f7e:	0e 94 89 15 	call	0x2b12	; 0x2b12 <hif_chip_sleep_sc>
    2f82:	01 c0       	rjmp	.+2      	; 0x2f86 <hif_send+0x3d6>

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR2;
    2f84:	00 00       	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
ERR2:
	/*logical error*/
	return ret;
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f88:	6f 96       	adiw	r28, 0x1f	; 31
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	de bf       	out	0x3e, r29	; 62
    2f8e:	df 91       	pop	r29
    2f90:	cf 91       	pop	r28
    2f92:	1f 91       	pop	r17
    2f94:	0f 91       	pop	r16
    2f96:	ff 90       	pop	r15
    2f98:	ef 90       	pop	r14
    2f9a:	df 90       	pop	r13
    2f9c:	cf 90       	pop	r12
    2f9e:	08 95       	ret

00002fa0 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    2fa0:	0f 93       	push	r16
    2fa2:	1f 93       	push	r17
    2fa4:	cf 93       	push	r28
    2fa6:	df 93       	push	r29
    2fa8:	cd b7       	in	r28, 0x3d	; 61
    2faa:	de b7       	in	r29, 0x3e	; 62
    2fac:	2f 97       	sbiw	r28, 0x0f	; 15
    2fae:	cd bf       	out	0x3d, r28	; 61
    2fb0:	de bf       	out	0x3e, r29	; 62
	sint8 ret = M2M_SUCCESS;
    2fb2:	19 82       	std	Y+1, r1	; 0x01
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    2fb4:	ce 01       	movw	r24, r28
    2fb6:	04 96       	adiw	r24, 0x04	; 4
    2fb8:	ac 01       	movw	r20, r24
    2fba:	60 e7       	ldi	r22, 0x70	; 112
    2fbc:	70 e1       	ldi	r23, 0x10	; 16
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    2fc6:	89 83       	std	Y+1, r24	; 0x01
	if(M2M_SUCCESS == ret)
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	88 23       	and	r24, r24
    2fcc:	09 f0       	breq	.+2      	; 0x2fd0 <hif_isr+0x30>
    2fce:	70 c1       	rjmp	.+736    	; 0x32b0 <hif_isr+0x310>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    2fd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd2:	9d 81       	ldd	r25, Y+5	; 0x05
    2fd4:	ae 81       	ldd	r26, Y+6	; 0x06
    2fd6:	bf 81       	ldd	r27, Y+7	; 0x07
    2fd8:	81 70       	andi	r24, 0x01	; 1
    2fda:	99 27       	eor	r25, r25
    2fdc:	aa 27       	eor	r26, r26
    2fde:	bb 27       	eor	r27, r27
    2fe0:	89 2b       	or	r24, r25
    2fe2:	8a 2b       	or	r24, r26
    2fe4:	8b 2b       	or	r24, r27
    2fe6:	09 f4       	brne	.+2      	; 0x2fea <hif_isr+0x4a>
    2fe8:	60 c1       	rjmp	.+704    	; 0x32aa <hif_isr+0x30a>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	0e 94 89 12 	call	0x2512	; 0x2512 <nm_bsp_interrupt_ctrl>
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    2ff0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff4:	ae 81       	ldd	r26, Y+6	; 0x06
    2ff6:	bf 81       	ldd	r27, Y+7	; 0x07
    2ff8:	8e 7f       	andi	r24, 0xFE	; 254
    2ffa:	8c 83       	std	Y+4, r24	; 0x04
    2ffc:	9d 83       	std	Y+5, r25	; 0x05
    2ffe:	ae 83       	std	Y+6, r26	; 0x06
    3000:	bf 83       	std	Y+7, r27	; 0x07
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    3002:	8c 81       	ldd	r24, Y+4	; 0x04
    3004:	9d 81       	ldd	r25, Y+5	; 0x05
    3006:	ae 81       	ldd	r26, Y+6	; 0x06
    3008:	bf 81       	ldd	r27, Y+7	; 0x07
    300a:	9c 01       	movw	r18, r24
    300c:	ad 01       	movw	r20, r26
    300e:	60 e7       	ldi	r22, 0x70	; 112
    3010:	70 e1       	ldi	r23, 0x10	; 16
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    301a:	89 83       	std	Y+1, r24	; 0x01
			if(ret != M2M_SUCCESS)goto ERR1;
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	88 23       	and	r24, r24
    3020:	09 f0       	breq	.+2      	; 0x3024 <hif_isr+0x84>
    3022:	48 c1       	rjmp	.+656    	; 0x32b4 <hif_isr+0x314>
			gstrHifCxt.u8HifRXDone = 1;
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	80 93 37 33 	sts	0x3337, r24	; 0x803337 <gstrHifCxt+0x2>
			size = (uint16)((reg >> 2) & 0xfff);
    302a:	8c 81       	ldd	r24, Y+4	; 0x04
    302c:	9d 81       	ldd	r25, Y+5	; 0x05
    302e:	ae 81       	ldd	r26, Y+6	; 0x06
    3030:	bf 81       	ldd	r27, Y+7	; 0x07
    3032:	b6 95       	lsr	r27
    3034:	a7 95       	ror	r26
    3036:	97 95       	ror	r25
    3038:	87 95       	ror	r24
    303a:	b6 95       	lsr	r27
    303c:	a7 95       	ror	r26
    303e:	97 95       	ror	r25
    3040:	87 95       	ror	r24
    3042:	9f 70       	andi	r25, 0x0F	; 15
    3044:	8a 83       	std	Y+2, r24	; 0x02
    3046:	9b 83       	std	Y+3, r25	; 0x03
			if (size > 0) {
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
    304a:	9b 81       	ldd	r25, Y+3	; 0x03
    304c:	89 2b       	or	r24, r25
    304e:	09 f4       	brne	.+2      	; 0x3052 <hif_isr+0xb2>
    3050:	29 c1       	rjmp	.+594    	; 0x32a4 <hif_isr+0x304>
				uint32 address = 0;
    3052:	1c 86       	std	Y+12, r1	; 0x0c
    3054:	1d 86       	std	Y+13, r1	; 0x0d
    3056:	1e 86       	std	Y+14, r1	; 0x0e
    3058:	1f 86       	std	Y+15, r1	; 0x0f
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    305a:	ce 01       	movw	r24, r28
    305c:	0c 96       	adiw	r24, 0x0c	; 12
    305e:	ac 01       	movw	r20, r24
    3060:	64 e8       	ldi	r22, 0x84	; 132
    3062:	70 e1       	ldi	r23, 0x10	; 16
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    306c:	89 83       	std	Y+1, r24	; 0x01
				if(M2M_SUCCESS != ret)
    306e:	89 81       	ldd	r24, Y+1	; 0x01
    3070:	88 23       	and	r24, r24
    3072:	21 f0       	breq	.+8      	; 0x307c <hif_isr+0xdc>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
					nm_bsp_interrupt_ctrl(1);
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	0e 94 89 12 	call	0x2512	; 0x2512 <nm_bsp_interrupt_ctrl>
					goto ERR1;
    307a:	1d c1       	rjmp	.+570    	; 0x32b6 <hif_isr+0x316>
				}
				gstrHifCxt.u32RxAddr = address;
    307c:	8c 85       	ldd	r24, Y+12	; 0x0c
    307e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3080:	ae 85       	ldd	r26, Y+14	; 0x0e
    3082:	bf 85       	ldd	r27, Y+15	; 0x0f
    3084:	80 93 39 33 	sts	0x3339, r24	; 0x803339 <gstrHifCxt+0x4>
    3088:	90 93 3a 33 	sts	0x333A, r25	; 0x80333a <gstrHifCxt+0x5>
    308c:	a0 93 3b 33 	sts	0x333B, r26	; 0x80333b <gstrHifCxt+0x6>
    3090:	b0 93 3c 33 	sts	0x333C, r27	; 0x80333c <gstrHifCxt+0x7>
				gstrHifCxt.u32RxSize = size;
    3094:	8a 81       	ldd	r24, Y+2	; 0x02
    3096:	9b 81       	ldd	r25, Y+3	; 0x03
    3098:	cc 01       	movw	r24, r24
    309a:	a0 e0       	ldi	r26, 0x00	; 0
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	80 93 3d 33 	sts	0x333D, r24	; 0x80333d <gstrHifCxt+0x8>
    30a2:	90 93 3e 33 	sts	0x333E, r25	; 0x80333e <gstrHifCxt+0x9>
    30a6:	a0 93 3f 33 	sts	0x333F, r26	; 0x80333f <gstrHifCxt+0xa>
    30aa:	b0 93 40 33 	sts	0x3340, r27	; 0x803340 <gstrHifCxt+0xb>
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    30ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    30b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    30b2:	ae 85       	ldd	r26, Y+14	; 0x0e
    30b4:	bf 85       	ldd	r27, Y+15	; 0x0f
    30b6:	ae 01       	movw	r20, r28
    30b8:	48 5f       	subi	r20, 0xF8	; 248
    30ba:	5f 4f       	sbci	r21, 0xFF	; 255
    30bc:	04 e0       	ldi	r16, 0x04	; 4
    30be:	10 e0       	ldi	r17, 0x00	; 0
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	bc 01       	movw	r22, r24
    30c6:	cd 01       	movw	r24, r26
    30c8:	0e 94 43 25 	call	0x4a86	; 0x4a86 <nm_read_block>
    30cc:	89 83       	std	Y+1, r24	; 0x01
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    30ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    30d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    30d2:	8a 87       	std	Y+10, r24	; 0x0a
    30d4:	9b 87       	std	Y+11, r25	; 0x0b
				if(M2M_SUCCESS != ret)
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	88 23       	and	r24, r24
    30da:	21 f0       	breq	.+8      	; 0x30e4 <hif_isr+0x144>
				{
					M2M_ERR("(hif) address bus fail\n");
					nm_bsp_interrupt_ctrl(1);
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	0e 94 89 12 	call	0x2512	; 0x2512 <nm_bsp_interrupt_ctrl>
					goto ERR1;
    30e2:	e9 c0       	rjmp	.+466    	; 0x32b6 <hif_isr+0x316>
				}
				if(strHif.u16Length != size)
    30e4:	2a 85       	ldd	r18, Y+10	; 0x0a
    30e6:	3b 85       	ldd	r19, Y+11	; 0x0b
    30e8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ea:	9b 81       	ldd	r25, Y+3	; 0x03
    30ec:	28 17       	cp	r18, r24
    30ee:	39 07       	cpc	r19, r25
    30f0:	81 f0       	breq	.+32     	; 0x3112 <hif_isr+0x172>
				{
					if((size - strHif.u16Length) > 4)
    30f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    30f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    30f6:	2a 81       	ldd	r18, Y+2	; 0x02
    30f8:	3b 81       	ldd	r19, Y+3	; 0x03
    30fa:	a9 01       	movw	r20, r18
    30fc:	48 1b       	sub	r20, r24
    30fe:	59 0b       	sbc	r21, r25
    3100:	ca 01       	movw	r24, r20
    3102:	05 97       	sbiw	r24, 0x05	; 5
    3104:	30 f0       	brcs	.+12     	; 0x3112 <hif_isr+0x172>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	0e 94 89 12 	call	0x2512	; 0x2512 <nm_bsp_interrupt_ctrl>
						ret = M2M_ERR_BUS_FAIL;
    310c:	8a ef       	ldi	r24, 0xFA	; 250
    310e:	89 83       	std	Y+1, r24	; 0x01
						goto ERR1;
    3110:	d2 c0       	rjmp	.+420    	; 0x32b6 <hif_isr+0x316>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    3112:	88 85       	ldd	r24, Y+8	; 0x08
    3114:	81 30       	cpi	r24, 0x01	; 1
    3116:	e9 f4       	brne	.+58     	; 0x3152 <hif_isr+0x1b2>
				{
					if(gstrHifCxt.pfWifiCb)
    3118:	80 91 41 33 	lds	r24, 0x3341	; 0x803341 <gstrHifCxt+0xc>
    311c:	90 91 42 33 	lds	r25, 0x3342	; 0x803342 <gstrHifCxt+0xd>
    3120:	89 2b       	or	r24, r25
    3122:	09 f4       	brne	.+2      	; 0x3126 <hif_isr+0x186>
    3124:	b7 c0       	rjmp	.+366    	; 0x3294 <hif_isr+0x2f4>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3126:	e0 91 41 33 	lds	r30, 0x3341	; 0x803341 <gstrHifCxt+0xc>
    312a:	f0 91 42 33 	lds	r31, 0x3342	; 0x803342 <gstrHifCxt+0xd>
    312e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3130:	9d 85       	ldd	r25, Y+13	; 0x0d
    3132:	ae 85       	ldd	r26, Y+14	; 0x0e
    3134:	bf 85       	ldd	r27, Y+15	; 0x0f
    3136:	08 96       	adiw	r24, 0x08	; 8
    3138:	a1 1d       	adc	r26, r1
    313a:	b1 1d       	adc	r27, r1
    313c:	2a 85       	ldd	r18, Y+10	; 0x0a
    313e:	3b 85       	ldd	r19, Y+11	; 0x0b
    3140:	b9 01       	movw	r22, r18
    3142:	68 50       	subi	r22, 0x08	; 8
    3144:	71 09       	sbc	r23, r1
    3146:	19 85       	ldd	r17, Y+9	; 0x09
    3148:	9c 01       	movw	r18, r24
    314a:	ad 01       	movw	r20, r26
    314c:	81 2f       	mov	r24, r17
    314e:	09 95       	icall
    3150:	a1 c0       	rjmp	.+322    	; 0x3294 <hif_isr+0x2f4>
					else
						M2M_ERR("WIFI callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    3152:	88 85       	ldd	r24, Y+8	; 0x08
    3154:	82 30       	cpi	r24, 0x02	; 2
    3156:	e9 f4       	brne	.+58     	; 0x3192 <hif_isr+0x1f2>
				{
					if(gstrHifCxt.pfIpCb)
    3158:	80 91 43 33 	lds	r24, 0x3343	; 0x803343 <gstrHifCxt+0xe>
    315c:	90 91 44 33 	lds	r25, 0x3344	; 0x803344 <gstrHifCxt+0xf>
    3160:	89 2b       	or	r24, r25
    3162:	09 f4       	brne	.+2      	; 0x3166 <hif_isr+0x1c6>
    3164:	97 c0       	rjmp	.+302    	; 0x3294 <hif_isr+0x2f4>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3166:	e0 91 43 33 	lds	r30, 0x3343	; 0x803343 <gstrHifCxt+0xe>
    316a:	f0 91 44 33 	lds	r31, 0x3344	; 0x803344 <gstrHifCxt+0xf>
    316e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3170:	9d 85       	ldd	r25, Y+13	; 0x0d
    3172:	ae 85       	ldd	r26, Y+14	; 0x0e
    3174:	bf 85       	ldd	r27, Y+15	; 0x0f
    3176:	08 96       	adiw	r24, 0x08	; 8
    3178:	a1 1d       	adc	r26, r1
    317a:	b1 1d       	adc	r27, r1
    317c:	2a 85       	ldd	r18, Y+10	; 0x0a
    317e:	3b 85       	ldd	r19, Y+11	; 0x0b
    3180:	b9 01       	movw	r22, r18
    3182:	68 50       	subi	r22, 0x08	; 8
    3184:	71 09       	sbc	r23, r1
    3186:	19 85       	ldd	r17, Y+9	; 0x09
    3188:	9c 01       	movw	r18, r24
    318a:	ad 01       	movw	r20, r26
    318c:	81 2f       	mov	r24, r17
    318e:	09 95       	icall
    3190:	81 c0       	rjmp	.+258    	; 0x3294 <hif_isr+0x2f4>
					else
						M2M_ERR("Scoket callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    3192:	88 85       	ldd	r24, Y+8	; 0x08
    3194:	84 30       	cpi	r24, 0x04	; 4
    3196:	e9 f4       	brne	.+58     	; 0x31d2 <hif_isr+0x232>
				{
					if(gstrHifCxt.pfOtaCb)
    3198:	80 91 45 33 	lds	r24, 0x3345	; 0x803345 <gstrHifCxt+0x10>
    319c:	90 91 46 33 	lds	r25, 0x3346	; 0x803346 <gstrHifCxt+0x11>
    31a0:	89 2b       	or	r24, r25
    31a2:	09 f4       	brne	.+2      	; 0x31a6 <hif_isr+0x206>
    31a4:	77 c0       	rjmp	.+238    	; 0x3294 <hif_isr+0x2f4>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    31a6:	e0 91 45 33 	lds	r30, 0x3345	; 0x803345 <gstrHifCxt+0x10>
    31aa:	f0 91 46 33 	lds	r31, 0x3346	; 0x803346 <gstrHifCxt+0x11>
    31ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    31b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    31b2:	ae 85       	ldd	r26, Y+14	; 0x0e
    31b4:	bf 85       	ldd	r27, Y+15	; 0x0f
    31b6:	08 96       	adiw	r24, 0x08	; 8
    31b8:	a1 1d       	adc	r26, r1
    31ba:	b1 1d       	adc	r27, r1
    31bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    31be:	3b 85       	ldd	r19, Y+11	; 0x0b
    31c0:	b9 01       	movw	r22, r18
    31c2:	68 50       	subi	r22, 0x08	; 8
    31c4:	71 09       	sbc	r23, r1
    31c6:	19 85       	ldd	r17, Y+9	; 0x09
    31c8:	9c 01       	movw	r18, r24
    31ca:	ad 01       	movw	r20, r26
    31cc:	81 2f       	mov	r24, r17
    31ce:	09 95       	icall
    31d0:	61 c0       	rjmp	.+194    	; 0x3294 <hif_isr+0x2f4>
					else
						M2M_ERR("Ota callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    31d2:	88 85       	ldd	r24, Y+8	; 0x08
    31d4:	86 30       	cpi	r24, 0x06	; 6
    31d6:	e9 f4       	brne	.+58     	; 0x3212 <hif_isr+0x272>
				{
					if(gstrHifCxt.pfCryptoCb)
    31d8:	80 91 4b 33 	lds	r24, 0x334B	; 0x80334b <gstrHifCxt+0x16>
    31dc:	90 91 4c 33 	lds	r25, 0x334C	; 0x80334c <gstrHifCxt+0x17>
    31e0:	89 2b       	or	r24, r25
    31e2:	09 f4       	brne	.+2      	; 0x31e6 <hif_isr+0x246>
    31e4:	57 c0       	rjmp	.+174    	; 0x3294 <hif_isr+0x2f4>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    31e6:	e0 91 4b 33 	lds	r30, 0x334B	; 0x80334b <gstrHifCxt+0x16>
    31ea:	f0 91 4c 33 	lds	r31, 0x334C	; 0x80334c <gstrHifCxt+0x17>
    31ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    31f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    31f2:	ae 85       	ldd	r26, Y+14	; 0x0e
    31f4:	bf 85       	ldd	r27, Y+15	; 0x0f
    31f6:	08 96       	adiw	r24, 0x08	; 8
    31f8:	a1 1d       	adc	r26, r1
    31fa:	b1 1d       	adc	r27, r1
    31fc:	2a 85       	ldd	r18, Y+10	; 0x0a
    31fe:	3b 85       	ldd	r19, Y+11	; 0x0b
    3200:	b9 01       	movw	r22, r18
    3202:	68 50       	subi	r22, 0x08	; 8
    3204:	71 09       	sbc	r23, r1
    3206:	19 85       	ldd	r17, Y+9	; 0x09
    3208:	9c 01       	movw	r18, r24
    320a:	ad 01       	movw	r20, r26
    320c:	81 2f       	mov	r24, r17
    320e:	09 95       	icall
    3210:	41 c0       	rjmp	.+130    	; 0x3294 <hif_isr+0x2f4>

					else
						M2M_ERR("Crypto callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    3212:	88 85       	ldd	r24, Y+8	; 0x08
    3214:	87 30       	cpi	r24, 0x07	; 7
    3216:	e1 f4       	brne	.+56     	; 0x3250 <hif_isr+0x2b0>
				{
					if(gstrHifCxt.pfSigmaCb)
    3218:	80 91 47 33 	lds	r24, 0x3347	; 0x803347 <gstrHifCxt+0x12>
    321c:	90 91 48 33 	lds	r25, 0x3348	; 0x803348 <gstrHifCxt+0x13>
    3220:	89 2b       	or	r24, r25
    3222:	c1 f1       	breq	.+112    	; 0x3294 <hif_isr+0x2f4>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3224:	e0 91 47 33 	lds	r30, 0x3347	; 0x803347 <gstrHifCxt+0x12>
    3228:	f0 91 48 33 	lds	r31, 0x3348	; 0x803348 <gstrHifCxt+0x13>
    322c:	8c 85       	ldd	r24, Y+12	; 0x0c
    322e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3230:	ae 85       	ldd	r26, Y+14	; 0x0e
    3232:	bf 85       	ldd	r27, Y+15	; 0x0f
    3234:	08 96       	adiw	r24, 0x08	; 8
    3236:	a1 1d       	adc	r26, r1
    3238:	b1 1d       	adc	r27, r1
    323a:	2a 85       	ldd	r18, Y+10	; 0x0a
    323c:	3b 85       	ldd	r19, Y+11	; 0x0b
    323e:	b9 01       	movw	r22, r18
    3240:	68 50       	subi	r22, 0x08	; 8
    3242:	71 09       	sbc	r23, r1
    3244:	19 85       	ldd	r17, Y+9	; 0x09
    3246:	9c 01       	movw	r18, r24
    3248:	ad 01       	movw	r20, r26
    324a:	81 2f       	mov	r24, r17
    324c:	09 95       	icall
    324e:	22 c0       	rjmp	.+68     	; 0x3294 <hif_isr+0x2f4>
					else
						M2M_ERR("Sigma callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    3250:	88 85       	ldd	r24, Y+8	; 0x08
    3252:	85 30       	cpi	r24, 0x05	; 5
    3254:	e1 f4       	brne	.+56     	; 0x328e <hif_isr+0x2ee>
				{
				    if(gstrHifCxt.pfSslCb)
    3256:	80 91 4d 33 	lds	r24, 0x334D	; 0x80334d <gstrHifCxt+0x18>
    325a:	90 91 4e 33 	lds	r25, 0x334E	; 0x80334e <gstrHifCxt+0x19>
    325e:	89 2b       	or	r24, r25
    3260:	c9 f0       	breq	.+50     	; 0x3294 <hif_isr+0x2f4>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3262:	e0 91 4d 33 	lds	r30, 0x334D	; 0x80334d <gstrHifCxt+0x18>
    3266:	f0 91 4e 33 	lds	r31, 0x334E	; 0x80334e <gstrHifCxt+0x19>
    326a:	8c 85       	ldd	r24, Y+12	; 0x0c
    326c:	9d 85       	ldd	r25, Y+13	; 0x0d
    326e:	ae 85       	ldd	r26, Y+14	; 0x0e
    3270:	bf 85       	ldd	r27, Y+15	; 0x0f
    3272:	08 96       	adiw	r24, 0x08	; 8
    3274:	a1 1d       	adc	r26, r1
    3276:	b1 1d       	adc	r27, r1
    3278:	2a 85       	ldd	r18, Y+10	; 0x0a
    327a:	3b 85       	ldd	r19, Y+11	; 0x0b
    327c:	b9 01       	movw	r22, r18
    327e:	68 50       	subi	r22, 0x08	; 8
    3280:	71 09       	sbc	r23, r1
    3282:	19 85       	ldd	r17, Y+9	; 0x09
    3284:	9c 01       	movw	r18, r24
    3286:	ad 01       	movw	r20, r26
    3288:	81 2f       	mov	r24, r17
    328a:	09 95       	icall
    328c:	03 c0       	rjmp	.+6      	; 0x3294 <hif_isr+0x2f4>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
					ret = M2M_ERR_BUS_FAIL;
    328e:	8a ef       	ldi	r24, 0xFA	; 250
    3290:	89 83       	std	Y+1, r24	; 0x01
					goto ERR1;
    3292:	11 c0       	rjmp	.+34     	; 0x32b6 <hif_isr+0x316>
				}
				if(gstrHifCxt.u8HifRXDone)
    3294:	80 91 37 33 	lds	r24, 0x3337	; 0x803337 <gstrHifCxt+0x2>
    3298:	88 23       	and	r24, r24
    329a:	69 f0       	breq	.+26     	; 0x32b6 <hif_isr+0x316>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
					ret = hif_set_rx_done();
    329c:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <hif_set_rx_done>
    32a0:	89 83       	std	Y+1, r24	; 0x01
    32a2:	09 c0       	rjmp	.+18     	; 0x32b6 <hif_isr+0x316>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
				ret = M2M_ERR_RCV;
    32a4:	8e ef       	ldi	r24, 0xFE	; 254
    32a6:	89 83       	std	Y+1, r24	; 0x01
				goto ERR1;
    32a8:	06 c0       	rjmp	.+12     	; 0x32b6 <hif_isr+0x316>
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
			ret = M2M_ERR_FAIL;
    32aa:	84 ef       	ldi	r24, 0xF4	; 244
    32ac:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    32ae:	03 c0       	rjmp	.+6      	; 0x32b6 <hif_isr+0x316>
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
		goto ERR1;
    32b0:	00 00       	nop
    32b2:	01 c0       	rjmp	.+2      	; 0x32b6 <hif_isr+0x316>

			nm_bsp_interrupt_ctrl(0);
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
			if(ret != M2M_SUCCESS)goto ERR1;
    32b4:	00 00       	nop
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
		goto ERR1;
	}

ERR1:
	return ret;
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    32b8:	2f 96       	adiw	r28, 0x0f	; 15
    32ba:	cd bf       	out	0x3d, r28	; 61
    32bc:	de bf       	out	0x3e, r29	; 62
    32be:	df 91       	pop	r29
    32c0:	cf 91       	pop	r28
    32c2:	1f 91       	pop	r17
    32c4:	0f 91       	pop	r16
    32c6:	08 95       	ret

000032c8 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    32c8:	cf 93       	push	r28
    32ca:	df 93       	push	r29
    32cc:	1f 92       	push	r1
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
	sint8 ret = M2M_SUCCESS;	
    32d2:	19 82       	std	Y+1, r1	; 0x01
	while (gstrHifCxt.u8Interrupt) {
    32d4:	0b c0       	rjmp	.+22     	; 0x32ec <hif_handle_isr+0x24>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    32d6:	80 91 38 33 	lds	r24, 0x3338	; 0x803338 <gstrHifCxt+0x3>
    32da:	81 50       	subi	r24, 0x01	; 1
    32dc:	80 93 38 33 	sts	0x3338, r24	; 0x803338 <gstrHifCxt+0x3>
		while(1)
		{
			ret = hif_isr();
    32e0:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <hif_isr>
    32e4:	89 83       	std	Y+1, r24	; 0x01
			if(ret == M2M_SUCCESS) {
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	88 23       	and	r24, r24
    32ea:	d1 f7       	brne	.-12     	; 0x32e0 <hif_handle_isr+0x18>
*/

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    32ec:	80 91 38 33 	lds	r24, 0x3338	; 0x803338 <gstrHifCxt+0x3>
    32f0:	88 23       	and	r24, r24
    32f2:	89 f7       	brne	.-30     	; 0x32d6 <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    32f6:	0f 90       	pop	r0
    32f8:	df 91       	pop	r29
    32fa:	cf 91       	pop	r28
    32fc:	08 95       	ret

000032fe <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    32fe:	ef 92       	push	r14
    3300:	ff 92       	push	r15
    3302:	0f 93       	push	r16
    3304:	1f 93       	push	r17
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
    330e:	2a 97       	sbiw	r28, 0x0a	; 10
    3310:	cd bf       	out	0x3d, r28	; 61
    3312:	de bf       	out	0x3e, r29	; 62
    3314:	6a 83       	std	Y+2, r22	; 0x02
    3316:	7b 83       	std	Y+3, r23	; 0x03
    3318:	8c 83       	std	Y+4, r24	; 0x04
    331a:	9d 83       	std	Y+5, r25	; 0x05
    331c:	4e 83       	std	Y+6, r20	; 0x06
    331e:	5f 83       	std	Y+7, r21	; 0x07
    3320:	28 87       	std	Y+8, r18	; 0x08
    3322:	39 87       	std	Y+9, r19	; 0x09
    3324:	0a 87       	std	Y+10, r16	; 0x0a
	sint8 ret = M2M_SUCCESS;
    3326:	19 82       	std	Y+1, r1	; 0x01
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    3328:	8a 81       	ldd	r24, Y+2	; 0x02
    332a:	9b 81       	ldd	r25, Y+3	; 0x03
    332c:	ac 81       	ldd	r26, Y+4	; 0x04
    332e:	bd 81       	ldd	r27, Y+5	; 0x05
    3330:	89 2b       	or	r24, r25
    3332:	8a 2b       	or	r24, r26
    3334:	8b 2b       	or	r24, r27
    3336:	41 f0       	breq	.+16     	; 0x3348 <hif_receive+0x4a>
    3338:	8e 81       	ldd	r24, Y+6	; 0x06
    333a:	9f 81       	ldd	r25, Y+7	; 0x07
    333c:	89 2b       	or	r24, r25
    333e:	21 f0       	breq	.+8      	; 0x3348 <hif_receive+0x4a>
    3340:	88 85       	ldd	r24, Y+8	; 0x08
    3342:	99 85       	ldd	r25, Y+9	; 0x09
    3344:	89 2b       	or	r24, r25
    3346:	51 f4       	brne	.+20     	; 0x335c <hif_receive+0x5e>
	{
		if(isDone)
    3348:	8a 85       	ldd	r24, Y+10	; 0x0a
    334a:	88 23       	and	r24, r24
    334c:	21 f0       	breq	.+8      	; 0x3356 <hif_receive+0x58>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    334e:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <hif_set_rx_done>
    3352:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    3354:	96 c0       	rjmp	.+300    	; 0x3482 <hif_receive+0x184>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    3356:	84 ef       	ldi	r24, 0xF4	; 244
    3358:	89 83       	std	Y+1, r24	; 0x01
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    335a:	93 c0       	rjmp	.+294    	; 0x3482 <hif_receive+0x184>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    335c:	88 85       	ldd	r24, Y+8	; 0x08
    335e:	99 85       	ldd	r25, Y+9	; 0x09
    3360:	9c 01       	movw	r18, r24
    3362:	40 e0       	ldi	r20, 0x00	; 0
    3364:	50 e0       	ldi	r21, 0x00	; 0
    3366:	80 91 3d 33 	lds	r24, 0x333D	; 0x80333d <gstrHifCxt+0x8>
    336a:	90 91 3e 33 	lds	r25, 0x333E	; 0x80333e <gstrHifCxt+0x9>
    336e:	a0 91 3f 33 	lds	r26, 0x333F	; 0x80333f <gstrHifCxt+0xa>
    3372:	b0 91 40 33 	lds	r27, 0x3340	; 0x803340 <gstrHifCxt+0xb>
    3376:	82 17       	cp	r24, r18
    3378:	93 07       	cpc	r25, r19
    337a:	a4 07       	cpc	r26, r20
    337c:	b5 07       	cpc	r27, r21
    337e:	18 f4       	brcc	.+6      	; 0x3386 <hif_receive+0x88>
	{
		ret = M2M_ERR_FAIL;
    3380:	84 ef       	ldi	r24, 0xF4	; 244
    3382:	89 83       	std	Y+1, r24	; 0x01
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
    3384:	7e c0       	rjmp	.+252    	; 0x3482 <hif_receive+0x184>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    3386:	20 91 39 33 	lds	r18, 0x3339	; 0x803339 <gstrHifCxt+0x4>
    338a:	30 91 3a 33 	lds	r19, 0x333A	; 0x80333a <gstrHifCxt+0x5>
    338e:	40 91 3b 33 	lds	r20, 0x333B	; 0x80333b <gstrHifCxt+0x6>
    3392:	50 91 3c 33 	lds	r21, 0x333C	; 0x80333c <gstrHifCxt+0x7>
    3396:	8a 81       	ldd	r24, Y+2	; 0x02
    3398:	9b 81       	ldd	r25, Y+3	; 0x03
    339a:	ac 81       	ldd	r26, Y+4	; 0x04
    339c:	bd 81       	ldd	r27, Y+5	; 0x05
    339e:	82 17       	cp	r24, r18
    33a0:	93 07       	cpc	r25, r19
    33a2:	a4 07       	cpc	r26, r20
    33a4:	b5 07       	cpc	r27, r21
    33a6:	30 f1       	brcs	.+76     	; 0x33f4 <hif_receive+0xf6>
    33a8:	88 85       	ldd	r24, Y+8	; 0x08
    33aa:	99 85       	ldd	r25, Y+9	; 0x09
    33ac:	9c 01       	movw	r18, r24
    33ae:	40 e0       	ldi	r20, 0x00	; 0
    33b0:	50 e0       	ldi	r21, 0x00	; 0
    33b2:	8a 81       	ldd	r24, Y+2	; 0x02
    33b4:	9b 81       	ldd	r25, Y+3	; 0x03
    33b6:	ac 81       	ldd	r26, Y+4	; 0x04
    33b8:	bd 81       	ldd	r27, Y+5	; 0x05
    33ba:	28 0f       	add	r18, r24
    33bc:	39 1f       	adc	r19, r25
    33be:	4a 1f       	adc	r20, r26
    33c0:	5b 1f       	adc	r21, r27
    33c2:	e0 90 39 33 	lds	r14, 0x3339	; 0x803339 <gstrHifCxt+0x4>
    33c6:	f0 90 3a 33 	lds	r15, 0x333A	; 0x80333a <gstrHifCxt+0x5>
    33ca:	00 91 3b 33 	lds	r16, 0x333B	; 0x80333b <gstrHifCxt+0x6>
    33ce:	10 91 3c 33 	lds	r17, 0x333C	; 0x80333c <gstrHifCxt+0x7>
    33d2:	80 91 3d 33 	lds	r24, 0x333D	; 0x80333d <gstrHifCxt+0x8>
    33d6:	90 91 3e 33 	lds	r25, 0x333E	; 0x80333e <gstrHifCxt+0x9>
    33da:	a0 91 3f 33 	lds	r26, 0x333F	; 0x80333f <gstrHifCxt+0xa>
    33de:	b0 91 40 33 	lds	r27, 0x3340	; 0x803340 <gstrHifCxt+0xb>
    33e2:	8e 0d       	add	r24, r14
    33e4:	9f 1d       	adc	r25, r15
    33e6:	a0 1f       	adc	r26, r16
    33e8:	b1 1f       	adc	r27, r17
    33ea:	82 17       	cp	r24, r18
    33ec:	93 07       	cpc	r25, r19
    33ee:	a4 07       	cpc	r26, r20
    33f0:	b5 07       	cpc	r27, r21
    33f2:	18 f4       	brcc	.+6      	; 0x33fa <hif_receive+0xfc>
	{
		ret = M2M_ERR_FAIL;
    33f4:	84 ef       	ldi	r24, 0xF4	; 244
    33f6:	89 83       	std	Y+1, r24	; 0x01
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
    33f8:	44 c0       	rjmp	.+136    	; 0x3482 <hif_receive+0x184>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    33fa:	88 85       	ldd	r24, Y+8	; 0x08
    33fc:	99 85       	ldd	r25, Y+9	; 0x09
    33fe:	9c 01       	movw	r18, r24
    3400:	40 e0       	ldi	r20, 0x00	; 0
    3402:	50 e0       	ldi	r21, 0x00	; 0
    3404:	6e 81       	ldd	r22, Y+6	; 0x06
    3406:	7f 81       	ldd	r23, Y+7	; 0x07
    3408:	8a 81       	ldd	r24, Y+2	; 0x02
    340a:	9b 81       	ldd	r25, Y+3	; 0x03
    340c:	ac 81       	ldd	r26, Y+4	; 0x04
    340e:	bd 81       	ldd	r27, Y+5	; 0x05
    3410:	89 01       	movw	r16, r18
    3412:	9a 01       	movw	r18, r20
    3414:	ab 01       	movw	r20, r22
    3416:	bc 01       	movw	r22, r24
    3418:	cd 01       	movw	r24, r26
    341a:	0e 94 43 25 	call	0x4a86	; 0x4a86 <nm_read_block>
    341e:	89 83       	std	Y+1, r24	; 0x01
	if(ret != M2M_SUCCESS)goto ERR1;
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	88 23       	and	r24, r24
    3424:	69 f5       	brne	.+90     	; 0x3480 <hif_receive+0x182>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    3426:	20 91 39 33 	lds	r18, 0x3339	; 0x803339 <gstrHifCxt+0x4>
    342a:	30 91 3a 33 	lds	r19, 0x333A	; 0x80333a <gstrHifCxt+0x5>
    342e:	40 91 3b 33 	lds	r20, 0x333B	; 0x80333b <gstrHifCxt+0x6>
    3432:	50 91 3c 33 	lds	r21, 0x333C	; 0x80333c <gstrHifCxt+0x7>
    3436:	80 91 3d 33 	lds	r24, 0x333D	; 0x80333d <gstrHifCxt+0x8>
    343a:	90 91 3e 33 	lds	r25, 0x333E	; 0x80333e <gstrHifCxt+0x9>
    343e:	a0 91 3f 33 	lds	r26, 0x333F	; 0x80333f <gstrHifCxt+0xa>
    3442:	b0 91 40 33 	lds	r27, 0x3340	; 0x803340 <gstrHifCxt+0xb>
    3446:	28 0f       	add	r18, r24
    3448:	39 1f       	adc	r19, r25
    344a:	4a 1f       	adc	r20, r26
    344c:	5b 1f       	adc	r21, r27
    344e:	88 85       	ldd	r24, Y+8	; 0x08
    3450:	99 85       	ldd	r25, Y+9	; 0x09
    3452:	7c 01       	movw	r14, r24
    3454:	00 e0       	ldi	r16, 0x00	; 0
    3456:	10 e0       	ldi	r17, 0x00	; 0
    3458:	8a 81       	ldd	r24, Y+2	; 0x02
    345a:	9b 81       	ldd	r25, Y+3	; 0x03
    345c:	ac 81       	ldd	r26, Y+4	; 0x04
    345e:	bd 81       	ldd	r27, Y+5	; 0x05
    3460:	8e 0d       	add	r24, r14
    3462:	9f 1d       	adc	r25, r15
    3464:	a0 1f       	adc	r26, r16
    3466:	b1 1f       	adc	r27, r17
    3468:	28 17       	cp	r18, r24
    346a:	39 07       	cpc	r19, r25
    346c:	4a 07       	cpc	r20, r26
    346e:	5b 07       	cpc	r21, r27
    3470:	19 f0       	breq	.+6      	; 0x3478 <hif_receive+0x17a>
    3472:	8a 85       	ldd	r24, Y+10	; 0x0a
    3474:	88 23       	and	r24, r24
    3476:	29 f0       	breq	.+10     	; 0x3482 <hif_receive+0x184>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    3478:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <hif_set_rx_done>
    347c:	89 83       	std	Y+1, r24	; 0x01
    347e:	01 c0       	rjmp	.+2      	; 0x3482 <hif_receive+0x184>
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;
    3480:	00 00       	nop
		/* set RX done */
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
    3482:	89 81       	ldd	r24, Y+1	; 0x01
}
    3484:	2a 96       	adiw	r28, 0x0a	; 10
    3486:	cd bf       	out	0x3d, r28	; 61
    3488:	de bf       	out	0x3e, r29	; 62
    348a:	df 91       	pop	r29
    348c:	cf 91       	pop	r28
    348e:	1f 91       	pop	r17
    3490:	0f 91       	pop	r16
    3492:	ff 90       	pop	r15
    3494:	ef 90       	pop	r14
    3496:	08 95       	ret

00003498 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    3498:	cf 93       	push	r28
    349a:	df 93       	push	r29
    349c:	00 d0       	rcall	.+0      	; 0x349e <hif_register_cb+0x6>
    349e:	00 d0       	rcall	.+0      	; 0x34a0 <hif_register_cb+0x8>
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
    34a4:	8a 83       	std	Y+2, r24	; 0x02
    34a6:	6b 83       	std	Y+3, r22	; 0x03
    34a8:	7c 83       	std	Y+4, r23	; 0x04
	sint8 ret = M2M_SUCCESS;
    34aa:	19 82       	std	Y+1, r1	; 0x01
	switch(u8Grp)
    34ac:	8a 81       	ldd	r24, Y+2	; 0x02
    34ae:	88 2f       	mov	r24, r24
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	09 2e       	mov	r0, r25
    34b4:	00 0c       	add	r0, r0
    34b6:	aa 0b       	sbc	r26, r26
    34b8:	bb 0b       	sbc	r27, r27
    34ba:	41 e0       	ldi	r20, 0x01	; 1
    34bc:	50 e0       	ldi	r21, 0x00	; 0
    34be:	26 e0       	ldi	r18, 0x06	; 6
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	84 1b       	sub	r24, r20
    34c4:	95 0b       	sbc	r25, r21
    34c6:	28 17       	cp	r18, r24
    34c8:	39 07       	cpc	r19, r25
    34ca:	b0 f1       	brcs	.+108    	; 0x3538 <hif_register_cb+0xa0>
    34cc:	80 5b       	subi	r24, 0xB0	; 176
    34ce:	9f 4f       	sbci	r25, 0xFF	; 255
    34d0:	fc 01       	movw	r30, r24
    34d2:	0c 94 99 3b 	jmp	0x7732	; 0x7732 <__tablejump2__>
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    34d6:	8b 81       	ldd	r24, Y+3	; 0x03
    34d8:	9c 81       	ldd	r25, Y+4	; 0x04
    34da:	80 93 43 33 	sts	0x3343, r24	; 0x803343 <gstrHifCxt+0xe>
    34de:	90 93 44 33 	sts	0x3344, r25	; 0x803344 <gstrHifCxt+0xf>
			break;
    34e2:	2d c0       	rjmp	.+90     	; 0x353e <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    34e4:	8b 81       	ldd	r24, Y+3	; 0x03
    34e6:	9c 81       	ldd	r25, Y+4	; 0x04
    34e8:	80 93 41 33 	sts	0x3341, r24	; 0x803341 <gstrHifCxt+0xc>
    34ec:	90 93 42 33 	sts	0x3342, r25	; 0x803342 <gstrHifCxt+0xd>
			break;
    34f0:	26 c0       	rjmp	.+76     	; 0x353e <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    34f2:	8b 81       	ldd	r24, Y+3	; 0x03
    34f4:	9c 81       	ldd	r25, Y+4	; 0x04
    34f6:	80 93 45 33 	sts	0x3345, r24	; 0x803345 <gstrHifCxt+0x10>
    34fa:	90 93 46 33 	sts	0x3346, r25	; 0x803346 <gstrHifCxt+0x11>
			break;
    34fe:	1f c0       	rjmp	.+62     	; 0x353e <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    3500:	8b 81       	ldd	r24, Y+3	; 0x03
    3502:	9c 81       	ldd	r25, Y+4	; 0x04
    3504:	80 93 49 33 	sts	0x3349, r24	; 0x803349 <gstrHifCxt+0x14>
    3508:	90 93 4a 33 	sts	0x334A, r25	; 0x80334a <gstrHifCxt+0x15>
			break;
    350c:	18 c0       	rjmp	.+48     	; 0x353e <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    350e:	8b 81       	ldd	r24, Y+3	; 0x03
    3510:	9c 81       	ldd	r25, Y+4	; 0x04
    3512:	80 93 4b 33 	sts	0x334B, r24	; 0x80334b <gstrHifCxt+0x16>
    3516:	90 93 4c 33 	sts	0x334C, r25	; 0x80334c <gstrHifCxt+0x17>
			break;
    351a:	11 c0       	rjmp	.+34     	; 0x353e <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    351c:	8b 81       	ldd	r24, Y+3	; 0x03
    351e:	9c 81       	ldd	r25, Y+4	; 0x04
    3520:	80 93 47 33 	sts	0x3347, r24	; 0x803347 <gstrHifCxt+0x12>
    3524:	90 93 48 33 	sts	0x3348, r25	; 0x803348 <gstrHifCxt+0x13>
			break;
    3528:	0a c0       	rjmp	.+20     	; 0x353e <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    352a:	8b 81       	ldd	r24, Y+3	; 0x03
    352c:	9c 81       	ldd	r25, Y+4	; 0x04
    352e:	80 93 4d 33 	sts	0x334D, r24	; 0x80334d <gstrHifCxt+0x18>
    3532:	90 93 4e 33 	sts	0x334E, r25	; 0x80334e <gstrHifCxt+0x19>
			break;
    3536:	03 c0       	rjmp	.+6      	; 0x353e <hif_register_cb+0xa6>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
    3538:	84 ef       	ldi	r24, 0xF4	; 244
    353a:	89 83       	std	Y+1, r24	; 0x01
			break;
    353c:	00 00       	nop
	}
	return ret;
    353e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3540:	24 96       	adiw	r28, 0x04	; 4
    3542:	cd bf       	out	0x3d, r28	; 61
    3544:	de bf       	out	0x3e, r29	; 62
    3546:	df 91       	pop	r29
    3548:	cf 91       	pop	r28
    354a:	08 95       	ret

0000354c <m2m_wifi_cb>:
}

sint8 m2m_wifi_default_connect(void)
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}
    354c:	0f 93       	push	r16
    354e:	cf 93       	push	r28
    3550:	df 93       	push	r29
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
    3556:	c5 5a       	subi	r28, 0xA5	; 165
    3558:	d1 09       	sbc	r29, r1
    355a:	cd bf       	out	0x3d, r28	; 61
    355c:	de bf       	out	0x3e, r29	; 62
    355e:	fe 01       	movw	r30, r28
    3560:	e1 56       	subi	r30, 0x61	; 97
    3562:	ff 4f       	sbci	r31, 0xFF	; 255
    3564:	80 83       	st	Z, r24
    3566:	ce 01       	movw	r24, r28
    3568:	80 56       	subi	r24, 0x60	; 96
    356a:	9f 4f       	sbci	r25, 0xFF	; 255
    356c:	fc 01       	movw	r30, r24
    356e:	60 83       	st	Z, r22
    3570:	71 83       	std	Z+1, r23	; 0x01
    3572:	ce 01       	movw	r24, r28
    3574:	8e 55       	subi	r24, 0x5E	; 94
    3576:	9f 4f       	sbci	r25, 0xFF	; 255
    3578:	fc 01       	movw	r30, r24
    357a:	20 83       	st	Z, r18
    357c:	31 83       	std	Z+1, r19	; 0x01
    357e:	42 83       	std	Z+2, r20	; 0x02
    3580:	53 83       	std	Z+3, r21	; 0x03
    3582:	ce 01       	movw	r24, r28
    3584:	81 56       	subi	r24, 0x61	; 97
    3586:	9f 4f       	sbci	r25, 0xFF	; 255
    3588:	fc 01       	movw	r30, r24
    358a:	80 81       	ld	r24, Z
    358c:	8c 32       	cpi	r24, 0x2C	; 44
    358e:	39 f5       	brne	.+78     	; 0x35de <m2m_wifi_cb+0x92>
    3590:	ae 01       	movw	r20, r28
    3592:	47 5f       	subi	r20, 0xF7	; 247
    3594:	5f 4f       	sbci	r21, 0xFF	; 255
    3596:	ce 01       	movw	r24, r28
    3598:	8e 55       	subi	r24, 0x5E	; 94
    359a:	9f 4f       	sbci	r25, 0xFF	; 255
    359c:	fc 01       	movw	r30, r24
    359e:	80 81       	ld	r24, Z
    35a0:	91 81       	ldd	r25, Z+1	; 0x01
    35a2:	a2 81       	ldd	r26, Z+2	; 0x02
    35a4:	b3 81       	ldd	r27, Z+3	; 0x03
    35a6:	00 e0       	ldi	r16, 0x00	; 0
    35a8:	24 e0       	ldi	r18, 0x04	; 4
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	bc 01       	movw	r22, r24
    35ae:	cd 01       	movw	r24, r26
    35b0:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    35b4:	88 23       	and	r24, r24
    35b6:	09 f0       	breq	.+2      	; 0x35ba <m2m_wifi_cb+0x6e>
    35b8:	62 c2       	rjmp	.+1220   	; 0x3a7e <m2m_wifi_cb+0x532>
    35ba:	80 91 90 32 	lds	r24, 0x3290	; 0x803290 <gpfAppWifiCb>
    35be:	90 91 91 32 	lds	r25, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    35c2:	89 2b       	or	r24, r25
    35c4:	09 f4       	brne	.+2      	; 0x35c8 <m2m_wifi_cb+0x7c>
    35c6:	5b c2       	rjmp	.+1206   	; 0x3a7e <m2m_wifi_cb+0x532>
    35c8:	20 91 90 32 	lds	r18, 0x3290	; 0x803290 <gpfAppWifiCb>
    35cc:	30 91 91 32 	lds	r19, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    35d0:	ce 01       	movw	r24, r28
    35d2:	09 96       	adiw	r24, 0x09	; 9
    35d4:	bc 01       	movw	r22, r24
    35d6:	8c e2       	ldi	r24, 0x2C	; 44
    35d8:	f9 01       	movw	r30, r18
    35da:	09 95       	icall
    35dc:	50 c2       	rjmp	.+1184   	; 0x3a7e <m2m_wifi_cb+0x532>
    35de:	ce 01       	movw	r24, r28
    35e0:	81 56       	subi	r24, 0x61	; 97
    35e2:	9f 4f       	sbci	r25, 0xFF	; 255
    35e4:	fc 01       	movw	r30, r24
    35e6:	80 81       	ld	r24, Z
    35e8:	8b 31       	cpi	r24, 0x1B	; 27
    35ea:	39 f5       	brne	.+78     	; 0x363a <m2m_wifi_cb+0xee>
    35ec:	ae 01       	movw	r20, r28
    35ee:	43 5f       	subi	r20, 0xF3	; 243
    35f0:	5f 4f       	sbci	r21, 0xFF	; 255
    35f2:	ce 01       	movw	r24, r28
    35f4:	8e 55       	subi	r24, 0x5E	; 94
    35f6:	9f 4f       	sbci	r25, 0xFF	; 255
    35f8:	fc 01       	movw	r30, r24
    35fa:	80 81       	ld	r24, Z
    35fc:	91 81       	ldd	r25, Z+1	; 0x01
    35fe:	a2 81       	ldd	r26, Z+2	; 0x02
    3600:	b3 81       	ldd	r27, Z+3	; 0x03
    3602:	00 e0       	ldi	r16, 0x00	; 0
    3604:	28 e0       	ldi	r18, 0x08	; 8
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	bc 01       	movw	r22, r24
    360a:	cd 01       	movw	r24, r26
    360c:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    3610:	88 23       	and	r24, r24
    3612:	09 f0       	breq	.+2      	; 0x3616 <m2m_wifi_cb+0xca>
    3614:	34 c2       	rjmp	.+1128   	; 0x3a7e <m2m_wifi_cb+0x532>
    3616:	80 91 90 32 	lds	r24, 0x3290	; 0x803290 <gpfAppWifiCb>
    361a:	90 91 91 32 	lds	r25, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    361e:	89 2b       	or	r24, r25
    3620:	09 f4       	brne	.+2      	; 0x3624 <m2m_wifi_cb+0xd8>
    3622:	2d c2       	rjmp	.+1114   	; 0x3a7e <m2m_wifi_cb+0x532>
    3624:	20 91 90 32 	lds	r18, 0x3290	; 0x803290 <gpfAppWifiCb>
    3628:	30 91 91 32 	lds	r19, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    362c:	ce 01       	movw	r24, r28
    362e:	0d 96       	adiw	r24, 0x0d	; 13
    3630:	bc 01       	movw	r22, r24
    3632:	8b e1       	ldi	r24, 0x1B	; 27
    3634:	f9 01       	movw	r30, r18
    3636:	09 95       	icall
    3638:	22 c2       	rjmp	.+1092   	; 0x3a7e <m2m_wifi_cb+0x532>
    363a:	ce 01       	movw	r24, r28
    363c:	81 56       	subi	r24, 0x61	; 97
    363e:	9f 4f       	sbci	r25, 0xFF	; 255
    3640:	fc 01       	movw	r30, r24
    3642:	80 81       	ld	r24, Z
    3644:	86 30       	cpi	r24, 0x06	; 6
    3646:	39 f5       	brne	.+78     	; 0x3696 <m2m_wifi_cb+0x14a>
    3648:	ae 01       	movw	r20, r28
    364a:	45 5c       	subi	r20, 0xC5	; 197
    364c:	5f 4f       	sbci	r21, 0xFF	; 255
    364e:	ce 01       	movw	r24, r28
    3650:	8e 55       	subi	r24, 0x5E	; 94
    3652:	9f 4f       	sbci	r25, 0xFF	; 255
    3654:	fc 01       	movw	r30, r24
    3656:	80 81       	ld	r24, Z
    3658:	91 81       	ldd	r25, Z+1	; 0x01
    365a:	a2 81       	ldd	r26, Z+2	; 0x02
    365c:	b3 81       	ldd	r27, Z+3	; 0x03
    365e:	01 e0       	ldi	r16, 0x01	; 1
    3660:	20 e3       	ldi	r18, 0x30	; 48
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	bc 01       	movw	r22, r24
    3666:	cd 01       	movw	r24, r26
    3668:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    366c:	88 23       	and	r24, r24
    366e:	09 f0       	breq	.+2      	; 0x3672 <m2m_wifi_cb+0x126>
    3670:	06 c2       	rjmp	.+1036   	; 0x3a7e <m2m_wifi_cb+0x532>
    3672:	80 91 90 32 	lds	r24, 0x3290	; 0x803290 <gpfAppWifiCb>
    3676:	90 91 91 32 	lds	r25, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    367a:	89 2b       	or	r24, r25
    367c:	09 f4       	brne	.+2      	; 0x3680 <m2m_wifi_cb+0x134>
    367e:	ff c1       	rjmp	.+1022   	; 0x3a7e <m2m_wifi_cb+0x532>
    3680:	20 91 90 32 	lds	r18, 0x3290	; 0x803290 <gpfAppWifiCb>
    3684:	30 91 91 32 	lds	r19, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    3688:	ce 01       	movw	r24, r28
    368a:	cb 96       	adiw	r24, 0x3b	; 59
    368c:	bc 01       	movw	r22, r24
    368e:	86 e0       	ldi	r24, 0x06	; 6
    3690:	f9 01       	movw	r30, r18
    3692:	09 95       	icall
    3694:	f4 c1       	rjmp	.+1000   	; 0x3a7e <m2m_wifi_cb+0x532>
    3696:	ce 01       	movw	r24, r28
    3698:	81 56       	subi	r24, 0x61	; 97
    369a:	9f 4f       	sbci	r25, 0xFF	; 255
    369c:	fc 01       	movw	r30, r24
    369e:	80 81       	ld	r24, Z
    36a0:	8e 30       	cpi	r24, 0x0E	; 14
    36a2:	09 f4       	brne	.+2      	; 0x36a6 <m2m_wifi_cb+0x15a>
    36a4:	ec c1       	rjmp	.+984    	; 0x3a7e <m2m_wifi_cb+0x532>
    36a6:	ce 01       	movw	r24, r28
    36a8:	81 56       	subi	r24, 0x61	; 97
    36aa:	9f 4f       	sbci	r25, 0xFF	; 255
    36ac:	fc 01       	movw	r30, r24
    36ae:	80 81       	ld	r24, Z
    36b0:	82 33       	cpi	r24, 0x32	; 50
    36b2:	39 f5       	brne	.+78     	; 0x3702 <m2m_wifi_cb+0x1b6>
    36b4:	ae 01       	movw	r20, r28
    36b6:	4b 5e       	subi	r20, 0xEB	; 235
    36b8:	5f 4f       	sbci	r21, 0xFF	; 255
    36ba:	ce 01       	movw	r24, r28
    36bc:	8e 55       	subi	r24, 0x5E	; 94
    36be:	9f 4f       	sbci	r25, 0xFF	; 255
    36c0:	fc 01       	movw	r30, r24
    36c2:	80 81       	ld	r24, Z
    36c4:	91 81       	ldd	r25, Z+1	; 0x01
    36c6:	a2 81       	ldd	r26, Z+2	; 0x02
    36c8:	b3 81       	ldd	r27, Z+3	; 0x03
    36ca:	00 e0       	ldi	r16, 0x00	; 0
    36cc:	24 e1       	ldi	r18, 0x14	; 20
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	bc 01       	movw	r22, r24
    36d2:	cd 01       	movw	r24, r26
    36d4:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    36d8:	88 23       	and	r24, r24
    36da:	09 f0       	breq	.+2      	; 0x36de <m2m_wifi_cb+0x192>
    36dc:	d0 c1       	rjmp	.+928    	; 0x3a7e <m2m_wifi_cb+0x532>
    36de:	80 91 90 32 	lds	r24, 0x3290	; 0x803290 <gpfAppWifiCb>
    36e2:	90 91 91 32 	lds	r25, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    36e6:	89 2b       	or	r24, r25
    36e8:	09 f4       	brne	.+2      	; 0x36ec <m2m_wifi_cb+0x1a0>
    36ea:	c9 c1       	rjmp	.+914    	; 0x3a7e <m2m_wifi_cb+0x532>
    36ec:	20 91 90 32 	lds	r18, 0x3290	; 0x803290 <gpfAppWifiCb>
    36f0:	30 91 91 32 	lds	r19, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    36f4:	ce 01       	movw	r24, r28
    36f6:	45 96       	adiw	r24, 0x15	; 21
    36f8:	bc 01       	movw	r22, r24
    36fa:	82 e3       	ldi	r24, 0x32	; 50
    36fc:	f9 01       	movw	r30, r18
    36fe:	09 95       	icall
    3700:	be c1       	rjmp	.+892    	; 0x3a7e <m2m_wifi_cb+0x532>
    3702:	ce 01       	movw	r24, r28
    3704:	81 56       	subi	r24, 0x61	; 97
    3706:	9f 4f       	sbci	r25, 0xFF	; 255
    3708:	fc 01       	movw	r30, r24
    370a:	80 81       	ld	r24, Z
    370c:	8f 32       	cpi	r24, 0x2F	; 47
    370e:	81 f5       	brne	.+96     	; 0x3770 <m2m_wifi_cb+0x224>
    3710:	ce 01       	movw	r24, r28
    3712:	cb 96       	adiw	r24, 0x3b	; 59
    3714:	24 e6       	ldi	r18, 0x64	; 100
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	40 e0       	ldi	r20, 0x00	; 0
    371a:	50 e0       	ldi	r21, 0x00	; 0
    371c:	60 e0       	ldi	r22, 0x00	; 0
    371e:	0e 94 aa 14 	call	0x2954	; 0x2954 <m2m_memset>
    3722:	ae 01       	movw	r20, r28
    3724:	45 5c       	subi	r20, 0xC5	; 197
    3726:	5f 4f       	sbci	r21, 0xFF	; 255
    3728:	ce 01       	movw	r24, r28
    372a:	8e 55       	subi	r24, 0x5E	; 94
    372c:	9f 4f       	sbci	r25, 0xFF	; 255
    372e:	fc 01       	movw	r30, r24
    3730:	80 81       	ld	r24, Z
    3732:	91 81       	ldd	r25, Z+1	; 0x01
    3734:	a2 81       	ldd	r26, Z+2	; 0x02
    3736:	b3 81       	ldd	r27, Z+3	; 0x03
    3738:	00 e0       	ldi	r16, 0x00	; 0
    373a:	24 e6       	ldi	r18, 0x64	; 100
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	bc 01       	movw	r22, r24
    3740:	cd 01       	movw	r24, r26
    3742:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    3746:	88 23       	and	r24, r24
    3748:	09 f0       	breq	.+2      	; 0x374c <m2m_wifi_cb+0x200>
    374a:	99 c1       	rjmp	.+818    	; 0x3a7e <m2m_wifi_cb+0x532>
    374c:	80 91 90 32 	lds	r24, 0x3290	; 0x803290 <gpfAppWifiCb>
    3750:	90 91 91 32 	lds	r25, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    3754:	89 2b       	or	r24, r25
    3756:	09 f4       	brne	.+2      	; 0x375a <m2m_wifi_cb+0x20e>
    3758:	92 c1       	rjmp	.+804    	; 0x3a7e <m2m_wifi_cb+0x532>
    375a:	20 91 90 32 	lds	r18, 0x3290	; 0x803290 <gpfAppWifiCb>
    375e:	30 91 91 32 	lds	r19, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    3762:	ce 01       	movw	r24, r28
    3764:	cb 96       	adiw	r24, 0x3b	; 59
    3766:	bc 01       	movw	r22, r24
    3768:	8f e2       	ldi	r24, 0x2F	; 47
    376a:	f9 01       	movw	r30, r18
    376c:	09 95       	icall
    376e:	87 c1       	rjmp	.+782    	; 0x3a7e <m2m_wifi_cb+0x532>
    3770:	ce 01       	movw	r24, r28
    3772:	81 56       	subi	r24, 0x61	; 97
    3774:	9f 4f       	sbci	r25, 0xFF	; 255
    3776:	fc 01       	movw	r30, r24
    3778:	80 81       	ld	r24, Z
    377a:	84 33       	cpi	r24, 0x34	; 52
    377c:	31 f5       	brne	.+76     	; 0x37ca <m2m_wifi_cb+0x27e>
    377e:	ae 01       	movw	r20, r28
    3780:	47 5d       	subi	r20, 0xD7	; 215
    3782:	5f 4f       	sbci	r21, 0xFF	; 255
    3784:	ce 01       	movw	r24, r28
    3786:	8e 55       	subi	r24, 0x5E	; 94
    3788:	9f 4f       	sbci	r25, 0xFF	; 255
    378a:	fc 01       	movw	r30, r24
    378c:	80 81       	ld	r24, Z
    378e:	91 81       	ldd	r25, Z+1	; 0x01
    3790:	a2 81       	ldd	r26, Z+2	; 0x02
    3792:	b3 81       	ldd	r27, Z+3	; 0x03
    3794:	00 e0       	ldi	r16, 0x00	; 0
    3796:	24 e0       	ldi	r18, 0x04	; 4
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	bc 01       	movw	r22, r24
    379c:	cd 01       	movw	r24, r26
    379e:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    37a2:	88 23       	and	r24, r24
    37a4:	09 f0       	breq	.+2      	; 0x37a8 <m2m_wifi_cb+0x25c>
    37a6:	6b c1       	rjmp	.+726    	; 0x3a7e <m2m_wifi_cb+0x532>
    37a8:	80 91 90 32 	lds	r24, 0x3290	; 0x803290 <gpfAppWifiCb>
    37ac:	90 91 91 32 	lds	r25, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    37b0:	89 2b       	or	r24, r25
    37b2:	09 f4       	brne	.+2      	; 0x37b6 <m2m_wifi_cb+0x26a>
    37b4:	64 c1       	rjmp	.+712    	; 0x3a7e <m2m_wifi_cb+0x532>
    37b6:	20 91 90 32 	lds	r18, 0x3290	; 0x803290 <gpfAppWifiCb>
    37ba:	30 91 91 32 	lds	r19, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    37be:	60 e0       	ldi	r22, 0x00	; 0
    37c0:	70 e0       	ldi	r23, 0x00	; 0
    37c2:	84 e3       	ldi	r24, 0x34	; 52
    37c4:	f9 01       	movw	r30, r18
    37c6:	09 95       	icall
    37c8:	5a c1       	rjmp	.+692    	; 0x3a7e <m2m_wifi_cb+0x532>
    37ca:	ce 01       	movw	r24, r28
    37cc:	81 56       	subi	r24, 0x61	; 97
    37ce:	9f 4f       	sbci	r25, 0xFF	; 255
    37d0:	fc 01       	movw	r30, r24
    37d2:	80 81       	ld	r24, Z
    37d4:	81 31       	cpi	r24, 0x11	; 17
    37d6:	61 f5       	brne	.+88     	; 0x3830 <m2m_wifi_cb+0x2e4>
    37d8:	10 92 8f 32 	sts	0x328F, r1	; 0x80328f <gu8scanInProgress>
    37dc:	ae 01       	movw	r20, r28
    37de:	43 5d       	subi	r20, 0xD3	; 211
    37e0:	5f 4f       	sbci	r21, 0xFF	; 255
    37e2:	ce 01       	movw	r24, r28
    37e4:	8e 55       	subi	r24, 0x5E	; 94
    37e6:	9f 4f       	sbci	r25, 0xFF	; 255
    37e8:	fc 01       	movw	r30, r24
    37ea:	80 81       	ld	r24, Z
    37ec:	91 81       	ldd	r25, Z+1	; 0x01
    37ee:	a2 81       	ldd	r26, Z+2	; 0x02
    37f0:	b3 81       	ldd	r27, Z+3	; 0x03
    37f2:	00 e0       	ldi	r16, 0x00	; 0
    37f4:	24 e0       	ldi	r18, 0x04	; 4
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	bc 01       	movw	r22, r24
    37fa:	cd 01       	movw	r24, r26
    37fc:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    3800:	88 23       	and	r24, r24
    3802:	09 f0       	breq	.+2      	; 0x3806 <m2m_wifi_cb+0x2ba>
    3804:	3c c1       	rjmp	.+632    	; 0x3a7e <m2m_wifi_cb+0x532>
    3806:	8d a5       	ldd	r24, Y+45	; 0x2d
    3808:	80 93 8e 32 	sts	0x328E, r24	; 0x80328e <gu8ChNum>
    380c:	80 91 90 32 	lds	r24, 0x3290	; 0x803290 <gpfAppWifiCb>
    3810:	90 91 91 32 	lds	r25, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    3814:	89 2b       	or	r24, r25
    3816:	09 f4       	brne	.+2      	; 0x381a <m2m_wifi_cb+0x2ce>
    3818:	32 c1       	rjmp	.+612    	; 0x3a7e <m2m_wifi_cb+0x532>
    381a:	20 91 90 32 	lds	r18, 0x3290	; 0x803290 <gpfAppWifiCb>
    381e:	30 91 91 32 	lds	r19, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    3822:	ce 01       	movw	r24, r28
    3824:	8d 96       	adiw	r24, 0x2d	; 45
    3826:	bc 01       	movw	r22, r24
    3828:	81 e1       	ldi	r24, 0x11	; 17
    382a:	f9 01       	movw	r30, r18
    382c:	09 95       	icall
    382e:	27 c1       	rjmp	.+590    	; 0x3a7e <m2m_wifi_cb+0x532>
    3830:	ce 01       	movw	r24, r28
    3832:	81 56       	subi	r24, 0x61	; 97
    3834:	9f 4f       	sbci	r25, 0xFF	; 255
    3836:	fc 01       	movw	r30, r24
    3838:	80 81       	ld	r24, Z
    383a:	83 31       	cpi	r24, 0x13	; 19
    383c:	39 f5       	brne	.+78     	; 0x388c <m2m_wifi_cb+0x340>
    383e:	ae 01       	movw	r20, r28
    3840:	45 5c       	subi	r20, 0xC5	; 197
    3842:	5f 4f       	sbci	r21, 0xFF	; 255
    3844:	ce 01       	movw	r24, r28
    3846:	8e 55       	subi	r24, 0x5E	; 94
    3848:	9f 4f       	sbci	r25, 0xFF	; 255
    384a:	fc 01       	movw	r30, r24
    384c:	80 81       	ld	r24, Z
    384e:	91 81       	ldd	r25, Z+1	; 0x01
    3850:	a2 81       	ldd	r26, Z+2	; 0x02
    3852:	b3 81       	ldd	r27, Z+3	; 0x03
    3854:	00 e0       	ldi	r16, 0x00	; 0
    3856:	2c e2       	ldi	r18, 0x2C	; 44
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    3862:	88 23       	and	r24, r24
    3864:	09 f0       	breq	.+2      	; 0x3868 <m2m_wifi_cb+0x31c>
    3866:	0b c1       	rjmp	.+534    	; 0x3a7e <m2m_wifi_cb+0x532>
    3868:	80 91 90 32 	lds	r24, 0x3290	; 0x803290 <gpfAppWifiCb>
    386c:	90 91 91 32 	lds	r25, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    3870:	89 2b       	or	r24, r25
    3872:	09 f4       	brne	.+2      	; 0x3876 <m2m_wifi_cb+0x32a>
    3874:	04 c1       	rjmp	.+520    	; 0x3a7e <m2m_wifi_cb+0x532>
    3876:	20 91 90 32 	lds	r18, 0x3290	; 0x803290 <gpfAppWifiCb>
    387a:	30 91 91 32 	lds	r19, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    387e:	ce 01       	movw	r24, r28
    3880:	cb 96       	adiw	r24, 0x3b	; 59
    3882:	bc 01       	movw	r22, r24
    3884:	83 e1       	ldi	r24, 0x13	; 19
    3886:	f9 01       	movw	r30, r18
    3888:	09 95       	icall
    388a:	f9 c0       	rjmp	.+498    	; 0x3a7e <m2m_wifi_cb+0x532>
    388c:	ce 01       	movw	r24, r28
    388e:	81 56       	subi	r24, 0x61	; 97
    3890:	9f 4f       	sbci	r25, 0xFF	; 255
    3892:	fc 01       	movw	r30, r24
    3894:	80 81       	ld	r24, Z
    3896:	84 30       	cpi	r24, 0x04	; 4
    3898:	39 f5       	brne	.+78     	; 0x38e8 <m2m_wifi_cb+0x39c>
    389a:	ce 01       	movw	r24, r28
    389c:	8e 55       	subi	r24, 0x5E	; 94
    389e:	9f 4f       	sbci	r25, 0xFF	; 255
    38a0:	fc 01       	movw	r30, r24
    38a2:	80 81       	ld	r24, Z
    38a4:	91 81       	ldd	r25, Z+1	; 0x01
    38a6:	a2 81       	ldd	r26, Z+2	; 0x02
    38a8:	b3 81       	ldd	r27, Z+3	; 0x03
    38aa:	00 e0       	ldi	r16, 0x00	; 0
    38ac:	24 e0       	ldi	r18, 0x04	; 4
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	ae 01       	movw	r20, r28
    38b2:	4f 5f       	subi	r20, 0xFF	; 255
    38b4:	5f 4f       	sbci	r21, 0xFF	; 255
    38b6:	bc 01       	movw	r22, r24
    38b8:	cd 01       	movw	r24, r26
    38ba:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    38be:	88 23       	and	r24, r24
    38c0:	09 f0       	breq	.+2      	; 0x38c4 <m2m_wifi_cb+0x378>
    38c2:	dd c0       	rjmp	.+442    	; 0x3a7e <m2m_wifi_cb+0x532>
    38c4:	80 91 90 32 	lds	r24, 0x3290	; 0x803290 <gpfAppWifiCb>
    38c8:	90 91 91 32 	lds	r25, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    38cc:	89 2b       	or	r24, r25
    38ce:	09 f4       	brne	.+2      	; 0x38d2 <m2m_wifi_cb+0x386>
    38d0:	d6 c0       	rjmp	.+428    	; 0x3a7e <m2m_wifi_cb+0x532>
    38d2:	20 91 90 32 	lds	r18, 0x3290	; 0x803290 <gpfAppWifiCb>
    38d6:	30 91 91 32 	lds	r19, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    38da:	ce 01       	movw	r24, r28
    38dc:	01 96       	adiw	r24, 0x01	; 1
    38de:	bc 01       	movw	r22, r24
    38e0:	84 e0       	ldi	r24, 0x04	; 4
    38e2:	f9 01       	movw	r30, r18
    38e4:	09 95       	icall
    38e6:	cb c0       	rjmp	.+406    	; 0x3a7e <m2m_wifi_cb+0x532>
    38e8:	ce 01       	movw	r24, r28
    38ea:	81 56       	subi	r24, 0x61	; 97
    38ec:	9f 4f       	sbci	r25, 0xFF	; 255
    38ee:	fc 01       	movw	r30, r24
    38f0:	80 81       	ld	r24, Z
    38f2:	85 36       	cpi	r24, 0x65	; 101
    38f4:	39 f5       	brne	.+78     	; 0x3944 <m2m_wifi_cb+0x3f8>
    38f6:	ce 01       	movw	r24, r28
    38f8:	8e 55       	subi	r24, 0x5E	; 94
    38fa:	9f 4f       	sbci	r25, 0xFF	; 255
    38fc:	fc 01       	movw	r30, r24
    38fe:	80 81       	ld	r24, Z
    3900:	91 81       	ldd	r25, Z+1	; 0x01
    3902:	a2 81       	ldd	r26, Z+2	; 0x02
    3904:	b3 81       	ldd	r27, Z+3	; 0x03
    3906:	00 e0       	ldi	r16, 0x00	; 0
    3908:	24 e0       	ldi	r18, 0x04	; 4
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	ae 01       	movw	r20, r28
    390e:	4f 5f       	subi	r20, 0xFF	; 255
    3910:	5f 4f       	sbci	r21, 0xFF	; 255
    3912:	bc 01       	movw	r22, r24
    3914:	cd 01       	movw	r24, r26
    3916:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    391a:	88 23       	and	r24, r24
    391c:	09 f0       	breq	.+2      	; 0x3920 <m2m_wifi_cb+0x3d4>
    391e:	af c0       	rjmp	.+350    	; 0x3a7e <m2m_wifi_cb+0x532>
    3920:	80 91 90 32 	lds	r24, 0x3290	; 0x803290 <gpfAppWifiCb>
    3924:	90 91 91 32 	lds	r25, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    3928:	89 2b       	or	r24, r25
    392a:	09 f4       	brne	.+2      	; 0x392e <m2m_wifi_cb+0x3e2>
    392c:	a8 c0       	rjmp	.+336    	; 0x3a7e <m2m_wifi_cb+0x532>
    392e:	20 91 90 32 	lds	r18, 0x3290	; 0x803290 <gpfAppWifiCb>
    3932:	30 91 91 32 	lds	r19, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    3936:	ce 01       	movw	r24, r28
    3938:	01 96       	adiw	r24, 0x01	; 1
    393a:	bc 01       	movw	r22, r24
    393c:	85 e6       	ldi	r24, 0x65	; 101
    393e:	f9 01       	movw	r30, r18
    3940:	09 95       	icall
    3942:	9d c0       	rjmp	.+314    	; 0x3a7e <m2m_wifi_cb+0x532>
    3944:	ce 01       	movw	r24, r28
    3946:	81 56       	subi	r24, 0x61	; 97
    3948:	9f 4f       	sbci	r25, 0xFF	; 255
    394a:	fc 01       	movw	r30, r24
    394c:	80 81       	ld	r24, Z
    394e:	89 30       	cpi	r24, 0x09	; 9
    3950:	39 f5       	brne	.+78     	; 0x39a0 <m2m_wifi_cb+0x454>
    3952:	ae 01       	movw	r20, r28
    3954:	45 5c       	subi	r20, 0xC5	; 197
    3956:	5f 4f       	sbci	r21, 0xFF	; 255
    3958:	ce 01       	movw	r24, r28
    395a:	8e 55       	subi	r24, 0x5E	; 94
    395c:	9f 4f       	sbci	r25, 0xFF	; 255
    395e:	fc 01       	movw	r30, r24
    3960:	80 81       	ld	r24, Z
    3962:	91 81       	ldd	r25, Z+1	; 0x01
    3964:	a2 81       	ldd	r26, Z+2	; 0x02
    3966:	b3 81       	ldd	r27, Z+3	; 0x03
    3968:	01 e0       	ldi	r16, 0x01	; 1
    396a:	24 e6       	ldi	r18, 0x64	; 100
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	bc 01       	movw	r22, r24
    3970:	cd 01       	movw	r24, r26
    3972:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    3976:	88 23       	and	r24, r24
    3978:	09 f0       	breq	.+2      	; 0x397c <m2m_wifi_cb+0x430>
    397a:	81 c0       	rjmp	.+258    	; 0x3a7e <m2m_wifi_cb+0x532>
    397c:	80 91 90 32 	lds	r24, 0x3290	; 0x803290 <gpfAppWifiCb>
    3980:	90 91 91 32 	lds	r25, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    3984:	89 2b       	or	r24, r25
    3986:	09 f4       	brne	.+2      	; 0x398a <m2m_wifi_cb+0x43e>
    3988:	7a c0       	rjmp	.+244    	; 0x3a7e <m2m_wifi_cb+0x532>
    398a:	20 91 90 32 	lds	r18, 0x3290	; 0x803290 <gpfAppWifiCb>
    398e:	30 91 91 32 	lds	r19, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    3992:	ce 01       	movw	r24, r28
    3994:	cb 96       	adiw	r24, 0x3b	; 59
    3996:	bc 01       	movw	r22, r24
    3998:	89 e0       	ldi	r24, 0x09	; 9
    399a:	f9 01       	movw	r30, r18
    399c:	09 95       	icall
    399e:	6f c0       	rjmp	.+222    	; 0x3a7e <m2m_wifi_cb+0x532>
    39a0:	ce 01       	movw	r24, r28
    39a2:	81 56       	subi	r24, 0x61	; 97
    39a4:	9f 4f       	sbci	r25, 0xFF	; 255
    39a6:	fc 01       	movw	r30, r24
    39a8:	80 81       	ld	r24, Z
    39aa:	8a 32       	cpi	r24, 0x2A	; 42
    39ac:	39 f5       	brne	.+78     	; 0x39fc <m2m_wifi_cb+0x4b0>
    39ae:	ae 01       	movw	r20, r28
    39b0:	4f 5c       	subi	r20, 0xCF	; 207
    39b2:	5f 4f       	sbci	r21, 0xFF	; 255
    39b4:	ce 01       	movw	r24, r28
    39b6:	8e 55       	subi	r24, 0x5E	; 94
    39b8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ba:	fc 01       	movw	r30, r24
    39bc:	80 81       	ld	r24, Z
    39be:	91 81       	ldd	r25, Z+1	; 0x01
    39c0:	a2 81       	ldd	r26, Z+2	; 0x02
    39c2:	b3 81       	ldd	r27, Z+3	; 0x03
    39c4:	01 e0       	ldi	r16, 0x01	; 1
    39c6:	24 e0       	ldi	r18, 0x04	; 4
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	bc 01       	movw	r22, r24
    39cc:	cd 01       	movw	r24, r26
    39ce:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    39d2:	88 23       	and	r24, r24
    39d4:	09 f0       	breq	.+2      	; 0x39d8 <m2m_wifi_cb+0x48c>
    39d6:	53 c0       	rjmp	.+166    	; 0x3a7e <m2m_wifi_cb+0x532>
    39d8:	80 91 90 32 	lds	r24, 0x3290	; 0x803290 <gpfAppWifiCb>
    39dc:	90 91 91 32 	lds	r25, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    39e0:	89 2b       	or	r24, r25
    39e2:	09 f4       	brne	.+2      	; 0x39e6 <m2m_wifi_cb+0x49a>
    39e4:	4c c0       	rjmp	.+152    	; 0x3a7e <m2m_wifi_cb+0x532>
    39e6:	20 91 90 32 	lds	r18, 0x3290	; 0x803290 <gpfAppWifiCb>
    39ea:	30 91 91 32 	lds	r19, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    39ee:	ce 01       	movw	r24, r28
    39f0:	c1 96       	adiw	r24, 0x31	; 49
    39f2:	bc 01       	movw	r22, r24
    39f4:	8a e2       	ldi	r24, 0x2A	; 42
    39f6:	f9 01       	movw	r30, r18
    39f8:	09 95       	icall
    39fa:	41 c0       	rjmp	.+130    	; 0x3a7e <m2m_wifi_cb+0x532>
    39fc:	ce 01       	movw	r24, r28
    39fe:	81 56       	subi	r24, 0x61	; 97
    3a00:	9f 4f       	sbci	r25, 0xFF	; 255
    3a02:	fc 01       	movw	r30, r24
    3a04:	80 81       	ld	r24, Z
    3a06:	80 32       	cpi	r24, 0x20	; 32
    3a08:	d1 f5       	brne	.+116    	; 0x3a7e <m2m_wifi_cb+0x532>
    3a0a:	ae 01       	movw	r20, r28
    3a0c:	4b 5c       	subi	r20, 0xCB	; 203
    3a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a10:	ce 01       	movw	r24, r28
    3a12:	8e 55       	subi	r24, 0x5E	; 94
    3a14:	9f 4f       	sbci	r25, 0xFF	; 255
    3a16:	fc 01       	movw	r30, r24
    3a18:	80 81       	ld	r24, Z
    3a1a:	91 81       	ldd	r25, Z+1	; 0x01
    3a1c:	a2 81       	ldd	r26, Z+2	; 0x02
    3a1e:	b3 81       	ldd	r27, Z+3	; 0x03
    3a20:	00 e0       	ldi	r16, 0x00	; 0
    3a22:	26 e0       	ldi	r18, 0x06	; 6
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	bc 01       	movw	r22, r24
    3a28:	cd 01       	movw	r24, r26
    3a2a:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    3a2e:	88 23       	and	r24, r24
    3a30:	31 f5       	brne	.+76     	; 0x3a7e <m2m_wifi_cb+0x532>
    3a32:	2f a9       	ldd	r18, Y+55	; 0x37
    3a34:	38 ad       	ldd	r19, Y+56	; 0x38
    3a36:	4d a9       	ldd	r20, Y+53	; 0x35
    3a38:	5e a9       	ldd	r21, Y+54	; 0x36
    3a3a:	ce 01       	movw	r24, r28
    3a3c:	8e 55       	subi	r24, 0x5E	; 94
    3a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a40:	fc 01       	movw	r30, r24
    3a42:	80 81       	ld	r24, Z
    3a44:	91 81       	ldd	r25, Z+1	; 0x01
    3a46:	a2 81       	ldd	r26, Z+2	; 0x02
    3a48:	b3 81       	ldd	r27, Z+3	; 0x03
    3a4a:	06 96       	adiw	r24, 0x06	; 6
    3a4c:	a1 1d       	adc	r26, r1
    3a4e:	b1 1d       	adc	r27, r1
    3a50:	01 e0       	ldi	r16, 0x01	; 1
    3a52:	bc 01       	movw	r22, r24
    3a54:	cd 01       	movw	r24, r26
    3a56:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    3a5a:	88 23       	and	r24, r24
    3a5c:	81 f4       	brne	.+32     	; 0x3a7e <m2m_wifi_cb+0x532>
    3a5e:	80 91 90 32 	lds	r24, 0x3290	; 0x803290 <gpfAppWifiCb>
    3a62:	90 91 91 32 	lds	r25, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    3a66:	89 2b       	or	r24, r25
    3a68:	51 f0       	breq	.+20     	; 0x3a7e <m2m_wifi_cb+0x532>
    3a6a:	20 91 90 32 	lds	r18, 0x3290	; 0x803290 <gpfAppWifiCb>
    3a6e:	30 91 91 32 	lds	r19, 0x3291	; 0x803291 <gpfAppWifiCb+0x1>
    3a72:	ce 01       	movw	r24, r28
    3a74:	c5 96       	adiw	r24, 0x35	; 53
    3a76:	bc 01       	movw	r22, r24
    3a78:	80 e2       	ldi	r24, 0x20	; 32
    3a7a:	f9 01       	movw	r30, r18
    3a7c:	09 95       	icall
    3a7e:	00 00       	nop
    3a80:	cb 55       	subi	r28, 0x5B	; 91
    3a82:	df 4f       	sbci	r29, 0xFF	; 255
    3a84:	cd bf       	out	0x3d, r28	; 61
    3a86:	de bf       	out	0x3e, r29	; 62
    3a88:	df 91       	pop	r29
    3a8a:	cf 91       	pop	r28
    3a8c:	0f 91       	pop	r16
    3a8e:	08 95       	ret

00003a90 <m2m_wifi_init>:
    3a90:	cf 93       	push	r28
    3a92:	df 93       	push	r29
    3a94:	cd b7       	in	r28, 0x3d	; 61
    3a96:	de b7       	in	r29, 0x3e	; 62
    3a98:	aa 97       	sbiw	r28, 0x2a	; 42
    3a9a:	cd bf       	out	0x3d, r28	; 61
    3a9c:	de bf       	out	0x3e, r29	; 62
    3a9e:	89 a7       	std	Y+41, r24	; 0x29
    3aa0:	9a a7       	std	Y+42, r25	; 0x2a
    3aa2:	19 82       	std	Y+1, r1	; 0x01
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	88 a7       	std	Y+40, r24	; 0x28
    3aa8:	89 a5       	ldd	r24, Y+41	; 0x29
    3aaa:	9a a5       	ldd	r25, Y+42	; 0x2a
    3aac:	89 2b       	or	r24, r25
    3aae:	19 f4       	brne	.+6      	; 0x3ab6 <m2m_wifi_init+0x26>
    3ab0:	84 ef       	ldi	r24, 0xF4	; 244
    3ab2:	89 83       	std	Y+1, r24	; 0x01
    3ab4:	2d c0       	rjmp	.+90     	; 0x3b10 <m2m_wifi_init+0x80>
    3ab6:	89 a5       	ldd	r24, Y+41	; 0x29
    3ab8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3aba:	fc 01       	movw	r30, r24
    3abc:	80 81       	ld	r24, Z
    3abe:	91 81       	ldd	r25, Z+1	; 0x01
    3ac0:	80 93 90 32 	sts	0x3290, r24	; 0x803290 <gpfAppWifiCb>
    3ac4:	90 93 91 32 	sts	0x3291, r25	; 0x803291 <gpfAppWifiCb+0x1>
    3ac8:	10 92 8f 32 	sts	0x328F, r1	; 0x80328f <gu8scanInProgress>
    3acc:	ce 01       	movw	r24, r28
    3ace:	88 96       	adiw	r24, 0x28	; 40
    3ad0:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <nm_drv_init>
    3ad4:	89 83       	std	Y+1, r24	; 0x01
    3ad6:	89 81       	ldd	r24, Y+1	; 0x01
    3ad8:	88 23       	and	r24, r24
    3ada:	c9 f4       	brne	.+50     	; 0x3b0e <m2m_wifi_init+0x7e>
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <hif_init>
    3ae4:	89 83       	std	Y+1, r24	; 0x01
    3ae6:	89 81       	ldd	r24, Y+1	; 0x01
    3ae8:	88 23       	and	r24, r24
    3aea:	59 f4       	brne	.+22     	; 0x3b02 <m2m_wifi_init+0x72>
    3aec:	66 ea       	ldi	r22, 0xA6	; 166
    3aee:	7a e1       	ldi	r23, 0x1A	; 26
    3af0:	81 e0       	ldi	r24, 0x01	; 1
    3af2:	0e 94 4c 1a 	call	0x3498	; 0x3498 <hif_register_cb>
    3af6:	ce 01       	movw	r24, r28
    3af8:	02 96       	adiw	r24, 0x02	; 2
    3afa:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <nm_get_firmware_full_info>
    3afe:	89 83       	std	Y+1, r24	; 0x01
    3b00:	07 c0       	rjmp	.+14     	; 0x3b10 <m2m_wifi_init+0x80>
    3b02:	00 00       	nop
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	0e 94 f7 27 	call	0x4fee	; 0x4fee <nm_drv_deinit>
    3b0c:	01 c0       	rjmp	.+2      	; 0x3b10 <m2m_wifi_init+0x80>
    3b0e:	00 00       	nop
    3b10:	89 81       	ldd	r24, Y+1	; 0x01
    3b12:	aa 96       	adiw	r28, 0x2a	; 42
    3b14:	cd bf       	out	0x3d, r28	; 61
    3b16:	de bf       	out	0x3e, r29	; 62
    3b18:	df 91       	pop	r29
    3b1a:	cf 91       	pop	r28
    3b1c:	08 95       	ret

00003b1e <m2m_wifi_handle_events>:
    3b1e:	cf 93       	push	r28
    3b20:	df 93       	push	r29
    3b22:	00 d0       	rcall	.+0      	; 0x3b24 <m2m_wifi_handle_events+0x6>
    3b24:	cd b7       	in	r28, 0x3d	; 61
    3b26:	de b7       	in	r29, 0x3e	; 62
    3b28:	89 83       	std	Y+1, r24	; 0x01
    3b2a:	9a 83       	std	Y+2, r25	; 0x02
    3b2c:	0e 94 64 19 	call	0x32c8	; 0x32c8 <hif_handle_isr>
    3b30:	0f 90       	pop	r0
    3b32:	0f 90       	pop	r0
    3b34:	df 91       	pop	r29
    3b36:	cf 91       	pop	r28
    3b38:	08 95       	ret

00003b3a <m2m_wifi_connect>:

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    3b3a:	ef 92       	push	r14
    3b3c:	0f 93       	push	r16
    3b3e:	1f 93       	push	r17
    3b40:	cf 93       	push	r28
    3b42:	df 93       	push	r29
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
    3b48:	28 97       	sbiw	r28, 0x08	; 8
    3b4a:	cd bf       	out	0x3d, r28	; 61
    3b4c:	de bf       	out	0x3e, r29	; 62
    3b4e:	89 83       	std	Y+1, r24	; 0x01
    3b50:	9a 83       	std	Y+2, r25	; 0x02
    3b52:	6b 83       	std	Y+3, r22	; 0x03
    3b54:	4c 83       	std	Y+4, r20	; 0x04
    3b56:	2d 83       	std	Y+5, r18	; 0x05
    3b58:	3e 83       	std	Y+6, r19	; 0x06
    3b5a:	0f 83       	std	Y+7, r16	; 0x07
    3b5c:	18 87       	std	Y+8, r17	; 0x08
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    3b5e:	4f 81       	ldd	r20, Y+7	; 0x07
    3b60:	58 85       	ldd	r21, Y+8	; 0x08
    3b62:	2d 81       	ldd	r18, Y+5	; 0x05
    3b64:	3e 81       	ldd	r19, Y+6	; 0x06
    3b66:	89 81       	ldd	r24, Y+1	; 0x01
    3b68:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6a:	e1 2c       	mov	r14, r1
    3b6c:	8a 01       	movw	r16, r20
    3b6e:	4c 81       	ldd	r20, Y+4	; 0x04
    3b70:	6b 81       	ldd	r22, Y+3	; 0x03
    3b72:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <m2m_wifi_connect_sc>
}
    3b76:	28 96       	adiw	r28, 0x08	; 8
    3b78:	cd bf       	out	0x3d, r28	; 61
    3b7a:	de bf       	out	0x3e, r29	; 62
    3b7c:	df 91       	pop	r29
    3b7e:	cf 91       	pop	r28
    3b80:	1f 91       	pop	r17
    3b82:	0f 91       	pop	r16
    3b84:	ef 90       	pop	r14
    3b86:	08 95       	ret

00003b88 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    3b88:	cf 92       	push	r12
    3b8a:	df 92       	push	r13
    3b8c:	ef 92       	push	r14
    3b8e:	ff 92       	push	r15
    3b90:	0f 93       	push	r16
    3b92:	1f 93       	push	r17
    3b94:	cf 93       	push	r28
    3b96:	df 93       	push	r29
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	c3 58       	subi	r28, 0x83	; 131
    3b9e:	d1 09       	sbc	r29, r1
    3ba0:	cd bf       	out	0x3d, r28	; 61
    3ba2:	de bf       	out	0x3e, r29	; 62
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	e7 58       	subi	r30, 0x87	; 135
    3ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    3baa:	80 83       	st	Z, r24
    3bac:	91 83       	std	Z+1, r25	; 0x01
    3bae:	ce 01       	movw	r24, r28
    3bb0:	85 58       	subi	r24, 0x85	; 133
    3bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	6c 93       	st	X, r22
    3bb8:	ce 01       	movw	r24, r28
    3bba:	84 58       	subi	r24, 0x84	; 132
    3bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	40 83       	st	Z, r20
    3bc2:	ce 01       	movw	r24, r28
    3bc4:	83 58       	subi	r24, 0x83	; 131
    3bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc8:	dc 01       	movw	r26, r24
    3bca:	2d 93       	st	X+, r18
    3bcc:	3c 93       	st	X, r19
    3bce:	ce 01       	movw	r24, r28
    3bd0:	81 58       	subi	r24, 0x81	; 129
    3bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd4:	fc 01       	movw	r30, r24
    3bd6:	00 83       	st	Z, r16
    3bd8:	11 83       	std	Z+1, r17	; 0x01
    3bda:	ce 01       	movw	r24, r28
    3bdc:	8f 57       	subi	r24, 0x7F	; 127
    3bde:	9f 4f       	sbci	r25, 0xFF	; 255
    3be0:	dc 01       	movw	r26, r24
    3be2:	ec 92       	st	X, r14
	sint8				ret = M2M_SUCCESS;
    3be4:	19 82       	std	Y+1, r1	; 0x01
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    3be6:	ce 01       	movw	r24, r28
    3be8:	84 58       	subi	r24, 0x84	; 132
    3bea:	9f 4f       	sbci	r25, 0xFF	; 255
    3bec:	fc 01       	movw	r30, r24
    3bee:	80 81       	ld	r24, Z
    3bf0:	81 30       	cpi	r24, 0x01	; 1
    3bf2:	09 f4       	brne	.+2      	; 0x3bf6 <m2m_wifi_connect_sc+0x6e>
    3bf4:	75 c0       	rjmp	.+234    	; 0x3ce0 <m2m_wifi_connect_sc+0x158>
	{
		if(pvAuthInfo == NULL)
    3bf6:	ce 01       	movw	r24, r28
    3bf8:	83 58       	subi	r24, 0x83	; 131
    3bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	8d 91       	ld	r24, X+
    3c00:	9c 91       	ld	r25, X
    3c02:	89 2b       	or	r24, r25
    3c04:	19 f4       	brne	.+6      	; 0x3c0c <m2m_wifi_connect_sc+0x84>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
    3c06:	84 ef       	ldi	r24, 0xF4	; 244
    3c08:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    3c0a:	bd c1       	rjmp	.+890    	; 0x3f86 <m2m_wifi_connect_sc+0x3fe>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    3c0c:	ce 01       	movw	r24, r28
    3c0e:	84 58       	subi	r24, 0x84	; 132
    3c10:	9f 4f       	sbci	r25, 0xFF	; 255
    3c12:	fc 01       	movw	r30, r24
    3c14:	80 81       	ld	r24, Z
    3c16:	82 30       	cpi	r24, 0x02	; 2
    3c18:	09 f0       	breq	.+2      	; 0x3c1c <m2m_wifi_connect_sc+0x94>
    3c1a:	62 c0       	rjmp	.+196    	; 0x3ce0 <m2m_wifi_connect_sc+0x158>
    3c1c:	ce 01       	movw	r24, r28
    3c1e:	83 58       	subi	r24, 0x83	; 131
    3c20:	9f 4f       	sbci	r25, 0xFF	; 255
    3c22:	dc 01       	movw	r26, r24
    3c24:	8d 91       	ld	r24, X+
    3c26:	9c 91       	ld	r25, X
    3c28:	0e 94 e5 14 	call	0x29ca	; 0x29ca <m2m_strlen>
    3c2c:	80 34       	cpi	r24, 0x40	; 64
    3c2e:	91 05       	cpc	r25, r1
    3c30:	09 f0       	breq	.+2      	; 0x3c34 <m2m_wifi_connect_sc+0xac>
    3c32:	56 c0       	rjmp	.+172    	; 0x3ce0 <m2m_wifi_connect_sc+0x158>
		{
			uint8 i = 0;
    3c34:	1a 82       	std	Y+2, r1	; 0x02
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    3c36:	ce 01       	movw	r24, r28
    3c38:	83 58       	subi	r24, 0x83	; 131
    3c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c3c:	fc 01       	movw	r30, r24
    3c3e:	80 81       	ld	r24, Z
    3c40:	91 81       	ldd	r25, Z+1	; 0x01
    3c42:	8b 83       	std	Y+3, r24	; 0x03
    3c44:	9c 83       	std	Y+4, r25	; 0x04
			while(i < (M2M_MAX_PSK_LEN-1))
    3c46:	48 c0       	rjmp	.+144    	; 0x3cd8 <m2m_wifi_connect_sc+0x150>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    3c48:	8a 81       	ldd	r24, Y+2	; 0x02
    3c4a:	88 2f       	mov	r24, r24
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	2b 81       	ldd	r18, Y+3	; 0x03
    3c50:	3c 81       	ldd	r19, Y+4	; 0x04
    3c52:	82 0f       	add	r24, r18
    3c54:	93 1f       	adc	r25, r19
    3c56:	dc 01       	movw	r26, r24
    3c58:	8c 91       	ld	r24, X
    3c5a:	80 33       	cpi	r24, 0x30	; 48
    3c5c:	b8 f1       	brcs	.+110    	; 0x3ccc <m2m_wifi_connect_sc+0x144>
    3c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c60:	88 2f       	mov	r24, r24
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	2b 81       	ldd	r18, Y+3	; 0x03
    3c66:	3c 81       	ldd	r19, Y+4	; 0x04
    3c68:	82 0f       	add	r24, r18
    3c6a:	93 1f       	adc	r25, r19
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	80 81       	ld	r24, Z
    3c70:	8a 33       	cpi	r24, 0x3A	; 58
    3c72:	58 f0       	brcs	.+22     	; 0x3c8a <m2m_wifi_connect_sc+0x102>
    3c74:	8a 81       	ldd	r24, Y+2	; 0x02
    3c76:	88 2f       	mov	r24, r24
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	2b 81       	ldd	r18, Y+3	; 0x03
    3c7c:	3c 81       	ldd	r19, Y+4	; 0x04
    3c7e:	82 0f       	add	r24, r18
    3c80:	93 1f       	adc	r25, r19
    3c82:	dc 01       	movw	r26, r24
    3c84:	8c 91       	ld	r24, X
    3c86:	81 34       	cpi	r24, 0x41	; 65
    3c88:	08 f1       	brcs	.+66     	; 0x3ccc <m2m_wifi_connect_sc+0x144>
    3c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8c:	88 2f       	mov	r24, r24
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	2b 81       	ldd	r18, Y+3	; 0x03
    3c92:	3c 81       	ldd	r19, Y+4	; 0x04
    3c94:	82 0f       	add	r24, r18
    3c96:	93 1f       	adc	r25, r19
    3c98:	fc 01       	movw	r30, r24
    3c9a:	80 81       	ld	r24, Z
    3c9c:	87 34       	cpi	r24, 0x47	; 71
    3c9e:	58 f0       	brcs	.+22     	; 0x3cb6 <m2m_wifi_connect_sc+0x12e>
    3ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca2:	88 2f       	mov	r24, r24
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	2b 81       	ldd	r18, Y+3	; 0x03
    3ca8:	3c 81       	ldd	r19, Y+4	; 0x04
    3caa:	82 0f       	add	r24, r18
    3cac:	93 1f       	adc	r25, r19
    3cae:	dc 01       	movw	r26, r24
    3cb0:	8c 91       	ld	r24, X
    3cb2:	81 36       	cpi	r24, 0x61	; 97
    3cb4:	58 f0       	brcs	.+22     	; 0x3ccc <m2m_wifi_connect_sc+0x144>
    3cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb8:	88 2f       	mov	r24, r24
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	2b 81       	ldd	r18, Y+3	; 0x03
    3cbe:	3c 81       	ldd	r19, Y+4	; 0x04
    3cc0:	82 0f       	add	r24, r18
    3cc2:	93 1f       	adc	r25, r19
    3cc4:	fc 01       	movw	r30, r24
    3cc6:	80 81       	ld	r24, Z
    3cc8:	87 36       	cpi	r24, 0x67	; 103
    3cca:	18 f0       	brcs	.+6      	; 0x3cd2 <m2m_wifi_connect_sc+0x14a>
				{
					M2M_ERR("Invalid Key\n");
					ret = M2M_ERR_FAIL;
    3ccc:	84 ef       	ldi	r24, 0xF4	; 244
    3cce:	89 83       	std	Y+1, r24	; 0x01
					goto ERR1;
    3cd0:	5a c1       	rjmp	.+692    	; 0x3f86 <m2m_wifi_connect_sc+0x3fe>
				}
				i++;
    3cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd4:	8f 5f       	subi	r24, 0xFF	; 255
    3cd6:	8a 83       	std	Y+2, r24	; 0x02
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    3cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cda:	80 34       	cpi	r24, 0x40	; 64
    3cdc:	08 f4       	brcc	.+2      	; 0x3ce0 <m2m_wifi_connect_sc+0x158>
    3cde:	b4 cf       	rjmp	.-152    	; 0x3c48 <m2m_wifi_connect_sc+0xc0>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    3ce0:	ce 01       	movw	r24, r28
    3ce2:	85 58       	subi	r24, 0x85	; 133
    3ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce6:	dc 01       	movw	r26, r24
    3ce8:	8c 91       	ld	r24, X
    3cea:	88 23       	and	r24, r24
    3cec:	39 f0       	breq	.+14     	; 0x3cfc <m2m_wifi_connect_sc+0x174>
    3cee:	ce 01       	movw	r24, r28
    3cf0:	85 58       	subi	r24, 0x85	; 133
    3cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf4:	fc 01       	movw	r30, r24
    3cf6:	80 81       	ld	r24, Z
    3cf8:	81 32       	cpi	r24, 0x21	; 33
    3cfa:	18 f0       	brcs	.+6      	; 0x3d02 <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
    3cfc:	84 ef       	ldi	r24, 0xF4	; 244
    3cfe:	89 83       	std	Y+1, r24	; 0x01
		goto ERR1;
    3d00:	42 c1       	rjmp	.+644    	; 0x3f86 <m2m_wifi_connect_sc+0x3fe>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    3d02:	ce 01       	movw	r24, r28
    3d04:	81 58       	subi	r24, 0x81	; 129
    3d06:	9f 4f       	sbci	r25, 0xFF	; 255
    3d08:	dc 01       	movw	r26, r24
    3d0a:	8d 91       	ld	r24, X+
    3d0c:	9c 91       	ld	r25, X
    3d0e:	89 2b       	or	r24, r25
    3d10:	41 f0       	breq	.+16     	; 0x3d22 <m2m_wifi_connect_sc+0x19a>
    3d12:	ce 01       	movw	r24, r28
    3d14:	81 58       	subi	r24, 0x81	; 129
    3d16:	9f 4f       	sbci	r25, 0xFF	; 255
    3d18:	fc 01       	movw	r30, r24
    3d1a:	80 81       	ld	r24, Z
    3d1c:	91 81       	ldd	r25, Z+1	; 0x01
    3d1e:	0f 97       	sbiw	r24, 0x0f	; 15
    3d20:	60 f0       	brcs	.+24     	; 0x3d3a <m2m_wifi_connect_sc+0x1b2>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    3d22:	ce 01       	movw	r24, r28
    3d24:	81 58       	subi	r24, 0x81	; 129
    3d26:	9f 4f       	sbci	r25, 0xFF	; 255
    3d28:	dc 01       	movw	r26, r24
    3d2a:	8d 91       	ld	r24, X+
    3d2c:	9c 91       	ld	r25, X
    3d2e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d30:	91 05       	cpc	r25, r1
    3d32:	19 f0       	breq	.+6      	; 0x3d3a <m2m_wifi_connect_sc+0x1b2>
		{
			M2M_ERR("CH INVALID\n");
			ret = M2M_ERR_FAIL;
    3d34:	84 ef       	ldi	r24, 0xF4	; 244
    3d36:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    3d38:	26 c1       	rjmp	.+588    	; 0x3f86 <m2m_wifi_connect_sc+0x3fe>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    3d3a:	ce 01       	movw	r24, r28
    3d3c:	85 58       	subi	r24, 0x85	; 133
    3d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d40:	fc 01       	movw	r30, r24
    3d42:	80 81       	ld	r24, Z
    3d44:	88 2f       	mov	r24, r24
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	a0 e0       	ldi	r26, 0x00	; 0
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	9e 01       	movw	r18, r28
    3d4e:	27 58       	subi	r18, 0x87	; 135
    3d50:	3f 4f       	sbci	r19, 0xFF	; 255
    3d52:	f9 01       	movw	r30, r18
    3d54:	60 81       	ld	r22, Z
    3d56:	71 81       	ldd	r23, Z+1	; 0x01
    3d58:	9e 01       	movw	r18, r28
    3d5a:	23 5f       	subi	r18, 0xF3	; 243
    3d5c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d5e:	f9 01       	movw	r30, r18
    3d60:	ea 5b       	subi	r30, 0xBA	; 186
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	9c 01       	movw	r18, r24
    3d66:	ad 01       	movw	r20, r26
    3d68:	cf 01       	movw	r24, r30
    3d6a:	0e 94 66 14 	call	0x28cc	; 0x28cc <m2m_memcpy>
	strConnect.au8SSID[u8SsidLen]	= 0;
    3d6e:	ce 01       	movw	r24, r28
    3d70:	85 58       	subi	r24, 0x85	; 133
    3d72:	9f 4f       	sbci	r25, 0xFF	; 255
    3d74:	dc 01       	movw	r26, r24
    3d76:	8c 91       	ld	r24, X
    3d78:	88 2f       	mov	r24, r24
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	9e 01       	movw	r18, r28
    3d7e:	2d 5a       	subi	r18, 0xAD	; 173
    3d80:	3f 4f       	sbci	r19, 0xFF	; 255
    3d82:	82 0f       	add	r24, r18
    3d84:	93 1f       	adc	r25, r19
    3d86:	fc 01       	movw	r30, r24
    3d88:	10 82       	st	Z, r1
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    3d8a:	ce 01       	movw	r24, r28
    3d8c:	8f 5a       	subi	r24, 0xAF	; 175
    3d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d90:	9e 01       	movw	r18, r28
    3d92:	21 58       	subi	r18, 0x81	; 129
    3d94:	3f 4f       	sbci	r19, 0xFF	; 255
    3d96:	d9 01       	movw	r26, r18
    3d98:	2d 91       	ld	r18, X+
    3d9a:	3c 91       	ld	r19, X
    3d9c:	fc 01       	movw	r30, r24
    3d9e:	20 83       	st	Z, r18
    3da0:	31 83       	std	Z+1, r19	; 0x01
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    3da2:	ce 01       	movw	r24, r28
    3da4:	8f 57       	subi	r24, 0x7F	; 127
    3da6:	9f 4f       	sbci	r25, 0xFF	; 255
    3da8:	21 e0       	ldi	r18, 0x01	; 1
    3daa:	dc 01       	movw	r26, r24
    3dac:	8c 91       	ld	r24, X
    3dae:	88 23       	and	r24, r24
    3db0:	09 f4       	brne	.+2      	; 0x3db4 <m2m_wifi_connect_sc+0x22c>
    3db2:	20 e0       	ldi	r18, 0x00	; 0
    3db4:	ce 01       	movw	r24, r28
    3db6:	8c 58       	subi	r24, 0x8C	; 140
    3db8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dba:	fc 01       	movw	r30, r24
    3dbc:	20 83       	st	Z, r18
	pstrAuthInfo = &strConnect.strSec;
    3dbe:	ce 01       	movw	r24, r28
    3dc0:	0d 96       	adiw	r24, 0x0d	; 13
    3dc2:	8d 83       	std	Y+5, r24	; 0x05
    3dc4:	9e 83       	std	Y+6, r25	; 0x06
	pstrAuthInfo->u8SecType		= u8SecType;
    3dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dca:	8f 5b       	subi	r24, 0xBF	; 191
    3dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    3dce:	9e 01       	movw	r18, r28
    3dd0:	24 58       	subi	r18, 0x84	; 132
    3dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd4:	d9 01       	movw	r26, r18
    3dd6:	2c 91       	ld	r18, X
    3dd8:	fc 01       	movw	r30, r24
    3dda:	20 83       	st	Z, r18

	if(u8SecType == M2M_WIFI_SEC_WEP)
    3ddc:	ce 01       	movw	r24, r28
    3dde:	84 58       	subi	r24, 0x84	; 132
    3de0:	9f 4f       	sbci	r25, 0xFF	; 255
    3de2:	dc 01       	movw	r26, r24
    3de4:	8c 91       	ld	r24, X
    3de6:	83 30       	cpi	r24, 0x03	; 3
    3de8:	09 f0       	breq	.+2      	; 0x3dec <m2m_wifi_connect_sc+0x264>
    3dea:	5f c0       	rjmp	.+190    	; 0x3eaa <m2m_wifi_connect_sc+0x322>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    3dec:	ce 01       	movw	r24, r28
    3dee:	83 58       	subi	r24, 0x83	; 131
    3df0:	9f 4f       	sbci	r25, 0xFF	; 255
    3df2:	fc 01       	movw	r30, r24
    3df4:	80 81       	ld	r24, Z
    3df6:	91 81       	ldd	r25, Z+1	; 0x01
    3df8:	8f 83       	std	Y+7, r24	; 0x07
    3dfa:	98 87       	std	Y+8, r25	; 0x08
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    3dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    3e00:	89 87       	std	Y+9, r24	; 0x09
    3e02:	9a 87       	std	Y+10, r25	; 0x0a
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    3e04:	8f 81       	ldd	r24, Y+7	; 0x07
    3e06:	98 85       	ldd	r25, Y+8	; 0x08
    3e08:	dc 01       	movw	r26, r24
    3e0a:	8c 91       	ld	r24, X
    3e0c:	2f ef       	ldi	r18, 0xFF	; 255
    3e0e:	28 0f       	add	r18, r24
    3e10:	89 85       	ldd	r24, Y+9	; 0x09
    3e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e14:	fc 01       	movw	r30, r24
    3e16:	20 83       	st	Z, r18

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    3e18:	89 85       	ldd	r24, Y+9	; 0x09
    3e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e1c:	dc 01       	movw	r26, r24
    3e1e:	8c 91       	ld	r24, X
    3e20:	84 30       	cpi	r24, 0x04	; 4
    3e22:	18 f0       	brcs	.+6      	; 0x3e2a <m2m_wifi_connect_sc+0x2a2>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
			ret = M2M_ERR_FAIL;
    3e24:	84 ef       	ldi	r24, 0xF4	; 244
    3e26:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    3e28:	ae c0       	rjmp	.+348    	; 0x3f86 <m2m_wifi_connect_sc+0x3fe>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    3e2a:	8f 81       	ldd	r24, Y+7	; 0x07
    3e2c:	98 85       	ldd	r25, Y+8	; 0x08
    3e2e:	fc 01       	movw	r30, r24
    3e30:	81 81       	ldd	r24, Z+1	; 0x01
    3e32:	2f ef       	ldi	r18, 0xFF	; 255
    3e34:	28 0f       	add	r18, r24
    3e36:	89 85       	ldd	r24, Y+9	; 0x09
    3e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e3a:	dc 01       	movw	r26, r24
    3e3c:	11 96       	adiw	r26, 0x01	; 1
    3e3e:	2c 93       	st	X, r18
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    3e40:	89 85       	ldd	r24, Y+9	; 0x09
    3e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e44:	fc 01       	movw	r30, r24
    3e46:	81 81       	ldd	r24, Z+1	; 0x01
    3e48:	8a 30       	cpi	r24, 0x0A	; 10
    3e4a:	51 f0       	breq	.+20     	; 0x3e60 <m2m_wifi_connect_sc+0x2d8>
    3e4c:	89 85       	ldd	r24, Y+9	; 0x09
    3e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e50:	dc 01       	movw	r26, r24
    3e52:	11 96       	adiw	r26, 0x01	; 1
    3e54:	8c 91       	ld	r24, X
    3e56:	8a 31       	cpi	r24, 0x1A	; 26
    3e58:	19 f0       	breq	.+6      	; 0x3e60 <m2m_wifi_connect_sc+0x2d8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
			ret = M2M_ERR_FAIL;
    3e5a:	84 ef       	ldi	r24, 0xF4	; 244
    3e5c:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    3e5e:	93 c0       	rjmp	.+294    	; 0x3f86 <m2m_wifi_connect_sc+0x3fe>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    3e60:	8f 81       	ldd	r24, Y+7	; 0x07
    3e62:	98 85       	ldd	r25, Y+8	; 0x08
    3e64:	fc 01       	movw	r30, r24
    3e66:	81 81       	ldd	r24, Z+1	; 0x01
    3e68:	88 2f       	mov	r24, r24
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	a0 e0       	ldi	r26, 0x00	; 0
    3e6e:	b0 e0       	ldi	r27, 0x00	; 0
    3e70:	2f 81       	ldd	r18, Y+7	; 0x07
    3e72:	38 85       	ldd	r19, Y+8	; 0x08
    3e74:	b9 01       	movw	r22, r18
    3e76:	6e 5f       	subi	r22, 0xFE	; 254
    3e78:	7f 4f       	sbci	r23, 0xFF	; 255
    3e7a:	29 85       	ldd	r18, Y+9	; 0x09
    3e7c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e7e:	f9 01       	movw	r30, r18
    3e80:	32 96       	adiw	r30, 0x02	; 2
    3e82:	9c 01       	movw	r18, r24
    3e84:	ad 01       	movw	r20, r26
    3e86:	cf 01       	movw	r24, r30
    3e88:	0e 94 66 14 	call	0x28cc	; 0x28cc <m2m_memcpy>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    3e8c:	8f 81       	ldd	r24, Y+7	; 0x07
    3e8e:	98 85       	ldd	r25, Y+8	; 0x08
    3e90:	dc 01       	movw	r26, r24
    3e92:	11 96       	adiw	r26, 0x01	; 1
    3e94:	8c 91       	ld	r24, X
    3e96:	88 2f       	mov	r24, r24
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	29 85       	ldd	r18, Y+9	; 0x09
    3e9c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e9e:	82 0f       	add	r24, r18
    3ea0:	93 1f       	adc	r25, r19
    3ea2:	02 96       	adiw	r24, 0x02	; 2
    3ea4:	fc 01       	movw	r30, r24
    3ea6:	10 82       	st	Z, r1
    3ea8:	5e c0       	rjmp	.+188    	; 0x3f66 <m2m_wifi_connect_sc+0x3de>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    3eaa:	ce 01       	movw	r24, r28
    3eac:	84 58       	subi	r24, 0x84	; 132
    3eae:	9f 4f       	sbci	r25, 0xFF	; 255
    3eb0:	dc 01       	movw	r26, r24
    3eb2:	8c 91       	ld	r24, X
    3eb4:	82 30       	cpi	r24, 0x02	; 2
    3eb6:	a9 f5       	brne	.+106    	; 0x3f22 <m2m_wifi_connect_sc+0x39a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    3eb8:	ce 01       	movw	r24, r28
    3eba:	83 58       	subi	r24, 0x83	; 131
    3ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ebe:	fc 01       	movw	r30, r24
    3ec0:	80 81       	ld	r24, Z
    3ec2:	91 81       	ldd	r25, Z+1	; 0x01
    3ec4:	0e 94 e5 14 	call	0x29ca	; 0x29ca <m2m_strlen>
    3ec8:	8b 87       	std	Y+11, r24	; 0x0b
    3eca:	9c 87       	std	Y+12, r25	; 0x0c
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    3ecc:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ece:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ed0:	89 2b       	or	r24, r25
    3ed2:	29 f0       	breq	.+10     	; 0x3ede <m2m_wifi_connect_sc+0x356>
    3ed4:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ed6:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ed8:	81 34       	cpi	r24, 0x41	; 65
    3eda:	91 05       	cpc	r25, r1
    3edc:	18 f0       	brcs	.+6      	; 0x3ee4 <m2m_wifi_connect_sc+0x35c>
		{
			M2M_ERR("Incorrect PSK key length\n");
			ret = M2M_ERR_FAIL;
    3ede:	84 ef       	ldi	r24, 0xF4	; 244
    3ee0:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    3ee2:	51 c0       	rjmp	.+162    	; 0x3f86 <m2m_wifi_connect_sc+0x3fe>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    3ee4:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ee6:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ee8:	01 96       	adiw	r24, 0x01	; 1
    3eea:	cc 01       	movw	r24, r24
    3eec:	a0 e0       	ldi	r26, 0x00	; 0
    3eee:	b0 e0       	ldi	r27, 0x00	; 0
    3ef0:	ed 81       	ldd	r30, Y+5	; 0x05
    3ef2:	fe 81       	ldd	r31, Y+6	; 0x06
    3ef4:	ce 57       	subi	r28, 0x7E	; 126
    3ef6:	df 4f       	sbci	r29, 0xFF	; 255
    3ef8:	e8 83       	st	Y, r30
    3efa:	f9 83       	std	Y+1, r31	; 0x01
    3efc:	c2 58       	subi	r28, 0x82	; 130
    3efe:	d0 40       	sbci	r29, 0x00	; 0
    3f00:	9e 01       	movw	r18, r28
    3f02:	23 58       	subi	r18, 0x83	; 131
    3f04:	3f 4f       	sbci	r19, 0xFF	; 255
    3f06:	f9 01       	movw	r30, r18
    3f08:	60 81       	ld	r22, Z
    3f0a:	71 81       	ldd	r23, Z+1	; 0x01
    3f0c:	9c 01       	movw	r18, r24
    3f0e:	ad 01       	movw	r20, r26
    3f10:	ce 57       	subi	r28, 0x7E	; 126
    3f12:	df 4f       	sbci	r29, 0xFF	; 255
    3f14:	88 81       	ld	r24, Y
    3f16:	99 81       	ldd	r25, Y+1	; 0x01
    3f18:	c2 58       	subi	r28, 0x82	; 130
    3f1a:	d0 40       	sbci	r29, 0x00	; 0
    3f1c:	0e 94 66 14 	call	0x28cc	; 0x28cc <m2m_memcpy>
    3f20:	22 c0       	rjmp	.+68     	; 0x3f66 <m2m_wifi_connect_sc+0x3de>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    3f22:	ce 01       	movw	r24, r28
    3f24:	84 58       	subi	r24, 0x84	; 132
    3f26:	9f 4f       	sbci	r25, 0xFF	; 255
    3f28:	dc 01       	movw	r26, r24
    3f2a:	8c 91       	ld	r24, X
    3f2c:	84 30       	cpi	r24, 0x04	; 4
    3f2e:	89 f4       	brne	.+34     	; 0x3f52 <m2m_wifi_connect_sc+0x3ca>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    3f30:	ed 81       	ldd	r30, Y+5	; 0x05
    3f32:	fe 81       	ldd	r31, Y+6	; 0x06
    3f34:	ce 01       	movw	r24, r28
    3f36:	83 58       	subi	r24, 0x83	; 131
    3f38:	9f 4f       	sbci	r25, 0xFF	; 255
    3f3a:	dc 01       	movw	r26, r24
    3f3c:	8d 91       	ld	r24, X+
    3f3e:	9c 91       	ld	r25, X
    3f40:	2e e3       	ldi	r18, 0x3E	; 62
    3f42:	30 e0       	ldi	r19, 0x00	; 0
    3f44:	40 e0       	ldi	r20, 0x00	; 0
    3f46:	50 e0       	ldi	r21, 0x00	; 0
    3f48:	bc 01       	movw	r22, r24
    3f4a:	cf 01       	movw	r24, r30
    3f4c:	0e 94 66 14 	call	0x28cc	; 0x28cc <m2m_memcpy>
    3f50:	0a c0       	rjmp	.+20     	; 0x3f66 <m2m_wifi_connect_sc+0x3de>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    3f52:	ce 01       	movw	r24, r28
    3f54:	84 58       	subi	r24, 0x84	; 132
    3f56:	9f 4f       	sbci	r25, 0xFF	; 255
    3f58:	fc 01       	movw	r30, r24
    3f5a:	80 81       	ld	r24, Z
    3f5c:	81 30       	cpi	r24, 0x01	; 1
    3f5e:	19 f0       	breq	.+6      	; 0x3f66 <m2m_wifi_connect_sc+0x3de>

	}
	else
	{
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
    3f60:	84 ef       	ldi	r24, 0xF4	; 244
    3f62:	89 83       	std	Y+1, r24	; 0x01
		goto ERR1;
    3f64:	10 c0       	rjmp	.+32     	; 0x3f86 <m2m_wifi_connect_sc+0x3fe>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    3f66:	ce 01       	movw	r24, r28
    3f68:	0d 96       	adiw	r24, 0x0d	; 13
    3f6a:	c1 2c       	mov	r12, r1
    3f6c:	d1 2c       	mov	r13, r1
    3f6e:	e1 2c       	mov	r14, r1
    3f70:	f1 2c       	mov	r15, r1
    3f72:	00 e0       	ldi	r16, 0x00	; 0
    3f74:	10 e0       	ldi	r17, 0x00	; 0
    3f76:	2c e6       	ldi	r18, 0x6C	; 108
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	ac 01       	movw	r20, r24
    3f7c:	68 e2       	ldi	r22, 0x28	; 40
    3f7e:	81 e0       	ldi	r24, 0x01	; 1
    3f80:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <hif_send>
    3f84:	89 83       	std	Y+1, r24	; 0x01

ERR1:
	return ret;
    3f86:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f88:	cd 57       	subi	r28, 0x7D	; 125
    3f8a:	df 4f       	sbci	r29, 0xFF	; 255
    3f8c:	cd bf       	out	0x3d, r28	; 61
    3f8e:	de bf       	out	0x3e, r29	; 62
    3f90:	df 91       	pop	r29
    3f92:	cf 91       	pop	r28
    3f94:	1f 91       	pop	r17
    3f96:	0f 91       	pop	r16
    3f98:	ff 90       	pop	r15
    3f9a:	ef 90       	pop	r14
    3f9c:	df 90       	pop	r13
    3f9e:	cf 90       	pop	r12
    3fa0:	08 95       	ret

00003fa2 <chip_apply_conf>:
{
	sint8 ret = M2M_SUCCESS;
	ret = nm_write_reg(NMI_GLB_RESET_0, 0);
	nm_bsp_sleep(50);
	return ret;
}
    3fa2:	cf 93       	push	r28
    3fa4:	df 93       	push	r29
    3fa6:	cd b7       	in	r28, 0x3d	; 61
    3fa8:	de b7       	in	r29, 0x3e	; 62
    3faa:	2d 97       	sbiw	r28, 0x0d	; 13
    3fac:	cd bf       	out	0x3d, r28	; 61
    3fae:	de bf       	out	0x3e, r29	; 62
    3fb0:	6a 87       	std	Y+10, r22	; 0x0a
    3fb2:	7b 87       	std	Y+11, r23	; 0x0b
    3fb4:	8c 87       	std	Y+12, r24	; 0x0c
    3fb6:	9d 87       	std	Y+13, r25	; 0x0d
    3fb8:	19 82       	std	Y+1, r1	; 0x01
    3fba:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fbc:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fbe:	ac 85       	ldd	r26, Y+12	; 0x0c
    3fc0:	bd 85       	ldd	r27, Y+13	; 0x0d
    3fc2:	8a 83       	std	Y+2, r24	; 0x02
    3fc4:	9b 83       	std	Y+3, r25	; 0x03
    3fc6:	ac 83       	std	Y+4, r26	; 0x04
    3fc8:	bd 83       	std	Y+5, r27	; 0x05
    3fca:	8a 81       	ldd	r24, Y+2	; 0x02
    3fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    3fce:	ac 81       	ldd	r26, Y+4	; 0x04
    3fd0:	bd 81       	ldd	r27, Y+5	; 0x05
    3fd2:	91 60       	ori	r25, 0x01	; 1
    3fd4:	8a 83       	std	Y+2, r24	; 0x02
    3fd6:	9b 83       	std	Y+3, r25	; 0x03
    3fd8:	ac 83       	std	Y+4, r26	; 0x04
    3fda:	bd 83       	std	Y+5, r27	; 0x05
    3fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    3fde:	9b 81       	ldd	r25, Y+3	; 0x03
    3fe0:	ac 81       	ldd	r26, Y+4	; 0x04
    3fe2:	bd 81       	ldd	r27, Y+5	; 0x05
    3fe4:	9c 01       	movw	r18, r24
    3fe6:	ad 01       	movw	r20, r26
    3fe8:	60 ea       	ldi	r22, 0xA0	; 160
    3fea:	74 e1       	ldi	r23, 0x14	; 20
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    3ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ff8:	ac 81       	ldd	r26, Y+4	; 0x04
    3ffa:	bd 81       	ldd	r27, Y+5	; 0x05
    3ffc:	89 2b       	or	r24, r25
    3ffe:	8a 2b       	or	r24, r26
    4000:	8b 2b       	or	r24, r27
    4002:	f9 f0       	breq	.+62     	; 0x4042 <__RODATA_PM_OFFSET__+0x42>
    4004:	1e 82       	std	Y+6, r1	; 0x06
    4006:	1f 82       	std	Y+7, r1	; 0x07
    4008:	18 86       	std	Y+8, r1	; 0x08
    400a:	19 86       	std	Y+9, r1	; 0x09
    400c:	ce 01       	movw	r24, r28
    400e:	06 96       	adiw	r24, 0x06	; 6
    4010:	ac 01       	movw	r20, r24
    4012:	60 ea       	ldi	r22, 0xA0	; 160
    4014:	74 e1       	ldi	r23, 0x14	; 20
    4016:	80 e0       	ldi	r24, 0x00	; 0
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    401e:	89 83       	std	Y+1, r24	; 0x01
    4020:	89 81       	ldd	r24, Y+1	; 0x01
    4022:	88 23       	and	r24, r24
    4024:	d9 f6       	brne	.-74     	; 0x3fdc <chip_apply_conf+0x3a>
    4026:	2e 81       	ldd	r18, Y+6	; 0x06
    4028:	3f 81       	ldd	r19, Y+7	; 0x07
    402a:	48 85       	ldd	r20, Y+8	; 0x08
    402c:	59 85       	ldd	r21, Y+9	; 0x09
    402e:	8a 81       	ldd	r24, Y+2	; 0x02
    4030:	9b 81       	ldd	r25, Y+3	; 0x03
    4032:	ac 81       	ldd	r26, Y+4	; 0x04
    4034:	bd 81       	ldd	r27, Y+5	; 0x05
    4036:	28 17       	cp	r18, r24
    4038:	39 07       	cpc	r19, r25
    403a:	4a 07       	cpc	r20, r26
    403c:	5b 07       	cpc	r21, r27
    403e:	19 f0       	breq	.+6      	; 0x4046 <__RODATA_PM_OFFSET__+0x46>
    4040:	cd cf       	rjmp	.-102    	; 0x3fdc <chip_apply_conf+0x3a>
    4042:	00 00       	nop
    4044:	01 c0       	rjmp	.+2      	; 0x4048 <__RODATA_PM_OFFSET__+0x48>
    4046:	00 00       	nop
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	2d 96       	adiw	r28, 0x0d	; 13
    404c:	cd bf       	out	0x3d, r28	; 61
    404e:	de bf       	out	0x3e, r29	; 62
    4050:	df 91       	pop	r29
    4052:	cf 91       	pop	r28
    4054:	08 95       	ret

00004056 <enable_interrupts>:
    4056:	cf 93       	push	r28
    4058:	df 93       	push	r29
    405a:	cd b7       	in	r28, 0x3d	; 61
    405c:	de b7       	in	r29, 0x3e	; 62
    405e:	25 97       	sbiw	r28, 0x05	; 5
    4060:	cd bf       	out	0x3d, r28	; 61
    4062:	de bf       	out	0x3e, r29	; 62
    4064:	1a 82       	std	Y+2, r1	; 0x02
    4066:	1b 82       	std	Y+3, r1	; 0x03
    4068:	1c 82       	std	Y+4, r1	; 0x04
    406a:	1d 82       	std	Y+5, r1	; 0x05
    406c:	19 82       	std	Y+1, r1	; 0x01
    406e:	ce 01       	movw	r24, r28
    4070:	02 96       	adiw	r24, 0x02	; 2
    4072:	ac 01       	movw	r20, r24
    4074:	68 e0       	ldi	r22, 0x08	; 8
    4076:	74 e1       	ldi	r23, 0x14	; 20
    4078:	80 e0       	ldi	r24, 0x00	; 0
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    4080:	89 83       	std	Y+1, r24	; 0x01
    4082:	89 81       	ldd	r24, Y+1	; 0x01
    4084:	88 23       	and	r24, r24
    4086:	e9 f5       	brne	.+122    	; 0x4102 <enable_interrupts+0xac>
    4088:	8a 81       	ldd	r24, Y+2	; 0x02
    408a:	9b 81       	ldd	r25, Y+3	; 0x03
    408c:	ac 81       	ldd	r26, Y+4	; 0x04
    408e:	bd 81       	ldd	r27, Y+5	; 0x05
    4090:	91 60       	ori	r25, 0x01	; 1
    4092:	8a 83       	std	Y+2, r24	; 0x02
    4094:	9b 83       	std	Y+3, r25	; 0x03
    4096:	ac 83       	std	Y+4, r26	; 0x04
    4098:	bd 83       	std	Y+5, r27	; 0x05
    409a:	8a 81       	ldd	r24, Y+2	; 0x02
    409c:	9b 81       	ldd	r25, Y+3	; 0x03
    409e:	ac 81       	ldd	r26, Y+4	; 0x04
    40a0:	bd 81       	ldd	r27, Y+5	; 0x05
    40a2:	9c 01       	movw	r18, r24
    40a4:	ad 01       	movw	r20, r26
    40a6:	68 e0       	ldi	r22, 0x08	; 8
    40a8:	74 e1       	ldi	r23, 0x14	; 20
    40aa:	80 e0       	ldi	r24, 0x00	; 0
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    40b2:	89 83       	std	Y+1, r24	; 0x01
    40b4:	89 81       	ldd	r24, Y+1	; 0x01
    40b6:	88 23       	and	r24, r24
    40b8:	31 f5       	brne	.+76     	; 0x4106 <enable_interrupts+0xb0>
    40ba:	ce 01       	movw	r24, r28
    40bc:	02 96       	adiw	r24, 0x02	; 2
    40be:	ac 01       	movw	r20, r24
    40c0:	60 e0       	ldi	r22, 0x00	; 0
    40c2:	7a e1       	ldi	r23, 0x1A	; 26
    40c4:	80 e0       	ldi	r24, 0x00	; 0
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    40cc:	89 83       	std	Y+1, r24	; 0x01
    40ce:	89 81       	ldd	r24, Y+1	; 0x01
    40d0:	88 23       	and	r24, r24
    40d2:	d9 f4       	brne	.+54     	; 0x410a <enable_interrupts+0xb4>
    40d4:	8a 81       	ldd	r24, Y+2	; 0x02
    40d6:	9b 81       	ldd	r25, Y+3	; 0x03
    40d8:	ac 81       	ldd	r26, Y+4	; 0x04
    40da:	bd 81       	ldd	r27, Y+5	; 0x05
    40dc:	a1 60       	ori	r26, 0x01	; 1
    40de:	8a 83       	std	Y+2, r24	; 0x02
    40e0:	9b 83       	std	Y+3, r25	; 0x03
    40e2:	ac 83       	std	Y+4, r26	; 0x04
    40e4:	bd 83       	std	Y+5, r27	; 0x05
    40e6:	8a 81       	ldd	r24, Y+2	; 0x02
    40e8:	9b 81       	ldd	r25, Y+3	; 0x03
    40ea:	ac 81       	ldd	r26, Y+4	; 0x04
    40ec:	bd 81       	ldd	r27, Y+5	; 0x05
    40ee:	9c 01       	movw	r18, r24
    40f0:	ad 01       	movw	r20, r26
    40f2:	60 e0       	ldi	r22, 0x00	; 0
    40f4:	7a e1       	ldi	r23, 0x1A	; 26
    40f6:	80 e0       	ldi	r24, 0x00	; 0
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    40fe:	89 83       	std	Y+1, r24	; 0x01
    4100:	05 c0       	rjmp	.+10     	; 0x410c <enable_interrupts+0xb6>
    4102:	00 00       	nop
    4104:	03 c0       	rjmp	.+6      	; 0x410c <enable_interrupts+0xb6>
    4106:	00 00       	nop
    4108:	01 c0       	rjmp	.+2      	; 0x410c <enable_interrupts+0xb6>
    410a:	00 00       	nop
    410c:	89 81       	ldd	r24, Y+1	; 0x01
    410e:	25 96       	adiw	r28, 0x05	; 5
    4110:	cd bf       	out	0x3d, r28	; 61
    4112:	de bf       	out	0x3e, r29	; 62
    4114:	df 91       	pop	r29
    4116:	cf 91       	pop	r28
    4118:	08 95       	ret

0000411a <nmi_get_chipid>:
    411a:	cf 93       	push	r28
    411c:	df 93       	push	r29
    411e:	00 d0       	rcall	.+0      	; 0x4120 <nmi_get_chipid+0x6>
    4120:	00 d0       	rcall	.+0      	; 0x4122 <nmi_get_chipid+0x8>
    4122:	cd b7       	in	r28, 0x3d	; 61
    4124:	de b7       	in	r29, 0x3e	; 62
    4126:	80 91 92 32 	lds	r24, 0x3292	; 0x803292 <chipid.2327>
    412a:	90 91 93 32 	lds	r25, 0x3293	; 0x803293 <chipid.2327+0x1>
    412e:	a0 91 94 32 	lds	r26, 0x3294	; 0x803294 <chipid.2327+0x2>
    4132:	b0 91 95 32 	lds	r27, 0x3295	; 0x803295 <chipid.2327+0x3>
    4136:	89 2b       	or	r24, r25
    4138:	8a 2b       	or	r24, r26
    413a:	8b 2b       	or	r24, r27
    413c:	09 f0       	breq	.+2      	; 0x4140 <nmi_get_chipid+0x26>
    413e:	cd c0       	rjmp	.+410    	; 0x42da <nmi_get_chipid+0x1c0>
    4140:	42 e9       	ldi	r20, 0x92	; 146
    4142:	52 e3       	ldi	r21, 0x32	; 50
    4144:	60 e0       	ldi	r22, 0x00	; 0
    4146:	70 e1       	ldi	r23, 0x10	; 16
    4148:	80 e0       	ldi	r24, 0x00	; 0
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    4150:	88 23       	and	r24, r24
    4152:	61 f0       	breq	.+24     	; 0x416c <nmi_get_chipid+0x52>
    4154:	10 92 92 32 	sts	0x3292, r1	; 0x803292 <chipid.2327>
    4158:	10 92 93 32 	sts	0x3293, r1	; 0x803293 <chipid.2327+0x1>
    415c:	10 92 94 32 	sts	0x3294, r1	; 0x803294 <chipid.2327+0x2>
    4160:	10 92 95 32 	sts	0x3295, r1	; 0x803295 <chipid.2327+0x3>
    4164:	80 e0       	ldi	r24, 0x00	; 0
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	dc 01       	movw	r26, r24
    416a:	bf c0       	rjmp	.+382    	; 0x42ea <nmi_get_chipid+0x1d0>
    416c:	ce 01       	movw	r24, r28
    416e:	01 96       	adiw	r24, 0x01	; 1
    4170:	ac 01       	movw	r20, r24
    4172:	64 ef       	ldi	r22, 0xF4	; 244
    4174:	73 e1       	ldi	r23, 0x13	; 19
    4176:	80 e0       	ldi	r24, 0x00	; 0
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    417e:	88 23       	and	r24, r24
    4180:	61 f0       	breq	.+24     	; 0x419a <nmi_get_chipid+0x80>
    4182:	10 92 92 32 	sts	0x3292, r1	; 0x803292 <chipid.2327>
    4186:	10 92 93 32 	sts	0x3293, r1	; 0x803293 <chipid.2327+0x1>
    418a:	10 92 94 32 	sts	0x3294, r1	; 0x803294 <chipid.2327+0x2>
    418e:	10 92 95 32 	sts	0x3295, r1	; 0x803295 <chipid.2327+0x3>
    4192:	80 e0       	ldi	r24, 0x00	; 0
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	dc 01       	movw	r26, r24
    4198:	a8 c0       	rjmp	.+336    	; 0x42ea <nmi_get_chipid+0x1d0>
    419a:	80 91 92 32 	lds	r24, 0x3292	; 0x803292 <chipid.2327>
    419e:	90 91 93 32 	lds	r25, 0x3293	; 0x803293 <chipid.2327+0x1>
    41a2:	a0 91 94 32 	lds	r26, 0x3294	; 0x803294 <chipid.2327+0x2>
    41a6:	b0 91 95 32 	lds	r27, 0x3295	; 0x803295 <chipid.2327+0x3>
    41aa:	80 3a       	cpi	r24, 0xA0	; 160
    41ac:	92 40       	sbci	r25, 0x02	; 2
    41ae:	a0 41       	sbci	r26, 0x10	; 16
    41b0:	b1 05       	cpc	r27, r1
    41b2:	b1 f4       	brne	.+44     	; 0x41e0 <nmi_get_chipid+0xc6>
    41b4:	89 81       	ldd	r24, Y+1	; 0x01
    41b6:	9a 81       	ldd	r25, Y+2	; 0x02
    41b8:	ab 81       	ldd	r26, Y+3	; 0x03
    41ba:	bc 81       	ldd	r27, Y+4	; 0x04
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	a1 05       	cpc	r26, r1
    41c0:	b1 05       	cpc	r27, r1
    41c2:	09 f4       	brne	.+2      	; 0x41c6 <nmi_get_chipid+0xac>
    41c4:	68 c0       	rjmp	.+208    	; 0x4296 <nmi_get_chipid+0x17c>
    41c6:	81 ea       	ldi	r24, 0xA1	; 161
    41c8:	92 e0       	ldi	r25, 0x02	; 2
    41ca:	a0 e1       	ldi	r26, 0x10	; 16
    41cc:	b0 e0       	ldi	r27, 0x00	; 0
    41ce:	80 93 92 32 	sts	0x3292, r24	; 0x803292 <chipid.2327>
    41d2:	90 93 93 32 	sts	0x3293, r25	; 0x803293 <chipid.2327+0x1>
    41d6:	a0 93 94 32 	sts	0x3294, r26	; 0x803294 <chipid.2327+0x2>
    41da:	b0 93 95 32 	sts	0x3295, r27	; 0x803295 <chipid.2327+0x3>
    41de:	5b c0       	rjmp	.+182    	; 0x4296 <nmi_get_chipid+0x17c>
    41e0:	80 91 92 32 	lds	r24, 0x3292	; 0x803292 <chipid.2327>
    41e4:	90 91 93 32 	lds	r25, 0x3293	; 0x803293 <chipid.2327+0x1>
    41e8:	a0 91 94 32 	lds	r26, 0x3294	; 0x803294 <chipid.2327+0x2>
    41ec:	b0 91 95 32 	lds	r27, 0x3295	; 0x803295 <chipid.2327+0x3>
    41f0:	80 3b       	cpi	r24, 0xB0	; 176
    41f2:	92 40       	sbci	r25, 0x02	; 2
    41f4:	a0 41       	sbci	r26, 0x10	; 16
    41f6:	b1 05       	cpc	r27, r1
    41f8:	59 f5       	brne	.+86     	; 0x4250 <nmi_get_chipid+0x136>
    41fa:	89 81       	ldd	r24, Y+1	; 0x01
    41fc:	9a 81       	ldd	r25, Y+2	; 0x02
    41fe:	ab 81       	ldd	r26, Y+3	; 0x03
    4200:	bc 81       	ldd	r27, Y+4	; 0x04
    4202:	03 97       	sbiw	r24, 0x03	; 3
    4204:	a1 05       	cpc	r26, r1
    4206:	b1 05       	cpc	r27, r1
    4208:	09 f4       	brne	.+2      	; 0x420c <nmi_get_chipid+0xf2>
    420a:	45 c0       	rjmp	.+138    	; 0x4296 <nmi_get_chipid+0x17c>
    420c:	89 81       	ldd	r24, Y+1	; 0x01
    420e:	9a 81       	ldd	r25, Y+2	; 0x02
    4210:	ab 81       	ldd	r26, Y+3	; 0x03
    4212:	bc 81       	ldd	r27, Y+4	; 0x04
    4214:	04 97       	sbiw	r24, 0x04	; 4
    4216:	a1 05       	cpc	r26, r1
    4218:	b1 05       	cpc	r27, r1
    421a:	69 f4       	brne	.+26     	; 0x4236 <nmi_get_chipid+0x11c>
    421c:	81 eb       	ldi	r24, 0xB1	; 177
    421e:	92 e0       	ldi	r25, 0x02	; 2
    4220:	a0 e1       	ldi	r26, 0x10	; 16
    4222:	b0 e0       	ldi	r27, 0x00	; 0
    4224:	80 93 92 32 	sts	0x3292, r24	; 0x803292 <chipid.2327>
    4228:	90 93 93 32 	sts	0x3293, r25	; 0x803293 <chipid.2327+0x1>
    422c:	a0 93 94 32 	sts	0x3294, r26	; 0x803294 <chipid.2327+0x2>
    4230:	b0 93 95 32 	sts	0x3295, r27	; 0x803295 <chipid.2327+0x3>
    4234:	30 c0       	rjmp	.+96     	; 0x4296 <nmi_get_chipid+0x17c>
    4236:	82 eb       	ldi	r24, 0xB2	; 178
    4238:	92 e0       	ldi	r25, 0x02	; 2
    423a:	a0 e1       	ldi	r26, 0x10	; 16
    423c:	b0 e0       	ldi	r27, 0x00	; 0
    423e:	80 93 92 32 	sts	0x3292, r24	; 0x803292 <chipid.2327>
    4242:	90 93 93 32 	sts	0x3293, r25	; 0x803293 <chipid.2327+0x1>
    4246:	a0 93 94 32 	sts	0x3294, r26	; 0x803294 <chipid.2327+0x2>
    424a:	b0 93 95 32 	sts	0x3295, r27	; 0x803295 <chipid.2327+0x3>
    424e:	23 c0       	rjmp	.+70     	; 0x4296 <nmi_get_chipid+0x17c>
    4250:	80 91 92 32 	lds	r24, 0x3292	; 0x803292 <chipid.2327>
    4254:	90 91 93 32 	lds	r25, 0x3293	; 0x803293 <chipid.2327+0x1>
    4258:	a0 91 94 32 	lds	r26, 0x3294	; 0x803294 <chipid.2327+0x2>
    425c:	b0 91 95 32 	lds	r27, 0x3295	; 0x803295 <chipid.2327+0x3>
    4260:	80 3f       	cpi	r24, 0xF0	; 240
    4262:	91 05       	cpc	r25, r1
    4264:	a0 41       	sbci	r26, 0x10	; 16
    4266:	b1 05       	cpc	r27, r1
    4268:	b1 f4       	brne	.+44     	; 0x4296 <nmi_get_chipid+0x17c>
    426a:	42 e9       	ldi	r20, 0x92	; 146
    426c:	52 e3       	ldi	r21, 0x32	; 50
    426e:	60 e0       	ldi	r22, 0x00	; 0
    4270:	70 e0       	ldi	r23, 0x00	; 0
    4272:	8b e3       	ldi	r24, 0x3B	; 59
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    427a:	88 23       	and	r24, r24
    427c:	61 f0       	breq	.+24     	; 0x4296 <nmi_get_chipid+0x17c>
    427e:	10 92 92 32 	sts	0x3292, r1	; 0x803292 <chipid.2327>
    4282:	10 92 93 32 	sts	0x3293, r1	; 0x803293 <chipid.2327+0x1>
    4286:	10 92 94 32 	sts	0x3294, r1	; 0x803294 <chipid.2327+0x2>
    428a:	10 92 95 32 	sts	0x3295, r1	; 0x803295 <chipid.2327+0x3>
    428e:	80 e0       	ldi	r24, 0x00	; 0
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	dc 01       	movw	r26, r24
    4294:	2a c0       	rjmp	.+84     	; 0x42ea <nmi_get_chipid+0x1d0>
    4296:	80 91 92 32 	lds	r24, 0x3292	; 0x803292 <chipid.2327>
    429a:	90 91 93 32 	lds	r25, 0x3293	; 0x803293 <chipid.2327+0x1>
    429e:	a0 91 94 32 	lds	r26, 0x3294	; 0x803294 <chipid.2327+0x2>
    42a2:	b0 91 95 32 	lds	r27, 0x3295	; 0x803295 <chipid.2327+0x3>
    42a6:	a0 7f       	andi	r26, 0xF0	; 240
    42a8:	80 93 92 32 	sts	0x3292, r24	; 0x803292 <chipid.2327>
    42ac:	90 93 93 32 	sts	0x3293, r25	; 0x803293 <chipid.2327+0x1>
    42b0:	a0 93 94 32 	sts	0x3294, r26	; 0x803294 <chipid.2327+0x2>
    42b4:	b0 93 95 32 	sts	0x3295, r27	; 0x803295 <chipid.2327+0x3>
    42b8:	80 91 92 32 	lds	r24, 0x3292	; 0x803292 <chipid.2327>
    42bc:	90 91 93 32 	lds	r25, 0x3293	; 0x803293 <chipid.2327+0x1>
    42c0:	a0 91 94 32 	lds	r26, 0x3294	; 0x803294 <chipid.2327+0x2>
    42c4:	b0 91 95 32 	lds	r27, 0x3295	; 0x803295 <chipid.2327+0x3>
    42c8:	a5 60       	ori	r26, 0x05	; 5
    42ca:	80 93 92 32 	sts	0x3292, r24	; 0x803292 <chipid.2327>
    42ce:	90 93 93 32 	sts	0x3293, r25	; 0x803293 <chipid.2327+0x1>
    42d2:	a0 93 94 32 	sts	0x3294, r26	; 0x803294 <chipid.2327+0x2>
    42d6:	b0 93 95 32 	sts	0x3295, r27	; 0x803295 <chipid.2327+0x3>
    42da:	80 91 92 32 	lds	r24, 0x3292	; 0x803292 <chipid.2327>
    42de:	90 91 93 32 	lds	r25, 0x3293	; 0x803293 <chipid.2327+0x1>
    42e2:	a0 91 94 32 	lds	r26, 0x3294	; 0x803294 <chipid.2327+0x2>
    42e6:	b0 91 95 32 	lds	r27, 0x3295	; 0x803295 <chipid.2327+0x3>
    42ea:	bc 01       	movw	r22, r24
    42ec:	cd 01       	movw	r24, r26
    42ee:	24 96       	adiw	r28, 0x04	; 4
    42f0:	cd bf       	out	0x3d, r28	; 61
    42f2:	de bf       	out	0x3e, r29	; 62
    42f4:	df 91       	pop	r29
    42f6:	cf 91       	pop	r28
    42f8:	08 95       	ret

000042fa <chip_sleep>:
    42fa:	cf 93       	push	r28
    42fc:	df 93       	push	r29
    42fe:	cd b7       	in	r28, 0x3d	; 61
    4300:	de b7       	in	r29, 0x3e	; 62
    4302:	25 97       	sbiw	r28, 0x05	; 5
    4304:	cd bf       	out	0x3d, r28	; 61
    4306:	de bf       	out	0x3e, r29	; 62
    4308:	19 82       	std	Y+1, r1	; 0x01
    430a:	ce 01       	movw	r24, r28
    430c:	02 96       	adiw	r24, 0x02	; 2
    430e:	ac 01       	movw	r20, r24
    4310:	60 e1       	ldi	r22, 0x10	; 16
    4312:	70 e0       	ldi	r23, 0x00	; 0
    4314:	80 e0       	ldi	r24, 0x00	; 0
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    431c:	89 83       	std	Y+1, r24	; 0x01
    431e:	89 81       	ldd	r24, Y+1	; 0x01
    4320:	88 23       	and	r24, r24
    4322:	09 f0       	breq	.+2      	; 0x4326 <chip_sleep+0x2c>
    4324:	71 c0       	rjmp	.+226    	; 0x4408 <chip_sleep+0x10e>
    4326:	8a 81       	ldd	r24, Y+2	; 0x02
    4328:	9b 81       	ldd	r25, Y+3	; 0x03
    432a:	ac 81       	ldd	r26, Y+4	; 0x04
    432c:	bd 81       	ldd	r27, Y+5	; 0x05
    432e:	81 70       	andi	r24, 0x01	; 1
    4330:	99 27       	eor	r25, r25
    4332:	aa 27       	eor	r26, r26
    4334:	bb 27       	eor	r27, r27
    4336:	89 2b       	or	r24, r25
    4338:	8a 2b       	or	r24, r26
    433a:	8b 2b       	or	r24, r27
    433c:	09 f0       	breq	.+2      	; 0x4340 <chip_sleep+0x46>
    433e:	e5 cf       	rjmp	.-54     	; 0x430a <chip_sleep+0x10>
    4340:	00 00       	nop
    4342:	ce 01       	movw	r24, r28
    4344:	02 96       	adiw	r24, 0x02	; 2
    4346:	ac 01       	movw	r20, r24
    4348:	61 e0       	ldi	r22, 0x01	; 1
    434a:	70 e0       	ldi	r23, 0x00	; 0
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    4354:	89 83       	std	Y+1, r24	; 0x01
    4356:	89 81       	ldd	r24, Y+1	; 0x01
    4358:	88 23       	and	r24, r24
    435a:	09 f0       	breq	.+2      	; 0x435e <chip_sleep+0x64>
    435c:	57 c0       	rjmp	.+174    	; 0x440c <chip_sleep+0x112>
    435e:	8a 81       	ldd	r24, Y+2	; 0x02
    4360:	9b 81       	ldd	r25, Y+3	; 0x03
    4362:	ac 81       	ldd	r26, Y+4	; 0x04
    4364:	bd 81       	ldd	r27, Y+5	; 0x05
    4366:	82 70       	andi	r24, 0x02	; 2
    4368:	99 27       	eor	r25, r25
    436a:	aa 27       	eor	r26, r26
    436c:	bb 27       	eor	r27, r27
    436e:	89 2b       	or	r24, r25
    4370:	8a 2b       	or	r24, r26
    4372:	8b 2b       	or	r24, r27
    4374:	c9 f0       	breq	.+50     	; 0x43a8 <chip_sleep+0xae>
    4376:	8a 81       	ldd	r24, Y+2	; 0x02
    4378:	9b 81       	ldd	r25, Y+3	; 0x03
    437a:	ac 81       	ldd	r26, Y+4	; 0x04
    437c:	bd 81       	ldd	r27, Y+5	; 0x05
    437e:	8d 7f       	andi	r24, 0xFD	; 253
    4380:	8a 83       	std	Y+2, r24	; 0x02
    4382:	9b 83       	std	Y+3, r25	; 0x03
    4384:	ac 83       	std	Y+4, r26	; 0x04
    4386:	bd 83       	std	Y+5, r27	; 0x05
    4388:	8a 81       	ldd	r24, Y+2	; 0x02
    438a:	9b 81       	ldd	r25, Y+3	; 0x03
    438c:	ac 81       	ldd	r26, Y+4	; 0x04
    438e:	bd 81       	ldd	r27, Y+5	; 0x05
    4390:	9c 01       	movw	r18, r24
    4392:	ad 01       	movw	r20, r26
    4394:	61 e0       	ldi	r22, 0x01	; 1
    4396:	70 e0       	ldi	r23, 0x00	; 0
    4398:	80 e0       	ldi	r24, 0x00	; 0
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    43a0:	89 83       	std	Y+1, r24	; 0x01
    43a2:	89 81       	ldd	r24, Y+1	; 0x01
    43a4:	88 23       	and	r24, r24
    43a6:	a1 f5       	brne	.+104    	; 0x4410 <chip_sleep+0x116>
    43a8:	ce 01       	movw	r24, r28
    43aa:	02 96       	adiw	r24, 0x02	; 2
    43ac:	ac 01       	movw	r20, r24
    43ae:	6b e0       	ldi	r22, 0x0B	; 11
    43b0:	70 e0       	ldi	r23, 0x00	; 0
    43b2:	80 e0       	ldi	r24, 0x00	; 0
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    43ba:	89 83       	std	Y+1, r24	; 0x01
    43bc:	89 81       	ldd	r24, Y+1	; 0x01
    43be:	88 23       	and	r24, r24
    43c0:	49 f5       	brne	.+82     	; 0x4414 <chip_sleep+0x11a>
    43c2:	8a 81       	ldd	r24, Y+2	; 0x02
    43c4:	9b 81       	ldd	r25, Y+3	; 0x03
    43c6:	ac 81       	ldd	r26, Y+4	; 0x04
    43c8:	bd 81       	ldd	r27, Y+5	; 0x05
    43ca:	81 70       	andi	r24, 0x01	; 1
    43cc:	99 27       	eor	r25, r25
    43ce:	aa 27       	eor	r26, r26
    43d0:	bb 27       	eor	r27, r27
    43d2:	89 2b       	or	r24, r25
    43d4:	8a 2b       	or	r24, r26
    43d6:	8b 2b       	or	r24, r27
    43d8:	f1 f0       	breq	.+60     	; 0x4416 <chip_sleep+0x11c>
    43da:	8a 81       	ldd	r24, Y+2	; 0x02
    43dc:	9b 81       	ldd	r25, Y+3	; 0x03
    43de:	ac 81       	ldd	r26, Y+4	; 0x04
    43e0:	bd 81       	ldd	r27, Y+5	; 0x05
    43e2:	8e 7f       	andi	r24, 0xFE	; 254
    43e4:	8a 83       	std	Y+2, r24	; 0x02
    43e6:	9b 83       	std	Y+3, r25	; 0x03
    43e8:	ac 83       	std	Y+4, r26	; 0x04
    43ea:	bd 83       	std	Y+5, r27	; 0x05
    43ec:	8a 81       	ldd	r24, Y+2	; 0x02
    43ee:	9b 81       	ldd	r25, Y+3	; 0x03
    43f0:	ac 81       	ldd	r26, Y+4	; 0x04
    43f2:	bd 81       	ldd	r27, Y+5	; 0x05
    43f4:	9c 01       	movw	r18, r24
    43f6:	ad 01       	movw	r20, r26
    43f8:	6b e0       	ldi	r22, 0x0B	; 11
    43fa:	70 e0       	ldi	r23, 0x00	; 0
    43fc:	80 e0       	ldi	r24, 0x00	; 0
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    4404:	89 83       	std	Y+1, r24	; 0x01
    4406:	07 c0       	rjmp	.+14     	; 0x4416 <chip_sleep+0x11c>
    4408:	00 00       	nop
    440a:	05 c0       	rjmp	.+10     	; 0x4416 <chip_sleep+0x11c>
    440c:	00 00       	nop
    440e:	03 c0       	rjmp	.+6      	; 0x4416 <chip_sleep+0x11c>
    4410:	00 00       	nop
    4412:	01 c0       	rjmp	.+2      	; 0x4416 <chip_sleep+0x11c>
    4414:	00 00       	nop
    4416:	89 81       	ldd	r24, Y+1	; 0x01
    4418:	25 96       	adiw	r28, 0x05	; 5
    441a:	cd bf       	out	0x3d, r28	; 61
    441c:	de bf       	out	0x3e, r29	; 62
    441e:	df 91       	pop	r29
    4420:	cf 91       	pop	r28
    4422:	08 95       	ret

00004424 <chip_wake>:
    4424:	cf 93       	push	r28
    4426:	df 93       	push	r29
    4428:	cd b7       	in	r28, 0x3d	; 61
    442a:	de b7       	in	r29, 0x3e	; 62
    442c:	2d 97       	sbiw	r28, 0x0d	; 13
    442e:	cd bf       	out	0x3d, r28	; 61
    4430:	de bf       	out	0x3e, r29	; 62
    4432:	19 82       	std	Y+1, r1	; 0x01
    4434:	1e 82       	std	Y+6, r1	; 0x06
    4436:	1f 82       	std	Y+7, r1	; 0x07
    4438:	18 86       	std	Y+8, r1	; 0x08
    443a:	19 86       	std	Y+9, r1	; 0x09
    443c:	1a 86       	std	Y+10, r1	; 0x0a
    443e:	1b 86       	std	Y+11, r1	; 0x0b
    4440:	1c 86       	std	Y+12, r1	; 0x0c
    4442:	1d 86       	std	Y+13, r1	; 0x0d
    4444:	1a 82       	std	Y+2, r1	; 0x02
    4446:	1b 82       	std	Y+3, r1	; 0x03
    4448:	1c 82       	std	Y+4, r1	; 0x04
    444a:	1d 82       	std	Y+5, r1	; 0x05
    444c:	ce 01       	movw	r24, r28
    444e:	06 96       	adiw	r24, 0x06	; 6
    4450:	ac 01       	movw	r20, r24
    4452:	6b e0       	ldi	r22, 0x0B	; 11
    4454:	70 e0       	ldi	r23, 0x00	; 0
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    445e:	89 83       	std	Y+1, r24	; 0x01
    4460:	89 81       	ldd	r24, Y+1	; 0x01
    4462:	88 23       	and	r24, r24
    4464:	09 f0       	breq	.+2      	; 0x4468 <chip_wake+0x44>
    4466:	83 c0       	rjmp	.+262    	; 0x456e <chip_wake+0x14a>
    4468:	8e 81       	ldd	r24, Y+6	; 0x06
    446a:	9f 81       	ldd	r25, Y+7	; 0x07
    446c:	a8 85       	ldd	r26, Y+8	; 0x08
    446e:	b9 85       	ldd	r27, Y+9	; 0x09
    4470:	81 70       	andi	r24, 0x01	; 1
    4472:	99 27       	eor	r25, r25
    4474:	aa 27       	eor	r26, r26
    4476:	bb 27       	eor	r27, r27
    4478:	89 2b       	or	r24, r25
    447a:	8a 2b       	or	r24, r26
    447c:	8b 2b       	or	r24, r27
    447e:	91 f4       	brne	.+36     	; 0x44a4 <chip_wake+0x80>
    4480:	8e 81       	ldd	r24, Y+6	; 0x06
    4482:	9f 81       	ldd	r25, Y+7	; 0x07
    4484:	a8 85       	ldd	r26, Y+8	; 0x08
    4486:	b9 85       	ldd	r27, Y+9	; 0x09
    4488:	81 60       	ori	r24, 0x01	; 1
    448a:	9c 01       	movw	r18, r24
    448c:	ad 01       	movw	r20, r26
    448e:	6b e0       	ldi	r22, 0x0B	; 11
    4490:	70 e0       	ldi	r23, 0x00	; 0
    4492:	80 e0       	ldi	r24, 0x00	; 0
    4494:	90 e0       	ldi	r25, 0x00	; 0
    4496:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    449a:	89 83       	std	Y+1, r24	; 0x01
    449c:	89 81       	ldd	r24, Y+1	; 0x01
    449e:	88 23       	and	r24, r24
    44a0:	09 f0       	breq	.+2      	; 0x44a4 <chip_wake+0x80>
    44a2:	67 c0       	rjmp	.+206    	; 0x4572 <chip_wake+0x14e>
    44a4:	ce 01       	movw	r24, r28
    44a6:	06 96       	adiw	r24, 0x06	; 6
    44a8:	ac 01       	movw	r20, r24
    44aa:	61 e0       	ldi	r22, 0x01	; 1
    44ac:	70 e0       	ldi	r23, 0x00	; 0
    44ae:	80 e0       	ldi	r24, 0x00	; 0
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    44b6:	89 83       	std	Y+1, r24	; 0x01
    44b8:	89 81       	ldd	r24, Y+1	; 0x01
    44ba:	88 23       	and	r24, r24
    44bc:	09 f0       	breq	.+2      	; 0x44c0 <chip_wake+0x9c>
    44be:	5b c0       	rjmp	.+182    	; 0x4576 <chip_wake+0x152>
    44c0:	8e 81       	ldd	r24, Y+6	; 0x06
    44c2:	9f 81       	ldd	r25, Y+7	; 0x07
    44c4:	a8 85       	ldd	r26, Y+8	; 0x08
    44c6:	b9 85       	ldd	r27, Y+9	; 0x09
    44c8:	82 70       	andi	r24, 0x02	; 2
    44ca:	99 27       	eor	r25, r25
    44cc:	aa 27       	eor	r26, r26
    44ce:	bb 27       	eor	r27, r27
    44d0:	89 2b       	or	r24, r25
    44d2:	8a 2b       	or	r24, r26
    44d4:	8b 2b       	or	r24, r27
    44d6:	91 f4       	brne	.+36     	; 0x44fc <chip_wake+0xd8>
    44d8:	8e 81       	ldd	r24, Y+6	; 0x06
    44da:	9f 81       	ldd	r25, Y+7	; 0x07
    44dc:	a8 85       	ldd	r26, Y+8	; 0x08
    44de:	b9 85       	ldd	r27, Y+9	; 0x09
    44e0:	82 60       	ori	r24, 0x02	; 2
    44e2:	9c 01       	movw	r18, r24
    44e4:	ad 01       	movw	r20, r26
    44e6:	61 e0       	ldi	r22, 0x01	; 1
    44e8:	70 e0       	ldi	r23, 0x00	; 0
    44ea:	80 e0       	ldi	r24, 0x00	; 0
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    44f2:	89 83       	std	Y+1, r24	; 0x01
    44f4:	89 81       	ldd	r24, Y+1	; 0x01
    44f6:	88 23       	and	r24, r24
    44f8:	09 f0       	breq	.+2      	; 0x44fc <chip_wake+0xd8>
    44fa:	3f c0       	rjmp	.+126    	; 0x457a <chip_wake+0x156>
    44fc:	ce 01       	movw	r24, r28
    44fe:	0a 96       	adiw	r24, 0x0a	; 10
    4500:	ac 01       	movw	r20, r24
    4502:	6f e0       	ldi	r22, 0x0F	; 15
    4504:	70 e0       	ldi	r23, 0x00	; 0
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    450e:	89 83       	std	Y+1, r24	; 0x01
    4510:	89 81       	ldd	r24, Y+1	; 0x01
    4512:	88 23       	and	r24, r24
    4514:	a1 f5       	brne	.+104    	; 0x457e <chip_wake+0x15a>
    4516:	8a 85       	ldd	r24, Y+10	; 0x0a
    4518:	9b 85       	ldd	r25, Y+11	; 0x0b
    451a:	ac 85       	ldd	r26, Y+12	; 0x0c
    451c:	bd 85       	ldd	r27, Y+13	; 0x0d
    451e:	84 70       	andi	r24, 0x04	; 4
    4520:	99 27       	eor	r25, r25
    4522:	aa 27       	eor	r26, r26
    4524:	bb 27       	eor	r27, r27
    4526:	89 2b       	or	r24, r25
    4528:	8a 2b       	or	r24, r26
    452a:	8b 2b       	or	r24, r27
    452c:	e1 f4       	brne	.+56     	; 0x4566 <chip_wake+0x142>
    452e:	62 e0       	ldi	r22, 0x02	; 2
    4530:	70 e0       	ldi	r23, 0x00	; 0
    4532:	80 e0       	ldi	r24, 0x00	; 0
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <nm_bsp_sleep>
    453a:	8a 81       	ldd	r24, Y+2	; 0x02
    453c:	9b 81       	ldd	r25, Y+3	; 0x03
    453e:	ac 81       	ldd	r26, Y+4	; 0x04
    4540:	bd 81       	ldd	r27, Y+5	; 0x05
    4542:	01 96       	adiw	r24, 0x01	; 1
    4544:	a1 1d       	adc	r26, r1
    4546:	b1 1d       	adc	r27, r1
    4548:	8a 83       	std	Y+2, r24	; 0x02
    454a:	9b 83       	std	Y+3, r25	; 0x03
    454c:	ac 83       	std	Y+4, r26	; 0x04
    454e:	bd 83       	std	Y+5, r27	; 0x05
    4550:	8a 81       	ldd	r24, Y+2	; 0x02
    4552:	9b 81       	ldd	r25, Y+3	; 0x03
    4554:	ac 81       	ldd	r26, Y+4	; 0x04
    4556:	bd 81       	ldd	r27, Y+5	; 0x05
    4558:	05 97       	sbiw	r24, 0x05	; 5
    455a:	a1 05       	cpc	r26, r1
    455c:	b1 05       	cpc	r27, r1
    455e:	70 f2       	brcs	.-100    	; 0x44fc <chip_wake+0xd8>
    4560:	8c ef       	ldi	r24, 0xFC	; 252
    4562:	89 83       	std	Y+1, r24	; 0x01
    4564:	0d c0       	rjmp	.+26     	; 0x4580 <chip_wake+0x15c>
    4566:	00 00       	nop
    4568:	0e 94 bb 24 	call	0x4976	; 0x4976 <nm_bus_reset>
    456c:	09 c0       	rjmp	.+18     	; 0x4580 <chip_wake+0x15c>
    456e:	00 00       	nop
    4570:	07 c0       	rjmp	.+14     	; 0x4580 <chip_wake+0x15c>
    4572:	00 00       	nop
    4574:	05 c0       	rjmp	.+10     	; 0x4580 <chip_wake+0x15c>
    4576:	00 00       	nop
    4578:	03 c0       	rjmp	.+6      	; 0x4580 <chip_wake+0x15c>
    457a:	00 00       	nop
    457c:	01 c0       	rjmp	.+2      	; 0x4580 <chip_wake+0x15c>
    457e:	00 00       	nop
    4580:	89 81       	ldd	r24, Y+1	; 0x01
    4582:	2d 96       	adiw	r28, 0x0d	; 13
    4584:	cd bf       	out	0x3d, r28	; 61
    4586:	de bf       	out	0x3e, r29	; 62
    4588:	df 91       	pop	r29
    458a:	cf 91       	pop	r28
    458c:	08 95       	ret

0000458e <wait_for_bootrom>:

sint8 wait_for_bootrom(uint8 arg)
{
    458e:	cf 93       	push	r28
    4590:	df 93       	push	r29
    4592:	cd b7       	in	r28, 0x3d	; 61
    4594:	de b7       	in	r29, 0x3e	; 62
    4596:	62 97       	sbiw	r28, 0x12	; 18
    4598:	cd bf       	out	0x3d, r28	; 61
    459a:	de bf       	out	0x3e, r29	; 62
    459c:	8a 8b       	std	Y+18, r24	; 0x12
	sint8 ret = M2M_SUCCESS;
    459e:	1d 86       	std	Y+13, r1	; 0x0d
	uint32 reg = 0, cnt = 0;
    45a0:	19 82       	std	Y+1, r1	; 0x01
    45a2:	1a 82       	std	Y+2, r1	; 0x02
    45a4:	1b 82       	std	Y+3, r1	; 0x03
    45a6:	1c 82       	std	Y+4, r1	; 0x04
    45a8:	1d 82       	std	Y+5, r1	; 0x05
    45aa:	1e 82       	std	Y+6, r1	; 0x06
    45ac:	1f 82       	std	Y+7, r1	; 0x07
    45ae:	18 86       	std	Y+8, r1	; 0x08
	uint32 u32GpReg1 = 0;
    45b0:	19 86       	std	Y+9, r1	; 0x09
    45b2:	1a 86       	std	Y+10, r1	; 0x0a
    45b4:	1b 86       	std	Y+11, r1	; 0x0b
    45b6:	1c 86       	std	Y+12, r1	; 0x0c
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    45b8:	82 e5       	ldi	r24, 0x52	; 82
    45ba:	93 e1       	ldi	r25, 0x13	; 19
    45bc:	dc 01       	movw	r26, r24
    45be:	8e 87       	std	Y+14, r24	; 0x0e
    45c0:	9f 87       	std	Y+15, r25	; 0x0f
    45c2:	a8 8b       	std	Y+16, r26	; 0x10
    45c4:	b9 8b       	std	Y+17, r27	; 0x11
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    45c6:	19 82       	std	Y+1, r1	; 0x01
    45c8:	1a 82       	std	Y+2, r1	; 0x02
    45ca:	1b 82       	std	Y+3, r1	; 0x03
    45cc:	1c 82       	std	Y+4, r1	; 0x04
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    45ce:	64 e1       	ldi	r22, 0x14	; 20
    45d0:	70 e1       	ldi	r23, 0x10	; 16
    45d2:	80 e0       	ldi	r24, 0x00	; 0
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	0e 94 c7 24 	call	0x498e	; 0x498e <nm_read_reg>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	89 83       	std	Y+1, r24	; 0x01
    45e0:	9a 83       	std	Y+2, r25	; 0x02
    45e2:	ab 83       	std	Y+3, r26	; 0x03
    45e4:	bc 83       	std	Y+4, r27	; 0x04
		if (reg & 0x80000000) {
    45e6:	89 81       	ldd	r24, Y+1	; 0x01
    45e8:	9a 81       	ldd	r25, Y+2	; 0x02
    45ea:	ab 81       	ldd	r26, Y+3	; 0x03
    45ec:	bc 81       	ldd	r27, Y+4	; 0x04
    45ee:	bb 23       	and	r27, r27
    45f0:	3c f0       	brlt	.+14     	; 0x4600 <wait_for_bootrom+0x72>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    45f2:	61 e0       	ldi	r22, 0x01	; 1
    45f4:	70 e0       	ldi	r23, 0x00	; 0
    45f6:	80 e0       	ldi	r24, 0x00	; 0
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <nm_bsp_sleep>
	}
    45fe:	e7 cf       	rjmp	.-50     	; 0x45ce <wait_for_bootrom+0x40>

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
    4600:	00 00       	nop
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    4602:	6c eb       	ldi	r22, 0xBC	; 188
    4604:	77 e0       	ldi	r23, 0x07	; 7
    4606:	82 e0       	ldi	r24, 0x02	; 2
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	0e 94 c7 24 	call	0x498e	; 0x498e <nm_read_reg>
    460e:	dc 01       	movw	r26, r24
    4610:	cb 01       	movw	r24, r22
    4612:	89 83       	std	Y+1, r24	; 0x01
    4614:	9a 83       	std	Y+2, r25	; 0x02
    4616:	ab 83       	std	Y+3, r26	; 0x03
    4618:	bc 83       	std	Y+4, r27	; 0x04
	reg &= 0x1;
    461a:	89 81       	ldd	r24, Y+1	; 0x01
    461c:	9a 81       	ldd	r25, Y+2	; 0x02
    461e:	ab 81       	ldd	r26, Y+3	; 0x03
    4620:	bc 81       	ldd	r27, Y+4	; 0x04
    4622:	81 70       	andi	r24, 0x01	; 1
    4624:	99 27       	eor	r25, r25
    4626:	aa 27       	eor	r26, r26
    4628:	bb 27       	eor	r27, r27
    462a:	89 83       	std	Y+1, r24	; 0x01
    462c:	9a 83       	std	Y+2, r25	; 0x02
    462e:	ab 83       	std	Y+3, r26	; 0x03
    4630:	bc 83       	std	Y+4, r27	; 0x04

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    4632:	89 81       	ldd	r24, Y+1	; 0x01
    4634:	9a 81       	ldd	r25, Y+2	; 0x02
    4636:	ab 81       	ldd	r26, Y+3	; 0x03
    4638:	bc 81       	ldd	r27, Y+4	; 0x04
    463a:	89 2b       	or	r24, r25
    463c:	8a 2b       	or	r24, r26
    463e:	8b 2b       	or	r24, r27
    4640:	51 f5       	brne	.+84     	; 0x4696 <wait_for_bootrom+0x108>
	{
		reg = 0;
    4642:	19 82       	std	Y+1, r1	; 0x01
    4644:	1a 82       	std	Y+2, r1	; 0x02
    4646:	1b 82       	std	Y+3, r1	; 0x03
    4648:	1c 82       	std	Y+4, r1	; 0x04
		while(reg != M2M_FINISH_BOOT_ROM)
    464a:	1c c0       	rjmp	.+56     	; 0x4684 <wait_for_bootrom+0xf6>
		{
			nm_bsp_sleep(1);
    464c:	61 e0       	ldi	r22, 0x01	; 1
    464e:	70 e0       	ldi	r23, 0x00	; 0
    4650:	80 e0       	ldi	r24, 0x00	; 0
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
    4658:	6c e0       	ldi	r22, 0x0C	; 12
    465a:	70 e0       	ldi	r23, 0x00	; 0
    465c:	cb 01       	movw	r24, r22
    465e:	0e 94 c7 24 	call	0x498e	; 0x498e <nm_read_reg>
    4662:	dc 01       	movw	r26, r24
    4664:	cb 01       	movw	r24, r22
    4666:	89 83       	std	Y+1, r24	; 0x01
    4668:	9a 83       	std	Y+2, r25	; 0x02
    466a:	ab 83       	std	Y+3, r26	; 0x03
    466c:	bc 83       	std	Y+4, r27	; 0x04

			if(++cnt > TIMEOUT)
    466e:	8d 81       	ldd	r24, Y+5	; 0x05
    4670:	9e 81       	ldd	r25, Y+6	; 0x06
    4672:	af 81       	ldd	r26, Y+7	; 0x07
    4674:	b8 85       	ldd	r27, Y+8	; 0x08
    4676:	01 96       	adiw	r24, 0x01	; 1
    4678:	a1 1d       	adc	r26, r1
    467a:	b1 1d       	adc	r27, r1
    467c:	8d 83       	std	Y+5, r24	; 0x05
    467e:	9e 83       	std	Y+6, r25	; 0x06
    4680:	af 83       	std	Y+7, r26	; 0x07
    4682:	b8 87       	std	Y+8, r27	; 0x08

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    4684:	89 81       	ldd	r24, Y+1	; 0x01
    4686:	9a 81       	ldd	r25, Y+2	; 0x02
    4688:	ab 81       	ldd	r26, Y+3	; 0x03
    468a:	bc 81       	ldd	r27, Y+4	; 0x04
    468c:	8e 39       	cpi	r24, 0x9E	; 158
    468e:	90 4d       	sbci	r25, 0xD0	; 208
    4690:	ad 4a       	sbci	r26, 0xAD	; 173
    4692:	b0 41       	sbci	r27, 0x10	; 16
    4694:	d9 f6       	brne	.-74     	; 0x464c <wait_for_bootrom+0xbe>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    4696:	8a 89       	ldd	r24, Y+18	; 0x12
    4698:	82 30       	cpi	r24, 0x02	; 2
    469a:	a9 f4       	brne	.+42     	; 0x46c6 <wait_for_bootrom+0x138>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    469c:	2d e7       	ldi	r18, 0x7D	; 125
    469e:	35 ed       	ldi	r19, 0xD5	; 213
    46a0:	4c e1       	ldi	r20, 0x1C	; 28
    46a2:	5c e3       	ldi	r21, 0x3C	; 60
    46a4:	6c ea       	ldi	r22, 0xAC	; 172
    46a6:	77 e0       	ldi	r23, 0x07	; 7
    46a8:	82 e0       	ldi	r24, 0x02	; 2
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
    46b0:	20 e0       	ldi	r18, 0x00	; 0
    46b2:	30 e0       	ldi	r19, 0x00	; 0
    46b4:	40 e1       	ldi	r20, 0x10	; 16
    46b6:	50 e0       	ldi	r21, 0x00	; 0
    46b8:	6c e8       	ldi	r22, 0x8C	; 140
    46ba:	70 e1       	ldi	r23, 0x10	; 16
    46bc:	80 e0       	ldi	r24, 0x00	; 0
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    46c4:	3b c0       	rjmp	.+118    	; 0x473c <wait_for_bootrom+0x1ae>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    46c6:	8a 89       	ldd	r24, Y+18	; 0x12
    46c8:	83 30       	cpi	r24, 0x03	; 3
    46ca:	a1 f4       	brne	.+40     	; 0x46f4 <wait_for_bootrom+0x166>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    46cc:	2d e7       	ldi	r18, 0x7D	; 125
    46ce:	35 ed       	ldi	r19, 0xD5	; 213
    46d0:	4c e1       	ldi	r20, 0x1C	; 28
    46d2:	5c e3       	ldi	r21, 0x3C	; 60
    46d4:	6c ea       	ldi	r22, 0xAC	; 172
    46d6:	77 e0       	ldi	r23, 0x07	; 7
    46d8:	82 e0       	ldi	r24, 0x02	; 2
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
    46e0:	20 e0       	ldi	r18, 0x00	; 0
    46e2:	30 e0       	ldi	r19, 0x00	; 0
    46e4:	a9 01       	movw	r20, r18
    46e6:	6c e8       	ldi	r22, 0x8C	; 140
    46e8:	70 e1       	ldi	r23, 0x10	; 16
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    46f2:	24 c0       	rjmp	.+72     	; 0x473c <wait_for_bootrom+0x1ae>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    46f4:	8a 89       	ldd	r24, Y+18	; 0x12
    46f6:	84 30       	cpi	r24, 0x04	; 4
    46f8:	a9 f4       	brne	.+42     	; 0x4724 <wait_for_bootrom+0x196>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    46fa:	80 e8       	ldi	r24, 0x80	; 128
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	a0 e0       	ldi	r26, 0x00	; 0
    4700:	b0 e0       	ldi	r27, 0x00	; 0
    4702:	89 87       	std	Y+9, r24	; 0x09
    4704:	9a 87       	std	Y+10, r25	; 0x0a
    4706:	ab 87       	std	Y+11, r26	; 0x0b
    4708:	bc 87       	std	Y+12, r27	; 0x0c
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    470a:	8e 85       	ldd	r24, Y+14	; 0x0e
    470c:	9f 85       	ldd	r25, Y+15	; 0x0f
    470e:	a8 89       	ldd	r26, Y+16	; 0x10
    4710:	b9 89       	ldd	r27, Y+17	; 0x11
    4712:	9c 01       	movw	r18, r24
    4714:	ad 01       	movw	r20, r26
    4716:	6c e8       	ldi	r22, 0x8C	; 140
    4718:	70 e1       	ldi	r23, 0x10	; 16
    471a:	80 e0       	ldi	r24, 0x00	; 0
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    4722:	0c c0       	rjmp	.+24     	; 0x473c <wait_for_bootrom+0x1ae>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    4724:	8e 85       	ldd	r24, Y+14	; 0x0e
    4726:	9f 85       	ldd	r25, Y+15	; 0x0f
    4728:	a8 89       	ldd	r26, Y+16	; 0x10
    472a:	b9 89       	ldd	r27, Y+17	; 0x11
    472c:	9c 01       	movw	r18, r24
    472e:	ad 01       	movw	r20, r26
    4730:	6c e8       	ldi	r22, 0x8C	; 140
    4732:	70 e1       	ldi	r23, 0x10	; 16
    4734:	80 e0       	ldi	r24, 0x00	; 0
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    473c:	0e 94 8d 20 	call	0x411a	; 0x411a <nmi_get_chipid>
    4740:	dc 01       	movw	r26, r24
    4742:	cb 01       	movw	r24, r22
    4744:	9f 70       	andi	r25, 0x0F	; 15
    4746:	aa 27       	eor	r26, r26
    4748:	bb 27       	eor	r27, r27
    474a:	80 3a       	cpi	r24, 0xA0	; 160
    474c:	93 40       	sbci	r25, 0x03	; 3
    474e:	a1 05       	cpc	r26, r1
    4750:	b1 05       	cpc	r27, r1
    4752:	50 f0       	brcs	.+20     	; 0x4768 <wait_for_bootrom+0x1da>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    4754:	89 85       	ldd	r24, Y+9	; 0x09
    4756:	9a 85       	ldd	r25, Y+10	; 0x0a
    4758:	ab 85       	ldd	r26, Y+11	; 0x0b
    475a:	bc 85       	ldd	r27, Y+12	; 0x0c
    475c:	82 60       	ori	r24, 0x02	; 2
    475e:	bc 01       	movw	r22, r24
    4760:	cd 01       	movw	r24, r26
    4762:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <chip_apply_conf>
    4766:	08 c0       	rjmp	.+16     	; 0x4778 <wait_for_bootrom+0x1ea>
	} else {
		chip_apply_conf(u32GpReg1);
    4768:	89 85       	ldd	r24, Y+9	; 0x09
    476a:	9a 85       	ldd	r25, Y+10	; 0x0a
    476c:	ab 85       	ldd	r26, Y+11	; 0x0b
    476e:	bc 85       	ldd	r27, Y+12	; 0x0c
    4770:	bc 01       	movw	r22, r24
    4772:	cd 01       	movw	r24, r26
    4774:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    4778:	21 e6       	ldi	r18, 0x61	; 97
    477a:	3f e2       	ldi	r19, 0x2F	; 47
    477c:	42 e5       	ldi	r20, 0x52	; 82
    477e:	5f ee       	ldi	r21, 0xEF	; 239
    4780:	6c e0       	ldi	r22, 0x0C	; 12
    4782:	70 e0       	ldi	r23, 0x00	; 0
    4784:	cb 01       	movw	r24, r22
    4786:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    478a:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    478c:	62 96       	adiw	r28, 0x12	; 18
    478e:	cd bf       	out	0x3d, r28	; 61
    4790:	de bf       	out	0x3e, r29	; 62
    4792:	df 91       	pop	r29
    4794:	cf 91       	pop	r28
    4796:	08 95       	ret

00004798 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    4798:	cf 93       	push	r28
    479a:	df 93       	push	r29
    479c:	cd b7       	in	r28, 0x3d	; 61
    479e:	de b7       	in	r29, 0x3e	; 62
    47a0:	66 97       	sbiw	r28, 0x16	; 22
    47a2:	cd bf       	out	0x3d, r28	; 61
    47a4:	de bf       	out	0x3e, r29	; 62
    47a6:	8e 8b       	std	Y+22, r24	; 0x16
	sint8 ret = M2M_SUCCESS;
    47a8:	19 82       	std	Y+1, r1	; 0x01
	uint32 reg = 0, cnt = 0;
    47aa:	1a 82       	std	Y+2, r1	; 0x02
    47ac:	1b 82       	std	Y+3, r1	; 0x03
    47ae:	1c 82       	std	Y+4, r1	; 0x04
    47b0:	1d 82       	std	Y+5, r1	; 0x05
    47b2:	1e 82       	std	Y+6, r1	; 0x06
    47b4:	1f 82       	std	Y+7, r1	; 0x07
    47b6:	18 86       	std	Y+8, r1	; 0x08
    47b8:	19 86       	std	Y+9, r1	; 0x09
	uint32 u32Timeout = TIMEOUT;
    47ba:	8f ef       	ldi	r24, 0xFF	; 255
    47bc:	9f ef       	ldi	r25, 0xFF	; 255
    47be:	dc 01       	movw	r26, r24
    47c0:	8a 87       	std	Y+10, r24	; 0x0a
    47c2:	9b 87       	std	Y+11, r25	; 0x0b
    47c4:	ac 87       	std	Y+12, r26	; 0x0c
    47c6:	bd 87       	std	Y+13, r27	; 0x0d
	volatile uint32 regAddress = NMI_STATE_REG;
    47c8:	8c e8       	ldi	r24, 0x8C	; 140
    47ca:	90 e1       	ldi	r25, 0x10	; 16
    47cc:	a0 e0       	ldi	r26, 0x00	; 0
    47ce:	b0 e0       	ldi	r27, 0x00	; 0
    47d0:	8e 87       	std	Y+14, r24	; 0x0e
    47d2:	9f 87       	std	Y+15, r25	; 0x0f
    47d4:	a8 8b       	std	Y+16, r26	; 0x10
    47d6:	b9 8b       	std	Y+17, r27	; 0x11
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    47d8:	86 e3       	ldi	r24, 0x36	; 54
    47da:	96 e2       	ldi	r25, 0x26	; 38
    47dc:	a3 e5       	ldi	r26, 0x53	; 83
    47de:	b2 e0       	ldi	r27, 0x02	; 2
    47e0:	8a 8b       	std	Y+18, r24	; 0x12
    47e2:	9b 8b       	std	Y+19, r25	; 0x13
    47e4:	ac 8b       	std	Y+20, r26	; 0x14
    47e6:	bd 8b       	std	Y+21, r27	; 0x15
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    47e8:	8e 89       	ldd	r24, Y+22	; 0x16
    47ea:	82 30       	cpi	r24, 0x02	; 2
    47ec:	21 f0       	breq	.+8      	; 0x47f6 <wait_for_firmware_start+0x5e>
    47ee:	8e 89       	ldd	r24, Y+22	; 0x16
    47f0:	83 30       	cpi	r24, 0x03	; 3
    47f2:	09 f0       	breq	.+2      	; 0x47f6 <wait_for_firmware_start+0x5e>
    47f4:	40 c0       	rjmp	.+128    	; 0x4876 <wait_for_firmware_start+0xde>
		regAddress = NMI_REV_REG;
    47f6:	8c ea       	ldi	r24, 0xAC	; 172
    47f8:	97 e0       	ldi	r25, 0x07	; 7
    47fa:	a2 e0       	ldi	r26, 0x02	; 2
    47fc:	b0 e0       	ldi	r27, 0x00	; 0
    47fe:	8e 87       	std	Y+14, r24	; 0x0e
    4800:	9f 87       	std	Y+15, r25	; 0x0f
    4802:	a8 8b       	std	Y+16, r26	; 0x10
    4804:	b9 8b       	std	Y+17, r27	; 0x11
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    4806:	83 ec       	ldi	r24, 0xC3	; 195
    4808:	91 ec       	ldi	r25, 0xC1	; 193
    480a:	ad e5       	ldi	r26, 0x5D	; 93
    480c:	b7 ed       	ldi	r27, 0xD7	; 215
    480e:	8a 8b       	std	Y+18, r24	; 0x12
    4810:	9b 8b       	std	Y+19, r25	; 0x13
    4812:	ac 8b       	std	Y+20, r26	; 0x14
    4814:	bd 8b       	std	Y+21, r27	; 0x15
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    4816:	2f c0       	rjmp	.+94     	; 0x4876 <wait_for_firmware_start+0xde>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    4818:	62 e0       	ldi	r22, 0x02	; 2
    481a:	70 e0       	ldi	r23, 0x00	; 0
    481c:	80 e0       	ldi	r24, 0x00	; 0
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    4824:	8e 85       	ldd	r24, Y+14	; 0x0e
    4826:	9f 85       	ldd	r25, Y+15	; 0x0f
    4828:	a8 89       	ldd	r26, Y+16	; 0x10
    482a:	b9 89       	ldd	r27, Y+17	; 0x11
    482c:	bc 01       	movw	r22, r24
    482e:	cd 01       	movw	r24, r26
    4830:	0e 94 c7 24 	call	0x498e	; 0x498e <nm_read_reg>
    4834:	dc 01       	movw	r26, r24
    4836:	cb 01       	movw	r24, r22
    4838:	8a 83       	std	Y+2, r24	; 0x02
    483a:	9b 83       	std	Y+3, r25	; 0x03
    483c:	ac 83       	std	Y+4, r26	; 0x04
    483e:	bd 83       	std	Y+5, r27	; 0x05
		if(++cnt >= u32Timeout)
    4840:	8e 81       	ldd	r24, Y+6	; 0x06
    4842:	9f 81       	ldd	r25, Y+7	; 0x07
    4844:	a8 85       	ldd	r26, Y+8	; 0x08
    4846:	b9 85       	ldd	r27, Y+9	; 0x09
    4848:	01 96       	adiw	r24, 0x01	; 1
    484a:	a1 1d       	adc	r26, r1
    484c:	b1 1d       	adc	r27, r1
    484e:	8e 83       	std	Y+6, r24	; 0x06
    4850:	9f 83       	std	Y+7, r25	; 0x07
    4852:	a8 87       	std	Y+8, r26	; 0x08
    4854:	b9 87       	std	Y+9, r27	; 0x09
    4856:	2e 81       	ldd	r18, Y+6	; 0x06
    4858:	3f 81       	ldd	r19, Y+7	; 0x07
    485a:	48 85       	ldd	r20, Y+8	; 0x08
    485c:	59 85       	ldd	r21, Y+9	; 0x09
    485e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4860:	9b 85       	ldd	r25, Y+11	; 0x0b
    4862:	ac 85       	ldd	r26, Y+12	; 0x0c
    4864:	bd 85       	ldd	r27, Y+13	; 0x0d
    4866:	28 17       	cp	r18, r24
    4868:	39 07       	cpc	r19, r25
    486a:	4a 07       	cpc	r20, r26
    486c:	5b 07       	cpc	r21, r27
    486e:	18 f0       	brcs	.+6      	; 0x4876 <wait_for_firmware_start+0xde>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    4870:	8b ef       	ldi	r24, 0xFB	; 251
    4872:	89 83       	std	Y+1, r24	; 0x01
			goto ERR;
    4874:	1f c0       	rjmp	.+62     	; 0x48b4 <wait_for_firmware_start+0x11c>
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    4876:	2a 89       	ldd	r18, Y+18	; 0x12
    4878:	3b 89       	ldd	r19, Y+19	; 0x13
    487a:	4c 89       	ldd	r20, Y+20	; 0x14
    487c:	5d 89       	ldd	r21, Y+21	; 0x15
    487e:	8a 81       	ldd	r24, Y+2	; 0x02
    4880:	9b 81       	ldd	r25, Y+3	; 0x03
    4882:	ac 81       	ldd	r26, Y+4	; 0x04
    4884:	bd 81       	ldd	r27, Y+5	; 0x05
    4886:	28 17       	cp	r18, r24
    4888:	39 07       	cpc	r19, r25
    488a:	4a 07       	cpc	r20, r26
    488c:	5b 07       	cpc	r21, r27
    488e:	21 f6       	brne	.-120    	; 0x4818 <wait_for_firmware_start+0x80>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    4890:	8a 89       	ldd	r24, Y+18	; 0x12
    4892:	9b 89       	ldd	r25, Y+19	; 0x13
    4894:	ac 89       	ldd	r26, Y+20	; 0x14
    4896:	bd 89       	ldd	r27, Y+21	; 0x15
    4898:	86 33       	cpi	r24, 0x36	; 54
    489a:	96 42       	sbci	r25, 0x26	; 38
    489c:	a3 45       	sbci	r26, 0x53	; 83
    489e:	b2 40       	sbci	r27, 0x02	; 2
    48a0:	49 f4       	brne	.+18     	; 0x48b4 <wait_for_firmware_start+0x11c>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    48a2:	20 e0       	ldi	r18, 0x00	; 0
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	a9 01       	movw	r20, r18
    48a8:	6c e8       	ldi	r22, 0x8C	; 140
    48aa:	70 e1       	ldi	r23, 0x10	; 16
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
	}
ERR:
	return ret;
    48b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    48b6:	66 96       	adiw	r28, 0x16	; 22
    48b8:	cd bf       	out	0x3d, r28	; 61
    48ba:	de bf       	out	0x3e, r29	; 62
    48bc:	df 91       	pop	r29
    48be:	cf 91       	pop	r28
    48c0:	08 95       	ret

000048c2 <chip_deinit>:

sint8 chip_deinit(void)
{
    48c2:	cf 93       	push	r28
    48c4:	df 93       	push	r29
    48c6:	cd b7       	in	r28, 0x3d	; 61
    48c8:	de b7       	in	r29, 0x3e	; 62
    48ca:	25 97       	sbiw	r28, 0x05	; 5
    48cc:	cd bf       	out	0x3d, r28	; 61
    48ce:	de bf       	out	0x3e, r29	; 62
	uint32 reg = 0;
    48d0:	1a 82       	std	Y+2, r1	; 0x02
    48d2:	1b 82       	std	Y+3, r1	; 0x03
    48d4:	1c 82       	std	Y+4, r1	; 0x04
    48d6:	1d 82       	std	Y+5, r1	; 0x05
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    48d8:	ce 01       	movw	r24, r28
    48da:	02 96       	adiw	r24, 0x02	; 2
    48dc:	ac 01       	movw	r20, r24
    48de:	60 e0       	ldi	r22, 0x00	; 0
    48e0:	74 e1       	ldi	r23, 0x14	; 20
    48e2:	80 e0       	ldi	r24, 0x00	; 0
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    48ea:	89 83       	std	Y+1, r24	; 0x01
	if (ret != M2M_SUCCESS) {
    48ec:	89 81       	ldd	r24, Y+1	; 0x01
    48ee:	88 23       	and	r24, r24
    48f0:	b9 f4       	brne	.+46     	; 0x4920 <chip_deinit+0x5e>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    48f2:	8a 81       	ldd	r24, Y+2	; 0x02
    48f4:	9b 81       	ldd	r25, Y+3	; 0x03
    48f6:	ac 81       	ldd	r26, Y+4	; 0x04
    48f8:	bd 81       	ldd	r27, Y+5	; 0x05
    48fa:	9b 7f       	andi	r25, 0xFB	; 251
    48fc:	8a 83       	std	Y+2, r24	; 0x02
    48fe:	9b 83       	std	Y+3, r25	; 0x03
    4900:	ac 83       	std	Y+4, r26	; 0x04
    4902:	bd 83       	std	Y+5, r27	; 0x05
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    4904:	8a 81       	ldd	r24, Y+2	; 0x02
    4906:	9b 81       	ldd	r25, Y+3	; 0x03
    4908:	ac 81       	ldd	r26, Y+4	; 0x04
    490a:	bd 81       	ldd	r27, Y+5	; 0x05
    490c:	9c 01       	movw	r18, r24
    490e:	ad 01       	movw	r20, r26
    4910:	60 e0       	ldi	r22, 0x00	; 0
    4912:	74 e1       	ldi	r23, 0x14	; 20
    4914:	80 e0       	ldi	r24, 0x00	; 0
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    491c:	89 83       	std	Y+1, r24	; 0x01
    491e:	01 c0       	rjmp	.+2      	; 0x4922 <chip_deinit+0x60>
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
	if (ret != M2M_SUCCESS) {
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
    4920:	00 00       	nop
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}

ERR1:
	return ret;
    4922:	89 81       	ldd	r24, Y+1	; 0x01
}
    4924:	25 96       	adiw	r28, 0x05	; 5
    4926:	cd bf       	out	0x3d, r28	; 61
    4928:	de bf       	out	0x3e, r29	; 62
    492a:	df 91       	pop	r29
    492c:	cf 91       	pop	r28
    492e:	08 95       	ret

00004930 <nm_bus_iface_init>:
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
	ret = nm_uart_reconfigure(ptr);
#endif
	return ret;
}
    4930:	cf 93       	push	r28
    4932:	df 93       	push	r29
    4934:	00 d0       	rcall	.+0      	; 0x4936 <nm_bus_iface_init+0x6>
    4936:	1f 92       	push	r1
    4938:	cd b7       	in	r28, 0x3d	; 61
    493a:	de b7       	in	r29, 0x3e	; 62
    493c:	8a 83       	std	Y+2, r24	; 0x02
    493e:	9b 83       	std	Y+3, r25	; 0x03
    4940:	19 82       	std	Y+1, r1	; 0x01
    4942:	8a 81       	ldd	r24, Y+2	; 0x02
    4944:	9b 81       	ldd	r25, Y+3	; 0x03
    4946:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <nm_bus_init>
    494a:	89 83       	std	Y+1, r24	; 0x01
    494c:	89 81       	ldd	r24, Y+1	; 0x01
    494e:	23 96       	adiw	r28, 0x03	; 3
    4950:	cd bf       	out	0x3d, r28	; 61
    4952:	de bf       	out	0x3e, r29	; 62
    4954:	df 91       	pop	r29
    4956:	cf 91       	pop	r28
    4958:	08 95       	ret

0000495a <nm_bus_iface_deinit>:
    495a:	cf 93       	push	r28
    495c:	df 93       	push	r29
    495e:	1f 92       	push	r1
    4960:	cd b7       	in	r28, 0x3d	; 61
    4962:	de b7       	in	r29, 0x3e	; 62
    4964:	19 82       	std	Y+1, r1	; 0x01
    4966:	0e 94 5e 14 	call	0x28bc	; 0x28bc <nm_bus_deinit>
    496a:	89 83       	std	Y+1, r24	; 0x01
    496c:	89 81       	ldd	r24, Y+1	; 0x01
    496e:	0f 90       	pop	r0
    4970:	df 91       	pop	r29
    4972:	cf 91       	pop	r28
    4974:	08 95       	ret

00004976 <nm_bus_reset>:
    4976:	cf 93       	push	r28
    4978:	df 93       	push	r29
    497a:	1f 92       	push	r1
    497c:	cd b7       	in	r28, 0x3d	; 61
    497e:	de b7       	in	r29, 0x3e	; 62
    4980:	19 82       	std	Y+1, r1	; 0x01
    4982:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <nm_spi_reset>
    4986:	0f 90       	pop	r0
    4988:	df 91       	pop	r29
    498a:	cf 91       	pop	r28
    498c:	08 95       	ret

0000498e <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    498e:	cf 93       	push	r28
    4990:	df 93       	push	r29
    4992:	00 d0       	rcall	.+0      	; 0x4994 <nm_read_reg+0x6>
    4994:	00 d0       	rcall	.+0      	; 0x4996 <nm_read_reg+0x8>
    4996:	cd b7       	in	r28, 0x3d	; 61
    4998:	de b7       	in	r29, 0x3e	; 62
    499a:	69 83       	std	Y+1, r22	; 0x01
    499c:	7a 83       	std	Y+2, r23	; 0x02
    499e:	8b 83       	std	Y+3, r24	; 0x03
    49a0:	9c 83       	std	Y+4, r25	; 0x04
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    49a2:	89 81       	ldd	r24, Y+1	; 0x01
    49a4:	9a 81       	ldd	r25, Y+2	; 0x02
    49a6:	ab 81       	ldd	r26, Y+3	; 0x03
    49a8:	bc 81       	ldd	r27, Y+4	; 0x04
    49aa:	bc 01       	movw	r22, r24
    49ac:	cd 01       	movw	r24, r26
    49ae:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <nm_spi_read_reg>
    49b2:	dc 01       	movw	r26, r24
    49b4:	cb 01       	movw	r24, r22
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    49b6:	bc 01       	movw	r22, r24
    49b8:	cd 01       	movw	r24, r26
    49ba:	24 96       	adiw	r28, 0x04	; 4
    49bc:	cd bf       	out	0x3d, r28	; 61
    49be:	de bf       	out	0x3e, r29	; 62
    49c0:	df 91       	pop	r29
    49c2:	cf 91       	pop	r28
    49c4:	08 95       	ret

000049c6 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    49c6:	cf 93       	push	r28
    49c8:	df 93       	push	r29
    49ca:	cd b7       	in	r28, 0x3d	; 61
    49cc:	de b7       	in	r29, 0x3e	; 62
    49ce:	26 97       	sbiw	r28, 0x06	; 6
    49d0:	cd bf       	out	0x3d, r28	; 61
    49d2:	de bf       	out	0x3e, r29	; 62
    49d4:	69 83       	std	Y+1, r22	; 0x01
    49d6:	7a 83       	std	Y+2, r23	; 0x02
    49d8:	8b 83       	std	Y+3, r24	; 0x03
    49da:	9c 83       	std	Y+4, r25	; 0x04
    49dc:	4d 83       	std	Y+5, r20	; 0x05
    49de:	5e 83       	std	Y+6, r21	; 0x06
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    49e0:	2d 81       	ldd	r18, Y+5	; 0x05
    49e2:	3e 81       	ldd	r19, Y+6	; 0x06
    49e4:	89 81       	ldd	r24, Y+1	; 0x01
    49e6:	9a 81       	ldd	r25, Y+2	; 0x02
    49e8:	ab 81       	ldd	r26, Y+3	; 0x03
    49ea:	bc 81       	ldd	r27, Y+4	; 0x04
    49ec:	a9 01       	movw	r20, r18
    49ee:	bc 01       	movw	r22, r24
    49f0:	cd 01       	movw	r24, r26
    49f2:	0e 94 22 2f 	call	0x5e44	; 0x5e44 <nm_spi_read_reg_with_ret>
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    49f6:	26 96       	adiw	r28, 0x06	; 6
    49f8:	cd bf       	out	0x3d, r28	; 61
    49fa:	de bf       	out	0x3e, r29	; 62
    49fc:	df 91       	pop	r29
    49fe:	cf 91       	pop	r28
    4a00:	08 95       	ret

00004a02 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    4a02:	cf 93       	push	r28
    4a04:	df 93       	push	r29
    4a06:	cd b7       	in	r28, 0x3d	; 61
    4a08:	de b7       	in	r29, 0x3e	; 62
    4a0a:	28 97       	sbiw	r28, 0x08	; 8
    4a0c:	cd bf       	out	0x3d, r28	; 61
    4a0e:	de bf       	out	0x3e, r29	; 62
    4a10:	69 83       	std	Y+1, r22	; 0x01
    4a12:	7a 83       	std	Y+2, r23	; 0x02
    4a14:	8b 83       	std	Y+3, r24	; 0x03
    4a16:	9c 83       	std	Y+4, r25	; 0x04
    4a18:	2d 83       	std	Y+5, r18	; 0x05
    4a1a:	3e 83       	std	Y+6, r19	; 0x06
    4a1c:	4f 83       	std	Y+7, r20	; 0x07
    4a1e:	58 87       	std	Y+8, r21	; 0x08
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    4a20:	2d 81       	ldd	r18, Y+5	; 0x05
    4a22:	3e 81       	ldd	r19, Y+6	; 0x06
    4a24:	4f 81       	ldd	r20, Y+7	; 0x07
    4a26:	58 85       	ldd	r21, Y+8	; 0x08
    4a28:	89 81       	ldd	r24, Y+1	; 0x01
    4a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a2c:	ab 81       	ldd	r26, Y+3	; 0x03
    4a2e:	bc 81       	ldd	r27, Y+4	; 0x04
    4a30:	bc 01       	movw	r22, r24
    4a32:	cd 01       	movw	r24, r26
    4a34:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <nm_spi_write_reg>
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    4a38:	28 96       	adiw	r28, 0x08	; 8
    4a3a:	cd bf       	out	0x3d, r28	; 61
    4a3c:	de bf       	out	0x3e, r29	; 62
    4a3e:	df 91       	pop	r29
    4a40:	cf 91       	pop	r28
    4a42:	08 95       	ret

00004a44 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4a44:	cf 93       	push	r28
    4a46:	df 93       	push	r29
    4a48:	cd b7       	in	r28, 0x3d	; 61
    4a4a:	de b7       	in	r29, 0x3e	; 62
    4a4c:	28 97       	sbiw	r28, 0x08	; 8
    4a4e:	cd bf       	out	0x3d, r28	; 61
    4a50:	de bf       	out	0x3e, r29	; 62
    4a52:	69 83       	std	Y+1, r22	; 0x01
    4a54:	7a 83       	std	Y+2, r23	; 0x02
    4a56:	8b 83       	std	Y+3, r24	; 0x03
    4a58:	9c 83       	std	Y+4, r25	; 0x04
    4a5a:	4d 83       	std	Y+5, r20	; 0x05
    4a5c:	5e 83       	std	Y+6, r21	; 0x06
    4a5e:	2f 83       	std	Y+7, r18	; 0x07
    4a60:	38 87       	std	Y+8, r19	; 0x08
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    4a62:	2f 81       	ldd	r18, Y+7	; 0x07
    4a64:	38 85       	ldd	r19, Y+8	; 0x08
    4a66:	4d 81       	ldd	r20, Y+5	; 0x05
    4a68:	5e 81       	ldd	r21, Y+6	; 0x06
    4a6a:	89 81       	ldd	r24, Y+1	; 0x01
    4a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a6e:	ab 81       	ldd	r26, Y+3	; 0x03
    4a70:	bc 81       	ldd	r27, Y+4	; 0x04
    4a72:	bc 01       	movw	r22, r24
    4a74:	cd 01       	movw	r24, r26
    4a76:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <nm_spi_read_block>
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    4a7a:	28 96       	adiw	r28, 0x08	; 8
    4a7c:	cd bf       	out	0x3d, r28	; 61
    4a7e:	de bf       	out	0x3e, r29	; 62
    4a80:	df 91       	pop	r29
    4a82:	cf 91       	pop	r28
    4a84:	08 95       	ret

00004a86 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    4a86:	ef 92       	push	r14
    4a88:	ff 92       	push	r15
    4a8a:	0f 93       	push	r16
    4a8c:	1f 93       	push	r17
    4a8e:	cf 93       	push	r28
    4a90:	df 93       	push	r29
    4a92:	cd b7       	in	r28, 0x3d	; 61
    4a94:	de b7       	in	r29, 0x3e	; 62
    4a96:	61 97       	sbiw	r28, 0x11	; 17
    4a98:	cd bf       	out	0x3d, r28	; 61
    4a9a:	de bf       	out	0x3e, r29	; 62
    4a9c:	68 87       	std	Y+8, r22	; 0x08
    4a9e:	79 87       	std	Y+9, r23	; 0x09
    4aa0:	8a 87       	std	Y+10, r24	; 0x0a
    4aa2:	9b 87       	std	Y+11, r25	; 0x0b
    4aa4:	4c 87       	std	Y+12, r20	; 0x0c
    4aa6:	5d 87       	std	Y+13, r21	; 0x0d
    4aa8:	0e 87       	std	Y+14, r16	; 0x0e
    4aaa:	1f 87       	std	Y+15, r17	; 0x0f
    4aac:	28 8b       	std	Y+16, r18	; 0x10
    4aae:	39 8b       	std	Y+17, r19	; 0x11
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    4ab0:	80 91 3e 2a 	lds	r24, 0x2A3E	; 0x802a3e <egstrNmBusCapabilities>
    4ab4:	90 91 3f 2a 	lds	r25, 0x2A3F	; 0x802a3f <egstrNmBusCapabilities+0x1>
    4ab8:	08 97       	sbiw	r24, 0x08	; 8
    4aba:	8e 83       	std	Y+6, r24	; 0x06
    4abc:	9f 83       	std	Y+7, r25	; 0x07
	uint32 off = 0;
    4abe:	19 82       	std	Y+1, r1	; 0x01
    4ac0:	1a 82       	std	Y+2, r1	; 0x02
    4ac2:	1b 82       	std	Y+3, r1	; 0x03
    4ac4:	1c 82       	std	Y+4, r1	; 0x04
	sint8 s8Ret = M2M_SUCCESS;
    4ac6:	1d 82       	std	Y+5, r1	; 0x05

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    4ac8:	8e 81       	ldd	r24, Y+6	; 0x06
    4aca:	9f 81       	ldd	r25, Y+7	; 0x07
    4acc:	9c 01       	movw	r18, r24
    4ace:	40 e0       	ldi	r20, 0x00	; 0
    4ad0:	50 e0       	ldi	r21, 0x00	; 0
    4ad2:	8e 85       	ldd	r24, Y+14	; 0x0e
    4ad4:	9f 85       	ldd	r25, Y+15	; 0x0f
    4ad6:	a8 89       	ldd	r26, Y+16	; 0x10
    4ad8:	b9 89       	ldd	r27, Y+17	; 0x11
    4ada:	28 17       	cp	r18, r24
    4adc:	39 07       	cpc	r19, r25
    4ade:	4a 07       	cpc	r20, r26
    4ae0:	5b 07       	cpc	r21, r27
    4ae2:	b8 f0       	brcs	.+46     	; 0x4b12 <nm_read_block+0x8c>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    4ae4:	6e 85       	ldd	r22, Y+14	; 0x0e
    4ae6:	7f 85       	ldd	r23, Y+15	; 0x0f
    4ae8:	89 81       	ldd	r24, Y+1	; 0x01
    4aea:	9a 81       	ldd	r25, Y+2	; 0x02
    4aec:	2c 85       	ldd	r18, Y+12	; 0x0c
    4aee:	3d 85       	ldd	r19, Y+13	; 0x0d
    4af0:	a9 01       	movw	r20, r18
    4af2:	48 0f       	add	r20, r24
    4af4:	59 1f       	adc	r21, r25
    4af6:	88 85       	ldd	r24, Y+8	; 0x08
    4af8:	99 85       	ldd	r25, Y+9	; 0x09
    4afa:	aa 85       	ldd	r26, Y+10	; 0x0a
    4afc:	bb 85       	ldd	r27, Y+11	; 0x0b
    4afe:	9b 01       	movw	r18, r22
    4b00:	bc 01       	movw	r22, r24
    4b02:	cd 01       	movw	r24, r26
    4b04:	0e 94 22 25 	call	0x4a44	; 0x4a44 <p_nm_read_block>
    4b08:	98 2f       	mov	r25, r24
    4b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b0c:	89 0f       	add	r24, r25
    4b0e:	8d 83       	std	Y+5, r24	; 0x05
			break;
    4b10:	51 c0       	rjmp	.+162    	; 0x4bb4 <nm_read_block+0x12e>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    4b12:	89 81       	ldd	r24, Y+1	; 0x01
    4b14:	9a 81       	ldd	r25, Y+2	; 0x02
    4b16:	2c 85       	ldd	r18, Y+12	; 0x0c
    4b18:	3d 85       	ldd	r19, Y+13	; 0x0d
    4b1a:	a9 01       	movw	r20, r18
    4b1c:	48 0f       	add	r20, r24
    4b1e:	59 1f       	adc	r21, r25
    4b20:	2e 81       	ldd	r18, Y+6	; 0x06
    4b22:	3f 81       	ldd	r19, Y+7	; 0x07
    4b24:	88 85       	ldd	r24, Y+8	; 0x08
    4b26:	99 85       	ldd	r25, Y+9	; 0x09
    4b28:	aa 85       	ldd	r26, Y+10	; 0x0a
    4b2a:	bb 85       	ldd	r27, Y+11	; 0x0b
    4b2c:	bc 01       	movw	r22, r24
    4b2e:	cd 01       	movw	r24, r26
    4b30:	0e 94 22 25 	call	0x4a44	; 0x4a44 <p_nm_read_block>
    4b34:	98 2f       	mov	r25, r24
    4b36:	8d 81       	ldd	r24, Y+5	; 0x05
    4b38:	89 0f       	add	r24, r25
    4b3a:	8d 83       	std	Y+5, r24	; 0x05
			if(M2M_SUCCESS != s8Ret) break;
    4b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b3e:	88 23       	and	r24, r24
    4b40:	c1 f5       	brne	.+112    	; 0x4bb2 <nm_read_block+0x12c>
			u32Sz -= u16MaxTrxSz;
    4b42:	8e 81       	ldd	r24, Y+6	; 0x06
    4b44:	9f 81       	ldd	r25, Y+7	; 0x07
    4b46:	cc 01       	movw	r24, r24
    4b48:	a0 e0       	ldi	r26, 0x00	; 0
    4b4a:	b0 e0       	ldi	r27, 0x00	; 0
    4b4c:	2e 85       	ldd	r18, Y+14	; 0x0e
    4b4e:	3f 85       	ldd	r19, Y+15	; 0x0f
    4b50:	48 89       	ldd	r20, Y+16	; 0x10
    4b52:	59 89       	ldd	r21, Y+17	; 0x11
    4b54:	79 01       	movw	r14, r18
    4b56:	8a 01       	movw	r16, r20
    4b58:	e8 1a       	sub	r14, r24
    4b5a:	f9 0a       	sbc	r15, r25
    4b5c:	0a 0b       	sbc	r16, r26
    4b5e:	1b 0b       	sbc	r17, r27
    4b60:	d8 01       	movw	r26, r16
    4b62:	c7 01       	movw	r24, r14
    4b64:	8e 87       	std	Y+14, r24	; 0x0e
    4b66:	9f 87       	std	Y+15, r25	; 0x0f
    4b68:	a8 8b       	std	Y+16, r26	; 0x10
    4b6a:	b9 8b       	std	Y+17, r27	; 0x11
			off += u16MaxTrxSz;
    4b6c:	8e 81       	ldd	r24, Y+6	; 0x06
    4b6e:	9f 81       	ldd	r25, Y+7	; 0x07
    4b70:	cc 01       	movw	r24, r24
    4b72:	a0 e0       	ldi	r26, 0x00	; 0
    4b74:	b0 e0       	ldi	r27, 0x00	; 0
    4b76:	29 81       	ldd	r18, Y+1	; 0x01
    4b78:	3a 81       	ldd	r19, Y+2	; 0x02
    4b7a:	4b 81       	ldd	r20, Y+3	; 0x03
    4b7c:	5c 81       	ldd	r21, Y+4	; 0x04
    4b7e:	82 0f       	add	r24, r18
    4b80:	93 1f       	adc	r25, r19
    4b82:	a4 1f       	adc	r26, r20
    4b84:	b5 1f       	adc	r27, r21
    4b86:	89 83       	std	Y+1, r24	; 0x01
    4b88:	9a 83       	std	Y+2, r25	; 0x02
    4b8a:	ab 83       	std	Y+3, r26	; 0x03
    4b8c:	bc 83       	std	Y+4, r27	; 0x04
			u32Addr += u16MaxTrxSz;
    4b8e:	8e 81       	ldd	r24, Y+6	; 0x06
    4b90:	9f 81       	ldd	r25, Y+7	; 0x07
    4b92:	cc 01       	movw	r24, r24
    4b94:	a0 e0       	ldi	r26, 0x00	; 0
    4b96:	b0 e0       	ldi	r27, 0x00	; 0
    4b98:	28 85       	ldd	r18, Y+8	; 0x08
    4b9a:	39 85       	ldd	r19, Y+9	; 0x09
    4b9c:	4a 85       	ldd	r20, Y+10	; 0x0a
    4b9e:	5b 85       	ldd	r21, Y+11	; 0x0b
    4ba0:	82 0f       	add	r24, r18
    4ba2:	93 1f       	adc	r25, r19
    4ba4:	a4 1f       	adc	r26, r20
    4ba6:	b5 1f       	adc	r27, r21
    4ba8:	88 87       	std	Y+8, r24	; 0x08
    4baa:	99 87       	std	Y+9, r25	; 0x09
    4bac:	aa 87       	std	Y+10, r26	; 0x0a
    4bae:	bb 87       	std	Y+11, r27	; 0x0b
		}
	}
    4bb0:	8b cf       	rjmp	.-234    	; 0x4ac8 <nm_read_block+0x42>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    4bb2:	00 00       	nop
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    4bb4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4bb6:	61 96       	adiw	r28, 0x11	; 17
    4bb8:	cd bf       	out	0x3d, r28	; 61
    4bba:	de bf       	out	0x3e, r29	; 62
    4bbc:	df 91       	pop	r29
    4bbe:	cf 91       	pop	r28
    4bc0:	1f 91       	pop	r17
    4bc2:	0f 91       	pop	r16
    4bc4:	ff 90       	pop	r15
    4bc6:	ef 90       	pop	r14
    4bc8:	08 95       	ret

00004bca <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4bca:	cf 93       	push	r28
    4bcc:	df 93       	push	r29
    4bce:	cd b7       	in	r28, 0x3d	; 61
    4bd0:	de b7       	in	r29, 0x3e	; 62
    4bd2:	28 97       	sbiw	r28, 0x08	; 8
    4bd4:	cd bf       	out	0x3d, r28	; 61
    4bd6:	de bf       	out	0x3e, r29	; 62
    4bd8:	69 83       	std	Y+1, r22	; 0x01
    4bda:	7a 83       	std	Y+2, r23	; 0x02
    4bdc:	8b 83       	std	Y+3, r24	; 0x03
    4bde:	9c 83       	std	Y+4, r25	; 0x04
    4be0:	4d 83       	std	Y+5, r20	; 0x05
    4be2:	5e 83       	std	Y+6, r21	; 0x06
    4be4:	2f 83       	std	Y+7, r18	; 0x07
    4be6:	38 87       	std	Y+8, r19	; 0x08
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    4be8:	2f 81       	ldd	r18, Y+7	; 0x07
    4bea:	38 85       	ldd	r19, Y+8	; 0x08
    4bec:	4d 81       	ldd	r20, Y+5	; 0x05
    4bee:	5e 81       	ldd	r21, Y+6	; 0x06
    4bf0:	89 81       	ldd	r24, Y+1	; 0x01
    4bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    4bf4:	ab 81       	ldd	r26, Y+3	; 0x03
    4bf6:	bc 81       	ldd	r27, Y+4	; 0x04
    4bf8:	bc 01       	movw	r22, r24
    4bfa:	cd 01       	movw	r24, r26
    4bfc:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <nm_spi_write_block>
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    4c00:	28 96       	adiw	r28, 0x08	; 8
    4c02:	cd bf       	out	0x3d, r28	; 61
    4c04:	de bf       	out	0x3e, r29	; 62
    4c06:	df 91       	pop	r29
    4c08:	cf 91       	pop	r28
    4c0a:	08 95       	ret

00004c0c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    4c0c:	ef 92       	push	r14
    4c0e:	ff 92       	push	r15
    4c10:	0f 93       	push	r16
    4c12:	1f 93       	push	r17
    4c14:	cf 93       	push	r28
    4c16:	df 93       	push	r29
    4c18:	cd b7       	in	r28, 0x3d	; 61
    4c1a:	de b7       	in	r29, 0x3e	; 62
    4c1c:	61 97       	sbiw	r28, 0x11	; 17
    4c1e:	cd bf       	out	0x3d, r28	; 61
    4c20:	de bf       	out	0x3e, r29	; 62
    4c22:	68 87       	std	Y+8, r22	; 0x08
    4c24:	79 87       	std	Y+9, r23	; 0x09
    4c26:	8a 87       	std	Y+10, r24	; 0x0a
    4c28:	9b 87       	std	Y+11, r25	; 0x0b
    4c2a:	4c 87       	std	Y+12, r20	; 0x0c
    4c2c:	5d 87       	std	Y+13, r21	; 0x0d
    4c2e:	0e 87       	std	Y+14, r16	; 0x0e
    4c30:	1f 87       	std	Y+15, r17	; 0x0f
    4c32:	28 8b       	std	Y+16, r18	; 0x10
    4c34:	39 8b       	std	Y+17, r19	; 0x11
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    4c36:	80 91 3e 2a 	lds	r24, 0x2A3E	; 0x802a3e <egstrNmBusCapabilities>
    4c3a:	90 91 3f 2a 	lds	r25, 0x2A3F	; 0x802a3f <egstrNmBusCapabilities+0x1>
    4c3e:	08 97       	sbiw	r24, 0x08	; 8
    4c40:	8e 83       	std	Y+6, r24	; 0x06
    4c42:	9f 83       	std	Y+7, r25	; 0x07
	uint32 off = 0;
    4c44:	19 82       	std	Y+1, r1	; 0x01
    4c46:	1a 82       	std	Y+2, r1	; 0x02
    4c48:	1b 82       	std	Y+3, r1	; 0x03
    4c4a:	1c 82       	std	Y+4, r1	; 0x04
	sint8 s8Ret = M2M_SUCCESS;
    4c4c:	1d 82       	std	Y+5, r1	; 0x05

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    4c4e:	8e 81       	ldd	r24, Y+6	; 0x06
    4c50:	9f 81       	ldd	r25, Y+7	; 0x07
    4c52:	9c 01       	movw	r18, r24
    4c54:	40 e0       	ldi	r20, 0x00	; 0
    4c56:	50 e0       	ldi	r21, 0x00	; 0
    4c58:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c5a:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c5c:	a8 89       	ldd	r26, Y+16	; 0x10
    4c5e:	b9 89       	ldd	r27, Y+17	; 0x11
    4c60:	28 17       	cp	r18, r24
    4c62:	39 07       	cpc	r19, r25
    4c64:	4a 07       	cpc	r20, r26
    4c66:	5b 07       	cpc	r21, r27
    4c68:	b8 f0       	brcs	.+46     	; 0x4c98 <nm_write_block+0x8c>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    4c6a:	6e 85       	ldd	r22, Y+14	; 0x0e
    4c6c:	7f 85       	ldd	r23, Y+15	; 0x0f
    4c6e:	89 81       	ldd	r24, Y+1	; 0x01
    4c70:	9a 81       	ldd	r25, Y+2	; 0x02
    4c72:	2c 85       	ldd	r18, Y+12	; 0x0c
    4c74:	3d 85       	ldd	r19, Y+13	; 0x0d
    4c76:	a9 01       	movw	r20, r18
    4c78:	48 0f       	add	r20, r24
    4c7a:	59 1f       	adc	r21, r25
    4c7c:	88 85       	ldd	r24, Y+8	; 0x08
    4c7e:	99 85       	ldd	r25, Y+9	; 0x09
    4c80:	aa 85       	ldd	r26, Y+10	; 0x0a
    4c82:	bb 85       	ldd	r27, Y+11	; 0x0b
    4c84:	9b 01       	movw	r18, r22
    4c86:	bc 01       	movw	r22, r24
    4c88:	cd 01       	movw	r24, r26
    4c8a:	0e 94 e5 25 	call	0x4bca	; 0x4bca <p_nm_write_block>
    4c8e:	98 2f       	mov	r25, r24
    4c90:	8d 81       	ldd	r24, Y+5	; 0x05
    4c92:	89 0f       	add	r24, r25
    4c94:	8d 83       	std	Y+5, r24	; 0x05
			break;
    4c96:	51 c0       	rjmp	.+162    	; 0x4d3a <nm_write_block+0x12e>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    4c98:	89 81       	ldd	r24, Y+1	; 0x01
    4c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    4c9e:	3d 85       	ldd	r19, Y+13	; 0x0d
    4ca0:	a9 01       	movw	r20, r18
    4ca2:	48 0f       	add	r20, r24
    4ca4:	59 1f       	adc	r21, r25
    4ca6:	2e 81       	ldd	r18, Y+6	; 0x06
    4ca8:	3f 81       	ldd	r19, Y+7	; 0x07
    4caa:	88 85       	ldd	r24, Y+8	; 0x08
    4cac:	99 85       	ldd	r25, Y+9	; 0x09
    4cae:	aa 85       	ldd	r26, Y+10	; 0x0a
    4cb0:	bb 85       	ldd	r27, Y+11	; 0x0b
    4cb2:	bc 01       	movw	r22, r24
    4cb4:	cd 01       	movw	r24, r26
    4cb6:	0e 94 e5 25 	call	0x4bca	; 0x4bca <p_nm_write_block>
    4cba:	98 2f       	mov	r25, r24
    4cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    4cbe:	89 0f       	add	r24, r25
    4cc0:	8d 83       	std	Y+5, r24	; 0x05
			if(M2M_SUCCESS != s8Ret) break;
    4cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    4cc4:	88 23       	and	r24, r24
    4cc6:	c1 f5       	brne	.+112    	; 0x4d38 <nm_write_block+0x12c>
			u32Sz -= u16MaxTrxSz;
    4cc8:	8e 81       	ldd	r24, Y+6	; 0x06
    4cca:	9f 81       	ldd	r25, Y+7	; 0x07
    4ccc:	cc 01       	movw	r24, r24
    4cce:	a0 e0       	ldi	r26, 0x00	; 0
    4cd0:	b0 e0       	ldi	r27, 0x00	; 0
    4cd2:	2e 85       	ldd	r18, Y+14	; 0x0e
    4cd4:	3f 85       	ldd	r19, Y+15	; 0x0f
    4cd6:	48 89       	ldd	r20, Y+16	; 0x10
    4cd8:	59 89       	ldd	r21, Y+17	; 0x11
    4cda:	79 01       	movw	r14, r18
    4cdc:	8a 01       	movw	r16, r20
    4cde:	e8 1a       	sub	r14, r24
    4ce0:	f9 0a       	sbc	r15, r25
    4ce2:	0a 0b       	sbc	r16, r26
    4ce4:	1b 0b       	sbc	r17, r27
    4ce6:	d8 01       	movw	r26, r16
    4ce8:	c7 01       	movw	r24, r14
    4cea:	8e 87       	std	Y+14, r24	; 0x0e
    4cec:	9f 87       	std	Y+15, r25	; 0x0f
    4cee:	a8 8b       	std	Y+16, r26	; 0x10
    4cf0:	b9 8b       	std	Y+17, r27	; 0x11
			off += u16MaxTrxSz;
    4cf2:	8e 81       	ldd	r24, Y+6	; 0x06
    4cf4:	9f 81       	ldd	r25, Y+7	; 0x07
    4cf6:	cc 01       	movw	r24, r24
    4cf8:	a0 e0       	ldi	r26, 0x00	; 0
    4cfa:	b0 e0       	ldi	r27, 0x00	; 0
    4cfc:	29 81       	ldd	r18, Y+1	; 0x01
    4cfe:	3a 81       	ldd	r19, Y+2	; 0x02
    4d00:	4b 81       	ldd	r20, Y+3	; 0x03
    4d02:	5c 81       	ldd	r21, Y+4	; 0x04
    4d04:	82 0f       	add	r24, r18
    4d06:	93 1f       	adc	r25, r19
    4d08:	a4 1f       	adc	r26, r20
    4d0a:	b5 1f       	adc	r27, r21
    4d0c:	89 83       	std	Y+1, r24	; 0x01
    4d0e:	9a 83       	std	Y+2, r25	; 0x02
    4d10:	ab 83       	std	Y+3, r26	; 0x03
    4d12:	bc 83       	std	Y+4, r27	; 0x04
			u32Addr += u16MaxTrxSz;
    4d14:	8e 81       	ldd	r24, Y+6	; 0x06
    4d16:	9f 81       	ldd	r25, Y+7	; 0x07
    4d18:	cc 01       	movw	r24, r24
    4d1a:	a0 e0       	ldi	r26, 0x00	; 0
    4d1c:	b0 e0       	ldi	r27, 0x00	; 0
    4d1e:	28 85       	ldd	r18, Y+8	; 0x08
    4d20:	39 85       	ldd	r19, Y+9	; 0x09
    4d22:	4a 85       	ldd	r20, Y+10	; 0x0a
    4d24:	5b 85       	ldd	r21, Y+11	; 0x0b
    4d26:	82 0f       	add	r24, r18
    4d28:	93 1f       	adc	r25, r19
    4d2a:	a4 1f       	adc	r26, r20
    4d2c:	b5 1f       	adc	r27, r21
    4d2e:	88 87       	std	Y+8, r24	; 0x08
    4d30:	99 87       	std	Y+9, r25	; 0x09
    4d32:	aa 87       	std	Y+10, r26	; 0x0a
    4d34:	bb 87       	std	Y+11, r27	; 0x0b
		}
	}
    4d36:	8b cf       	rjmp	.-234    	; 0x4c4e <nm_write_block+0x42>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    4d38:	00 00       	nop
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    4d3a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4d3c:	61 96       	adiw	r28, 0x11	; 17
    4d3e:	cd bf       	out	0x3d, r28	; 61
    4d40:	de bf       	out	0x3e, r29	; 62
    4d42:	df 91       	pop	r29
    4d44:	cf 91       	pop	r28
    4d46:	1f 91       	pop	r17
    4d48:	0f 91       	pop	r16
    4d4a:	ff 90       	pop	r15
    4d4c:	ef 90       	pop	r14
    4d4e:	08 95       	ret

00004d50 <nm_get_firmware_full_info>:
	/*disable all interrupt in ROM (to disable uart) in 2b0 chip*/
	nm_write_reg(0x20300,0);

ERR1:
	return ret;
}
    4d50:	0f 93       	push	r16
    4d52:	1f 93       	push	r17
    4d54:	cf 93       	push	r28
    4d56:	df 93       	push	r29
    4d58:	cd b7       	in	r28, 0x3d	; 61
    4d5a:	de b7       	in	r29, 0x3e	; 62
    4d5c:	65 97       	sbiw	r28, 0x15	; 21
    4d5e:	cd bf       	out	0x3d, r28	; 61
    4d60:	de bf       	out	0x3e, r29	; 62
    4d62:	8c 8b       	std	Y+20, r24	; 0x14
    4d64:	9d 8b       	std	Y+21, r25	; 0x15
    4d66:	18 86       	std	Y+8, r1	; 0x08
    4d68:	19 86       	std	Y+9, r1	; 0x09
    4d6a:	1a 86       	std	Y+10, r1	; 0x0a
    4d6c:	1b 86       	std	Y+11, r1	; 0x0b
    4d6e:	19 82       	std	Y+1, r1	; 0x01
    4d70:	28 e0       	ldi	r18, 0x08	; 8
    4d72:	ce 01       	movw	r24, r28
    4d74:	0c 96       	adiw	r24, 0x0c	; 12
    4d76:	fc 01       	movw	r30, r24
    4d78:	32 2f       	mov	r19, r18
    4d7a:	11 92       	st	Z+, r1
    4d7c:	3a 95       	dec	r19
    4d7e:	e9 f7       	brne	.-6      	; 0x4d7a <nm_get_firmware_full_info+0x2a>
    4d80:	8c 89       	ldd	r24, Y+20	; 0x14
    4d82:	9d 89       	ldd	r25, Y+21	; 0x15
    4d84:	89 2b       	or	r24, r25
    4d86:	09 f4       	brne	.+2      	; 0x4d8a <nm_get_firmware_full_info+0x3a>
    4d88:	d6 c0       	rjmp	.+428    	; 0x4f36 <nm_get_firmware_full_info+0x1e6>
    4d8a:	8c 89       	ldd	r24, Y+20	; 0x14
    4d8c:	9d 89       	ldd	r25, Y+21	; 0x15
    4d8e:	26 e2       	ldi	r18, 0x26	; 38
    4d90:	30 e0       	ldi	r19, 0x00	; 0
    4d92:	40 e0       	ldi	r20, 0x00	; 0
    4d94:	50 e0       	ldi	r21, 0x00	; 0
    4d96:	60 e0       	ldi	r22, 0x00	; 0
    4d98:	0e 94 aa 14 	call	0x2954	; 0x2954 <m2m_memset>
    4d9c:	ce 01       	movw	r24, r28
    4d9e:	08 96       	adiw	r24, 0x08	; 8
    4da0:	ac 01       	movw	r20, r24
    4da2:	68 e0       	ldi	r22, 0x08	; 8
    4da4:	70 e0       	ldi	r23, 0x00	; 0
    4da6:	8c e0       	ldi	r24, 0x0C	; 12
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    4dae:	89 83       	std	Y+1, r24	; 0x01
    4db0:	89 81       	ldd	r24, Y+1	; 0x01
    4db2:	88 23       	and	r24, r24
    4db4:	09 f0       	breq	.+2      	; 0x4db8 <nm_get_firmware_full_info+0x68>
    4db6:	bf c0       	rjmp	.+382    	; 0x4f36 <nm_get_firmware_full_info+0x1e6>
    4db8:	88 85       	ldd	r24, Y+8	; 0x08
    4dba:	99 85       	ldd	r25, Y+9	; 0x09
    4dbc:	aa 85       	ldd	r26, Y+10	; 0x0a
    4dbe:	bb 85       	ldd	r27, Y+11	; 0x0b
    4dc0:	89 2b       	or	r24, r25
    4dc2:	8a 2b       	or	r24, r26
    4dc4:	8b 2b       	or	r24, r27
    4dc6:	09 f4       	brne	.+2      	; 0x4dca <nm_get_firmware_full_info+0x7a>
    4dc8:	b4 c0       	rjmp	.+360    	; 0x4f32 <nm_get_firmware_full_info+0x1e2>
    4dca:	88 85       	ldd	r24, Y+8	; 0x08
    4dcc:	99 85       	ldd	r25, Y+9	; 0x09
    4dce:	aa 85       	ldd	r26, Y+10	; 0x0a
    4dd0:	bb 85       	ldd	r27, Y+11	; 0x0b
    4dd2:	a3 60       	ori	r26, 0x03	; 3
    4dd4:	ae 01       	movw	r20, r28
    4dd6:	44 5f       	subi	r20, 0xF4	; 244
    4dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    4dda:	08 e0       	ldi	r16, 0x08	; 8
    4ddc:	10 e0       	ldi	r17, 0x00	; 0
    4dde:	20 e0       	ldi	r18, 0x00	; 0
    4de0:	30 e0       	ldi	r19, 0x00	; 0
    4de2:	bc 01       	movw	r22, r24
    4de4:	cd 01       	movw	r24, r26
    4de6:	0e 94 43 25 	call	0x4a86	; 0x4a86 <nm_read_block>
    4dea:	89 83       	std	Y+1, r24	; 0x01
    4dec:	89 81       	ldd	r24, Y+1	; 0x01
    4dee:	88 23       	and	r24, r24
    4df0:	09 f0       	breq	.+2      	; 0x4df4 <nm_get_firmware_full_info+0xa4>
    4df2:	a1 c0       	rjmp	.+322    	; 0x4f36 <nm_get_firmware_full_info+0x1e6>
    4df4:	88 89       	ldd	r24, Y+16	; 0x10
    4df6:	99 89       	ldd	r25, Y+17	; 0x11
    4df8:	aa 89       	ldd	r26, Y+18	; 0x12
    4dfa:	bb 89       	ldd	r27, Y+19	; 0x13
    4dfc:	88 87       	std	Y+8, r24	; 0x08
    4dfe:	99 87       	std	Y+9, r25	; 0x09
    4e00:	aa 87       	std	Y+10, r26	; 0x0a
    4e02:	bb 87       	std	Y+11, r27	; 0x0b
    4e04:	88 85       	ldd	r24, Y+8	; 0x08
    4e06:	99 85       	ldd	r25, Y+9	; 0x09
    4e08:	aa 85       	ldd	r26, Y+10	; 0x0a
    4e0a:	bb 85       	ldd	r27, Y+11	; 0x0b
    4e0c:	aa 27       	eor	r26, r26
    4e0e:	bb 27       	eor	r27, r27
    4e10:	88 87       	std	Y+8, r24	; 0x08
    4e12:	99 87       	std	Y+9, r25	; 0x09
    4e14:	aa 87       	std	Y+10, r26	; 0x0a
    4e16:	bb 87       	std	Y+11, r27	; 0x0b
    4e18:	88 85       	ldd	r24, Y+8	; 0x08
    4e1a:	99 85       	ldd	r25, Y+9	; 0x09
    4e1c:	aa 85       	ldd	r26, Y+10	; 0x0a
    4e1e:	bb 85       	ldd	r27, Y+11	; 0x0b
    4e20:	89 2b       	or	r24, r25
    4e22:	8a 2b       	or	r24, r26
    4e24:	8b 2b       	or	r24, r27
    4e26:	09 f4       	brne	.+2      	; 0x4e2a <nm_get_firmware_full_info+0xda>
    4e28:	81 c0       	rjmp	.+258    	; 0x4f2c <nm_get_firmware_full_info+0x1dc>
    4e2a:	88 85       	ldd	r24, Y+8	; 0x08
    4e2c:	99 85       	ldd	r25, Y+9	; 0x09
    4e2e:	aa 85       	ldd	r26, Y+10	; 0x0a
    4e30:	bb 85       	ldd	r27, Y+11	; 0x0b
    4e32:	a3 60       	ori	r26, 0x03	; 3
    4e34:	4c 89       	ldd	r20, Y+20	; 0x14
    4e36:	5d 89       	ldd	r21, Y+21	; 0x15
    4e38:	06 e2       	ldi	r16, 0x26	; 38
    4e3a:	10 e0       	ldi	r17, 0x00	; 0
    4e3c:	20 e0       	ldi	r18, 0x00	; 0
    4e3e:	30 e0       	ldi	r19, 0x00	; 0
    4e40:	bc 01       	movw	r22, r24
    4e42:	cd 01       	movw	r24, r26
    4e44:	0e 94 43 25 	call	0x4a86	; 0x4a86 <nm_read_block>
    4e48:	89 83       	std	Y+1, r24	; 0x01
    4e4a:	89 81       	ldd	r24, Y+1	; 0x01
    4e4c:	88 23       	and	r24, r24
    4e4e:	09 f0       	breq	.+2      	; 0x4e52 <nm_get_firmware_full_info+0x102>
    4e50:	72 c0       	rjmp	.+228    	; 0x4f36 <nm_get_firmware_full_info+0x1e6>
    4e52:	8c 89       	ldd	r24, Y+20	; 0x14
    4e54:	9d 89       	ldd	r25, Y+21	; 0x15
    4e56:	fc 01       	movw	r30, r24
    4e58:	84 81       	ldd	r24, Z+4	; 0x04
    4e5a:	88 2f       	mov	r24, r24
    4e5c:	90 e0       	ldi	r25, 0x00	; 0
    4e5e:	38 2f       	mov	r19, r24
    4e60:	22 27       	eor	r18, r18
    4e62:	8c 89       	ldd	r24, Y+20	; 0x14
    4e64:	9d 89       	ldd	r25, Y+21	; 0x15
    4e66:	fc 01       	movw	r30, r24
    4e68:	85 81       	ldd	r24, Z+5	; 0x05
    4e6a:	88 2f       	mov	r24, r24
    4e6c:	90 e0       	ldi	r25, 0x00	; 0
    4e6e:	82 95       	swap	r24
    4e70:	92 95       	swap	r25
    4e72:	90 7f       	andi	r25, 0xF0	; 240
    4e74:	98 27       	eor	r25, r24
    4e76:	80 7f       	andi	r24, 0xF0	; 240
    4e78:	98 27       	eor	r25, r24
    4e7a:	99 27       	eor	r25, r25
    4e7c:	28 2b       	or	r18, r24
    4e7e:	39 2b       	or	r19, r25
    4e80:	8c 89       	ldd	r24, Y+20	; 0x14
    4e82:	9d 89       	ldd	r25, Y+21	; 0x15
    4e84:	fc 01       	movw	r30, r24
    4e86:	86 81       	ldd	r24, Z+6	; 0x06
    4e88:	88 2f       	mov	r24, r24
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	8f 70       	andi	r24, 0x0F	; 15
    4e8e:	99 27       	eor	r25, r25
    4e90:	82 2b       	or	r24, r18
    4e92:	93 2b       	or	r25, r19
    4e94:	8a 83       	std	Y+2, r24	; 0x02
    4e96:	9b 83       	std	Y+3, r25	; 0x03
    4e98:	82 e5       	ldi	r24, 0x52	; 82
    4e9a:	93 e1       	ldi	r25, 0x13	; 19
    4e9c:	8c 83       	std	Y+4, r24	; 0x04
    4e9e:	9d 83       	std	Y+5, r25	; 0x05
    4ea0:	8c 89       	ldd	r24, Y+20	; 0x14
    4ea2:	9d 89       	ldd	r25, Y+21	; 0x15
    4ea4:	fc 01       	movw	r30, r24
    4ea6:	87 81       	ldd	r24, Z+7	; 0x07
    4ea8:	88 2f       	mov	r24, r24
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	38 2f       	mov	r19, r24
    4eae:	22 27       	eor	r18, r18
    4eb0:	8c 89       	ldd	r24, Y+20	; 0x14
    4eb2:	9d 89       	ldd	r25, Y+21	; 0x15
    4eb4:	fc 01       	movw	r30, r24
    4eb6:	80 85       	ldd	r24, Z+8	; 0x08
    4eb8:	88 2f       	mov	r24, r24
    4eba:	90 e0       	ldi	r25, 0x00	; 0
    4ebc:	82 95       	swap	r24
    4ebe:	92 95       	swap	r25
    4ec0:	90 7f       	andi	r25, 0xF0	; 240
    4ec2:	98 27       	eor	r25, r24
    4ec4:	80 7f       	andi	r24, 0xF0	; 240
    4ec6:	98 27       	eor	r25, r24
    4ec8:	99 27       	eor	r25, r25
    4eca:	28 2b       	or	r18, r24
    4ecc:	39 2b       	or	r19, r25
    4ece:	8c 89       	ldd	r24, Y+20	; 0x14
    4ed0:	9d 89       	ldd	r25, Y+21	; 0x15
    4ed2:	fc 01       	movw	r30, r24
    4ed4:	81 85       	ldd	r24, Z+9	; 0x09
    4ed6:	88 2f       	mov	r24, r24
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	8f 70       	andi	r24, 0x0F	; 15
    4edc:	99 27       	eor	r25, r25
    4ede:	82 2b       	or	r24, r18
    4ee0:	93 2b       	or	r25, r19
    4ee2:	8e 83       	std	Y+6, r24	; 0x06
    4ee4:	9f 83       	std	Y+7, r25	; 0x07
    4ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    4eea:	89 2b       	or	r24, r25
    4eec:	41 f0       	breq	.+16     	; 0x4efe <nm_get_firmware_full_info+0x1ae>
    4eee:	8e 81       	ldd	r24, Y+6	; 0x06
    4ef0:	9f 81       	ldd	r25, Y+7	; 0x07
    4ef2:	89 2b       	or	r24, r25
    4ef4:	21 f0       	breq	.+8      	; 0x4efe <nm_get_firmware_full_info+0x1ae>
    4ef6:	8e 81       	ldd	r24, Y+6	; 0x06
    4ef8:	9f 81       	ldd	r25, Y+7	; 0x07
    4efa:	89 2b       	or	r24, r25
    4efc:	19 f4       	brne	.+6      	; 0x4f04 <nm_get_firmware_full_info+0x1b4>
    4efe:	84 ef       	ldi	r24, 0xF4	; 244
    4f00:	89 83       	std	Y+1, r24	; 0x01
    4f02:	19 c0       	rjmp	.+50     	; 0x4f36 <nm_get_firmware_full_info+0x1e6>
    4f04:	2c 81       	ldd	r18, Y+4	; 0x04
    4f06:	3d 81       	ldd	r19, Y+5	; 0x05
    4f08:	8e 81       	ldd	r24, Y+6	; 0x06
    4f0a:	9f 81       	ldd	r25, Y+7	; 0x07
    4f0c:	28 17       	cp	r18, r24
    4f0e:	39 07       	cpc	r19, r25
    4f10:	18 f4       	brcc	.+6      	; 0x4f18 <nm_get_firmware_full_info+0x1c8>
    4f12:	83 ef       	ldi	r24, 0xF3	; 243
    4f14:	89 83       	std	Y+1, r24	; 0x01
    4f16:	0f c0       	rjmp	.+30     	; 0x4f36 <nm_get_firmware_full_info+0x1e6>
    4f18:	2c 81       	ldd	r18, Y+4	; 0x04
    4f1a:	3d 81       	ldd	r19, Y+5	; 0x05
    4f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    4f20:	82 17       	cp	r24, r18
    4f22:	93 07       	cpc	r25, r19
    4f24:	40 f4       	brcc	.+16     	; 0x4f36 <nm_get_firmware_full_info+0x1e6>
    4f26:	83 ef       	ldi	r24, 0xF3	; 243
    4f28:	89 83       	std	Y+1, r24	; 0x01
    4f2a:	05 c0       	rjmp	.+10     	; 0x4f36 <nm_get_firmware_full_info+0x1e6>
    4f2c:	84 ef       	ldi	r24, 0xF4	; 244
    4f2e:	89 83       	std	Y+1, r24	; 0x01
    4f30:	02 c0       	rjmp	.+4      	; 0x4f36 <nm_get_firmware_full_info+0x1e6>
    4f32:	84 ef       	ldi	r24, 0xF4	; 244
    4f34:	89 83       	std	Y+1, r24	; 0x01
    4f36:	89 81       	ldd	r24, Y+1	; 0x01
    4f38:	65 96       	adiw	r28, 0x15	; 21
    4f3a:	cd bf       	out	0x3d, r28	; 61
    4f3c:	de bf       	out	0x3e, r29	; 62
    4f3e:	df 91       	pop	r29
    4f40:	cf 91       	pop	r28
    4f42:	1f 91       	pop	r17
    4f44:	0f 91       	pop	r16
    4f46:	08 95       	ret

00004f48 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    4f48:	cf 93       	push	r28
    4f4a:	df 93       	push	r29
    4f4c:	00 d0       	rcall	.+0      	; 0x4f4e <nm_drv_init+0x6>
    4f4e:	00 d0       	rcall	.+0      	; 0x4f50 <nm_drv_init+0x8>
    4f50:	cd b7       	in	r28, 0x3d	; 61
    4f52:	de b7       	in	r29, 0x3e	; 62
    4f54:	8b 83       	std	Y+3, r24	; 0x03
    4f56:	9c 83       	std	Y+4, r25	; 0x04
	sint8 ret = M2M_SUCCESS;
    4f58:	19 82       	std	Y+1, r1	; 0x01
	uint8 u8Mode;
	
	if(NULL != arg) {
    4f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f5e:	89 2b       	or	r24, r25
    4f60:	71 f0       	breq	.+28     	; 0x4f7e <nm_drv_init+0x36>
		u8Mode = *((uint8 *)arg);
    4f62:	8b 81       	ldd	r24, Y+3	; 0x03
    4f64:	9c 81       	ldd	r25, Y+4	; 0x04
    4f66:	fc 01       	movw	r30, r24
    4f68:	80 81       	ld	r24, Z
    4f6a:	8a 83       	std	Y+2, r24	; 0x02
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    4f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f6e:	88 23       	and	r24, r24
    4f70:	19 f0       	breq	.+6      	; 0x4f78 <nm_drv_init+0x30>
    4f72:	8a 81       	ldd	r24, Y+2	; 0x02
    4f74:	85 30       	cpi	r24, 0x05	; 5
    4f76:	28 f0       	brcs	.+10     	; 0x4f82 <nm_drv_init+0x3a>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    4f78:	81 e0       	ldi	r24, 0x01	; 1
    4f7a:	8a 83       	std	Y+2, r24	; 0x02
    4f7c:	02 c0       	rjmp	.+4      	; 0x4f82 <nm_drv_init+0x3a>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    4f7e:	81 e0       	ldi	r24, 0x01	; 1
    4f80:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	ret = nm_bus_iface_init(NULL);
    4f82:	80 e0       	ldi	r24, 0x00	; 0
    4f84:	90 e0       	ldi	r25, 0x00	; 0
    4f86:	0e 94 98 24 	call	0x4930	; 0x4930 <nm_bus_iface_init>
    4f8a:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    4f8c:	89 81       	ldd	r24, Y+1	; 0x01
    4f8e:	88 23       	and	r24, r24
    4f90:	31 f5       	brne	.+76     	; 0x4fde <nm_drv_init+0x96>
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    4f92:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <nm_spi_init>
#endif
	ret = wait_for_bootrom(u8Mode);
    4f96:	8a 81       	ldd	r24, Y+2	; 0x02
    4f98:	0e 94 c7 22 	call	0x458e	; 0x458e <wait_for_bootrom>
    4f9c:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    4f9e:	89 81       	ldd	r24, Y+1	; 0x01
    4fa0:	88 23       	and	r24, r24
    4fa2:	a9 f4       	brne	.+42     	; 0x4fce <nm_drv_init+0x86>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    4fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    4fa6:	0e 94 cc 23 	call	0x4798	; 0x4798 <wait_for_firmware_start>
    4faa:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    4fac:	89 81       	ldd	r24, Y+1	; 0x01
    4fae:	88 23       	and	r24, r24
    4fb0:	81 f4       	brne	.+32     	; 0x4fd2 <nm_drv_init+0x8a>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    4fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    4fb4:	82 30       	cpi	r24, 0x02	; 2
    4fb6:	a1 f0       	breq	.+40     	; 0x4fe0 <nm_drv_init+0x98>
    4fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    4fba:	83 30       	cpi	r24, 0x03	; 3
    4fbc:	89 f0       	breq	.+34     	; 0x4fe0 <nm_drv_init+0x98>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    4fbe:	0e 94 2b 20 	call	0x4056	; 0x4056 <enable_interrupts>
    4fc2:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    4fc4:	89 81       	ldd	r24, Y+1	; 0x01
    4fc6:	88 23       	and	r24, r24
    4fc8:	31 f4       	brne	.+12     	; 0x4fd6 <nm_drv_init+0x8e>
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
    4fca:	89 81       	ldd	r24, Y+1	; 0x01
    4fcc:	0a c0       	rjmp	.+20     	; 0x4fe2 <nm_drv_init+0x9a>
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
#endif
	ret = wait_for_bootrom(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    4fce:	00 00       	nop
    4fd0:	03 c0       	rjmp	.+6      	; 0x4fd8 <nm_drv_init+0x90>
	}
		
	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    4fd2:	00 00       	nop
    4fd4:	01 c0       	rjmp	.+2      	; 0x4fd8 <nm_drv_init+0x90>
	}
	
	ret = enable_interrupts();
	if (M2M_SUCCESS != ret) {
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
    4fd6:	00 00       	nop
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    4fd8:	0e 94 ad 24 	call	0x495a	; 0x495a <nm_bus_iface_deinit>
    4fdc:	01 c0       	rjmp	.+2      	; 0x4fe0 <nm_drv_init+0x98>
	}
	
	ret = nm_bus_iface_init(NULL);
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi start]: fail init bus\n");
		goto ERR1;
    4fde:	00 00       	nop
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
ERR1:
	return ret;
    4fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
    4fe2:	24 96       	adiw	r28, 0x04	; 4
    4fe4:	cd bf       	out	0x3d, r28	; 61
    4fe6:	de bf       	out	0x3e, r29	; 62
    4fe8:	df 91       	pop	r29
    4fea:	cf 91       	pop	r28
    4fec:	08 95       	ret

00004fee <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    4fee:	cf 93       	push	r28
    4ff0:	df 93       	push	r29
    4ff2:	00 d0       	rcall	.+0      	; 0x4ff4 <nm_drv_deinit+0x6>
    4ff4:	1f 92       	push	r1
    4ff6:	cd b7       	in	r28, 0x3d	; 61
    4ff8:	de b7       	in	r29, 0x3e	; 62
    4ffa:	8a 83       	std	Y+2, r24	; 0x02
    4ffc:	9b 83       	std	Y+3, r25	; 0x03
	sint8 ret;

	ret = chip_deinit();
    4ffe:	0e 94 61 24 	call	0x48c2	; 0x48c2 <chip_deinit>
    5002:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    5004:	89 81       	ldd	r24, Y+1	; 0x01
    5006:	88 23       	and	r24, r24
    5008:	81 f4       	brne	.+32     	; 0x502a <nm_drv_deinit+0x3c>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    500a:	80 e0       	ldi	r24, 0x00	; 0
    500c:	0e 94 df 39 	call	0x73be	; 0x73be <spi_flash_enable>
    5010:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    5012:	89 81       	ldd	r24, Y+1	; 0x01
    5014:	88 23       	and	r24, r24
    5016:	59 f4       	brne	.+22     	; 0x502e <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    5018:	0e 94 ad 24 	call	0x495a	; 0x495a <nm_bus_iface_deinit>
    501c:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    501e:	89 81       	ldd	r24, Y+1	; 0x01
    5020:	88 23       	and	r24, r24
    5022:	39 f4       	brne	.+14     	; 0x5032 <nm_drv_deinit+0x44>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    5024:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <nm_spi_deinit>
    5028:	05 c0       	rjmp	.+10     	; 0x5034 <nm_drv_deinit+0x46>
	sint8 ret;

	ret = chip_deinit();
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
    502a:	00 00       	nop
    502c:	03 c0       	rjmp	.+6      	; 0x5034 <nm_drv_deinit+0x46>
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
    502e:	00 00       	nop
    5030:	01 c0       	rjmp	.+2      	; 0x5034 <nm_drv_deinit+0x46>
	}

	ret = nm_bus_iface_deinit();
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
    5032:	00 00       	nop
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
#endif

ERR1:
	return ret;
    5034:	89 81       	ldd	r24, Y+1	; 0x01
}
    5036:	23 96       	adiw	r28, 0x03	; 3
    5038:	cd bf       	out	0x3d, r28	; 61
    503a:	de bf       	out	0x3e, r29	; 62
    503c:	df 91       	pop	r29
    503e:	cf 91       	pop	r28
    5040:	08 95       	ret

00005042 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    5042:	cf 93       	push	r28
    5044:	df 93       	push	r29
    5046:	cd b7       	in	r28, 0x3d	; 61
    5048:	de b7       	in	r29, 0x3e	; 62
    504a:	2a 97       	sbiw	r28, 0x0a	; 10
    504c:	cd bf       	out	0x3d, r28	; 61
    504e:	de bf       	out	0x3e, r29	; 62
    5050:	8f 83       	std	Y+7, r24	; 0x07
    5052:	98 87       	std	Y+8, r25	; 0x08
    5054:	69 87       	std	Y+9, r22	; 0x09
    5056:	7a 87       	std	Y+10, r23	; 0x0a
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    5058:	19 82       	std	Y+1, r1	; 0x01
    505a:	1a 82       	std	Y+2, r1	; 0x02
	spi.pu8OutBuf = b;
    505c:	8f 81       	ldd	r24, Y+7	; 0x07
    505e:	98 85       	ldd	r25, Y+8	; 0x08
    5060:	8b 83       	std	Y+3, r24	; 0x03
    5062:	9c 83       	std	Y+4, r25	; 0x04
	spi.u16Sz = sz;
    5064:	89 85       	ldd	r24, Y+9	; 0x09
    5066:	9a 85       	ldd	r25, Y+10	; 0x0a
    5068:	8d 83       	std	Y+5, r24	; 0x05
    506a:	9e 83       	std	Y+6, r25	; 0x06
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    506c:	ce 01       	movw	r24, r28
    506e:	01 96       	adiw	r24, 0x01	; 1
    5070:	bc 01       	movw	r22, r24
    5072:	83 e0       	ldi	r24, 0x03	; 3
    5074:	0e 94 2c 14 	call	0x2858	; 0x2858 <nm_bus_ioctl>
}
    5078:	2a 96       	adiw	r28, 0x0a	; 10
    507a:	cd bf       	out	0x3d, r28	; 61
    507c:	de bf       	out	0x3e, r29	; 62
    507e:	df 91       	pop	r29
    5080:	cf 91       	pop	r28
    5082:	08 95       	ret

00005084 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    5084:	cf 93       	push	r28
    5086:	df 93       	push	r29
    5088:	cd b7       	in	r28, 0x3d	; 61
    508a:	de b7       	in	r29, 0x3e	; 62
    508c:	2a 97       	sbiw	r28, 0x0a	; 10
    508e:	cd bf       	out	0x3d, r28	; 61
    5090:	de bf       	out	0x3e, r29	; 62
    5092:	8f 83       	std	Y+7, r24	; 0x07
    5094:	98 87       	std	Y+8, r25	; 0x08
    5096:	69 87       	std	Y+9, r22	; 0x09
    5098:	7a 87       	std	Y+10, r23	; 0x0a
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    509a:	8f 81       	ldd	r24, Y+7	; 0x07
    509c:	98 85       	ldd	r25, Y+8	; 0x08
    509e:	89 83       	std	Y+1, r24	; 0x01
    50a0:	9a 83       	std	Y+2, r25	; 0x02
	spi.pu8OutBuf = NULL;
    50a2:	1b 82       	std	Y+3, r1	; 0x03
    50a4:	1c 82       	std	Y+4, r1	; 0x04
	spi.u16Sz = sz;
    50a6:	89 85       	ldd	r24, Y+9	; 0x09
    50a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    50aa:	8d 83       	std	Y+5, r24	; 0x05
    50ac:	9e 83       	std	Y+6, r25	; 0x06
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    50ae:	ce 01       	movw	r24, r28
    50b0:	01 96       	adiw	r24, 0x01	; 1
    50b2:	bc 01       	movw	r22, r24
    50b4:	83 e0       	ldi	r24, 0x03	; 3
    50b6:	0e 94 2c 14 	call	0x2858	; 0x2858 <nm_bus_ioctl>
}
    50ba:	2a 96       	adiw	r28, 0x0a	; 10
    50bc:	cd bf       	out	0x3d, r28	; 61
    50be:	de bf       	out	0x3e, r29	; 62
    50c0:	df 91       	pop	r29
    50c2:	cf 91       	pop	r28
    50c4:	08 95       	ret

000050c6 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    50c6:	cf 93       	push	r28
    50c8:	df 93       	push	r29
    50ca:	cd b7       	in	r28, 0x3d	; 61
    50cc:	de b7       	in	r29, 0x3e	; 62
    50ce:	25 97       	sbiw	r28, 0x05	; 5
    50d0:	cd bf       	out	0x3d, r28	; 61
    50d2:	de bf       	out	0x3e, r29	; 62
    50d4:	8c 83       	std	Y+4, r24	; 0x04
    50d6:	6d 83       	std	Y+5, r22	; 0x05
	return pgm_read_byte(&(crc7_syndrome_table[(crc << 1) ^ data]));
    50d8:	8c 81       	ldd	r24, Y+4	; 0x04
    50da:	88 2f       	mov	r24, r24
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	9c 01       	movw	r18, r24
    50e0:	22 0f       	add	r18, r18
    50e2:	33 1f       	adc	r19, r19
    50e4:	8d 81       	ldd	r24, Y+5	; 0x05
    50e6:	88 2f       	mov	r24, r24
    50e8:	90 e0       	ldi	r25, 0x00	; 0
    50ea:	82 27       	eor	r24, r18
    50ec:	93 27       	eor	r25, r19
    50ee:	84 53       	subi	r24, 0x34	; 52
    50f0:	9f 4f       	sbci	r25, 0xFF	; 255
    50f2:	89 83       	std	Y+1, r24	; 0x01
    50f4:	9a 83       	std	Y+2, r25	; 0x02
    50f6:	89 81       	ldd	r24, Y+1	; 0x01
    50f8:	9a 81       	ldd	r25, Y+2	; 0x02
    50fa:	fc 01       	movw	r30, r24
    50fc:	84 91       	lpm	r24, Z
    50fe:	8b 83       	std	Y+3, r24	; 0x03
    5100:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5102:	25 96       	adiw	r28, 0x05	; 5
    5104:	cd bf       	out	0x3d, r28	; 61
    5106:	de bf       	out	0x3e, r29	; 62
    5108:	df 91       	pop	r29
    510a:	cf 91       	pop	r28
    510c:	08 95       	ret

0000510e <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    510e:	cf 93       	push	r28
    5110:	df 93       	push	r29
    5112:	cd b7       	in	r28, 0x3d	; 61
    5114:	de b7       	in	r29, 0x3e	; 62
    5116:	27 97       	sbiw	r28, 0x07	; 7
    5118:	cd bf       	out	0x3d, r28	; 61
    511a:	de bf       	out	0x3e, r29	; 62
    511c:	89 83       	std	Y+1, r24	; 0x01
    511e:	6a 83       	std	Y+2, r22	; 0x02
    5120:	7b 83       	std	Y+3, r23	; 0x03
    5122:	2c 83       	std	Y+4, r18	; 0x04
    5124:	3d 83       	std	Y+5, r19	; 0x05
    5126:	4e 83       	std	Y+6, r20	; 0x06
    5128:	5f 83       	std	Y+7, r21	; 0x07
	while (len--)
    512a:	0e c0       	rjmp	.+28     	; 0x5148 <crc7+0x3a>
		crc = crc7_byte(crc, *buffer++);
    512c:	8a 81       	ldd	r24, Y+2	; 0x02
    512e:	9b 81       	ldd	r25, Y+3	; 0x03
    5130:	9c 01       	movw	r18, r24
    5132:	2f 5f       	subi	r18, 0xFF	; 255
    5134:	3f 4f       	sbci	r19, 0xFF	; 255
    5136:	2a 83       	std	Y+2, r18	; 0x02
    5138:	3b 83       	std	Y+3, r19	; 0x03
    513a:	fc 01       	movw	r30, r24
    513c:	80 81       	ld	r24, Z
    513e:	68 2f       	mov	r22, r24
    5140:	89 81       	ldd	r24, Y+1	; 0x01
    5142:	0e 94 63 28 	call	0x50c6	; 0x50c6 <crc7_byte>
    5146:	89 83       	std	Y+1, r24	; 0x01
	return pgm_read_byte(&(crc7_syndrome_table[(crc << 1) ^ data]));
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    5148:	8c 81       	ldd	r24, Y+4	; 0x04
    514a:	9d 81       	ldd	r25, Y+5	; 0x05
    514c:	ae 81       	ldd	r26, Y+6	; 0x06
    514e:	bf 81       	ldd	r27, Y+7	; 0x07
    5150:	9c 01       	movw	r18, r24
    5152:	ad 01       	movw	r20, r26
    5154:	21 50       	subi	r18, 0x01	; 1
    5156:	31 09       	sbc	r19, r1
    5158:	41 09       	sbc	r20, r1
    515a:	51 09       	sbc	r21, r1
    515c:	2c 83       	std	Y+4, r18	; 0x04
    515e:	3d 83       	std	Y+5, r19	; 0x05
    5160:	4e 83       	std	Y+6, r20	; 0x06
    5162:	5f 83       	std	Y+7, r21	; 0x07
    5164:	89 2b       	or	r24, r25
    5166:	8a 2b       	or	r24, r26
    5168:	8b 2b       	or	r24, r27
    516a:	01 f7       	brne	.-64     	; 0x512c <crc7+0x1e>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    516c:	89 81       	ldd	r24, Y+1	; 0x01
}
    516e:	27 96       	adiw	r28, 0x07	; 7
    5170:	cd bf       	out	0x3d, r28	; 61
    5172:	de bf       	out	0x3e, r29	; 62
    5174:	df 91       	pop	r29
    5176:	cf 91       	pop	r28
    5178:	08 95       	ret

0000517a <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    517a:	af 92       	push	r10
    517c:	cf 92       	push	r12
    517e:	df 92       	push	r13
    5180:	ef 92       	push	r14
    5182:	ff 92       	push	r15
    5184:	0f 93       	push	r16
    5186:	1f 93       	push	r17
    5188:	cf 93       	push	r28
    518a:	df 93       	push	r29
    518c:	cd b7       	in	r28, 0x3d	; 61
    518e:	de b7       	in	r29, 0x3e	; 62
    5190:	69 97       	sbiw	r28, 0x19	; 25
    5192:	cd bf       	out	0x3d, r28	; 61
    5194:	de bf       	out	0x3e, r29	; 62
    5196:	8c 87       	std	Y+12, r24	; 0x0c
    5198:	4d 87       	std	Y+13, r20	; 0x0d
    519a:	5e 87       	std	Y+14, r21	; 0x0e
    519c:	6f 87       	std	Y+15, r22	; 0x0f
    519e:	78 8b       	std	Y+16, r23	; 0x10
    51a0:	09 8b       	std	Y+17, r16	; 0x11
    51a2:	1a 8b       	std	Y+18, r17	; 0x12
    51a4:	2b 8b       	std	Y+19, r18	; 0x13
    51a6:	3c 8b       	std	Y+20, r19	; 0x14
    51a8:	cd 8a       	std	Y+21, r12	; 0x15
    51aa:	de 8a       	std	Y+22, r13	; 0x16
    51ac:	ef 8a       	std	Y+23, r14	; 0x17
    51ae:	f8 8e       	std	Y+24, r15	; 0x18
    51b0:	a9 8e       	std	Y+25, r10	; 0x19
	uint8 bc[9];
	uint8 len = 5;
    51b2:	85 e0       	ldi	r24, 0x05	; 5
    51b4:	89 83       	std	Y+1, r24	; 0x01
	sint8 result = N_OK;
    51b6:	81 e0       	ldi	r24, 0x01	; 1
    51b8:	8a 83       	std	Y+2, r24	; 0x02

	bc[0] = cmd;
    51ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    51bc:	8b 83       	std	Y+3, r24	; 0x03
	switch (cmd) {
    51be:	8c 85       	ldd	r24, Y+12	; 0x0c
    51c0:	88 2f       	mov	r24, r24
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	09 2e       	mov	r0, r25
    51c6:	00 0c       	add	r0, r0
    51c8:	aa 0b       	sbc	r26, r26
    51ca:	bb 0b       	sbc	r27, r27
    51cc:	41 ec       	ldi	r20, 0xC1	; 193
    51ce:	50 e0       	ldi	r21, 0x00	; 0
    51d0:	2e e0       	ldi	r18, 0x0E	; 14
    51d2:	30 e0       	ldi	r19, 0x00	; 0
    51d4:	84 1b       	sub	r24, r20
    51d6:	95 0b       	sbc	r25, r21
    51d8:	28 17       	cp	r18, r24
    51da:	39 07       	cpc	r19, r25
    51dc:	08 f4       	brcc	.+2      	; 0x51e0 <spi_cmd+0x66>
    51de:	f1 c0       	rjmp	.+482    	; 0x53c2 <spi_cmd+0x248>
    51e0:	89 5a       	subi	r24, 0xA9	; 169
    51e2:	9f 4f       	sbci	r25, 0xFF	; 255
    51e4:	fc 01       	movw	r30, r24
    51e6:	0c 94 99 3b 	jmp	0x7732	; 0x7732 <__tablejump2__>
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    51ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    51ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    51ee:	af 85       	ldd	r26, Y+15	; 0x0f
    51f0:	b8 89       	ldd	r27, Y+16	; 0x10
    51f2:	cd 01       	movw	r24, r26
    51f4:	aa 27       	eor	r26, r26
    51f6:	bb 27       	eor	r27, r27
    51f8:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    51fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    51fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    51fe:	af 85       	ldd	r26, Y+15	; 0x0f
    5200:	b8 89       	ldd	r27, Y+16	; 0x10
    5202:	89 2f       	mov	r24, r25
    5204:	9a 2f       	mov	r25, r26
    5206:	ab 2f       	mov	r26, r27
    5208:	bb 27       	eor	r27, r27
    520a:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)adr;
    520c:	8d 85       	ldd	r24, Y+13	; 0x0d
    520e:	8e 83       	std	Y+6, r24	; 0x06
		len = 5;
    5210:	85 e0       	ldi	r24, 0x05	; 5
    5212:	89 83       	std	Y+1, r24	; 0x01
		break;
    5214:	d8 c0       	rjmp	.+432    	; 0x53c6 <spi_cmd+0x24c>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    5216:	8d 85       	ldd	r24, Y+13	; 0x0d
    5218:	9e 85       	ldd	r25, Y+14	; 0x0e
    521a:	af 85       	ldd	r26, Y+15	; 0x0f
    521c:	b8 89       	ldd	r27, Y+16	; 0x10
    521e:	89 2f       	mov	r24, r25
    5220:	9a 2f       	mov	r25, r26
    5222:	ab 2f       	mov	r26, r27
    5224:	bb 27       	eor	r27, r27
    5226:	8c 83       	std	Y+4, r24	; 0x04
		if(clockless)  bc[1] |= (1 << 7);
    5228:	89 8d       	ldd	r24, Y+25	; 0x19
    522a:	88 23       	and	r24, r24
    522c:	19 f0       	breq	.+6      	; 0x5234 <spi_cmd+0xba>
    522e:	8c 81       	ldd	r24, Y+4	; 0x04
    5230:	80 68       	ori	r24, 0x80	; 128
    5232:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)adr;
    5234:	8d 85       	ldd	r24, Y+13	; 0x0d
    5236:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = 0x00;
    5238:	1e 82       	std	Y+6, r1	; 0x06
		len = 5;
    523a:	85 e0       	ldi	r24, 0x05	; 5
    523c:	89 83       	std	Y+1, r24	; 0x01
		break;
    523e:	c3 c0       	rjmp	.+390    	; 0x53c6 <spi_cmd+0x24c>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    5240:	1c 82       	std	Y+4, r1	; 0x04
		bc[2] = 0x00;
    5242:	1d 82       	std	Y+5, r1	; 0x05
		bc[3] = 0x00;
    5244:	1e 82       	std	Y+6, r1	; 0x06
		len = 5;
    5246:	85 e0       	ldi	r24, 0x05	; 5
    5248:	89 83       	std	Y+1, r24	; 0x01
		break;
    524a:	bd c0       	rjmp	.+378    	; 0x53c6 <spi_cmd+0x24c>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    524c:	1c 82       	std	Y+4, r1	; 0x04
		bc[2] = 0x00;
    524e:	1d 82       	std	Y+5, r1	; 0x05
		bc[3] = 0x00;
    5250:	1e 82       	std	Y+6, r1	; 0x06
		len = 5;
    5252:	85 e0       	ldi	r24, 0x05	; 5
    5254:	89 83       	std	Y+1, r24	; 0x01
		break;
    5256:	b7 c0       	rjmp	.+366    	; 0x53c6 <spi_cmd+0x24c>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    5258:	8f ef       	ldi	r24, 0xFF	; 255
    525a:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = 0xff;
    525c:	8f ef       	ldi	r24, 0xFF	; 255
    525e:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = 0xff;
    5260:	8f ef       	ldi	r24, 0xFF	; 255
    5262:	8e 83       	std	Y+6, r24	; 0x06
		len = 5;
    5264:	85 e0       	ldi	r24, 0x05	; 5
    5266:	89 83       	std	Y+1, r24	; 0x01
		break;
    5268:	ae c0       	rjmp	.+348    	; 0x53c6 <spi_cmd+0x24c>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    526a:	8d 85       	ldd	r24, Y+13	; 0x0d
    526c:	9e 85       	ldd	r25, Y+14	; 0x0e
    526e:	af 85       	ldd	r26, Y+15	; 0x0f
    5270:	b8 89       	ldd	r27, Y+16	; 0x10
    5272:	cd 01       	movw	r24, r26
    5274:	aa 27       	eor	r26, r26
    5276:	bb 27       	eor	r27, r27
    5278:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    527a:	8d 85       	ldd	r24, Y+13	; 0x0d
    527c:	9e 85       	ldd	r25, Y+14	; 0x0e
    527e:	af 85       	ldd	r26, Y+15	; 0x0f
    5280:	b8 89       	ldd	r27, Y+16	; 0x10
    5282:	89 2f       	mov	r24, r25
    5284:	9a 2f       	mov	r25, r26
    5286:	ab 2f       	mov	r26, r27
    5288:	bb 27       	eor	r27, r27
    528a:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)adr;
    528c:	8d 85       	ldd	r24, Y+13	; 0x0d
    528e:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(sz >> 8);
    5290:	8d 89       	ldd	r24, Y+21	; 0x15
    5292:	9e 89       	ldd	r25, Y+22	; 0x16
    5294:	af 89       	ldd	r26, Y+23	; 0x17
    5296:	b8 8d       	ldd	r27, Y+24	; 0x18
    5298:	89 2f       	mov	r24, r25
    529a:	9a 2f       	mov	r25, r26
    529c:	ab 2f       	mov	r26, r27
    529e:	bb 27       	eor	r27, r27
    52a0:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(sz);
    52a2:	8d 89       	ldd	r24, Y+21	; 0x15
    52a4:	88 87       	std	Y+8, r24	; 0x08
		len = 7;
    52a6:	87 e0       	ldi	r24, 0x07	; 7
    52a8:	89 83       	std	Y+1, r24	; 0x01
		break;
    52aa:	8d c0       	rjmp	.+282    	; 0x53c6 <spi_cmd+0x24c>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    52ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    52ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    52b0:	af 85       	ldd	r26, Y+15	; 0x0f
    52b2:	b8 89       	ldd	r27, Y+16	; 0x10
    52b4:	cd 01       	movw	r24, r26
    52b6:	aa 27       	eor	r26, r26
    52b8:	bb 27       	eor	r27, r27
    52ba:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    52bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    52be:	9e 85       	ldd	r25, Y+14	; 0x0e
    52c0:	af 85       	ldd	r26, Y+15	; 0x0f
    52c2:	b8 89       	ldd	r27, Y+16	; 0x10
    52c4:	89 2f       	mov	r24, r25
    52c6:	9a 2f       	mov	r25, r26
    52c8:	ab 2f       	mov	r26, r27
    52ca:	bb 27       	eor	r27, r27
    52cc:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)adr;
    52ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    52d0:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(sz >> 16);
    52d2:	8d 89       	ldd	r24, Y+21	; 0x15
    52d4:	9e 89       	ldd	r25, Y+22	; 0x16
    52d6:	af 89       	ldd	r26, Y+23	; 0x17
    52d8:	b8 8d       	ldd	r27, Y+24	; 0x18
    52da:	cd 01       	movw	r24, r26
    52dc:	aa 27       	eor	r26, r26
    52de:	bb 27       	eor	r27, r27
    52e0:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(sz >> 8);
    52e2:	8d 89       	ldd	r24, Y+21	; 0x15
    52e4:	9e 89       	ldd	r25, Y+22	; 0x16
    52e6:	af 89       	ldd	r26, Y+23	; 0x17
    52e8:	b8 8d       	ldd	r27, Y+24	; 0x18
    52ea:	89 2f       	mov	r24, r25
    52ec:	9a 2f       	mov	r25, r26
    52ee:	ab 2f       	mov	r26, r27
    52f0:	bb 27       	eor	r27, r27
    52f2:	88 87       	std	Y+8, r24	; 0x08
		bc[6] = (uint8)(sz);
    52f4:	8d 89       	ldd	r24, Y+21	; 0x15
    52f6:	89 87       	std	Y+9, r24	; 0x09
		len = 8;
    52f8:	88 e0       	ldi	r24, 0x08	; 8
    52fa:	89 83       	std	Y+1, r24	; 0x01
		break;
    52fc:	64 c0       	rjmp	.+200    	; 0x53c6 <spi_cmd+0x24c>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    52fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5300:	9e 85       	ldd	r25, Y+14	; 0x0e
    5302:	af 85       	ldd	r26, Y+15	; 0x0f
    5304:	b8 89       	ldd	r27, Y+16	; 0x10
    5306:	89 2f       	mov	r24, r25
    5308:	9a 2f       	mov	r25, r26
    530a:	ab 2f       	mov	r26, r27
    530c:	bb 27       	eor	r27, r27
    530e:	8c 83       	std	Y+4, r24	; 0x04
		if(clockless)  bc[1] |= (1 << 7);
    5310:	89 8d       	ldd	r24, Y+25	; 0x19
    5312:	88 23       	and	r24, r24
    5314:	19 f0       	breq	.+6      	; 0x531c <spi_cmd+0x1a2>
    5316:	8c 81       	ldd	r24, Y+4	; 0x04
    5318:	80 68       	ori	r24, 0x80	; 128
    531a:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr);
    531c:	8d 85       	ldd	r24, Y+13	; 0x0d
    531e:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)(u32data >> 24);
    5320:	89 89       	ldd	r24, Y+17	; 0x11
    5322:	9a 89       	ldd	r25, Y+18	; 0x12
    5324:	ab 89       	ldd	r26, Y+19	; 0x13
    5326:	bc 89       	ldd	r27, Y+20	; 0x14
    5328:	8b 2f       	mov	r24, r27
    532a:	99 27       	eor	r25, r25
    532c:	aa 27       	eor	r26, r26
    532e:	bb 27       	eor	r27, r27
    5330:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(u32data >> 16);
    5332:	89 89       	ldd	r24, Y+17	; 0x11
    5334:	9a 89       	ldd	r25, Y+18	; 0x12
    5336:	ab 89       	ldd	r26, Y+19	; 0x13
    5338:	bc 89       	ldd	r27, Y+20	; 0x14
    533a:	cd 01       	movw	r24, r26
    533c:	aa 27       	eor	r26, r26
    533e:	bb 27       	eor	r27, r27
    5340:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(u32data >> 8);
    5342:	89 89       	ldd	r24, Y+17	; 0x11
    5344:	9a 89       	ldd	r25, Y+18	; 0x12
    5346:	ab 89       	ldd	r26, Y+19	; 0x13
    5348:	bc 89       	ldd	r27, Y+20	; 0x14
    534a:	89 2f       	mov	r24, r25
    534c:	9a 2f       	mov	r25, r26
    534e:	ab 2f       	mov	r26, r27
    5350:	bb 27       	eor	r27, r27
    5352:	88 87       	std	Y+8, r24	; 0x08
		bc[6] = (uint8)(u32data);
    5354:	89 89       	ldd	r24, Y+17	; 0x11
    5356:	89 87       	std	Y+9, r24	; 0x09
		len = 8;
    5358:	88 e0       	ldi	r24, 0x08	; 8
    535a:	89 83       	std	Y+1, r24	; 0x01
		break;
    535c:	34 c0       	rjmp	.+104    	; 0x53c6 <spi_cmd+0x24c>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    535e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5360:	9e 85       	ldd	r25, Y+14	; 0x0e
    5362:	af 85       	ldd	r26, Y+15	; 0x0f
    5364:	b8 89       	ldd	r27, Y+16	; 0x10
    5366:	cd 01       	movw	r24, r26
    5368:	aa 27       	eor	r26, r26
    536a:	bb 27       	eor	r27, r27
    536c:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    536e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5370:	9e 85       	ldd	r25, Y+14	; 0x0e
    5372:	af 85       	ldd	r26, Y+15	; 0x0f
    5374:	b8 89       	ldd	r27, Y+16	; 0x10
    5376:	89 2f       	mov	r24, r25
    5378:	9a 2f       	mov	r25, r26
    537a:	ab 2f       	mov	r26, r27
    537c:	bb 27       	eor	r27, r27
    537e:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)(adr);
    5380:	8d 85       	ldd	r24, Y+13	; 0x0d
    5382:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(u32data >> 24);
    5384:	89 89       	ldd	r24, Y+17	; 0x11
    5386:	9a 89       	ldd	r25, Y+18	; 0x12
    5388:	ab 89       	ldd	r26, Y+19	; 0x13
    538a:	bc 89       	ldd	r27, Y+20	; 0x14
    538c:	8b 2f       	mov	r24, r27
    538e:	99 27       	eor	r25, r25
    5390:	aa 27       	eor	r26, r26
    5392:	bb 27       	eor	r27, r27
    5394:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(u32data >> 16);
    5396:	89 89       	ldd	r24, Y+17	; 0x11
    5398:	9a 89       	ldd	r25, Y+18	; 0x12
    539a:	ab 89       	ldd	r26, Y+19	; 0x13
    539c:	bc 89       	ldd	r27, Y+20	; 0x14
    539e:	cd 01       	movw	r24, r26
    53a0:	aa 27       	eor	r26, r26
    53a2:	bb 27       	eor	r27, r27
    53a4:	88 87       	std	Y+8, r24	; 0x08
		bc[6] = (uint8)(u32data >> 8);
    53a6:	89 89       	ldd	r24, Y+17	; 0x11
    53a8:	9a 89       	ldd	r25, Y+18	; 0x12
    53aa:	ab 89       	ldd	r26, Y+19	; 0x13
    53ac:	bc 89       	ldd	r27, Y+20	; 0x14
    53ae:	89 2f       	mov	r24, r25
    53b0:	9a 2f       	mov	r25, r26
    53b2:	ab 2f       	mov	r26, r27
    53b4:	bb 27       	eor	r27, r27
    53b6:	89 87       	std	Y+9, r24	; 0x09
		bc[7] = (uint8)(u32data);
    53b8:	89 89       	ldd	r24, Y+17	; 0x11
    53ba:	8a 87       	std	Y+10, r24	; 0x0a
		len = 9;
    53bc:	89 e0       	ldi	r24, 0x09	; 9
    53be:	89 83       	std	Y+1, r24	; 0x01
		break;
    53c0:	02 c0       	rjmp	.+4      	; 0x53c6 <spi_cmd+0x24c>
	default:
		result = N_FAIL;
    53c2:	1a 82       	std	Y+2, r1	; 0x02
		break;
    53c4:	00 00       	nop
	}

	if (result) {
    53c6:	8a 81       	ldd	r24, Y+2	; 0x02
    53c8:	88 23       	and	r24, r24
    53ca:	89 f1       	breq	.+98     	; 0x542e <spi_cmd+0x2b4>
		if (!gu8Crc_off)
    53cc:	80 91 96 32 	lds	r24, 0x3296	; 0x803296 <gu8Crc_off>
    53d0:	88 23       	and	r24, r24
    53d2:	f9 f4       	brne	.+62     	; 0x5412 <spi_cmd+0x298>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    53d4:	89 81       	ldd	r24, Y+1	; 0x01
    53d6:	88 2f       	mov	r24, r24
    53d8:	90 e0       	ldi	r25, 0x00	; 0
    53da:	8c 01       	movw	r16, r24
    53dc:	01 50       	subi	r16, 0x01	; 1
    53de:	11 09       	sbc	r17, r1
    53e0:	89 81       	ldd	r24, Y+1	; 0x01
    53e2:	88 2f       	mov	r24, r24
    53e4:	90 e0       	ldi	r25, 0x00	; 0
    53e6:	01 97       	sbiw	r24, 0x01	; 1
    53e8:	09 2e       	mov	r0, r25
    53ea:	00 0c       	add	r0, r0
    53ec:	aa 0b       	sbc	r26, r26
    53ee:	bb 0b       	sbc	r27, r27
    53f0:	be 01       	movw	r22, r28
    53f2:	6d 5f       	subi	r22, 0xFD	; 253
    53f4:	7f 4f       	sbci	r23, 0xFF	; 255
    53f6:	9c 01       	movw	r18, r24
    53f8:	ad 01       	movw	r20, r26
    53fa:	8f e7       	ldi	r24, 0x7F	; 127
    53fc:	0e 94 87 28 	call	0x510e	; 0x510e <crc7>
    5400:	28 2f       	mov	r18, r24
    5402:	22 0f       	add	r18, r18
    5404:	ce 01       	movw	r24, r28
    5406:	03 96       	adiw	r24, 0x03	; 3
    5408:	80 0f       	add	r24, r16
    540a:	91 1f       	adc	r25, r17
    540c:	fc 01       	movw	r30, r24
    540e:	20 83       	st	Z, r18
    5410:	03 c0       	rjmp	.+6      	; 0x5418 <spi_cmd+0x29e>
		else
			len-=1;
    5412:	89 81       	ldd	r24, Y+1	; 0x01
    5414:	81 50       	subi	r24, 0x01	; 1
    5416:	89 83       	std	Y+1, r24	; 0x01

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    5418:	89 81       	ldd	r24, Y+1	; 0x01
    541a:	28 2f       	mov	r18, r24
    541c:	30 e0       	ldi	r19, 0x00	; 0
    541e:	ce 01       	movw	r24, r28
    5420:	03 96       	adiw	r24, 0x03	; 3
    5422:	b9 01       	movw	r22, r18
    5424:	0e 94 42 28 	call	0x5084	; 0x5084 <nmi_spi_write>
    5428:	88 23       	and	r24, r24
    542a:	09 f0       	breq	.+2      	; 0x542e <spi_cmd+0x2b4>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
    542c:	1a 82       	std	Y+2, r1	; 0x02
		}
	}

	return result;
    542e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5430:	69 96       	adiw	r28, 0x19	; 25
    5432:	cd bf       	out	0x3d, r28	; 61
    5434:	de bf       	out	0x3e, r29	; 62
    5436:	df 91       	pop	r29
    5438:	cf 91       	pop	r28
    543a:	1f 91       	pop	r17
    543c:	0f 91       	pop	r16
    543e:	ff 90       	pop	r15
    5440:	ef 90       	pop	r14
    5442:	df 90       	pop	r13
    5444:	cf 90       	pop	r12
    5446:	af 90       	pop	r10
    5448:	08 95       	ret

0000544a <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    544a:	cf 93       	push	r28
    544c:	df 93       	push	r29
    544e:	cd b7       	in	r28, 0x3d	; 61
    5450:	de b7       	in	r29, 0x3e	; 62
    5452:	26 97       	sbiw	r28, 0x06	; 6
    5454:	cd bf       	out	0x3d, r28	; 61
    5456:	de bf       	out	0x3e, r29	; 62
    5458:	8e 83       	std	Y+6, r24	; 0x06
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    545a:	81 e0       	ldi	r24, 0x01	; 1
    545c:	8a 83       	std	Y+2, r24	; 0x02

    if (!gu8Crc_off)
    545e:	80 91 96 32 	lds	r24, 0x3296	; 0x803296 <gu8Crc_off>
    5462:	88 23       	and	r24, r24
    5464:	19 f4       	brne	.+6      	; 0x546c <spi_data_rsp+0x22>
		len = 2;
    5466:	82 e0       	ldi	r24, 0x02	; 2
    5468:	89 83       	std	Y+1, r24	; 0x01
    546a:	02 c0       	rjmp	.+4      	; 0x5470 <spi_data_rsp+0x26>
	else
		len = 3;
    546c:	83 e0       	ldi	r24, 0x03	; 3
    546e:	89 83       	std	Y+1, r24	; 0x01

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    5470:	89 81       	ldd	r24, Y+1	; 0x01
    5472:	28 2f       	mov	r18, r24
    5474:	30 e0       	ldi	r19, 0x00	; 0
    5476:	ce 01       	movw	r24, r28
    5478:	03 96       	adiw	r24, 0x03	; 3
    547a:	b9 01       	movw	r22, r18
    547c:	0e 94 21 28 	call	0x5042	; 0x5042 <nmi_spi_read>
    5480:	88 23       	and	r24, r24
    5482:	11 f0       	breq	.+4      	; 0x5488 <spi_data_rsp+0x3e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
    5484:	1a 82       	std	Y+2, r1	; 0x02
		goto _fail_;
    5486:	1c c0       	rjmp	.+56     	; 0x54c0 <spi_data_rsp+0x76>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    5488:	89 81       	ldd	r24, Y+1	; 0x01
    548a:	88 2f       	mov	r24, r24
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	01 97       	sbiw	r24, 0x01	; 1
    5490:	9e 01       	movw	r18, r28
    5492:	2d 5f       	subi	r18, 0xFD	; 253
    5494:	3f 4f       	sbci	r19, 0xFF	; 255
    5496:	82 0f       	add	r24, r18
    5498:	93 1f       	adc	r25, r19
    549a:	fc 01       	movw	r30, r24
    549c:	80 81       	ld	r24, Z
    549e:	88 23       	and	r24, r24
    54a0:	69 f4       	brne	.+26     	; 0x54bc <spi_data_rsp+0x72>
    54a2:	89 81       	ldd	r24, Y+1	; 0x01
    54a4:	88 2f       	mov	r24, r24
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	02 97       	sbiw	r24, 0x02	; 2
    54aa:	9e 01       	movw	r18, r28
    54ac:	2d 5f       	subi	r18, 0xFD	; 253
    54ae:	3f 4f       	sbci	r19, 0xFF	; 255
    54b0:	82 0f       	add	r24, r18
    54b2:	93 1f       	adc	r25, r19
    54b4:	fc 01       	movw	r30, r24
    54b6:	80 81       	ld	r24, Z
    54b8:	83 3c       	cpi	r24, 0xC3	; 195
    54ba:	11 f0       	breq	.+4      	; 0x54c0 <spi_data_rsp+0x76>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
		result = N_FAIL;
    54bc:	1a 82       	std	Y+2, r1	; 0x02
		goto _fail_;
    54be:	00 00       	nop
	}
_fail_:

	return result;
    54c0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    54c2:	26 96       	adiw	r28, 0x06	; 6
    54c4:	cd bf       	out	0x3d, r28	; 61
    54c6:	de bf       	out	0x3e, r29	; 62
    54c8:	df 91       	pop	r29
    54ca:	cf 91       	pop	r28
    54cc:	08 95       	ret

000054ce <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    54ce:	cf 93       	push	r28
    54d0:	df 93       	push	r29
    54d2:	00 d0       	rcall	.+0      	; 0x54d4 <spi_cmd_rsp+0x6>
    54d4:	00 d0       	rcall	.+0      	; 0x54d6 <spi_cmd_rsp+0x8>
    54d6:	cd b7       	in	r28, 0x3d	; 61
    54d8:	de b7       	in	r29, 0x3e	; 62
    54da:	8c 83       	std	Y+4, r24	; 0x04
	uint8 rsp;
	sint8 result = N_OK;
    54dc:	81 e0       	ldi	r24, 0x01	; 1
    54de:	89 83       	std	Y+1, r24	; 0x01
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    54e0:	8c 81       	ldd	r24, Y+4	; 0x04
    54e2:	8f 3c       	cpi	r24, 0xCF	; 207
    54e4:	31 f0       	breq	.+12     	; 0x54f2 <spi_cmd_rsp+0x24>
    54e6:	8c 81       	ldd	r24, Y+4	; 0x04
    54e8:	85 3c       	cpi	r24, 0xC5	; 197
    54ea:	19 f0       	breq	.+6      	; 0x54f2 <spi_cmd_rsp+0x24>
		 (cmd == CMD_TERMINATE) ||
    54ec:	8c 81       	ldd	r24, Y+4	; 0x04
    54ee:	86 3c       	cpi	r24, 0xC6	; 198
    54f0:	51 f4       	brne	.+20     	; 0x5506 <spi_cmd_rsp+0x38>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    54f2:	ce 01       	movw	r24, r28
    54f4:	03 96       	adiw	r24, 0x03	; 3
    54f6:	61 e0       	ldi	r22, 0x01	; 1
    54f8:	70 e0       	ldi	r23, 0x00	; 0
    54fa:	0e 94 21 28 	call	0x5042	; 0x5042 <nmi_spi_read>
    54fe:	88 23       	and	r24, r24
    5500:	11 f0       	breq	.+4      	; 0x5506 <spi_cmd_rsp+0x38>
			result = N_FAIL;
    5502:	19 82       	std	Y+1, r1	; 0x01
			goto _fail_;
    5504:	2b c0       	rjmp	.+86     	; 0x555c <spi_cmd_rsp+0x8e>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    5506:	8a e0       	ldi	r24, 0x0A	; 10
    5508:	8a 83       	std	Y+2, r24	; 0x02
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    550a:	ce 01       	movw	r24, r28
    550c:	03 96       	adiw	r24, 0x03	; 3
    550e:	61 e0       	ldi	r22, 0x01	; 1
    5510:	70 e0       	ldi	r23, 0x00	; 0
    5512:	0e 94 21 28 	call	0x5042	; 0x5042 <nmi_spi_read>
    5516:	88 23       	and	r24, r24
    5518:	11 f0       	breq	.+4      	; 0x551e <spi_cmd_rsp+0x50>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
    551a:	19 82       	std	Y+1, r1	; 0x01
			goto _fail_;
    551c:	1f c0       	rjmp	.+62     	; 0x555c <spi_cmd_rsp+0x8e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    551e:	9b 81       	ldd	r25, Y+3	; 0x03
    5520:	8c 81       	ldd	r24, Y+4	; 0x04
    5522:	98 17       	cp	r25, r24
    5524:	31 f0       	breq	.+12     	; 0x5532 <spi_cmd_rsp+0x64>
    5526:	8a 81       	ldd	r24, Y+2	; 0x02
    5528:	98 2f       	mov	r25, r24
    552a:	91 50       	subi	r25, 0x01	; 1
    552c:	9a 83       	std	Y+2, r25	; 0x02
    552e:	18 16       	cp	r1, r24
    5530:	64 f3       	brlt	.-40     	; 0x550a <spi_cmd_rsp+0x3c>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    5532:	8a e0       	ldi	r24, 0x0A	; 10
    5534:	8a 83       	std	Y+2, r24	; 0x02
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5536:	ce 01       	movw	r24, r28
    5538:	03 96       	adiw	r24, 0x03	; 3
    553a:	61 e0       	ldi	r22, 0x01	; 1
    553c:	70 e0       	ldi	r23, 0x00	; 0
    553e:	0e 94 21 28 	call	0x5042	; 0x5042 <nmi_spi_read>
    5542:	88 23       	and	r24, r24
    5544:	11 f0       	breq	.+4      	; 0x554a <spi_cmd_rsp+0x7c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
    5546:	19 82       	std	Y+1, r1	; 0x01
			goto _fail_;
    5548:	09 c0       	rjmp	.+18     	; 0x555c <spi_cmd_rsp+0x8e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    554a:	8b 81       	ldd	r24, Y+3	; 0x03
    554c:	88 23       	and	r24, r24
    554e:	31 f0       	breq	.+12     	; 0x555c <spi_cmd_rsp+0x8e>
    5550:	8a 81       	ldd	r24, Y+2	; 0x02
    5552:	98 2f       	mov	r25, r24
    5554:	91 50       	subi	r25, 0x01	; 1
    5556:	9a 83       	std	Y+2, r25	; 0x02
    5558:	18 16       	cp	r1, r24
    555a:	6c f3       	brlt	.-38     	; 0x5536 <spi_cmd_rsp+0x68>

_fail_:

	return result;
    555c:	89 81       	ldd	r24, Y+1	; 0x01
}
    555e:	24 96       	adiw	r28, 0x04	; 4
    5560:	cd bf       	out	0x3d, r28	; 61
    5562:	de bf       	out	0x3e, r29	; 62
    5564:	df 91       	pop	r29
    5566:	cf 91       	pop	r28
    5568:	08 95       	ret

0000556a <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    556a:	cf 93       	push	r28
    556c:	df 93       	push	r29
    556e:	cd b7       	in	r28, 0x3d	; 61
    5570:	de b7       	in	r29, 0x3e	; 62
    5572:	2f 97       	sbiw	r28, 0x0f	; 15
    5574:	cd bf       	out	0x3d, r28	; 61
    5576:	de bf       	out	0x3e, r29	; 62
    5578:	8b 87       	std	Y+11, r24	; 0x0b
    557a:	9c 87       	std	Y+12, r25	; 0x0c
    557c:	6d 87       	std	Y+13, r22	; 0x0d
    557e:	7e 87       	std	Y+14, r23	; 0x0e
    5580:	4f 87       	std	Y+15, r20	; 0x0f
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    5582:	81 e0       	ldi	r24, 0x01	; 1
    5584:	8f 83       	std	Y+7, r24	; 0x07
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    5586:	1b 82       	std	Y+3, r1	; 0x03
    5588:	1c 82       	std	Y+4, r1	; 0x04
	do {
		if (sz <= DATA_PKT_SZ)
    558a:	8d 85       	ldd	r24, Y+13	; 0x0d
    558c:	9e 85       	ldd	r25, Y+14	; 0x0e
    558e:	81 30       	cpi	r24, 0x01	; 1
    5590:	90 42       	sbci	r25, 0x20	; 32
    5592:	28 f4       	brcc	.+10     	; 0x559e <spi_data_read+0x34>
			nbytes = sz;
    5594:	8d 85       	ldd	r24, Y+13	; 0x0d
    5596:	9e 85       	ldd	r25, Y+14	; 0x0e
    5598:	8d 83       	std	Y+5, r24	; 0x05
    559a:	9e 83       	std	Y+6, r25	; 0x06
    559c:	04 c0       	rjmp	.+8      	; 0x55a6 <spi_data_read+0x3c>
		else
			nbytes = DATA_PKT_SZ;
    559e:	80 e0       	ldi	r24, 0x00	; 0
    55a0:	90 e2       	ldi	r25, 0x20	; 32
    55a2:	8d 83       	std	Y+5, r24	; 0x05
    55a4:	9e 83       	std	Y+6, r25	; 0x06

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    55a6:	8a e0       	ldi	r24, 0x0A	; 10
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	89 83       	std	Y+1, r24	; 0x01
    55ac:	9a 83       	std	Y+2, r25	; 0x02
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    55ae:	ce 01       	movw	r24, r28
    55b0:	0a 96       	adiw	r24, 0x0a	; 10
    55b2:	61 e0       	ldi	r22, 0x01	; 1
    55b4:	70 e0       	ldi	r23, 0x00	; 0
    55b6:	0e 94 21 28 	call	0x5042	; 0x5042 <nmi_spi_read>
    55ba:	88 23       	and	r24, r24
    55bc:	11 f0       	breq	.+4      	; 0x55c2 <spi_data_read+0x58>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
    55be:	1f 82       	std	Y+7, r1	; 0x07
				break;
    55c0:	14 c0       	rjmp	.+40     	; 0x55ea <spi_data_read+0x80>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    55c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    55c4:	82 95       	swap	r24
    55c6:	8f 70       	andi	r24, 0x0F	; 15
    55c8:	88 2f       	mov	r24, r24
    55ca:	90 e0       	ldi	r25, 0x00	; 0
    55cc:	8f 70       	andi	r24, 0x0F	; 15
    55ce:	99 27       	eor	r25, r25
    55d0:	0f 97       	sbiw	r24, 0x0f	; 15
    55d2:	51 f0       	breq	.+20     	; 0x55e8 <spi_data_read+0x7e>
				break;
		} while (retry--);
    55d4:	89 81       	ldd	r24, Y+1	; 0x01
    55d6:	9a 81       	ldd	r25, Y+2	; 0x02
    55d8:	9c 01       	movw	r18, r24
    55da:	21 50       	subi	r18, 0x01	; 1
    55dc:	31 09       	sbc	r19, r1
    55de:	29 83       	std	Y+1, r18	; 0x01
    55e0:	3a 83       	std	Y+2, r19	; 0x02
    55e2:	89 2b       	or	r24, r25
    55e4:	21 f7       	brne	.-56     	; 0x55ae <spi_data_read+0x44>
    55e6:	01 c0       	rjmp	.+2      	; 0x55ea <spi_data_read+0x80>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    55e8:	00 00       	nop
		} while (retry--);

		if (result == N_FAIL)
    55ea:	8f 81       	ldd	r24, Y+7	; 0x07
    55ec:	88 23       	and	r24, r24
    55ee:	09 f4       	brne	.+2      	; 0x55f2 <spi_data_read+0x88>
    55f0:	3f c0       	rjmp	.+126    	; 0x5670 <spi_data_read+0x106>
			break;

		if (retry <= 0) {
    55f2:	89 81       	ldd	r24, Y+1	; 0x01
    55f4:	9a 81       	ldd	r25, Y+2	; 0x02
    55f6:	18 16       	cp	r1, r24
    55f8:	19 06       	cpc	r1, r25
    55fa:	14 f0       	brlt	.+4      	; 0x5600 <spi_data_read+0x96>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
    55fc:	1f 82       	std	Y+7, r1	; 0x07
			break;
    55fe:	39 c0       	rjmp	.+114    	; 0x5672 <spi_data_read+0x108>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    5600:	4d 81       	ldd	r20, Y+5	; 0x05
    5602:	5e 81       	ldd	r21, Y+6	; 0x06
    5604:	8b 81       	ldd	r24, Y+3	; 0x03
    5606:	9c 81       	ldd	r25, Y+4	; 0x04
    5608:	2b 85       	ldd	r18, Y+11	; 0x0b
    560a:	3c 85       	ldd	r19, Y+12	; 0x0c
    560c:	82 0f       	add	r24, r18
    560e:	93 1f       	adc	r25, r19
    5610:	ba 01       	movw	r22, r20
    5612:	0e 94 21 28 	call	0x5042	; 0x5042 <nmi_spi_read>
    5616:	88 23       	and	r24, r24
    5618:	11 f0       	breq	.+4      	; 0x561e <spi_data_read+0xb4>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
    561a:	1f 82       	std	Y+7, r1	; 0x07
			break;
    561c:	2a c0       	rjmp	.+84     	; 0x5672 <spi_data_read+0x108>
		}
		if(!clockless)
    561e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5620:	88 23       	and	r24, r24
    5622:	71 f4       	brne	.+28     	; 0x5640 <spi_data_read+0xd6>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    5624:	80 91 96 32 	lds	r24, 0x3296	; 0x803296 <gu8Crc_off>
    5628:	88 23       	and	r24, r24
    562a:	51 f4       	brne	.+20     	; 0x5640 <spi_data_read+0xd6>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    562c:	ce 01       	movw	r24, r28
    562e:	08 96       	adiw	r24, 0x08	; 8
    5630:	62 e0       	ldi	r22, 0x02	; 2
    5632:	70 e0       	ldi	r23, 0x00	; 0
    5634:	0e 94 21 28 	call	0x5042	; 0x5042 <nmi_spi_read>
    5638:	88 23       	and	r24, r24
    563a:	11 f0       	breq	.+4      	; 0x5640 <spi_data_read+0xd6>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
					result = N_FAIL;
    563c:	1f 82       	std	Y+7, r1	; 0x07
					break;
    563e:	19 c0       	rjmp	.+50     	; 0x5672 <spi_data_read+0x108>
				}
			}
		}
		ix += nbytes;
    5640:	2b 81       	ldd	r18, Y+3	; 0x03
    5642:	3c 81       	ldd	r19, Y+4	; 0x04
    5644:	8d 81       	ldd	r24, Y+5	; 0x05
    5646:	9e 81       	ldd	r25, Y+6	; 0x06
    5648:	82 0f       	add	r24, r18
    564a:	93 1f       	adc	r25, r19
    564c:	8b 83       	std	Y+3, r24	; 0x03
    564e:	9c 83       	std	Y+4, r25	; 0x04
		sz -= nbytes;
    5650:	8d 81       	ldd	r24, Y+5	; 0x05
    5652:	9e 81       	ldd	r25, Y+6	; 0x06
    5654:	2d 85       	ldd	r18, Y+13	; 0x0d
    5656:	3e 85       	ldd	r19, Y+14	; 0x0e
    5658:	a9 01       	movw	r20, r18
    565a:	48 1b       	sub	r20, r24
    565c:	59 0b       	sbc	r21, r25
    565e:	ca 01       	movw	r24, r20
    5660:	8d 87       	std	Y+13, r24	; 0x0d
    5662:	9e 87       	std	Y+14, r25	; 0x0e

	} while (sz);
    5664:	8d 85       	ldd	r24, Y+13	; 0x0d
    5666:	9e 85       	ldd	r25, Y+14	; 0x0e
    5668:	89 2b       	or	r24, r25
    566a:	09 f0       	breq	.+2      	; 0x566e <spi_data_read+0x104>
    566c:	8e cf       	rjmp	.-228    	; 0x558a <spi_data_read+0x20>
    566e:	01 c0       	rjmp	.+2      	; 0x5672 <spi_data_read+0x108>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    5670:	00 00       	nop
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    5672:	8f 81       	ldd	r24, Y+7	; 0x07
}
    5674:	2f 96       	adiw	r28, 0x0f	; 15
    5676:	cd bf       	out	0x3d, r28	; 61
    5678:	de bf       	out	0x3e, r29	; 62
    567a:	df 91       	pop	r29
    567c:	cf 91       	pop	r28
    567e:	08 95       	ret

00005680 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    5680:	cf 93       	push	r28
    5682:	df 93       	push	r29
    5684:	cd b7       	in	r28, 0x3d	; 61
    5686:	de b7       	in	r29, 0x3e	; 62
    5688:	2d 97       	sbiw	r28, 0x0d	; 13
    568a:	cd bf       	out	0x3d, r28	; 61
    568c:	de bf       	out	0x3e, r29	; 62
    568e:	8a 87       	std	Y+10, r24	; 0x0a
    5690:	9b 87       	std	Y+11, r25	; 0x0b
    5692:	6c 87       	std	Y+12, r22	; 0x0c
    5694:	7d 87       	std	Y+13, r23	; 0x0d
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    5696:	81 e0       	ldi	r24, 0x01	; 1
    5698:	8d 83       	std	Y+5, r24	; 0x05
	uint8 cmd, order, crc[2] = {0};
    569a:	18 86       	std	Y+8, r1	; 0x08
    569c:	19 86       	std	Y+9, r1	; 0x09
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    569e:	19 82       	std	Y+1, r1	; 0x01
    56a0:	1a 82       	std	Y+2, r1	; 0x02
	do {
		if (sz <= DATA_PKT_SZ)
    56a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    56a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    56a6:	81 30       	cpi	r24, 0x01	; 1
    56a8:	90 42       	sbci	r25, 0x20	; 32
    56aa:	28 f4       	brcc	.+10     	; 0x56b6 <spi_data_write+0x36>
			nbytes = sz;
    56ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    56ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    56b0:	8b 83       	std	Y+3, r24	; 0x03
    56b2:	9c 83       	std	Y+4, r25	; 0x04
    56b4:	04 c0       	rjmp	.+8      	; 0x56be <spi_data_write+0x3e>
		else
			nbytes = DATA_PKT_SZ;
    56b6:	80 e0       	ldi	r24, 0x00	; 0
    56b8:	90 e2       	ldi	r25, 0x20	; 32
    56ba:	8b 83       	std	Y+3, r24	; 0x03
    56bc:	9c 83       	std	Y+4, r25	; 0x04

		/**
			Write command
		**/
		cmd = 0xf0;
    56be:	80 ef       	ldi	r24, 0xF0	; 240
    56c0:	8f 83       	std	Y+7, r24	; 0x07
		if (ix == 0)  {
    56c2:	89 81       	ldd	r24, Y+1	; 0x01
    56c4:	9a 81       	ldd	r25, Y+2	; 0x02
    56c6:	89 2b       	or	r24, r25
    56c8:	59 f4       	brne	.+22     	; 0x56e0 <spi_data_write+0x60>
			if (sz <= DATA_PKT_SZ)
    56ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    56cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    56ce:	81 30       	cpi	r24, 0x01	; 1
    56d0:	90 42       	sbci	r25, 0x20	; 32
    56d2:	18 f4       	brcc	.+6      	; 0x56da <spi_data_write+0x5a>
				order = 0x3;
    56d4:	83 e0       	ldi	r24, 0x03	; 3
    56d6:	8e 83       	std	Y+6, r24	; 0x06
    56d8:	0d c0       	rjmp	.+26     	; 0x56f4 <spi_data_write+0x74>
			else
				order = 0x1;
    56da:	81 e0       	ldi	r24, 0x01	; 1
    56dc:	8e 83       	std	Y+6, r24	; 0x06
    56de:	0a c0       	rjmp	.+20     	; 0x56f4 <spi_data_write+0x74>
		} else {
			if (sz <= DATA_PKT_SZ)
    56e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    56e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    56e4:	81 30       	cpi	r24, 0x01	; 1
    56e6:	90 42       	sbci	r25, 0x20	; 32
    56e8:	18 f4       	brcc	.+6      	; 0x56f0 <spi_data_write+0x70>
				order = 0x3;
    56ea:	83 e0       	ldi	r24, 0x03	; 3
    56ec:	8e 83       	std	Y+6, r24	; 0x06
    56ee:	02 c0       	rjmp	.+4      	; 0x56f4 <spi_data_write+0x74>
			else
				order = 0x2;
    56f0:	82 e0       	ldi	r24, 0x02	; 2
    56f2:	8e 83       	std	Y+6, r24	; 0x06
		}
		cmd |= order;
    56f4:	9f 81       	ldd	r25, Y+7	; 0x07
    56f6:	8e 81       	ldd	r24, Y+6	; 0x06
    56f8:	89 2b       	or	r24, r25
    56fa:	8f 83       	std	Y+7, r24	; 0x07
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    56fc:	ce 01       	movw	r24, r28
    56fe:	07 96       	adiw	r24, 0x07	; 7
    5700:	61 e0       	ldi	r22, 0x01	; 1
    5702:	70 e0       	ldi	r23, 0x00	; 0
    5704:	0e 94 42 28 	call	0x5084	; 0x5084 <nmi_spi_write>
    5708:	88 23       	and	r24, r24
    570a:	11 f0       	breq	.+4      	; 0x5710 <spi_data_write+0x90>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
			result = N_FAIL;
    570c:	1d 82       	std	Y+5, r1	; 0x05
			break;
    570e:	34 c0       	rjmp	.+104    	; 0x5778 <spi_data_write+0xf8>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    5710:	89 81       	ldd	r24, Y+1	; 0x01
    5712:	9a 81       	ldd	r25, Y+2	; 0x02
    5714:	2a 85       	ldd	r18, Y+10	; 0x0a
    5716:	3b 85       	ldd	r19, Y+11	; 0x0b
    5718:	82 0f       	add	r24, r18
    571a:	93 1f       	adc	r25, r19
    571c:	2b 81       	ldd	r18, Y+3	; 0x03
    571e:	3c 81       	ldd	r19, Y+4	; 0x04
    5720:	b9 01       	movw	r22, r18
    5722:	0e 94 42 28 	call	0x5084	; 0x5084 <nmi_spi_write>
    5726:	88 23       	and	r24, r24
    5728:	11 f0       	breq	.+4      	; 0x572e <spi_data_write+0xae>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
			result = N_FAIL;
    572a:	1d 82       	std	Y+5, r1	; 0x05
			break;
    572c:	25 c0       	rjmp	.+74     	; 0x5778 <spi_data_write+0xf8>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    572e:	80 91 96 32 	lds	r24, 0x3296	; 0x803296 <gu8Crc_off>
    5732:	88 23       	and	r24, r24
    5734:	51 f4       	brne	.+20     	; 0x574a <spi_data_write+0xca>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    5736:	ce 01       	movw	r24, r28
    5738:	08 96       	adiw	r24, 0x08	; 8
    573a:	62 e0       	ldi	r22, 0x02	; 2
    573c:	70 e0       	ldi	r23, 0x00	; 0
    573e:	0e 94 42 28 	call	0x5084	; 0x5084 <nmi_spi_write>
    5742:	88 23       	and	r24, r24
    5744:	11 f0       	breq	.+4      	; 0x574a <spi_data_write+0xca>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
				result = N_FAIL;
    5746:	1d 82       	std	Y+5, r1	; 0x05
				break;
    5748:	17 c0       	rjmp	.+46     	; 0x5778 <spi_data_write+0xf8>
			}
		}

		ix += nbytes;
    574a:	29 81       	ldd	r18, Y+1	; 0x01
    574c:	3a 81       	ldd	r19, Y+2	; 0x02
    574e:	8b 81       	ldd	r24, Y+3	; 0x03
    5750:	9c 81       	ldd	r25, Y+4	; 0x04
    5752:	82 0f       	add	r24, r18
    5754:	93 1f       	adc	r25, r19
    5756:	89 83       	std	Y+1, r24	; 0x01
    5758:	9a 83       	std	Y+2, r25	; 0x02
		sz -= nbytes;
    575a:	2c 85       	ldd	r18, Y+12	; 0x0c
    575c:	3d 85       	ldd	r19, Y+13	; 0x0d
    575e:	8b 81       	ldd	r24, Y+3	; 0x03
    5760:	9c 81       	ldd	r25, Y+4	; 0x04
    5762:	a9 01       	movw	r20, r18
    5764:	48 1b       	sub	r20, r24
    5766:	59 0b       	sbc	r21, r25
    5768:	ca 01       	movw	r24, r20
    576a:	8c 87       	std	Y+12, r24	; 0x0c
    576c:	9d 87       	std	Y+13, r25	; 0x0d
	} while (sz);
    576e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5770:	9d 85       	ldd	r25, Y+13	; 0x0d
    5772:	89 2b       	or	r24, r25
    5774:	09 f0       	breq	.+2      	; 0x5778 <spi_data_write+0xf8>
    5776:	95 cf       	rjmp	.-214    	; 0x56a2 <spi_data_write+0x22>


	return result;
    5778:	8d 81       	ldd	r24, Y+5	; 0x05
}
    577a:	2d 96       	adiw	r28, 0x0d	; 13
    577c:	cd bf       	out	0x3d, r28	; 61
    577e:	de bf       	out	0x3e, r29	; 62
    5780:	df 91       	pop	r29
    5782:	cf 91       	pop	r28
    5784:	08 95       	ret

00005786 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    5786:	af 92       	push	r10
    5788:	cf 92       	push	r12
    578a:	df 92       	push	r13
    578c:	ef 92       	push	r14
    578e:	ff 92       	push	r15
    5790:	0f 93       	push	r16
    5792:	1f 93       	push	r17
    5794:	cf 93       	push	r28
    5796:	df 93       	push	r29
    5798:	cd b7       	in	r28, 0x3d	; 61
    579a:	de b7       	in	r29, 0x3e	; 62
    579c:	2c 97       	sbiw	r28, 0x0c	; 12
    579e:	cd bf       	out	0x3d, r28	; 61
    57a0:	de bf       	out	0x3e, r29	; 62
    57a2:	6d 83       	std	Y+5, r22	; 0x05
    57a4:	7e 83       	std	Y+6, r23	; 0x06
    57a6:	8f 83       	std	Y+7, r24	; 0x07
    57a8:	98 87       	std	Y+8, r25	; 0x08
    57aa:	29 87       	std	Y+9, r18	; 0x09
    57ac:	3a 87       	std	Y+10, r19	; 0x0a
    57ae:	4b 87       	std	Y+11, r20	; 0x0b
    57b0:	5c 87       	std	Y+12, r21	; 0x0c
	uint8 retry = SPI_RETRY_COUNT;
    57b2:	8a e0       	ldi	r24, 0x0A	; 10
    57b4:	89 83       	std	Y+1, r24	; 0x01
	sint8 result = N_OK;
    57b6:	81 e0       	ldi	r24, 0x01	; 1
    57b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 cmd = CMD_SINGLE_WRITE;
    57ba:	89 ec       	ldi	r24, 0xC9	; 201
    57bc:	8b 83       	std	Y+3, r24	; 0x03
	uint8 clockless = 0;
    57be:	1c 82       	std	Y+4, r1	; 0x04
	
_RETRY_:	
	if (addr <= 0x30)
    57c0:	8d 81       	ldd	r24, Y+5	; 0x05
    57c2:	9e 81       	ldd	r25, Y+6	; 0x06
    57c4:	af 81       	ldd	r26, Y+7	; 0x07
    57c6:	b8 85       	ldd	r27, Y+8	; 0x08
    57c8:	c1 97       	sbiw	r24, 0x31	; 49
    57ca:	a1 05       	cpc	r26, r1
    57cc:	b1 05       	cpc	r27, r1
    57ce:	28 f4       	brcc	.+10     	; 0x57da <spi_write_reg+0x54>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    57d0:	83 ec       	ldi	r24, 0xC3	; 195
    57d2:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 1;
    57d4:	81 e0       	ldi	r24, 0x01	; 1
    57d6:	8c 83       	std	Y+4, r24	; 0x04
    57d8:	03 c0       	rjmp	.+6      	; 0x57e0 <spi_write_reg+0x5a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    57da:	89 ec       	ldi	r24, 0xC9	; 201
    57dc:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 0;
    57de:	1c 82       	std	Y+4, r1	; 0x04
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    57e0:	29 85       	ldd	r18, Y+9	; 0x09
    57e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    57e4:	4b 85       	ldd	r20, Y+11	; 0x0b
    57e6:	5c 85       	ldd	r21, Y+12	; 0x0c
    57e8:	8d 81       	ldd	r24, Y+5	; 0x05
    57ea:	9e 81       	ldd	r25, Y+6	; 0x06
    57ec:	af 81       	ldd	r26, Y+7	; 0x07
    57ee:	b8 85       	ldd	r27, Y+8	; 0x08
    57f0:	ac 80       	ldd	r10, Y+4	; 0x04
    57f2:	c1 2c       	mov	r12, r1
    57f4:	d1 2c       	mov	r13, r1
    57f6:	76 01       	movw	r14, r12
    57f8:	68 94       	set
    57fa:	c2 f8       	bld	r12, 2
    57fc:	89 01       	movw	r16, r18
    57fe:	9a 01       	movw	r18, r20
    5800:	ac 01       	movw	r20, r24
    5802:	bd 01       	movw	r22, r26
    5804:	8b 81       	ldd	r24, Y+3	; 0x03
    5806:	0e 94 bd 28 	call	0x517a	; 0x517a <spi_cmd>
    580a:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    580c:	8a 81       	ldd	r24, Y+2	; 0x02
    580e:	81 30       	cpi	r24, 0x01	; 1
    5810:	29 f4       	brne	.+10     	; 0x581c <spi_write_reg+0x96>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    5812:	8b 81       	ldd	r24, Y+3	; 0x03
    5814:	0e 94 67 2a 	call	0x54ce	; 0x54ce <spi_cmd_rsp>
    5818:	8a 83       	std	Y+2, r24	; 0x02
    581a:	01 c0       	rjmp	.+2      	; 0x581e <spi_write_reg+0x98>

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    581c:	00 00       	nop
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    581e:	8a 81       	ldd	r24, Y+2	; 0x02
    5820:	81 30       	cpi	r24, 0x01	; 1
    5822:	19 f1       	breq	.+70     	; 0x586a <spi_write_reg+0xe4>
	{
		nm_bsp_sleep(1);
    5824:	61 e0       	ldi	r22, 0x01	; 1
    5826:	70 e0       	ldi	r23, 0x00	; 0
    5828:	80 e0       	ldi	r24, 0x00	; 0
    582a:	90 e0       	ldi	r25, 0x00	; 0
    582c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5830:	a1 2c       	mov	r10, r1
    5832:	c1 2c       	mov	r12, r1
    5834:	d1 2c       	mov	r13, r1
    5836:	76 01       	movw	r14, r12
    5838:	00 e0       	ldi	r16, 0x00	; 0
    583a:	10 e0       	ldi	r17, 0x00	; 0
    583c:	98 01       	movw	r18, r16
    583e:	40 e0       	ldi	r20, 0x00	; 0
    5840:	50 e0       	ldi	r21, 0x00	; 0
    5842:	ba 01       	movw	r22, r20
    5844:	8f ec       	ldi	r24, 0xCF	; 207
    5846:	0e 94 bd 28 	call	0x517a	; 0x517a <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    584a:	8f ec       	ldi	r24, 0xCF	; 207
    584c:	0e 94 67 2a 	call	0x54ce	; 0x54ce <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
		nm_bsp_sleep(1);
    5850:	61 e0       	ldi	r22, 0x01	; 1
    5852:	70 e0       	ldi	r23, 0x00	; 0
    5854:	80 e0       	ldi	r24, 0x00	; 0
    5856:	90 e0       	ldi	r25, 0x00	; 0
    5858:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <nm_bsp_sleep>
		retry--;
    585c:	89 81       	ldd	r24, Y+1	; 0x01
    585e:	81 50       	subi	r24, 0x01	; 1
    5860:	89 83       	std	Y+1, r24	; 0x01
		if(retry) goto _RETRY_;
    5862:	89 81       	ldd	r24, Y+1	; 0x01
    5864:	88 23       	and	r24, r24
    5866:	09 f0       	breq	.+2      	; 0x586a <spi_write_reg+0xe4>
    5868:	ab cf       	rjmp	.-170    	; 0x57c0 <spi_write_reg+0x3a>
	}

	return result;
    586a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    586c:	2c 96       	adiw	r28, 0x0c	; 12
    586e:	cd bf       	out	0x3d, r28	; 61
    5870:	de bf       	out	0x3e, r29	; 62
    5872:	df 91       	pop	r29
    5874:	cf 91       	pop	r28
    5876:	1f 91       	pop	r17
    5878:	0f 91       	pop	r16
    587a:	ff 90       	pop	r15
    587c:	ef 90       	pop	r14
    587e:	df 90       	pop	r13
    5880:	cf 90       	pop	r12
    5882:	af 90       	pop	r10
    5884:	08 95       	ret

00005886 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    5886:	af 92       	push	r10
    5888:	cf 92       	push	r12
    588a:	df 92       	push	r13
    588c:	ef 92       	push	r14
    588e:	ff 92       	push	r15
    5890:	0f 93       	push	r16
    5892:	1f 93       	push	r17
    5894:	cf 93       	push	r28
    5896:	df 93       	push	r29
    5898:	cd b7       	in	r28, 0x3d	; 61
    589a:	de b7       	in	r29, 0x3e	; 62
    589c:	2b 97       	sbiw	r28, 0x0b	; 11
    589e:	cd bf       	out	0x3d, r28	; 61
    58a0:	de bf       	out	0x3e, r29	; 62
    58a2:	6c 83       	std	Y+4, r22	; 0x04
    58a4:	7d 83       	std	Y+5, r23	; 0x05
    58a6:	8e 83       	std	Y+6, r24	; 0x06
    58a8:	9f 83       	std	Y+7, r25	; 0x07
    58aa:	48 87       	std	Y+8, r20	; 0x08
    58ac:	59 87       	std	Y+9, r21	; 0x09
    58ae:	2a 87       	std	Y+10, r18	; 0x0a
    58b0:	3b 87       	std	Y+11, r19	; 0x0b
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    58b2:	8a e0       	ldi	r24, 0x0A	; 10
    58b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 cmd = CMD_DMA_EXT_WRITE;
    58b6:	87 ec       	ldi	r24, 0xC7	; 199
    58b8:	8b 83       	std	Y+3, r24	; 0x03
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    58ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    58bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    58be:	01 97       	sbiw	r24, 0x01	; 1
    58c0:	21 f4       	brne	.+8      	; 0x58ca <nm_spi_write+0x44>
		size = 2;
    58c2:	82 e0       	ldi	r24, 0x02	; 2
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	8a 87       	std	Y+10, r24	; 0x0a
    58c8:	9b 87       	std	Y+11, r25	; 0x0b

	result = spi_cmd(cmd, addr, 0, size,0);
    58ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    58cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    58ce:	9c 01       	movw	r18, r24
    58d0:	40 e0       	ldi	r20, 0x00	; 0
    58d2:	50 e0       	ldi	r21, 0x00	; 0
    58d4:	8c 81       	ldd	r24, Y+4	; 0x04
    58d6:	9d 81       	ldd	r25, Y+5	; 0x05
    58d8:	ae 81       	ldd	r26, Y+6	; 0x06
    58da:	bf 81       	ldd	r27, Y+7	; 0x07
    58dc:	a1 2c       	mov	r10, r1
    58de:	69 01       	movw	r12, r18
    58e0:	7a 01       	movw	r14, r20
    58e2:	00 e0       	ldi	r16, 0x00	; 0
    58e4:	10 e0       	ldi	r17, 0x00	; 0
    58e6:	98 01       	movw	r18, r16
    58e8:	ac 01       	movw	r20, r24
    58ea:	bd 01       	movw	r22, r26
    58ec:	8b 81       	ldd	r24, Y+3	; 0x03
    58ee:	0e 94 bd 28 	call	0x517a	; 0x517a <spi_cmd>
    58f2:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    58f4:	89 81       	ldd	r24, Y+1	; 0x01
    58f6:	81 30       	cpi	r24, 0x01	; 1
    58f8:	b9 f4       	brne	.+46     	; 0x5928 <nm_spi_write+0xa2>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    58fa:	8b 81       	ldd	r24, Y+3	; 0x03
    58fc:	0e 94 67 2a 	call	0x54ce	; 0x54ce <spi_cmd_rsp>
    5900:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    5902:	89 81       	ldd	r24, Y+1	; 0x01
    5904:	81 30       	cpi	r24, 0x01	; 1
    5906:	91 f4       	brne	.+36     	; 0x592c <nm_spi_write+0xa6>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    5908:	2a 85       	ldd	r18, Y+10	; 0x0a
    590a:	3b 85       	ldd	r19, Y+11	; 0x0b
    590c:	88 85       	ldd	r24, Y+8	; 0x08
    590e:	99 85       	ldd	r25, Y+9	; 0x09
    5910:	b9 01       	movw	r22, r18
    5912:	0e 94 40 2b 	call	0x5680	; 0x5680 <spi_data_write>
    5916:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    5918:	89 81       	ldd	r24, Y+1	; 0x01
    591a:	81 30       	cpi	r24, 0x01	; 1
    591c:	49 f4       	brne	.+18     	; 0x5930 <nm_spi_write+0xaa>
		goto _FAIL_;
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    591e:	8b 81       	ldd	r24, Y+3	; 0x03
    5920:	0e 94 25 2a 	call	0x544a	; 0x544a <spi_data_rsp>
    5924:	89 83       	std	Y+1, r24	; 0x01
    5926:	05 c0       	rjmp	.+10     	; 0x5932 <nm_spi_write+0xac>
		size = 2;

	result = spi_cmd(cmd, addr, 0, size,0);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5928:	00 00       	nop
    592a:	03 c0       	rjmp	.+6      	; 0x5932 <nm_spi_write+0xac>
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    592c:	00 00       	nop
    592e:	01 c0       	rjmp	.+2      	; 0x5932 <nm_spi_write+0xac>
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
    5930:	00 00       	nop
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
	}
	
_FAIL_:
	if(result != N_OK)
    5932:	89 81       	ldd	r24, Y+1	; 0x01
    5934:	81 30       	cpi	r24, 0x01	; 1
    5936:	19 f1       	breq	.+70     	; 0x597e <nm_spi_write+0xf8>
	{
		nm_bsp_sleep(1);
    5938:	61 e0       	ldi	r22, 0x01	; 1
    593a:	70 e0       	ldi	r23, 0x00	; 0
    593c:	80 e0       	ldi	r24, 0x00	; 0
    593e:	90 e0       	ldi	r25, 0x00	; 0
    5940:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5944:	a1 2c       	mov	r10, r1
    5946:	c1 2c       	mov	r12, r1
    5948:	d1 2c       	mov	r13, r1
    594a:	76 01       	movw	r14, r12
    594c:	00 e0       	ldi	r16, 0x00	; 0
    594e:	10 e0       	ldi	r17, 0x00	; 0
    5950:	98 01       	movw	r18, r16
    5952:	40 e0       	ldi	r20, 0x00	; 0
    5954:	50 e0       	ldi	r21, 0x00	; 0
    5956:	ba 01       	movw	r22, r20
    5958:	8f ec       	ldi	r24, 0xCF	; 207
    595a:	0e 94 bd 28 	call	0x517a	; 0x517a <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    595e:	8f ec       	ldi	r24, 0xCF	; 207
    5960:	0e 94 67 2a 	call	0x54ce	; 0x54ce <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
    5964:	61 e0       	ldi	r22, 0x01	; 1
    5966:	70 e0       	ldi	r23, 0x00	; 0
    5968:	80 e0       	ldi	r24, 0x00	; 0
    596a:	90 e0       	ldi	r25, 0x00	; 0
    596c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <nm_bsp_sleep>
		retry--;
    5970:	8a 81       	ldd	r24, Y+2	; 0x02
    5972:	81 50       	subi	r24, 0x01	; 1
    5974:	8a 83       	std	Y+2, r24	; 0x02
		if(retry) goto _RETRY_;
    5976:	8a 81       	ldd	r24, Y+2	; 0x02
    5978:	88 23       	and	r24, r24
    597a:	09 f0       	breq	.+2      	; 0x597e <nm_spi_write+0xf8>
    597c:	9e cf       	rjmp	.-196    	; 0x58ba <nm_spi_write+0x34>
	}


	return result;
    597e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5980:	2b 96       	adiw	r28, 0x0b	; 11
    5982:	cd bf       	out	0x3d, r28	; 61
    5984:	de bf       	out	0x3e, r29	; 62
    5986:	df 91       	pop	r29
    5988:	cf 91       	pop	r28
    598a:	1f 91       	pop	r17
    598c:	0f 91       	pop	r16
    598e:	ff 90       	pop	r15
    5990:	ef 90       	pop	r14
    5992:	df 90       	pop	r13
    5994:	cf 90       	pop	r12
    5996:	af 90       	pop	r10
    5998:	08 95       	ret

0000599a <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    599a:	af 92       	push	r10
    599c:	cf 92       	push	r12
    599e:	df 92       	push	r13
    59a0:	ef 92       	push	r14
    59a2:	ff 92       	push	r15
    59a4:	0f 93       	push	r16
    59a6:	1f 93       	push	r17
    59a8:	cf 93       	push	r28
    59aa:	df 93       	push	r29
    59ac:	cd b7       	in	r28, 0x3d	; 61
    59ae:	de b7       	in	r29, 0x3e	; 62
    59b0:	2e 97       	sbiw	r28, 0x0e	; 14
    59b2:	cd bf       	out	0x3d, r28	; 61
    59b4:	de bf       	out	0x3e, r29	; 62
    59b6:	69 87       	std	Y+9, r22	; 0x09
    59b8:	7a 87       	std	Y+10, r23	; 0x0a
    59ba:	8b 87       	std	Y+11, r24	; 0x0b
    59bc:	9c 87       	std	Y+12, r25	; 0x0c
    59be:	4d 87       	std	Y+13, r20	; 0x0d
    59c0:	5e 87       	std	Y+14, r21	; 0x0e
	uint8 retry = SPI_RETRY_COUNT;
    59c2:	8a e0       	ldi	r24, 0x0A	; 10
    59c4:	89 83       	std	Y+1, r24	; 0x01
	sint8 result = N_OK;
    59c6:	81 e0       	ldi	r24, 0x01	; 1
    59c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 cmd = CMD_SINGLE_READ;
    59ca:	8a ec       	ldi	r24, 0xCA	; 202
    59cc:	8b 83       	std	Y+3, r24	; 0x03
	uint8 tmp[4];
	uint8 clockless = 0;
    59ce:	1c 82       	std	Y+4, r1	; 0x04

_RETRY_:

	if (addr <= 0xff)
    59d0:	89 85       	ldd	r24, Y+9	; 0x09
    59d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    59d4:	ab 85       	ldd	r26, Y+11	; 0x0b
    59d6:	bc 85       	ldd	r27, Y+12	; 0x0c
    59d8:	8f 3f       	cpi	r24, 0xFF	; 255
    59da:	91 05       	cpc	r25, r1
    59dc:	a1 05       	cpc	r26, r1
    59de:	b1 05       	cpc	r27, r1
    59e0:	09 f0       	breq	.+2      	; 0x59e4 <spi_read_reg+0x4a>
    59e2:	28 f4       	brcc	.+10     	; 0x59ee <spi_read_reg+0x54>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    59e4:	84 ec       	ldi	r24, 0xC4	; 196
    59e6:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 1;
    59e8:	81 e0       	ldi	r24, 0x01	; 1
    59ea:	8c 83       	std	Y+4, r24	; 0x04
    59ec:	03 c0       	rjmp	.+6      	; 0x59f4 <spi_read_reg+0x5a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    59ee:	8a ec       	ldi	r24, 0xCA	; 202
    59f0:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 0;
    59f2:	1c 82       	std	Y+4, r1	; 0x04
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    59f4:	89 85       	ldd	r24, Y+9	; 0x09
    59f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    59f8:	ab 85       	ldd	r26, Y+11	; 0x0b
    59fa:	bc 85       	ldd	r27, Y+12	; 0x0c
    59fc:	ac 80       	ldd	r10, Y+4	; 0x04
    59fe:	c1 2c       	mov	r12, r1
    5a00:	d1 2c       	mov	r13, r1
    5a02:	76 01       	movw	r14, r12
    5a04:	68 94       	set
    5a06:	c2 f8       	bld	r12, 2
    5a08:	00 e0       	ldi	r16, 0x00	; 0
    5a0a:	10 e0       	ldi	r17, 0x00	; 0
    5a0c:	98 01       	movw	r18, r16
    5a0e:	ac 01       	movw	r20, r24
    5a10:	bd 01       	movw	r22, r26
    5a12:	8b 81       	ldd	r24, Y+3	; 0x03
    5a14:	0e 94 bd 28 	call	0x517a	; 0x517a <spi_cmd>
    5a18:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    5a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a1c:	81 30       	cpi	r24, 0x01	; 1
    5a1e:	09 f0       	breq	.+2      	; 0x5a22 <spi_read_reg+0x88>
    5a20:	46 c0       	rjmp	.+140    	; 0x5aae <spi_read_reg+0x114>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    5a22:	8b 81       	ldd	r24, Y+3	; 0x03
    5a24:	0e 94 67 2a 	call	0x54ce	; 0x54ce <spi_cmd_rsp>
    5a28:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    5a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a2c:	81 30       	cpi	r24, 0x01	; 1
    5a2e:	09 f0       	breq	.+2      	; 0x5a32 <spi_read_reg+0x98>
    5a30:	40 c0       	rjmp	.+128    	; 0x5ab2 <spi_read_reg+0x118>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    5a32:	ce 01       	movw	r24, r28
    5a34:	05 96       	adiw	r24, 0x05	; 5
    5a36:	4c 81       	ldd	r20, Y+4	; 0x04
    5a38:	64 e0       	ldi	r22, 0x04	; 4
    5a3a:	70 e0       	ldi	r23, 0x00	; 0
    5a3c:	0e 94 b5 2a 	call	0x556a	; 0x556a <spi_data_read>
    5a40:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    5a42:	8a 81       	ldd	r24, Y+2	; 0x02
    5a44:	81 30       	cpi	r24, 0x01	; 1
    5a46:	b9 f5       	brne	.+110    	; 0x5ab6 <spi_read_reg+0x11c>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    5a48:	8d 81       	ldd	r24, Y+5	; 0x05
    5a4a:	28 2f       	mov	r18, r24
    5a4c:	30 e0       	ldi	r19, 0x00	; 0
    5a4e:	40 e0       	ldi	r20, 0x00	; 0
    5a50:	50 e0       	ldi	r21, 0x00	; 0
		((uint32)tmp[1] << 8) |
    5a52:	8e 81       	ldd	r24, Y+6	; 0x06
    5a54:	88 2f       	mov	r24, r24
    5a56:	90 e0       	ldi	r25, 0x00	; 0
    5a58:	a0 e0       	ldi	r26, 0x00	; 0
    5a5a:	b0 e0       	ldi	r27, 0x00	; 0
    5a5c:	ba 2f       	mov	r27, r26
    5a5e:	a9 2f       	mov	r26, r25
    5a60:	98 2f       	mov	r25, r24
    5a62:	88 27       	eor	r24, r24
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    5a64:	28 2b       	or	r18, r24
    5a66:	39 2b       	or	r19, r25
    5a68:	4a 2b       	or	r20, r26
    5a6a:	5b 2b       	or	r21, r27
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    5a6c:	8f 81       	ldd	r24, Y+7	; 0x07
    5a6e:	88 2f       	mov	r24, r24
    5a70:	90 e0       	ldi	r25, 0x00	; 0
    5a72:	a0 e0       	ldi	r26, 0x00	; 0
    5a74:	b0 e0       	ldi	r27, 0x00	; 0
    5a76:	dc 01       	movw	r26, r24
    5a78:	99 27       	eor	r25, r25
    5a7a:	88 27       	eor	r24, r24
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    5a7c:	28 2b       	or	r18, r24
    5a7e:	39 2b       	or	r19, r25
    5a80:	4a 2b       	or	r20, r26
    5a82:	5b 2b       	or	r21, r27
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    5a84:	88 85       	ldd	r24, Y+8	; 0x08
    5a86:	88 2f       	mov	r24, r24
    5a88:	90 e0       	ldi	r25, 0x00	; 0
    5a8a:	a0 e0       	ldi	r26, 0x00	; 0
    5a8c:	b0 e0       	ldi	r27, 0x00	; 0
    5a8e:	b8 2f       	mov	r27, r24
    5a90:	aa 27       	eor	r26, r26
    5a92:	99 27       	eor	r25, r25
    5a94:	88 27       	eor	r24, r24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    5a96:	82 2b       	or	r24, r18
    5a98:	93 2b       	or	r25, r19
    5a9a:	a4 2b       	or	r26, r20
    5a9c:	b5 2b       	or	r27, r21
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    5a9e:	2d 85       	ldd	r18, Y+13	; 0x0d
    5aa0:	3e 85       	ldd	r19, Y+14	; 0x0e
    5aa2:	f9 01       	movw	r30, r18
    5aa4:	80 83       	st	Z, r24
    5aa6:	91 83       	std	Z+1, r25	; 0x01
    5aa8:	a2 83       	std	Z+2, r26	; 0x02
    5aaa:	b3 83       	std	Z+3, r27	; 0x03
    5aac:	05 c0       	rjmp	.+10     	; 0x5ab8 <spi_read_reg+0x11e>

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5aae:	00 00       	nop
    5ab0:	03 c0       	rjmp	.+6      	; 0x5ab8 <spi_read_reg+0x11e>
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5ab2:	00 00       	nop
    5ab4:	01 c0       	rjmp	.+2      	; 0x5ab8 <spi_read_reg+0x11e>

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
    5ab6:	00 00       	nop
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
		
_FAIL_:
	if(result != N_OK)
    5ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    5aba:	81 30       	cpi	r24, 0x01	; 1
    5abc:	19 f1       	breq	.+70     	; 0x5b04 <spi_read_reg+0x16a>
	{
		
		nm_bsp_sleep(1);
    5abe:	61 e0       	ldi	r22, 0x01	; 1
    5ac0:	70 e0       	ldi	r23, 0x00	; 0
    5ac2:	80 e0       	ldi	r24, 0x00	; 0
    5ac4:	90 e0       	ldi	r25, 0x00	; 0
    5ac6:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5aca:	a1 2c       	mov	r10, r1
    5acc:	c1 2c       	mov	r12, r1
    5ace:	d1 2c       	mov	r13, r1
    5ad0:	76 01       	movw	r14, r12
    5ad2:	00 e0       	ldi	r16, 0x00	; 0
    5ad4:	10 e0       	ldi	r17, 0x00	; 0
    5ad6:	98 01       	movw	r18, r16
    5ad8:	40 e0       	ldi	r20, 0x00	; 0
    5ada:	50 e0       	ldi	r21, 0x00	; 0
    5adc:	ba 01       	movw	r22, r20
    5ade:	8f ec       	ldi	r24, 0xCF	; 207
    5ae0:	0e 94 bd 28 	call	0x517a	; 0x517a <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    5ae4:	8f ec       	ldi	r24, 0xCF	; 207
    5ae6:	0e 94 67 2a 	call	0x54ce	; 0x54ce <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
    5aea:	61 e0       	ldi	r22, 0x01	; 1
    5aec:	70 e0       	ldi	r23, 0x00	; 0
    5aee:	80 e0       	ldi	r24, 0x00	; 0
    5af0:	90 e0       	ldi	r25, 0x00	; 0
    5af2:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <nm_bsp_sleep>
		retry--;
    5af6:	89 81       	ldd	r24, Y+1	; 0x01
    5af8:	81 50       	subi	r24, 0x01	; 1
    5afa:	89 83       	std	Y+1, r24	; 0x01
		if(retry) goto _RETRY_;
    5afc:	89 81       	ldd	r24, Y+1	; 0x01
    5afe:	88 23       	and	r24, r24
    5b00:	09 f0       	breq	.+2      	; 0x5b04 <spi_read_reg+0x16a>
    5b02:	66 cf       	rjmp	.-308    	; 0x59d0 <spi_read_reg+0x36>
	}
		
	return result;
    5b04:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5b06:	2e 96       	adiw	r28, 0x0e	; 14
    5b08:	cd bf       	out	0x3d, r28	; 61
    5b0a:	de bf       	out	0x3e, r29	; 62
    5b0c:	df 91       	pop	r29
    5b0e:	cf 91       	pop	r28
    5b10:	1f 91       	pop	r17
    5b12:	0f 91       	pop	r16
    5b14:	ff 90       	pop	r15
    5b16:	ef 90       	pop	r14
    5b18:	df 90       	pop	r13
    5b1a:	cf 90       	pop	r12
    5b1c:	af 90       	pop	r10
    5b1e:	08 95       	ret

00005b20 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    5b20:	af 92       	push	r10
    5b22:	cf 92       	push	r12
    5b24:	df 92       	push	r13
    5b26:	ef 92       	push	r14
    5b28:	ff 92       	push	r15
    5b2a:	0f 93       	push	r16
    5b2c:	1f 93       	push	r17
    5b2e:	cf 93       	push	r28
    5b30:	df 93       	push	r29
    5b32:	cd b7       	in	r28, 0x3d	; 61
    5b34:	de b7       	in	r29, 0x3e	; 62
    5b36:	2e 97       	sbiw	r28, 0x0e	; 14
    5b38:	cd bf       	out	0x3d, r28	; 61
    5b3a:	de bf       	out	0x3e, r29	; 62
    5b3c:	6f 83       	std	Y+7, r22	; 0x07
    5b3e:	78 87       	std	Y+8, r23	; 0x08
    5b40:	89 87       	std	Y+9, r24	; 0x09
    5b42:	9a 87       	std	Y+10, r25	; 0x0a
    5b44:	4b 87       	std	Y+11, r20	; 0x0b
    5b46:	5c 87       	std	Y+12, r21	; 0x0c
    5b48:	2d 87       	std	Y+13, r18	; 0x0d
    5b4a:	3e 87       	std	Y+14, r19	; 0x0e
	uint8 cmd = CMD_DMA_EXT_READ;
    5b4c:	88 ec       	ldi	r24, 0xC8	; 200
    5b4e:	8c 83       	std	Y+4, r24	; 0x04
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    5b50:	8a e0       	ldi	r24, 0x0A	; 10
    5b52:	8a 83       	std	Y+2, r24	; 0x02
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    5b54:	1b 82       	std	Y+3, r1	; 0x03

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    5b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b5a:	01 97       	sbiw	r24, 0x01	; 1
    5b5c:	31 f4       	brne	.+12     	; 0x5b6a <nm_spi_read+0x4a>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    5b5e:	82 e0       	ldi	r24, 0x02	; 2
    5b60:	90 e0       	ldi	r25, 0x00	; 0
    5b62:	8d 87       	std	Y+13, r24	; 0x0d
    5b64:	9e 87       	std	Y+14, r25	; 0x0e
		single_byte_workaround = 1;
    5b66:	81 e0       	ldi	r24, 0x01	; 1
    5b68:	8b 83       	std	Y+3, r24	; 0x03
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    5b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b6e:	9c 01       	movw	r18, r24
    5b70:	40 e0       	ldi	r20, 0x00	; 0
    5b72:	50 e0       	ldi	r21, 0x00	; 0
    5b74:	8f 81       	ldd	r24, Y+7	; 0x07
    5b76:	98 85       	ldd	r25, Y+8	; 0x08
    5b78:	a9 85       	ldd	r26, Y+9	; 0x09
    5b7a:	ba 85       	ldd	r27, Y+10	; 0x0a
    5b7c:	a1 2c       	mov	r10, r1
    5b7e:	69 01       	movw	r12, r18
    5b80:	7a 01       	movw	r14, r20
    5b82:	00 e0       	ldi	r16, 0x00	; 0
    5b84:	10 e0       	ldi	r17, 0x00	; 0
    5b86:	98 01       	movw	r18, r16
    5b88:	ac 01       	movw	r20, r24
    5b8a:	bd 01       	movw	r22, r26
    5b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    5b8e:	0e 94 bd 28 	call	0x517a	; 0x517a <spi_cmd>
    5b92:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    5b94:	89 81       	ldd	r24, Y+1	; 0x01
    5b96:	81 30       	cpi	r24, 0x01	; 1
    5b98:	19 f5       	brne	.+70     	; 0x5be0 <nm_spi_read+0xc0>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    5b9a:	8c 81       	ldd	r24, Y+4	; 0x04
    5b9c:	0e 94 67 2a 	call	0x54ce	; 0x54ce <spi_cmd_rsp>
    5ba0:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    5ba2:	89 81       	ldd	r24, Y+1	; 0x01
    5ba4:	81 30       	cpi	r24, 0x01	; 1
    5ba6:	f1 f4       	brne	.+60     	; 0x5be4 <nm_spi_read+0xc4>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    5ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    5baa:	88 23       	and	r24, r24
    5bac:	79 f0       	breq	.+30     	; 0x5bcc <nm_spi_read+0xac>
	{
		result = spi_data_read(tmp, size,0);
    5bae:	2d 85       	ldd	r18, Y+13	; 0x0d
    5bb0:	3e 85       	ldd	r19, Y+14	; 0x0e
    5bb2:	ce 01       	movw	r24, r28
    5bb4:	05 96       	adiw	r24, 0x05	; 5
    5bb6:	40 e0       	ldi	r20, 0x00	; 0
    5bb8:	b9 01       	movw	r22, r18
    5bba:	0e 94 b5 2a 	call	0x556a	; 0x556a <spi_data_read>
    5bbe:	89 83       	std	Y+1, r24	; 0x01
		buf[0] = tmp[0];
    5bc0:	2d 81       	ldd	r18, Y+5	; 0x05
    5bc2:	8b 85       	ldd	r24, Y+11	; 0x0b
    5bc4:	9c 85       	ldd	r25, Y+12	; 0x0c
    5bc6:	fc 01       	movw	r30, r24
    5bc8:	20 83       	st	Z, r18
    5bca:	0d c0       	rjmp	.+26     	; 0x5be6 <nm_spi_read+0xc6>
	}
	else
		result = spi_data_read(buf, size,0);
    5bcc:	2d 85       	ldd	r18, Y+13	; 0x0d
    5bce:	3e 85       	ldd	r19, Y+14	; 0x0e
    5bd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    5bd2:	9c 85       	ldd	r25, Y+12	; 0x0c
    5bd4:	40 e0       	ldi	r20, 0x00	; 0
    5bd6:	b9 01       	movw	r22, r18
    5bd8:	0e 94 b5 2a 	call	0x556a	; 0x556a <spi_data_read>
    5bdc:	89 83       	std	Y+1, r24	; 0x01
    5bde:	03 c0       	rjmp	.+6      	; 0x5be6 <nm_spi_read+0xc6>
		single_byte_workaround = 1;
	}
	result = spi_cmd(cmd, addr, 0, size,0);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5be0:	00 00       	nop
    5be2:	01 c0       	rjmp	.+2      	; 0x5be6 <nm_spi_read+0xc6>
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5be4:	00 00       	nop
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    5be6:	89 81       	ldd	r24, Y+1	; 0x01
    5be8:	81 30       	cpi	r24, 0x01	; 1
    5bea:	19 f1       	breq	.+70     	; 0x5c32 <nm_spi_read+0x112>
	{
		nm_bsp_sleep(1);
    5bec:	61 e0       	ldi	r22, 0x01	; 1
    5bee:	70 e0       	ldi	r23, 0x00	; 0
    5bf0:	80 e0       	ldi	r24, 0x00	; 0
    5bf2:	90 e0       	ldi	r25, 0x00	; 0
    5bf4:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5bf8:	a1 2c       	mov	r10, r1
    5bfa:	c1 2c       	mov	r12, r1
    5bfc:	d1 2c       	mov	r13, r1
    5bfe:	76 01       	movw	r14, r12
    5c00:	00 e0       	ldi	r16, 0x00	; 0
    5c02:	10 e0       	ldi	r17, 0x00	; 0
    5c04:	98 01       	movw	r18, r16
    5c06:	40 e0       	ldi	r20, 0x00	; 0
    5c08:	50 e0       	ldi	r21, 0x00	; 0
    5c0a:	ba 01       	movw	r22, r20
    5c0c:	8f ec       	ldi	r24, 0xCF	; 207
    5c0e:	0e 94 bd 28 	call	0x517a	; 0x517a <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    5c12:	8f ec       	ldi	r24, 0xCF	; 207
    5c14:	0e 94 67 2a 	call	0x54ce	; 0x54ce <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
    5c18:	61 e0       	ldi	r22, 0x01	; 1
    5c1a:	70 e0       	ldi	r23, 0x00	; 0
    5c1c:	80 e0       	ldi	r24, 0x00	; 0
    5c1e:	90 e0       	ldi	r25, 0x00	; 0
    5c20:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <nm_bsp_sleep>
		retry--;
    5c24:	8a 81       	ldd	r24, Y+2	; 0x02
    5c26:	81 50       	subi	r24, 0x01	; 1
    5c28:	8a 83       	std	Y+2, r24	; 0x02
		if(retry) goto _RETRY_;
    5c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c2c:	88 23       	and	r24, r24
    5c2e:	09 f0       	breq	.+2      	; 0x5c32 <nm_spi_read+0x112>
    5c30:	92 cf       	rjmp	.-220    	; 0x5b56 <nm_spi_read+0x36>
	}

	return result;
    5c32:	89 81       	ldd	r24, Y+1	; 0x01
}
    5c34:	2e 96       	adiw	r28, 0x0e	; 14
    5c36:	cd bf       	out	0x3d, r28	; 61
    5c38:	de bf       	out	0x3e, r29	; 62
    5c3a:	df 91       	pop	r29
    5c3c:	cf 91       	pop	r28
    5c3e:	1f 91       	pop	r17
    5c40:	0f 91       	pop	r16
    5c42:	ff 90       	pop	r15
    5c44:	ef 90       	pop	r14
    5c46:	df 90       	pop	r13
    5c48:	cf 90       	pop	r12
    5c4a:	af 90       	pop	r10
    5c4c:	08 95       	ret

00005c4e <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    5c4e:	cf 93       	push	r28
    5c50:	df 93       	push	r29
    5c52:	00 d0       	rcall	.+0      	; 0x5c54 <spi_init_pkt_sz+0x6>
    5c54:	00 d0       	rcall	.+0      	; 0x5c56 <spi_init_pkt_sz+0x8>
    5c56:	cd b7       	in	r28, 0x3d	; 61
    5c58:	de b7       	in	r29, 0x3e	; 62
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    5c5a:	64 e2       	ldi	r22, 0x24	; 36
    5c5c:	78 ee       	ldi	r23, 0xE8	; 232
    5c5e:	80 e0       	ldi	r24, 0x00	; 0
    5c60:	90 e0       	ldi	r25, 0x00	; 0
    5c62:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <nm_spi_read_reg>
    5c66:	dc 01       	movw	r26, r24
    5c68:	cb 01       	movw	r24, r22
    5c6a:	89 83       	std	Y+1, r24	; 0x01
    5c6c:	9a 83       	std	Y+2, r25	; 0x02
    5c6e:	ab 83       	std	Y+3, r26	; 0x03
    5c70:	bc 83       	std	Y+4, r27	; 0x04
	val32 &= ~(0x7 << 4);
    5c72:	89 81       	ldd	r24, Y+1	; 0x01
    5c74:	9a 81       	ldd	r25, Y+2	; 0x02
    5c76:	ab 81       	ldd	r26, Y+3	; 0x03
    5c78:	bc 81       	ldd	r27, Y+4	; 0x04
    5c7a:	8f 78       	andi	r24, 0x8F	; 143
    5c7c:	89 83       	std	Y+1, r24	; 0x01
    5c7e:	9a 83       	std	Y+2, r25	; 0x02
    5c80:	ab 83       	std	Y+3, r26	; 0x03
    5c82:	bc 83       	std	Y+4, r27	; 0x04
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    5c84:	89 81       	ldd	r24, Y+1	; 0x01
    5c86:	9a 81       	ldd	r25, Y+2	; 0x02
    5c88:	ab 81       	ldd	r26, Y+3	; 0x03
    5c8a:	bc 81       	ldd	r27, Y+4	; 0x04
    5c8c:	80 65       	ori	r24, 0x50	; 80
    5c8e:	89 83       	std	Y+1, r24	; 0x01
    5c90:	9a 83       	std	Y+2, r25	; 0x02
    5c92:	ab 83       	std	Y+3, r26	; 0x03
    5c94:	bc 83       	std	Y+4, r27	; 0x04
    5c96:	00 00       	nop

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    5c98:	89 81       	ldd	r24, Y+1	; 0x01
    5c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    5c9c:	ab 81       	ldd	r26, Y+3	; 0x03
    5c9e:	bc 81       	ldd	r27, Y+4	; 0x04
    5ca0:	9c 01       	movw	r18, r24
    5ca2:	ad 01       	movw	r20, r26
    5ca4:	64 e2       	ldi	r22, 0x24	; 36
    5ca6:	78 ee       	ldi	r23, 0xE8	; 232
    5ca8:	80 e0       	ldi	r24, 0x00	; 0
    5caa:	90 e0       	ldi	r25, 0x00	; 0
    5cac:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <nm_spi_write_reg>
}
    5cb0:	00 00       	nop
    5cb2:	24 96       	adiw	r28, 0x04	; 4
    5cb4:	cd bf       	out	0x3d, r28	; 61
    5cb6:	de bf       	out	0x3e, r29	; 62
    5cb8:	df 91       	pop	r29
    5cba:	cf 91       	pop	r28
    5cbc:	08 95       	ret

00005cbe <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    5cbe:	af 92       	push	r10
    5cc0:	cf 92       	push	r12
    5cc2:	df 92       	push	r13
    5cc4:	ef 92       	push	r14
    5cc6:	ff 92       	push	r15
    5cc8:	0f 93       	push	r16
    5cca:	1f 93       	push	r17
    5ccc:	cf 93       	push	r28
    5cce:	df 93       	push	r29
    5cd0:	cd b7       	in	r28, 0x3d	; 61
    5cd2:	de b7       	in	r29, 0x3e	; 62
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5cd4:	a1 2c       	mov	r10, r1
    5cd6:	c1 2c       	mov	r12, r1
    5cd8:	d1 2c       	mov	r13, r1
    5cda:	76 01       	movw	r14, r12
    5cdc:	00 e0       	ldi	r16, 0x00	; 0
    5cde:	10 e0       	ldi	r17, 0x00	; 0
    5ce0:	98 01       	movw	r18, r16
    5ce2:	40 e0       	ldi	r20, 0x00	; 0
    5ce4:	50 e0       	ldi	r21, 0x00	; 0
    5ce6:	ba 01       	movw	r22, r20
    5ce8:	8f ec       	ldi	r24, 0xCF	; 207
    5cea:	0e 94 bd 28 	call	0x517a	; 0x517a <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
    5cee:	8f ec       	ldi	r24, 0xCF	; 207
    5cf0:	0e 94 67 2a 	call	0x54ce	; 0x54ce <spi_cmd_rsp>
	return M2M_SUCCESS;
    5cf4:	80 e0       	ldi	r24, 0x00	; 0
}
    5cf6:	df 91       	pop	r29
    5cf8:	cf 91       	pop	r28
    5cfa:	1f 91       	pop	r17
    5cfc:	0f 91       	pop	r16
    5cfe:	ff 90       	pop	r15
    5d00:	ef 90       	pop	r14
    5d02:	df 90       	pop	r13
    5d04:	cf 90       	pop	r12
    5d06:	af 90       	pop	r10
    5d08:	08 95       	ret

00005d0a <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    5d0a:	cf 93       	push	r28
    5d0c:	df 93       	push	r29
    5d0e:	cd b7       	in	r28, 0x3d	; 61
    5d10:	de b7       	in	r29, 0x3e	; 62
    5d12:	28 97       	sbiw	r28, 0x08	; 8
    5d14:	cd bf       	out	0x3d, r28	; 61
    5d16:	de bf       	out	0x3e, r29	; 62
	uint32 chipid;
	uint32 reg = 0;
    5d18:	1d 82       	std	Y+5, r1	; 0x05
    5d1a:	1e 82       	std	Y+6, r1	; 0x06
    5d1c:	1f 82       	std	Y+7, r1	; 0x07
    5d1e:	18 86       	std	Y+8, r1	; 0x08
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    5d20:	10 92 96 32 	sts	0x3296, r1	; 0x803296 <gu8Crc_off>

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    5d24:	ce 01       	movw	r24, r28
    5d26:	05 96       	adiw	r24, 0x05	; 5
    5d28:	ac 01       	movw	r20, r24
    5d2a:	64 e2       	ldi	r22, 0x24	; 36
    5d2c:	78 ee       	ldi	r23, 0xE8	; 232
    5d2e:	80 e0       	ldi	r24, 0x00	; 0
    5d30:	90 e0       	ldi	r25, 0x00	; 0
    5d32:	0e 94 cd 2c 	call	0x599a	; 0x599a <spi_read_reg>
    5d36:	88 23       	and	r24, r24
    5d38:	81 f4       	brne	.+32     	; 0x5d5a <nm_spi_init+0x50>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    5d3a:	81 e0       	ldi	r24, 0x01	; 1
    5d3c:	80 93 96 32 	sts	0x3296, r24	; 0x803296 <gu8Crc_off>
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    5d40:	ce 01       	movw	r24, r28
    5d42:	05 96       	adiw	r24, 0x05	; 5
    5d44:	ac 01       	movw	r20, r24
    5d46:	64 e2       	ldi	r22, 0x24	; 36
    5d48:	78 ee       	ldi	r23, 0xE8	; 232
    5d4a:	80 e0       	ldi	r24, 0x00	; 0
    5d4c:	90 e0       	ldi	r25, 0x00	; 0
    5d4e:	0e 94 cd 2c 	call	0x599a	; 0x599a <spi_read_reg>
    5d52:	88 23       	and	r24, r24
    5d54:	11 f4       	brne	.+4      	; 0x5d5a <nm_spi_init+0x50>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
    5d56:	80 e0       	ldi	r24, 0x00	; 0
    5d58:	42 c0       	rjmp	.+132    	; 0x5dde <nm_spi_init+0xd4>
		}
	}
	if(gu8Crc_off == 0)
    5d5a:	80 91 96 32 	lds	r24, 0x3296	; 0x803296 <gu8Crc_off>
    5d5e:	88 23       	and	r24, r24
    5d60:	71 f5       	brne	.+92     	; 0x5dbe <nm_spi_init+0xb4>
	{
		reg &= ~0xc;	/* disable crc checking */
    5d62:	8d 81       	ldd	r24, Y+5	; 0x05
    5d64:	9e 81       	ldd	r25, Y+6	; 0x06
    5d66:	af 81       	ldd	r26, Y+7	; 0x07
    5d68:	b8 85       	ldd	r27, Y+8	; 0x08
    5d6a:	83 7f       	andi	r24, 0xF3	; 243
    5d6c:	8d 83       	std	Y+5, r24	; 0x05
    5d6e:	9e 83       	std	Y+6, r25	; 0x06
    5d70:	af 83       	std	Y+7, r26	; 0x07
    5d72:	b8 87       	std	Y+8, r27	; 0x08
		reg &= ~0x70;
    5d74:	8d 81       	ldd	r24, Y+5	; 0x05
    5d76:	9e 81       	ldd	r25, Y+6	; 0x06
    5d78:	af 81       	ldd	r26, Y+7	; 0x07
    5d7a:	b8 85       	ldd	r27, Y+8	; 0x08
    5d7c:	8f 78       	andi	r24, 0x8F	; 143
    5d7e:	8d 83       	std	Y+5, r24	; 0x05
    5d80:	9e 83       	std	Y+6, r25	; 0x06
    5d82:	af 83       	std	Y+7, r26	; 0x07
    5d84:	b8 87       	std	Y+8, r27	; 0x08
		reg |= (0x5 << 4);
    5d86:	8d 81       	ldd	r24, Y+5	; 0x05
    5d88:	9e 81       	ldd	r25, Y+6	; 0x06
    5d8a:	af 81       	ldd	r26, Y+7	; 0x07
    5d8c:	b8 85       	ldd	r27, Y+8	; 0x08
    5d8e:	80 65       	ori	r24, 0x50	; 80
    5d90:	8d 83       	std	Y+5, r24	; 0x05
    5d92:	9e 83       	std	Y+6, r25	; 0x06
    5d94:	af 83       	std	Y+7, r26	; 0x07
    5d96:	b8 87       	std	Y+8, r27	; 0x08
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    5d98:	8d 81       	ldd	r24, Y+5	; 0x05
    5d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    5d9c:	af 81       	ldd	r26, Y+7	; 0x07
    5d9e:	b8 85       	ldd	r27, Y+8	; 0x08
    5da0:	9c 01       	movw	r18, r24
    5da2:	ad 01       	movw	r20, r26
    5da4:	64 e2       	ldi	r22, 0x24	; 36
    5da6:	78 ee       	ldi	r23, 0xE8	; 232
    5da8:	80 e0       	ldi	r24, 0x00	; 0
    5daa:	90 e0       	ldi	r25, 0x00	; 0
    5dac:	0e 94 c3 2b 	call	0x5786	; 0x5786 <spi_write_reg>
    5db0:	88 23       	and	r24, r24
    5db2:	11 f4       	brne	.+4      	; 0x5db8 <nm_spi_init+0xae>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
    5db4:	80 e0       	ldi	r24, 0x00	; 0
    5db6:	13 c0       	rjmp	.+38     	; 0x5dde <nm_spi_init+0xd4>
		}
		gu8Crc_off = 1;
    5db8:	81 e0       	ldi	r24, 0x01	; 1
    5dba:	80 93 96 32 	sts	0x3296, r24	; 0x803296 <gu8Crc_off>
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    5dbe:	ce 01       	movw	r24, r28
    5dc0:	01 96       	adiw	r24, 0x01	; 1
    5dc2:	ac 01       	movw	r20, r24
    5dc4:	60 e0       	ldi	r22, 0x00	; 0
    5dc6:	70 e1       	ldi	r23, 0x10	; 16
    5dc8:	80 e0       	ldi	r24, 0x00	; 0
    5dca:	90 e0       	ldi	r25, 0x00	; 0
    5dcc:	0e 94 cd 2c 	call	0x599a	; 0x599a <spi_read_reg>
    5dd0:	88 23       	and	r24, r24
    5dd2:	11 f4       	brne	.+4      	; 0x5dd8 <nm_spi_init+0xce>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
    5dd4:	8a ef       	ldi	r24, 0xFA	; 250
    5dd6:	03 c0       	rjmp	.+6      	; 0x5dde <nm_spi_init+0xd4>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    5dd8:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <spi_init_pkt_sz>


	return M2M_SUCCESS;
    5ddc:	80 e0       	ldi	r24, 0x00	; 0
}
    5dde:	28 96       	adiw	r28, 0x08	; 8
    5de0:	cd bf       	out	0x3d, r28	; 61
    5de2:	de bf       	out	0x3e, r29	; 62
    5de4:	df 91       	pop	r29
    5de6:	cf 91       	pop	r28
    5de8:	08 95       	ret

00005dea <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    5dea:	cf 93       	push	r28
    5dec:	df 93       	push	r29
    5dee:	cd b7       	in	r28, 0x3d	; 61
    5df0:	de b7       	in	r29, 0x3e	; 62
	gu8Crc_off = 0;
    5df2:	10 92 96 32 	sts	0x3296, r1	; 0x803296 <gu8Crc_off>
	return M2M_SUCCESS;
    5df6:	80 e0       	ldi	r24, 0x00	; 0
}
    5df8:	df 91       	pop	r29
    5dfa:	cf 91       	pop	r28
    5dfc:	08 95       	ret

00005dfe <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    5dfe:	cf 93       	push	r28
    5e00:	df 93       	push	r29
    5e02:	cd b7       	in	r28, 0x3d	; 61
    5e04:	de b7       	in	r29, 0x3e	; 62
    5e06:	28 97       	sbiw	r28, 0x08	; 8
    5e08:	cd bf       	out	0x3d, r28	; 61
    5e0a:	de bf       	out	0x3e, r29	; 62
    5e0c:	6d 83       	std	Y+5, r22	; 0x05
    5e0e:	7e 83       	std	Y+6, r23	; 0x06
    5e10:	8f 83       	std	Y+7, r24	; 0x07
    5e12:	98 87       	std	Y+8, r25	; 0x08
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    5e14:	8d 81       	ldd	r24, Y+5	; 0x05
    5e16:	9e 81       	ldd	r25, Y+6	; 0x06
    5e18:	af 81       	ldd	r26, Y+7	; 0x07
    5e1a:	b8 85       	ldd	r27, Y+8	; 0x08
    5e1c:	9e 01       	movw	r18, r28
    5e1e:	2f 5f       	subi	r18, 0xFF	; 255
    5e20:	3f 4f       	sbci	r19, 0xFF	; 255
    5e22:	a9 01       	movw	r20, r18
    5e24:	bc 01       	movw	r22, r24
    5e26:	cd 01       	movw	r24, r26
    5e28:	0e 94 cd 2c 	call	0x599a	; 0x599a <spi_read_reg>

	return u32Val;
    5e2c:	89 81       	ldd	r24, Y+1	; 0x01
    5e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    5e30:	ab 81       	ldd	r26, Y+3	; 0x03
    5e32:	bc 81       	ldd	r27, Y+4	; 0x04
}
    5e34:	bc 01       	movw	r22, r24
    5e36:	cd 01       	movw	r24, r26
    5e38:	28 96       	adiw	r28, 0x08	; 8
    5e3a:	cd bf       	out	0x3d, r28	; 61
    5e3c:	de bf       	out	0x3e, r29	; 62
    5e3e:	df 91       	pop	r29
    5e40:	cf 91       	pop	r28
    5e42:	08 95       	ret

00005e44 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    5e44:	cf 93       	push	r28
    5e46:	df 93       	push	r29
    5e48:	cd b7       	in	r28, 0x3d	; 61
    5e4a:	de b7       	in	r29, 0x3e	; 62
    5e4c:	27 97       	sbiw	r28, 0x07	; 7
    5e4e:	cd bf       	out	0x3d, r28	; 61
    5e50:	de bf       	out	0x3e, r29	; 62
    5e52:	6a 83       	std	Y+2, r22	; 0x02
    5e54:	7b 83       	std	Y+3, r23	; 0x03
    5e56:	8c 83       	std	Y+4, r24	; 0x04
    5e58:	9d 83       	std	Y+5, r25	; 0x05
    5e5a:	4e 83       	std	Y+6, r20	; 0x06
    5e5c:	5f 83       	std	Y+7, r21	; 0x07
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    5e5e:	2e 81       	ldd	r18, Y+6	; 0x06
    5e60:	3f 81       	ldd	r19, Y+7	; 0x07
    5e62:	8a 81       	ldd	r24, Y+2	; 0x02
    5e64:	9b 81       	ldd	r25, Y+3	; 0x03
    5e66:	ac 81       	ldd	r26, Y+4	; 0x04
    5e68:	bd 81       	ldd	r27, Y+5	; 0x05
    5e6a:	a9 01       	movw	r20, r18
    5e6c:	bc 01       	movw	r22, r24
    5e6e:	cd 01       	movw	r24, r26
    5e70:	0e 94 cd 2c 	call	0x599a	; 0x599a <spi_read_reg>
    5e74:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5e76:	89 81       	ldd	r24, Y+1	; 0x01
    5e78:	81 30       	cpi	r24, 0x01	; 1
    5e7a:	11 f4       	brne	.+4      	; 0x5e80 <nm_spi_read_reg_with_ret+0x3c>
    5e7c:	19 82       	std	Y+1, r1	; 0x01
    5e7e:	02 c0       	rjmp	.+4      	; 0x5e84 <nm_spi_read_reg_with_ret+0x40>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5e80:	8a ef       	ldi	r24, 0xFA	; 250
    5e82:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    5e84:	89 81       	ldd	r24, Y+1	; 0x01
}
    5e86:	27 96       	adiw	r28, 0x07	; 7
    5e88:	cd bf       	out	0x3d, r28	; 61
    5e8a:	de bf       	out	0x3e, r29	; 62
    5e8c:	df 91       	pop	r29
    5e8e:	cf 91       	pop	r28
    5e90:	08 95       	ret

00005e92 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    5e92:	cf 93       	push	r28
    5e94:	df 93       	push	r29
    5e96:	cd b7       	in	r28, 0x3d	; 61
    5e98:	de b7       	in	r29, 0x3e	; 62
    5e9a:	29 97       	sbiw	r28, 0x09	; 9
    5e9c:	cd bf       	out	0x3d, r28	; 61
    5e9e:	de bf       	out	0x3e, r29	; 62
    5ea0:	6a 83       	std	Y+2, r22	; 0x02
    5ea2:	7b 83       	std	Y+3, r23	; 0x03
    5ea4:	8c 83       	std	Y+4, r24	; 0x04
    5ea6:	9d 83       	std	Y+5, r25	; 0x05
    5ea8:	2e 83       	std	Y+6, r18	; 0x06
    5eaa:	3f 83       	std	Y+7, r19	; 0x07
    5eac:	48 87       	std	Y+8, r20	; 0x08
    5eae:	59 87       	std	Y+9, r21	; 0x09
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    5eb0:	2e 81       	ldd	r18, Y+6	; 0x06
    5eb2:	3f 81       	ldd	r19, Y+7	; 0x07
    5eb4:	48 85       	ldd	r20, Y+8	; 0x08
    5eb6:	59 85       	ldd	r21, Y+9	; 0x09
    5eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    5eba:	9b 81       	ldd	r25, Y+3	; 0x03
    5ebc:	ac 81       	ldd	r26, Y+4	; 0x04
    5ebe:	bd 81       	ldd	r27, Y+5	; 0x05
    5ec0:	bc 01       	movw	r22, r24
    5ec2:	cd 01       	movw	r24, r26
    5ec4:	0e 94 c3 2b 	call	0x5786	; 0x5786 <spi_write_reg>
    5ec8:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5eca:	89 81       	ldd	r24, Y+1	; 0x01
    5ecc:	81 30       	cpi	r24, 0x01	; 1
    5ece:	11 f4       	brne	.+4      	; 0x5ed4 <nm_spi_write_reg+0x42>
    5ed0:	19 82       	std	Y+1, r1	; 0x01
    5ed2:	02 c0       	rjmp	.+4      	; 0x5ed8 <nm_spi_write_reg+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5ed4:	8a ef       	ldi	r24, 0xFA	; 250
    5ed6:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    5ed8:	89 81       	ldd	r24, Y+1	; 0x01
}
    5eda:	29 96       	adiw	r28, 0x09	; 9
    5edc:	cd bf       	out	0x3d, r28	; 61
    5ede:	de bf       	out	0x3e, r29	; 62
    5ee0:	df 91       	pop	r29
    5ee2:	cf 91       	pop	r28
    5ee4:	08 95       	ret

00005ee6 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    5ee6:	cf 93       	push	r28
    5ee8:	df 93       	push	r29
    5eea:	cd b7       	in	r28, 0x3d	; 61
    5eec:	de b7       	in	r29, 0x3e	; 62
    5eee:	29 97       	sbiw	r28, 0x09	; 9
    5ef0:	cd bf       	out	0x3d, r28	; 61
    5ef2:	de bf       	out	0x3e, r29	; 62
    5ef4:	6a 83       	std	Y+2, r22	; 0x02
    5ef6:	7b 83       	std	Y+3, r23	; 0x03
    5ef8:	8c 83       	std	Y+4, r24	; 0x04
    5efa:	9d 83       	std	Y+5, r25	; 0x05
    5efc:	4e 83       	std	Y+6, r20	; 0x06
    5efe:	5f 83       	std	Y+7, r21	; 0x07
    5f00:	28 87       	std	Y+8, r18	; 0x08
    5f02:	39 87       	std	Y+9, r19	; 0x09
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    5f04:	28 85       	ldd	r18, Y+8	; 0x08
    5f06:	39 85       	ldd	r19, Y+9	; 0x09
    5f08:	4e 81       	ldd	r20, Y+6	; 0x06
    5f0a:	5f 81       	ldd	r21, Y+7	; 0x07
    5f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    5f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    5f10:	ac 81       	ldd	r26, Y+4	; 0x04
    5f12:	bd 81       	ldd	r27, Y+5	; 0x05
    5f14:	bc 01       	movw	r22, r24
    5f16:	cd 01       	movw	r24, r26
    5f18:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <nm_spi_read>
    5f1c:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5f1e:	89 81       	ldd	r24, Y+1	; 0x01
    5f20:	81 30       	cpi	r24, 0x01	; 1
    5f22:	11 f4       	brne	.+4      	; 0x5f28 <nm_spi_read_block+0x42>
    5f24:	19 82       	std	Y+1, r1	; 0x01
    5f26:	02 c0       	rjmp	.+4      	; 0x5f2c <nm_spi_read_block+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5f28:	8a ef       	ldi	r24, 0xFA	; 250
    5f2a:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    5f2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    5f2e:	29 96       	adiw	r28, 0x09	; 9
    5f30:	cd bf       	out	0x3d, r28	; 61
    5f32:	de bf       	out	0x3e, r29	; 62
    5f34:	df 91       	pop	r29
    5f36:	cf 91       	pop	r28
    5f38:	08 95       	ret

00005f3a <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    5f3a:	cf 93       	push	r28
    5f3c:	df 93       	push	r29
    5f3e:	cd b7       	in	r28, 0x3d	; 61
    5f40:	de b7       	in	r29, 0x3e	; 62
    5f42:	29 97       	sbiw	r28, 0x09	; 9
    5f44:	cd bf       	out	0x3d, r28	; 61
    5f46:	de bf       	out	0x3e, r29	; 62
    5f48:	6a 83       	std	Y+2, r22	; 0x02
    5f4a:	7b 83       	std	Y+3, r23	; 0x03
    5f4c:	8c 83       	std	Y+4, r24	; 0x04
    5f4e:	9d 83       	std	Y+5, r25	; 0x05
    5f50:	4e 83       	std	Y+6, r20	; 0x06
    5f52:	5f 83       	std	Y+7, r21	; 0x07
    5f54:	28 87       	std	Y+8, r18	; 0x08
    5f56:	39 87       	std	Y+9, r19	; 0x09
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    5f58:	28 85       	ldd	r18, Y+8	; 0x08
    5f5a:	39 85       	ldd	r19, Y+9	; 0x09
    5f5c:	4e 81       	ldd	r20, Y+6	; 0x06
    5f5e:	5f 81       	ldd	r21, Y+7	; 0x07
    5f60:	8a 81       	ldd	r24, Y+2	; 0x02
    5f62:	9b 81       	ldd	r25, Y+3	; 0x03
    5f64:	ac 81       	ldd	r26, Y+4	; 0x04
    5f66:	bd 81       	ldd	r27, Y+5	; 0x05
    5f68:	bc 01       	movw	r22, r24
    5f6a:	cd 01       	movw	r24, r26
    5f6c:	0e 94 43 2c 	call	0x5886	; 0x5886 <nm_spi_write>
    5f70:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5f72:	89 81       	ldd	r24, Y+1	; 0x01
    5f74:	81 30       	cpi	r24, 0x01	; 1
    5f76:	11 f4       	brne	.+4      	; 0x5f7c <nm_spi_write_block+0x42>
    5f78:	19 82       	std	Y+1, r1	; 0x01
    5f7a:	02 c0       	rjmp	.+4      	; 0x5f80 <nm_spi_write_block+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5f7c:	8a ef       	ldi	r24, 0xFA	; 250
    5f7e:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    5f80:	89 81       	ldd	r24, Y+1	; 0x01
}
    5f82:	29 96       	adiw	r28, 0x09	; 9
    5f84:	cd bf       	out	0x3d, r28	; 61
    5f86:	de bf       	out	0x3e, r29	; 62
    5f88:	df 91       	pop	r29
    5f8a:	cf 91       	pop	r28
    5f8c:	08 95       	ret

00005f8e <Socket_ReadSocketData>:
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
    5f8e:	ef 92       	push	r14
    5f90:	ff 92       	push	r15
    5f92:	0f 93       	push	r16
    5f94:	1f 93       	push	r17
    5f96:	cf 93       	push	r28
    5f98:	df 93       	push	r29
    5f9a:	cd b7       	in	r28, 0x3d	; 61
    5f9c:	de b7       	in	r29, 0x3e	; 62
    5f9e:	63 97       	sbiw	r28, 0x13	; 19
    5fa0:	cd bf       	out	0x3d, r28	; 61
    5fa2:	de bf       	out	0x3e, r29	; 62
    5fa4:	8a 87       	std	Y+10, r24	; 0x0a
    5fa6:	6b 87       	std	Y+11, r22	; 0x0b
    5fa8:	7c 87       	std	Y+12, r23	; 0x0c
    5faa:	4d 87       	std	Y+13, r20	; 0x0d
    5fac:	0e 87       	std	Y+14, r16	; 0x0e
    5fae:	1f 87       	std	Y+15, r17	; 0x0f
    5fb0:	28 8b       	std	Y+16, r18	; 0x10
    5fb2:	39 8b       	std	Y+17, r19	; 0x11
    5fb4:	ea 8a       	std	Y+18, r14	; 0x12
    5fb6:	fb 8a       	std	Y+19, r15	; 0x13
    5fb8:	8a 89       	ldd	r24, Y+18	; 0x12
    5fba:	9b 89       	ldd	r25, Y+19	; 0x13
    5fbc:	89 2b       	or	r24, r25
    5fbe:	09 f4       	brne	.+2      	; 0x5fc2 <Socket_ReadSocketData+0x34>
    5fc0:	10 c1       	rjmp	.+544    	; 0x61e2 <Socket_ReadSocketData+0x254>
    5fc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    5fc4:	28 2f       	mov	r18, r24
    5fc6:	88 0f       	add	r24, r24
    5fc8:	33 0b       	sbc	r19, r19
    5fca:	4b e0       	ldi	r20, 0x0B	; 11
    5fcc:	42 9f       	mul	r20, r18
    5fce:	c0 01       	movw	r24, r0
    5fd0:	43 9f       	mul	r20, r19
    5fd2:	90 0d       	add	r25, r0
    5fd4:	11 24       	eor	r1, r1
    5fd6:	8d 5a       	subi	r24, 0xAD	; 173
    5fd8:	9c 4c       	sbci	r25, 0xCC	; 204
    5fda:	fc 01       	movw	r30, r24
    5fdc:	80 81       	ld	r24, Z
    5fde:	91 81       	ldd	r25, Z+1	; 0x01
    5fe0:	89 2b       	or	r24, r25
    5fe2:	09 f4       	brne	.+2      	; 0x5fe6 <Socket_ReadSocketData+0x58>
    5fe4:	fe c0       	rjmp	.+508    	; 0x61e2 <Socket_ReadSocketData+0x254>
    5fe6:	8a 85       	ldd	r24, Y+10	; 0x0a
    5fe8:	28 2f       	mov	r18, r24
    5fea:	88 0f       	add	r24, r24
    5fec:	33 0b       	sbc	r19, r19
    5fee:	4b e0       	ldi	r20, 0x0B	; 11
    5ff0:	42 9f       	mul	r20, r18
    5ff2:	c0 01       	movw	r24, r0
    5ff4:	43 9f       	mul	r20, r19
    5ff6:	90 0d       	add	r25, r0
    5ff8:	11 24       	eor	r1, r1
    5ffa:	8b 5a       	subi	r24, 0xAB	; 171
    5ffc:	9c 4c       	sbci	r25, 0xCC	; 204
    5ffe:	fc 01       	movw	r30, r24
    6000:	80 81       	ld	r24, Z
    6002:	91 81       	ldd	r25, Z+1	; 0x01
    6004:	89 2b       	or	r24, r25
    6006:	09 f4       	brne	.+2      	; 0x600a <Socket_ReadSocketData+0x7c>
    6008:	ec c0       	rjmp	.+472    	; 0x61e2 <Socket_ReadSocketData+0x254>
    600a:	8a 85       	ldd	r24, Y+10	; 0x0a
    600c:	28 2f       	mov	r18, r24
    600e:	88 0f       	add	r24, r24
    6010:	33 0b       	sbc	r19, r19
    6012:	4b e0       	ldi	r20, 0x0B	; 11
    6014:	42 9f       	mul	r20, r18
    6016:	c0 01       	movw	r24, r0
    6018:	43 9f       	mul	r20, r19
    601a:	90 0d       	add	r25, r0
    601c:	11 24       	eor	r1, r1
    601e:	85 5a       	subi	r24, 0xA5	; 165
    6020:	9c 4c       	sbci	r25, 0xCC	; 204
    6022:	fc 01       	movw	r30, r24
    6024:	80 81       	ld	r24, Z
    6026:	81 30       	cpi	r24, 0x01	; 1
    6028:	09 f0       	breq	.+2      	; 0x602c <Socket_ReadSocketData+0x9e>
    602a:	db c0       	rjmp	.+438    	; 0x61e2 <Socket_ReadSocketData+0x254>
    602c:	8e 85       	ldd	r24, Y+14	; 0x0e
    602e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6030:	a8 89       	ldd	r26, Y+16	; 0x10
    6032:	b9 89       	ldd	r27, Y+17	; 0x11
    6034:	89 83       	std	Y+1, r24	; 0x01
    6036:	9a 83       	std	Y+2, r25	; 0x02
    6038:	ab 83       	std	Y+3, r26	; 0x03
    603a:	bc 83       	std	Y+4, r27	; 0x04
    603c:	8b 85       	ldd	r24, Y+11	; 0x0b
    603e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6040:	2a 89       	ldd	r18, Y+18	; 0x12
    6042:	3b 89       	ldd	r19, Y+19	; 0x13
    6044:	fc 01       	movw	r30, r24
    6046:	24 83       	std	Z+4, r18	; 0x04
    6048:	35 83       	std	Z+5, r19	; 0x05
    604a:	81 e0       	ldi	r24, 0x01	; 1
    604c:	8f 83       	std	Y+7, r24	; 0x07
    604e:	8a 89       	ldd	r24, Y+18	; 0x12
    6050:	9b 89       	ldd	r25, Y+19	; 0x13
    6052:	8d 83       	std	Y+5, r24	; 0x05
    6054:	9e 83       	std	Y+6, r25	; 0x06
    6056:	8a 85       	ldd	r24, Y+10	; 0x0a
    6058:	28 2f       	mov	r18, r24
    605a:	88 0f       	add	r24, r24
    605c:	33 0b       	sbc	r19, r19
    605e:	4b e0       	ldi	r20, 0x0B	; 11
    6060:	42 9f       	mul	r20, r18
    6062:	c0 01       	movw	r24, r0
    6064:	43 9f       	mul	r20, r19
    6066:	90 0d       	add	r25, r0
    6068:	11 24       	eor	r1, r1
    606a:	8b 5a       	subi	r24, 0xAB	; 171
    606c:	9c 4c       	sbci	r25, 0xCC	; 204
    606e:	fc 01       	movw	r30, r24
    6070:	80 81       	ld	r24, Z
    6072:	91 81       	ldd	r25, Z+1	; 0x01
    6074:	2d 81       	ldd	r18, Y+5	; 0x05
    6076:	3e 81       	ldd	r19, Y+6	; 0x06
    6078:	a9 01       	movw	r20, r18
    607a:	48 1b       	sub	r20, r24
    607c:	59 0b       	sbc	r21, r25
    607e:	ca 01       	movw	r24, r20
    6080:	88 87       	std	Y+8, r24	; 0x08
    6082:	99 87       	std	Y+9, r25	; 0x09
    6084:	88 85       	ldd	r24, Y+8	; 0x08
    6086:	99 85       	ldd	r25, Y+9	; 0x09
    6088:	18 16       	cp	r1, r24
    608a:	19 06       	cpc	r1, r25
    608c:	94 f4       	brge	.+36     	; 0x60b2 <Socket_ReadSocketData+0x124>
    608e:	1f 82       	std	Y+7, r1	; 0x07
    6090:	8a 85       	ldd	r24, Y+10	; 0x0a
    6092:	28 2f       	mov	r18, r24
    6094:	88 0f       	add	r24, r24
    6096:	33 0b       	sbc	r19, r19
    6098:	4b e0       	ldi	r20, 0x0B	; 11
    609a:	42 9f       	mul	r20, r18
    609c:	c0 01       	movw	r24, r0
    609e:	43 9f       	mul	r20, r19
    60a0:	90 0d       	add	r25, r0
    60a2:	11 24       	eor	r1, r1
    60a4:	8b 5a       	subi	r24, 0xAB	; 171
    60a6:	9c 4c       	sbci	r25, 0xCC	; 204
    60a8:	fc 01       	movw	r30, r24
    60aa:	80 81       	ld	r24, Z
    60ac:	91 81       	ldd	r25, Z+1	; 0x01
    60ae:	8d 83       	std	Y+5, r24	; 0x05
    60b0:	9e 83       	std	Y+6, r25	; 0x06
    60b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    60b4:	28 2f       	mov	r18, r24
    60b6:	88 0f       	add	r24, r24
    60b8:	33 0b       	sbc	r19, r19
    60ba:	4b e0       	ldi	r20, 0x0B	; 11
    60bc:	42 9f       	mul	r20, r18
    60be:	c0 01       	movw	r24, r0
    60c0:	43 9f       	mul	r20, r19
    60c2:	90 0d       	add	r25, r0
    60c4:	11 24       	eor	r1, r1
    60c6:	8d 5a       	subi	r24, 0xAD	; 173
    60c8:	9c 4c       	sbci	r25, 0xCC	; 204
    60ca:	fc 01       	movw	r30, r24
    60cc:	40 81       	ld	r20, Z
    60ce:	51 81       	ldd	r21, Z+1	; 0x01
    60d0:	2d 81       	ldd	r18, Y+5	; 0x05
    60d2:	3e 81       	ldd	r19, Y+6	; 0x06
    60d4:	89 81       	ldd	r24, Y+1	; 0x01
    60d6:	9a 81       	ldd	r25, Y+2	; 0x02
    60d8:	ab 81       	ldd	r26, Y+3	; 0x03
    60da:	bc 81       	ldd	r27, Y+4	; 0x04
    60dc:	0f 81       	ldd	r16, Y+7	; 0x07
    60de:	bc 01       	movw	r22, r24
    60e0:	cd 01       	movw	r24, r26
    60e2:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    60e6:	88 23       	and	r24, r24
    60e8:	09 f0       	breq	.+2      	; 0x60ec <Socket_ReadSocketData+0x15e>
    60ea:	7a c0       	rjmp	.+244    	; 0x61e0 <Socket_ReadSocketData+0x252>
    60ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    60ee:	28 2f       	mov	r18, r24
    60f0:	88 0f       	add	r24, r24
    60f2:	33 0b       	sbc	r19, r19
    60f4:	4b e0       	ldi	r20, 0x0B	; 11
    60f6:	42 9f       	mul	r20, r18
    60f8:	c0 01       	movw	r24, r0
    60fa:	43 9f       	mul	r20, r19
    60fc:	90 0d       	add	r25, r0
    60fe:	11 24       	eor	r1, r1
    6100:	8d 5a       	subi	r24, 0xAD	; 173
    6102:	9c 4c       	sbci	r25, 0xCC	; 204
    6104:	fc 01       	movw	r30, r24
    6106:	20 81       	ld	r18, Z
    6108:	31 81       	ldd	r19, Z+1	; 0x01
    610a:	8b 85       	ldd	r24, Y+11	; 0x0b
    610c:	9c 85       	ldd	r25, Y+12	; 0x0c
    610e:	fc 01       	movw	r30, r24
    6110:	20 83       	st	Z, r18
    6112:	31 83       	std	Z+1, r19	; 0x01
    6114:	2d 81       	ldd	r18, Y+5	; 0x05
    6116:	3e 81       	ldd	r19, Y+6	; 0x06
    6118:	8b 85       	ldd	r24, Y+11	; 0x0b
    611a:	9c 85       	ldd	r25, Y+12	; 0x0c
    611c:	fc 01       	movw	r30, r24
    611e:	22 83       	std	Z+2, r18	; 0x02
    6120:	33 83       	std	Z+3, r19	; 0x03
    6122:	8b 85       	ldd	r24, Y+11	; 0x0b
    6124:	9c 85       	ldd	r25, Y+12	; 0x0c
    6126:	fc 01       	movw	r30, r24
    6128:	24 81       	ldd	r18, Z+4	; 0x04
    612a:	35 81       	ldd	r19, Z+5	; 0x05
    612c:	8d 81       	ldd	r24, Y+5	; 0x05
    612e:	9e 81       	ldd	r25, Y+6	; 0x06
    6130:	28 1b       	sub	r18, r24
    6132:	39 0b       	sbc	r19, r25
    6134:	8b 85       	ldd	r24, Y+11	; 0x0b
    6136:	9c 85       	ldd	r25, Y+12	; 0x0c
    6138:	fc 01       	movw	r30, r24
    613a:	24 83       	std	Z+4, r18	; 0x04
    613c:	35 83       	std	Z+5, r19	; 0x05
    613e:	80 91 cc 33 	lds	r24, 0x33CC	; 0x8033cc <gpfAppSocketCb>
    6142:	90 91 cd 33 	lds	r25, 0x33CD	; 0x8033cd <gpfAppSocketCb+0x1>
    6146:	89 2b       	or	r24, r25
    6148:	59 f0       	breq	.+22     	; 0x6160 <Socket_ReadSocketData+0x1d2>
    614a:	20 91 cc 33 	lds	r18, 0x33CC	; 0x8033cc <gpfAppSocketCb>
    614e:	30 91 cd 33 	lds	r19, 0x33CD	; 0x8033cd <gpfAppSocketCb+0x1>
    6152:	8b 85       	ldd	r24, Y+11	; 0x0b
    6154:	9c 85       	ldd	r25, Y+12	; 0x0c
    6156:	ac 01       	movw	r20, r24
    6158:	6d 85       	ldd	r22, Y+13	; 0x0d
    615a:	8a 85       	ldd	r24, Y+10	; 0x0a
    615c:	f9 01       	movw	r30, r18
    615e:	09 95       	icall
    6160:	2a 89       	ldd	r18, Y+18	; 0x12
    6162:	3b 89       	ldd	r19, Y+19	; 0x13
    6164:	8d 81       	ldd	r24, Y+5	; 0x05
    6166:	9e 81       	ldd	r25, Y+6	; 0x06
    6168:	a9 01       	movw	r20, r18
    616a:	48 1b       	sub	r20, r24
    616c:	59 0b       	sbc	r21, r25
    616e:	ca 01       	movw	r24, r20
    6170:	8a 8b       	std	Y+18, r24	; 0x12
    6172:	9b 8b       	std	Y+19, r25	; 0x13
    6174:	8d 81       	ldd	r24, Y+5	; 0x05
    6176:	9e 81       	ldd	r25, Y+6	; 0x06
    6178:	cc 01       	movw	r24, r24
    617a:	a0 e0       	ldi	r26, 0x00	; 0
    617c:	b0 e0       	ldi	r27, 0x00	; 0
    617e:	29 81       	ldd	r18, Y+1	; 0x01
    6180:	3a 81       	ldd	r19, Y+2	; 0x02
    6182:	4b 81       	ldd	r20, Y+3	; 0x03
    6184:	5c 81       	ldd	r21, Y+4	; 0x04
    6186:	82 0f       	add	r24, r18
    6188:	93 1f       	adc	r25, r19
    618a:	a4 1f       	adc	r26, r20
    618c:	b5 1f       	adc	r27, r21
    618e:	89 83       	std	Y+1, r24	; 0x01
    6190:	9a 83       	std	Y+2, r25	; 0x02
    6192:	ab 83       	std	Y+3, r26	; 0x03
    6194:	bc 83       	std	Y+4, r27	; 0x04
    6196:	8a 85       	ldd	r24, Y+10	; 0x0a
    6198:	28 2f       	mov	r18, r24
    619a:	88 0f       	add	r24, r24
    619c:	33 0b       	sbc	r19, r19
    619e:	4b e0       	ldi	r20, 0x0B	; 11
    61a0:	42 9f       	mul	r20, r18
    61a2:	c0 01       	movw	r24, r0
    61a4:	43 9f       	mul	r20, r19
    61a6:	90 0d       	add	r25, r0
    61a8:	11 24       	eor	r1, r1
    61aa:	85 5a       	subi	r24, 0xA5	; 165
    61ac:	9c 4c       	sbci	r25, 0xCC	; 204
    61ae:	fc 01       	movw	r30, r24
    61b0:	80 81       	ld	r24, Z
    61b2:	88 23       	and	r24, r24
    61b4:	79 f4       	brne	.+30     	; 0x61d4 <Socket_ReadSocketData+0x246>
    61b6:	8a 89       	ldd	r24, Y+18	; 0x12
    61b8:	9b 89       	ldd	r25, Y+19	; 0x13
    61ba:	89 2b       	or	r24, r25
    61bc:	59 f0       	breq	.+22     	; 0x61d4 <Socket_ReadSocketData+0x246>
    61be:	01 e0       	ldi	r16, 0x01	; 1
    61c0:	20 e0       	ldi	r18, 0x00	; 0
    61c2:	30 e0       	ldi	r19, 0x00	; 0
    61c4:	40 e0       	ldi	r20, 0x00	; 0
    61c6:	50 e0       	ldi	r21, 0x00	; 0
    61c8:	60 e0       	ldi	r22, 0x00	; 0
    61ca:	70 e0       	ldi	r23, 0x00	; 0
    61cc:	cb 01       	movw	r24, r22
    61ce:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    61d2:	07 c0       	rjmp	.+14     	; 0x61e2 <Socket_ReadSocketData+0x254>
    61d4:	8a 89       	ldd	r24, Y+18	; 0x12
    61d6:	9b 89       	ldd	r25, Y+19	; 0x13
    61d8:	89 2b       	or	r24, r25
    61da:	09 f0       	breq	.+2      	; 0x61de <Socket_ReadSocketData+0x250>
    61dc:	36 cf       	rjmp	.-404    	; 0x604a <Socket_ReadSocketData+0xbc>
    61de:	01 c0       	rjmp	.+2      	; 0x61e2 <Socket_ReadSocketData+0x254>
    61e0:	00 00       	nop
    61e2:	00 00       	nop
    61e4:	63 96       	adiw	r28, 0x13	; 19
    61e6:	cd bf       	out	0x3d, r28	; 61
    61e8:	de bf       	out	0x3e, r29	; 62
    61ea:	df 91       	pop	r29
    61ec:	cf 91       	pop	r28
    61ee:	1f 91       	pop	r17
    61f0:	0f 91       	pop	r16
    61f2:	ff 90       	pop	r15
    61f4:	ef 90       	pop	r14
    61f6:	08 95       	ret

000061f8 <m2m_ip_cb>:
    61f8:	ef 92       	push	r14
    61fa:	ff 92       	push	r15
    61fc:	0f 93       	push	r16
    61fe:	1f 93       	push	r17
    6200:	cf 93       	push	r28
    6202:	df 93       	push	r29
    6204:	cd b7       	in	r28, 0x3d	; 61
    6206:	de b7       	in	r29, 0x3e	; 62
    6208:	cc 5c       	subi	r28, 0xCC	; 204
    620a:	d1 09       	sbc	r29, r1
    620c:	cd bf       	out	0x3d, r28	; 61
    620e:	de bf       	out	0x3e, r29	; 62
    6210:	fe 01       	movw	r30, r28
    6212:	ec 53       	subi	r30, 0x3C	; 60
    6214:	ff 4f       	sbci	r31, 0xFF	; 255
    6216:	80 83       	st	Z, r24
    6218:	ce 01       	movw	r24, r28
    621a:	8b 53       	subi	r24, 0x3B	; 59
    621c:	9f 4f       	sbci	r25, 0xFF	; 255
    621e:	dc 01       	movw	r26, r24
    6220:	6d 93       	st	X+, r22
    6222:	7c 93       	st	X, r23
    6224:	ce 01       	movw	r24, r28
    6226:	89 53       	subi	r24, 0x39	; 57
    6228:	9f 4f       	sbci	r25, 0xFF	; 255
    622a:	fc 01       	movw	r30, r24
    622c:	20 83       	st	Z, r18
    622e:	31 83       	std	Z+1, r19	; 0x01
    6230:	42 83       	std	Z+2, r20	; 0x02
    6232:	53 83       	std	Z+3, r21	; 0x03
    6234:	ce 01       	movw	r24, r28
    6236:	8c 53       	subi	r24, 0x3C	; 60
    6238:	9f 4f       	sbci	r25, 0xFF	; 255
    623a:	dc 01       	movw	r26, r24
    623c:	8c 91       	ld	r24, X
    623e:	81 34       	cpi	r24, 0x41	; 65
    6240:	39 f0       	breq	.+14     	; 0x6250 <m2m_ip_cb+0x58>
    6242:	ce 01       	movw	r24, r28
    6244:	8c 53       	subi	r24, 0x3C	; 60
    6246:	9f 4f       	sbci	r25, 0xFF	; 255
    6248:	fc 01       	movw	r30, r24
    624a:	80 81       	ld	r24, Z
    624c:	84 35       	cpi	r24, 0x54	; 84
    624e:	59 f5       	brne	.+86     	; 0x62a6 <m2m_ip_cb+0xae>
    6250:	ae 01       	movw	r20, r28
    6252:	41 5f       	subi	r20, 0xF1	; 241
    6254:	5f 4f       	sbci	r21, 0xFF	; 255
    6256:	ce 01       	movw	r24, r28
    6258:	89 53       	subi	r24, 0x39	; 57
    625a:	9f 4f       	sbci	r25, 0xFF	; 255
    625c:	fc 01       	movw	r30, r24
    625e:	80 81       	ld	r24, Z
    6260:	91 81       	ldd	r25, Z+1	; 0x01
    6262:	a2 81       	ldd	r26, Z+2	; 0x02
    6264:	b3 81       	ldd	r27, Z+3	; 0x03
    6266:	00 e0       	ldi	r16, 0x00	; 0
    6268:	24 e0       	ldi	r18, 0x04	; 4
    626a:	30 e0       	ldi	r19, 0x00	; 0
    626c:	bc 01       	movw	r22, r24
    626e:	cd 01       	movw	r24, r26
    6270:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    6274:	88 23       	and	r24, r24
    6276:	09 f0       	breq	.+2      	; 0x627a <m2m_ip_cb+0x82>
    6278:	70 c3       	rjmp	.+1760   	; 0x695a <m2m_ip_cb+0x762>
    627a:	88 89       	ldd	r24, Y+16	; 0x10
    627c:	8b 8b       	std	Y+19, r24	; 0x13
    627e:	80 91 cc 33 	lds	r24, 0x33CC	; 0x8033cc <gpfAppSocketCb>
    6282:	90 91 cd 33 	lds	r25, 0x33CD	; 0x8033cd <gpfAppSocketCb+0x1>
    6286:	89 2b       	or	r24, r25
    6288:	09 f4       	brne	.+2      	; 0x628c <m2m_ip_cb+0x94>
    628a:	67 c3       	rjmp	.+1742   	; 0x695a <m2m_ip_cb+0x762>
    628c:	20 91 cc 33 	lds	r18, 0x33CC	; 0x8033cc <gpfAppSocketCb>
    6290:	30 91 cd 33 	lds	r19, 0x33CD	; 0x8033cd <gpfAppSocketCb+0x1>
    6294:	7f 85       	ldd	r23, Y+15	; 0x0f
    6296:	ce 01       	movw	r24, r28
    6298:	43 96       	adiw	r24, 0x13	; 19
    629a:	ac 01       	movw	r20, r24
    629c:	61 e0       	ldi	r22, 0x01	; 1
    629e:	87 2f       	mov	r24, r23
    62a0:	f9 01       	movw	r30, r18
    62a2:	09 95       	icall
    62a4:	5a c3       	rjmp	.+1716   	; 0x695a <m2m_ip_cb+0x762>
    62a6:	ce 01       	movw	r24, r28
    62a8:	8c 53       	subi	r24, 0x3C	; 60
    62aa:	9f 4f       	sbci	r25, 0xFF	; 255
    62ac:	dc 01       	movw	r26, r24
    62ae:	8c 91       	ld	r24, X
    62b0:	82 34       	cpi	r24, 0x42	; 66
    62b2:	59 f5       	brne	.+86     	; 0x630a <m2m_ip_cb+0x112>
    62b4:	ae 01       	movw	r20, r28
    62b6:	4c 5e       	subi	r20, 0xEC	; 236
    62b8:	5f 4f       	sbci	r21, 0xFF	; 255
    62ba:	ce 01       	movw	r24, r28
    62bc:	89 53       	subi	r24, 0x39	; 57
    62be:	9f 4f       	sbci	r25, 0xFF	; 255
    62c0:	fc 01       	movw	r30, r24
    62c2:	80 81       	ld	r24, Z
    62c4:	91 81       	ldd	r25, Z+1	; 0x01
    62c6:	a2 81       	ldd	r26, Z+2	; 0x02
    62c8:	b3 81       	ldd	r27, Z+3	; 0x03
    62ca:	00 e0       	ldi	r16, 0x00	; 0
    62cc:	24 e0       	ldi	r18, 0x04	; 4
    62ce:	30 e0       	ldi	r19, 0x00	; 0
    62d0:	bc 01       	movw	r22, r24
    62d2:	cd 01       	movw	r24, r26
    62d4:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    62d8:	88 23       	and	r24, r24
    62da:	09 f0       	breq	.+2      	; 0x62de <m2m_ip_cb+0xe6>
    62dc:	45 c3       	rjmp	.+1674   	; 0x6968 <m2m_ip_cb+0x770>
    62de:	8d 89       	ldd	r24, Y+21	; 0x15
    62e0:	88 8f       	std	Y+24, r24	; 0x18
    62e2:	80 91 cc 33 	lds	r24, 0x33CC	; 0x8033cc <gpfAppSocketCb>
    62e6:	90 91 cd 33 	lds	r25, 0x33CD	; 0x8033cd <gpfAppSocketCb+0x1>
    62ea:	89 2b       	or	r24, r25
    62ec:	09 f4       	brne	.+2      	; 0x62f0 <m2m_ip_cb+0xf8>
    62ee:	3c c3       	rjmp	.+1656   	; 0x6968 <m2m_ip_cb+0x770>
    62f0:	20 91 cc 33 	lds	r18, 0x33CC	; 0x8033cc <gpfAppSocketCb>
    62f4:	30 91 cd 33 	lds	r19, 0x33CD	; 0x8033cd <gpfAppSocketCb+0x1>
    62f8:	7c 89       	ldd	r23, Y+20	; 0x14
    62fa:	ce 01       	movw	r24, r28
    62fc:	48 96       	adiw	r24, 0x18	; 24
    62fe:	ac 01       	movw	r20, r24
    6300:	62 e0       	ldi	r22, 0x02	; 2
    6302:	87 2f       	mov	r24, r23
    6304:	f9 01       	movw	r30, r18
    6306:	09 95       	icall
    6308:	2f c3       	rjmp	.+1630   	; 0x6968 <m2m_ip_cb+0x770>
    630a:	ce 01       	movw	r24, r28
    630c:	8c 53       	subi	r24, 0x3C	; 60
    630e:	9f 4f       	sbci	r25, 0xFF	; 255
    6310:	dc 01       	movw	r26, r24
    6312:	8c 91       	ld	r24, X
    6314:	83 34       	cpi	r24, 0x43	; 67
    6316:	09 f0       	breq	.+2      	; 0x631a <m2m_ip_cb+0x122>
    6318:	a9 c0       	rjmp	.+338    	; 0x646c <m2m_ip_cb+0x274>
    631a:	ae 01       	movw	r20, r28
    631c:	47 5e       	subi	r20, 0xE7	; 231
    631e:	5f 4f       	sbci	r21, 0xFF	; 255
    6320:	ce 01       	movw	r24, r28
    6322:	89 53       	subi	r24, 0x39	; 57
    6324:	9f 4f       	sbci	r25, 0xFF	; 255
    6326:	fc 01       	movw	r30, r24
    6328:	80 81       	ld	r24, Z
    632a:	91 81       	ldd	r25, Z+1	; 0x01
    632c:	a2 81       	ldd	r26, Z+2	; 0x02
    632e:	b3 81       	ldd	r27, Z+3	; 0x03
    6330:	00 e0       	ldi	r16, 0x00	; 0
    6332:	2c e0       	ldi	r18, 0x0C	; 12
    6334:	30 e0       	ldi	r19, 0x00	; 0
    6336:	bc 01       	movw	r22, r24
    6338:	cd 01       	movw	r24, r26
    633a:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    633e:	88 23       	and	r24, r24
    6340:	09 f0       	breq	.+2      	; 0x6344 <m2m_ip_cb+0x14c>
    6342:	12 c3       	rjmp	.+1572   	; 0x6968 <m2m_ip_cb+0x770>
    6344:	8a a1       	ldd	r24, Y+34	; 0x22
    6346:	88 23       	and	r24, r24
    6348:	0c f4       	brge	.+2      	; 0x634c <m2m_ip_cb+0x154>
    634a:	6a c0       	rjmp	.+212    	; 0x6420 <m2m_ip_cb+0x228>
    634c:	8a a1       	ldd	r24, Y+34	; 0x22
    634e:	28 2f       	mov	r18, r24
    6350:	88 0f       	add	r24, r24
    6352:	33 0b       	sbc	r19, r19
    6354:	89 a1       	ldd	r24, Y+33	; 0x21
    6356:	48 2f       	mov	r20, r24
    6358:	88 0f       	add	r24, r24
    635a:	55 0b       	sbc	r21, r21
    635c:	6b e0       	ldi	r22, 0x0B	; 11
    635e:	64 9f       	mul	r22, r20
    6360:	c0 01       	movw	r24, r0
    6362:	65 9f       	mul	r22, r21
    6364:	90 0d       	add	r25, r0
    6366:	11 24       	eor	r1, r1
    6368:	84 5a       	subi	r24, 0xA4	; 164
    636a:	9c 4c       	sbci	r25, 0xCC	; 204
    636c:	dc 01       	movw	r26, r24
    636e:	4c 91       	ld	r20, X
    6370:	5b e0       	ldi	r21, 0x0B	; 11
    6372:	52 9f       	mul	r21, r18
    6374:	c0 01       	movw	r24, r0
    6376:	53 9f       	mul	r21, r19
    6378:	90 0d       	add	r25, r0
    637a:	11 24       	eor	r1, r1
    637c:	84 5a       	subi	r24, 0xA4	; 164
    637e:	9c 4c       	sbci	r25, 0xCC	; 204
    6380:	fc 01       	movw	r30, r24
    6382:	40 83       	st	Z, r20
    6384:	8a a1       	ldd	r24, Y+34	; 0x22
    6386:	28 2f       	mov	r18, r24
    6388:	88 0f       	add	r24, r24
    638a:	33 0b       	sbc	r19, r19
    638c:	4b e0       	ldi	r20, 0x0B	; 11
    638e:	42 9f       	mul	r20, r18
    6390:	c0 01       	movw	r24, r0
    6392:	43 9f       	mul	r20, r19
    6394:	90 0d       	add	r25, r0
    6396:	11 24       	eor	r1, r1
    6398:	85 5a       	subi	r24, 0xA5	; 165
    639a:	9c 4c       	sbci	r25, 0xCC	; 204
    639c:	21 e0       	ldi	r18, 0x01	; 1
    639e:	dc 01       	movw	r26, r24
    63a0:	2c 93       	st	X, r18
    63a2:	8a a1       	ldd	r24, Y+34	; 0x22
    63a4:	48 2f       	mov	r20, r24
    63a6:	88 0f       	add	r24, r24
    63a8:	55 0b       	sbc	r21, r21
    63aa:	8b a1       	ldd	r24, Y+35	; 0x23
    63ac:	9c a1       	ldd	r25, Y+36	; 0x24
    63ae:	9c 01       	movw	r18, r24
    63b0:	28 50       	subi	r18, 0x08	; 8
    63b2:	31 09       	sbc	r19, r1
    63b4:	6b e0       	ldi	r22, 0x0B	; 11
    63b6:	64 9f       	mul	r22, r20
    63b8:	c0 01       	movw	r24, r0
    63ba:	65 9f       	mul	r22, r21
    63bc:	90 0d       	add	r25, r0
    63be:	11 24       	eor	r1, r1
    63c0:	87 5a       	subi	r24, 0xA7	; 167
    63c2:	9c 4c       	sbci	r25, 0xCC	; 204
    63c4:	fc 01       	movw	r30, r24
    63c6:	20 83       	st	Z, r18
    63c8:	31 83       	std	Z+1, r19	; 0x01
    63ca:	80 91 97 32 	lds	r24, 0x3297	; 0x803297 <gu16SessionID>
    63ce:	90 91 98 32 	lds	r25, 0x3298	; 0x803298 <gu16SessionID+0x1>
    63d2:	01 96       	adiw	r24, 0x01	; 1
    63d4:	80 93 97 32 	sts	0x3297, r24	; 0x803297 <gu16SessionID>
    63d8:	90 93 98 32 	sts	0x3298, r25	; 0x803298 <gu16SessionID+0x1>
    63dc:	80 91 97 32 	lds	r24, 0x3297	; 0x803297 <gu16SessionID>
    63e0:	90 91 98 32 	lds	r25, 0x3298	; 0x803298 <gu16SessionID+0x1>
    63e4:	89 2b       	or	r24, r25
    63e6:	49 f4       	brne	.+18     	; 0x63fa <m2m_ip_cb+0x202>
    63e8:	80 91 97 32 	lds	r24, 0x3297	; 0x803297 <gu16SessionID>
    63ec:	90 91 98 32 	lds	r25, 0x3298	; 0x803298 <gu16SessionID+0x1>
    63f0:	01 96       	adiw	r24, 0x01	; 1
    63f2:	80 93 97 32 	sts	0x3297, r24	; 0x803297 <gu16SessionID>
    63f6:	90 93 98 32 	sts	0x3298, r25	; 0x803298 <gu16SessionID+0x1>
    63fa:	8a a1       	ldd	r24, Y+34	; 0x22
    63fc:	48 2f       	mov	r20, r24
    63fe:	88 0f       	add	r24, r24
    6400:	55 0b       	sbc	r21, r21
    6402:	20 91 97 32 	lds	r18, 0x3297	; 0x803297 <gu16SessionID>
    6406:	30 91 98 32 	lds	r19, 0x3298	; 0x803298 <gu16SessionID+0x1>
    640a:	6b e0       	ldi	r22, 0x0B	; 11
    640c:	64 9f       	mul	r22, r20
    640e:	c0 01       	movw	r24, r0
    6410:	65 9f       	mul	r22, r21
    6412:	90 0d       	add	r25, r0
    6414:	11 24       	eor	r1, r1
    6416:	89 5a       	subi	r24, 0xA9	; 169
    6418:	9c 4c       	sbci	r25, 0xCC	; 204
    641a:	dc 01       	movw	r26, r24
    641c:	2d 93       	st	X+, r18
    641e:	3c 93       	st	X, r19
    6420:	8a a1       	ldd	r24, Y+34	; 0x22
    6422:	8d a3       	std	Y+37, r24	; 0x25
    6424:	82 e0       	ldi	r24, 0x02	; 2
    6426:	90 e0       	ldi	r25, 0x00	; 0
    6428:	8e a3       	std	Y+38, r24	; 0x26
    642a:	9f a3       	std	Y+39, r25	; 0x27
    642c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    642e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6430:	88 a7       	std	Y+40, r24	; 0x28
    6432:	99 a7       	std	Y+41, r25	; 0x29
    6434:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6436:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6438:	af 8d       	ldd	r26, Y+31	; 0x1f
    643a:	b8 a1       	ldd	r27, Y+32	; 0x20
    643c:	8a a7       	std	Y+42, r24	; 0x2a
    643e:	9b a7       	std	Y+43, r25	; 0x2b
    6440:	ac a7       	std	Y+44, r26	; 0x2c
    6442:	bd a7       	std	Y+45, r27	; 0x2d
    6444:	80 91 cc 33 	lds	r24, 0x33CC	; 0x8033cc <gpfAppSocketCb>
    6448:	90 91 cd 33 	lds	r25, 0x33CD	; 0x8033cd <gpfAppSocketCb+0x1>
    644c:	89 2b       	or	r24, r25
    644e:	09 f4       	brne	.+2      	; 0x6452 <m2m_ip_cb+0x25a>
    6450:	8b c2       	rjmp	.+1302   	; 0x6968 <m2m_ip_cb+0x770>
    6452:	20 91 cc 33 	lds	r18, 0x33CC	; 0x8033cc <gpfAppSocketCb>
    6456:	30 91 cd 33 	lds	r19, 0x33CD	; 0x8033cd <gpfAppSocketCb+0x1>
    645a:	79 a1       	ldd	r23, Y+33	; 0x21
    645c:	ce 01       	movw	r24, r28
    645e:	85 96       	adiw	r24, 0x25	; 37
    6460:	ac 01       	movw	r20, r24
    6462:	64 e0       	ldi	r22, 0x04	; 4
    6464:	87 2f       	mov	r24, r23
    6466:	f9 01       	movw	r30, r18
    6468:	09 95       	icall
    646a:	7e c2       	rjmp	.+1276   	; 0x6968 <m2m_ip_cb+0x770>
    646c:	ce 01       	movw	r24, r28
    646e:	8c 53       	subi	r24, 0x3C	; 60
    6470:	9f 4f       	sbci	r25, 0xFF	; 255
    6472:	dc 01       	movw	r26, r24
    6474:	8c 91       	ld	r24, X
    6476:	84 34       	cpi	r24, 0x44	; 68
    6478:	41 f0       	breq	.+16     	; 0x648a <m2m_ip_cb+0x292>
    647a:	ce 01       	movw	r24, r28
    647c:	8c 53       	subi	r24, 0x3C	; 60
    647e:	9f 4f       	sbci	r25, 0xFF	; 255
    6480:	fc 01       	movw	r30, r24
    6482:	80 81       	ld	r24, Z
    6484:	8b 34       	cpi	r24, 0x4B	; 75
    6486:	09 f0       	breq	.+2      	; 0x648a <m2m_ip_cb+0x292>
    6488:	44 c0       	rjmp	.+136    	; 0x6512 <m2m_ip_cb+0x31a>
    648a:	ae 01       	movw	r20, r28
    648c:	4a 5c       	subi	r20, 0xCA	; 202
    648e:	5f 4f       	sbci	r21, 0xFF	; 255
    6490:	ce 01       	movw	r24, r28
    6492:	89 53       	subi	r24, 0x39	; 57
    6494:	9f 4f       	sbci	r25, 0xFF	; 255
    6496:	fc 01       	movw	r30, r24
    6498:	80 81       	ld	r24, Z
    649a:	91 81       	ldd	r25, Z+1	; 0x01
    649c:	a2 81       	ldd	r26, Z+2	; 0x02
    649e:	b3 81       	ldd	r27, Z+3	; 0x03
    64a0:	00 e0       	ldi	r16, 0x00	; 0
    64a2:	24 e0       	ldi	r18, 0x04	; 4
    64a4:	30 e0       	ldi	r19, 0x00	; 0
    64a6:	bc 01       	movw	r22, r24
    64a8:	cd 01       	movw	r24, r26
    64aa:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    64ae:	88 23       	and	r24, r24
    64b0:	09 f0       	breq	.+2      	; 0x64b4 <m2m_ip_cb+0x2bc>
    64b2:	55 c2       	rjmp	.+1194   	; 0x695e <m2m_ip_cb+0x766>
    64b4:	8e a9       	ldd	r24, Y+54	; 0x36
    64b6:	8a af       	std	Y+58, r24	; 0x3a
    64b8:	8f a9       	ldd	r24, Y+55	; 0x37
    64ba:	8b af       	std	Y+59, r24	; 0x3b
    64bc:	8f a9       	ldd	r24, Y+55	; 0x37
    64be:	88 23       	and	r24, r24
    64c0:	a1 f4       	brne	.+40     	; 0x64ea <m2m_ip_cb+0x2f2>
    64c2:	8e a9       	ldd	r24, Y+54	; 0x36
    64c4:	48 2f       	mov	r20, r24
    64c6:	88 0f       	add	r24, r24
    64c8:	55 0b       	sbc	r21, r21
    64ca:	88 ad       	ldd	r24, Y+56	; 0x38
    64cc:	99 ad       	ldd	r25, Y+57	; 0x39
    64ce:	9c 01       	movw	r18, r24
    64d0:	28 50       	subi	r18, 0x08	; 8
    64d2:	31 09       	sbc	r19, r1
    64d4:	6b e0       	ldi	r22, 0x0B	; 11
    64d6:	64 9f       	mul	r22, r20
    64d8:	c0 01       	movw	r24, r0
    64da:	65 9f       	mul	r22, r21
    64dc:	90 0d       	add	r25, r0
    64de:	11 24       	eor	r1, r1
    64e0:	87 5a       	subi	r24, 0xA7	; 167
    64e2:	9c 4c       	sbci	r25, 0xCC	; 204
    64e4:	dc 01       	movw	r26, r24
    64e6:	2d 93       	st	X+, r18
    64e8:	3c 93       	st	X, r19
    64ea:	80 91 cc 33 	lds	r24, 0x33CC	; 0x8033cc <gpfAppSocketCb>
    64ee:	90 91 cd 33 	lds	r25, 0x33CD	; 0x8033cd <gpfAppSocketCb+0x1>
    64f2:	89 2b       	or	r24, r25
    64f4:	09 f4       	brne	.+2      	; 0x64f8 <m2m_ip_cb+0x300>
    64f6:	33 c2       	rjmp	.+1126   	; 0x695e <m2m_ip_cb+0x766>
    64f8:	20 91 cc 33 	lds	r18, 0x33CC	; 0x8033cc <gpfAppSocketCb>
    64fc:	30 91 cd 33 	lds	r19, 0x33CD	; 0x8033cd <gpfAppSocketCb+0x1>
    6500:	7e a9       	ldd	r23, Y+54	; 0x36
    6502:	ce 01       	movw	r24, r28
    6504:	ca 96       	adiw	r24, 0x3a	; 58
    6506:	ac 01       	movw	r20, r24
    6508:	65 e0       	ldi	r22, 0x05	; 5
    650a:	87 2f       	mov	r24, r23
    650c:	f9 01       	movw	r30, r18
    650e:	09 95       	icall
    6510:	26 c2       	rjmp	.+1100   	; 0x695e <m2m_ip_cb+0x766>
    6512:	ce 01       	movw	r24, r28
    6514:	8c 53       	subi	r24, 0x3C	; 60
    6516:	9f 4f       	sbci	r25, 0xFF	; 255
    6518:	dc 01       	movw	r26, r24
    651a:	8c 91       	ld	r24, X
    651c:	8a 34       	cpi	r24, 0x4A	; 74
    651e:	99 f5       	brne	.+102    	; 0x6586 <m2m_ip_cb+0x38e>
    6520:	ae 01       	movw	r20, r28
    6522:	40 58       	subi	r20, 0x80	; 128
    6524:	5f 4f       	sbci	r21, 0xFF	; 255
    6526:	ce 01       	movw	r24, r28
    6528:	89 53       	subi	r24, 0x39	; 57
    652a:	9f 4f       	sbci	r25, 0xFF	; 255
    652c:	fc 01       	movw	r30, r24
    652e:	80 81       	ld	r24, Z
    6530:	91 81       	ldd	r25, Z+1	; 0x01
    6532:	a2 81       	ldd	r26, Z+2	; 0x02
    6534:	b3 81       	ldd	r27, Z+3	; 0x03
    6536:	00 e0       	ldi	r16, 0x00	; 0
    6538:	24 e4       	ldi	r18, 0x44	; 68
    653a:	30 e0       	ldi	r19, 0x00	; 0
    653c:	bc 01       	movw	r22, r24
    653e:	cd 01       	movw	r24, r26
    6540:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    6544:	88 23       	and	r24, r24
    6546:	09 f0       	breq	.+2      	; 0x654a <m2m_ip_cb+0x352>
    6548:	0f c2       	rjmp	.+1054   	; 0x6968 <m2m_ip_cb+0x770>
    654a:	80 91 d0 33 	lds	r24, 0x33D0	; 0x8033d0 <gpfAppResolveCb>
    654e:	90 91 d1 33 	lds	r25, 0x33D1	; 0x8033d1 <gpfAppResolveCb+0x1>
    6552:	89 2b       	or	r24, r25
    6554:	09 f4       	brne	.+2      	; 0x6558 <m2m_ip_cb+0x360>
    6556:	08 c2       	rjmp	.+1040   	; 0x6968 <m2m_ip_cb+0x770>
    6558:	20 91 d0 33 	lds	r18, 0x33D0	; 0x8033d0 <gpfAppResolveCb>
    655c:	30 91 d1 33 	lds	r19, 0x33D1	; 0x8033d1 <gpfAppResolveCb+0x1>
    6560:	ce 01       	movw	r24, r28
    6562:	80 58       	subi	r24, 0x80	; 128
    6564:	9f 4f       	sbci	r25, 0xFF	; 255
    6566:	80 5c       	subi	r24, 0xC0	; 192
    6568:	9f 4f       	sbci	r25, 0xFF	; 255
    656a:	fc 01       	movw	r30, r24
    656c:	80 81       	ld	r24, Z
    656e:	91 81       	ldd	r25, Z+1	; 0x01
    6570:	a2 81       	ldd	r26, Z+2	; 0x02
    6572:	b3 81       	ldd	r27, Z+3	; 0x03
    6574:	fe 01       	movw	r30, r28
    6576:	e0 58       	subi	r30, 0x80	; 128
    6578:	ff 4f       	sbci	r31, 0xFF	; 255
    657a:	ac 01       	movw	r20, r24
    657c:	bd 01       	movw	r22, r26
    657e:	cf 01       	movw	r24, r30
    6580:	f9 01       	movw	r30, r18
    6582:	09 95       	icall
    6584:	f1 c1       	rjmp	.+994    	; 0x6968 <m2m_ip_cb+0x770>
    6586:	ce 01       	movw	r24, r28
    6588:	8c 53       	subi	r24, 0x3C	; 60
    658a:	9f 4f       	sbci	r25, 0xFF	; 255
    658c:	dc 01       	movw	r26, r24
    658e:	8c 91       	ld	r24, X
    6590:	86 34       	cpi	r24, 0x46	; 70
    6592:	79 f0       	breq	.+30     	; 0x65b2 <m2m_ip_cb+0x3ba>
    6594:	ce 01       	movw	r24, r28
    6596:	8c 53       	subi	r24, 0x3C	; 60
    6598:	9f 4f       	sbci	r25, 0xFF	; 255
    659a:	fc 01       	movw	r30, r24
    659c:	80 81       	ld	r24, Z
    659e:	88 34       	cpi	r24, 0x48	; 72
    65a0:	41 f0       	breq	.+16     	; 0x65b2 <m2m_ip_cb+0x3ba>
    65a2:	ce 01       	movw	r24, r28
    65a4:	8c 53       	subi	r24, 0x3C	; 60
    65a6:	9f 4f       	sbci	r25, 0xFF	; 255
    65a8:	dc 01       	movw	r26, r24
    65aa:	8c 91       	ld	r24, X
    65ac:	8d 34       	cpi	r24, 0x4D	; 77
    65ae:	09 f0       	breq	.+2      	; 0x65b2 <m2m_ip_cb+0x3ba>
    65b0:	fc c0       	rjmp	.+504    	; 0x67aa <m2m_ip_cb+0x5b2>
    65b2:	86 e0       	ldi	r24, 0x06	; 6
    65b4:	89 83       	std	Y+1, r24	; 0x01
    65b6:	ce 01       	movw	r24, r28
    65b8:	8c 53       	subi	r24, 0x3C	; 60
    65ba:	9f 4f       	sbci	r25, 0xFF	; 255
    65bc:	fc 01       	movw	r30, r24
    65be:	80 81       	ld	r24, Z
    65c0:	88 34       	cpi	r24, 0x48	; 72
    65c2:	11 f4       	brne	.+4      	; 0x65c8 <m2m_ip_cb+0x3d0>
    65c4:	89 e0       	ldi	r24, 0x09	; 9
    65c6:	89 83       	std	Y+1, r24	; 0x01
    65c8:	80 e1       	ldi	r24, 0x10	; 16
    65ca:	90 e0       	ldi	r25, 0x00	; 0
    65cc:	8e 83       	std	Y+6, r24	; 0x06
    65ce:	9f 83       	std	Y+7, r25	; 0x07
    65d0:	2e 81       	ldd	r18, Y+6	; 0x06
    65d2:	3f 81       	ldd	r19, Y+7	; 0x07
    65d4:	ae 01       	movw	r20, r28
    65d6:	44 5c       	subi	r20, 0xC4	; 196
    65d8:	5f 4f       	sbci	r21, 0xFF	; 255
    65da:	ce 01       	movw	r24, r28
    65dc:	89 53       	subi	r24, 0x39	; 57
    65de:	9f 4f       	sbci	r25, 0xFF	; 255
    65e0:	fc 01       	movw	r30, r24
    65e2:	80 81       	ld	r24, Z
    65e4:	91 81       	ldd	r25, Z+1	; 0x01
    65e6:	a2 81       	ldd	r26, Z+2	; 0x02
    65e8:	b3 81       	ldd	r27, Z+3	; 0x03
    65ea:	00 e0       	ldi	r16, 0x00	; 0
    65ec:	bc 01       	movw	r22, r24
    65ee:	cd 01       	movw	r24, r26
    65f0:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    65f4:	88 23       	and	r24, r24
    65f6:	09 f0       	breq	.+2      	; 0x65fa <m2m_ip_cb+0x402>
    65f8:	b4 c1       	rjmp	.+872    	; 0x6962 <m2m_ip_cb+0x76a>
    65fa:	18 86       	std	Y+8, r1	; 0x08
    65fc:	19 86       	std	Y+9, r1	; 0x09
    65fe:	ce 01       	movw	r24, r28
    6600:	88 5b       	subi	r24, 0xB8	; 184
    6602:	9f 4f       	sbci	r25, 0xFF	; 255
    6604:	dc 01       	movw	r26, r24
    6606:	8c 91       	ld	r24, X
    6608:	8a 87       	std	Y+10, r24	; 0x0a
    660a:	ce 01       	movw	r24, r28
    660c:	86 5b       	subi	r24, 0xB6	; 182
    660e:	9f 4f       	sbci	r25, 0xFF	; 255
    6610:	fc 01       	movw	r30, r24
    6612:	80 81       	ld	r24, Z
    6614:	91 81       	ldd	r25, Z+1	; 0x01
    6616:	88 87       	std	Y+8, r24	; 0x08
    6618:	99 87       	std	Y+9, r25	; 0x09
    661a:	8a 85       	ldd	r24, Y+10	; 0x0a
    661c:	28 2f       	mov	r18, r24
    661e:	88 0f       	add	r24, r24
    6620:	33 0b       	sbc	r19, r19
    6622:	4b e0       	ldi	r20, 0x0B	; 11
    6624:	42 9f       	mul	r20, r18
    6626:	c0 01       	movw	r24, r0
    6628:	43 9f       	mul	r20, r19
    662a:	90 0d       	add	r25, r0
    662c:	11 24       	eor	r1, r1
    662e:	83 5a       	subi	r24, 0xA3	; 163
    6630:	9c 4c       	sbci	r25, 0xCC	; 204
    6632:	dc 01       	movw	r26, r24
    6634:	1c 92       	st	X, r1
    6636:	ce 01       	movw	r24, r28
    6638:	8c 5b       	subi	r24, 0xBC	; 188
    663a:	9f 4f       	sbci	r25, 0xFF	; 255
    663c:	fc 01       	movw	r30, r24
    663e:	80 81       	ld	r24, Z
    6640:	91 81       	ldd	r25, Z+1	; 0x01
    6642:	8b 87       	std	Y+11, r24	; 0x0b
    6644:	9c 87       	std	Y+12, r25	; 0x0c
    6646:	ce 01       	movw	r24, r28
    6648:	8a 5b       	subi	r24, 0xBA	; 186
    664a:	9f 4f       	sbci	r25, 0xFF	; 255
    664c:	dc 01       	movw	r26, r24
    664e:	8d 91       	ld	r24, X+
    6650:	9c 91       	ld	r25, X
    6652:	8d 87       	std	Y+13, r24	; 0x0d
    6654:	9e 87       	std	Y+14, r25	; 0x0e
    6656:	2e ad       	ldd	r18, Y+62	; 0x3e
    6658:	3f ad       	ldd	r19, Y+63	; 0x3f
    665a:	ce 01       	movw	r24, r28
    665c:	84 5b       	subi	r24, 0xB4	; 180
    665e:	9f 4f       	sbci	r25, 0xFF	; 255
    6660:	fc 01       	movw	r30, r24
    6662:	20 87       	std	Z+8, r18	; 0x08
    6664:	31 87       	std	Z+9, r19	; 0x09
    6666:	ce 01       	movw	r24, r28
    6668:	80 5c       	subi	r24, 0xC0	; 192
    666a:	9f 4f       	sbci	r25, 0xFF	; 255
    666c:	fc 01       	movw	r30, r24
    666e:	80 81       	ld	r24, Z
    6670:	91 81       	ldd	r25, Z+1	; 0x01
    6672:	a2 81       	ldd	r26, Z+2	; 0x02
    6674:	b3 81       	ldd	r27, Z+3	; 0x03
    6676:	9e 01       	movw	r18, r28
    6678:	24 5b       	subi	r18, 0xB4	; 180
    667a:	3f 4f       	sbci	r19, 0xFF	; 255
    667c:	f9 01       	movw	r30, r18
    667e:	82 87       	std	Z+10, r24	; 0x0a
    6680:	93 87       	std	Z+11, r25	; 0x0b
    6682:	a4 87       	std	Z+12, r26	; 0x0c
    6684:	b5 87       	std	Z+13, r27	; 0x0d
    6686:	8a 85       	ldd	r24, Y+10	; 0x0a
    6688:	28 2f       	mov	r18, r24
    668a:	88 0f       	add	r24, r24
    668c:	33 0b       	sbc	r19, r19
    668e:	4b e0       	ldi	r20, 0x0B	; 11
    6690:	42 9f       	mul	r20, r18
    6692:	c0 01       	movw	r24, r0
    6694:	43 9f       	mul	r20, r19
    6696:	90 0d       	add	r25, r0
    6698:	11 24       	eor	r1, r1
    669a:	89 5a       	subi	r24, 0xA9	; 169
    669c:	9c 4c       	sbci	r25, 0xCC	; 204
    669e:	dc 01       	movw	r26, r24
    66a0:	2d 91       	ld	r18, X+
    66a2:	3c 91       	ld	r19, X
    66a4:	88 85       	ldd	r24, Y+8	; 0x08
    66a6:	99 85       	ldd	r25, Y+9	; 0x09
    66a8:	28 17       	cp	r18, r24
    66aa:	39 07       	cpc	r19, r25
    66ac:	09 f0       	breq	.+2      	; 0x66b0 <m2m_ip_cb+0x4b8>
    66ae:	66 c0       	rjmp	.+204    	; 0x677c <m2m_ip_cb+0x584>
    66b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    66b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    66b4:	18 16       	cp	r1, r24
    66b6:	19 06       	cpc	r1, r25
    66b8:	ec f5       	brge	.+122    	; 0x6734 <m2m_ip_cb+0x53c>
    66ba:	2b 85       	ldd	r18, Y+11	; 0x0b
    66bc:	3c 85       	ldd	r19, Y+12	; 0x0c
    66be:	ce 01       	movw	r24, r28
    66c0:	8b 53       	subi	r24, 0x3B	; 59
    66c2:	9f 4f       	sbci	r25, 0xFF	; 255
    66c4:	fc 01       	movw	r30, r24
    66c6:	80 81       	ld	r24, Z
    66c8:	91 81       	ldd	r25, Z+1	; 0x01
    66ca:	28 17       	cp	r18, r24
    66cc:	39 07       	cpc	r19, r25
    66ce:	90 f5       	brcc	.+100    	; 0x6734 <m2m_ip_cb+0x53c>
    66d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    66d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    66d4:	9c 01       	movw	r18, r24
    66d6:	40 e0       	ldi	r20, 0x00	; 0
    66d8:	50 e0       	ldi	r21, 0x00	; 0
    66da:	be 01       	movw	r22, r28
    66dc:	69 53       	subi	r22, 0x39	; 57
    66de:	7f 4f       	sbci	r23, 0xFF	; 255
    66e0:	ce 01       	movw	r24, r28
    66e2:	89 53       	subi	r24, 0x39	; 57
    66e4:	9f 4f       	sbci	r25, 0xFF	; 255
    66e6:	fc 01       	movw	r30, r24
    66e8:	80 81       	ld	r24, Z
    66ea:	91 81       	ldd	r25, Z+1	; 0x01
    66ec:	a2 81       	ldd	r26, Z+2	; 0x02
    66ee:	b3 81       	ldd	r27, Z+3	; 0x03
    66f0:	82 0f       	add	r24, r18
    66f2:	93 1f       	adc	r25, r19
    66f4:	a4 1f       	adc	r26, r20
    66f6:	b5 1f       	adc	r27, r21
    66f8:	fb 01       	movw	r30, r22
    66fa:	80 83       	st	Z, r24
    66fc:	91 83       	std	Z+1, r25	; 0x01
    66fe:	a2 83       	std	Z+2, r26	; 0x02
    6700:	b3 83       	std	Z+3, r27	; 0x03
    6702:	8b 85       	ldd	r24, Y+11	; 0x0b
    6704:	9c 85       	ldd	r25, Y+12	; 0x0c
    6706:	8e 83       	std	Y+6, r24	; 0x06
    6708:	9f 83       	std	Y+7, r25	; 0x07
    670a:	2e 81       	ldd	r18, Y+6	; 0x06
    670c:	3f 81       	ldd	r19, Y+7	; 0x07
    670e:	ce 01       	movw	r24, r28
    6710:	89 53       	subi	r24, 0x39	; 57
    6712:	9f 4f       	sbci	r25, 0xFF	; 255
    6714:	fc 01       	movw	r30, r24
    6716:	80 81       	ld	r24, Z
    6718:	91 81       	ldd	r25, Z+1	; 0x01
    671a:	a2 81       	ldd	r26, Z+2	; 0x02
    671c:	b3 81       	ldd	r27, Z+3	; 0x03
    671e:	be 01       	movw	r22, r28
    6720:	64 5b       	subi	r22, 0xB4	; 180
    6722:	7f 4f       	sbci	r23, 0xFF	; 255
    6724:	79 01       	movw	r14, r18
    6726:	8c 01       	movw	r16, r24
    6728:	9d 01       	movw	r18, r26
    672a:	49 81       	ldd	r20, Y+1	; 0x01
    672c:	8a 85       	ldd	r24, Y+10	; 0x0a
    672e:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <Socket_ReadSocketData>
    6732:	17 c1       	rjmp	.+558    	; 0x6962 <m2m_ip_cb+0x76a>
    6734:	ce 01       	movw	r24, r28
    6736:	84 5b       	subi	r24, 0xB4	; 180
    6738:	9f 4f       	sbci	r25, 0xFF	; 255
    673a:	2b 85       	ldd	r18, Y+11	; 0x0b
    673c:	3c 85       	ldd	r19, Y+12	; 0x0c
    673e:	dc 01       	movw	r26, r24
    6740:	12 96       	adiw	r26, 0x02	; 2
    6742:	2d 93       	st	X+, r18
    6744:	3c 93       	st	X, r19
    6746:	13 97       	sbiw	r26, 0x03	; 3
    6748:	ce 01       	movw	r24, r28
    674a:	84 5b       	subi	r24, 0xB4	; 180
    674c:	9f 4f       	sbci	r25, 0xFF	; 255
    674e:	fc 01       	movw	r30, r24
    6750:	10 82       	st	Z, r1
    6752:	11 82       	std	Z+1, r1	; 0x01
    6754:	80 91 cc 33 	lds	r24, 0x33CC	; 0x8033cc <gpfAppSocketCb>
    6758:	90 91 cd 33 	lds	r25, 0x33CD	; 0x8033cd <gpfAppSocketCb+0x1>
    675c:	89 2b       	or	r24, r25
    675e:	09 f4       	brne	.+2      	; 0x6762 <m2m_ip_cb+0x56a>
    6760:	00 c1       	rjmp	.+512    	; 0x6962 <m2m_ip_cb+0x76a>
    6762:	20 91 cc 33 	lds	r18, 0x33CC	; 0x8033cc <gpfAppSocketCb>
    6766:	30 91 cd 33 	lds	r19, 0x33CD	; 0x8033cd <gpfAppSocketCb+0x1>
    676a:	ce 01       	movw	r24, r28
    676c:	84 5b       	subi	r24, 0xB4	; 180
    676e:	9f 4f       	sbci	r25, 0xFF	; 255
    6770:	ac 01       	movw	r20, r24
    6772:	69 81       	ldd	r22, Y+1	; 0x01
    6774:	8a 85       	ldd	r24, Y+10	; 0x0a
    6776:	f9 01       	movw	r30, r18
    6778:	09 95       	icall
    677a:	f3 c0       	rjmp	.+486    	; 0x6962 <m2m_ip_cb+0x76a>
    677c:	ce 01       	movw	r24, r28
    677e:	8b 53       	subi	r24, 0x3B	; 59
    6780:	9f 4f       	sbci	r25, 0xFF	; 255
    6782:	2e 81       	ldd	r18, Y+6	; 0x06
    6784:	3f 81       	ldd	r19, Y+7	; 0x07
    6786:	dc 01       	movw	r26, r24
    6788:	8d 91       	ld	r24, X+
    678a:	9c 91       	ld	r25, X
    678c:	28 17       	cp	r18, r24
    678e:	39 07       	cpc	r19, r25
    6790:	08 f0       	brcs	.+2      	; 0x6794 <m2m_ip_cb+0x59c>
    6792:	e7 c0       	rjmp	.+462    	; 0x6962 <m2m_ip_cb+0x76a>
    6794:	01 e0       	ldi	r16, 0x01	; 1
    6796:	20 e0       	ldi	r18, 0x00	; 0
    6798:	30 e0       	ldi	r19, 0x00	; 0
    679a:	40 e0       	ldi	r20, 0x00	; 0
    679c:	50 e0       	ldi	r21, 0x00	; 0
    679e:	60 e0       	ldi	r22, 0x00	; 0
    67a0:	70 e0       	ldi	r23, 0x00	; 0
    67a2:	cb 01       	movw	r24, r22
    67a4:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    67a8:	dc c0       	rjmp	.+440    	; 0x6962 <m2m_ip_cb+0x76a>
    67aa:	ce 01       	movw	r24, r28
    67ac:	8c 53       	subi	r24, 0x3C	; 60
    67ae:	9f 4f       	sbci	r25, 0xFF	; 255
    67b0:	fc 01       	movw	r30, r24
    67b2:	80 81       	ld	r24, Z
    67b4:	85 34       	cpi	r24, 0x45	; 69
    67b6:	79 f0       	breq	.+30     	; 0x67d6 <m2m_ip_cb+0x5de>
    67b8:	ce 01       	movw	r24, r28
    67ba:	8c 53       	subi	r24, 0x3C	; 60
    67bc:	9f 4f       	sbci	r25, 0xFF	; 255
    67be:	dc 01       	movw	r26, r24
    67c0:	8c 91       	ld	r24, X
    67c2:	87 34       	cpi	r24, 0x47	; 71
    67c4:	41 f0       	breq	.+16     	; 0x67d6 <m2m_ip_cb+0x5de>
    67c6:	ce 01       	movw	r24, r28
    67c8:	8c 53       	subi	r24, 0x3C	; 60
    67ca:	9f 4f       	sbci	r25, 0xFF	; 255
    67cc:	fc 01       	movw	r30, r24
    67ce:	80 81       	ld	r24, Z
    67d0:	8c 34       	cpi	r24, 0x4C	; 76
    67d2:	09 f0       	breq	.+2      	; 0x67d6 <m2m_ip_cb+0x5de>
    67d4:	67 c0       	rjmp	.+206    	; 0x68a4 <m2m_ip_cb+0x6ac>
    67d6:	87 e0       	ldi	r24, 0x07	; 7
    67d8:	8a 83       	std	Y+2, r24	; 0x02
    67da:	ce 01       	movw	r24, r28
    67dc:	8c 53       	subi	r24, 0x3C	; 60
    67de:	9f 4f       	sbci	r25, 0xFF	; 255
    67e0:	dc 01       	movw	r26, r24
    67e2:	8c 91       	ld	r24, X
    67e4:	87 34       	cpi	r24, 0x47	; 71
    67e6:	11 f4       	brne	.+4      	; 0x67ec <m2m_ip_cb+0x5f4>
    67e8:	88 e0       	ldi	r24, 0x08	; 8
    67ea:	8a 83       	std	Y+2, r24	; 0x02
    67ec:	ae 01       	movw	r20, r28
    67ee:	4c 59       	subi	r20, 0x9C	; 156
    67f0:	5f 4f       	sbci	r21, 0xFF	; 255
    67f2:	ce 01       	movw	r24, r28
    67f4:	89 53       	subi	r24, 0x39	; 57
    67f6:	9f 4f       	sbci	r25, 0xFF	; 255
    67f8:	fc 01       	movw	r30, r24
    67fa:	80 81       	ld	r24, Z
    67fc:	91 81       	ldd	r25, Z+1	; 0x01
    67fe:	a2 81       	ldd	r26, Z+2	; 0x02
    6800:	b3 81       	ldd	r27, Z+3	; 0x03
    6802:	00 e0       	ldi	r16, 0x00	; 0
    6804:	28 e0       	ldi	r18, 0x08	; 8
    6806:	30 e0       	ldi	r19, 0x00	; 0
    6808:	bc 01       	movw	r22, r24
    680a:	cd 01       	movw	r24, r26
    680c:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    6810:	88 23       	and	r24, r24
    6812:	09 f0       	breq	.+2      	; 0x6816 <m2m_ip_cb+0x61e>
    6814:	a8 c0       	rjmp	.+336    	; 0x6966 <m2m_ip_cb+0x76e>
    6816:	1b 82       	std	Y+3, r1	; 0x03
    6818:	1c 82       	std	Y+4, r1	; 0x04
    681a:	ce 01       	movw	r24, r28
    681c:	8c 59       	subi	r24, 0x9C	; 156
    681e:	9f 4f       	sbci	r25, 0xFF	; 255
    6820:	dc 01       	movw	r26, r24
    6822:	8c 91       	ld	r24, X
    6824:	8d 83       	std	Y+5, r24	; 0x05
    6826:	ce 01       	movw	r24, r28
    6828:	8c 59       	subi	r24, 0x9C	; 156
    682a:	9f 4f       	sbci	r25, 0xFF	; 255
    682c:	fc 01       	movw	r30, r24
    682e:	84 81       	ldd	r24, Z+4	; 0x04
    6830:	95 81       	ldd	r25, Z+5	; 0x05
    6832:	8b 83       	std	Y+3, r24	; 0x03
    6834:	9c 83       	std	Y+4, r25	; 0x04
    6836:	ce 01       	movw	r24, r28
    6838:	8c 59       	subi	r24, 0x9C	; 156
    683a:	9f 4f       	sbci	r25, 0xFF	; 255
    683c:	dc 01       	movw	r26, r24
    683e:	12 96       	adiw	r26, 0x02	; 2
    6840:	2d 91       	ld	r18, X+
    6842:	3c 91       	ld	r19, X
    6844:	13 97       	sbiw	r26, 0x03	; 3
    6846:	ce 01       	movw	r24, r28
    6848:	8e 59       	subi	r24, 0x9E	; 158
    684a:	9f 4f       	sbci	r25, 0xFF	; 255
    684c:	fc 01       	movw	r30, r24
    684e:	20 83       	st	Z, r18
    6850:	31 83       	std	Z+1, r19	; 0x01
    6852:	8d 81       	ldd	r24, Y+5	; 0x05
    6854:	28 2f       	mov	r18, r24
    6856:	88 0f       	add	r24, r24
    6858:	33 0b       	sbc	r19, r19
    685a:	4b e0       	ldi	r20, 0x0B	; 11
    685c:	42 9f       	mul	r20, r18
    685e:	c0 01       	movw	r24, r0
    6860:	43 9f       	mul	r20, r19
    6862:	90 0d       	add	r25, r0
    6864:	11 24       	eor	r1, r1
    6866:	89 5a       	subi	r24, 0xA9	; 169
    6868:	9c 4c       	sbci	r25, 0xCC	; 204
    686a:	dc 01       	movw	r26, r24
    686c:	2d 91       	ld	r18, X+
    686e:	3c 91       	ld	r19, X
    6870:	8b 81       	ldd	r24, Y+3	; 0x03
    6872:	9c 81       	ldd	r25, Y+4	; 0x04
    6874:	28 17       	cp	r18, r24
    6876:	39 07       	cpc	r19, r25
    6878:	09 f0       	breq	.+2      	; 0x687c <m2m_ip_cb+0x684>
    687a:	75 c0       	rjmp	.+234    	; 0x6966 <m2m_ip_cb+0x76e>
    687c:	80 91 cc 33 	lds	r24, 0x33CC	; 0x8033cc <gpfAppSocketCb>
    6880:	90 91 cd 33 	lds	r25, 0x33CD	; 0x8033cd <gpfAppSocketCb+0x1>
    6884:	89 2b       	or	r24, r25
    6886:	09 f4       	brne	.+2      	; 0x688a <m2m_ip_cb+0x692>
    6888:	6e c0       	rjmp	.+220    	; 0x6966 <m2m_ip_cb+0x76e>
    688a:	20 91 cc 33 	lds	r18, 0x33CC	; 0x8033cc <gpfAppSocketCb>
    688e:	30 91 cd 33 	lds	r19, 0x33CD	; 0x8033cd <gpfAppSocketCb+0x1>
    6892:	ce 01       	movw	r24, r28
    6894:	8e 59       	subi	r24, 0x9E	; 158
    6896:	9f 4f       	sbci	r25, 0xFF	; 255
    6898:	ac 01       	movw	r20, r24
    689a:	6a 81       	ldd	r22, Y+2	; 0x02
    689c:	8d 81       	ldd	r24, Y+5	; 0x05
    689e:	f9 01       	movw	r30, r18
    68a0:	09 95       	icall
    68a2:	61 c0       	rjmp	.+194    	; 0x6966 <m2m_ip_cb+0x76e>
    68a4:	ce 01       	movw	r24, r28
    68a6:	8c 53       	subi	r24, 0x3C	; 60
    68a8:	9f 4f       	sbci	r25, 0xFF	; 255
    68aa:	dc 01       	movw	r26, r24
    68ac:	8c 91       	ld	r24, X
    68ae:	82 35       	cpi	r24, 0x52	; 82
    68b0:	09 f0       	breq	.+2      	; 0x68b4 <m2m_ip_cb+0x6bc>
    68b2:	5a c0       	rjmp	.+180    	; 0x6968 <m2m_ip_cb+0x770>
    68b4:	ae 01       	movw	r20, r28
    68b6:	44 59       	subi	r20, 0x94	; 148
    68b8:	5f 4f       	sbci	r21, 0xFF	; 255
    68ba:	ce 01       	movw	r24, r28
    68bc:	89 53       	subi	r24, 0x39	; 57
    68be:	9f 4f       	sbci	r25, 0xFF	; 255
    68c0:	fc 01       	movw	r30, r24
    68c2:	80 81       	ld	r24, Z
    68c4:	91 81       	ldd	r25, Z+1	; 0x01
    68c6:	a2 81       	ldd	r26, Z+2	; 0x02
    68c8:	b3 81       	ldd	r27, Z+3	; 0x03
    68ca:	01 e0       	ldi	r16, 0x01	; 1
    68cc:	24 e1       	ldi	r18, 0x14	; 20
    68ce:	30 e0       	ldi	r19, 0x00	; 0
    68d0:	bc 01       	movw	r22, r24
    68d2:	cd 01       	movw	r24, r26
    68d4:	0e 94 7f 19 	call	0x32fe	; 0x32fe <hif_receive>
    68d8:	88 23       	and	r24, r24
    68da:	09 f0       	breq	.+2      	; 0x68de <m2m_ip_cb+0x6e6>
    68dc:	45 c0       	rjmp	.+138    	; 0x6968 <m2m_ip_cb+0x770>
    68de:	ce 01       	movw	r24, r28
    68e0:	84 59       	subi	r24, 0x94	; 148
    68e2:	9f 4f       	sbci	r25, 0xFF	; 255
    68e4:	fc 01       	movw	r30, r24
    68e6:	84 81       	ldd	r24, Z+4	; 0x04
    68e8:	95 81       	ldd	r25, Z+5	; 0x05
    68ea:	a6 81       	ldd	r26, Z+6	; 0x06
    68ec:	b7 81       	ldd	r27, Z+7	; 0x07
    68ee:	80 93 ce 33 	sts	0x33CE, r24	; 0x8033ce <gfpPingCb>
    68f2:	90 93 cf 33 	sts	0x33CF, r25	; 0x8033cf <gfpPingCb+0x1>
    68f6:	80 91 ce 33 	lds	r24, 0x33CE	; 0x8033ce <gfpPingCb>
    68fa:	90 91 cf 33 	lds	r25, 0x33CF	; 0x8033cf <gfpPingCb+0x1>
    68fe:	89 2b       	or	r24, r25
    6900:	99 f1       	breq	.+102    	; 0x6968 <m2m_ip_cb+0x770>
    6902:	a0 91 ce 33 	lds	r26, 0x33CE	; 0x8033ce <gfpPingCb>
    6906:	b0 91 cf 33 	lds	r27, 0x33CF	; 0x8033cf <gfpPingCb+0x1>
    690a:	c5 53       	subi	r28, 0x35	; 53
    690c:	df 4f       	sbci	r29, 0xFF	; 255
    690e:	a8 83       	st	Y, r26
    6910:	b9 83       	std	Y+1, r27	; 0x01
    6912:	cb 5c       	subi	r28, 0xCB	; 203
    6914:	d0 40       	sbci	r29, 0x00	; 0
    6916:	ce 01       	movw	r24, r28
    6918:	84 59       	subi	r24, 0x94	; 148
    691a:	9f 4f       	sbci	r25, 0xFF	; 255
    691c:	fc 01       	movw	r30, r24
    691e:	60 89       	ldd	r22, Z+16	; 0x10
    6920:	ce 01       	movw	r24, r28
    6922:	84 59       	subi	r24, 0x94	; 148
    6924:	9f 4f       	sbci	r25, 0xFF	; 255
    6926:	dc 01       	movw	r26, r24
    6928:	18 96       	adiw	r26, 0x08	; 8
    692a:	2d 91       	ld	r18, X+
    692c:	3d 91       	ld	r19, X+
    692e:	4d 91       	ld	r20, X+
    6930:	5c 91       	ld	r21, X
    6932:	1b 97       	sbiw	r26, 0x0b	; 11
    6934:	ce 01       	movw	r24, r28
    6936:	84 59       	subi	r24, 0x94	; 148
    6938:	9f 4f       	sbci	r25, 0xFF	; 255
    693a:	fc 01       	movw	r30, r24
    693c:	80 81       	ld	r24, Z
    693e:	91 81       	ldd	r25, Z+1	; 0x01
    6940:	a2 81       	ldd	r26, Z+2	; 0x02
    6942:	b3 81       	ldd	r27, Z+3	; 0x03
    6944:	06 2f       	mov	r16, r22
    6946:	bc 01       	movw	r22, r24
    6948:	cd 01       	movw	r24, r26
    694a:	c5 53       	subi	r28, 0x35	; 53
    694c:	df 4f       	sbci	r29, 0xFF	; 255
    694e:	e8 81       	ld	r30, Y
    6950:	f9 81       	ldd	r31, Y+1	; 0x01
    6952:	cb 5c       	subi	r28, 0xCB	; 203
    6954:	d0 40       	sbci	r29, 0x00	; 0
    6956:	09 95       	icall
    6958:	07 c0       	rjmp	.+14     	; 0x6968 <m2m_ip_cb+0x770>
    695a:	00 00       	nop
    695c:	05 c0       	rjmp	.+10     	; 0x6968 <m2m_ip_cb+0x770>
    695e:	00 00       	nop
    6960:	03 c0       	rjmp	.+6      	; 0x6968 <m2m_ip_cb+0x770>
    6962:	00 00       	nop
    6964:	01 c0       	rjmp	.+2      	; 0x6968 <m2m_ip_cb+0x770>
    6966:	00 00       	nop
    6968:	00 00       	nop
    696a:	c4 53       	subi	r28, 0x34	; 52
    696c:	df 4f       	sbci	r29, 0xFF	; 255
    696e:	cd bf       	out	0x3d, r28	; 61
    6970:	de bf       	out	0x3e, r29	; 62
    6972:	df 91       	pop	r29
    6974:	cf 91       	pop	r28
    6976:	1f 91       	pop	r17
    6978:	0f 91       	pop	r16
    697a:	ff 90       	pop	r15
    697c:	ef 90       	pop	r14
    697e:	08 95       	ret

00006980 <socketInit>:
    6980:	cf 93       	push	r28
    6982:	df 93       	push	r29
    6984:	cd b7       	in	r28, 0x3d	; 61
    6986:	de b7       	in	r29, 0x3e	; 62
    6988:	80 91 99 32 	lds	r24, 0x3299	; 0x803299 <gbSocketInit>
    698c:	88 23       	and	r24, r24
    698e:	a9 f4       	brne	.+42     	; 0x69ba <socketInit+0x3a>
    6990:	29 e7       	ldi	r18, 0x79	; 121
    6992:	30 e0       	ldi	r19, 0x00	; 0
    6994:	40 e0       	ldi	r20, 0x00	; 0
    6996:	50 e0       	ldi	r21, 0x00	; 0
    6998:	60 e0       	ldi	r22, 0x00	; 0
    699a:	83 e5       	ldi	r24, 0x53	; 83
    699c:	93 e3       	ldi	r25, 0x33	; 51
    699e:	0e 94 aa 14 	call	0x2954	; 0x2954 <m2m_memset>
    69a2:	6c ef       	ldi	r22, 0xFC	; 252
    69a4:	70 e3       	ldi	r23, 0x30	; 48
    69a6:	82 e0       	ldi	r24, 0x02	; 2
    69a8:	0e 94 4c 1a 	call	0x3498	; 0x3498 <hif_register_cb>
    69ac:	81 e0       	ldi	r24, 0x01	; 1
    69ae:	80 93 99 32 	sts	0x3299, r24	; 0x803299 <gbSocketInit>
    69b2:	10 92 97 32 	sts	0x3297, r1	; 0x803297 <gu16SessionID>
    69b6:	10 92 98 32 	sts	0x3298, r1	; 0x803298 <gu16SessionID+0x1>
    69ba:	00 00       	nop
    69bc:	df 91       	pop	r29
    69be:	cf 91       	pop	r28
    69c0:	08 95       	ret

000069c2 <registerSocketCallback>:
    69c2:	cf 93       	push	r28
    69c4:	df 93       	push	r29
    69c6:	00 d0       	rcall	.+0      	; 0x69c8 <registerSocketCallback+0x6>
    69c8:	00 d0       	rcall	.+0      	; 0x69ca <registerSocketCallback+0x8>
    69ca:	cd b7       	in	r28, 0x3d	; 61
    69cc:	de b7       	in	r29, 0x3e	; 62
    69ce:	89 83       	std	Y+1, r24	; 0x01
    69d0:	9a 83       	std	Y+2, r25	; 0x02
    69d2:	6b 83       	std	Y+3, r22	; 0x03
    69d4:	7c 83       	std	Y+4, r23	; 0x04
    69d6:	89 81       	ldd	r24, Y+1	; 0x01
    69d8:	9a 81       	ldd	r25, Y+2	; 0x02
    69da:	80 93 cc 33 	sts	0x33CC, r24	; 0x8033cc <gpfAppSocketCb>
    69de:	90 93 cd 33 	sts	0x33CD, r25	; 0x8033cd <gpfAppSocketCb+0x1>
    69e2:	8b 81       	ldd	r24, Y+3	; 0x03
    69e4:	9c 81       	ldd	r25, Y+4	; 0x04
    69e6:	80 93 d0 33 	sts	0x33D0, r24	; 0x8033d0 <gpfAppResolveCb>
    69ea:	90 93 d1 33 	sts	0x33D1, r25	; 0x8033d1 <gpfAppResolveCb+0x1>
    69ee:	00 00       	nop
    69f0:	24 96       	adiw	r28, 0x04	; 4
    69f2:	cd bf       	out	0x3d, r28	; 61
    69f4:	de bf       	out	0x3e, r29	; 62
    69f6:	df 91       	pop	r29
    69f8:	cf 91       	pop	r28
    69fa:	08 95       	ret

000069fc <socket>:
    69fc:	cf 92       	push	r12
    69fe:	df 92       	push	r13
    6a00:	ef 92       	push	r14
    6a02:	ff 92       	push	r15
    6a04:	0f 93       	push	r16
    6a06:	1f 93       	push	r17
    6a08:	cf 93       	push	r28
    6a0a:	df 93       	push	r29
    6a0c:	cd b7       	in	r28, 0x3d	; 61
    6a0e:	de b7       	in	r29, 0x3e	; 62
    6a10:	2f 97       	sbiw	r28, 0x0f	; 15
    6a12:	cd bf       	out	0x3d, r28	; 61
    6a14:	de bf       	out	0x3e, r29	; 62
    6a16:	8c 87       	std	Y+12, r24	; 0x0c
    6a18:	9d 87       	std	Y+13, r25	; 0x0d
    6a1a:	6e 87       	std	Y+14, r22	; 0x0e
    6a1c:	4f 87       	std	Y+15, r20	; 0x0f
    6a1e:	8f ef       	ldi	r24, 0xFF	; 255
    6a20:	89 83       	std	Y+1, r24	; 0x01
    6a22:	8c 85       	ldd	r24, Y+12	; 0x0c
    6a24:	9d 85       	ldd	r25, Y+13	; 0x0d
    6a26:	02 97       	sbiw	r24, 0x02	; 2
    6a28:	09 f0       	breq	.+2      	; 0x6a2c <socket+0x30>
    6a2a:	bd c0       	rjmp	.+378    	; 0x6ba6 <socket+0x1aa>
    6a2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    6a2e:	81 30       	cpi	r24, 0x01	; 1
    6a30:	79 f5       	brne	.+94     	; 0x6a90 <socket+0x94>
    6a32:	1a 82       	std	Y+2, r1	; 0x02
    6a34:	29 c0       	rjmp	.+82     	; 0x6a88 <socket+0x8c>
    6a36:	80 91 9a 32 	lds	r24, 0x329A	; 0x80329a <u8NextTcpSock.2561>
    6a3a:	8d 83       	std	Y+5, r24	; 0x05
    6a3c:	80 91 9a 32 	lds	r24, 0x329A	; 0x80329a <u8NextTcpSock.2561>
    6a40:	28 2f       	mov	r18, r24
    6a42:	30 e0       	ldi	r19, 0x00	; 0
    6a44:	4b e0       	ldi	r20, 0x0B	; 11
    6a46:	42 9f       	mul	r20, r18
    6a48:	c0 01       	movw	r24, r0
    6a4a:	43 9f       	mul	r20, r19
    6a4c:	90 0d       	add	r25, r0
    6a4e:	11 24       	eor	r1, r1
    6a50:	8d 5a       	subi	r24, 0xAD	; 173
    6a52:	9c 4c       	sbci	r25, 0xCC	; 204
    6a54:	8b 83       	std	Y+3, r24	; 0x03
    6a56:	9c 83       	std	Y+4, r25	; 0x04
    6a58:	80 91 9a 32 	lds	r24, 0x329A	; 0x80329a <u8NextTcpSock.2561>
    6a5c:	88 2f       	mov	r24, r24
    6a5e:	90 e0       	ldi	r25, 0x00	; 0
    6a60:	01 96       	adiw	r24, 0x01	; 1
    6a62:	27 e0       	ldi	r18, 0x07	; 7
    6a64:	30 e0       	ldi	r19, 0x00	; 0
    6a66:	b9 01       	movw	r22, r18
    6a68:	0e 94 85 3b 	call	0x770a	; 0x770a <__divmodhi4>
    6a6c:	80 93 9a 32 	sts	0x329A, r24	; 0x80329a <u8NextTcpSock.2561>
    6a70:	8b 81       	ldd	r24, Y+3	; 0x03
    6a72:	9c 81       	ldd	r25, Y+4	; 0x04
    6a74:	fc 01       	movw	r30, r24
    6a76:	80 85       	ldd	r24, Z+8	; 0x08
    6a78:	88 23       	and	r24, r24
    6a7a:	19 f4       	brne	.+6      	; 0x6a82 <socket+0x86>
    6a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    6a7e:	89 83       	std	Y+1, r24	; 0x01
    6a80:	42 c0       	rjmp	.+132    	; 0x6b06 <socket+0x10a>
    6a82:	8a 81       	ldd	r24, Y+2	; 0x02
    6a84:	8f 5f       	subi	r24, 0xFF	; 255
    6a86:	8a 83       	std	Y+2, r24	; 0x02
    6a88:	8a 81       	ldd	r24, Y+2	; 0x02
    6a8a:	87 30       	cpi	r24, 0x07	; 7
    6a8c:	a0 f2       	brcs	.-88     	; 0x6a36 <socket+0x3a>
    6a8e:	3b c0       	rjmp	.+118    	; 0x6b06 <socket+0x10a>
    6a90:	8e 85       	ldd	r24, Y+14	; 0x0e
    6a92:	82 30       	cpi	r24, 0x02	; 2
    6a94:	c1 f5       	brne	.+112    	; 0x6b06 <socket+0x10a>
    6a96:	80 ea       	ldi	r24, 0xA0	; 160
    6a98:	93 e3       	ldi	r25, 0x33	; 51
    6a9a:	8e 83       	std	Y+6, r24	; 0x06
    6a9c:	9f 83       	std	Y+7, r25	; 0x07
    6a9e:	1a 82       	std	Y+2, r1	; 0x02
    6aa0:	2f c0       	rjmp	.+94     	; 0x6b00 <socket+0x104>
    6aa2:	80 91 9b 32 	lds	r24, 0x329B	; 0x80329b <u8NextUdpSock.2562>
    6aa6:	8d 83       	std	Y+5, r24	; 0x05
    6aa8:	80 91 9b 32 	lds	r24, 0x329B	; 0x80329b <u8NextUdpSock.2562>
    6aac:	28 2f       	mov	r18, r24
    6aae:	30 e0       	ldi	r19, 0x00	; 0
    6ab0:	4b e0       	ldi	r20, 0x0B	; 11
    6ab2:	42 9f       	mul	r20, r18
    6ab4:	c0 01       	movw	r24, r0
    6ab6:	43 9f       	mul	r20, r19
    6ab8:	90 0d       	add	r25, r0
    6aba:	11 24       	eor	r1, r1
    6abc:	2e 81       	ldd	r18, Y+6	; 0x06
    6abe:	3f 81       	ldd	r19, Y+7	; 0x07
    6ac0:	82 0f       	add	r24, r18
    6ac2:	93 1f       	adc	r25, r19
    6ac4:	8b 83       	std	Y+3, r24	; 0x03
    6ac6:	9c 83       	std	Y+4, r25	; 0x04
    6ac8:	80 91 9b 32 	lds	r24, 0x329B	; 0x80329b <u8NextUdpSock.2562>
    6acc:	88 2f       	mov	r24, r24
    6ace:	90 e0       	ldi	r25, 0x00	; 0
    6ad0:	01 96       	adiw	r24, 0x01	; 1
    6ad2:	83 70       	andi	r24, 0x03	; 3
    6ad4:	90 78       	andi	r25, 0x80	; 128
    6ad6:	99 23       	and	r25, r25
    6ad8:	24 f4       	brge	.+8      	; 0x6ae2 <socket+0xe6>
    6ada:	01 97       	sbiw	r24, 0x01	; 1
    6adc:	8c 6f       	ori	r24, 0xFC	; 252
    6ade:	9f 6f       	ori	r25, 0xFF	; 255
    6ae0:	01 96       	adiw	r24, 0x01	; 1
    6ae2:	80 93 9b 32 	sts	0x329B, r24	; 0x80329b <u8NextUdpSock.2562>
    6ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    6ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    6aea:	fc 01       	movw	r30, r24
    6aec:	80 85       	ldd	r24, Z+8	; 0x08
    6aee:	88 23       	and	r24, r24
    6af0:	21 f4       	brne	.+8      	; 0x6afa <socket+0xfe>
    6af2:	8d 81       	ldd	r24, Y+5	; 0x05
    6af4:	89 5f       	subi	r24, 0xF9	; 249
    6af6:	89 83       	std	Y+1, r24	; 0x01
    6af8:	06 c0       	rjmp	.+12     	; 0x6b06 <socket+0x10a>
    6afa:	8a 81       	ldd	r24, Y+2	; 0x02
    6afc:	8f 5f       	subi	r24, 0xFF	; 255
    6afe:	8a 83       	std	Y+2, r24	; 0x02
    6b00:	8a 81       	ldd	r24, Y+2	; 0x02
    6b02:	84 30       	cpi	r24, 0x04	; 4
    6b04:	70 f2       	brcs	.-100    	; 0x6aa2 <socket+0xa6>
    6b06:	89 81       	ldd	r24, Y+1	; 0x01
    6b08:	88 23       	and	r24, r24
    6b0a:	0c f4       	brge	.+2      	; 0x6b0e <socket+0x112>
    6b0c:	4c c0       	rjmp	.+152    	; 0x6ba6 <socket+0x1aa>
    6b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    6b10:	9c 81       	ldd	r25, Y+4	; 0x04
    6b12:	2b e0       	ldi	r18, 0x0B	; 11
    6b14:	30 e0       	ldi	r19, 0x00	; 0
    6b16:	40 e0       	ldi	r20, 0x00	; 0
    6b18:	50 e0       	ldi	r21, 0x00	; 0
    6b1a:	60 e0       	ldi	r22, 0x00	; 0
    6b1c:	0e 94 aa 14 	call	0x2954	; 0x2954 <m2m_memset>
    6b20:	8b 81       	ldd	r24, Y+3	; 0x03
    6b22:	9c 81       	ldd	r25, Y+4	; 0x04
    6b24:	21 e0       	ldi	r18, 0x01	; 1
    6b26:	fc 01       	movw	r30, r24
    6b28:	20 87       	std	Z+8, r18	; 0x08
    6b2a:	80 91 97 32 	lds	r24, 0x3297	; 0x803297 <gu16SessionID>
    6b2e:	90 91 98 32 	lds	r25, 0x3298	; 0x803298 <gu16SessionID+0x1>
    6b32:	01 96       	adiw	r24, 0x01	; 1
    6b34:	80 93 97 32 	sts	0x3297, r24	; 0x803297 <gu16SessionID>
    6b38:	90 93 98 32 	sts	0x3298, r25	; 0x803298 <gu16SessionID+0x1>
    6b3c:	80 91 97 32 	lds	r24, 0x3297	; 0x803297 <gu16SessionID>
    6b40:	90 91 98 32 	lds	r25, 0x3298	; 0x803298 <gu16SessionID+0x1>
    6b44:	89 2b       	or	r24, r25
    6b46:	49 f4       	brne	.+18     	; 0x6b5a <socket+0x15e>
    6b48:	80 91 97 32 	lds	r24, 0x3297	; 0x803297 <gu16SessionID>
    6b4c:	90 91 98 32 	lds	r25, 0x3298	; 0x803298 <gu16SessionID+0x1>
    6b50:	01 96       	adiw	r24, 0x01	; 1
    6b52:	80 93 97 32 	sts	0x3297, r24	; 0x803297 <gu16SessionID>
    6b56:	90 93 98 32 	sts	0x3298, r25	; 0x803298 <gu16SessionID+0x1>
    6b5a:	20 91 97 32 	lds	r18, 0x3297	; 0x803297 <gu16SessionID>
    6b5e:	30 91 98 32 	lds	r19, 0x3298	; 0x803298 <gu16SessionID+0x1>
    6b62:	8b 81       	ldd	r24, Y+3	; 0x03
    6b64:	9c 81       	ldd	r25, Y+4	; 0x04
    6b66:	fc 01       	movw	r30, r24
    6b68:	24 83       	std	Z+4, r18	; 0x04
    6b6a:	35 83       	std	Z+5, r19	; 0x05
    6b6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b6e:	88 2f       	mov	r24, r24
    6b70:	90 e0       	ldi	r25, 0x00	; 0
    6b72:	81 70       	andi	r24, 0x01	; 1
    6b74:	99 27       	eor	r25, r25
    6b76:	89 2b       	or	r24, r25
    6b78:	b1 f0       	breq	.+44     	; 0x6ba6 <socket+0x1aa>
    6b7a:	89 81       	ldd	r24, Y+1	; 0x01
    6b7c:	88 87       	std	Y+8, r24	; 0x08
    6b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    6b80:	9c 81       	ldd	r25, Y+4	; 0x04
    6b82:	21 e2       	ldi	r18, 0x21	; 33
    6b84:	fc 01       	movw	r30, r24
    6b86:	21 87       	std	Z+9, r18	; 0x09
    6b88:	ce 01       	movw	r24, r28
    6b8a:	08 96       	adiw	r24, 0x08	; 8
    6b8c:	c1 2c       	mov	r12, r1
    6b8e:	d1 2c       	mov	r13, r1
    6b90:	e1 2c       	mov	r14, r1
    6b92:	f1 2c       	mov	r15, r1
    6b94:	00 e0       	ldi	r16, 0x00	; 0
    6b96:	10 e0       	ldi	r17, 0x00	; 0
    6b98:	24 e0       	ldi	r18, 0x04	; 4
    6b9a:	30 e0       	ldi	r19, 0x00	; 0
    6b9c:	ac 01       	movw	r20, r24
    6b9e:	60 e5       	ldi	r22, 0x50	; 80
    6ba0:	82 e0       	ldi	r24, 0x02	; 2
    6ba2:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <hif_send>
    6ba6:	89 81       	ldd	r24, Y+1	; 0x01
    6ba8:	2f 96       	adiw	r28, 0x0f	; 15
    6baa:	cd bf       	out	0x3d, r28	; 61
    6bac:	de bf       	out	0x3e, r29	; 62
    6bae:	df 91       	pop	r29
    6bb0:	cf 91       	pop	r28
    6bb2:	1f 91       	pop	r17
    6bb4:	0f 91       	pop	r16
    6bb6:	ff 90       	pop	r15
    6bb8:	ef 90       	pop	r14
    6bba:	df 90       	pop	r13
    6bbc:	cf 90       	pop	r12
    6bbe:	08 95       	ret

00006bc0 <bind>:
    6bc0:	cf 92       	push	r12
    6bc2:	df 92       	push	r13
    6bc4:	ef 92       	push	r14
    6bc6:	ff 92       	push	r15
    6bc8:	0f 93       	push	r16
    6bca:	1f 93       	push	r17
    6bcc:	cf 93       	push	r28
    6bce:	df 93       	push	r29
    6bd0:	cd b7       	in	r28, 0x3d	; 61
    6bd2:	de b7       	in	r29, 0x3e	; 62
    6bd4:	62 97       	sbiw	r28, 0x12	; 18
    6bd6:	cd bf       	out	0x3d, r28	; 61
    6bd8:	de bf       	out	0x3e, r29	; 62
    6bda:	8f 87       	std	Y+15, r24	; 0x0f
    6bdc:	68 8b       	std	Y+16, r22	; 0x10
    6bde:	79 8b       	std	Y+17, r23	; 0x11
    6be0:	4a 8b       	std	Y+18, r20	; 0x12
    6be2:	8a ef       	ldi	r24, 0xFA	; 250
    6be4:	89 83       	std	Y+1, r24	; 0x01
    6be6:	88 89       	ldd	r24, Y+16	; 0x10
    6be8:	99 89       	ldd	r25, Y+17	; 0x11
    6bea:	89 2b       	or	r24, r25
    6bec:	09 f4       	brne	.+2      	; 0x6bf0 <bind+0x30>
    6bee:	63 c0       	rjmp	.+198    	; 0x6cb6 <bind+0xf6>
    6bf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    6bf2:	88 23       	and	r24, r24
    6bf4:	0c f4       	brge	.+2      	; 0x6bf8 <bind+0x38>
    6bf6:	5f c0       	rjmp	.+190    	; 0x6cb6 <bind+0xf6>
    6bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    6bfa:	28 2f       	mov	r18, r24
    6bfc:	88 0f       	add	r24, r24
    6bfe:	33 0b       	sbc	r19, r19
    6c00:	4b e0       	ldi	r20, 0x0B	; 11
    6c02:	42 9f       	mul	r20, r18
    6c04:	c0 01       	movw	r24, r0
    6c06:	43 9f       	mul	r20, r19
    6c08:	90 0d       	add	r25, r0
    6c0a:	11 24       	eor	r1, r1
    6c0c:	85 5a       	subi	r24, 0xA5	; 165
    6c0e:	9c 4c       	sbci	r25, 0xCC	; 204
    6c10:	fc 01       	movw	r30, r24
    6c12:	80 81       	ld	r24, Z
    6c14:	81 30       	cpi	r24, 0x01	; 1
    6c16:	09 f0       	breq	.+2      	; 0x6c1a <bind+0x5a>
    6c18:	4e c0       	rjmp	.+156    	; 0x6cb6 <bind+0xf6>
    6c1a:	8a 89       	ldd	r24, Y+18	; 0x12
    6c1c:	88 23       	and	r24, r24
    6c1e:	09 f4       	brne	.+2      	; 0x6c22 <bind+0x62>
    6c20:	4a c0       	rjmp	.+148    	; 0x6cb6 <bind+0xf6>
    6c22:	81 e4       	ldi	r24, 0x41	; 65
    6c24:	8a 83       	std	Y+2, r24	; 0x02
    6c26:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c28:	28 2f       	mov	r18, r24
    6c2a:	88 0f       	add	r24, r24
    6c2c:	33 0b       	sbc	r19, r19
    6c2e:	4b e0       	ldi	r20, 0x0B	; 11
    6c30:	42 9f       	mul	r20, r18
    6c32:	c0 01       	movw	r24, r0
    6c34:	43 9f       	mul	r20, r19
    6c36:	90 0d       	add	r25, r0
    6c38:	11 24       	eor	r1, r1
    6c3a:	84 5a       	subi	r24, 0xA4	; 164
    6c3c:	9c 4c       	sbci	r25, 0xCC	; 204
    6c3e:	fc 01       	movw	r30, r24
    6c40:	80 81       	ld	r24, Z
    6c42:	88 2f       	mov	r24, r24
    6c44:	90 e0       	ldi	r25, 0x00	; 0
    6c46:	81 70       	andi	r24, 0x01	; 1
    6c48:	99 27       	eor	r25, r25
    6c4a:	89 2b       	or	r24, r25
    6c4c:	11 f0       	breq	.+4      	; 0x6c52 <bind+0x92>
    6c4e:	84 e5       	ldi	r24, 0x54	; 84
    6c50:	8a 83       	std	Y+2, r24	; 0x02
    6c52:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c54:	8b 87       	std	Y+11, r24	; 0x0b
    6c56:	68 89       	ldd	r22, Y+16	; 0x10
    6c58:	79 89       	ldd	r23, Y+17	; 0x11
    6c5a:	ce 01       	movw	r24, r28
    6c5c:	03 96       	adiw	r24, 0x03	; 3
    6c5e:	28 e0       	ldi	r18, 0x08	; 8
    6c60:	30 e0       	ldi	r19, 0x00	; 0
    6c62:	40 e0       	ldi	r20, 0x00	; 0
    6c64:	50 e0       	ldi	r21, 0x00	; 0
    6c66:	0e 94 66 14 	call	0x28cc	; 0x28cc <m2m_memcpy>
    6c6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c6c:	28 2f       	mov	r18, r24
    6c6e:	88 0f       	add	r24, r24
    6c70:	33 0b       	sbc	r19, r19
    6c72:	4b e0       	ldi	r20, 0x0B	; 11
    6c74:	42 9f       	mul	r20, r18
    6c76:	c0 01       	movw	r24, r0
    6c78:	43 9f       	mul	r20, r19
    6c7a:	90 0d       	add	r25, r0
    6c7c:	11 24       	eor	r1, r1
    6c7e:	89 5a       	subi	r24, 0xA9	; 169
    6c80:	9c 4c       	sbci	r25, 0xCC	; 204
    6c82:	fc 01       	movw	r30, r24
    6c84:	80 81       	ld	r24, Z
    6c86:	91 81       	ldd	r25, Z+1	; 0x01
    6c88:	8d 87       	std	Y+13, r24	; 0x0d
    6c8a:	9e 87       	std	Y+14, r25	; 0x0e
    6c8c:	ce 01       	movw	r24, r28
    6c8e:	03 96       	adiw	r24, 0x03	; 3
    6c90:	c1 2c       	mov	r12, r1
    6c92:	d1 2c       	mov	r13, r1
    6c94:	e1 2c       	mov	r14, r1
    6c96:	f1 2c       	mov	r15, r1
    6c98:	00 e0       	ldi	r16, 0x00	; 0
    6c9a:	10 e0       	ldi	r17, 0x00	; 0
    6c9c:	2c e0       	ldi	r18, 0x0C	; 12
    6c9e:	30 e0       	ldi	r19, 0x00	; 0
    6ca0:	ac 01       	movw	r20, r24
    6ca2:	6a 81       	ldd	r22, Y+2	; 0x02
    6ca4:	82 e0       	ldi	r24, 0x02	; 2
    6ca6:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <hif_send>
    6caa:	89 83       	std	Y+1, r24	; 0x01
    6cac:	89 81       	ldd	r24, Y+1	; 0x01
    6cae:	88 23       	and	r24, r24
    6cb0:	11 f0       	breq	.+4      	; 0x6cb6 <bind+0xf6>
    6cb2:	87 ef       	ldi	r24, 0xF7	; 247
    6cb4:	89 83       	std	Y+1, r24	; 0x01
    6cb6:	89 81       	ldd	r24, Y+1	; 0x01
    6cb8:	62 96       	adiw	r28, 0x12	; 18
    6cba:	cd bf       	out	0x3d, r28	; 61
    6cbc:	de bf       	out	0x3e, r29	; 62
    6cbe:	df 91       	pop	r29
    6cc0:	cf 91       	pop	r28
    6cc2:	1f 91       	pop	r17
    6cc4:	0f 91       	pop	r16
    6cc6:	ff 90       	pop	r15
    6cc8:	ef 90       	pop	r14
    6cca:	df 90       	pop	r13
    6ccc:	cf 90       	pop	r12
    6cce:	08 95       	ret

00006cd0 <listen>:
    6cd0:	cf 92       	push	r12
    6cd2:	df 92       	push	r13
    6cd4:	ef 92       	push	r14
    6cd6:	ff 92       	push	r15
    6cd8:	0f 93       	push	r16
    6cda:	1f 93       	push	r17
    6cdc:	cf 93       	push	r28
    6cde:	df 93       	push	r29
    6ce0:	cd b7       	in	r28, 0x3d	; 61
    6ce2:	de b7       	in	r29, 0x3e	; 62
    6ce4:	27 97       	sbiw	r28, 0x07	; 7
    6ce6:	cd bf       	out	0x3d, r28	; 61
    6ce8:	de bf       	out	0x3e, r29	; 62
    6cea:	8e 83       	std	Y+6, r24	; 0x06
    6cec:	6f 83       	std	Y+7, r22	; 0x07
    6cee:	8a ef       	ldi	r24, 0xFA	; 250
    6cf0:	89 83       	std	Y+1, r24	; 0x01
    6cf2:	8e 81       	ldd	r24, Y+6	; 0x06
    6cf4:	88 23       	and	r24, r24
    6cf6:	d4 f1       	brlt	.+116    	; 0x6d6c <listen+0x9c>
    6cf8:	8e 81       	ldd	r24, Y+6	; 0x06
    6cfa:	28 2f       	mov	r18, r24
    6cfc:	88 0f       	add	r24, r24
    6cfe:	33 0b       	sbc	r19, r19
    6d00:	4b e0       	ldi	r20, 0x0B	; 11
    6d02:	42 9f       	mul	r20, r18
    6d04:	c0 01       	movw	r24, r0
    6d06:	43 9f       	mul	r20, r19
    6d08:	90 0d       	add	r25, r0
    6d0a:	11 24       	eor	r1, r1
    6d0c:	85 5a       	subi	r24, 0xA5	; 165
    6d0e:	9c 4c       	sbci	r25, 0xCC	; 204
    6d10:	fc 01       	movw	r30, r24
    6d12:	80 81       	ld	r24, Z
    6d14:	81 30       	cpi	r24, 0x01	; 1
    6d16:	51 f5       	brne	.+84     	; 0x6d6c <listen+0x9c>
    6d18:	8e 81       	ldd	r24, Y+6	; 0x06
    6d1a:	8a 83       	std	Y+2, r24	; 0x02
    6d1c:	8f 81       	ldd	r24, Y+7	; 0x07
    6d1e:	8b 83       	std	Y+3, r24	; 0x03
    6d20:	8e 81       	ldd	r24, Y+6	; 0x06
    6d22:	28 2f       	mov	r18, r24
    6d24:	88 0f       	add	r24, r24
    6d26:	33 0b       	sbc	r19, r19
    6d28:	4b e0       	ldi	r20, 0x0B	; 11
    6d2a:	42 9f       	mul	r20, r18
    6d2c:	c0 01       	movw	r24, r0
    6d2e:	43 9f       	mul	r20, r19
    6d30:	90 0d       	add	r25, r0
    6d32:	11 24       	eor	r1, r1
    6d34:	89 5a       	subi	r24, 0xA9	; 169
    6d36:	9c 4c       	sbci	r25, 0xCC	; 204
    6d38:	fc 01       	movw	r30, r24
    6d3a:	80 81       	ld	r24, Z
    6d3c:	91 81       	ldd	r25, Z+1	; 0x01
    6d3e:	8c 83       	std	Y+4, r24	; 0x04
    6d40:	9d 83       	std	Y+5, r25	; 0x05
    6d42:	ce 01       	movw	r24, r28
    6d44:	02 96       	adiw	r24, 0x02	; 2
    6d46:	c1 2c       	mov	r12, r1
    6d48:	d1 2c       	mov	r13, r1
    6d4a:	e1 2c       	mov	r14, r1
    6d4c:	f1 2c       	mov	r15, r1
    6d4e:	00 e0       	ldi	r16, 0x00	; 0
    6d50:	10 e0       	ldi	r17, 0x00	; 0
    6d52:	24 e0       	ldi	r18, 0x04	; 4
    6d54:	30 e0       	ldi	r19, 0x00	; 0
    6d56:	ac 01       	movw	r20, r24
    6d58:	62 e4       	ldi	r22, 0x42	; 66
    6d5a:	82 e0       	ldi	r24, 0x02	; 2
    6d5c:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <hif_send>
    6d60:	89 83       	std	Y+1, r24	; 0x01
    6d62:	89 81       	ldd	r24, Y+1	; 0x01
    6d64:	88 23       	and	r24, r24
    6d66:	11 f0       	breq	.+4      	; 0x6d6c <listen+0x9c>
    6d68:	87 ef       	ldi	r24, 0xF7	; 247
    6d6a:	89 83       	std	Y+1, r24	; 0x01
    6d6c:	89 81       	ldd	r24, Y+1	; 0x01
    6d6e:	27 96       	adiw	r28, 0x07	; 7
    6d70:	cd bf       	out	0x3d, r28	; 61
    6d72:	de bf       	out	0x3e, r29	; 62
    6d74:	df 91       	pop	r29
    6d76:	cf 91       	pop	r28
    6d78:	1f 91       	pop	r17
    6d7a:	0f 91       	pop	r16
    6d7c:	ff 90       	pop	r15
    6d7e:	ef 90       	pop	r14
    6d80:	df 90       	pop	r13
    6d82:	cf 90       	pop	r12
    6d84:	08 95       	ret

00006d86 <accept>:
    6d86:	cf 93       	push	r28
    6d88:	df 93       	push	r29
    6d8a:	cd b7       	in	r28, 0x3d	; 61
    6d8c:	de b7       	in	r29, 0x3e	; 62
    6d8e:	26 97       	sbiw	r28, 0x06	; 6
    6d90:	cd bf       	out	0x3d, r28	; 61
    6d92:	de bf       	out	0x3e, r29	; 62
    6d94:	8a 83       	std	Y+2, r24	; 0x02
    6d96:	6b 83       	std	Y+3, r22	; 0x03
    6d98:	7c 83       	std	Y+4, r23	; 0x04
    6d9a:	4d 83       	std	Y+5, r20	; 0x05
    6d9c:	5e 83       	std	Y+6, r21	; 0x06
    6d9e:	8a ef       	ldi	r24, 0xFA	; 250
    6da0:	89 83       	std	Y+1, r24	; 0x01
    6da2:	8a 81       	ldd	r24, Y+2	; 0x02
    6da4:	88 23       	and	r24, r24
    6da6:	8c f0       	brlt	.+34     	; 0x6dca <accept+0x44>
    6da8:	8a 81       	ldd	r24, Y+2	; 0x02
    6daa:	28 2f       	mov	r18, r24
    6dac:	88 0f       	add	r24, r24
    6dae:	33 0b       	sbc	r19, r19
    6db0:	4b e0       	ldi	r20, 0x0B	; 11
    6db2:	42 9f       	mul	r20, r18
    6db4:	c0 01       	movw	r24, r0
    6db6:	43 9f       	mul	r20, r19
    6db8:	90 0d       	add	r25, r0
    6dba:	11 24       	eor	r1, r1
    6dbc:	85 5a       	subi	r24, 0xA5	; 165
    6dbe:	9c 4c       	sbci	r25, 0xCC	; 204
    6dc0:	fc 01       	movw	r30, r24
    6dc2:	80 81       	ld	r24, Z
    6dc4:	81 30       	cpi	r24, 0x01	; 1
    6dc6:	09 f4       	brne	.+2      	; 0x6dca <accept+0x44>
    6dc8:	19 82       	std	Y+1, r1	; 0x01
    6dca:	89 81       	ldd	r24, Y+1	; 0x01
    6dcc:	26 96       	adiw	r28, 0x06	; 6
    6dce:	cd bf       	out	0x3d, r28	; 61
    6dd0:	de bf       	out	0x3e, r29	; 62
    6dd2:	df 91       	pop	r29
    6dd4:	cf 91       	pop	r28
    6dd6:	08 95       	ret

00006dd8 <send>:
    6dd8:	cf 92       	push	r12
    6dda:	df 92       	push	r13
    6ddc:	ef 92       	push	r14
    6dde:	ff 92       	push	r15
    6de0:	0f 93       	push	r16
    6de2:	1f 93       	push	r17
    6de4:	cf 93       	push	r28
    6de6:	df 93       	push	r29
    6de8:	cd b7       	in	r28, 0x3d	; 61
    6dea:	de b7       	in	r29, 0x3e	; 62
    6dec:	6c 97       	sbiw	r28, 0x1c	; 28
    6dee:	cd bf       	out	0x3d, r28	; 61
    6df0:	de bf       	out	0x3e, r29	; 62
    6df2:	8e 8b       	std	Y+22, r24	; 0x16
    6df4:	6f 8b       	std	Y+23, r22	; 0x17
    6df6:	78 8f       	std	Y+24, r23	; 0x18
    6df8:	49 8f       	std	Y+25, r20	; 0x19
    6dfa:	5a 8f       	std	Y+26, r21	; 0x1a
    6dfc:	2b 8f       	std	Y+27, r18	; 0x1b
    6dfe:	3c 8f       	std	Y+28, r19	; 0x1c
    6e00:	8a ef       	ldi	r24, 0xFA	; 250
    6e02:	9f ef       	ldi	r25, 0xFF	; 255
    6e04:	89 83       	std	Y+1, r24	; 0x01
    6e06:	9a 83       	std	Y+2, r25	; 0x02
    6e08:	8e 89       	ldd	r24, Y+22	; 0x16
    6e0a:	88 23       	and	r24, r24
    6e0c:	0c f4       	brge	.+2      	; 0x6e10 <send+0x38>
    6e0e:	89 c0       	rjmp	.+274    	; 0x6f22 <send+0x14a>
    6e10:	8f 89       	ldd	r24, Y+23	; 0x17
    6e12:	98 8d       	ldd	r25, Y+24	; 0x18
    6e14:	89 2b       	or	r24, r25
    6e16:	09 f4       	brne	.+2      	; 0x6e1a <send+0x42>
    6e18:	84 c0       	rjmp	.+264    	; 0x6f22 <send+0x14a>
    6e1a:	89 8d       	ldd	r24, Y+25	; 0x19
    6e1c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6e1e:	89 37       	cpi	r24, 0x79	; 121
    6e20:	95 40       	sbci	r25, 0x05	; 5
    6e22:	08 f0       	brcs	.+2      	; 0x6e26 <send+0x4e>
    6e24:	7e c0       	rjmp	.+252    	; 0x6f22 <send+0x14a>
    6e26:	8e 89       	ldd	r24, Y+22	; 0x16
    6e28:	28 2f       	mov	r18, r24
    6e2a:	88 0f       	add	r24, r24
    6e2c:	33 0b       	sbc	r19, r19
    6e2e:	4b e0       	ldi	r20, 0x0B	; 11
    6e30:	42 9f       	mul	r20, r18
    6e32:	c0 01       	movw	r24, r0
    6e34:	43 9f       	mul	r20, r19
    6e36:	90 0d       	add	r25, r0
    6e38:	11 24       	eor	r1, r1
    6e3a:	85 5a       	subi	r24, 0xA5	; 165
    6e3c:	9c 4c       	sbci	r25, 0xCC	; 204
    6e3e:	fc 01       	movw	r30, r24
    6e40:	80 81       	ld	r24, Z
    6e42:	81 30       	cpi	r24, 0x01	; 1
    6e44:	09 f0       	breq	.+2      	; 0x6e48 <send+0x70>
    6e46:	6d c0       	rjmp	.+218    	; 0x6f22 <send+0x14a>
    6e48:	85 e4       	ldi	r24, 0x45	; 69
    6e4a:	8d 83       	std	Y+5, r24	; 0x05
    6e4c:	80 e5       	ldi	r24, 0x50	; 80
    6e4e:	90 e0       	ldi	r25, 0x00	; 0
    6e50:	8b 83       	std	Y+3, r24	; 0x03
    6e52:	9c 83       	std	Y+4, r25	; 0x04
    6e54:	8e 89       	ldd	r24, Y+22	; 0x16
    6e56:	8e 83       	std	Y+6, r24	; 0x06
    6e58:	89 8d       	ldd	r24, Y+25	; 0x19
    6e5a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6e5c:	88 87       	std	Y+8, r24	; 0x08
    6e5e:	99 87       	std	Y+9, r25	; 0x09
    6e60:	8e 89       	ldd	r24, Y+22	; 0x16
    6e62:	28 2f       	mov	r18, r24
    6e64:	88 0f       	add	r24, r24
    6e66:	33 0b       	sbc	r19, r19
    6e68:	4b e0       	ldi	r20, 0x0B	; 11
    6e6a:	42 9f       	mul	r20, r18
    6e6c:	c0 01       	movw	r24, r0
    6e6e:	43 9f       	mul	r20, r19
    6e70:	90 0d       	add	r25, r0
    6e72:	11 24       	eor	r1, r1
    6e74:	89 5a       	subi	r24, 0xA9	; 169
    6e76:	9c 4c       	sbci	r25, 0xCC	; 204
    6e78:	fc 01       	movw	r30, r24
    6e7a:	80 81       	ld	r24, Z
    6e7c:	91 81       	ldd	r25, Z+1	; 0x01
    6e7e:	8a 8b       	std	Y+18, r24	; 0x12
    6e80:	9b 8b       	std	Y+19, r25	; 0x13
    6e82:	8e 89       	ldd	r24, Y+22	; 0x16
    6e84:	87 30       	cpi	r24, 0x07	; 7
    6e86:	24 f0       	brlt	.+8      	; 0x6e90 <send+0xb8>
    6e88:	84 e4       	ldi	r24, 0x44	; 68
    6e8a:	90 e0       	ldi	r25, 0x00	; 0
    6e8c:	8b 83       	std	Y+3, r24	; 0x03
    6e8e:	9c 83       	std	Y+4, r25	; 0x04
    6e90:	8e 89       	ldd	r24, Y+22	; 0x16
    6e92:	28 2f       	mov	r18, r24
    6e94:	88 0f       	add	r24, r24
    6e96:	33 0b       	sbc	r19, r19
    6e98:	4b e0       	ldi	r20, 0x0B	; 11
    6e9a:	42 9f       	mul	r20, r18
    6e9c:	c0 01       	movw	r24, r0
    6e9e:	43 9f       	mul	r20, r19
    6ea0:	90 0d       	add	r25, r0
    6ea2:	11 24       	eor	r1, r1
    6ea4:	84 5a       	subi	r24, 0xA4	; 164
    6ea6:	9c 4c       	sbci	r25, 0xCC	; 204
    6ea8:	fc 01       	movw	r30, r24
    6eaa:	80 81       	ld	r24, Z
    6eac:	88 2f       	mov	r24, r24
    6eae:	90 e0       	ldi	r25, 0x00	; 0
    6eb0:	81 70       	andi	r24, 0x01	; 1
    6eb2:	99 27       	eor	r25, r25
    6eb4:	89 2b       	or	r24, r25
    6eb6:	99 f0       	breq	.+38     	; 0x6ede <send+0x106>
    6eb8:	8c e4       	ldi	r24, 0x4C	; 76
    6eba:	8d 83       	std	Y+5, r24	; 0x05
    6ebc:	8e 89       	ldd	r24, Y+22	; 0x16
    6ebe:	28 2f       	mov	r18, r24
    6ec0:	88 0f       	add	r24, r24
    6ec2:	33 0b       	sbc	r19, r19
    6ec4:	4b e0       	ldi	r20, 0x0B	; 11
    6ec6:	42 9f       	mul	r20, r18
    6ec8:	c0 01       	movw	r24, r0
    6eca:	43 9f       	mul	r20, r19
    6ecc:	90 0d       	add	r25, r0
    6ece:	11 24       	eor	r1, r1
    6ed0:	87 5a       	subi	r24, 0xA7	; 167
    6ed2:	9c 4c       	sbci	r25, 0xCC	; 204
    6ed4:	fc 01       	movw	r30, r24
    6ed6:	80 81       	ld	r24, Z
    6ed8:	91 81       	ldd	r25, Z+1	; 0x01
    6eda:	8b 83       	std	Y+3, r24	; 0x03
    6edc:	9c 83       	std	Y+4, r25	; 0x04
    6ede:	8d 81       	ldd	r24, Y+5	; 0x05
    6ee0:	e8 2f       	mov	r30, r24
    6ee2:	e0 68       	ori	r30, 0x80	; 128
    6ee4:	6b 81       	ldd	r22, Y+3	; 0x03
    6ee6:	7c 81       	ldd	r23, Y+4	; 0x04
    6ee8:	49 8d       	ldd	r20, Y+25	; 0x19
    6eea:	5a 8d       	ldd	r21, Y+26	; 0x1a
    6eec:	2f 89       	ldd	r18, Y+23	; 0x17
    6eee:	38 8d       	ldd	r19, Y+24	; 0x18
    6ef0:	ce 01       	movw	r24, r28
    6ef2:	06 96       	adiw	r24, 0x06	; 6
    6ef4:	6b 01       	movw	r12, r22
    6ef6:	7a 01       	movw	r14, r20
    6ef8:	89 01       	movw	r16, r18
    6efa:	20 e1       	ldi	r18, 0x10	; 16
    6efc:	30 e0       	ldi	r19, 0x00	; 0
    6efe:	ac 01       	movw	r20, r24
    6f00:	6e 2f       	mov	r22, r30
    6f02:	82 e0       	ldi	r24, 0x02	; 2
    6f04:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <hif_send>
    6f08:	08 2e       	mov	r0, r24
    6f0a:	00 0c       	add	r0, r0
    6f0c:	99 0b       	sbc	r25, r25
    6f0e:	89 83       	std	Y+1, r24	; 0x01
    6f10:	9a 83       	std	Y+2, r25	; 0x02
    6f12:	89 81       	ldd	r24, Y+1	; 0x01
    6f14:	9a 81       	ldd	r25, Y+2	; 0x02
    6f16:	89 2b       	or	r24, r25
    6f18:	21 f0       	breq	.+8      	; 0x6f22 <send+0x14a>
    6f1a:	82 ef       	ldi	r24, 0xF2	; 242
    6f1c:	9f ef       	ldi	r25, 0xFF	; 255
    6f1e:	89 83       	std	Y+1, r24	; 0x01
    6f20:	9a 83       	std	Y+2, r25	; 0x02
    6f22:	89 81       	ldd	r24, Y+1	; 0x01
    6f24:	9a 81       	ldd	r25, Y+2	; 0x02
    6f26:	6c 96       	adiw	r28, 0x1c	; 28
    6f28:	cd bf       	out	0x3d, r28	; 61
    6f2a:	de bf       	out	0x3e, r29	; 62
    6f2c:	df 91       	pop	r29
    6f2e:	cf 91       	pop	r28
    6f30:	1f 91       	pop	r17
    6f32:	0f 91       	pop	r16
    6f34:	ff 90       	pop	r15
    6f36:	ef 90       	pop	r14
    6f38:	df 90       	pop	r13
    6f3a:	cf 90       	pop	r12
    6f3c:	08 95       	ret

00006f3e <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    6f3e:	cf 92       	push	r12
    6f40:	df 92       	push	r13
    6f42:	ef 92       	push	r14
    6f44:	ff 92       	push	r15
    6f46:	0f 93       	push	r16
    6f48:	1f 93       	push	r17
    6f4a:	cf 93       	push	r28
    6f4c:	df 93       	push	r29
    6f4e:	cd b7       	in	r28, 0x3d	; 61
    6f50:	de b7       	in	r29, 0x3e	; 62
    6f52:	64 97       	sbiw	r28, 0x14	; 20
    6f54:	cd bf       	out	0x3d, r28	; 61
    6f56:	de bf       	out	0x3e, r29	; 62
    6f58:	8c 87       	std	Y+12, r24	; 0x0c
    6f5a:	6d 87       	std	Y+13, r22	; 0x0d
    6f5c:	7e 87       	std	Y+14, r23	; 0x0e
    6f5e:	4f 87       	std	Y+15, r20	; 0x0f
    6f60:	58 8b       	std	Y+16, r21	; 0x10
    6f62:	09 8b       	std	Y+17, r16	; 0x11
    6f64:	1a 8b       	std	Y+18, r17	; 0x12
    6f66:	2b 8b       	std	Y+19, r18	; 0x13
    6f68:	3c 8b       	std	Y+20, r19	; 0x14
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    6f6a:	8a ef       	ldi	r24, 0xFA	; 250
    6f6c:	9f ef       	ldi	r25, 0xFF	; 255
    6f6e:	89 83       	std	Y+1, r24	; 0x01
    6f70:	9a 83       	std	Y+2, r25	; 0x02
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    6f72:	8c 85       	ldd	r24, Y+12	; 0x0c
    6f74:	88 23       	and	r24, r24
    6f76:	0c f4       	brge	.+2      	; 0x6f7a <recv+0x3c>
    6f78:	be c0       	rjmp	.+380    	; 0x70f6 <recv+0x1b8>
    6f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f7e:	89 2b       	or	r24, r25
    6f80:	09 f4       	brne	.+2      	; 0x6f84 <recv+0x46>
    6f82:	b9 c0       	rjmp	.+370    	; 0x70f6 <recv+0x1b8>
    6f84:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f86:	98 89       	ldd	r25, Y+16	; 0x10
    6f88:	89 2b       	or	r24, r25
    6f8a:	09 f4       	brne	.+2      	; 0x6f8e <recv+0x50>
    6f8c:	b4 c0       	rjmp	.+360    	; 0x70f6 <recv+0x1b8>
    6f8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6f90:	28 2f       	mov	r18, r24
    6f92:	88 0f       	add	r24, r24
    6f94:	33 0b       	sbc	r19, r19
    6f96:	4b e0       	ldi	r20, 0x0B	; 11
    6f98:	42 9f       	mul	r20, r18
    6f9a:	c0 01       	movw	r24, r0
    6f9c:	43 9f       	mul	r20, r19
    6f9e:	90 0d       	add	r25, r0
    6fa0:	11 24       	eor	r1, r1
    6fa2:	85 5a       	subi	r24, 0xA5	; 165
    6fa4:	9c 4c       	sbci	r25, 0xCC	; 204
    6fa6:	fc 01       	movw	r30, r24
    6fa8:	80 81       	ld	r24, Z
    6faa:	81 30       	cpi	r24, 0x01	; 1
    6fac:	09 f0       	breq	.+2      	; 0x6fb0 <recv+0x72>
    6fae:	a3 c0       	rjmp	.+326    	; 0x70f6 <recv+0x1b8>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    6fb0:	19 82       	std	Y+1, r1	; 0x01
    6fb2:	1a 82       	std	Y+2, r1	; 0x02
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    6fb4:	8c 85       	ldd	r24, Y+12	; 0x0c
    6fb6:	28 2f       	mov	r18, r24
    6fb8:	88 0f       	add	r24, r24
    6fba:	33 0b       	sbc	r19, r19
    6fbc:	4b e0       	ldi	r20, 0x0B	; 11
    6fbe:	42 9f       	mul	r20, r18
    6fc0:	c0 01       	movw	r24, r0
    6fc2:	43 9f       	mul	r20, r19
    6fc4:	90 0d       	add	r25, r0
    6fc6:	11 24       	eor	r1, r1
    6fc8:	8d 5a       	subi	r24, 0xAD	; 173
    6fca:	9c 4c       	sbci	r25, 0xCC	; 204
    6fcc:	2d 85       	ldd	r18, Y+13	; 0x0d
    6fce:	3e 85       	ldd	r19, Y+14	; 0x0e
    6fd0:	fc 01       	movw	r30, r24
    6fd2:	20 83       	st	Z, r18
    6fd4:	31 83       	std	Z+1, r19	; 0x01
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    6fd6:	8c 85       	ldd	r24, Y+12	; 0x0c
    6fd8:	28 2f       	mov	r18, r24
    6fda:	88 0f       	add	r24, r24
    6fdc:	33 0b       	sbc	r19, r19
    6fde:	4b e0       	ldi	r20, 0x0B	; 11
    6fe0:	42 9f       	mul	r20, r18
    6fe2:	c0 01       	movw	r24, r0
    6fe4:	43 9f       	mul	r20, r19
    6fe6:	90 0d       	add	r25, r0
    6fe8:	11 24       	eor	r1, r1
    6fea:	8b 5a       	subi	r24, 0xAB	; 171
    6fec:	9c 4c       	sbci	r25, 0xCC	; 204
    6fee:	2f 85       	ldd	r18, Y+15	; 0x0f
    6ff0:	38 89       	ldd	r19, Y+16	; 0x10
    6ff2:	fc 01       	movw	r30, r24
    6ff4:	20 83       	st	Z, r18
    6ff6:	31 83       	std	Z+1, r19	; 0x01

		if(!gastrSockets[sock].bIsRecvPending)
    6ff8:	8c 85       	ldd	r24, Y+12	; 0x0c
    6ffa:	28 2f       	mov	r18, r24
    6ffc:	88 0f       	add	r24, r24
    6ffe:	33 0b       	sbc	r19, r19
    7000:	4b e0       	ldi	r20, 0x0B	; 11
    7002:	42 9f       	mul	r20, r18
    7004:	c0 01       	movw	r24, r0
    7006:	43 9f       	mul	r20, r19
    7008:	90 0d       	add	r25, r0
    700a:	11 24       	eor	r1, r1
    700c:	83 5a       	subi	r24, 0xA3	; 163
    700e:	9c 4c       	sbci	r25, 0xCC	; 204
    7010:	fc 01       	movw	r30, r24
    7012:	80 81       	ld	r24, Z
    7014:	88 23       	and	r24, r24
    7016:	09 f0       	breq	.+2      	; 0x701a <recv+0xdc>
    7018:	6e c0       	rjmp	.+220    	; 0x70f6 <recv+0x1b8>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    701a:	86 e4       	ldi	r24, 0x46	; 70
    701c:	8b 83       	std	Y+3, r24	; 0x03

			gastrSockets[sock].bIsRecvPending = 1;
    701e:	8c 85       	ldd	r24, Y+12	; 0x0c
    7020:	28 2f       	mov	r18, r24
    7022:	88 0f       	add	r24, r24
    7024:	33 0b       	sbc	r19, r19
    7026:	4b e0       	ldi	r20, 0x0B	; 11
    7028:	42 9f       	mul	r20, r18
    702a:	c0 01       	movw	r24, r0
    702c:	43 9f       	mul	r20, r19
    702e:	90 0d       	add	r25, r0
    7030:	11 24       	eor	r1, r1
    7032:	83 5a       	subi	r24, 0xA3	; 163
    7034:	9c 4c       	sbci	r25, 0xCC	; 204
    7036:	21 e0       	ldi	r18, 0x01	; 1
    7038:	fc 01       	movw	r30, r24
    703a:	20 83       	st	Z, r18
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    703c:	8c 85       	ldd	r24, Y+12	; 0x0c
    703e:	28 2f       	mov	r18, r24
    7040:	88 0f       	add	r24, r24
    7042:	33 0b       	sbc	r19, r19
    7044:	4b e0       	ldi	r20, 0x0B	; 11
    7046:	42 9f       	mul	r20, r18
    7048:	c0 01       	movw	r24, r0
    704a:	43 9f       	mul	r20, r19
    704c:	90 0d       	add	r25, r0
    704e:	11 24       	eor	r1, r1
    7050:	84 5a       	subi	r24, 0xA4	; 164
    7052:	9c 4c       	sbci	r25, 0xCC	; 204
    7054:	fc 01       	movw	r30, r24
    7056:	80 81       	ld	r24, Z
    7058:	88 2f       	mov	r24, r24
    705a:	90 e0       	ldi	r25, 0x00	; 0
    705c:	81 70       	andi	r24, 0x01	; 1
    705e:	99 27       	eor	r25, r25
    7060:	89 2b       	or	r24, r25
    7062:	11 f0       	breq	.+4      	; 0x7068 <recv+0x12a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    7064:	8d e4       	ldi	r24, 0x4D	; 77
    7066:	8b 83       	std	Y+3, r24	; 0x03
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    7068:	89 89       	ldd	r24, Y+17	; 0x11
    706a:	9a 89       	ldd	r25, Y+18	; 0x12
    706c:	ab 89       	ldd	r26, Y+19	; 0x13
    706e:	bc 89       	ldd	r27, Y+20	; 0x14
    7070:	89 2b       	or	r24, r25
    7072:	8a 2b       	or	r24, r26
    7074:	8b 2b       	or	r24, r27
    7076:	41 f4       	brne	.+16     	; 0x7088 <recv+0x14a>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    7078:	8f ef       	ldi	r24, 0xFF	; 255
    707a:	9f ef       	ldi	r25, 0xFF	; 255
    707c:	dc 01       	movw	r26, r24
    707e:	8c 83       	std	Y+4, r24	; 0x04
    7080:	9d 83       	std	Y+5, r25	; 0x05
    7082:	ae 83       	std	Y+6, r26	; 0x06
    7084:	bf 83       	std	Y+7, r27	; 0x07
    7086:	08 c0       	rjmp	.+16     	; 0x7098 <recv+0x15a>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    7088:	89 89       	ldd	r24, Y+17	; 0x11
    708a:	9a 89       	ldd	r25, Y+18	; 0x12
    708c:	ab 89       	ldd	r26, Y+19	; 0x13
    708e:	bc 89       	ldd	r27, Y+20	; 0x14
    7090:	8c 83       	std	Y+4, r24	; 0x04
    7092:	9d 83       	std	Y+5, r25	; 0x05
    7094:	ae 83       	std	Y+6, r26	; 0x06
    7096:	bf 83       	std	Y+7, r27	; 0x07
			strRecv.sock = sock;
    7098:	8c 85       	ldd	r24, Y+12	; 0x0c
    709a:	88 87       	std	Y+8, r24	; 0x08
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    709c:	8c 85       	ldd	r24, Y+12	; 0x0c
    709e:	28 2f       	mov	r18, r24
    70a0:	88 0f       	add	r24, r24
    70a2:	33 0b       	sbc	r19, r19
    70a4:	4b e0       	ldi	r20, 0x0B	; 11
    70a6:	42 9f       	mul	r20, r18
    70a8:	c0 01       	movw	r24, r0
    70aa:	43 9f       	mul	r20, r19
    70ac:	90 0d       	add	r25, r0
    70ae:	11 24       	eor	r1, r1
    70b0:	89 5a       	subi	r24, 0xA9	; 169
    70b2:	9c 4c       	sbci	r25, 0xCC	; 204
    70b4:	fc 01       	movw	r30, r24
    70b6:	80 81       	ld	r24, Z
    70b8:	91 81       	ldd	r25, Z+1	; 0x01
    70ba:	8a 87       	std	Y+10, r24	; 0x0a
    70bc:	9b 87       	std	Y+11, r25	; 0x0b
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    70be:	ce 01       	movw	r24, r28
    70c0:	04 96       	adiw	r24, 0x04	; 4
    70c2:	c1 2c       	mov	r12, r1
    70c4:	d1 2c       	mov	r13, r1
    70c6:	e1 2c       	mov	r14, r1
    70c8:	f1 2c       	mov	r15, r1
    70ca:	00 e0       	ldi	r16, 0x00	; 0
    70cc:	10 e0       	ldi	r17, 0x00	; 0
    70ce:	28 e0       	ldi	r18, 0x08	; 8
    70d0:	30 e0       	ldi	r19, 0x00	; 0
    70d2:	ac 01       	movw	r20, r24
    70d4:	6b 81       	ldd	r22, Y+3	; 0x03
    70d6:	82 e0       	ldi	r24, 0x02	; 2
    70d8:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <hif_send>
    70dc:	08 2e       	mov	r0, r24
    70de:	00 0c       	add	r0, r0
    70e0:	99 0b       	sbc	r25, r25
    70e2:	89 83       	std	Y+1, r24	; 0x01
    70e4:	9a 83       	std	Y+2, r25	; 0x02
			if(s16Ret != SOCK_ERR_NO_ERROR)
    70e6:	89 81       	ldd	r24, Y+1	; 0x01
    70e8:	9a 81       	ldd	r25, Y+2	; 0x02
    70ea:	89 2b       	or	r24, r25
    70ec:	21 f0       	breq	.+8      	; 0x70f6 <recv+0x1b8>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    70ee:	82 ef       	ldi	r24, 0xF2	; 242
    70f0:	9f ef       	ldi	r25, 0xFF	; 255
    70f2:	89 83       	std	Y+1, r24	; 0x01
    70f4:	9a 83       	std	Y+2, r25	; 0x02
			}
		}
	}
	return s16Ret;
    70f6:	89 81       	ldd	r24, Y+1	; 0x01
    70f8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    70fa:	64 96       	adiw	r28, 0x14	; 20
    70fc:	cd bf       	out	0x3d, r28	; 61
    70fe:	de bf       	out	0x3e, r29	; 62
    7100:	df 91       	pop	r29
    7102:	cf 91       	pop	r28
    7104:	1f 91       	pop	r17
    7106:	0f 91       	pop	r16
    7108:	ff 90       	pop	r15
    710a:	ef 90       	pop	r14
    710c:	df 90       	pop	r13
    710e:	cf 90       	pop	r12
    7110:	08 95       	ret

00007112 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    7112:	cf 92       	push	r12
    7114:	df 92       	push	r13
    7116:	ef 92       	push	r14
    7118:	ff 92       	push	r15
    711a:	0f 93       	push	r16
    711c:	1f 93       	push	r17
    711e:	cf 93       	push	r28
    7120:	df 93       	push	r29
    7122:	cd b7       	in	r28, 0x3d	; 61
    7124:	de b7       	in	r29, 0x3e	; 62
    7126:	27 97       	sbiw	r28, 0x07	; 7
    7128:	cd bf       	out	0x3d, r28	; 61
    712a:	de bf       	out	0x3e, r29	; 62
    712c:	8f 83       	std	Y+7, r24	; 0x07
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    712e:	8a ef       	ldi	r24, 0xFA	; 250
    7130:	89 83       	std	Y+1, r24	; 0x01
    M2M_INFO("Sock to delete <%d>\n", sock);
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    7132:	8f 81       	ldd	r24, Y+7	; 0x07
    7134:	88 23       	and	r24, r24
    7136:	0c f4       	brge	.+2      	; 0x713a <close+0x28>
    7138:	81 c0       	rjmp	.+258    	; 0x723c <close+0x12a>
    713a:	8f 81       	ldd	r24, Y+7	; 0x07
    713c:	28 2f       	mov	r18, r24
    713e:	88 0f       	add	r24, r24
    7140:	33 0b       	sbc	r19, r19
    7142:	4b e0       	ldi	r20, 0x0B	; 11
    7144:	42 9f       	mul	r20, r18
    7146:	c0 01       	movw	r24, r0
    7148:	43 9f       	mul	r20, r19
    714a:	90 0d       	add	r25, r0
    714c:	11 24       	eor	r1, r1
    714e:	85 5a       	subi	r24, 0xA5	; 165
    7150:	9c 4c       	sbci	r25, 0xCC	; 204
    7152:	fc 01       	movw	r30, r24
    7154:	80 81       	ld	r24, Z
    7156:	81 30       	cpi	r24, 0x01	; 1
    7158:	09 f0       	breq	.+2      	; 0x715c <close+0x4a>
    715a:	70 c0       	rjmp	.+224    	; 0x723c <close+0x12a>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    715c:	89 e4       	ldi	r24, 0x49	; 73
    715e:	8a 83       	std	Y+2, r24	; 0x02
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    7160:	8f 81       	ldd	r24, Y+7	; 0x07
    7162:	8b 83       	std	Y+3, r24	; 0x03
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    7164:	8f 81       	ldd	r24, Y+7	; 0x07
    7166:	28 2f       	mov	r18, r24
    7168:	88 0f       	add	r24, r24
    716a:	33 0b       	sbc	r19, r19
    716c:	4b e0       	ldi	r20, 0x0B	; 11
    716e:	42 9f       	mul	r20, r18
    7170:	c0 01       	movw	r24, r0
    7172:	43 9f       	mul	r20, r19
    7174:	90 0d       	add	r25, r0
    7176:	11 24       	eor	r1, r1
    7178:	89 5a       	subi	r24, 0xA9	; 169
    717a:	9c 4c       	sbci	r25, 0xCC	; 204
    717c:	fc 01       	movw	r30, r24
    717e:	80 81       	ld	r24, Z
    7180:	91 81       	ldd	r25, Z+1	; 0x01
    7182:	8d 83       	std	Y+5, r24	; 0x05
    7184:	9e 83       	std	Y+6, r25	; 0x06
		
		gastrSockets[sock].bIsUsed = 0;
    7186:	8f 81       	ldd	r24, Y+7	; 0x07
    7188:	28 2f       	mov	r18, r24
    718a:	88 0f       	add	r24, r24
    718c:	33 0b       	sbc	r19, r19
    718e:	4b e0       	ldi	r20, 0x0B	; 11
    7190:	42 9f       	mul	r20, r18
    7192:	c0 01       	movw	r24, r0
    7194:	43 9f       	mul	r20, r19
    7196:	90 0d       	add	r25, r0
    7198:	11 24       	eor	r1, r1
    719a:	85 5a       	subi	r24, 0xA5	; 165
    719c:	9c 4c       	sbci	r25, 0xCC	; 204
    719e:	fc 01       	movw	r30, r24
    71a0:	10 82       	st	Z, r1
		gastrSockets[sock].u16SessionID =0;
    71a2:	8f 81       	ldd	r24, Y+7	; 0x07
    71a4:	28 2f       	mov	r18, r24
    71a6:	88 0f       	add	r24, r24
    71a8:	33 0b       	sbc	r19, r19
    71aa:	4b e0       	ldi	r20, 0x0B	; 11
    71ac:	42 9f       	mul	r20, r18
    71ae:	c0 01       	movw	r24, r0
    71b0:	43 9f       	mul	r20, r19
    71b2:	90 0d       	add	r25, r0
    71b4:	11 24       	eor	r1, r1
    71b6:	89 5a       	subi	r24, 0xA9	; 169
    71b8:	9c 4c       	sbci	r25, 0xCC	; 204
    71ba:	fc 01       	movw	r30, r24
    71bc:	10 82       	st	Z, r1
    71be:	11 82       	std	Z+1, r1	; 0x01
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    71c0:	8f 81       	ldd	r24, Y+7	; 0x07
    71c2:	28 2f       	mov	r18, r24
    71c4:	88 0f       	add	r24, r24
    71c6:	33 0b       	sbc	r19, r19
    71c8:	4b e0       	ldi	r20, 0x0B	; 11
    71ca:	42 9f       	mul	r20, r18
    71cc:	c0 01       	movw	r24, r0
    71ce:	43 9f       	mul	r20, r19
    71d0:	90 0d       	add	r25, r0
    71d2:	11 24       	eor	r1, r1
    71d4:	84 5a       	subi	r24, 0xA4	; 164
    71d6:	9c 4c       	sbci	r25, 0xCC	; 204
    71d8:	fc 01       	movw	r30, r24
    71da:	80 81       	ld	r24, Z
    71dc:	88 2f       	mov	r24, r24
    71de:	90 e0       	ldi	r25, 0x00	; 0
    71e0:	81 70       	andi	r24, 0x01	; 1
    71e2:	99 27       	eor	r25, r25
    71e4:	89 2b       	or	r24, r25
    71e6:	11 f0       	breq	.+4      	; 0x71ec <close+0xda>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    71e8:	8e e4       	ldi	r24, 0x4E	; 78
    71ea:	8a 83       	std	Y+2, r24	; 0x02
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    71ec:	ce 01       	movw	r24, r28
    71ee:	03 96       	adiw	r24, 0x03	; 3
    71f0:	c1 2c       	mov	r12, r1
    71f2:	d1 2c       	mov	r13, r1
    71f4:	e1 2c       	mov	r14, r1
    71f6:	f1 2c       	mov	r15, r1
    71f8:	00 e0       	ldi	r16, 0x00	; 0
    71fa:	10 e0       	ldi	r17, 0x00	; 0
    71fc:	24 e0       	ldi	r18, 0x04	; 4
    71fe:	30 e0       	ldi	r19, 0x00	; 0
    7200:	ac 01       	movw	r20, r24
    7202:	6a 81       	ldd	r22, Y+2	; 0x02
    7204:	82 e0       	ldi	r24, 0x02	; 2
    7206:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <hif_send>
    720a:	89 83       	std	Y+1, r24	; 0x01
		if(s8Ret != SOCK_ERR_NO_ERROR)
    720c:	89 81       	ldd	r24, Y+1	; 0x01
    720e:	88 23       	and	r24, r24
    7210:	11 f0       	breq	.+4      	; 0x7216 <close+0x104>
		{
			s8Ret = SOCK_ERR_INVALID;
    7212:	87 ef       	ldi	r24, 0xF7	; 247
    7214:	89 83       	std	Y+1, r24	; 0x01
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    7216:	8f 81       	ldd	r24, Y+7	; 0x07
    7218:	28 2f       	mov	r18, r24
    721a:	88 0f       	add	r24, r24
    721c:	33 0b       	sbc	r19, r19
    721e:	4b e0       	ldi	r20, 0x0B	; 11
    7220:	42 9f       	mul	r20, r18
    7222:	c0 01       	movw	r24, r0
    7224:	43 9f       	mul	r20, r19
    7226:	90 0d       	add	r25, r0
    7228:	11 24       	eor	r1, r1
    722a:	8d 5a       	subi	r24, 0xAD	; 173
    722c:	9c 4c       	sbci	r25, 0xCC	; 204
    722e:	2b e0       	ldi	r18, 0x0B	; 11
    7230:	30 e0       	ldi	r19, 0x00	; 0
    7232:	40 e0       	ldi	r20, 0x00	; 0
    7234:	50 e0       	ldi	r21, 0x00	; 0
    7236:	60 e0       	ldi	r22, 0x00	; 0
    7238:	0e 94 aa 14 	call	0x2954	; 0x2954 <m2m_memset>
	}
	return s8Ret;
    723c:	89 81       	ldd	r24, Y+1	; 0x01
}
    723e:	27 96       	adiw	r28, 0x07	; 7
    7240:	cd bf       	out	0x3d, r28	; 61
    7242:	de bf       	out	0x3e, r29	; 62
    7244:	df 91       	pop	r29
    7246:	cf 91       	pop	r28
    7248:	1f 91       	pop	r17
    724a:	0f 91       	pop	r16
    724c:	ff 90       	pop	r15
    724e:	ef 90       	pop	r14
    7250:	df 90       	pop	r13
    7252:	cf 90       	pop	r12
    7254:	08 95       	ret

00007256 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    7256:	cf 93       	push	r28
    7258:	df 93       	push	r29
    725a:	cd b7       	in	r28, 0x3d	; 61
    725c:	de b7       	in	r29, 0x3e	; 62
    725e:	26 97       	sbiw	r28, 0x06	; 6
    7260:	cd bf       	out	0x3d, r28	; 61
    7262:	de bf       	out	0x3e, r29	; 62
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    7264:	ce 01       	movw	r24, r28
    7266:	03 96       	adiw	r24, 0x03	; 3
    7268:	89 83       	std	Y+1, r24	; 0x01
    726a:	9a 83       	std	Y+2, r25	; 0x02

	cmd[0] = 0xb9;
    726c:	89 81       	ldd	r24, Y+1	; 0x01
    726e:	9a 81       	ldd	r25, Y+2	; 0x02
    7270:	29 eb       	ldi	r18, 0xB9	; 185
    7272:	fc 01       	movw	r30, r24
    7274:	20 83       	st	Z, r18

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    7276:	20 e0       	ldi	r18, 0x00	; 0
    7278:	30 e0       	ldi	r19, 0x00	; 0
    727a:	a9 01       	movw	r20, r18
    727c:	68 e0       	ldi	r22, 0x08	; 8
    727e:	72 e0       	ldi	r23, 0x02	; 2
    7280:	81 e0       	ldi	r24, 0x01	; 1
    7282:	90 e0       	ldi	r25, 0x00	; 0
    7284:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    7288:	89 81       	ldd	r24, Y+1	; 0x01
    728a:	9a 81       	ldd	r25, Y+2	; 0x02
    728c:	fc 01       	movw	r30, r24
    728e:	80 81       	ld	r24, Z
    7290:	88 2f       	mov	r24, r24
    7292:	90 e0       	ldi	r25, 0x00	; 0
    7294:	a0 e0       	ldi	r26, 0x00	; 0
    7296:	b0 e0       	ldi	r27, 0x00	; 0
    7298:	9c 01       	movw	r18, r24
    729a:	ad 01       	movw	r20, r26
    729c:	6c e0       	ldi	r22, 0x0C	; 12
    729e:	72 e0       	ldi	r23, 0x02	; 2
    72a0:	81 e0       	ldi	r24, 0x01	; 1
    72a2:	90 e0       	ldi	r25, 0x00	; 0
    72a4:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    72a8:	21 e0       	ldi	r18, 0x01	; 1
    72aa:	30 e0       	ldi	r19, 0x00	; 0
    72ac:	40 e0       	ldi	r20, 0x00	; 0
    72ae:	50 e0       	ldi	r21, 0x00	; 0
    72b0:	64 e1       	ldi	r22, 0x14	; 20
    72b2:	72 e0       	ldi	r23, 0x02	; 2
    72b4:	81 e0       	ldi	r24, 0x01	; 1
    72b6:	90 e0       	ldi	r25, 0x00	; 0
    72b8:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    72bc:	20 e0       	ldi	r18, 0x00	; 0
    72be:	30 e0       	ldi	r19, 0x00	; 0
    72c0:	a9 01       	movw	r20, r18
    72c2:	6c e1       	ldi	r22, 0x1C	; 28
    72c4:	72 e0       	ldi	r23, 0x02	; 2
    72c6:	81 e0       	ldi	r24, 0x01	; 1
    72c8:	90 e0       	ldi	r25, 0x00	; 0
    72ca:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    72ce:	21 e8       	ldi	r18, 0x81	; 129
    72d0:	30 e0       	ldi	r19, 0x00	; 0
    72d2:	40 e0       	ldi	r20, 0x00	; 0
    72d4:	50 e0       	ldi	r21, 0x00	; 0
    72d6:	64 e0       	ldi	r22, 0x04	; 4
    72d8:	72 e0       	ldi	r23, 0x02	; 2
    72da:	81 e0       	ldi	r24, 0x01	; 1
    72dc:	90 e0       	ldi	r25, 0x00	; 0
    72de:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    72e2:	00 00       	nop
    72e4:	68 e1       	ldi	r22, 0x18	; 24
    72e6:	72 e0       	ldi	r23, 0x02	; 2
    72e8:	81 e0       	ldi	r24, 0x01	; 1
    72ea:	90 e0       	ldi	r25, 0x00	; 0
    72ec:	0e 94 c7 24 	call	0x498e	; 0x498e <nm_read_reg>
    72f0:	dc 01       	movw	r26, r24
    72f2:	cb 01       	movw	r24, r22
    72f4:	01 97       	sbiw	r24, 0x01	; 1
    72f6:	a1 05       	cpc	r26, r1
    72f8:	b1 05       	cpc	r27, r1
    72fa:	a1 f7       	brne	.-24     	; 0x72e4 <spi_flash_enter_low_power_mode+0x8e>
}
    72fc:	00 00       	nop
    72fe:	26 96       	adiw	r28, 0x06	; 6
    7300:	cd bf       	out	0x3d, r28	; 61
    7302:	de bf       	out	0x3e, r29	; 62
    7304:	df 91       	pop	r29
    7306:	cf 91       	pop	r28
    7308:	08 95       	ret

0000730a <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    730a:	cf 93       	push	r28
    730c:	df 93       	push	r29
    730e:	cd b7       	in	r28, 0x3d	; 61
    7310:	de b7       	in	r29, 0x3e	; 62
    7312:	26 97       	sbiw	r28, 0x06	; 6
    7314:	cd bf       	out	0x3d, r28	; 61
    7316:	de bf       	out	0x3e, r29	; 62
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    7318:	ce 01       	movw	r24, r28
    731a:	03 96       	adiw	r24, 0x03	; 3
    731c:	89 83       	std	Y+1, r24	; 0x01
    731e:	9a 83       	std	Y+2, r25	; 0x02

	cmd[0] = 0xab;
    7320:	89 81       	ldd	r24, Y+1	; 0x01
    7322:	9a 81       	ldd	r25, Y+2	; 0x02
    7324:	2b ea       	ldi	r18, 0xAB	; 171
    7326:	fc 01       	movw	r30, r24
    7328:	20 83       	st	Z, r18

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    732a:	20 e0       	ldi	r18, 0x00	; 0
    732c:	30 e0       	ldi	r19, 0x00	; 0
    732e:	a9 01       	movw	r20, r18
    7330:	68 e0       	ldi	r22, 0x08	; 8
    7332:	72 e0       	ldi	r23, 0x02	; 2
    7334:	81 e0       	ldi	r24, 0x01	; 1
    7336:	90 e0       	ldi	r25, 0x00	; 0
    7338:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    733c:	89 81       	ldd	r24, Y+1	; 0x01
    733e:	9a 81       	ldd	r25, Y+2	; 0x02
    7340:	fc 01       	movw	r30, r24
    7342:	80 81       	ld	r24, Z
    7344:	88 2f       	mov	r24, r24
    7346:	90 e0       	ldi	r25, 0x00	; 0
    7348:	a0 e0       	ldi	r26, 0x00	; 0
    734a:	b0 e0       	ldi	r27, 0x00	; 0
    734c:	9c 01       	movw	r18, r24
    734e:	ad 01       	movw	r20, r26
    7350:	6c e0       	ldi	r22, 0x0C	; 12
    7352:	72 e0       	ldi	r23, 0x02	; 2
    7354:	81 e0       	ldi	r24, 0x01	; 1
    7356:	90 e0       	ldi	r25, 0x00	; 0
    7358:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    735c:	21 e0       	ldi	r18, 0x01	; 1
    735e:	30 e0       	ldi	r19, 0x00	; 0
    7360:	40 e0       	ldi	r20, 0x00	; 0
    7362:	50 e0       	ldi	r21, 0x00	; 0
    7364:	64 e1       	ldi	r22, 0x14	; 20
    7366:	72 e0       	ldi	r23, 0x02	; 2
    7368:	81 e0       	ldi	r24, 0x01	; 1
    736a:	90 e0       	ldi	r25, 0x00	; 0
    736c:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    7370:	20 e0       	ldi	r18, 0x00	; 0
    7372:	30 e0       	ldi	r19, 0x00	; 0
    7374:	a9 01       	movw	r20, r18
    7376:	6c e1       	ldi	r22, 0x1C	; 28
    7378:	72 e0       	ldi	r23, 0x02	; 2
    737a:	81 e0       	ldi	r24, 0x01	; 1
    737c:	90 e0       	ldi	r25, 0x00	; 0
    737e:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    7382:	21 e8       	ldi	r18, 0x81	; 129
    7384:	30 e0       	ldi	r19, 0x00	; 0
    7386:	40 e0       	ldi	r20, 0x00	; 0
    7388:	50 e0       	ldi	r21, 0x00	; 0
    738a:	64 e0       	ldi	r22, 0x04	; 4
    738c:	72 e0       	ldi	r23, 0x02	; 2
    738e:	81 e0       	ldi	r24, 0x01	; 1
    7390:	90 e0       	ldi	r25, 0x00	; 0
    7392:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    7396:	00 00       	nop
    7398:	68 e1       	ldi	r22, 0x18	; 24
    739a:	72 e0       	ldi	r23, 0x02	; 2
    739c:	81 e0       	ldi	r24, 0x01	; 1
    739e:	90 e0       	ldi	r25, 0x00	; 0
    73a0:	0e 94 c7 24 	call	0x498e	; 0x498e <nm_read_reg>
    73a4:	dc 01       	movw	r26, r24
    73a6:	cb 01       	movw	r24, r22
    73a8:	01 97       	sbiw	r24, 0x01	; 1
    73aa:	a1 05       	cpc	r26, r1
    73ac:	b1 05       	cpc	r27, r1
    73ae:	a1 f7       	brne	.-24     	; 0x7398 <spi_flash_leave_low_power_mode+0x8e>
}
    73b0:	00 00       	nop
    73b2:	26 96       	adiw	r28, 0x06	; 6
    73b4:	cd bf       	out	0x3d, r28	; 61
    73b6:	de bf       	out	0x3e, r29	; 62
    73b8:	df 91       	pop	r29
    73ba:	cf 91       	pop	r28
    73bc:	08 95       	ret

000073be <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    73be:	cf 93       	push	r28
    73c0:	df 93       	push	r29
    73c2:	cd b7       	in	r28, 0x3d	; 61
    73c4:	de b7       	in	r29, 0x3e	; 62
    73c6:	26 97       	sbiw	r28, 0x06	; 6
    73c8:	cd bf       	out	0x3d, r28	; 61
    73ca:	de bf       	out	0x3e, r29	; 62
    73cc:	8e 83       	std	Y+6, r24	; 0x06
	sint8 s8Ret = M2M_SUCCESS;
    73ce:	19 82       	std	Y+1, r1	; 0x01
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    73d0:	0e 94 8d 20 	call	0x411a	; 0x411a <nmi_get_chipid>
    73d4:	dc 01       	movw	r26, r24
    73d6:	cb 01       	movw	r24, r22
    73d8:	9f 70       	andi	r25, 0x0F	; 15
    73da:	aa 27       	eor	r26, r26
    73dc:	bb 27       	eor	r27, r27
    73de:	80 3a       	cpi	r24, 0xA0	; 160
    73e0:	93 40       	sbci	r25, 0x03	; 3
    73e2:	a1 05       	cpc	r26, r1
    73e4:	b1 05       	cpc	r27, r1
    73e6:	08 f4       	brcc	.+2      	; 0x73ea <spi_flash_enable+0x2c>
    73e8:	5a c0       	rjmp	.+180    	; 0x749e <spi_flash_enable+0xe0>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    73ea:	ce 01       	movw	r24, r28
    73ec:	02 96       	adiw	r24, 0x02	; 2
    73ee:	ac 01       	movw	r20, r24
    73f0:	60 e1       	ldi	r22, 0x10	; 16
    73f2:	74 e1       	ldi	r23, 0x14	; 20
    73f4:	80 e0       	ldi	r24, 0x00	; 0
    73f6:	90 e0       	ldi	r25, 0x00	; 0
    73f8:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <nm_read_reg_with_ret>
    73fc:	89 83       	std	Y+1, r24	; 0x01
		if(s8Ret != M2M_SUCCESS) {
    73fe:	89 81       	ldd	r24, Y+1	; 0x01
    7400:	88 23       	and	r24, r24
    7402:	09 f0       	breq	.+2      	; 0x7406 <spi_flash_enable+0x48>
    7404:	4b c0       	rjmp	.+150    	; 0x749c <spi_flash_enable+0xde>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    7406:	8a 81       	ldd	r24, Y+2	; 0x02
    7408:	9b 81       	ldd	r25, Y+3	; 0x03
    740a:	ac 81       	ldd	r26, Y+4	; 0x04
    740c:	bd 81       	ldd	r27, Y+5	; 0x05
    740e:	9f 78       	andi	r25, 0x8F	; 143
    7410:	a8 78       	andi	r26, 0x88	; 136
    7412:	b8 7f       	andi	r27, 0xF8	; 248
    7414:	8a 83       	std	Y+2, r24	; 0x02
    7416:	9b 83       	std	Y+3, r25	; 0x03
    7418:	ac 83       	std	Y+4, r26	; 0x04
    741a:	bd 83       	std	Y+5, r27	; 0x05
		u32Val |= ((0x1111ul) << 12);
    741c:	8a 81       	ldd	r24, Y+2	; 0x02
    741e:	9b 81       	ldd	r25, Y+3	; 0x03
    7420:	ac 81       	ldd	r26, Y+4	; 0x04
    7422:	bd 81       	ldd	r27, Y+5	; 0x05
    7424:	90 61       	ori	r25, 0x10	; 16
    7426:	a1 61       	ori	r26, 0x11	; 17
    7428:	b1 60       	ori	r27, 0x01	; 1
    742a:	8a 83       	std	Y+2, r24	; 0x02
    742c:	9b 83       	std	Y+3, r25	; 0x03
    742e:	ac 83       	std	Y+4, r26	; 0x04
    7430:	bd 83       	std	Y+5, r27	; 0x05
		nm_write_reg(0x1410, u32Val);
    7432:	8a 81       	ldd	r24, Y+2	; 0x02
    7434:	9b 81       	ldd	r25, Y+3	; 0x03
    7436:	ac 81       	ldd	r26, Y+4	; 0x04
    7438:	bd 81       	ldd	r27, Y+5	; 0x05
    743a:	9c 01       	movw	r18, r24
    743c:	ad 01       	movw	r20, r26
    743e:	60 e1       	ldi	r22, 0x10	; 16
    7440:	74 e1       	ldi	r23, 0x14	; 20
    7442:	80 e0       	ldi	r24, 0x00	; 0
    7444:	90 e0       	ldi	r25, 0x00	; 0
    7446:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
		if(enable) {
    744a:	8e 81       	ldd	r24, Y+6	; 0x06
    744c:	88 23       	and	r24, r24
    744e:	19 f0       	breq	.+6      	; 0x7456 <spi_flash_enable+0x98>
			spi_flash_leave_low_power_mode();
    7450:	0e 94 85 39 	call	0x730a	; 0x730a <spi_flash_leave_low_power_mode>
    7454:	02 c0       	rjmp	.+4      	; 0x745a <spi_flash_enable+0x9c>
		} else {
			spi_flash_enter_low_power_mode();
    7456:	0e 94 2b 39 	call	0x7256	; 0x7256 <spi_flash_enter_low_power_mode>
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    745a:	8a 81       	ldd	r24, Y+2	; 0x02
    745c:	9b 81       	ldd	r25, Y+3	; 0x03
    745e:	ac 81       	ldd	r26, Y+4	; 0x04
    7460:	bd 81       	ldd	r27, Y+5	; 0x05
    7462:	9f 78       	andi	r25, 0x8F	; 143
    7464:	a8 78       	andi	r26, 0x88	; 136
    7466:	b8 7f       	andi	r27, 0xF8	; 248
    7468:	8a 83       	std	Y+2, r24	; 0x02
    746a:	9b 83       	std	Y+3, r25	; 0x03
    746c:	ac 83       	std	Y+4, r26	; 0x04
    746e:	bd 83       	std	Y+5, r27	; 0x05
		u32Val |= ((0x0010ul) << 12);
    7470:	8a 81       	ldd	r24, Y+2	; 0x02
    7472:	9b 81       	ldd	r25, Y+3	; 0x03
    7474:	ac 81       	ldd	r26, Y+4	; 0x04
    7476:	bd 81       	ldd	r27, Y+5	; 0x05
    7478:	a1 60       	ori	r26, 0x01	; 1
    747a:	8a 83       	std	Y+2, r24	; 0x02
    747c:	9b 83       	std	Y+3, r25	; 0x03
    747e:	ac 83       	std	Y+4, r26	; 0x04
    7480:	bd 83       	std	Y+5, r27	; 0x05
		nm_write_reg(0x1410, u32Val);
    7482:	8a 81       	ldd	r24, Y+2	; 0x02
    7484:	9b 81       	ldd	r25, Y+3	; 0x03
    7486:	ac 81       	ldd	r26, Y+4	; 0x04
    7488:	bd 81       	ldd	r27, Y+5	; 0x05
    748a:	9c 01       	movw	r18, r24
    748c:	ad 01       	movw	r20, r26
    748e:	60 e1       	ldi	r22, 0x10	; 16
    7490:	74 e1       	ldi	r23, 0x14	; 20
    7492:	80 e0       	ldi	r24, 0x00	; 0
    7494:	90 e0       	ldi	r25, 0x00	; 0
    7496:	0e 94 01 25 	call	0x4a02	; 0x4a02 <nm_write_reg>
    749a:	01 c0       	rjmp	.+2      	; 0x749e <spi_flash_enable+0xe0>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
		if(s8Ret != M2M_SUCCESS) {
			goto ERR1;
    749c:	00 00       	nop
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
    749e:	89 81       	ldd	r24, Y+1	; 0x01
}
    74a0:	26 96       	adiw	r28, 0x06	; 6
    74a2:	cd bf       	out	0x3d, r28	; 61
    74a4:	de bf       	out	0x3e, r29	; 62
    74a6:	df 91       	pop	r29
    74a8:	cf 91       	pop	r28
    74aa:	08 95       	ret

000074ac <__cmpsf2>:
    74ac:	0e 94 8a 3a 	call	0x7514	; 0x7514 <__fp_cmp>
    74b0:	08 f4       	brcc	.+2      	; 0x74b4 <__cmpsf2+0x8>
    74b2:	81 e0       	ldi	r24, 0x01	; 1
    74b4:	08 95       	ret

000074b6 <__fixunssfsi>:
    74b6:	0e 94 b6 3a 	call	0x756c	; 0x756c <__fp_splitA>
    74ba:	88 f0       	brcs	.+34     	; 0x74de <__fixunssfsi+0x28>
    74bc:	9f 57       	subi	r25, 0x7F	; 127
    74be:	98 f0       	brcs	.+38     	; 0x74e6 <__fixunssfsi+0x30>
    74c0:	b9 2f       	mov	r27, r25
    74c2:	99 27       	eor	r25, r25
    74c4:	b7 51       	subi	r27, 0x17	; 23
    74c6:	b0 f0       	brcs	.+44     	; 0x74f4 <__fixunssfsi+0x3e>
    74c8:	e1 f0       	breq	.+56     	; 0x7502 <__fixunssfsi+0x4c>
    74ca:	66 0f       	add	r22, r22
    74cc:	77 1f       	adc	r23, r23
    74ce:	88 1f       	adc	r24, r24
    74d0:	99 1f       	adc	r25, r25
    74d2:	1a f0       	brmi	.+6      	; 0x74da <__fixunssfsi+0x24>
    74d4:	ba 95       	dec	r27
    74d6:	c9 f7       	brne	.-14     	; 0x74ca <__fixunssfsi+0x14>
    74d8:	14 c0       	rjmp	.+40     	; 0x7502 <__fixunssfsi+0x4c>
    74da:	b1 30       	cpi	r27, 0x01	; 1
    74dc:	91 f0       	breq	.+36     	; 0x7502 <__fixunssfsi+0x4c>
    74de:	0e 94 d0 3a 	call	0x75a0	; 0x75a0 <__fp_zero>
    74e2:	b1 e0       	ldi	r27, 0x01	; 1
    74e4:	08 95       	ret
    74e6:	0c 94 d0 3a 	jmp	0x75a0	; 0x75a0 <__fp_zero>
    74ea:	67 2f       	mov	r22, r23
    74ec:	78 2f       	mov	r23, r24
    74ee:	88 27       	eor	r24, r24
    74f0:	b8 5f       	subi	r27, 0xF8	; 248
    74f2:	39 f0       	breq	.+14     	; 0x7502 <__fixunssfsi+0x4c>
    74f4:	b9 3f       	cpi	r27, 0xF9	; 249
    74f6:	cc f3       	brlt	.-14     	; 0x74ea <__fixunssfsi+0x34>
    74f8:	86 95       	lsr	r24
    74fa:	77 95       	ror	r23
    74fc:	67 95       	ror	r22
    74fe:	b3 95       	inc	r27
    7500:	d9 f7       	brne	.-10     	; 0x74f8 <__fixunssfsi+0x42>
    7502:	3e f4       	brtc	.+14     	; 0x7512 <__fixunssfsi+0x5c>
    7504:	90 95       	com	r25
    7506:	80 95       	com	r24
    7508:	70 95       	com	r23
    750a:	61 95       	neg	r22
    750c:	7f 4f       	sbci	r23, 0xFF	; 255
    750e:	8f 4f       	sbci	r24, 0xFF	; 255
    7510:	9f 4f       	sbci	r25, 0xFF	; 255
    7512:	08 95       	ret

00007514 <__fp_cmp>:
    7514:	99 0f       	add	r25, r25
    7516:	00 08       	sbc	r0, r0
    7518:	55 0f       	add	r21, r21
    751a:	aa 0b       	sbc	r26, r26
    751c:	e0 e8       	ldi	r30, 0x80	; 128
    751e:	fe ef       	ldi	r31, 0xFE	; 254
    7520:	16 16       	cp	r1, r22
    7522:	17 06       	cpc	r1, r23
    7524:	e8 07       	cpc	r30, r24
    7526:	f9 07       	cpc	r31, r25
    7528:	c0 f0       	brcs	.+48     	; 0x755a <__fp_cmp+0x46>
    752a:	12 16       	cp	r1, r18
    752c:	13 06       	cpc	r1, r19
    752e:	e4 07       	cpc	r30, r20
    7530:	f5 07       	cpc	r31, r21
    7532:	98 f0       	brcs	.+38     	; 0x755a <__fp_cmp+0x46>
    7534:	62 1b       	sub	r22, r18
    7536:	73 0b       	sbc	r23, r19
    7538:	84 0b       	sbc	r24, r20
    753a:	95 0b       	sbc	r25, r21
    753c:	39 f4       	brne	.+14     	; 0x754c <__fp_cmp+0x38>
    753e:	0a 26       	eor	r0, r26
    7540:	61 f0       	breq	.+24     	; 0x755a <__fp_cmp+0x46>
    7542:	23 2b       	or	r18, r19
    7544:	24 2b       	or	r18, r20
    7546:	25 2b       	or	r18, r21
    7548:	21 f4       	brne	.+8      	; 0x7552 <__fp_cmp+0x3e>
    754a:	08 95       	ret
    754c:	0a 26       	eor	r0, r26
    754e:	09 f4       	brne	.+2      	; 0x7552 <__fp_cmp+0x3e>
    7550:	a1 40       	sbci	r26, 0x01	; 1
    7552:	a6 95       	lsr	r26
    7554:	8f ef       	ldi	r24, 0xFF	; 255
    7556:	81 1d       	adc	r24, r1
    7558:	81 1d       	adc	r24, r1
    755a:	08 95       	ret

0000755c <__fp_split3>:
    755c:	57 fd       	sbrc	r21, 7
    755e:	90 58       	subi	r25, 0x80	; 128
    7560:	44 0f       	add	r20, r20
    7562:	55 1f       	adc	r21, r21
    7564:	59 f0       	breq	.+22     	; 0x757c <__fp_splitA+0x10>
    7566:	5f 3f       	cpi	r21, 0xFF	; 255
    7568:	71 f0       	breq	.+28     	; 0x7586 <__fp_splitA+0x1a>
    756a:	47 95       	ror	r20

0000756c <__fp_splitA>:
    756c:	88 0f       	add	r24, r24
    756e:	97 fb       	bst	r25, 7
    7570:	99 1f       	adc	r25, r25
    7572:	61 f0       	breq	.+24     	; 0x758c <__fp_splitA+0x20>
    7574:	9f 3f       	cpi	r25, 0xFF	; 255
    7576:	79 f0       	breq	.+30     	; 0x7596 <__fp_splitA+0x2a>
    7578:	87 95       	ror	r24
    757a:	08 95       	ret
    757c:	12 16       	cp	r1, r18
    757e:	13 06       	cpc	r1, r19
    7580:	14 06       	cpc	r1, r20
    7582:	55 1f       	adc	r21, r21
    7584:	f2 cf       	rjmp	.-28     	; 0x756a <__fp_split3+0xe>
    7586:	46 95       	lsr	r20
    7588:	f1 df       	rcall	.-30     	; 0x756c <__fp_splitA>
    758a:	08 c0       	rjmp	.+16     	; 0x759c <__fp_splitA+0x30>
    758c:	16 16       	cp	r1, r22
    758e:	17 06       	cpc	r1, r23
    7590:	18 06       	cpc	r1, r24
    7592:	99 1f       	adc	r25, r25
    7594:	f1 cf       	rjmp	.-30     	; 0x7578 <__fp_splitA+0xc>
    7596:	86 95       	lsr	r24
    7598:	71 05       	cpc	r23, r1
    759a:	61 05       	cpc	r22, r1
    759c:	08 94       	sec
    759e:	08 95       	ret

000075a0 <__fp_zero>:
    75a0:	e8 94       	clt

000075a2 <__fp_szero>:
    75a2:	bb 27       	eor	r27, r27
    75a4:	66 27       	eor	r22, r22
    75a6:	77 27       	eor	r23, r23
    75a8:	cb 01       	movw	r24, r22
    75aa:	97 f9       	bld	r25, 7
    75ac:	08 95       	ret

000075ae <__gesf2>:
    75ae:	0e 94 8a 3a 	call	0x7514	; 0x7514 <__fp_cmp>
    75b2:	08 f4       	brcc	.+2      	; 0x75b6 <__gesf2+0x8>
    75b4:	8f ef       	ldi	r24, 0xFF	; 255
    75b6:	08 95       	ret

000075b8 <__mulsf3>:
    75b8:	0e 94 ef 3a 	call	0x75de	; 0x75de <__mulsf3x>
    75bc:	0c 94 60 3b 	jmp	0x76c0	; 0x76c0 <__fp_round>
    75c0:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <__fp_pscA>
    75c4:	38 f0       	brcs	.+14     	; 0x75d4 <__mulsf3+0x1c>
    75c6:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <__fp_pscB>
    75ca:	20 f0       	brcs	.+8      	; 0x75d4 <__mulsf3+0x1c>
    75cc:	95 23       	and	r25, r21
    75ce:	11 f0       	breq	.+4      	; 0x75d4 <__mulsf3+0x1c>
    75d0:	0c 94 49 3b 	jmp	0x7692	; 0x7692 <__fp_inf>
    75d4:	0c 94 4f 3b 	jmp	0x769e	; 0x769e <__fp_nan>
    75d8:	11 24       	eor	r1, r1
    75da:	0c 94 d1 3a 	jmp	0x75a2	; 0x75a2 <__fp_szero>

000075de <__mulsf3x>:
    75de:	0e 94 ae 3a 	call	0x755c	; 0x755c <__fp_split3>
    75e2:	70 f3       	brcs	.-36     	; 0x75c0 <__mulsf3+0x8>

000075e4 <__mulsf3_pse>:
    75e4:	95 9f       	mul	r25, r21
    75e6:	c1 f3       	breq	.-16     	; 0x75d8 <__mulsf3+0x20>
    75e8:	95 0f       	add	r25, r21
    75ea:	50 e0       	ldi	r21, 0x00	; 0
    75ec:	55 1f       	adc	r21, r21
    75ee:	62 9f       	mul	r22, r18
    75f0:	f0 01       	movw	r30, r0
    75f2:	72 9f       	mul	r23, r18
    75f4:	bb 27       	eor	r27, r27
    75f6:	f0 0d       	add	r31, r0
    75f8:	b1 1d       	adc	r27, r1
    75fa:	63 9f       	mul	r22, r19
    75fc:	aa 27       	eor	r26, r26
    75fe:	f0 0d       	add	r31, r0
    7600:	b1 1d       	adc	r27, r1
    7602:	aa 1f       	adc	r26, r26
    7604:	64 9f       	mul	r22, r20
    7606:	66 27       	eor	r22, r22
    7608:	b0 0d       	add	r27, r0
    760a:	a1 1d       	adc	r26, r1
    760c:	66 1f       	adc	r22, r22
    760e:	82 9f       	mul	r24, r18
    7610:	22 27       	eor	r18, r18
    7612:	b0 0d       	add	r27, r0
    7614:	a1 1d       	adc	r26, r1
    7616:	62 1f       	adc	r22, r18
    7618:	73 9f       	mul	r23, r19
    761a:	b0 0d       	add	r27, r0
    761c:	a1 1d       	adc	r26, r1
    761e:	62 1f       	adc	r22, r18
    7620:	83 9f       	mul	r24, r19
    7622:	a0 0d       	add	r26, r0
    7624:	61 1d       	adc	r22, r1
    7626:	22 1f       	adc	r18, r18
    7628:	74 9f       	mul	r23, r20
    762a:	33 27       	eor	r19, r19
    762c:	a0 0d       	add	r26, r0
    762e:	61 1d       	adc	r22, r1
    7630:	23 1f       	adc	r18, r19
    7632:	84 9f       	mul	r24, r20
    7634:	60 0d       	add	r22, r0
    7636:	21 1d       	adc	r18, r1
    7638:	82 2f       	mov	r24, r18
    763a:	76 2f       	mov	r23, r22
    763c:	6a 2f       	mov	r22, r26
    763e:	11 24       	eor	r1, r1
    7640:	9f 57       	subi	r25, 0x7F	; 127
    7642:	50 40       	sbci	r21, 0x00	; 0
    7644:	9a f0       	brmi	.+38     	; 0x766c <__mulsf3_pse+0x88>
    7646:	f1 f0       	breq	.+60     	; 0x7684 <__mulsf3_pse+0xa0>
    7648:	88 23       	and	r24, r24
    764a:	4a f0       	brmi	.+18     	; 0x765e <__mulsf3_pse+0x7a>
    764c:	ee 0f       	add	r30, r30
    764e:	ff 1f       	adc	r31, r31
    7650:	bb 1f       	adc	r27, r27
    7652:	66 1f       	adc	r22, r22
    7654:	77 1f       	adc	r23, r23
    7656:	88 1f       	adc	r24, r24
    7658:	91 50       	subi	r25, 0x01	; 1
    765a:	50 40       	sbci	r21, 0x00	; 0
    765c:	a9 f7       	brne	.-22     	; 0x7648 <__mulsf3_pse+0x64>
    765e:	9e 3f       	cpi	r25, 0xFE	; 254
    7660:	51 05       	cpc	r21, r1
    7662:	80 f0       	brcs	.+32     	; 0x7684 <__mulsf3_pse+0xa0>
    7664:	0c 94 49 3b 	jmp	0x7692	; 0x7692 <__fp_inf>
    7668:	0c 94 d1 3a 	jmp	0x75a2	; 0x75a2 <__fp_szero>
    766c:	5f 3f       	cpi	r21, 0xFF	; 255
    766e:	e4 f3       	brlt	.-8      	; 0x7668 <__mulsf3_pse+0x84>
    7670:	98 3e       	cpi	r25, 0xE8	; 232
    7672:	d4 f3       	brlt	.-12     	; 0x7668 <__mulsf3_pse+0x84>
    7674:	86 95       	lsr	r24
    7676:	77 95       	ror	r23
    7678:	67 95       	ror	r22
    767a:	b7 95       	ror	r27
    767c:	f7 95       	ror	r31
    767e:	e7 95       	ror	r30
    7680:	9f 5f       	subi	r25, 0xFF	; 255
    7682:	c1 f7       	brne	.-16     	; 0x7674 <__mulsf3_pse+0x90>
    7684:	fe 2b       	or	r31, r30
    7686:	88 0f       	add	r24, r24
    7688:	91 1d       	adc	r25, r1
    768a:	96 95       	lsr	r25
    768c:	87 95       	ror	r24
    768e:	97 f9       	bld	r25, 7
    7690:	08 95       	ret

00007692 <__fp_inf>:
    7692:	97 f9       	bld	r25, 7
    7694:	9f 67       	ori	r25, 0x7F	; 127
    7696:	80 e8       	ldi	r24, 0x80	; 128
    7698:	70 e0       	ldi	r23, 0x00	; 0
    769a:	60 e0       	ldi	r22, 0x00	; 0
    769c:	08 95       	ret

0000769e <__fp_nan>:
    769e:	9f ef       	ldi	r25, 0xFF	; 255
    76a0:	80 ec       	ldi	r24, 0xC0	; 192
    76a2:	08 95       	ret

000076a4 <__fp_pscA>:
    76a4:	00 24       	eor	r0, r0
    76a6:	0a 94       	dec	r0
    76a8:	16 16       	cp	r1, r22
    76aa:	17 06       	cpc	r1, r23
    76ac:	18 06       	cpc	r1, r24
    76ae:	09 06       	cpc	r0, r25
    76b0:	08 95       	ret

000076b2 <__fp_pscB>:
    76b2:	00 24       	eor	r0, r0
    76b4:	0a 94       	dec	r0
    76b6:	12 16       	cp	r1, r18
    76b8:	13 06       	cpc	r1, r19
    76ba:	14 06       	cpc	r1, r20
    76bc:	05 06       	cpc	r0, r21
    76be:	08 95       	ret

000076c0 <__fp_round>:
    76c0:	09 2e       	mov	r0, r25
    76c2:	03 94       	inc	r0
    76c4:	00 0c       	add	r0, r0
    76c6:	11 f4       	brne	.+4      	; 0x76cc <__fp_round+0xc>
    76c8:	88 23       	and	r24, r24
    76ca:	52 f0       	brmi	.+20     	; 0x76e0 <__fp_round+0x20>
    76cc:	bb 0f       	add	r27, r27
    76ce:	40 f4       	brcc	.+16     	; 0x76e0 <__fp_round+0x20>
    76d0:	bf 2b       	or	r27, r31
    76d2:	11 f4       	brne	.+4      	; 0x76d8 <__fp_round+0x18>
    76d4:	60 ff       	sbrs	r22, 0
    76d6:	04 c0       	rjmp	.+8      	; 0x76e0 <__fp_round+0x20>
    76d8:	6f 5f       	subi	r22, 0xFF	; 255
    76da:	7f 4f       	sbci	r23, 0xFF	; 255
    76dc:	8f 4f       	sbci	r24, 0xFF	; 255
    76de:	9f 4f       	sbci	r25, 0xFF	; 255
    76e0:	08 95       	ret

000076e2 <__udivmodhi4>:
    76e2:	aa 1b       	sub	r26, r26
    76e4:	bb 1b       	sub	r27, r27
    76e6:	51 e1       	ldi	r21, 0x11	; 17
    76e8:	07 c0       	rjmp	.+14     	; 0x76f8 <__udivmodhi4_ep>

000076ea <__udivmodhi4_loop>:
    76ea:	aa 1f       	adc	r26, r26
    76ec:	bb 1f       	adc	r27, r27
    76ee:	a6 17       	cp	r26, r22
    76f0:	b7 07       	cpc	r27, r23
    76f2:	10 f0       	brcs	.+4      	; 0x76f8 <__udivmodhi4_ep>
    76f4:	a6 1b       	sub	r26, r22
    76f6:	b7 0b       	sbc	r27, r23

000076f8 <__udivmodhi4_ep>:
    76f8:	88 1f       	adc	r24, r24
    76fa:	99 1f       	adc	r25, r25
    76fc:	5a 95       	dec	r21
    76fe:	a9 f7       	brne	.-22     	; 0x76ea <__udivmodhi4_loop>
    7700:	80 95       	com	r24
    7702:	90 95       	com	r25
    7704:	bc 01       	movw	r22, r24
    7706:	cd 01       	movw	r24, r26
    7708:	08 95       	ret

0000770a <__divmodhi4>:
    770a:	97 fb       	bst	r25, 7
    770c:	07 2e       	mov	r0, r23
    770e:	16 f4       	brtc	.+4      	; 0x7714 <__divmodhi4+0xa>
    7710:	00 94       	com	r0
    7712:	07 d0       	rcall	.+14     	; 0x7722 <__divmodhi4_neg1>
    7714:	77 fd       	sbrc	r23, 7
    7716:	09 d0       	rcall	.+18     	; 0x772a <__divmodhi4_neg2>
    7718:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <__udivmodhi4>
    771c:	07 fc       	sbrc	r0, 7
    771e:	05 d0       	rcall	.+10     	; 0x772a <__divmodhi4_neg2>
    7720:	3e f4       	brtc	.+14     	; 0x7730 <__divmodhi4_exit>

00007722 <__divmodhi4_neg1>:
    7722:	90 95       	com	r25
    7724:	81 95       	neg	r24
    7726:	9f 4f       	sbci	r25, 0xFF	; 255
    7728:	08 95       	ret

0000772a <__divmodhi4_neg2>:
    772a:	70 95       	com	r23
    772c:	61 95       	neg	r22
    772e:	7f 4f       	sbci	r23, 0xFF	; 255

00007730 <__divmodhi4_exit>:
    7730:	08 95       	ret

00007732 <__tablejump2__>:
    7732:	ee 0f       	add	r30, r30
    7734:	ff 1f       	adc	r31, r31
    7736:	05 90       	lpm	r0, Z+
    7738:	f4 91       	lpm	r31, Z
    773a:	e0 2d       	mov	r30, r0
    773c:	09 94       	ijmp

0000773e <memset>:
    773e:	dc 01       	movw	r26, r24
    7740:	01 c0       	rjmp	.+2      	; 0x7744 <memset+0x6>
    7742:	6d 93       	st	X+, r22
    7744:	41 50       	subi	r20, 0x01	; 1
    7746:	50 40       	sbci	r21, 0x00	; 0
    7748:	e0 f7       	brcc	.-8      	; 0x7742 <memset+0x4>
    774a:	08 95       	ret

0000774c <strcmp>:
    774c:	fb 01       	movw	r30, r22
    774e:	dc 01       	movw	r26, r24
    7750:	8d 91       	ld	r24, X+
    7752:	01 90       	ld	r0, Z+
    7754:	80 19       	sub	r24, r0
    7756:	01 10       	cpse	r0, r1
    7758:	d9 f3       	breq	.-10     	; 0x7750 <strcmp+0x4>
    775a:	99 0b       	sbc	r25, r25
    775c:	08 95       	ret

0000775e <strlen>:
    775e:	fc 01       	movw	r30, r24
    7760:	01 90       	ld	r0, Z+
    7762:	00 20       	and	r0, r0
    7764:	e9 f7       	brne	.-6      	; 0x7760 <strlen+0x2>
    7766:	80 95       	com	r24
    7768:	90 95       	com	r25
    776a:	8e 0f       	add	r24, r30
    776c:	9f 1f       	adc	r25, r31
    776e:	08 95       	ret

00007770 <printf>:
    7770:	a0 e0       	ldi	r26, 0x00	; 0
    7772:	b0 e0       	ldi	r27, 0x00	; 0
    7774:	ee eb       	ldi	r30, 0xBE	; 190
    7776:	fb e3       	ldi	r31, 0x3B	; 59
    7778:	0c 94 9f 3e 	jmp	0x7d3e	; 0x7d3e <__prologue_saves__+0x20>
    777c:	ae 01       	movw	r20, r28
    777e:	4b 5f       	subi	r20, 0xFB	; 251
    7780:	5f 4f       	sbci	r21, 0xFF	; 255
    7782:	fa 01       	movw	r30, r20
    7784:	61 91       	ld	r22, Z+
    7786:	71 91       	ld	r23, Z+
    7788:	af 01       	movw	r20, r30
    778a:	80 91 d4 33 	lds	r24, 0x33D4	; 0x8033d4 <__iob+0x2>
    778e:	90 91 d5 33 	lds	r25, 0x33D5	; 0x8033d5 <__iob+0x3>
    7792:	0e 94 fe 3b 	call	0x77fc	; 0x77fc <vfprintf>
    7796:	e2 e0       	ldi	r30, 0x02	; 2
    7798:	0c 94 b8 3e 	jmp	0x7d70	; 0x7d70 <__epilogue_restores__+0x20>

0000779c <puts>:
    779c:	0f 93       	push	r16
    779e:	1f 93       	push	r17
    77a0:	cf 93       	push	r28
    77a2:	df 93       	push	r29
    77a4:	e0 91 d4 33 	lds	r30, 0x33D4	; 0x8033d4 <__iob+0x2>
    77a8:	f0 91 d5 33 	lds	r31, 0x33D5	; 0x8033d5 <__iob+0x3>
    77ac:	23 81       	ldd	r18, Z+3	; 0x03
    77ae:	21 ff       	sbrs	r18, 1
    77b0:	1b c0       	rjmp	.+54     	; 0x77e8 <puts+0x4c>
    77b2:	8c 01       	movw	r16, r24
    77b4:	d0 e0       	ldi	r29, 0x00	; 0
    77b6:	c0 e0       	ldi	r28, 0x00	; 0
    77b8:	f8 01       	movw	r30, r16
    77ba:	81 91       	ld	r24, Z+
    77bc:	8f 01       	movw	r16, r30
    77be:	60 91 d4 33 	lds	r22, 0x33D4	; 0x8033d4 <__iob+0x2>
    77c2:	70 91 d5 33 	lds	r23, 0x33D5	; 0x8033d5 <__iob+0x3>
    77c6:	db 01       	movw	r26, r22
    77c8:	18 96       	adiw	r26, 0x08	; 8
    77ca:	ed 91       	ld	r30, X+
    77cc:	fc 91       	ld	r31, X
    77ce:	19 97       	sbiw	r26, 0x09	; 9
    77d0:	88 23       	and	r24, r24
    77d2:	31 f0       	breq	.+12     	; 0x77e0 <puts+0x44>
    77d4:	09 95       	icall
    77d6:	89 2b       	or	r24, r25
    77d8:	79 f3       	breq	.-34     	; 0x77b8 <puts+0x1c>
    77da:	df ef       	ldi	r29, 0xFF	; 255
    77dc:	cf ef       	ldi	r28, 0xFF	; 255
    77de:	ec cf       	rjmp	.-40     	; 0x77b8 <puts+0x1c>
    77e0:	8a e0       	ldi	r24, 0x0A	; 10
    77e2:	09 95       	icall
    77e4:	89 2b       	or	r24, r25
    77e6:	19 f0       	breq	.+6      	; 0x77ee <puts+0x52>
    77e8:	8f ef       	ldi	r24, 0xFF	; 255
    77ea:	9f ef       	ldi	r25, 0xFF	; 255
    77ec:	02 c0       	rjmp	.+4      	; 0x77f2 <puts+0x56>
    77ee:	8d 2f       	mov	r24, r29
    77f0:	9c 2f       	mov	r25, r28
    77f2:	df 91       	pop	r29
    77f4:	cf 91       	pop	r28
    77f6:	1f 91       	pop	r17
    77f8:	0f 91       	pop	r16
    77fa:	08 95       	ret

000077fc <vfprintf>:
    77fc:	ab e0       	ldi	r26, 0x0B	; 11
    77fe:	b0 e0       	ldi	r27, 0x00	; 0
    7800:	e4 e0       	ldi	r30, 0x04	; 4
    7802:	fc e3       	ldi	r31, 0x3C	; 60
    7804:	0c 94 8f 3e 	jmp	0x7d1e	; 0x7d1e <__prologue_saves__>
    7808:	6c 01       	movw	r12, r24
    780a:	7b 01       	movw	r14, r22
    780c:	8a 01       	movw	r16, r20
    780e:	fc 01       	movw	r30, r24
    7810:	16 82       	std	Z+6, r1	; 0x06
    7812:	17 82       	std	Z+7, r1	; 0x07
    7814:	83 81       	ldd	r24, Z+3	; 0x03
    7816:	81 ff       	sbrs	r24, 1
    7818:	cc c1       	rjmp	.+920    	; 0x7bb2 <vfprintf+0x3b6>
    781a:	ce 01       	movw	r24, r28
    781c:	01 96       	adiw	r24, 0x01	; 1
    781e:	3c 01       	movw	r6, r24
    7820:	f6 01       	movw	r30, r12
    7822:	93 81       	ldd	r25, Z+3	; 0x03
    7824:	f7 01       	movw	r30, r14
    7826:	93 fd       	sbrc	r25, 3
    7828:	85 91       	lpm	r24, Z+
    782a:	93 ff       	sbrs	r25, 3
    782c:	81 91       	ld	r24, Z+
    782e:	7f 01       	movw	r14, r30
    7830:	88 23       	and	r24, r24
    7832:	09 f4       	brne	.+2      	; 0x7836 <vfprintf+0x3a>
    7834:	ba c1       	rjmp	.+884    	; 0x7baa <vfprintf+0x3ae>
    7836:	85 32       	cpi	r24, 0x25	; 37
    7838:	39 f4       	brne	.+14     	; 0x7848 <vfprintf+0x4c>
    783a:	93 fd       	sbrc	r25, 3
    783c:	85 91       	lpm	r24, Z+
    783e:	93 ff       	sbrs	r25, 3
    7840:	81 91       	ld	r24, Z+
    7842:	7f 01       	movw	r14, r30
    7844:	85 32       	cpi	r24, 0x25	; 37
    7846:	29 f4       	brne	.+10     	; 0x7852 <vfprintf+0x56>
    7848:	b6 01       	movw	r22, r12
    784a:	90 e0       	ldi	r25, 0x00	; 0
    784c:	0e 94 f5 3d 	call	0x7bea	; 0x7bea <fputc>
    7850:	e7 cf       	rjmp	.-50     	; 0x7820 <vfprintf+0x24>
    7852:	91 2c       	mov	r9, r1
    7854:	21 2c       	mov	r2, r1
    7856:	31 2c       	mov	r3, r1
    7858:	ff e1       	ldi	r31, 0x1F	; 31
    785a:	f3 15       	cp	r31, r3
    785c:	d8 f0       	brcs	.+54     	; 0x7894 <vfprintf+0x98>
    785e:	8b 32       	cpi	r24, 0x2B	; 43
    7860:	79 f0       	breq	.+30     	; 0x7880 <vfprintf+0x84>
    7862:	38 f4       	brcc	.+14     	; 0x7872 <vfprintf+0x76>
    7864:	80 32       	cpi	r24, 0x20	; 32
    7866:	79 f0       	breq	.+30     	; 0x7886 <vfprintf+0x8a>
    7868:	83 32       	cpi	r24, 0x23	; 35
    786a:	a1 f4       	brne	.+40     	; 0x7894 <vfprintf+0x98>
    786c:	23 2d       	mov	r18, r3
    786e:	20 61       	ori	r18, 0x10	; 16
    7870:	1d c0       	rjmp	.+58     	; 0x78ac <vfprintf+0xb0>
    7872:	8d 32       	cpi	r24, 0x2D	; 45
    7874:	61 f0       	breq	.+24     	; 0x788e <vfprintf+0x92>
    7876:	80 33       	cpi	r24, 0x30	; 48
    7878:	69 f4       	brne	.+26     	; 0x7894 <vfprintf+0x98>
    787a:	23 2d       	mov	r18, r3
    787c:	21 60       	ori	r18, 0x01	; 1
    787e:	16 c0       	rjmp	.+44     	; 0x78ac <vfprintf+0xb0>
    7880:	83 2d       	mov	r24, r3
    7882:	82 60       	ori	r24, 0x02	; 2
    7884:	38 2e       	mov	r3, r24
    7886:	e3 2d       	mov	r30, r3
    7888:	e4 60       	ori	r30, 0x04	; 4
    788a:	3e 2e       	mov	r3, r30
    788c:	2a c0       	rjmp	.+84     	; 0x78e2 <vfprintf+0xe6>
    788e:	f3 2d       	mov	r31, r3
    7890:	f8 60       	ori	r31, 0x08	; 8
    7892:	1d c0       	rjmp	.+58     	; 0x78ce <vfprintf+0xd2>
    7894:	37 fc       	sbrc	r3, 7
    7896:	2d c0       	rjmp	.+90     	; 0x78f2 <vfprintf+0xf6>
    7898:	20 ed       	ldi	r18, 0xD0	; 208
    789a:	28 0f       	add	r18, r24
    789c:	2a 30       	cpi	r18, 0x0A	; 10
    789e:	40 f0       	brcs	.+16     	; 0x78b0 <vfprintf+0xb4>
    78a0:	8e 32       	cpi	r24, 0x2E	; 46
    78a2:	b9 f4       	brne	.+46     	; 0x78d2 <vfprintf+0xd6>
    78a4:	36 fc       	sbrc	r3, 6
    78a6:	81 c1       	rjmp	.+770    	; 0x7baa <vfprintf+0x3ae>
    78a8:	23 2d       	mov	r18, r3
    78aa:	20 64       	ori	r18, 0x40	; 64
    78ac:	32 2e       	mov	r3, r18
    78ae:	19 c0       	rjmp	.+50     	; 0x78e2 <vfprintf+0xe6>
    78b0:	36 fe       	sbrs	r3, 6
    78b2:	06 c0       	rjmp	.+12     	; 0x78c0 <vfprintf+0xc4>
    78b4:	8a e0       	ldi	r24, 0x0A	; 10
    78b6:	98 9e       	mul	r9, r24
    78b8:	20 0d       	add	r18, r0
    78ba:	11 24       	eor	r1, r1
    78bc:	92 2e       	mov	r9, r18
    78be:	11 c0       	rjmp	.+34     	; 0x78e2 <vfprintf+0xe6>
    78c0:	ea e0       	ldi	r30, 0x0A	; 10
    78c2:	2e 9e       	mul	r2, r30
    78c4:	20 0d       	add	r18, r0
    78c6:	11 24       	eor	r1, r1
    78c8:	22 2e       	mov	r2, r18
    78ca:	f3 2d       	mov	r31, r3
    78cc:	f0 62       	ori	r31, 0x20	; 32
    78ce:	3f 2e       	mov	r3, r31
    78d0:	08 c0       	rjmp	.+16     	; 0x78e2 <vfprintf+0xe6>
    78d2:	8c 36       	cpi	r24, 0x6C	; 108
    78d4:	21 f4       	brne	.+8      	; 0x78de <vfprintf+0xe2>
    78d6:	83 2d       	mov	r24, r3
    78d8:	80 68       	ori	r24, 0x80	; 128
    78da:	38 2e       	mov	r3, r24
    78dc:	02 c0       	rjmp	.+4      	; 0x78e2 <vfprintf+0xe6>
    78de:	88 36       	cpi	r24, 0x68	; 104
    78e0:	41 f4       	brne	.+16     	; 0x78f2 <vfprintf+0xf6>
    78e2:	f7 01       	movw	r30, r14
    78e4:	93 fd       	sbrc	r25, 3
    78e6:	85 91       	lpm	r24, Z+
    78e8:	93 ff       	sbrs	r25, 3
    78ea:	81 91       	ld	r24, Z+
    78ec:	7f 01       	movw	r14, r30
    78ee:	81 11       	cpse	r24, r1
    78f0:	b3 cf       	rjmp	.-154    	; 0x7858 <vfprintf+0x5c>
    78f2:	98 2f       	mov	r25, r24
    78f4:	9f 7d       	andi	r25, 0xDF	; 223
    78f6:	95 54       	subi	r25, 0x45	; 69
    78f8:	93 30       	cpi	r25, 0x03	; 3
    78fa:	28 f4       	brcc	.+10     	; 0x7906 <vfprintf+0x10a>
    78fc:	0c 5f       	subi	r16, 0xFC	; 252
    78fe:	1f 4f       	sbci	r17, 0xFF	; 255
    7900:	9f e3       	ldi	r25, 0x3F	; 63
    7902:	99 83       	std	Y+1, r25	; 0x01
    7904:	0d c0       	rjmp	.+26     	; 0x7920 <vfprintf+0x124>
    7906:	83 36       	cpi	r24, 0x63	; 99
    7908:	31 f0       	breq	.+12     	; 0x7916 <vfprintf+0x11a>
    790a:	83 37       	cpi	r24, 0x73	; 115
    790c:	71 f0       	breq	.+28     	; 0x792a <vfprintf+0x12e>
    790e:	83 35       	cpi	r24, 0x53	; 83
    7910:	09 f0       	breq	.+2      	; 0x7914 <vfprintf+0x118>
    7912:	59 c0       	rjmp	.+178    	; 0x79c6 <vfprintf+0x1ca>
    7914:	21 c0       	rjmp	.+66     	; 0x7958 <vfprintf+0x15c>
    7916:	f8 01       	movw	r30, r16
    7918:	80 81       	ld	r24, Z
    791a:	89 83       	std	Y+1, r24	; 0x01
    791c:	0e 5f       	subi	r16, 0xFE	; 254
    791e:	1f 4f       	sbci	r17, 0xFF	; 255
    7920:	88 24       	eor	r8, r8
    7922:	83 94       	inc	r8
    7924:	91 2c       	mov	r9, r1
    7926:	53 01       	movw	r10, r6
    7928:	13 c0       	rjmp	.+38     	; 0x7950 <vfprintf+0x154>
    792a:	28 01       	movw	r4, r16
    792c:	f2 e0       	ldi	r31, 0x02	; 2
    792e:	4f 0e       	add	r4, r31
    7930:	51 1c       	adc	r5, r1
    7932:	f8 01       	movw	r30, r16
    7934:	a0 80       	ld	r10, Z
    7936:	b1 80       	ldd	r11, Z+1	; 0x01
    7938:	36 fe       	sbrs	r3, 6
    793a:	03 c0       	rjmp	.+6      	; 0x7942 <vfprintf+0x146>
    793c:	69 2d       	mov	r22, r9
    793e:	70 e0       	ldi	r23, 0x00	; 0
    7940:	02 c0       	rjmp	.+4      	; 0x7946 <vfprintf+0x14a>
    7942:	6f ef       	ldi	r22, 0xFF	; 255
    7944:	7f ef       	ldi	r23, 0xFF	; 255
    7946:	c5 01       	movw	r24, r10
    7948:	0e 94 ea 3d 	call	0x7bd4	; 0x7bd4 <strnlen>
    794c:	4c 01       	movw	r8, r24
    794e:	82 01       	movw	r16, r4
    7950:	f3 2d       	mov	r31, r3
    7952:	ff 77       	andi	r31, 0x7F	; 127
    7954:	3f 2e       	mov	r3, r31
    7956:	16 c0       	rjmp	.+44     	; 0x7984 <vfprintf+0x188>
    7958:	28 01       	movw	r4, r16
    795a:	22 e0       	ldi	r18, 0x02	; 2
    795c:	42 0e       	add	r4, r18
    795e:	51 1c       	adc	r5, r1
    7960:	f8 01       	movw	r30, r16
    7962:	a0 80       	ld	r10, Z
    7964:	b1 80       	ldd	r11, Z+1	; 0x01
    7966:	36 fe       	sbrs	r3, 6
    7968:	03 c0       	rjmp	.+6      	; 0x7970 <vfprintf+0x174>
    796a:	69 2d       	mov	r22, r9
    796c:	70 e0       	ldi	r23, 0x00	; 0
    796e:	02 c0       	rjmp	.+4      	; 0x7974 <vfprintf+0x178>
    7970:	6f ef       	ldi	r22, 0xFF	; 255
    7972:	7f ef       	ldi	r23, 0xFF	; 255
    7974:	c5 01       	movw	r24, r10
    7976:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <strnlen_P>
    797a:	4c 01       	movw	r8, r24
    797c:	f3 2d       	mov	r31, r3
    797e:	f0 68       	ori	r31, 0x80	; 128
    7980:	3f 2e       	mov	r3, r31
    7982:	82 01       	movw	r16, r4
    7984:	33 fc       	sbrc	r3, 3
    7986:	1b c0       	rjmp	.+54     	; 0x79be <vfprintf+0x1c2>
    7988:	82 2d       	mov	r24, r2
    798a:	90 e0       	ldi	r25, 0x00	; 0
    798c:	88 16       	cp	r8, r24
    798e:	99 06       	cpc	r9, r25
    7990:	b0 f4       	brcc	.+44     	; 0x79be <vfprintf+0x1c2>
    7992:	b6 01       	movw	r22, r12
    7994:	80 e2       	ldi	r24, 0x20	; 32
    7996:	90 e0       	ldi	r25, 0x00	; 0
    7998:	0e 94 f5 3d 	call	0x7bea	; 0x7bea <fputc>
    799c:	2a 94       	dec	r2
    799e:	f4 cf       	rjmp	.-24     	; 0x7988 <vfprintf+0x18c>
    79a0:	f5 01       	movw	r30, r10
    79a2:	37 fc       	sbrc	r3, 7
    79a4:	85 91       	lpm	r24, Z+
    79a6:	37 fe       	sbrs	r3, 7
    79a8:	81 91       	ld	r24, Z+
    79aa:	5f 01       	movw	r10, r30
    79ac:	b6 01       	movw	r22, r12
    79ae:	90 e0       	ldi	r25, 0x00	; 0
    79b0:	0e 94 f5 3d 	call	0x7bea	; 0x7bea <fputc>
    79b4:	21 10       	cpse	r2, r1
    79b6:	2a 94       	dec	r2
    79b8:	21 e0       	ldi	r18, 0x01	; 1
    79ba:	82 1a       	sub	r8, r18
    79bc:	91 08       	sbc	r9, r1
    79be:	81 14       	cp	r8, r1
    79c0:	91 04       	cpc	r9, r1
    79c2:	71 f7       	brne	.-36     	; 0x79a0 <vfprintf+0x1a4>
    79c4:	e8 c0       	rjmp	.+464    	; 0x7b96 <vfprintf+0x39a>
    79c6:	84 36       	cpi	r24, 0x64	; 100
    79c8:	11 f0       	breq	.+4      	; 0x79ce <vfprintf+0x1d2>
    79ca:	89 36       	cpi	r24, 0x69	; 105
    79cc:	41 f5       	brne	.+80     	; 0x7a1e <vfprintf+0x222>
    79ce:	f8 01       	movw	r30, r16
    79d0:	37 fe       	sbrs	r3, 7
    79d2:	07 c0       	rjmp	.+14     	; 0x79e2 <vfprintf+0x1e6>
    79d4:	60 81       	ld	r22, Z
    79d6:	71 81       	ldd	r23, Z+1	; 0x01
    79d8:	82 81       	ldd	r24, Z+2	; 0x02
    79da:	93 81       	ldd	r25, Z+3	; 0x03
    79dc:	0c 5f       	subi	r16, 0xFC	; 252
    79de:	1f 4f       	sbci	r17, 0xFF	; 255
    79e0:	08 c0       	rjmp	.+16     	; 0x79f2 <vfprintf+0x1f6>
    79e2:	60 81       	ld	r22, Z
    79e4:	71 81       	ldd	r23, Z+1	; 0x01
    79e6:	07 2e       	mov	r0, r23
    79e8:	00 0c       	add	r0, r0
    79ea:	88 0b       	sbc	r24, r24
    79ec:	99 0b       	sbc	r25, r25
    79ee:	0e 5f       	subi	r16, 0xFE	; 254
    79f0:	1f 4f       	sbci	r17, 0xFF	; 255
    79f2:	f3 2d       	mov	r31, r3
    79f4:	ff 76       	andi	r31, 0x6F	; 111
    79f6:	3f 2e       	mov	r3, r31
    79f8:	97 ff       	sbrs	r25, 7
    79fa:	09 c0       	rjmp	.+18     	; 0x7a0e <vfprintf+0x212>
    79fc:	90 95       	com	r25
    79fe:	80 95       	com	r24
    7a00:	70 95       	com	r23
    7a02:	61 95       	neg	r22
    7a04:	7f 4f       	sbci	r23, 0xFF	; 255
    7a06:	8f 4f       	sbci	r24, 0xFF	; 255
    7a08:	9f 4f       	sbci	r25, 0xFF	; 255
    7a0a:	f0 68       	ori	r31, 0x80	; 128
    7a0c:	3f 2e       	mov	r3, r31
    7a0e:	2a e0       	ldi	r18, 0x0A	; 10
    7a10:	30 e0       	ldi	r19, 0x00	; 0
    7a12:	a3 01       	movw	r20, r6
    7a14:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__ultoa_invert>
    7a18:	88 2e       	mov	r8, r24
    7a1a:	86 18       	sub	r8, r6
    7a1c:	45 c0       	rjmp	.+138    	; 0x7aa8 <vfprintf+0x2ac>
    7a1e:	85 37       	cpi	r24, 0x75	; 117
    7a20:	31 f4       	brne	.+12     	; 0x7a2e <vfprintf+0x232>
    7a22:	23 2d       	mov	r18, r3
    7a24:	2f 7e       	andi	r18, 0xEF	; 239
    7a26:	b2 2e       	mov	r11, r18
    7a28:	2a e0       	ldi	r18, 0x0A	; 10
    7a2a:	30 e0       	ldi	r19, 0x00	; 0
    7a2c:	25 c0       	rjmp	.+74     	; 0x7a78 <vfprintf+0x27c>
    7a2e:	93 2d       	mov	r25, r3
    7a30:	99 7f       	andi	r25, 0xF9	; 249
    7a32:	b9 2e       	mov	r11, r25
    7a34:	8f 36       	cpi	r24, 0x6F	; 111
    7a36:	c1 f0       	breq	.+48     	; 0x7a68 <vfprintf+0x26c>
    7a38:	18 f4       	brcc	.+6      	; 0x7a40 <vfprintf+0x244>
    7a3a:	88 35       	cpi	r24, 0x58	; 88
    7a3c:	79 f0       	breq	.+30     	; 0x7a5c <vfprintf+0x260>
    7a3e:	b5 c0       	rjmp	.+362    	; 0x7baa <vfprintf+0x3ae>
    7a40:	80 37       	cpi	r24, 0x70	; 112
    7a42:	19 f0       	breq	.+6      	; 0x7a4a <vfprintf+0x24e>
    7a44:	88 37       	cpi	r24, 0x78	; 120
    7a46:	21 f0       	breq	.+8      	; 0x7a50 <vfprintf+0x254>
    7a48:	b0 c0       	rjmp	.+352    	; 0x7baa <vfprintf+0x3ae>
    7a4a:	e9 2f       	mov	r30, r25
    7a4c:	e0 61       	ori	r30, 0x10	; 16
    7a4e:	be 2e       	mov	r11, r30
    7a50:	b4 fe       	sbrs	r11, 4
    7a52:	0d c0       	rjmp	.+26     	; 0x7a6e <vfprintf+0x272>
    7a54:	fb 2d       	mov	r31, r11
    7a56:	f4 60       	ori	r31, 0x04	; 4
    7a58:	bf 2e       	mov	r11, r31
    7a5a:	09 c0       	rjmp	.+18     	; 0x7a6e <vfprintf+0x272>
    7a5c:	34 fe       	sbrs	r3, 4
    7a5e:	0a c0       	rjmp	.+20     	; 0x7a74 <vfprintf+0x278>
    7a60:	29 2f       	mov	r18, r25
    7a62:	26 60       	ori	r18, 0x06	; 6
    7a64:	b2 2e       	mov	r11, r18
    7a66:	06 c0       	rjmp	.+12     	; 0x7a74 <vfprintf+0x278>
    7a68:	28 e0       	ldi	r18, 0x08	; 8
    7a6a:	30 e0       	ldi	r19, 0x00	; 0
    7a6c:	05 c0       	rjmp	.+10     	; 0x7a78 <vfprintf+0x27c>
    7a6e:	20 e1       	ldi	r18, 0x10	; 16
    7a70:	30 e0       	ldi	r19, 0x00	; 0
    7a72:	02 c0       	rjmp	.+4      	; 0x7a78 <vfprintf+0x27c>
    7a74:	20 e1       	ldi	r18, 0x10	; 16
    7a76:	32 e0       	ldi	r19, 0x02	; 2
    7a78:	f8 01       	movw	r30, r16
    7a7a:	b7 fe       	sbrs	r11, 7
    7a7c:	07 c0       	rjmp	.+14     	; 0x7a8c <vfprintf+0x290>
    7a7e:	60 81       	ld	r22, Z
    7a80:	71 81       	ldd	r23, Z+1	; 0x01
    7a82:	82 81       	ldd	r24, Z+2	; 0x02
    7a84:	93 81       	ldd	r25, Z+3	; 0x03
    7a86:	0c 5f       	subi	r16, 0xFC	; 252
    7a88:	1f 4f       	sbci	r17, 0xFF	; 255
    7a8a:	06 c0       	rjmp	.+12     	; 0x7a98 <vfprintf+0x29c>
    7a8c:	60 81       	ld	r22, Z
    7a8e:	71 81       	ldd	r23, Z+1	; 0x01
    7a90:	80 e0       	ldi	r24, 0x00	; 0
    7a92:	90 e0       	ldi	r25, 0x00	; 0
    7a94:	0e 5f       	subi	r16, 0xFE	; 254
    7a96:	1f 4f       	sbci	r17, 0xFF	; 255
    7a98:	a3 01       	movw	r20, r6
    7a9a:	0e 94 31 3e 	call	0x7c62	; 0x7c62 <__ultoa_invert>
    7a9e:	88 2e       	mov	r8, r24
    7aa0:	86 18       	sub	r8, r6
    7aa2:	fb 2d       	mov	r31, r11
    7aa4:	ff 77       	andi	r31, 0x7F	; 127
    7aa6:	3f 2e       	mov	r3, r31
    7aa8:	36 fe       	sbrs	r3, 6
    7aaa:	0d c0       	rjmp	.+26     	; 0x7ac6 <vfprintf+0x2ca>
    7aac:	23 2d       	mov	r18, r3
    7aae:	2e 7f       	andi	r18, 0xFE	; 254
    7ab0:	a2 2e       	mov	r10, r18
    7ab2:	89 14       	cp	r8, r9
    7ab4:	58 f4       	brcc	.+22     	; 0x7acc <vfprintf+0x2d0>
    7ab6:	34 fe       	sbrs	r3, 4
    7ab8:	0b c0       	rjmp	.+22     	; 0x7ad0 <vfprintf+0x2d4>
    7aba:	32 fc       	sbrc	r3, 2
    7abc:	09 c0       	rjmp	.+18     	; 0x7ad0 <vfprintf+0x2d4>
    7abe:	83 2d       	mov	r24, r3
    7ac0:	8e 7e       	andi	r24, 0xEE	; 238
    7ac2:	a8 2e       	mov	r10, r24
    7ac4:	05 c0       	rjmp	.+10     	; 0x7ad0 <vfprintf+0x2d4>
    7ac6:	b8 2c       	mov	r11, r8
    7ac8:	a3 2c       	mov	r10, r3
    7aca:	03 c0       	rjmp	.+6      	; 0x7ad2 <vfprintf+0x2d6>
    7acc:	b8 2c       	mov	r11, r8
    7ace:	01 c0       	rjmp	.+2      	; 0x7ad2 <vfprintf+0x2d6>
    7ad0:	b9 2c       	mov	r11, r9
    7ad2:	a4 fe       	sbrs	r10, 4
    7ad4:	0f c0       	rjmp	.+30     	; 0x7af4 <vfprintf+0x2f8>
    7ad6:	fe 01       	movw	r30, r28
    7ad8:	e8 0d       	add	r30, r8
    7ada:	f1 1d       	adc	r31, r1
    7adc:	80 81       	ld	r24, Z
    7ade:	80 33       	cpi	r24, 0x30	; 48
    7ae0:	21 f4       	brne	.+8      	; 0x7aea <vfprintf+0x2ee>
    7ae2:	9a 2d       	mov	r25, r10
    7ae4:	99 7e       	andi	r25, 0xE9	; 233
    7ae6:	a9 2e       	mov	r10, r25
    7ae8:	09 c0       	rjmp	.+18     	; 0x7afc <vfprintf+0x300>
    7aea:	a2 fe       	sbrs	r10, 2
    7aec:	06 c0       	rjmp	.+12     	; 0x7afa <vfprintf+0x2fe>
    7aee:	b3 94       	inc	r11
    7af0:	b3 94       	inc	r11
    7af2:	04 c0       	rjmp	.+8      	; 0x7afc <vfprintf+0x300>
    7af4:	8a 2d       	mov	r24, r10
    7af6:	86 78       	andi	r24, 0x86	; 134
    7af8:	09 f0       	breq	.+2      	; 0x7afc <vfprintf+0x300>
    7afa:	b3 94       	inc	r11
    7afc:	a3 fc       	sbrc	r10, 3
    7afe:	11 c0       	rjmp	.+34     	; 0x7b22 <vfprintf+0x326>
    7b00:	a0 fe       	sbrs	r10, 0
    7b02:	06 c0       	rjmp	.+12     	; 0x7b10 <vfprintf+0x314>
    7b04:	b2 14       	cp	r11, r2
    7b06:	88 f4       	brcc	.+34     	; 0x7b2a <vfprintf+0x32e>
    7b08:	28 0c       	add	r2, r8
    7b0a:	92 2c       	mov	r9, r2
    7b0c:	9b 18       	sub	r9, r11
    7b0e:	0e c0       	rjmp	.+28     	; 0x7b2c <vfprintf+0x330>
    7b10:	b2 14       	cp	r11, r2
    7b12:	60 f4       	brcc	.+24     	; 0x7b2c <vfprintf+0x330>
    7b14:	b6 01       	movw	r22, r12
    7b16:	80 e2       	ldi	r24, 0x20	; 32
    7b18:	90 e0       	ldi	r25, 0x00	; 0
    7b1a:	0e 94 f5 3d 	call	0x7bea	; 0x7bea <fputc>
    7b1e:	b3 94       	inc	r11
    7b20:	f7 cf       	rjmp	.-18     	; 0x7b10 <vfprintf+0x314>
    7b22:	b2 14       	cp	r11, r2
    7b24:	18 f4       	brcc	.+6      	; 0x7b2c <vfprintf+0x330>
    7b26:	2b 18       	sub	r2, r11
    7b28:	02 c0       	rjmp	.+4      	; 0x7b2e <vfprintf+0x332>
    7b2a:	98 2c       	mov	r9, r8
    7b2c:	21 2c       	mov	r2, r1
    7b2e:	a4 fe       	sbrs	r10, 4
    7b30:	10 c0       	rjmp	.+32     	; 0x7b52 <vfprintf+0x356>
    7b32:	b6 01       	movw	r22, r12
    7b34:	80 e3       	ldi	r24, 0x30	; 48
    7b36:	90 e0       	ldi	r25, 0x00	; 0
    7b38:	0e 94 f5 3d 	call	0x7bea	; 0x7bea <fputc>
    7b3c:	a2 fe       	sbrs	r10, 2
    7b3e:	17 c0       	rjmp	.+46     	; 0x7b6e <vfprintf+0x372>
    7b40:	a1 fc       	sbrc	r10, 1
    7b42:	03 c0       	rjmp	.+6      	; 0x7b4a <vfprintf+0x34e>
    7b44:	88 e7       	ldi	r24, 0x78	; 120
    7b46:	90 e0       	ldi	r25, 0x00	; 0
    7b48:	02 c0       	rjmp	.+4      	; 0x7b4e <vfprintf+0x352>
    7b4a:	88 e5       	ldi	r24, 0x58	; 88
    7b4c:	90 e0       	ldi	r25, 0x00	; 0
    7b4e:	b6 01       	movw	r22, r12
    7b50:	0c c0       	rjmp	.+24     	; 0x7b6a <vfprintf+0x36e>
    7b52:	8a 2d       	mov	r24, r10
    7b54:	86 78       	andi	r24, 0x86	; 134
    7b56:	59 f0       	breq	.+22     	; 0x7b6e <vfprintf+0x372>
    7b58:	a1 fe       	sbrs	r10, 1
    7b5a:	02 c0       	rjmp	.+4      	; 0x7b60 <vfprintf+0x364>
    7b5c:	8b e2       	ldi	r24, 0x2B	; 43
    7b5e:	01 c0       	rjmp	.+2      	; 0x7b62 <vfprintf+0x366>
    7b60:	80 e2       	ldi	r24, 0x20	; 32
    7b62:	a7 fc       	sbrc	r10, 7
    7b64:	8d e2       	ldi	r24, 0x2D	; 45
    7b66:	b6 01       	movw	r22, r12
    7b68:	90 e0       	ldi	r25, 0x00	; 0
    7b6a:	0e 94 f5 3d 	call	0x7bea	; 0x7bea <fputc>
    7b6e:	89 14       	cp	r8, r9
    7b70:	38 f4       	brcc	.+14     	; 0x7b80 <vfprintf+0x384>
    7b72:	b6 01       	movw	r22, r12
    7b74:	80 e3       	ldi	r24, 0x30	; 48
    7b76:	90 e0       	ldi	r25, 0x00	; 0
    7b78:	0e 94 f5 3d 	call	0x7bea	; 0x7bea <fputc>
    7b7c:	9a 94       	dec	r9
    7b7e:	f7 cf       	rjmp	.-18     	; 0x7b6e <vfprintf+0x372>
    7b80:	8a 94       	dec	r8
    7b82:	f3 01       	movw	r30, r6
    7b84:	e8 0d       	add	r30, r8
    7b86:	f1 1d       	adc	r31, r1
    7b88:	80 81       	ld	r24, Z
    7b8a:	b6 01       	movw	r22, r12
    7b8c:	90 e0       	ldi	r25, 0x00	; 0
    7b8e:	0e 94 f5 3d 	call	0x7bea	; 0x7bea <fputc>
    7b92:	81 10       	cpse	r8, r1
    7b94:	f5 cf       	rjmp	.-22     	; 0x7b80 <vfprintf+0x384>
    7b96:	22 20       	and	r2, r2
    7b98:	09 f4       	brne	.+2      	; 0x7b9c <vfprintf+0x3a0>
    7b9a:	42 ce       	rjmp	.-892    	; 0x7820 <vfprintf+0x24>
    7b9c:	b6 01       	movw	r22, r12
    7b9e:	80 e2       	ldi	r24, 0x20	; 32
    7ba0:	90 e0       	ldi	r25, 0x00	; 0
    7ba2:	0e 94 f5 3d 	call	0x7bea	; 0x7bea <fputc>
    7ba6:	2a 94       	dec	r2
    7ba8:	f6 cf       	rjmp	.-20     	; 0x7b96 <vfprintf+0x39a>
    7baa:	f6 01       	movw	r30, r12
    7bac:	86 81       	ldd	r24, Z+6	; 0x06
    7bae:	97 81       	ldd	r25, Z+7	; 0x07
    7bb0:	02 c0       	rjmp	.+4      	; 0x7bb6 <vfprintf+0x3ba>
    7bb2:	8f ef       	ldi	r24, 0xFF	; 255
    7bb4:	9f ef       	ldi	r25, 0xFF	; 255
    7bb6:	2b 96       	adiw	r28, 0x0b	; 11
    7bb8:	e2 e1       	ldi	r30, 0x12	; 18
    7bba:	0c 94 a8 3e 	jmp	0x7d50	; 0x7d50 <__epilogue_restores__>

00007bbe <strnlen_P>:
    7bbe:	fc 01       	movw	r30, r24
    7bc0:	05 90       	lpm	r0, Z+
    7bc2:	61 50       	subi	r22, 0x01	; 1
    7bc4:	70 40       	sbci	r23, 0x00	; 0
    7bc6:	01 10       	cpse	r0, r1
    7bc8:	d8 f7       	brcc	.-10     	; 0x7bc0 <strnlen_P+0x2>
    7bca:	80 95       	com	r24
    7bcc:	90 95       	com	r25
    7bce:	8e 0f       	add	r24, r30
    7bd0:	9f 1f       	adc	r25, r31
    7bd2:	08 95       	ret

00007bd4 <strnlen>:
    7bd4:	fc 01       	movw	r30, r24
    7bd6:	61 50       	subi	r22, 0x01	; 1
    7bd8:	70 40       	sbci	r23, 0x00	; 0
    7bda:	01 90       	ld	r0, Z+
    7bdc:	01 10       	cpse	r0, r1
    7bde:	d8 f7       	brcc	.-10     	; 0x7bd6 <strnlen+0x2>
    7be0:	80 95       	com	r24
    7be2:	90 95       	com	r25
    7be4:	8e 0f       	add	r24, r30
    7be6:	9f 1f       	adc	r25, r31
    7be8:	08 95       	ret

00007bea <fputc>:
    7bea:	0f 93       	push	r16
    7bec:	1f 93       	push	r17
    7bee:	cf 93       	push	r28
    7bf0:	df 93       	push	r29
    7bf2:	fb 01       	movw	r30, r22
    7bf4:	23 81       	ldd	r18, Z+3	; 0x03
    7bf6:	21 fd       	sbrc	r18, 1
    7bf8:	03 c0       	rjmp	.+6      	; 0x7c00 <fputc+0x16>
    7bfa:	8f ef       	ldi	r24, 0xFF	; 255
    7bfc:	9f ef       	ldi	r25, 0xFF	; 255
    7bfe:	2c c0       	rjmp	.+88     	; 0x7c58 <fputc+0x6e>
    7c00:	22 ff       	sbrs	r18, 2
    7c02:	16 c0       	rjmp	.+44     	; 0x7c30 <fputc+0x46>
    7c04:	46 81       	ldd	r20, Z+6	; 0x06
    7c06:	57 81       	ldd	r21, Z+7	; 0x07
    7c08:	24 81       	ldd	r18, Z+4	; 0x04
    7c0a:	35 81       	ldd	r19, Z+5	; 0x05
    7c0c:	42 17       	cp	r20, r18
    7c0e:	53 07       	cpc	r21, r19
    7c10:	44 f4       	brge	.+16     	; 0x7c22 <fputc+0x38>
    7c12:	a0 81       	ld	r26, Z
    7c14:	b1 81       	ldd	r27, Z+1	; 0x01
    7c16:	9d 01       	movw	r18, r26
    7c18:	2f 5f       	subi	r18, 0xFF	; 255
    7c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    7c1c:	20 83       	st	Z, r18
    7c1e:	31 83       	std	Z+1, r19	; 0x01
    7c20:	8c 93       	st	X, r24
    7c22:	26 81       	ldd	r18, Z+6	; 0x06
    7c24:	37 81       	ldd	r19, Z+7	; 0x07
    7c26:	2f 5f       	subi	r18, 0xFF	; 255
    7c28:	3f 4f       	sbci	r19, 0xFF	; 255
    7c2a:	26 83       	std	Z+6, r18	; 0x06
    7c2c:	37 83       	std	Z+7, r19	; 0x07
    7c2e:	14 c0       	rjmp	.+40     	; 0x7c58 <fputc+0x6e>
    7c30:	8b 01       	movw	r16, r22
    7c32:	ec 01       	movw	r28, r24
    7c34:	fb 01       	movw	r30, r22
    7c36:	00 84       	ldd	r0, Z+8	; 0x08
    7c38:	f1 85       	ldd	r31, Z+9	; 0x09
    7c3a:	e0 2d       	mov	r30, r0
    7c3c:	09 95       	icall
    7c3e:	89 2b       	or	r24, r25
    7c40:	e1 f6       	brne	.-72     	; 0x7bfa <fputc+0x10>
    7c42:	d8 01       	movw	r26, r16
    7c44:	16 96       	adiw	r26, 0x06	; 6
    7c46:	8d 91       	ld	r24, X+
    7c48:	9c 91       	ld	r25, X
    7c4a:	17 97       	sbiw	r26, 0x07	; 7
    7c4c:	01 96       	adiw	r24, 0x01	; 1
    7c4e:	16 96       	adiw	r26, 0x06	; 6
    7c50:	8d 93       	st	X+, r24
    7c52:	9c 93       	st	X, r25
    7c54:	17 97       	sbiw	r26, 0x07	; 7
    7c56:	ce 01       	movw	r24, r28
    7c58:	df 91       	pop	r29
    7c5a:	cf 91       	pop	r28
    7c5c:	1f 91       	pop	r17
    7c5e:	0f 91       	pop	r16
    7c60:	08 95       	ret

00007c62 <__ultoa_invert>:
    7c62:	fa 01       	movw	r30, r20
    7c64:	aa 27       	eor	r26, r26
    7c66:	28 30       	cpi	r18, 0x08	; 8
    7c68:	51 f1       	breq	.+84     	; 0x7cbe <__ultoa_invert+0x5c>
    7c6a:	20 31       	cpi	r18, 0x10	; 16
    7c6c:	81 f1       	breq	.+96     	; 0x7cce <__ultoa_invert+0x6c>
    7c6e:	e8 94       	clt
    7c70:	6f 93       	push	r22
    7c72:	6e 7f       	andi	r22, 0xFE	; 254
    7c74:	6e 5f       	subi	r22, 0xFE	; 254
    7c76:	7f 4f       	sbci	r23, 0xFF	; 255
    7c78:	8f 4f       	sbci	r24, 0xFF	; 255
    7c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    7c7c:	af 4f       	sbci	r26, 0xFF	; 255
    7c7e:	b1 e0       	ldi	r27, 0x01	; 1
    7c80:	3e d0       	rcall	.+124    	; 0x7cfe <__ultoa_invert+0x9c>
    7c82:	b4 e0       	ldi	r27, 0x04	; 4
    7c84:	3c d0       	rcall	.+120    	; 0x7cfe <__ultoa_invert+0x9c>
    7c86:	67 0f       	add	r22, r23
    7c88:	78 1f       	adc	r23, r24
    7c8a:	89 1f       	adc	r24, r25
    7c8c:	9a 1f       	adc	r25, r26
    7c8e:	a1 1d       	adc	r26, r1
    7c90:	68 0f       	add	r22, r24
    7c92:	79 1f       	adc	r23, r25
    7c94:	8a 1f       	adc	r24, r26
    7c96:	91 1d       	adc	r25, r1
    7c98:	a1 1d       	adc	r26, r1
    7c9a:	6a 0f       	add	r22, r26
    7c9c:	71 1d       	adc	r23, r1
    7c9e:	81 1d       	adc	r24, r1
    7ca0:	91 1d       	adc	r25, r1
    7ca2:	a1 1d       	adc	r26, r1
    7ca4:	20 d0       	rcall	.+64     	; 0x7ce6 <__ultoa_invert+0x84>
    7ca6:	09 f4       	brne	.+2      	; 0x7caa <__ultoa_invert+0x48>
    7ca8:	68 94       	set
    7caa:	3f 91       	pop	r19
    7cac:	2a e0       	ldi	r18, 0x0A	; 10
    7cae:	26 9f       	mul	r18, r22
    7cb0:	11 24       	eor	r1, r1
    7cb2:	30 19       	sub	r19, r0
    7cb4:	30 5d       	subi	r19, 0xD0	; 208
    7cb6:	31 93       	st	Z+, r19
    7cb8:	de f6       	brtc	.-74     	; 0x7c70 <__ultoa_invert+0xe>
    7cba:	cf 01       	movw	r24, r30
    7cbc:	08 95       	ret
    7cbe:	46 2f       	mov	r20, r22
    7cc0:	47 70       	andi	r20, 0x07	; 7
    7cc2:	40 5d       	subi	r20, 0xD0	; 208
    7cc4:	41 93       	st	Z+, r20
    7cc6:	b3 e0       	ldi	r27, 0x03	; 3
    7cc8:	0f d0       	rcall	.+30     	; 0x7ce8 <__ultoa_invert+0x86>
    7cca:	c9 f7       	brne	.-14     	; 0x7cbe <__ultoa_invert+0x5c>
    7ccc:	f6 cf       	rjmp	.-20     	; 0x7cba <__ultoa_invert+0x58>
    7cce:	46 2f       	mov	r20, r22
    7cd0:	4f 70       	andi	r20, 0x0F	; 15
    7cd2:	40 5d       	subi	r20, 0xD0	; 208
    7cd4:	4a 33       	cpi	r20, 0x3A	; 58
    7cd6:	18 f0       	brcs	.+6      	; 0x7cde <__ultoa_invert+0x7c>
    7cd8:	49 5d       	subi	r20, 0xD9	; 217
    7cda:	31 fd       	sbrc	r19, 1
    7cdc:	40 52       	subi	r20, 0x20	; 32
    7cde:	41 93       	st	Z+, r20
    7ce0:	02 d0       	rcall	.+4      	; 0x7ce6 <__ultoa_invert+0x84>
    7ce2:	a9 f7       	brne	.-22     	; 0x7cce <__ultoa_invert+0x6c>
    7ce4:	ea cf       	rjmp	.-44     	; 0x7cba <__ultoa_invert+0x58>
    7ce6:	b4 e0       	ldi	r27, 0x04	; 4
    7ce8:	a6 95       	lsr	r26
    7cea:	97 95       	ror	r25
    7cec:	87 95       	ror	r24
    7cee:	77 95       	ror	r23
    7cf0:	67 95       	ror	r22
    7cf2:	ba 95       	dec	r27
    7cf4:	c9 f7       	brne	.-14     	; 0x7ce8 <__ultoa_invert+0x86>
    7cf6:	00 97       	sbiw	r24, 0x00	; 0
    7cf8:	61 05       	cpc	r22, r1
    7cfa:	71 05       	cpc	r23, r1
    7cfc:	08 95       	ret
    7cfe:	9b 01       	movw	r18, r22
    7d00:	ac 01       	movw	r20, r24
    7d02:	0a 2e       	mov	r0, r26
    7d04:	06 94       	lsr	r0
    7d06:	57 95       	ror	r21
    7d08:	47 95       	ror	r20
    7d0a:	37 95       	ror	r19
    7d0c:	27 95       	ror	r18
    7d0e:	ba 95       	dec	r27
    7d10:	c9 f7       	brne	.-14     	; 0x7d04 <__ultoa_invert+0xa2>
    7d12:	62 0f       	add	r22, r18
    7d14:	73 1f       	adc	r23, r19
    7d16:	84 1f       	adc	r24, r20
    7d18:	95 1f       	adc	r25, r21
    7d1a:	a0 1d       	adc	r26, r0
    7d1c:	08 95       	ret

00007d1e <__prologue_saves__>:
    7d1e:	2f 92       	push	r2
    7d20:	3f 92       	push	r3
    7d22:	4f 92       	push	r4
    7d24:	5f 92       	push	r5
    7d26:	6f 92       	push	r6
    7d28:	7f 92       	push	r7
    7d2a:	8f 92       	push	r8
    7d2c:	9f 92       	push	r9
    7d2e:	af 92       	push	r10
    7d30:	bf 92       	push	r11
    7d32:	cf 92       	push	r12
    7d34:	df 92       	push	r13
    7d36:	ef 92       	push	r14
    7d38:	ff 92       	push	r15
    7d3a:	0f 93       	push	r16
    7d3c:	1f 93       	push	r17
    7d3e:	cf 93       	push	r28
    7d40:	df 93       	push	r29
    7d42:	cd b7       	in	r28, 0x3d	; 61
    7d44:	de b7       	in	r29, 0x3e	; 62
    7d46:	ca 1b       	sub	r28, r26
    7d48:	db 0b       	sbc	r29, r27
    7d4a:	cd bf       	out	0x3d, r28	; 61
    7d4c:	de bf       	out	0x3e, r29	; 62
    7d4e:	09 94       	ijmp

00007d50 <__epilogue_restores__>:
    7d50:	2a 88       	ldd	r2, Y+18	; 0x12
    7d52:	39 88       	ldd	r3, Y+17	; 0x11
    7d54:	48 88       	ldd	r4, Y+16	; 0x10
    7d56:	5f 84       	ldd	r5, Y+15	; 0x0f
    7d58:	6e 84       	ldd	r6, Y+14	; 0x0e
    7d5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    7d5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    7d5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    7d60:	aa 84       	ldd	r10, Y+10	; 0x0a
    7d62:	b9 84       	ldd	r11, Y+9	; 0x09
    7d64:	c8 84       	ldd	r12, Y+8	; 0x08
    7d66:	df 80       	ldd	r13, Y+7	; 0x07
    7d68:	ee 80       	ldd	r14, Y+6	; 0x06
    7d6a:	fd 80       	ldd	r15, Y+5	; 0x05
    7d6c:	0c 81       	ldd	r16, Y+4	; 0x04
    7d6e:	1b 81       	ldd	r17, Y+3	; 0x03
    7d70:	aa 81       	ldd	r26, Y+2	; 0x02
    7d72:	b9 81       	ldd	r27, Y+1	; 0x01
    7d74:	ce 0f       	add	r28, r30
    7d76:	d1 1d       	adc	r29, r1
    7d78:	cd bf       	out	0x3d, r28	; 61
    7d7a:	de bf       	out	0x3e, r29	; 62
    7d7c:	ed 01       	movw	r28, r26
    7d7e:	08 95       	ret

00007d80 <_exit>:
    7d80:	f8 94       	cli

00007d82 <__stop_program>:
    7d82:	ff cf       	rjmp	.-2      	; 0x7d82 <__stop_program>
