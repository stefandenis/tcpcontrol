
robowifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00802800  000076f7  000077ab  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007556  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a1  0000b556  00007556  0000760a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000676  00802844  00802844  000077ef  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000077ef  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000784c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000bb0  00000000  00000000  00007890  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000c9b1  00000000  00000000  00008440  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004200  00000000  00000000  00014df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007341  00000000  00000000  00018ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003144  00000000  00000000  00020334  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000055d5  00000000  00000000  00023478  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006a44  00000000  00000000  00028a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b78  00000000  00000000  0002f491  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__ctors_end>
       4:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       8:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       c:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__vector_3>
      10:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      14:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      18:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      1c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      20:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      24:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      28:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      2c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      30:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      34:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      38:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      3c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      40:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      44:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      48:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      4c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      50:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      54:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      58:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      5c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      60:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__vector_24>
      64:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      68:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      6c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      70:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      74:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      78:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      7c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      80:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      84:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      88:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      8c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      90:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      94:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      98:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      9c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      a0:	6d 16       	cp	r6, r29
      a2:	66 16       	cp	r6, r22
      a4:	7b 16       	cp	r7, r27
      a6:	74 16       	cp	r7, r20
      a8:	90 16       	cp	r9, r16
      aa:	82 16       	cp	r8, r18
      ac:	89 16       	cp	r8, r25
      ae:	30 25       	eor	r19, r0
      b0:	30 25       	eor	r19, r0
      b2:	7a 25       	eor	r23, r10
      b4:	06 25       	eor	r16, r6
      b6:	1b 25       	eor	r17, r11
      b8:	21 25       	eor	r18, r1
      ba:	51 25       	eor	r21, r1
      bc:	51 25       	eor	r21, r1
      be:	aa 25       	eor	r26, r10
      c0:	f0 24       	eor	r15, r0
      c2:	dc 25       	eor	r29, r12
      c4:	dc 25       	eor	r29, r12
      c6:	dc 25       	eor	r29, r12
      c8:	dc 25       	eor	r29, r12
      ca:	27 25       	eor	r18, r7

000000cc <__trampolines_end>:
      cc:	00 09       	sbc	r16, r0
      ce:	12 1b       	sub	r17, r18
      d0:	24 2d       	mov	r18, r4
      d2:	36 3f       	cpi	r19, 0xF6	; 246
      d4:	48 41       	sbci	r20, 0x18	; 24
      d6:	5a 53       	subi	r21, 0x3A	; 58
      d8:	6c 65       	ori	r22, 0x5C	; 92
      da:	7e 77       	andi	r23, 0x7E	; 126
      dc:	19 10       	cpse	r1, r9
      de:	0b 02       	muls	r16, r27
      e0:	3d 34       	cpi	r19, 0x4D	; 77
      e2:	2f 26       	eor	r2, r31
      e4:	51 58       	subi	r21, 0x81	; 129
      e6:	43 4a       	sbci	r20, 0xA3	; 163
      e8:	75 7c       	andi	r23, 0xC5	; 197
      ea:	67 6e       	ori	r22, 0xE7	; 231
      ec:	32 3b       	cpi	r19, 0xB2	; 178
      ee:	20 29       	or	r18, r0
      f0:	16 1f       	adc	r17, r22
      f2:	04 0d       	add	r16, r4
      f4:	7a 73       	andi	r23, 0x3A	; 58
      f6:	68 61       	ori	r22, 0x18	; 24
      f8:	5e 57       	subi	r21, 0x7E	; 126
      fa:	4c 45       	sbci	r20, 0x5C	; 92
      fc:	2b 22       	and	r2, r27
      fe:	39 30       	cpi	r19, 0x09	; 9
     100:	0f 06       	cpc	r0, r31
     102:	1d 14       	cp	r1, r13
     104:	63 6a       	ori	r22, 0xA3	; 163
     106:	71 78       	andi	r23, 0x81	; 129
     108:	47 4e       	sbci	r20, 0xE7	; 231
     10a:	55 5c       	subi	r21, 0xC5	; 197
     10c:	64 6d       	ori	r22, 0xD4	; 212
     10e:	76 7f       	andi	r23, 0xF6	; 246
     110:	40 49       	sbci	r20, 0x90	; 144
     112:	52 5b       	subi	r21, 0xB2	; 178
     114:	2c 25       	eor	r18, r12
     116:	3e 37       	cpi	r19, 0x7E	; 126
     118:	08 01       	movw	r0, r16
     11a:	1a 13       	cpse	r17, r26
     11c:	7d 74       	andi	r23, 0x4D	; 77
     11e:	6f 66       	ori	r22, 0x6F	; 111
     120:	59 50       	subi	r21, 0x09	; 9
     122:	4b 42       	sbci	r20, 0x2B	; 43
     124:	35 3c       	cpi	r19, 0xC5	; 197
     126:	27 2e       	mov	r2, r23
     128:	11 18       	sub	r1, r1
     12a:	03 0a       	sbc	r0, r19
     12c:	56 5f       	subi	r21, 0xF6	; 246
     12e:	44 4d       	sbci	r20, 0xD4	; 212
     130:	72 7b       	andi	r23, 0xB2	; 178
     132:	60 69       	ori	r22, 0x90	; 144
     134:	1e 17       	cp	r17, r30
     136:	0c 05       	cpc	r16, r12
     138:	3a 33       	cpi	r19, 0x3A	; 58
     13a:	28 21       	and	r18, r8
     13c:	4f 46       	sbci	r20, 0x6F	; 111
     13e:	5d 54       	subi	r21, 0x4D	; 77
     140:	6b 62       	ori	r22, 0x2B	; 43
     142:	79 70       	andi	r23, 0x09	; 9
     144:	07 0e       	add	r0, r23
     146:	15 1c       	adc	r1, r5
     148:	23 2a       	or	r2, r19
     14a:	31 38       	cpi	r19, 0x81	; 129
     14c:	41 48       	sbci	r20, 0x81	; 129
     14e:	53 5a       	subi	r21, 0xA3	; 163
     150:	65 6c       	ori	r22, 0xC5	; 197
     152:	77 7e       	andi	r23, 0xE7	; 231
     154:	09 00       	.word	0x0009	; ????
     156:	1b 12       	cpse	r1, r27
     158:	2d 24       	eor	r2, r13
     15a:	3f 36       	cpi	r19, 0x6F	; 111
     15c:	58 51       	subi	r21, 0x18	; 24
     15e:	4a 43       	sbci	r20, 0x3A	; 58
     160:	7c 75       	andi	r23, 0x5C	; 92
     162:	6e 67       	ori	r22, 0x7E	; 126
     164:	10 19       	sub	r17, r0
     166:	02 0b       	sbc	r16, r18
     168:	34 3d       	cpi	r19, 0xD4	; 212
     16a:	26 2f       	mov	r18, r22
     16c:	73 7a       	andi	r23, 0xA3	; 163
     16e:	61 68       	ori	r22, 0x81	; 129
     170:	57 5e       	subi	r21, 0xE7	; 231
     172:	45 4c       	sbci	r20, 0xC5	; 197
     174:	3b 32       	cpi	r19, 0x2B	; 43
     176:	29 20       	and	r2, r9
     178:	1f 16       	cp	r1, r31
     17a:	0d 04       	cpc	r0, r13
     17c:	6a 63       	ori	r22, 0x3A	; 58
     17e:	78 71       	andi	r23, 0x18	; 24
     180:	4e 47       	sbci	r20, 0x7E	; 126
     182:	5c 55       	subi	r21, 0x5C	; 92
     184:	22 2b       	or	r18, r18
     186:	30 39       	cpi	r19, 0x90	; 144
     188:	06 0f       	add	r16, r22
     18a:	14 1d       	adc	r17, r4
     18c:	25 2c       	mov	r2, r5
     18e:	37 3e       	cpi	r19, 0xE7	; 231
     190:	01 08       	sbc	r0, r1
     192:	13 1a       	sub	r1, r19
     194:	6d 64       	ori	r22, 0x4D	; 77
     196:	7f 76       	andi	r23, 0x6F	; 111
     198:	49 40       	sbci	r20, 0x09	; 9
     19a:	5b 52       	subi	r21, 0x2B	; 43
     19c:	3c 35       	cpi	r19, 0x5C	; 92
     19e:	2e 27       	eor	r18, r30
     1a0:	18 11       	cpse	r17, r8
     1a2:	0a 03       	fmul	r16, r18
     1a4:	74 7d       	andi	r23, 0xD4	; 212
     1a6:	66 6f       	ori	r22, 0xF6	; 246
     1a8:	50 59       	subi	r21, 0x90	; 144
     1aa:	42 4b       	sbci	r20, 0xB2	; 178
     1ac:	17 1e       	adc	r1, r23
     1ae:	05 0c       	add	r0, r5
     1b0:	33 3a       	cpi	r19, 0xA3	; 163
     1b2:	21 28       	or	r2, r1
     1b4:	5f 56       	subi	r21, 0x6F	; 111
     1b6:	4d 44       	sbci	r20, 0x4D	; 77
     1b8:	7b 72       	andi	r23, 0x2B	; 43
     1ba:	69 60       	ori	r22, 0x09	; 9
     1bc:	0e 07       	cpc	r16, r30
     1be:	1c 15       	cp	r17, r12
     1c0:	2a 23       	and	r18, r26
     1c2:	38 31       	cpi	r19, 0x18	; 24
     1c4:	46 4f       	sbci	r20, 0xF6	; 246
     1c6:	54 5d       	subi	r21, 0xD4	; 212
     1c8:	62 6b       	ori	r22, 0xB2	; 178
     1ca:	70 79       	andi	r23, 0x90	; 144

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	df e3       	ldi	r29, 0x3F	; 63
     1d6:	de bf       	out	0x3e, r29	; 62

000001d8 <__do_copy_data>:
     1d8:	18 e2       	ldi	r17, 0x28	; 40
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b8 e2       	ldi	r27, 0x28	; 40
     1de:	e7 ef       	ldi	r30, 0xF7	; 247
     1e0:	f6 e7       	ldi	r31, 0x76	; 118
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__do_copy_data+0x10>
     1e4:	05 90       	lpm	r0, Z+
     1e6:	0d 92       	st	X+, r0
     1e8:	a4 34       	cpi	r26, 0x44	; 68
     1ea:	b1 07       	cpc	r27, r17
     1ec:	d9 f7       	brne	.-10     	; 0x1e4 <__do_copy_data+0xc>

000001ee <__do_clear_bss>:
     1ee:	2e e2       	ldi	r18, 0x2E	; 46
     1f0:	a4 e4       	ldi	r26, 0x44	; 68
     1f2:	b8 e2       	ldi	r27, 0x28	; 40
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <.do_clear_bss_start>

000001f6 <.do_clear_bss_loop>:
     1f6:	1d 92       	st	X+, r1

000001f8 <.do_clear_bss_start>:
     1f8:	aa 3b       	cpi	r26, 0xBA	; 186
     1fa:	b2 07       	cpc	r27, r18
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <.do_clear_bss_loop>
     1fe:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <main>
     202:	0c 94 a9 3a 	jmp	0x7552	; 0x7552 <_exit>

00000206 <__bad_interrupt>:
     206:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020a <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
	system_init();
     212:	0e 94 ab 08 	call	0x1156	; 0x1156 <system_init>
}
     216:	00 00       	nop
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <wifi_init>:

/*
 * \brief Initialize Wifi library
 */
void wifi_init(tstrWifiInitParam *params)
{
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	61 97       	sbiw	r28, 0x11	; 17
     228:	cd bf       	out	0x3d, r28	; 61
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	88 8b       	std	Y+16, r24	; 0x10
     22e:	99 8b       	std	Y+17, r25	; 0x11
	tstrWifiInitParam param;
	int8_t            ret;

//	set_winc_spi_descriptor(&WINC_SPI);
	/* Initialize the BSP. */
	nm_bsp_init();
     230:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <nm_bsp_init>
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
     234:	ce 01       	movw	r24, r28
     236:	02 96       	adiw	r24, 0x02	; 2
     238:	4e e0       	ldi	r20, 0x0E	; 14
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <memset>
	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = params->pfAppWifiCb;
     244:	88 89       	ldd	r24, Y+16	; 0x10
     246:	99 89       	ldd	r25, Y+17	; 0x11
     248:	fc 01       	movw	r30, r24
     24a:	80 81       	ld	r24, Z
     24c:	91 81       	ldd	r25, Z+1	; 0x01
     24e:	8a 83       	std	Y+2, r24	; 0x02
     250:	9b 83       	std	Y+3, r25	; 0x03
	ret               = m2m_wifi_init(&param);
     252:	ce 01       	movw	r24, r28
     254:	02 96       	adiw	r24, 0x02	; 2
     256:	0e 94 43 19 	call	0x3286	; 0x3286 <m2m_wifi_init>
     25a:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
     25c:	89 81       	ldd	r24, Y+1	; 0x01
     25e:	88 23       	and	r24, r24
     260:	09 f0       	breq	.+2      	; 0x264 <wifi_init+0x46>
		while (1) {
		}
     262:	ff cf       	rjmp	.-2      	; 0x262 <wifi_init+0x44>





}
     264:	00 00       	nop
     266:	61 96       	adiw	r28, 0x11	; 17
     268:	cd bf       	out	0x3d, r28	; 61
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <usart_putchar_printf>:
int usart_putchar_printf(char var, FILE *stream);

static FILE mystdout = FDEV_SETUP_STREAM(usart_putchar_printf, NULL, _FDEV_SETUP_WRITE);


int usart_putchar_printf(char var, FILE *stream){
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	00 d0       	rcall	.+0      	; 0x278 <usart_putchar_printf+0x6>
     278:	1f 92       	push	r1
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	89 83       	std	Y+1, r24	; 0x01
     280:	6a 83       	std	Y+2, r22	; 0x02
     282:	7b 83       	std	Y+3, r23	; 0x03
	
	USART_1_write(var);
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	88 2f       	mov	r24, r24
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 19 0b 	call	0x1632	; 0x1632 <USART_1_write>
}
     28e:	00 00       	nop
     290:	23 96       	adiw	r28, 0x03	; 3
     292:	cd bf       	out	0x3d, r28	; 61
     294:	de bf       	out	0x3e, r29	; 62
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	2d 97       	sbiw	r28, 0x0d	; 13
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	8a 87       	std	Y+10, r24	; 0x0a
     2b0:	6b 87       	std	Y+11, r22	; 0x0b
     2b2:	4c 87       	std	Y+12, r20	; 0x0c
     2b4:	5d 87       	std	Y+13, r21	; 0x0d
	switch (u8Msg) {
     2b6:	8b 85       	ldd	r24, Y+11	; 0x0b
     2b8:	88 2f       	mov	r24, r24
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	84 30       	cpi	r24, 0x04	; 4
     2be:	91 05       	cpc	r25, r1
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <socket_cb+0x28>
     2c2:	5c c0       	rjmp	.+184    	; 0x37c <socket_cb+0xe0>
     2c4:	85 30       	cpi	r24, 0x05	; 5
     2c6:	91 05       	cpc	r25, r1
     2c8:	34 f4       	brge	.+12     	; 0x2d6 <socket_cb+0x3a>
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	91 05       	cpc	r25, r1
     2ce:	59 f0       	breq	.+22     	; 0x2e6 <socket_cb+0x4a>
     2d0:	02 97       	sbiw	r24, 0x02	; 2
     2d2:	69 f1       	breq	.+90     	; 0x32e <socket_cb+0x92>
	}

	break;

	default:
		break;
     2d4:	e7 c0       	rjmp	.+462    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	switch (u8Msg) {
     2d6:	86 30       	cpi	r24, 0x06	; 6
     2d8:	91 05       	cpc	r25, r1
     2da:	09 f4       	brne	.+2      	; 0x2de <socket_cb+0x42>
     2dc:	96 c0       	rjmp	.+300    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     2de:	07 97       	sbiw	r24, 0x07	; 7
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <socket_cb+0x48>
     2e2:	7e c0       	rjmp	.+252    	; 0x3e0 <socket_cb+0x144>
	}

	break;

	default:
		break;
     2e4:	df c0       	rjmp	.+446    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	switch (u8Msg) {
	/* Socket bind */
	case SOCKET_MSG_BIND: {
		tstrSocketBindMsg *pstrBind = (tstrSocketBindMsg *)pvMsg;
     2e6:	8c 85       	ldd	r24, Y+12	; 0x0c
     2e8:	9d 85       	ldd	r25, Y+13	; 0x0d
     2ea:	89 83       	std	Y+1, r24	; 0x01
     2ec:	9a 83       	std	Y+2, r25	; 0x02
		if (pstrBind && pstrBind->status == 0) {
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	9a 81       	ldd	r25, Y+2	; 0x02
     2f2:	89 2b       	or	r24, r25
     2f4:	81 f0       	breq	.+32     	; 0x316 <socket_cb+0x7a>
     2f6:	89 81       	ldd	r24, Y+1	; 0x01
     2f8:	9a 81       	ldd	r25, Y+2	; 0x02
     2fa:	fc 01       	movw	r30, r24
     2fc:	80 81       	ld	r24, Z
     2fe:	88 23       	and	r24, r24
     300:	51 f4       	brne	.+20     	; 0x316 <socket_cb+0x7a>
			printf("socket_cb: bind success!\r\n");
     302:	86 e5       	ldi	r24, 0x56	; 86
     304:	95 eb       	ldi	r25, 0xB5	; 181
     306:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <puts>
			listen(tcp_server_socket, 0);
     30a:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	0e 94 63 32 	call	0x64c6	; 0x64c6 <listen>
		} else {
			printf("socket_cb: bind error!\r\n");
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	} break;
     314:	c7 c0       	rjmp	.+398    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		tstrSocketBindMsg *pstrBind = (tstrSocketBindMsg *)pvMsg;
		if (pstrBind && pstrBind->status == 0) {
			printf("socket_cb: bind success!\r\n");
			listen(tcp_server_socket, 0);
		} else {
			printf("socket_cb: bind error!\r\n");
     316:	80 e7       	ldi	r24, 0x70	; 112
     318:	95 eb       	ldi	r25, 0xB5	; 181
     31a:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <puts>
			close(tcp_server_socket);
     31e:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     322:	0e 94 84 34 	call	0x6908	; 0x6908 <close>
			tcp_server_socket = -1;
     326:	8f ef       	ldi	r24, 0xFF	; 255
     328:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <tcp_server_socket>
		}
	} break;
     32c:	bb c0       	rjmp	.+374    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>

	/* Socket listen */
	case SOCKET_MSG_LISTEN: {
		tstrSocketListenMsg *pstrListen = (tstrSocketListenMsg *)pvMsg;
     32e:	8c 85       	ldd	r24, Y+12	; 0x0c
     330:	9d 85       	ldd	r25, Y+13	; 0x0d
     332:	8b 83       	std	Y+3, r24	; 0x03
     334:	9c 83       	std	Y+4, r25	; 0x04
		if (pstrListen && pstrListen->status == 0) {
     336:	8b 81       	ldd	r24, Y+3	; 0x03
     338:	9c 81       	ldd	r25, Y+4	; 0x04
     33a:	89 2b       	or	r24, r25
     33c:	99 f0       	breq	.+38     	; 0x364 <socket_cb+0xc8>
     33e:	8b 81       	ldd	r24, Y+3	; 0x03
     340:	9c 81       	ldd	r25, Y+4	; 0x04
     342:	fc 01       	movw	r30, r24
     344:	80 81       	ld	r24, Z
     346:	88 23       	and	r24, r24
     348:	69 f4       	brne	.+26     	; 0x364 <socket_cb+0xc8>
			printf("socket_cb: listen success!\r\n");
     34a:	88 e8       	ldi	r24, 0x88	; 136
     34c:	95 eb       	ldi	r25, 0xB5	; 181
     34e:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <puts>
			accept(tcp_server_socket, NULL, NULL);
     352:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     356:	40 e0       	ldi	r20, 0x00	; 0
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	0e 94 be 32 	call	0x657c	; 0x657c <accept>
		} else {
			printf("socket_cb: listen error!\r\n");
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	} break;
     362:	a0 c0       	rjmp	.+320    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		tstrSocketListenMsg *pstrListen = (tstrSocketListenMsg *)pvMsg;
		if (pstrListen && pstrListen->status == 0) {
			printf("socket_cb: listen success!\r\n");
			accept(tcp_server_socket, NULL, NULL);
		} else {
			printf("socket_cb: listen error!\r\n");
     364:	84 ea       	ldi	r24, 0xA4	; 164
     366:	95 eb       	ldi	r25, 0xB5	; 181
     368:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <puts>
			close(tcp_server_socket);
     36c:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     370:	0e 94 84 34 	call	0x6908	; 0x6908 <close>
			tcp_server_socket = -1;
     374:	8f ef       	ldi	r24, 0xFF	; 255
     376:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <tcp_server_socket>
		}
	} break;
     37a:	94 c0       	rjmp	.+296    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>

	/* Connect accept */
	case SOCKET_MSG_ACCEPT: {
		tstrSocketAcceptMsg *pstrAccept = (tstrSocketAcceptMsg *)pvMsg;
     37c:	8c 85       	ldd	r24, Y+12	; 0x0c
     37e:	9d 85       	ldd	r25, Y+13	; 0x0d
     380:	8d 83       	std	Y+5, r24	; 0x05
     382:	9e 83       	std	Y+6, r25	; 0x06
		if (pstrAccept) {
     384:	8d 81       	ldd	r24, Y+5	; 0x05
     386:	9e 81       	ldd	r25, Y+6	; 0x06
     388:	89 2b       	or	r24, r25
     38a:	f1 f0       	breq	.+60     	; 0x3c8 <socket_cb+0x12c>
			printf("socket_cb: accept success!\r\n");
     38c:	8e eb       	ldi	r24, 0xBE	; 190
     38e:	95 eb       	ldi	r25, 0xB5	; 181
     390:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <puts>
			accept(tcp_server_socket, NULL, NULL);
     394:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     398:	40 e0       	ldi	r20, 0x00	; 0
     39a:	50 e0       	ldi	r21, 0x00	; 0
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	0e 94 be 32 	call	0x657c	; 0x657c <accept>
			tcp_client_socket = pstrAccept->sock;
     3a4:	8d 81       	ldd	r24, Y+5	; 0x05
     3a6:	9e 81       	ldd	r25, Y+6	; 0x06
     3a8:	fc 01       	movw	r30, r24
     3aa:	80 81       	ld	r24, Z
     3ac:	80 93 0f 28 	sts	0x280F, r24	; 0x80280f <tcp_client_socket>
			recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
     3b0:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_client_socket>
     3b4:	00 e0       	ldi	r16, 0x00	; 0
     3b6:	10 e0       	ldi	r17, 0x00	; 0
     3b8:	98 01       	movw	r18, r16
     3ba:	44 eb       	ldi	r20, 0xB4	; 180
     3bc:	55 e0       	ldi	r21, 0x05	; 5
     3be:	65 e4       	ldi	r22, 0x45	; 69
     3c0:	78 e2       	ldi	r23, 0x28	; 40
     3c2:	0e 94 9a 33 	call	0x6734	; 0x6734 <recv>
		} else {
			printf("socket_cb: accept error!\r\n");
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	} break;
     3c6:	6e c0       	rjmp	.+220    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
			printf("socket_cb: accept success!\r\n");
			accept(tcp_server_socket, NULL, NULL);
			tcp_client_socket = pstrAccept->sock;
			recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
		} else {
			printf("socket_cb: accept error!\r\n");
     3c8:	8a ed       	ldi	r24, 0xDA	; 218
     3ca:	95 eb       	ldi	r25, 0xB5	; 181
     3cc:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <puts>
			close(tcp_server_socket);
     3d0:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     3d4:	0e 94 84 34 	call	0x6908	; 0x6908 <close>
			tcp_server_socket = -1;
     3d8:	8f ef       	ldi	r24, 0xFF	; 255
     3da:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <tcp_server_socket>
		}
	} break;
     3de:	62 c0       	rjmp	.+196    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>

	/* Message send */
	case SOCKET_MSG_SEND: {
		printf("socket_cb: send success!\r\n");
     3e0:	84 ef       	ldi	r24, 0xF4	; 244
     3e2:	95 eb       	ldi	r25, 0xB5	; 181
     3e4:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <puts>
		printf("TCP Server Test Complete!\r\n");
     3e8:	8e e0       	ldi	r24, 0x0E	; 14
     3ea:	96 eb       	ldi	r25, 0xB6	; 182
     3ec:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <puts>
		printf("close socket\n");
     3f0:	89 e2       	ldi	r24, 0x29	; 41
     3f2:	96 eb       	ldi	r25, 0xB6	; 182
     3f4:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <puts>
		close(tcp_client_socket);
     3f8:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_client_socket>
     3fc:	0e 94 84 34 	call	0x6908	; 0x6908 <close>
		close(tcp_server_socket);
     400:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     404:	0e 94 84 34 	call	0x6908	; 0x6908 <close>
	} break;
     408:	4d c0       	rjmp	.+154    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>

	/* Message receive */
	case SOCKET_MSG_RECV: {
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
     40a:	8c 85       	ldd	r24, Y+12	; 0x0c
     40c:	9d 85       	ldd	r25, Y+13	; 0x0d
     40e:	8f 83       	std	Y+7, r24	; 0x07
     410:	98 87       	std	Y+8, r25	; 0x08
		if (pstrRecv && pstrRecv->s16BufferSize > 0) {
     412:	8f 81       	ldd	r24, Y+7	; 0x07
     414:	98 85       	ldd	r25, Y+8	; 0x08
     416:	89 2b       	or	r24, r25
     418:	c9 f1       	breq	.+114    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     41a:	8f 81       	ldd	r24, Y+7	; 0x07
     41c:	98 85       	ldd	r25, Y+8	; 0x08
     41e:	fc 01       	movw	r30, r24
     420:	82 81       	ldd	r24, Z+2	; 0x02
     422:	93 81       	ldd	r25, Z+3	; 0x03
     424:	18 16       	cp	r1, r24
     426:	19 06       	cpc	r1, r25
     428:	8c f5       	brge	.+98     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			printf("socket_cb: recv success!\r\n");
     42a:	86 e3       	ldi	r24, 0x36	; 54
     42c:	96 eb       	ldi	r25, 0xB6	; 182
     42e:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <puts>
			char c;
			c=*(pstrRecv->pu8Buffer);
     432:	8f 81       	ldd	r24, Y+7	; 0x07
     434:	98 85       	ldd	r25, Y+8	; 0x08
     436:	fc 01       	movw	r30, r24
     438:	80 81       	ld	r24, Z
     43a:	91 81       	ldd	r25, Z+1	; 0x01
     43c:	fc 01       	movw	r30, r24
     43e:	80 81       	ld	r24, Z
     440:	89 87       	std	Y+9, r24	; 0x09
			printf("%c \r\n",*(pstrRecv->pu8Buffer));
     442:	8f 81       	ldd	r24, Y+7	; 0x07
     444:	98 85       	ldd	r25, Y+8	; 0x08
     446:	fc 01       	movw	r30, r24
     448:	80 81       	ld	r24, Z
     44a:	91 81       	ldd	r25, Z+1	; 0x01
     44c:	fc 01       	movw	r30, r24
     44e:	80 81       	ld	r24, Z
     450:	88 2f       	mov	r24, r24
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	29 2f       	mov	r18, r25
     456:	2f 93       	push	r18
     458:	8f 93       	push	r24
     45a:	80 e5       	ldi	r24, 0x50	; 80
     45c:	96 eb       	ldi	r25, 0xB6	; 182
     45e:	89 2f       	mov	r24, r25
     460:	8f 93       	push	r24
     462:	80 e5       	ldi	r24, 0x50	; 80
     464:	96 eb       	ldi	r25, 0xB6	; 182
     466:	8f 93       	push	r24
     468:	0e 94 a1 37 	call	0x6f42	; 0x6f42 <printf>
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
			send(tcp_client_socket, &msg_wifi_product, sizeof(msg_wifi_product), 0);
     474:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_client_socket>
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	48 e2       	ldi	r20, 0x28	; 40
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	60 e1       	ldi	r22, 0x10	; 16
     482:	78 e2       	ldi	r23, 0x28	; 40
     484:	0e 94 e7 32 	call	0x65ce	; 0x65ce <send>
	} break;

	/* Message receive */
	case SOCKET_MSG_RECV: {
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
		if (pstrRecv && pstrRecv->s16BufferSize > 0) {
     488:	00 00       	nop
			close(tcp_server_socket);
			tcp_server_socket = -1;
		}
	}

	break;
     48a:	0b c0       	rjmp	.+22     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
			char c;
			c=*(pstrRecv->pu8Buffer);
			printf("%c \r\n",*(pstrRecv->pu8Buffer));
			send(tcp_client_socket, &msg_wifi_product, sizeof(msg_wifi_product), 0);
		} else {
			printf("socket_cb: recv error!\r\n");
     48c:	86 e5       	ldi	r24, 0x56	; 86
     48e:	96 eb       	ldi	r25, 0xB6	; 182
     490:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <puts>
			close(tcp_server_socket);
     494:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     498:	0e 94 84 34 	call	0x6908	; 0x6908 <close>
			tcp_server_socket = -1;
     49c:	8f ef       	ldi	r24, 0xFF	; 255
     49e:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <tcp_server_socket>
		}
	}

	break;
     4a2:	00 00       	nop

	default:
		break;
	}
}
     4a4:	00 00       	nop
     4a6:	2d 96       	adiw	r28, 0x0d	; 13
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	08 95       	ret

000004b6 <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
     4be:	27 97       	sbiw	r28, 0x07	; 7
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	8d 83       	std	Y+5, r24	; 0x05
     4c6:	6e 83       	std	Y+6, r22	; 0x06
     4c8:	7f 83       	std	Y+7, r23	; 0x07
	switch (u8MsgType) {
     4ca:	8d 81       	ldd	r24, Y+5	; 0x05
     4cc:	88 2f       	mov	r24, r24
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	8c 32       	cpi	r24, 0x2C	; 44
     4d2:	91 05       	cpc	r25, r1
     4d4:	19 f0       	breq	.+6      	; 0x4dc <wifi_cb+0x26>
     4d6:	c2 97       	sbiw	r24, 0x32	; 50
     4d8:	e9 f0       	breq	.+58     	; 0x514 <wifi_cb+0x5e>
		
		break;
	}

	default: {
		break;
     4da:	5e c0       	rjmp	.+188    	; 0x598 <wifi_cb+0xe2>
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED: {
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
     4dc:	8e 81       	ldd	r24, Y+6	; 0x06
     4de:	9f 81       	ldd	r25, Y+7	; 0x07
     4e0:	89 83       	std	Y+1, r24	; 0x01
     4e2:	9a 83       	std	Y+2, r25	; 0x02
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	9a 81       	ldd	r25, Y+2	; 0x02
     4e8:	fc 01       	movw	r30, r24
     4ea:	80 81       	ld	r24, Z
     4ec:	81 30       	cpi	r24, 0x01	; 1
     4ee:	21 f4       	brne	.+8      	; 0x4f8 <wifi_cb+0x42>
			wifi_connected = 1;
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	80 93 44 28 	sts	0x2844, r24	; 0x802844 <__data_end>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
			wifi_connected = 0;
			printf("Station disconnected\r\n");
		}

		break;
     4f6:	4f c0       	rjmp	.+158    	; 0x596 <wifi_cb+0xe0>
	switch (u8MsgType) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED: {
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
			wifi_connected = 1;
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	9a 81       	ldd	r25, Y+2	; 0x02
     4fc:	fc 01       	movw	r30, r24
     4fe:	80 81       	ld	r24, Z
     500:	88 23       	and	r24, r24
     502:	09 f0       	breq	.+2      	; 0x506 <wifi_cb+0x50>
     504:	48 c0       	rjmp	.+144    	; 0x596 <wifi_cb+0xe0>
			wifi_connected = 0;
     506:	10 92 44 28 	sts	0x2844, r1	; 0x802844 <__data_end>
			printf("Station disconnected\r\n");
     50a:	8e e6       	ldi	r24, 0x6E	; 110
     50c:	96 eb       	ldi	r25, 0xB6	; 182
     50e:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <puts>
		}

		break;
     512:	41 c0       	rjmp	.+130    	; 0x596 <wifi_cb+0xe0>
	}

	case M2M_WIFI_REQ_DHCP_CONF: {
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
     514:	8e 81       	ldd	r24, Y+6	; 0x06
     516:	9f 81       	ldd	r25, Y+7	; 0x07
     518:	8b 83       	std	Y+3, r24	; 0x03
     51a:	9c 83       	std	Y+4, r25	; 0x04
		wifi_connected = 1; 
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	80 93 44 28 	sts	0x2844, r24	; 0x802844 <__data_end>
		printf("Station connected\r\n");
     522:	84 e8       	ldi	r24, 0x84	; 132
     524:	96 eb       	ldi	r25, 0xB6	; 182
     526:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <puts>
		printf("Station IP is %u.%u.%u.%u\r\n",pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]); //pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
     52a:	8b 81       	ldd	r24, Y+3	; 0x03
     52c:	9c 81       	ldd	r25, Y+4	; 0x04
     52e:	03 96       	adiw	r24, 0x03	; 3
     530:	fc 01       	movw	r30, r24
     532:	80 81       	ld	r24, Z
     534:	68 2f       	mov	r22, r24
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	9c 81       	ldd	r25, Y+4	; 0x04
     53c:	02 96       	adiw	r24, 0x02	; 2
     53e:	fc 01       	movw	r30, r24
     540:	80 81       	ld	r24, Z
     542:	48 2f       	mov	r20, r24
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	8b 81       	ldd	r24, Y+3	; 0x03
     548:	9c 81       	ldd	r25, Y+4	; 0x04
     54a:	01 96       	adiw	r24, 0x01	; 1
     54c:	fc 01       	movw	r30, r24
     54e:	80 81       	ld	r24, Z
     550:	28 2f       	mov	r18, r24
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	8b 81       	ldd	r24, Y+3	; 0x03
     556:	9c 81       	ldd	r25, Y+4	; 0x04
     558:	fc 01       	movw	r30, r24
     55a:	80 81       	ld	r24, Z
     55c:	88 2f       	mov	r24, r24
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	e7 2f       	mov	r30, r23
     562:	ef 93       	push	r30
     564:	6f 93       	push	r22
     566:	65 2f       	mov	r22, r21
     568:	6f 93       	push	r22
     56a:	4f 93       	push	r20
     56c:	43 2f       	mov	r20, r19
     56e:	4f 93       	push	r20
     570:	2f 93       	push	r18
     572:	29 2f       	mov	r18, r25
     574:	2f 93       	push	r18
     576:	8f 93       	push	r24
     578:	87 e9       	ldi	r24, 0x97	; 151
     57a:	96 eb       	ldi	r25, 0xB6	; 182
     57c:	89 2f       	mov	r24, r25
     57e:	8f 93       	push	r24
     580:	87 e9       	ldi	r24, 0x97	; 151
     582:	96 eb       	ldi	r25, 0xB6	; 182
     584:	8f 93       	push	r24
     586:	0e 94 a1 37 	call	0x6f42	; 0x6f42 <printf>
     58a:	8d b7       	in	r24, 0x3d	; 61
     58c:	9e b7       	in	r25, 0x3e	; 62
     58e:	0a 96       	adiw	r24, 0x0a	; 10
     590:	cd bf       	out	0x3d, r28	; 61
     592:	de bf       	out	0x3e, r29	; 62
		
		break;
     594:	01 c0       	rjmp	.+2      	; 0x598 <wifi_cb+0xe2>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
			wifi_connected = 0;
			printf("Station disconnected\r\n");
		}

		break;
     596:	00 00       	nop

	default: {
		break;
	}
	}
}
     598:	00 00       	nop
     59a:	27 96       	adiw	r28, 0x07	; 7
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <main>:





int main(void){
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	c7 5a       	subi	r28, 0xA7	; 167
     5b4:	d1 09       	sbc	r29, r1
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	de bf       	out	0x3e, r29	; 62
	
	tstrWifiInitParam param;
	tstrM2MAPConfig   strM2MAPConfig;
	int8_t            ret = 0;
     5ba:	19 82       	std	Y+1, r1	; 0x01
	struct sockaddr_in addr;
	
	// Redirect stream to Tera Term
	stdout = &mystdout;
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	98 e2       	ldi	r25, 0x28	; 40
     5c0:	80 93 b6 2e 	sts	0x2EB6, r24	; 0x802eb6 <__iob+0x2>
     5c4:	90 93 b7 2e 	sts	0x2EB7, r25	; 0x802eb7 <__iob+0x3>
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     5c8:	0e 94 05 01 	call	0x20a	; 0x20a <atmel_start_init>

	sei();
     5cc:	78 94       	sei

	/* Initialize BSP */
	nm_bsp_init();
     5ce:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <nm_bsp_init>


	/* Initialize socket address structure */
	addr.sin_family = AF_INET;
     5d2:	ce 01       	movw	r24, r28
     5d4:	88 56       	subi	r24, 0x68	; 104
     5d6:	9f 4f       	sbci	r25, 0xFF	; 255
     5d8:	22 e0       	ldi	r18, 0x02	; 2
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
     5e0:	31 83       	std	Z+1, r19	; 0x01
	addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
     5e2:	ce 01       	movw	r24, r28
     5e4:	88 56       	subi	r24, 0x68	; 104
     5e6:	9f 4f       	sbci	r25, 0xFF	; 255
     5e8:	2a e1       	ldi	r18, 0x1A	; 26
     5ea:	3a e0       	ldi	r19, 0x0A	; 10
     5ec:	fc 01       	movw	r30, r24
     5ee:	22 83       	std	Z+2, r18	; 0x02
     5f0:	33 83       	std	Z+3, r19	; 0x03
	addr.sin_addr.s_addr = _htonl(MAIN_WIFI_M2M_SERVER_IP);
     5f2:	9e 01       	movw	r18, r28
     5f4:	28 56       	subi	r18, 0x68	; 104
     5f6:	3f 4f       	sbci	r19, 0xFF	; 255
     5f8:	8f ef       	ldi	r24, 0xFF	; 255
     5fa:	9f ef       	ldi	r25, 0xFF	; 255
     5fc:	dc 01       	movw	r26, r24
     5fe:	f9 01       	movw	r30, r18
     600:	84 83       	std	Z+4, r24	; 0x04
     602:	95 83       	std	Z+5, r25	; 0x05
     604:	a6 83       	std	Z+6, r26	; 0x06
     606:	b7 83       	std	Z+7, r27	; 0x07




	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
     608:	ce 01       	movw	r24, r28
     60a:	02 96       	adiw	r24, 0x02	; 2
     60c:	4e e0       	ldi	r20, 0x0E	; 14
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <memset>

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
     618:	8b e5       	ldi	r24, 0x5B	; 91
     61a:	92 e0       	ldi	r25, 0x02	; 2
     61c:	8a 83       	std	Y+2, r24	; 0x02
     61e:	9b 83       	std	Y+3, r25	; 0x03
	wifi_init(&param);
     620:	ce 01       	movw	r24, r28
     622:	02 96       	adiw	r24, 0x02	; 2
     624:	0e 94 0f 01 	call	0x21e	; 0x21e <wifi_init>



	/* Initialize socket module */
	socketInit();
     628:	0e 94 bb 30 	call	0x6176	; 0x6176 <socketInit>
	registerSocketCallback(socket_cb, NULL);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	8e e4       	ldi	r24, 0x4E	; 78
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <registerSocketCallback>


	/* Initialize AP mode parameters structure with SSID, channel and OPEN security type. */
	memset(&strM2MAPConfig, 0x00, sizeof(tstrM2MAPConfig));
     638:	ce 01       	movw	r24, r28
     63a:	40 96       	adiw	r24, 0x10	; 16
     63c:	48 e8       	ldi	r20, 0x88	; 136
     63e:	50 e0       	ldi	r21, 0x00	; 0
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <memset>
	strcpy((char *)&strM2MAPConfig.au8SSID, MAIN_WLAN_SSID);
     648:	ce 01       	movw	r24, r28
     64a:	40 96       	adiw	r24, 0x10	; 16
     64c:	29 e0       	ldi	r18, 0x09	; 9
     64e:	e3 eb       	ldi	r30, 0xB3	; 179
     650:	f6 eb       	ldi	r31, 0xB6	; 182
     652:	dc 01       	movw	r26, r24
     654:	01 90       	ld	r0, Z+
     656:	0d 92       	st	X+, r0
     658:	2a 95       	dec	r18
     65a:	e1 f7       	brne	.-8      	; 0x654 <main+0xae>
	strM2MAPConfig.u8ListenChannel = MAIN_WLAN_CHANNEL;
     65c:	86 e0       	ldi	r24, 0x06	; 6
     65e:	89 ab       	std	Y+49, r24	; 0x31
	strM2MAPConfig.u8SecType       = MAIN_WLAN_AUTH;
     660:	ce 01       	movw	r24, r28
     662:	81 5b       	subi	r24, 0xB1	; 177
     664:	9f 4f       	sbci	r25, 0xFF	; 255
     666:	22 e0       	ldi	r18, 0x02	; 2
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18

	strM2MAPConfig.au8DHCPServerIP[0] = 192;
     66c:	ce 01       	movw	r24, r28
     66e:	8f 5a       	subi	r24, 0xAF	; 175
     670:	9f 4f       	sbci	r25, 0xFF	; 255
     672:	20 ec       	ldi	r18, 0xC0	; 192
     674:	fc 01       	movw	r30, r24
     676:	20 83       	st	Z, r18
	strM2MAPConfig.au8DHCPServerIP[1] = 168;
     678:	ce 01       	movw	r24, r28
     67a:	8e 5a       	subi	r24, 0xAE	; 174
     67c:	9f 4f       	sbci	r25, 0xFF	; 255
     67e:	28 ea       	ldi	r18, 0xA8	; 168
     680:	fc 01       	movw	r30, r24
     682:	20 83       	st	Z, r18
	strM2MAPConfig.au8DHCPServerIP[2] = 0;
     684:	ce 01       	movw	r24, r28
     686:	8d 5a       	subi	r24, 0xAD	; 173
     688:	9f 4f       	sbci	r25, 0xFF	; 255
     68a:	fc 01       	movw	r30, r24
     68c:	10 82       	st	Z, r1
	strM2MAPConfig.au8DHCPServerIP[3] = 1;
     68e:	ce 01       	movw	r24, r28
     690:	8c 5a       	subi	r24, 0xAC	; 172
     692:	9f 4f       	sbci	r25, 0xFF	; 255
     694:	21 e0       	ldi	r18, 0x01	; 1
     696:	fc 01       	movw	r30, r24
     698:	20 83       	st	Z, r18

// 	printf("AP mode started. You can connect to %s.\r\n", (char *)MAIN_WLAN_SSID);


/* Connect to router. */
	m2m_wifi_connect(
     69a:	0f ef       	ldi	r16, 0xFF	; 255
     69c:	10 e0       	ldi	r17, 0x00	; 0
     69e:	2c eb       	ldi	r18, 0xBC	; 188
     6a0:	36 eb       	ldi	r19, 0xB6	; 182
     6a2:	42 e0       	ldi	r20, 0x02	; 2
     6a4:	69 e0       	ldi	r22, 0x09	; 9
     6a6:	83 eb       	ldi	r24, 0xB3	; 179
     6a8:	96 eb       	ldi	r25, 0xB6	; 182
     6aa:	0e 94 98 19 	call	0x3330	; 0x3330 <m2m_wifi_connect>
	(char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);

	PORTB.DIR |= PIN5_bm;
     6ae:	80 e2       	ldi	r24, 0x20	; 32
     6b0:	94 e0       	ldi	r25, 0x04	; 4
     6b2:	20 e2       	ldi	r18, 0x20	; 32
     6b4:	34 e0       	ldi	r19, 0x04	; 4
     6b6:	f9 01       	movw	r30, r18
     6b8:	20 81       	ld	r18, Z
     6ba:	20 62       	ori	r18, 0x20	; 32
     6bc:	fc 01       	movw	r30, r24
     6be:	20 83       	st	Z, r18
	
	
	
	
	/* Handle pending events from network controller. */
	while (m2m_wifi_handle_events(NULL) == M2M_SUCCESS) {
     6c0:	23 c0       	rjmp	.+70     	; 0x708 <main+0x162>
		
		if (wifi_connected == M2M_WIFI_CONNECTED) {
     6c2:	80 91 44 28 	lds	r24, 0x2844	; 0x802844 <__data_end>
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	f9 f4       	brne	.+62     	; 0x708 <main+0x162>
			
			if (tcp_server_socket < 0) {
     6ca:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     6ce:	88 23       	and	r24, r24
     6d0:	dc f4       	brge	.+54     	; 0x708 <main+0x162>
				/* Open TCP server socket */
				if ((tcp_server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	61 e0       	ldi	r22, 0x01	; 1
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <socket>
     6de:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <tcp_server_socket>
     6e2:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     6e6:	88 23       	and	r24, r24
     6e8:	2c f4       	brge	.+10     	; 0x6f4 <main+0x14e>
					printf("main: failed to create TCP server socket error!\r\n");
     6ea:	86 ec       	ldi	r24, 0xC6	; 198
     6ec:	96 eb       	ldi	r25, 0xB6	; 182
     6ee:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <puts>
					
					continue;
     6f2:	0a c0       	rjmp	.+20     	; 0x708 <main+0x162>
				}

				/* Bind service*/
				bind(tcp_server_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
     6f4:	20 91 0e 28 	lds	r18, 0x280E	; 0x80280e <tcp_server_socket>
     6f8:	ce 01       	movw	r24, r28
     6fa:	88 56       	subi	r24, 0x68	; 104
     6fc:	9f 4f       	sbci	r25, 0xFF	; 255
     6fe:	40 e1       	ldi	r20, 0x10	; 16
     700:	bc 01       	movw	r22, r24
     702:	82 2f       	mov	r24, r18
     704:	0e 94 db 31 	call	0x63b6	; 0x63b6 <bind>
	
	
	
	
	/* Handle pending events from network controller. */
	while (m2m_wifi_handle_events(NULL) == M2M_SUCCESS) {
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 8a 19 	call	0x3314	; 0x3314 <m2m_wifi_handle_events>
     710:	88 23       	and	r24, r24
     712:	b9 f2       	breq	.-82     	; 0x6c2 <main+0x11c>



	}

}
     714:	d5 cf       	rjmp	.-86     	; 0x6c0 <main+0x11a>

00000716 <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
     71e:	80 e0       	ldi	r24, 0x00	; 0
}
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	00 d0       	rcall	.+0      	; 0x72c <ccp_write_io+0x6>
     72c:	1f 92       	push	r1
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	89 83       	std	Y+1, r24	; 0x01
     734:	9a 83       	std	Y+2, r25	; 0x02
     736:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	9a 81       	ldd	r25, Y+2	; 0x02
     73c:	4b 81       	ldd	r20, Y+3	; 0x03
     73e:	68 ed       	ldi	r22, 0xD8	; 216
     740:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <protected_write_io>
}
     744:	00 00       	nop
     746:	23 96       	adiw	r28, 0x03	; 3
     748:	cd bf       	out	0x3d, r28	; 61
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
	//		 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */
	//		 | 0 << CLKCTRL_SEL_bp /* Select: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.OSC20MCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLB),
     75a:	61 e0       	ldi	r22, 0x01	; 1
     75c:	81 e6       	ldi	r24, 0x61	; 97
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 93 03 	call	0x726	; 0x726 <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
     764:	80 e0       	ldi	r24, 0x00	; 0
}
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
     774:	80 e0       	ldi	r24, 0x00	; 0
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <PORTA_set_pin_pull_mode>:
	PD6_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD6_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
}
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	00 d0       	rcall	.+0      	; 0x782 <PORTA_set_pin_pull_mode+0x6>
     782:	00 d0       	rcall	.+0      	; 0x784 <PORTA_set_pin_pull_mode+0x8>
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	8b 83       	std	Y+3, r24	; 0x03
     78a:	6c 83       	std	Y+4, r22	; 0x04
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	88 2f       	mov	r24, r24
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	80 5f       	subi	r24, 0xF0	; 240
     794:	9b 4f       	sbci	r25, 0xFB	; 251
     796:	89 83       	std	Y+1, r24	; 0x01
     798:	9a 83       	std	Y+2, r25	; 0x02
     79a:	8c 81       	ldd	r24, Y+4	; 0x04
     79c:	81 30       	cpi	r24, 0x01	; 1
     79e:	59 f4       	brne	.+22     	; 0x7b6 <PORTA_set_pin_pull_mode+0x3a>
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	9a 81       	ldd	r25, Y+2	; 0x02
     7a4:	fc 01       	movw	r30, r24
     7a6:	80 81       	ld	r24, Z
     7a8:	28 2f       	mov	r18, r24
     7aa:	28 60       	ori	r18, 0x08	; 8
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	9a 81       	ldd	r25, Y+2	; 0x02
     7b0:	fc 01       	movw	r30, r24
     7b2:	20 83       	st	Z, r18
     7b4:	0d c0       	rjmp	.+26     	; 0x7d0 <PORTA_set_pin_pull_mode+0x54>
     7b6:	8c 81       	ldd	r24, Y+4	; 0x04
     7b8:	88 23       	and	r24, r24
     7ba:	51 f4       	brne	.+20     	; 0x7d0 <PORTA_set_pin_pull_mode+0x54>
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	9a 81       	ldd	r25, Y+2	; 0x02
     7c0:	fc 01       	movw	r30, r24
     7c2:	80 81       	ld	r24, Z
     7c4:	28 2f       	mov	r18, r24
     7c6:	27 7f       	andi	r18, 0xF7	; 247
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	9a 81       	ldd	r25, Y+2	; 0x02
     7cc:	fc 01       	movw	r30, r24
     7ce:	20 83       	st	Z, r18
     7d0:	00 00       	nop
     7d2:	24 96       	adiw	r28, 0x04	; 4
     7d4:	cd bf       	out	0x3d, r28	; 61
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <PORTA_set_pin_dir>:
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <PORTA_set_pin_dir+0x6>
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	89 83       	std	Y+1, r24	; 0x01
     7ea:	6a 83       	std	Y+2, r22	; 0x02
     7ec:	8a 81       	ldd	r24, Y+2	; 0x02
     7ee:	88 2f       	mov	r24, r24
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	91 05       	cpc	r25, r1
     7f6:	e1 f0       	breq	.+56     	; 0x830 <PORTA_set_pin_dir+0x52>
     7f8:	82 30       	cpi	r24, 0x02	; 2
     7fa:	91 05       	cpc	r25, r1
     7fc:	71 f1       	breq	.+92     	; 0x85a <PORTA_set_pin_dir+0x7c>
     7fe:	89 2b       	or	r24, r25
     800:	09 f0       	breq	.+2      	; 0x804 <PORTA_set_pin_dir+0x26>
     802:	3b c0       	rjmp	.+118    	; 0x87a <PORTA_set_pin_dir+0x9c>
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	fc 01       	movw	r30, r24
     80e:	80 81       	ld	r24, Z
     810:	68 2f       	mov	r22, r24
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	48 2f       	mov	r20, r24
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	02 c0       	rjmp	.+4      	; 0x822 <PORTA_set_pin_dir+0x44>
     81e:	88 0f       	add	r24, r24
     820:	99 1f       	adc	r25, r25
     822:	4a 95       	dec	r20
     824:	e2 f7       	brpl	.-8      	; 0x81e <PORTA_set_pin_dir+0x40>
     826:	80 95       	com	r24
     828:	86 23       	and	r24, r22
     82a:	f9 01       	movw	r30, r18
     82c:	80 83       	st	Z, r24
     82e:	25 c0       	rjmp	.+74     	; 0x87a <PORTA_set_pin_dir+0x9c>
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	fc 01       	movw	r30, r24
     83a:	80 81       	ld	r24, Z
     83c:	68 2f       	mov	r22, r24
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	48 2f       	mov	r20, r24
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	02 c0       	rjmp	.+4      	; 0x84e <PORTA_set_pin_dir+0x70>
     84a:	88 0f       	add	r24, r24
     84c:	99 1f       	adc	r25, r25
     84e:	4a 95       	dec	r20
     850:	e2 f7       	brpl	.-8      	; 0x84a <PORTA_set_pin_dir+0x6c>
     852:	86 2b       	or	r24, r22
     854:	f9 01       	movw	r30, r18
     856:	80 83       	st	Z, r24
     858:	10 c0       	rjmp	.+32     	; 0x87a <PORTA_set_pin_dir+0x9c>
     85a:	89 81       	ldd	r24, Y+1	; 0x01
     85c:	88 2f       	mov	r24, r24
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	80 5f       	subi	r24, 0xF0	; 240
     862:	9b 4f       	sbci	r25, 0xFB	; 251
     864:	29 81       	ldd	r18, Y+1	; 0x01
     866:	22 2f       	mov	r18, r18
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	20 5f       	subi	r18, 0xF0	; 240
     86c:	3b 4f       	sbci	r19, 0xFB	; 251
     86e:	f9 01       	movw	r30, r18
     870:	20 81       	ld	r18, Z
     872:	28 60       	ori	r18, 0x08	; 8
     874:	fc 01       	movw	r30, r24
     876:	20 83       	st	Z, r18
     878:	00 00       	nop
     87a:	00 00       	nop
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <PORTA_set_pin_level>:
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	00 d0       	rcall	.+0      	; 0x88c <PORTA_set_pin_level+0x6>
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
     890:	89 83       	std	Y+1, r24	; 0x01
     892:	6a 83       	std	Y+2, r22	; 0x02
     894:	8a 81       	ldd	r24, Y+2	; 0x02
     896:	88 23       	and	r24, r24
     898:	a9 f0       	breq	.+42     	; 0x8c4 <PORTA_set_pin_level+0x3e>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	fc 01       	movw	r30, r24
     8a4:	81 81       	ldd	r24, Z+1	; 0x01
     8a6:	68 2f       	mov	r22, r24
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	48 2f       	mov	r20, r24
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <PORTA_set_pin_level+0x32>
     8b4:	88 0f       	add	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	4a 95       	dec	r20
     8ba:	e2 f7       	brpl	.-8      	; 0x8b4 <PORTA_set_pin_level+0x2e>
     8bc:	86 2b       	or	r24, r22
     8be:	f9 01       	movw	r30, r18
     8c0:	81 83       	std	Z+1, r24	; 0x01
     8c2:	15 c0       	rjmp	.+42     	; 0x8ee <PORTA_set_pin_level+0x68>
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	fc 01       	movw	r30, r24
     8ce:	81 81       	ldd	r24, Z+1	; 0x01
     8d0:	68 2f       	mov	r22, r24
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	48 2f       	mov	r20, r24
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <PORTA_set_pin_level+0x5c>
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	4a 95       	dec	r20
     8e4:	e2 f7       	brpl	.-8      	; 0x8de <PORTA_set_pin_level+0x58>
     8e6:	80 95       	com	r24
     8e8:	86 23       	and	r24, r22
     8ea:	f9 01       	movw	r30, r18
     8ec:	81 83       	std	Z+1, r24	; 0x01
     8ee:	00 00       	nop
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <PORTB_set_pin_pull_mode>:
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	00 d0       	rcall	.+0      	; 0x900 <PORTB_set_pin_pull_mode+0x6>
     900:	00 d0       	rcall	.+0      	; 0x902 <PORTB_set_pin_pull_mode+0x8>
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
     906:	8b 83       	std	Y+3, r24	; 0x03
     908:	6c 83       	std	Y+4, r22	; 0x04
     90a:	8b 81       	ldd	r24, Y+3	; 0x03
     90c:	88 2f       	mov	r24, r24
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	80 5d       	subi	r24, 0xD0	; 208
     912:	9b 4f       	sbci	r25, 0xFB	; 251
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	9a 83       	std	Y+2, r25	; 0x02
     918:	8c 81       	ldd	r24, Y+4	; 0x04
     91a:	81 30       	cpi	r24, 0x01	; 1
     91c:	59 f4       	brne	.+22     	; 0x934 <PORTB_set_pin_pull_mode+0x3a>
     91e:	89 81       	ldd	r24, Y+1	; 0x01
     920:	9a 81       	ldd	r25, Y+2	; 0x02
     922:	fc 01       	movw	r30, r24
     924:	80 81       	ld	r24, Z
     926:	28 2f       	mov	r18, r24
     928:	28 60       	ori	r18, 0x08	; 8
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	9a 81       	ldd	r25, Y+2	; 0x02
     92e:	fc 01       	movw	r30, r24
     930:	20 83       	st	Z, r18
     932:	0d c0       	rjmp	.+26     	; 0x94e <PORTB_set_pin_pull_mode+0x54>
     934:	8c 81       	ldd	r24, Y+4	; 0x04
     936:	88 23       	and	r24, r24
     938:	51 f4       	brne	.+20     	; 0x94e <PORTB_set_pin_pull_mode+0x54>
     93a:	89 81       	ldd	r24, Y+1	; 0x01
     93c:	9a 81       	ldd	r25, Y+2	; 0x02
     93e:	fc 01       	movw	r30, r24
     940:	80 81       	ld	r24, Z
     942:	28 2f       	mov	r18, r24
     944:	27 7f       	andi	r18, 0xF7	; 247
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	9a 81       	ldd	r25, Y+2	; 0x02
     94a:	fc 01       	movw	r30, r24
     94c:	20 83       	st	Z, r18
     94e:	00 00       	nop
     950:	24 96       	adiw	r28, 0x04	; 4
     952:	cd bf       	out	0x3d, r28	; 61
     954:	de bf       	out	0x3e, r29	; 62
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	08 95       	ret

0000095c <PORTB_set_pin_dir>:
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	00 d0       	rcall	.+0      	; 0x962 <PORTB_set_pin_dir+0x6>
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	89 83       	std	Y+1, r24	; 0x01
     968:	6a 83       	std	Y+2, r22	; 0x02
     96a:	8a 81       	ldd	r24, Y+2	; 0x02
     96c:	88 2f       	mov	r24, r24
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	81 30       	cpi	r24, 0x01	; 1
     972:	91 05       	cpc	r25, r1
     974:	e1 f0       	breq	.+56     	; 0x9ae <PORTB_set_pin_dir+0x52>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	91 05       	cpc	r25, r1
     97a:	71 f1       	breq	.+92     	; 0x9d8 <PORTB_set_pin_dir+0x7c>
     97c:	89 2b       	or	r24, r25
     97e:	09 f0       	breq	.+2      	; 0x982 <PORTB_set_pin_dir+0x26>
     980:	3b c0       	rjmp	.+118    	; 0x9f8 <PORTB_set_pin_dir+0x9c>
     982:	84 e0       	ldi	r24, 0x04	; 4
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	24 e0       	ldi	r18, 0x04	; 4
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	f9 01       	movw	r30, r18
     98c:	20 81       	ld	r18, Z
     98e:	62 2f       	mov	r22, r18
     990:	29 81       	ldd	r18, Y+1	; 0x01
     992:	42 2f       	mov	r20, r18
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	21 e0       	ldi	r18, 0x01	; 1
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <PORTB_set_pin_dir+0x44>
     99c:	22 0f       	add	r18, r18
     99e:	33 1f       	adc	r19, r19
     9a0:	4a 95       	dec	r20
     9a2:	e2 f7       	brpl	.-8      	; 0x99c <PORTB_set_pin_dir+0x40>
     9a4:	20 95       	com	r18
     9a6:	26 23       	and	r18, r22
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 83       	st	Z, r18
     9ac:	25 c0       	rjmp	.+74     	; 0x9f8 <PORTB_set_pin_dir+0x9c>
     9ae:	84 e0       	ldi	r24, 0x04	; 4
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	24 e0       	ldi	r18, 0x04	; 4
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	f9 01       	movw	r30, r18
     9b8:	20 81       	ld	r18, Z
     9ba:	62 2f       	mov	r22, r18
     9bc:	29 81       	ldd	r18, Y+1	; 0x01
     9be:	42 2f       	mov	r20, r18
     9c0:	50 e0       	ldi	r21, 0x00	; 0
     9c2:	21 e0       	ldi	r18, 0x01	; 1
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <PORTB_set_pin_dir+0x70>
     9c8:	22 0f       	add	r18, r18
     9ca:	33 1f       	adc	r19, r19
     9cc:	4a 95       	dec	r20
     9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <PORTB_set_pin_dir+0x6c>
     9d0:	26 2b       	or	r18, r22
     9d2:	fc 01       	movw	r30, r24
     9d4:	20 83       	st	Z, r18
     9d6:	10 c0       	rjmp	.+32     	; 0x9f8 <PORTB_set_pin_dir+0x9c>
     9d8:	89 81       	ldd	r24, Y+1	; 0x01
     9da:	88 2f       	mov	r24, r24
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	80 5d       	subi	r24, 0xD0	; 208
     9e0:	9b 4f       	sbci	r25, 0xFB	; 251
     9e2:	29 81       	ldd	r18, Y+1	; 0x01
     9e4:	22 2f       	mov	r18, r18
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	20 5d       	subi	r18, 0xD0	; 208
     9ea:	3b 4f       	sbci	r19, 0xFB	; 251
     9ec:	f9 01       	movw	r30, r18
     9ee:	20 81       	ld	r18, Z
     9f0:	28 60       	ori	r18, 0x08	; 8
     9f2:	fc 01       	movw	r30, r24
     9f4:	20 83       	st	Z, r18
     9f6:	00 00       	nop
     9f8:	00 00       	nop
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <PORTB_set_pin_level>:
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	00 d0       	rcall	.+0      	; 0xa0a <PORTB_set_pin_level+0x6>
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
     a0e:	89 83       	std	Y+1, r24	; 0x01
     a10:	6a 83       	std	Y+2, r22	; 0x02
     a12:	8a 81       	ldd	r24, Y+2	; 0x02
     a14:	88 23       	and	r24, r24
     a16:	a9 f0       	breq	.+42     	; 0xa42 <PORTB_set_pin_level+0x3e>
     a18:	84 e0       	ldi	r24, 0x04	; 4
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	24 e0       	ldi	r18, 0x04	; 4
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	f9 01       	movw	r30, r18
     a22:	21 81       	ldd	r18, Z+1	; 0x01
     a24:	62 2f       	mov	r22, r18
     a26:	29 81       	ldd	r18, Y+1	; 0x01
     a28:	42 2f       	mov	r20, r18
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	21 e0       	ldi	r18, 0x01	; 1
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <PORTB_set_pin_level+0x32>
     a32:	22 0f       	add	r18, r18
     a34:	33 1f       	adc	r19, r19
     a36:	4a 95       	dec	r20
     a38:	e2 f7       	brpl	.-8      	; 0xa32 <PORTB_set_pin_level+0x2e>
     a3a:	26 2b       	or	r18, r22
     a3c:	fc 01       	movw	r30, r24
     a3e:	21 83       	std	Z+1, r18	; 0x01
     a40:	15 c0       	rjmp	.+42     	; 0xa6c <PORTB_set_pin_level+0x68>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	24 e0       	ldi	r18, 0x04	; 4
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	f9 01       	movw	r30, r18
     a4c:	21 81       	ldd	r18, Z+1	; 0x01
     a4e:	62 2f       	mov	r22, r18
     a50:	29 81       	ldd	r18, Y+1	; 0x01
     a52:	42 2f       	mov	r20, r18
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	21 e0       	ldi	r18, 0x01	; 1
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <PORTB_set_pin_level+0x5c>
     a5c:	22 0f       	add	r18, r18
     a5e:	33 1f       	adc	r19, r19
     a60:	4a 95       	dec	r20
     a62:	e2 f7       	brpl	.-8      	; 0xa5c <PORTB_set_pin_level+0x58>
     a64:	20 95       	com	r18
     a66:	26 23       	and	r18, r22
     a68:	fc 01       	movw	r30, r24
     a6a:	21 83       	std	Z+1, r18	; 0x01
     a6c:	00 00       	nop
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	08 95       	ret

00000a78 <PORTC_set_pin_pull_mode>:
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	00 d0       	rcall	.+0      	; 0xa7e <PORTC_set_pin_pull_mode+0x6>
     a7e:	00 d0       	rcall	.+0      	; 0xa80 <PORTC_set_pin_pull_mode+0x8>
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	8b 83       	std	Y+3, r24	; 0x03
     a86:	6c 83       	std	Y+4, r22	; 0x04
     a88:	8b 81       	ldd	r24, Y+3	; 0x03
     a8a:	88 2f       	mov	r24, r24
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	80 5b       	subi	r24, 0xB0	; 176
     a90:	9b 4f       	sbci	r25, 0xFB	; 251
     a92:	89 83       	std	Y+1, r24	; 0x01
     a94:	9a 83       	std	Y+2, r25	; 0x02
     a96:	8c 81       	ldd	r24, Y+4	; 0x04
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	59 f4       	brne	.+22     	; 0xab2 <PORTC_set_pin_pull_mode+0x3a>
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	9a 81       	ldd	r25, Y+2	; 0x02
     aa0:	fc 01       	movw	r30, r24
     aa2:	80 81       	ld	r24, Z
     aa4:	28 2f       	mov	r18, r24
     aa6:	28 60       	ori	r18, 0x08	; 8
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	9a 81       	ldd	r25, Y+2	; 0x02
     aac:	fc 01       	movw	r30, r24
     aae:	20 83       	st	Z, r18
     ab0:	0d c0       	rjmp	.+26     	; 0xacc <PORTC_set_pin_pull_mode+0x54>
     ab2:	8c 81       	ldd	r24, Y+4	; 0x04
     ab4:	88 23       	and	r24, r24
     ab6:	51 f4       	brne	.+20     	; 0xacc <PORTC_set_pin_pull_mode+0x54>
     ab8:	89 81       	ldd	r24, Y+1	; 0x01
     aba:	9a 81       	ldd	r25, Y+2	; 0x02
     abc:	fc 01       	movw	r30, r24
     abe:	80 81       	ld	r24, Z
     ac0:	28 2f       	mov	r18, r24
     ac2:	27 7f       	andi	r18, 0xF7	; 247
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	9a 81       	ldd	r25, Y+2	; 0x02
     ac8:	fc 01       	movw	r30, r24
     aca:	20 83       	st	Z, r18
     acc:	00 00       	nop
     ace:	24 96       	adiw	r28, 0x04	; 4
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	de bf       	out	0x3e, r29	; 62
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret

00000ada <PORTC_pin_set_inverted>:
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	00 d0       	rcall	.+0      	; 0xae0 <PORTC_pin_set_inverted+0x6>
     ae0:	00 d0       	rcall	.+0      	; 0xae2 <PORTC_pin_set_inverted+0x8>
     ae2:	cd b7       	in	r28, 0x3d	; 61
     ae4:	de b7       	in	r29, 0x3e	; 62
     ae6:	8b 83       	std	Y+3, r24	; 0x03
     ae8:	6c 83       	std	Y+4, r22	; 0x04
     aea:	8b 81       	ldd	r24, Y+3	; 0x03
     aec:	88 2f       	mov	r24, r24
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	80 5b       	subi	r24, 0xB0	; 176
     af2:	9b 4f       	sbci	r25, 0xFB	; 251
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	9a 83       	std	Y+2, r25	; 0x02
     af8:	8c 81       	ldd	r24, Y+4	; 0x04
     afa:	88 23       	and	r24, r24
     afc:	59 f0       	breq	.+22     	; 0xb14 <PORTC_pin_set_inverted+0x3a>
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	9a 81       	ldd	r25, Y+2	; 0x02
     b02:	fc 01       	movw	r30, r24
     b04:	80 81       	ld	r24, Z
     b06:	28 2f       	mov	r18, r24
     b08:	20 68       	ori	r18, 0x80	; 128
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	9a 81       	ldd	r25, Y+2	; 0x02
     b0e:	fc 01       	movw	r30, r24
     b10:	20 83       	st	Z, r18
     b12:	0a c0       	rjmp	.+20     	; 0xb28 <PORTC_pin_set_inverted+0x4e>
     b14:	89 81       	ldd	r24, Y+1	; 0x01
     b16:	9a 81       	ldd	r25, Y+2	; 0x02
     b18:	fc 01       	movw	r30, r24
     b1a:	80 81       	ld	r24, Z
     b1c:	28 2f       	mov	r18, r24
     b1e:	2f 77       	andi	r18, 0x7F	; 127
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	9a 81       	ldd	r25, Y+2	; 0x02
     b24:	fc 01       	movw	r30, r24
     b26:	20 83       	st	Z, r18
     b28:	00 00       	nop
     b2a:	24 96       	adiw	r28, 0x04	; 4
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	de bf       	out	0x3e, r29	; 62
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	08 95       	ret

00000b36 <PORTC_pin_set_isc>:
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <PORTC_pin_set_isc+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <PORTC_pin_set_isc+0x8>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	8b 83       	std	Y+3, r24	; 0x03
     b44:	6c 83       	std	Y+4, r22	; 0x04
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	88 2f       	mov	r24, r24
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	80 5b       	subi	r24, 0xB0	; 176
     b4e:	9b 4f       	sbci	r25, 0xFB	; 251
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	fc 01       	movw	r30, r24
     b5a:	80 81       	ld	r24, Z
     b5c:	98 2f       	mov	r25, r24
     b5e:	98 7f       	andi	r25, 0xF8	; 248
     b60:	8c 81       	ldd	r24, Y+4	; 0x04
     b62:	89 2b       	or	r24, r25
     b64:	28 2f       	mov	r18, r24
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	9a 81       	ldd	r25, Y+2	; 0x02
     b6a:	fc 01       	movw	r30, r24
     b6c:	20 83       	st	Z, r18
     b6e:	00 00       	nop
     b70:	24 96       	adiw	r28, 0x04	; 4
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	08 95       	ret

00000b7c <PORTC_set_pin_dir>:
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	00 d0       	rcall	.+0      	; 0xb82 <PORTC_set_pin_dir+0x6>
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	89 83       	std	Y+1, r24	; 0x01
     b88:	6a 83       	std	Y+2, r22	; 0x02
     b8a:	8a 81       	ldd	r24, Y+2	; 0x02
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	91 05       	cpc	r25, r1
     b94:	e1 f0       	breq	.+56     	; 0xbce <PORTC_set_pin_dir+0x52>
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	91 05       	cpc	r25, r1
     b9a:	71 f1       	breq	.+92     	; 0xbf8 <PORTC_set_pin_dir+0x7c>
     b9c:	89 2b       	or	r24, r25
     b9e:	09 f0       	breq	.+2      	; 0xba2 <PORTC_set_pin_dir+0x26>
     ba0:	3b c0       	rjmp	.+118    	; 0xc18 <PORTC_set_pin_dir+0x9c>
     ba2:	88 e0       	ldi	r24, 0x08	; 8
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	28 e0       	ldi	r18, 0x08	; 8
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	f9 01       	movw	r30, r18
     bac:	20 81       	ld	r18, Z
     bae:	62 2f       	mov	r22, r18
     bb0:	29 81       	ldd	r18, Y+1	; 0x01
     bb2:	42 2f       	mov	r20, r18
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	21 e0       	ldi	r18, 0x01	; 1
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <PORTC_set_pin_dir+0x44>
     bbc:	22 0f       	add	r18, r18
     bbe:	33 1f       	adc	r19, r19
     bc0:	4a 95       	dec	r20
     bc2:	e2 f7       	brpl	.-8      	; 0xbbc <PORTC_set_pin_dir+0x40>
     bc4:	20 95       	com	r18
     bc6:	26 23       	and	r18, r22
     bc8:	fc 01       	movw	r30, r24
     bca:	20 83       	st	Z, r18
     bcc:	25 c0       	rjmp	.+74     	; 0xc18 <PORTC_set_pin_dir+0x9c>
     bce:	88 e0       	ldi	r24, 0x08	; 8
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	28 e0       	ldi	r18, 0x08	; 8
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	f9 01       	movw	r30, r18
     bd8:	20 81       	ld	r18, Z
     bda:	62 2f       	mov	r22, r18
     bdc:	29 81       	ldd	r18, Y+1	; 0x01
     bde:	42 2f       	mov	r20, r18
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	21 e0       	ldi	r18, 0x01	; 1
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	02 c0       	rjmp	.+4      	; 0xbec <PORTC_set_pin_dir+0x70>
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	4a 95       	dec	r20
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <PORTC_set_pin_dir+0x6c>
     bf0:	26 2b       	or	r18, r22
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 83       	st	Z, r18
     bf6:	10 c0       	rjmp	.+32     	; 0xc18 <PORTC_set_pin_dir+0x9c>
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	88 2f       	mov	r24, r24
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	80 5b       	subi	r24, 0xB0	; 176
     c00:	9b 4f       	sbci	r25, 0xFB	; 251
     c02:	29 81       	ldd	r18, Y+1	; 0x01
     c04:	22 2f       	mov	r18, r18
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	20 5b       	subi	r18, 0xB0	; 176
     c0a:	3b 4f       	sbci	r19, 0xFB	; 251
     c0c:	f9 01       	movw	r30, r18
     c0e:	20 81       	ld	r18, Z
     c10:	28 60       	ori	r18, 0x08	; 8
     c12:	fc 01       	movw	r30, r24
     c14:	20 83       	st	Z, r18
     c16:	00 00       	nop
     c18:	00 00       	nop
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <PORTC_set_pin_level>:
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	00 d0       	rcall	.+0      	; 0xc2a <PORTC_set_pin_level+0x6>
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	89 83       	std	Y+1, r24	; 0x01
     c30:	6a 83       	std	Y+2, r22	; 0x02
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	88 23       	and	r24, r24
     c36:	a9 f0       	breq	.+42     	; 0xc62 <PORTC_set_pin_level+0x3e>
     c38:	88 e0       	ldi	r24, 0x08	; 8
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	28 e0       	ldi	r18, 0x08	; 8
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	f9 01       	movw	r30, r18
     c42:	21 81       	ldd	r18, Z+1	; 0x01
     c44:	62 2f       	mov	r22, r18
     c46:	29 81       	ldd	r18, Y+1	; 0x01
     c48:	42 2f       	mov	r20, r18
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	21 e0       	ldi	r18, 0x01	; 1
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <PORTC_set_pin_level+0x32>
     c52:	22 0f       	add	r18, r18
     c54:	33 1f       	adc	r19, r19
     c56:	4a 95       	dec	r20
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <PORTC_set_pin_level+0x2e>
     c5a:	26 2b       	or	r18, r22
     c5c:	fc 01       	movw	r30, r24
     c5e:	21 83       	std	Z+1, r18	; 0x01
     c60:	15 c0       	rjmp	.+42     	; 0xc8c <PORTC_set_pin_level+0x68>
     c62:	88 e0       	ldi	r24, 0x08	; 8
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	28 e0       	ldi	r18, 0x08	; 8
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	f9 01       	movw	r30, r18
     c6c:	21 81       	ldd	r18, Z+1	; 0x01
     c6e:	62 2f       	mov	r22, r18
     c70:	29 81       	ldd	r18, Y+1	; 0x01
     c72:	42 2f       	mov	r20, r18
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	21 e0       	ldi	r18, 0x01	; 1
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <PORTC_set_pin_level+0x5c>
     c7c:	22 0f       	add	r18, r18
     c7e:	33 1f       	adc	r19, r19
     c80:	4a 95       	dec	r20
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <PORTC_set_pin_level+0x58>
     c84:	20 95       	com	r18
     c86:	26 23       	and	r18, r22
     c88:	fc 01       	movw	r30, r24
     c8a:	21 83       	std	Z+1, r18	; 0x01
     c8c:	00 00       	nop
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <CONF_WIFI_M2M_RESET_PIN_set_dir>:
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	1f 92       	push	r1
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	69 81       	ldd	r22, Y+1	; 0x01
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	0e 94 ef 03 	call	0x7de	; 0x7de <PORTA_set_pin_dir>
     cac:	00 00       	nop
     cae:	0f 90       	pop	r0
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <CONF_WIFI_M2M_RESET_PIN_set_level>:
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	1f 92       	push	r1
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	89 83       	std	Y+1, r24	; 0x01
     cc2:	69 81       	ldd	r22, Y+1	; 0x01
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	0e 94 43 04 	call	0x886	; 0x886 <PORTA_set_pin_level>
     cca:	00 00       	nop
     ccc:	0f 90       	pop	r0
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <CONF_WIFI_M2M_WAKE_PIN_set_dir>:
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	1f 92       	push	r1
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	69 81       	ldd	r22, Y+1	; 0x01
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	0e 94 ef 03 	call	0x7de	; 0x7de <PORTA_set_pin_dir>
     ce8:	00 00       	nop
     cea:	0f 90       	pop	r0
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	08 95       	ret

00000cf2 <CONF_WIFI_M2M_WAKE_PIN_set_level>:
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	1f 92       	push	r1
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	89 83       	std	Y+1, r24	; 0x01
     cfe:	69 81       	ldd	r22, Y+1	; 0x01
     d00:	83 e0       	ldi	r24, 0x03	; 3
     d02:	0e 94 43 04 	call	0x886	; 0x886 <PORTA_set_pin_level>
     d06:	00 00       	nop
     d08:	0f 90       	pop	r0
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	08 95       	ret

00000d10 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>:
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	1f 92       	push	r1
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	69 81       	ldd	r22, Y+1	; 0x01
     d1e:	84 e0       	ldi	r24, 0x04	; 4
     d20:	0e 94 ef 03 	call	0x7de	; 0x7de <PORTA_set_pin_dir>
     d24:	00 00       	nop
     d26:	0f 90       	pop	r0
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret

00000d2e <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>:
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	1f 92       	push	r1
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	69 81       	ldd	r22, Y+1	; 0x01
     d3c:	84 e0       	ldi	r24, 0x04	; 4
     d3e:	0e 94 43 04 	call	0x886	; 0x886 <PORTA_set_pin_level>
     d42:	00 00       	nop
     d44:	0f 90       	pop	r0
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	08 95       	ret

00000d4c <CONF_WIFI_M2M_SPI_MISO_PIN_set_pull_mode>:
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	1f 92       	push	r1
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	69 81       	ldd	r22, Y+1	; 0x01
     d5a:	85 e0       	ldi	r24, 0x05	; 5
     d5c:	0e 94 be 03 	call	0x77c	; 0x77c <PORTA_set_pin_pull_mode>
     d60:	00 00       	nop
     d62:	0f 90       	pop	r0
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>:
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	1f 92       	push	r1
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	89 83       	std	Y+1, r24	; 0x01
     d76:	69 81       	ldd	r22, Y+1	; 0x01
     d78:	85 e0       	ldi	r24, 0x05	; 5
     d7a:	0e 94 ef 03 	call	0x7de	; 0x7de <PORTA_set_pin_dir>
     d7e:	00 00       	nop
     d80:	0f 90       	pop	r0
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	08 95       	ret

00000d88 <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>:
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	1f 92       	push	r1
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	69 81       	ldd	r22, Y+1	; 0x01
     d96:	86 e0       	ldi	r24, 0x06	; 6
     d98:	0e 94 ef 03 	call	0x7de	; 0x7de <PORTA_set_pin_dir>
     d9c:	00 00       	nop
     d9e:	0f 90       	pop	r0
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>:
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	1f 92       	push	r1
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	89 83       	std	Y+1, r24	; 0x01
     db2:	69 81       	ldd	r22, Y+1	; 0x01
     db4:	86 e0       	ldi	r24, 0x06	; 6
     db6:	0e 94 43 04 	call	0x886	; 0x886 <PORTA_set_pin_level>
     dba:	00 00       	nop
     dbc:	0f 90       	pop	r0
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	08 95       	ret

00000dc4 <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>:
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	1f 92       	push	r1
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	69 81       	ldd	r22, Y+1	; 0x01
     dd2:	87 e0       	ldi	r24, 0x07	; 7
     dd4:	0e 94 ef 03 	call	0x7de	; 0x7de <PORTA_set_pin_dir>
     dd8:	00 00       	nop
     dda:	0f 90       	pop	r0
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>:
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	1f 92       	push	r1
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	89 83       	std	Y+1, r24	; 0x01
     dee:	69 81       	ldd	r22, Y+1	; 0x01
     df0:	87 e0       	ldi	r24, 0x07	; 7
     df2:	0e 94 43 04 	call	0x886	; 0x886 <PORTA_set_pin_level>
     df6:	00 00       	nop
     df8:	0f 90       	pop	r0
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <SW0_set_pull_mode>:
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	1f 92       	push	r1
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	89 83       	std	Y+1, r24	; 0x01
     e0c:	69 81       	ldd	r22, Y+1	; 0x01
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	0e 94 7d 04 	call	0x8fa	; 0x8fa <PORTB_set_pin_pull_mode>
     e14:	00 00       	nop
     e16:	0f 90       	pop	r0
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	08 95       	ret

00000e1e <SW0_set_dir>:
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	1f 92       	push	r1
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	89 83       	std	Y+1, r24	; 0x01
     e2a:	69 81       	ldd	r22, Y+1	; 0x01
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	0e 94 ae 04 	call	0x95c	; 0x95c <PORTB_set_pin_dir>
     e32:	00 00       	nop
     e34:	0f 90       	pop	r0
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <LED0_set_dir>:
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	1f 92       	push	r1
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	69 81       	ldd	r22, Y+1	; 0x01
     e4a:	85 e0       	ldi	r24, 0x05	; 5
     e4c:	0e 94 ae 04 	call	0x95c	; 0x95c <PORTB_set_pin_dir>
     e50:	00 00       	nop
     e52:	0f 90       	pop	r0
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	08 95       	ret

00000e5a <LED0_set_level>:
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	1f 92       	push	r1
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	69 81       	ldd	r22, Y+1	; 0x01
     e68:	85 e0       	ldi	r24, 0x05	; 5
     e6a:	0e 94 02 05 	call	0xa04	; 0xa04 <PORTB_set_pin_level>
     e6e:	00 00       	nop
     e70:	0f 90       	pop	r0
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <PC0_set_dir>:
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	1f 92       	push	r1
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	69 81       	ldd	r22, Y+1	; 0x01
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	0e 94 be 05 	call	0xb7c	; 0xb7c <PORTC_set_pin_dir>
     e8c:	00 00       	nop
     e8e:	0f 90       	pop	r0
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	08 95       	ret

00000e96 <PC0_set_level>:
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	1f 92       	push	r1
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	69 81       	ldd	r22, Y+1	; 0x01
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	0e 94 12 06 	call	0xc24	; 0xc24 <PORTC_set_pin_level>
     eaa:	00 00       	nop
     eac:	0f 90       	pop	r0
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	08 95       	ret

00000eb4 <PC1_set_pull_mode>:
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	1f 92       	push	r1
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	69 81       	ldd	r22, Y+1	; 0x01
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	0e 94 3c 05 	call	0xa78	; 0xa78 <PORTC_set_pin_pull_mode>
     ec8:	00 00       	nop
     eca:	0f 90       	pop	r0
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <PC1_set_dir>:
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	1f 92       	push	r1
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	89 83       	std	Y+1, r24	; 0x01
     ede:	69 81       	ldd	r22, Y+1	; 0x01
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	0e 94 be 05 	call	0xb7c	; 0xb7c <PORTC_set_pin_dir>
     ee6:	00 00       	nop
     ee8:	0f 90       	pop	r0
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	08 95       	ret

00000ef0 <CONF_WIFI_M2M_INT_PIN_set_pull_mode>:
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	1f 92       	push	r1
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	69 81       	ldd	r22, Y+1	; 0x01
     efe:	86 e0       	ldi	r24, 0x06	; 6
     f00:	0e 94 3c 05 	call	0xa78	; 0xa78 <PORTC_set_pin_pull_mode>
     f04:	00 00       	nop
     f06:	0f 90       	pop	r0
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <CONF_WIFI_M2M_INT_PIN_set_dir>:
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	1f 92       	push	r1
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	69 81       	ldd	r22, Y+1	; 0x01
     f1c:	86 e0       	ldi	r24, 0x06	; 6
     f1e:	0e 94 be 05 	call	0xb7c	; 0xb7c <PORTC_set_pin_dir>
     f22:	00 00       	nop
     f24:	0f 90       	pop	r0
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret

00000f2c <CONF_WIFI_M2M_INT_PIN_set_isc>:
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	1f 92       	push	r1
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	69 81       	ldd	r22, Y+1	; 0x01
     f3a:	86 e0       	ldi	r24, 0x06	; 6
     f3c:	0e 94 9b 05 	call	0xb36	; 0xb36 <PORTC_pin_set_isc>
     f40:	00 00       	nop
     f42:	0f 90       	pop	r0
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	08 95       	ret

00000f4a <CONF_WIFI_M2M_INT_PIN_set_inverted>:
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	1f 92       	push	r1
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	69 81       	ldd	r22, Y+1	; 0x01
     f58:	86 e0       	ldi	r24, 0x06	; 6
     f5a:	0e 94 6d 05 	call	0xada	; 0xada <PORTC_pin_set_inverted>
     f5e:	00 00       	nop
     f60:	0f 90       	pop	r0
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <CONF_WIFI_M2M_INT_PIN_set_level>:
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	1f 92       	push	r1
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	69 81       	ldd	r22, Y+1	; 0x01
     f76:	86 e0       	ldi	r24, 0x06	; 6
     f78:	0e 94 12 06 	call	0xc24	; 0xc24 <PORTC_set_pin_level>
     f7c:	00 00       	nop
     f7e:	0f 90       	pop	r0
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>:
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	1f 92       	push	r1
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	69 81       	ldd	r22, Y+1	; 0x01
     f94:	87 e0       	ldi	r24, 0x07	; 7
     f96:	0e 94 be 05 	call	0xb7c	; 0xb7c <PORTC_set_pin_dir>
     f9a:	00 00       	nop
     f9c:	0f 90       	pop	r0
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	08 95       	ret

00000fa4 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>:
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	1f 92       	push	r1
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	69 81       	ldd	r22, Y+1	; 0x01
     fb2:	87 e0       	ldi	r24, 0x07	; 7
     fb4:	0e 94 12 06 	call	0xc24	; 0xc24 <PORTC_set_pin_level>
     fb8:	00 00       	nop
     fba:	0f 90       	pop	r0
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <mcu_init>:
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	26 97       	sbiw	r28, 0x06	; 6
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	19 82       	std	Y+1, r1	; 0x01
     fd2:	12 c0       	rjmp	.+36     	; 0xff8 <mcu_init+0x36>
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	80 5f       	subi	r24, 0xF0	; 240
     fdc:	9b 4f       	sbci	r25, 0xFB	; 251
     fde:	29 81       	ldd	r18, Y+1	; 0x01
     fe0:	22 2f       	mov	r18, r18
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	20 5f       	subi	r18, 0xF0	; 240
     fe6:	3b 4f       	sbci	r19, 0xFB	; 251
     fe8:	f9 01       	movw	r30, r18
     fea:	20 81       	ld	r18, Z
     fec:	28 60       	ori	r18, 0x08	; 8
     fee:	fc 01       	movw	r30, r24
     ff0:	20 83       	st	Z, r18
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	8f 5f       	subi	r24, 0xFF	; 255
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	88 30       	cpi	r24, 0x08	; 8
     ffc:	58 f3       	brcs	.-42     	; 0xfd4 <mcu_init+0x12>
     ffe:	1a 82       	std	Y+2, r1	; 0x02
    1000:	12 c0       	rjmp	.+36     	; 0x1026 <mcu_init+0x64>
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	80 5d       	subi	r24, 0xD0	; 208
    100a:	9b 4f       	sbci	r25, 0xFB	; 251
    100c:	2a 81       	ldd	r18, Y+2	; 0x02
    100e:	22 2f       	mov	r18, r18
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	20 5d       	subi	r18, 0xD0	; 208
    1014:	3b 4f       	sbci	r19, 0xFB	; 251
    1016:	f9 01       	movw	r30, r18
    1018:	20 81       	ld	r18, Z
    101a:	28 60       	ori	r18, 0x08	; 8
    101c:	fc 01       	movw	r30, r24
    101e:	20 83       	st	Z, r18
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	8a 83       	std	Y+2, r24	; 0x02
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	88 30       	cpi	r24, 0x08	; 8
    102a:	58 f3       	brcs	.-42     	; 0x1002 <mcu_init+0x40>
    102c:	1b 82       	std	Y+3, r1	; 0x03
    102e:	12 c0       	rjmp	.+36     	; 0x1054 <mcu_init+0x92>
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	80 5b       	subi	r24, 0xB0	; 176
    1038:	9b 4f       	sbci	r25, 0xFB	; 251
    103a:	2b 81       	ldd	r18, Y+3	; 0x03
    103c:	22 2f       	mov	r18, r18
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	20 5b       	subi	r18, 0xB0	; 176
    1042:	3b 4f       	sbci	r19, 0xFB	; 251
    1044:	f9 01       	movw	r30, r18
    1046:	20 81       	ld	r18, Z
    1048:	28 60       	ori	r18, 0x08	; 8
    104a:	fc 01       	movw	r30, r24
    104c:	20 83       	st	Z, r18
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	8f 5f       	subi	r24, 0xFF	; 255
    1052:	8b 83       	std	Y+3, r24	; 0x03
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	88 30       	cpi	r24, 0x08	; 8
    1058:	58 f3       	brcs	.-42     	; 0x1030 <mcu_init+0x6e>
    105a:	1c 82       	std	Y+4, r1	; 0x04
    105c:	12 c0       	rjmp	.+36     	; 0x1082 <mcu_init+0xc0>
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	80 59       	subi	r24, 0x90	; 144
    1066:	9b 4f       	sbci	r25, 0xFB	; 251
    1068:	2c 81       	ldd	r18, Y+4	; 0x04
    106a:	22 2f       	mov	r18, r18
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	20 59       	subi	r18, 0x90	; 144
    1070:	3b 4f       	sbci	r19, 0xFB	; 251
    1072:	f9 01       	movw	r30, r18
    1074:	20 81       	ld	r18, Z
    1076:	28 60       	ori	r18, 0x08	; 8
    1078:	fc 01       	movw	r30, r24
    107a:	20 83       	st	Z, r18
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	8f 5f       	subi	r24, 0xFF	; 255
    1080:	8c 83       	std	Y+4, r24	; 0x04
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	88 30       	cpi	r24, 0x08	; 8
    1086:	58 f3       	brcs	.-42     	; 0x105e <mcu_init+0x9c>
    1088:	1d 82       	std	Y+5, r1	; 0x05
    108a:	12 c0       	rjmp	.+36     	; 0x10b0 <mcu_init+0xee>
    108c:	8d 81       	ldd	r24, Y+5	; 0x05
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	80 57       	subi	r24, 0x70	; 112
    1094:	9b 4f       	sbci	r25, 0xFB	; 251
    1096:	2d 81       	ldd	r18, Y+5	; 0x05
    1098:	22 2f       	mov	r18, r18
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	20 57       	subi	r18, 0x70	; 112
    109e:	3b 4f       	sbci	r19, 0xFB	; 251
    10a0:	f9 01       	movw	r30, r18
    10a2:	20 81       	ld	r18, Z
    10a4:	28 60       	ori	r18, 0x08	; 8
    10a6:	fc 01       	movw	r30, r24
    10a8:	20 83       	st	Z, r18
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	8f 5f       	subi	r24, 0xFF	; 255
    10ae:	8d 83       	std	Y+5, r24	; 0x05
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	88 30       	cpi	r24, 0x08	; 8
    10b4:	58 f3       	brcs	.-42     	; 0x108c <mcu_init+0xca>
    10b6:	1e 82       	std	Y+6, r1	; 0x06
    10b8:	12 c0       	rjmp	.+36     	; 0x10de <mcu_init+0x11c>
    10ba:	8e 81       	ldd	r24, Y+6	; 0x06
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	80 55       	subi	r24, 0x50	; 80
    10c2:	9b 4f       	sbci	r25, 0xFB	; 251
    10c4:	2e 81       	ldd	r18, Y+6	; 0x06
    10c6:	22 2f       	mov	r18, r18
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	20 55       	subi	r18, 0x50	; 80
    10cc:	3b 4f       	sbci	r19, 0xFB	; 251
    10ce:	f9 01       	movw	r30, r18
    10d0:	20 81       	ld	r18, Z
    10d2:	28 60       	ori	r18, 0x08	; 8
    10d4:	fc 01       	movw	r30, r24
    10d6:	20 83       	st	Z, r18
    10d8:	8e 81       	ldd	r24, Y+6	; 0x06
    10da:	8f 5f       	subi	r24, 0xFF	; 255
    10dc:	8e 83       	std	Y+6, r24	; 0x06
    10de:	8e 81       	ldd	r24, Y+6	; 0x06
    10e0:	88 30       	cpi	r24, 0x08	; 8
    10e2:	58 f3       	brcs	.-42     	; 0x10ba <mcu_init+0xf8>
    10e4:	00 00       	nop
    10e6:	26 96       	adiw	r28, 0x06	; 6
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <USART_0_initialization>:
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	0e 94 69 07 	call	0xed2	; 0xed2 <PC1_set_dir>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <PC1_set_pull_mode>
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	0e 94 3c 07 	call	0xe78	; 0xe78 <PC0_set_dir>
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	0e 94 4b 07 	call	0xe96	; 0xe96 <PC0_set_level>
    1112:	0e 94 05 0b 	call	0x160a	; 0x160a <USART_0_init>
    1116:	00 00       	nop
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	08 95       	ret

0000111e <SPI_0_initialization>:
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	0e 94 b5 06 	call	0xd6a	; 0xd6a <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <CONF_WIFI_M2M_SPI_MISO_PIN_set_pull_mode>
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	0e 94 88 06 	call	0xd10	; 0xd10 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	0e 94 97 06 	call	0xd2e	; 0xd2e <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	0e 94 c4 06 	call	0xd88	; 0xd88 <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	0e 94 d3 06 	call	0xda6	; 0xda6 <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>
    114a:	0e 94 07 09 	call	0x120e	; 0x120e <SPI_0_init>
    114e:	00 00       	nop
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    115e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <mcu_init>
//	ADC_0_initialization();


	CLKCTRL_init();
    1162:	0e 94 a9 03 	call	0x752	; 0x752 <CLKCTRL_init>

//	scheduler_timeout_init();

	USART_0_initialization();
    1166:	0e 94 79 08 	call	0x10f2	; 0x10f2 <USART_0_initialization>
	//return;
	/* PORT setting on PA2 */

	// Set pin direction to output
	CONF_WIFI_M2M_RESET_PIN_set_dir(PORT_DIR_OUT);
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	0e 94 4c 06 	call	0xc98	; 0xc98 <CONF_WIFI_M2M_RESET_PIN_set_dir>

	CONF_WIFI_M2M_RESET_PIN_set_level(
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <CONF_WIFI_M2M_RESET_PIN_set_level>
	    false);

	/* PORT setting on PA3 */

	// Set pin direction to output
	CONF_WIFI_M2M_WAKE_PIN_set_dir(PORT_DIR_OUT);
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <CONF_WIFI_M2M_WAKE_PIN_set_dir>

	CONF_WIFI_M2M_WAKE_PIN_set_level(
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <CONF_WIFI_M2M_WAKE_PIN_set_level>
	    false);

	/* PORT setting on PA7 */

	// Set pin direction to output
	CONF_WIFI_M2M_SPI_CS_PIN_set_dir(PORT_DIR_OUT);
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>

	CONF_WIFI_M2M_SPI_CS_PIN_set_level(
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	0e 94 f1 06 	call	0xde2	; 0xde2 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>
	    true);

	/* PORT setting on PB2 */

	// Set pin direction to input
	SW0_set_dir(PORT_DIR_IN);
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	0e 94 0f 07 	call	0xe1e	; 0xe1e <SW0_set_dir>

	SW0_set_pull_mode(
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	0e 94 00 07 	call	0xe00	; 0xe00 <SW0_set_pull_mode>
	    PORT_PULL_UP);

	/* PORT setting on PB5 */

	// Set pin direction to output
	LED0_set_dir(PORT_DIR_OUT);
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <LED0_set_dir>

	LED0_set_level(
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <LED0_set_level>
	    // <true"> High
	    false);

	/* PORT setting on PC6 */

	CONF_WIFI_M2M_INT_PIN_set_dir(
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	0e 94 87 07 	call	0xf0e	; 0xf0e <CONF_WIFI_M2M_INT_PIN_set_dir>
	    // <PORT_DIR_OFF"> Off
	    // <PORT_DIR_IN"> In
	    // <PORT_DIR_OUT"> Out
	    PORT_DIR_IN);

	CONF_WIFI_M2M_INT_PIN_set_level(
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	0e 94 b4 07 	call	0xf68	; 0xf68 <CONF_WIFI_M2M_INT_PIN_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CONF_WIFI_M2M_INT_PIN_set_pull_mode(
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	0e 94 78 07 	call	0xef0	; 0xef0 <CONF_WIFI_M2M_INT_PIN_set_pull_mode>
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_UP);

	CONF_WIFI_M2M_INT_PIN_set_inverted(
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	0e 94 a5 07 	call	0xf4a	; 0xf4a <CONF_WIFI_M2M_INT_PIN_set_inverted>
	    // <id> pad_invert
	    // <false"> Not inverted
	    // <true"> Inverted
	    false);

	CONF_WIFI_M2M_INT_PIN_set_isc(
    11be:	83 e0       	ldi	r24, 0x03	; 3
    11c0:	0e 94 96 07 	call	0xf2c	; 0xf2c <CONF_WIFI_M2M_INT_PIN_set_isc>
	    PORT_ISC_FALLING_gc);

	/* PORT setting on PC7 */

	// Set pin direction to output
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir(PORT_DIR_OUT);
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	0e 94 c3 07 	call	0xf86	; 0xf86 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>

	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CLKCTRL_init();
    11d0:	0e 94 a9 03 	call	0x752	; 0x752 <CLKCTRL_init>

	scheduler_timeout_init();
    11d4:	0e 94 57 09 	call	0x12ae	; 0x12ae <scheduler_timeout_init>

	USART_0_initialization();
    11d8:	0e 94 79 08 	call	0x10f2	; 0x10f2 <USART_0_initialization>

	SPI_0_initialization();
    11dc:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_0_initialization>

	CPUINT_init();
    11e0:	0e 94 b6 03 	call	0x76c	; 0x76c <CPUINT_init>

	SLPCTRL_init();
    11e4:	0e 94 ff 08 	call	0x11fe	; 0x11fe <SLPCTRL_init>

	BOD_init();
    11e8:	0e 94 8b 03 	call	0x716	; 0x716 <BOD_init>
}
    11ec:	00 00       	nop
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	08 95       	ret

000011f4 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    11f4:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    11f6:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    11f8:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    11fa:	40 83       	st	Z, r20
	ret                             // Return to caller
    11fc:	08 95       	ret

000011fe <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
    1206:	80 e0       	ldi	r24, 0x00	; 0
}
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	08 95       	ret

0000120e <SPI_0_init>:
 * \return Nothing
 */
void SPI_0_disable()
{
	SPI0.CTRLA &= ~SPI_ENABLE_bm;
}
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	80 ec       	ldi	r24, 0xC0	; 192
    1218:	98 e0       	ldi	r25, 0x08	; 8
    121a:	21 e3       	ldi	r18, 0x31	; 49
    121c:	fc 01       	movw	r30, r24
    121e:	20 83       	st	Z, r18
    1220:	10 92 f9 2d 	sts	0x2DF9, r1	; 0x802df9 <SPI_0_desc>
    1224:	00 00       	nop
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	08 95       	ret

0000122c <SPI_0_enable>:
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	80 ec       	ldi	r24, 0xC0	; 192
    1236:	98 e0       	ldi	r25, 0x08	; 8
    1238:	20 ec       	ldi	r18, 0xC0	; 192
    123a:	38 e0       	ldi	r19, 0x08	; 8
    123c:	f9 01       	movw	r30, r18
    123e:	20 81       	ld	r18, Z
    1240:	21 60       	ori	r18, 0x01	; 1
    1242:	fc 01       	movw	r30, r24
    1244:	20 83       	st	Z, r18
    1246:	00 00       	nop
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	08 95       	ret

0000124e <SPI_0_exchange_byte>:
 * \param[in] data The byte to transfer
 *
 * \return Received data byte.
 */
uint8_t SPI_0_exchange_byte(uint8_t data)
{
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	1f 92       	push	r1
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	89 83       	std	Y+1, r24	; 0x01
	// Blocking wait for SPI free makes the function work
	// seamlessly also with IRQ drivers.
	while (SPI_0_desc.status == SPI_BUSY)
    125a:	00 00       	nop
    125c:	80 91 f9 2d 	lds	r24, 0x2DF9	; 0x802df9 <SPI_0_desc>
    1260:	82 30       	cpi	r24, 0x02	; 2
    1262:	e1 f3       	breq	.-8      	; 0x125c <SPI_0_exchange_byte+0xe>
		;
	SPI0.DATA = data;
    1264:	80 ec       	ldi	r24, 0xC0	; 192
    1266:	98 e0       	ldi	r25, 0x08	; 8
    1268:	29 81       	ldd	r18, Y+1	; 0x01
    126a:	fc 01       	movw	r30, r24
    126c:	24 83       	std	Z+4, r18	; 0x04
	while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
    126e:	00 00       	nop
    1270:	80 ec       	ldi	r24, 0xC0	; 192
    1272:	98 e0       	ldi	r25, 0x08	; 8
    1274:	fc 01       	movw	r30, r24
    1276:	83 81       	ldd	r24, Z+3	; 0x03
    1278:	88 23       	and	r24, r24
    127a:	d4 f7       	brge	.-12     	; 0x1270 <SPI_0_exchange_byte+0x22>
		;
	return SPI0.DATA;
    127c:	80 ec       	ldi	r24, 0xC0	; 192
    127e:	98 e0       	ldi	r25, 0x08	; 8
    1280:	fc 01       	movw	r30, r24
    1282:	84 81       	ldd	r24, Z+4	; 0x04
}
    1284:	0f 90       	pop	r0
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	08 95       	ret

0000128c <scheduler_dummy_handler>:
		scheduler_start_timer_at_head();
	} else {
		if (scheduler_is_running)
			RTC.INTCTRL |= RTC_OVF_bm;
	}
}
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	00 d0       	rcall	.+0      	; 0x1292 <scheduler_dummy_handler+0x6>
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	9a 83       	std	Y+2, r25	; 0x02
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	dc 01       	movw	r26, r24
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	08 95       	ret

000012ae <scheduler_timeout_init>:
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	00 00       	nop
    12b8:	80 e4       	ldi	r24, 0x40	; 64
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	fc 01       	movw	r30, r24
    12be:	81 81       	ldd	r24, Z+1	; 0x01
    12c0:	88 23       	and	r24, r24
    12c2:	d1 f7       	brne	.-12     	; 0x12b8 <scheduler_timeout_init+0xa>
    12c4:	80 e4       	ldi	r24, 0x40	; 64
    12c6:	91 e0       	ldi	r25, 0x01	; 1
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	fc 01       	movw	r30, r24
    12cc:	20 83       	st	Z, r18
    12ce:	80 e4       	ldi	r24, 0x40	; 64
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	21 e0       	ldi	r18, 0x01	; 1
    12d4:	fc 01       	movw	r30, r24
    12d6:	27 83       	std	Z+7, r18	; 0x07
    12d8:	80 e4       	ldi	r24, 0x40	; 64
    12da:	91 e0       	ldi	r25, 0x01	; 1
    12dc:	21 e0       	ldi	r18, 0x01	; 1
    12de:	fc 01       	movw	r30, r24
    12e0:	22 83       	std	Z+2, r18	; 0x02
    12e2:	00 00       	nop
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	08 95       	ret

000012ea <scheduler_stop_timeouts>:
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	80 e4       	ldi	r24, 0x40	; 64
    12f4:	91 e0       	ldi	r25, 0x01	; 1
    12f6:	20 e4       	ldi	r18, 0x40	; 64
    12f8:	31 e0       	ldi	r19, 0x01	; 1
    12fa:	f9 01       	movw	r30, r18
    12fc:	22 81       	ldd	r18, Z+2	; 0x02
    12fe:	2e 7f       	andi	r18, 0xFE	; 254
    1300:	fc 01       	movw	r30, r24
    1302:	22 83       	std	Z+2, r18	; 0x02
    1304:	10 92 fe 2d 	sts	0x2DFE, r1	; 0x802dfe <scheduler_absolute_time_of_last_timeout>
    1308:	10 92 ff 2d 	sts	0x2DFF, r1	; 0x802dff <scheduler_absolute_time_of_last_timeout+0x1>
    130c:	10 92 00 2e 	sts	0x2E00, r1	; 0x802e00 <scheduler_absolute_time_of_last_timeout+0x2>
    1310:	10 92 01 2e 	sts	0x2E01, r1	; 0x802e01 <scheduler_absolute_time_of_last_timeout+0x3>
    1314:	10 92 06 2e 	sts	0x2E06, r1	; 0x802e06 <scheduler_is_running>
    1318:	00 00       	nop
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	08 95       	ret

00001320 <scheduler_set_timer_duration>:
    1320:	ef 92       	push	r14
    1322:	ff 92       	push	r15
    1324:	0f 93       	push	r16
    1326:	1f 93       	push	r17
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	00 d0       	rcall	.+0      	; 0x132e <scheduler_set_timer_duration+0xe>
    132e:	00 d0       	rcall	.+0      	; 0x1330 <scheduler_set_timer_duration+0x10>
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	69 83       	std	Y+1, r22	; 0x01
    1336:	7a 83       	std	Y+2, r23	; 0x02
    1338:	8b 83       	std	Y+3, r24	; 0x03
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	2f ef       	ldi	r18, 0xFF	; 255
    133e:	3f ef       	ldi	r19, 0xFF	; 255
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	ab 81       	ldd	r26, Y+3	; 0x03
    134a:	bc 81       	ldd	r27, Y+4	; 0x04
    134c:	79 01       	movw	r14, r18
    134e:	8a 01       	movw	r16, r20
    1350:	e8 1a       	sub	r14, r24
    1352:	f9 0a       	sbc	r15, r25
    1354:	0a 0b       	sbc	r16, r26
    1356:	1b 0b       	sbc	r17, r27
    1358:	d8 01       	movw	r26, r16
    135a:	c7 01       	movw	r24, r14
    135c:	80 93 02 2e 	sts	0x2E02, r24	; 0x802e02 <scheduler_last_timer_load>
    1360:	90 93 03 2e 	sts	0x2E03, r25	; 0x802e03 <scheduler_last_timer_load+0x1>
    1364:	a0 93 04 2e 	sts	0x2E04, r26	; 0x802e04 <scheduler_last_timer_load+0x2>
    1368:	b0 93 05 2e 	sts	0x2E05, r27	; 0x802e05 <scheduler_last_timer_load+0x3>
    136c:	20 e4       	ldi	r18, 0x40	; 64
    136e:	31 e0       	ldi	r19, 0x01	; 1
    1370:	80 91 02 2e 	lds	r24, 0x2E02	; 0x802e02 <scheduler_last_timer_load>
    1374:	90 91 03 2e 	lds	r25, 0x2E03	; 0x802e03 <scheduler_last_timer_load+0x1>
    1378:	a0 91 04 2e 	lds	r26, 0x2E04	; 0x802e04 <scheduler_last_timer_load+0x2>
    137c:	b0 91 05 2e 	lds	r27, 0x2E05	; 0x802e05 <scheduler_last_timer_load+0x3>
    1380:	f9 01       	movw	r30, r18
    1382:	80 87       	std	Z+8, r24	; 0x08
    1384:	91 87       	std	Z+9, r25	; 0x09
    1386:	00 00       	nop
    1388:	80 e4       	ldi	r24, 0x40	; 64
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	fc 01       	movw	r30, r24
    138e:	81 81       	ldd	r24, Z+1	; 0x01
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	82 70       	andi	r24, 0x02	; 2
    1396:	99 27       	eor	r25, r25
    1398:	89 2b       	or	r24, r25
    139a:	b1 f7       	brne	.-20     	; 0x1388 <scheduler_set_timer_duration+0x68>
    139c:	00 00       	nop
    139e:	24 96       	adiw	r28, 0x04	; 4
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	ff 90       	pop	r15
    13ae:	ef 90       	pop	r14
    13b0:	08 95       	ret

000013b2 <scheduler_start_timer_at_head>:
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <scheduler_start_timer_at_head+0x6>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <scheduler_start_timer_at_head+0x8>
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	80 e4       	ldi	r24, 0x40	; 64
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	20 e4       	ldi	r18, 0x40	; 64
    13c4:	31 e0       	ldi	r19, 0x01	; 1
    13c6:	f9 01       	movw	r30, r18
    13c8:	22 81       	ldd	r18, Z+2	; 0x02
    13ca:	2e 7f       	andi	r18, 0xFE	; 254
    13cc:	fc 01       	movw	r30, r24
    13ce:	22 83       	std	Z+2, r18	; 0x02
    13d0:	80 91 fa 2d 	lds	r24, 0x2DFA	; 0x802dfa <scheduler_list_head>
    13d4:	90 91 fb 2d 	lds	r25, 0x2DFB	; 0x802dfb <scheduler_list_head+0x1>
    13d8:	89 2b       	or	r24, r25
    13da:	19 f4       	brne	.+6      	; 0x13e2 <scheduler_start_timer_at_head+0x30>
    13dc:	0e 94 75 09 	call	0x12ea	; 0x12ea <scheduler_stop_timeouts>
    13e0:	68 c0       	rjmp	.+208    	; 0x14b2 <scheduler_start_timer_at_head+0x100>
    13e2:	80 91 fa 2d 	lds	r24, 0x2DFA	; 0x802dfa <scheduler_list_head>
    13e6:	90 91 fb 2d 	lds	r25, 0x2DFB	; 0x802dfb <scheduler_list_head+0x1>
    13ea:	89 2b       	or	r24, r25
    13ec:	51 f0       	breq	.+20     	; 0x1402 <scheduler_start_timer_at_head+0x50>
    13ee:	80 91 fa 2d 	lds	r24, 0x2DFA	; 0x802dfa <scheduler_list_head>
    13f2:	90 91 fb 2d 	lds	r25, 0x2DFB	; 0x802dfb <scheduler_list_head+0x1>
    13f6:	fc 01       	movw	r30, r24
    13f8:	86 81       	ldd	r24, Z+6	; 0x06
    13fa:	97 81       	ldd	r25, Z+7	; 0x07
    13fc:	a0 85       	ldd	r26, Z+8	; 0x08
    13fe:	b1 85       	ldd	r27, Z+9	; 0x09
    1400:	03 c0       	rjmp	.+6      	; 0x1408 <scheduler_start_timer_at_head+0x56>
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	dc 01       	movw	r26, r24
    1408:	20 91 fe 2d 	lds	r18, 0x2DFE	; 0x802dfe <scheduler_absolute_time_of_last_timeout>
    140c:	30 91 ff 2d 	lds	r19, 0x2DFF	; 0x802dff <scheduler_absolute_time_of_last_timeout+0x1>
    1410:	40 91 00 2e 	lds	r20, 0x2E00	; 0x802e00 <scheduler_absolute_time_of_last_timeout+0x2>
    1414:	50 91 01 2e 	lds	r21, 0x2E01	; 0x802e01 <scheduler_absolute_time_of_last_timeout+0x3>
    1418:	82 1b       	sub	r24, r18
    141a:	93 0b       	sbc	r25, r19
    141c:	a4 0b       	sbc	r26, r20
    141e:	b5 0b       	sbc	r27, r21
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	ab 83       	std	Y+3, r26	; 0x03
    1426:	bc 83       	std	Y+4, r27	; 0x04
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	9a 81       	ldd	r25, Y+2	; 0x02
    142c:	ab 81       	ldd	r26, Y+3	; 0x03
    142e:	bc 81       	ldd	r27, Y+4	; 0x04
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	a1 40       	sbci	r26, 0x01	; 1
    1434:	b1 05       	cpc	r27, r1
    1436:	48 f1       	brcs	.+82     	; 0x148a <scheduler_start_timer_at_head+0xd8>
    1438:	80 91 fe 2d 	lds	r24, 0x2DFE	; 0x802dfe <scheduler_absolute_time_of_last_timeout>
    143c:	90 91 ff 2d 	lds	r25, 0x2DFF	; 0x802dff <scheduler_absolute_time_of_last_timeout+0x1>
    1440:	a0 91 00 2e 	lds	r26, 0x2E00	; 0x802e00 <scheduler_absolute_time_of_last_timeout+0x2>
    1444:	b0 91 01 2e 	lds	r27, 0x2E01	; 0x802e01 <scheduler_absolute_time_of_last_timeout+0x3>
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	af 4f       	sbci	r26, 0xFF	; 255
    144c:	bf 4f       	sbci	r27, 0xFF	; 255
    144e:	80 93 3e 28 	sts	0x283E, r24	; 0x80283e <scheduler_dummy+0x6>
    1452:	90 93 3f 28 	sts	0x283F, r25	; 0x80283f <scheduler_dummy+0x7>
    1456:	a0 93 40 28 	sts	0x2840, r26	; 0x802840 <scheduler_dummy+0x8>
    145a:	b0 93 41 28 	sts	0x2841, r27	; 0x802841 <scheduler_dummy+0x9>
    145e:	80 91 fa 2d 	lds	r24, 0x2DFA	; 0x802dfa <scheduler_list_head>
    1462:	90 91 fb 2d 	lds	r25, 0x2DFB	; 0x802dfb <scheduler_list_head+0x1>
    1466:	80 93 3c 28 	sts	0x283C, r24	; 0x80283c <scheduler_dummy+0x4>
    146a:	90 93 3d 28 	sts	0x283D, r25	; 0x80283d <scheduler_dummy+0x5>
    146e:	88 e3       	ldi	r24, 0x38	; 56
    1470:	98 e2       	ldi	r25, 0x28	; 40
    1472:	80 93 fa 2d 	sts	0x2DFA, r24	; 0x802dfa <scheduler_list_head>
    1476:	90 93 fb 2d 	sts	0x2DFB, r25	; 0x802dfb <scheduler_list_head+0x1>
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	9f ef       	ldi	r25, 0xFF	; 255
    147e:	a0 e0       	ldi	r26, 0x00	; 0
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	ab 83       	std	Y+3, r26	; 0x03
    1488:	bc 83       	std	Y+4, r27	; 0x04
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	9a 81       	ldd	r25, Y+2	; 0x02
    148e:	ab 81       	ldd	r26, Y+3	; 0x03
    1490:	bc 81       	ldd	r27, Y+4	; 0x04
    1492:	bc 01       	movw	r22, r24
    1494:	cd 01       	movw	r24, r26
    1496:	0e 94 90 09 	call	0x1320	; 0x1320 <scheduler_set_timer_duration>
    149a:	80 e4       	ldi	r24, 0x40	; 64
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	20 e4       	ldi	r18, 0x40	; 64
    14a0:	31 e0       	ldi	r19, 0x01	; 1
    14a2:	f9 01       	movw	r30, r18
    14a4:	22 81       	ldd	r18, Z+2	; 0x02
    14a6:	21 60       	ori	r18, 0x01	; 1
    14a8:	fc 01       	movw	r30, r24
    14aa:	22 83       	std	Z+2, r18	; 0x02
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	80 93 06 2e 	sts	0x2E06, r24	; 0x802e06 <scheduler_is_running>
    14b2:	24 96       	adiw	r28, 0x04	; 4
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <scheduler_enqueue_callback>:
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <scheduler_enqueue_callback+0x6>
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <scheduler_enqueue_callback+0x8>
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	8b 83       	std	Y+3, r24	; 0x03
    14cc:	9c 83       	std	Y+4, r25	; 0x04
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	fc 01       	movw	r30, r24
    14d4:	14 82       	std	Z+4, r1	; 0x04
    14d6:	15 82       	std	Z+5, r1	; 0x05
    14d8:	80 91 fc 2d 	lds	r24, 0x2DFC	; 0x802dfc <scheduler_execute_queue_head>
    14dc:	90 91 fd 2d 	lds	r25, 0x2DFD	; 0x802dfd <scheduler_execute_queue_head+0x1>
    14e0:	89 2b       	or	r24, r25
    14e2:	39 f4       	brne	.+14     	; 0x14f2 <scheduler_enqueue_callback+0x34>
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	80 93 fc 2d 	sts	0x2DFC, r24	; 0x802dfc <scheduler_execute_queue_head>
    14ec:	90 93 fd 2d 	sts	0x2DFD, r25	; 0x802dfd <scheduler_execute_queue_head+0x1>
    14f0:	1c c0       	rjmp	.+56     	; 0x152a <scheduler_enqueue_callback+0x6c>
    14f2:	80 91 fc 2d 	lds	r24, 0x2DFC	; 0x802dfc <scheduler_execute_queue_head>
    14f6:	90 91 fd 2d 	lds	r25, 0x2DFD	; 0x802dfd <scheduler_execute_queue_head+0x1>
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	9a 83       	std	Y+2, r25	; 0x02
    14fe:	07 c0       	rjmp	.+14     	; 0x150e <scheduler_enqueue_callback+0x50>
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	9a 81       	ldd	r25, Y+2	; 0x02
    1504:	fc 01       	movw	r30, r24
    1506:	84 81       	ldd	r24, Z+4	; 0x04
    1508:	95 81       	ldd	r25, Z+5	; 0x05
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	9a 83       	std	Y+2, r25	; 0x02
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	9a 81       	ldd	r25, Y+2	; 0x02
    1512:	fc 01       	movw	r30, r24
    1514:	84 81       	ldd	r24, Z+4	; 0x04
    1516:	95 81       	ldd	r25, Z+5	; 0x05
    1518:	89 2b       	or	r24, r25
    151a:	91 f7       	brne	.-28     	; 0x1500 <scheduler_enqueue_callback+0x42>
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	9a 81       	ldd	r25, Y+2	; 0x02
    1520:	2b 81       	ldd	r18, Y+3	; 0x03
    1522:	3c 81       	ldd	r19, Y+4	; 0x04
    1524:	fc 01       	movw	r30, r24
    1526:	24 83       	std	Z+4, r18	; 0x04
    1528:	35 83       	std	Z+5, r19	; 0x05
    152a:	24 96       	adiw	r28, 0x04	; 4
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	08 95       	ret

00001536 <__vector_3>:

// NOTE: assumes the callback completes before the next timer tick
ISR(RTC_CNT_vect)
{
    1536:	1f 92       	push	r1
    1538:	0f 92       	push	r0
    153a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    153e:	0f 92       	push	r0
    1540:	11 24       	eor	r1, r1
    1542:	2f 93       	push	r18
    1544:	3f 93       	push	r19
    1546:	4f 93       	push	r20
    1548:	5f 93       	push	r21
    154a:	6f 93       	push	r22
    154c:	7f 93       	push	r23
    154e:	8f 93       	push	r24
    1550:	9f 93       	push	r25
    1552:	af 93       	push	r26
    1554:	bf 93       	push	r27
    1556:	ef 93       	push	r30
    1558:	ff 93       	push	r31
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	00 d0       	rcall	.+0      	; 0x1560 <__vector_3+0x2a>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
	timer_struct_t *next                    = scheduler_list_head->next;
    1564:	80 91 fa 2d 	lds	r24, 0x2DFA	; 0x802dfa <scheduler_list_head>
    1568:	90 91 fb 2d 	lds	r25, 0x2DFB	; 0x802dfb <scheduler_list_head+0x1>
    156c:	fc 01       	movw	r30, r24
    156e:	84 81       	ldd	r24, Z+4	; 0x04
    1570:	95 81       	ldd	r25, Z+5	; 0x05
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	9a 83       	std	Y+2, r25	; 0x02
	scheduler_absolute_time_of_last_timeout = scheduler_list_head->absolute_time;
    1576:	80 91 fa 2d 	lds	r24, 0x2DFA	; 0x802dfa <scheduler_list_head>
    157a:	90 91 fb 2d 	lds	r25, 0x2DFB	; 0x802dfb <scheduler_list_head+0x1>
    157e:	fc 01       	movw	r30, r24
    1580:	86 81       	ldd	r24, Z+6	; 0x06
    1582:	97 81       	ldd	r25, Z+7	; 0x07
    1584:	a0 85       	ldd	r26, Z+8	; 0x08
    1586:	b1 85       	ldd	r27, Z+9	; 0x09
    1588:	80 93 fe 2d 	sts	0x2DFE, r24	; 0x802dfe <scheduler_absolute_time_of_last_timeout>
    158c:	90 93 ff 2d 	sts	0x2DFF, r25	; 0x802dff <scheduler_absolute_time_of_last_timeout+0x1>
    1590:	a0 93 00 2e 	sts	0x2E00, r26	; 0x802e00 <scheduler_absolute_time_of_last_timeout+0x2>
    1594:	b0 93 01 2e 	sts	0x2E01, r27	; 0x802e01 <scheduler_absolute_time_of_last_timeout+0x3>
	scheduler_last_timer_load               = 0;
    1598:	10 92 02 2e 	sts	0x2E02, r1	; 0x802e02 <scheduler_last_timer_load>
    159c:	10 92 03 2e 	sts	0x2E03, r1	; 0x802e03 <scheduler_last_timer_load+0x1>
    15a0:	10 92 04 2e 	sts	0x2E04, r1	; 0x802e04 <scheduler_last_timer_load+0x2>
    15a4:	10 92 05 2e 	sts	0x2E05, r1	; 0x802e05 <scheduler_last_timer_load+0x3>

	if (scheduler_list_head != &scheduler_dummy)
    15a8:	80 91 fa 2d 	lds	r24, 0x2DFA	; 0x802dfa <scheduler_list_head>
    15ac:	90 91 fb 2d 	lds	r25, 0x2DFB	; 0x802dfb <scheduler_list_head+0x1>
    15b0:	88 53       	subi	r24, 0x38	; 56
    15b2:	98 42       	sbci	r25, 0x28	; 40
    15b4:	31 f0       	breq	.+12     	; 0x15c2 <__vector_3+0x8c>
		scheduler_enqueue_callback(scheduler_list_head);
    15b6:	80 91 fa 2d 	lds	r24, 0x2DFA	; 0x802dfa <scheduler_list_head>
    15ba:	90 91 fb 2d 	lds	r25, 0x2DFB	; 0x802dfb <scheduler_list_head+0x1>
    15be:	0e 94 5f 0a 	call	0x14be	; 0x14be <scheduler_enqueue_callback>

	// Remove expired timer for the list now (it is always the one at the head)
	scheduler_list_head = next;
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	80 93 fa 2d 	sts	0x2DFA, r24	; 0x802dfa <scheduler_list_head>
    15ca:	90 93 fb 2d 	sts	0x2DFB, r25	; 0x802dfb <scheduler_list_head+0x1>

	scheduler_start_timer_at_head();
    15ce:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <scheduler_start_timer_at_head>

	RTC.INTFLAGS = RTC_OVF_bm;
    15d2:	80 e4       	ldi	r24, 0x40	; 64
    15d4:	91 e0       	ldi	r25, 0x01	; 1
    15d6:	21 e0       	ldi	r18, 0x01	; 1
    15d8:	fc 01       	movw	r30, r24
    15da:	23 83       	std	Z+3, r18	; 0x03
}
    15dc:	00 00       	nop
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	bf 91       	pop	r27
    15ec:	af 91       	pop	r26
    15ee:	9f 91       	pop	r25
    15f0:	8f 91       	pop	r24
    15f2:	7f 91       	pop	r23
    15f4:	6f 91       	pop	r22
    15f6:	5f 91       	pop	r21
    15f8:	4f 91       	pop	r20
    15fa:	3f 91       	pop	r19
    15fc:	2f 91       	pop	r18
    15fe:	0f 90       	pop	r0
    1600:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1604:	0f 90       	pop	r0
    1606:	1f 90       	pop	r1
    1608:	18 95       	reti

0000160a <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART1.STATUS & USART_RXCIF_bm))
		;
	return USART1.RXDATAL;
}
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	80 e2       	ldi	r24, 0x20	; 32
    1614:	98 e0       	ldi	r25, 0x08	; 8
    1616:	26 eb       	ldi	r18, 0xB6	; 182
    1618:	32 e0       	ldi	r19, 0x02	; 2
    161a:	fc 01       	movw	r30, r24
    161c:	20 87       	std	Z+8, r18	; 0x08
    161e:	31 87       	std	Z+9, r19	; 0x09
    1620:	80 e2       	ldi	r24, 0x20	; 32
    1622:	98 e0       	ldi	r25, 0x08	; 8
    1624:	20 ec       	ldi	r18, 0xC0	; 192
    1626:	fc 01       	movw	r30, r24
    1628:	26 83       	std	Z+6, r18	; 0x06
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	08 95       	ret

00001632 <USART_1_write>:
 * \param[in] data The character to write to the USART
 *
 * \return Nothing
 */
void USART_1_write(const uint8_t data)
{
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	1f 92       	push	r1
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	89 83       	std	Y+1, r24	; 0x01
	while (!(USART1.STATUS & USART_DREIF_bm))
    163e:	00 00       	nop
    1640:	80 e2       	ldi	r24, 0x20	; 32
    1642:	98 e0       	ldi	r25, 0x08	; 8
    1644:	fc 01       	movw	r30, r24
    1646:	84 81       	ldd	r24, Z+4	; 0x04
    1648:	88 2f       	mov	r24, r24
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	80 72       	andi	r24, 0x20	; 32
    164e:	99 27       	eor	r25, r25
    1650:	89 2b       	or	r24, r25
    1652:	b1 f3       	breq	.-20     	; 0x1640 <USART_1_write+0xe>
		;
	USART1.TXDATAL = data;
    1654:	80 e2       	ldi	r24, 0x20	; 32
    1656:	98 e0       	ldi	r25, 0x08	; 8
    1658:	29 81       	ldd	r18, Y+1	; 0x01
    165a:	fc 01       	movw	r30, r24
    165c:	22 83       	std	Z+2, r18	; 0x02
}
    165e:	00 00       	nop
    1660:	0f 90       	pop	r0
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	08 95       	ret

00001668 <PORTA_set_pin_dir>:
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_deinit(void)
{
	return M2M_SUCCESS;
}
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	00 d0       	rcall	.+0      	; 0x166e <PORTA_set_pin_dir+0x6>
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	6a 83       	std	Y+2, r22	; 0x02
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	88 2f       	mov	r24, r24
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	91 05       	cpc	r25, r1
    1680:	e1 f0       	breq	.+56     	; 0x16ba <PORTA_set_pin_dir+0x52>
    1682:	82 30       	cpi	r24, 0x02	; 2
    1684:	91 05       	cpc	r25, r1
    1686:	71 f1       	breq	.+92     	; 0x16e4 <PORTA_set_pin_dir+0x7c>
    1688:	89 2b       	or	r24, r25
    168a:	09 f0       	breq	.+2      	; 0x168e <PORTA_set_pin_dir+0x26>
    168c:	3b c0       	rjmp	.+118    	; 0x1704 <PORTA_set_pin_dir+0x9c>
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	fc 01       	movw	r30, r24
    1698:	80 81       	ld	r24, Z
    169a:	68 2f       	mov	r22, r24
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	48 2f       	mov	r20, r24
    16a0:	50 e0       	ldi	r21, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <PORTA_set_pin_dir+0x44>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	4a 95       	dec	r20
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <PORTA_set_pin_dir+0x40>
    16b0:	80 95       	com	r24
    16b2:	86 23       	and	r24, r22
    16b4:	f9 01       	movw	r30, r18
    16b6:	80 83       	st	Z, r24
    16b8:	25 c0       	rjmp	.+74     	; 0x1704 <PORTA_set_pin_dir+0x9c>
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	fc 01       	movw	r30, r24
    16c4:	80 81       	ld	r24, Z
    16c6:	68 2f       	mov	r22, r24
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	48 2f       	mov	r20, r24
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <PORTA_set_pin_dir+0x70>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	4a 95       	dec	r20
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <PORTA_set_pin_dir+0x6c>
    16dc:	86 2b       	or	r24, r22
    16de:	f9 01       	movw	r30, r18
    16e0:	80 83       	st	Z, r24
    16e2:	10 c0       	rjmp	.+32     	; 0x1704 <PORTA_set_pin_dir+0x9c>
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	88 2f       	mov	r24, r24
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	80 5f       	subi	r24, 0xF0	; 240
    16ec:	9b 4f       	sbci	r25, 0xFB	; 251
    16ee:	29 81       	ldd	r18, Y+1	; 0x01
    16f0:	22 2f       	mov	r18, r18
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	20 5f       	subi	r18, 0xF0	; 240
    16f6:	3b 4f       	sbci	r19, 0xFB	; 251
    16f8:	f9 01       	movw	r30, r18
    16fa:	20 81       	ld	r18, Z
    16fc:	28 60       	ori	r18, 0x08	; 8
    16fe:	fc 01       	movw	r30, r24
    1700:	20 83       	st	Z, r18
    1702:	00 00       	nop
    1704:	00 00       	nop
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	08 95       	ret

00001710 <PORTA_set_pin_level>:
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	00 d0       	rcall	.+0      	; 0x1716 <PORTA_set_pin_level+0x6>
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	6a 83       	std	Y+2, r22	; 0x02
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	88 23       	and	r24, r24
    1722:	a9 f0       	breq	.+42     	; 0x174e <PORTA_set_pin_level+0x3e>
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	fc 01       	movw	r30, r24
    172e:	81 81       	ldd	r24, Z+1	; 0x01
    1730:	68 2f       	mov	r22, r24
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	48 2f       	mov	r20, r24
    1736:	50 e0       	ldi	r21, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <PORTA_set_pin_level+0x32>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	4a 95       	dec	r20
    1744:	e2 f7       	brpl	.-8      	; 0x173e <PORTA_set_pin_level+0x2e>
    1746:	86 2b       	or	r24, r22
    1748:	f9 01       	movw	r30, r18
    174a:	81 83       	std	Z+1, r24	; 0x01
    174c:	15 c0       	rjmp	.+42     	; 0x1778 <PORTA_set_pin_level+0x68>
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	fc 01       	movw	r30, r24
    1758:	81 81       	ldd	r24, Z+1	; 0x01
    175a:	68 2f       	mov	r22, r24
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	48 2f       	mov	r20, r24
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 c0       	rjmp	.+4      	; 0x176c <PORTA_set_pin_level+0x5c>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	4a 95       	dec	r20
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <PORTA_set_pin_level+0x58>
    1770:	80 95       	com	r24
    1772:	86 23       	and	r24, r22
    1774:	f9 01       	movw	r30, r18
    1776:	81 83       	std	Z+1, r24	; 0x01
    1778:	00 00       	nop
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	08 95       	ret

00001784 <PORTC_set_pin_pull_mode>:
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	00 d0       	rcall	.+0      	; 0x178a <PORTC_set_pin_pull_mode+0x6>
    178a:	00 d0       	rcall	.+0      	; 0x178c <PORTC_set_pin_pull_mode+0x8>
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	8b 83       	std	Y+3, r24	; 0x03
    1792:	6c 83       	std	Y+4, r22	; 0x04
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	80 5b       	subi	r24, 0xB0	; 176
    179c:	9b 4f       	sbci	r25, 0xFB	; 251
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	9a 83       	std	Y+2, r25	; 0x02
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	59 f4       	brne	.+22     	; 0x17be <PORTC_set_pin_pull_mode+0x3a>
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	fc 01       	movw	r30, r24
    17ae:	80 81       	ld	r24, Z
    17b0:	28 2f       	mov	r18, r24
    17b2:	28 60       	ori	r18, 0x08	; 8
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	9a 81       	ldd	r25, Y+2	; 0x02
    17b8:	fc 01       	movw	r30, r24
    17ba:	20 83       	st	Z, r18
    17bc:	0d c0       	rjmp	.+26     	; 0x17d8 <PORTC_set_pin_pull_mode+0x54>
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	88 23       	and	r24, r24
    17c2:	51 f4       	brne	.+20     	; 0x17d8 <PORTC_set_pin_pull_mode+0x54>
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	9a 81       	ldd	r25, Y+2	; 0x02
    17c8:	fc 01       	movw	r30, r24
    17ca:	80 81       	ld	r24, Z
    17cc:	28 2f       	mov	r18, r24
    17ce:	27 7f       	andi	r18, 0xF7	; 247
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	fc 01       	movw	r30, r24
    17d6:	20 83       	st	Z, r18
    17d8:	00 00       	nop
    17da:	24 96       	adiw	r28, 0x04	; 4
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	08 95       	ret

000017e6 <PORTC_pin_set_isc>:
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <PORTC_pin_set_isc+0x6>
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <PORTC_pin_set_isc+0x8>
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	8b 83       	std	Y+3, r24	; 0x03
    17f4:	6c 83       	std	Y+4, r22	; 0x04
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	80 5b       	subi	r24, 0xB0	; 176
    17fe:	9b 4f       	sbci	r25, 0xFB	; 251
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	9a 83       	std	Y+2, r25	; 0x02
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	9a 81       	ldd	r25, Y+2	; 0x02
    1808:	fc 01       	movw	r30, r24
    180a:	80 81       	ld	r24, Z
    180c:	98 2f       	mov	r25, r24
    180e:	98 7f       	andi	r25, 0xF8	; 248
    1810:	8c 81       	ldd	r24, Y+4	; 0x04
    1812:	89 2b       	or	r24, r25
    1814:	28 2f       	mov	r18, r24
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	9a 81       	ldd	r25, Y+2	; 0x02
    181a:	fc 01       	movw	r30, r24
    181c:	20 83       	st	Z, r18
    181e:	00 00       	nop
    1820:	24 96       	adiw	r28, 0x04	; 4
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <PORTC_set_pin_dir>:
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	00 d0       	rcall	.+0      	; 0x1832 <PORTC_set_pin_dir+0x6>
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	89 83       	std	Y+1, r24	; 0x01
    1838:	6a 83       	std	Y+2, r22	; 0x02
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	88 2f       	mov	r24, r24
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	91 05       	cpc	r25, r1
    1844:	e1 f0       	breq	.+56     	; 0x187e <PORTC_set_pin_dir+0x52>
    1846:	82 30       	cpi	r24, 0x02	; 2
    1848:	91 05       	cpc	r25, r1
    184a:	71 f1       	breq	.+92     	; 0x18a8 <PORTC_set_pin_dir+0x7c>
    184c:	89 2b       	or	r24, r25
    184e:	09 f0       	breq	.+2      	; 0x1852 <PORTC_set_pin_dir+0x26>
    1850:	3b c0       	rjmp	.+118    	; 0x18c8 <PORTC_set_pin_dir+0x9c>
    1852:	88 e0       	ldi	r24, 0x08	; 8
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	28 e0       	ldi	r18, 0x08	; 8
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	f9 01       	movw	r30, r18
    185c:	20 81       	ld	r18, Z
    185e:	62 2f       	mov	r22, r18
    1860:	29 81       	ldd	r18, Y+1	; 0x01
    1862:	42 2f       	mov	r20, r18
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	21 e0       	ldi	r18, 0x01	; 1
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <PORTC_set_pin_dir+0x44>
    186c:	22 0f       	add	r18, r18
    186e:	33 1f       	adc	r19, r19
    1870:	4a 95       	dec	r20
    1872:	e2 f7       	brpl	.-8      	; 0x186c <PORTC_set_pin_dir+0x40>
    1874:	20 95       	com	r18
    1876:	26 23       	and	r18, r22
    1878:	fc 01       	movw	r30, r24
    187a:	20 83       	st	Z, r18
    187c:	25 c0       	rjmp	.+74     	; 0x18c8 <PORTC_set_pin_dir+0x9c>
    187e:	88 e0       	ldi	r24, 0x08	; 8
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	28 e0       	ldi	r18, 0x08	; 8
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	f9 01       	movw	r30, r18
    1888:	20 81       	ld	r18, Z
    188a:	62 2f       	mov	r22, r18
    188c:	29 81       	ldd	r18, Y+1	; 0x01
    188e:	42 2f       	mov	r20, r18
    1890:	50 e0       	ldi	r21, 0x00	; 0
    1892:	21 e0       	ldi	r18, 0x01	; 1
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	02 c0       	rjmp	.+4      	; 0x189c <PORTC_set_pin_dir+0x70>
    1898:	22 0f       	add	r18, r18
    189a:	33 1f       	adc	r19, r19
    189c:	4a 95       	dec	r20
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <PORTC_set_pin_dir+0x6c>
    18a0:	26 2b       	or	r18, r22
    18a2:	fc 01       	movw	r30, r24
    18a4:	20 83       	st	Z, r18
    18a6:	10 c0       	rjmp	.+32     	; 0x18c8 <PORTC_set_pin_dir+0x9c>
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	80 5b       	subi	r24, 0xB0	; 176
    18b0:	9b 4f       	sbci	r25, 0xFB	; 251
    18b2:	29 81       	ldd	r18, Y+1	; 0x01
    18b4:	22 2f       	mov	r18, r18
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	20 5b       	subi	r18, 0xB0	; 176
    18ba:	3b 4f       	sbci	r19, 0xFB	; 251
    18bc:	f9 01       	movw	r30, r18
    18be:	20 81       	ld	r18, Z
    18c0:	28 60       	ori	r18, 0x08	; 8
    18c2:	fc 01       	movw	r30, r24
    18c4:	20 83       	st	Z, r18
    18c6:	00 00       	nop
    18c8:	00 00       	nop
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	08 95       	ret

000018d4 <PORTC_set_pin_level>:
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	00 d0       	rcall	.+0      	; 0x18da <PORTC_set_pin_level+0x6>
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	89 83       	std	Y+1, r24	; 0x01
    18e0:	6a 83       	std	Y+2, r22	; 0x02
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	88 23       	and	r24, r24
    18e6:	a9 f0       	breq	.+42     	; 0x1912 <PORTC_set_pin_level+0x3e>
    18e8:	88 e0       	ldi	r24, 0x08	; 8
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	28 e0       	ldi	r18, 0x08	; 8
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	f9 01       	movw	r30, r18
    18f2:	21 81       	ldd	r18, Z+1	; 0x01
    18f4:	62 2f       	mov	r22, r18
    18f6:	29 81       	ldd	r18, Y+1	; 0x01
    18f8:	42 2f       	mov	r20, r18
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	21 e0       	ldi	r18, 0x01	; 1
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <PORTC_set_pin_level+0x32>
    1902:	22 0f       	add	r18, r18
    1904:	33 1f       	adc	r19, r19
    1906:	4a 95       	dec	r20
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <PORTC_set_pin_level+0x2e>
    190a:	26 2b       	or	r18, r22
    190c:	fc 01       	movw	r30, r24
    190e:	21 83       	std	Z+1, r18	; 0x01
    1910:	15 c0       	rjmp	.+42     	; 0x193c <PORTC_set_pin_level+0x68>
    1912:	88 e0       	ldi	r24, 0x08	; 8
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	28 e0       	ldi	r18, 0x08	; 8
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	f9 01       	movw	r30, r18
    191c:	21 81       	ldd	r18, Z+1	; 0x01
    191e:	62 2f       	mov	r22, r18
    1920:	29 81       	ldd	r18, Y+1	; 0x01
    1922:	42 2f       	mov	r20, r18
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	21 e0       	ldi	r18, 0x01	; 1
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <PORTC_set_pin_level+0x5c>
    192c:	22 0f       	add	r18, r18
    192e:	33 1f       	adc	r19, r19
    1930:	4a 95       	dec	r20
    1932:	e2 f7       	brpl	.-8      	; 0x192c <PORTC_set_pin_level+0x58>
    1934:	20 95       	com	r18
    1936:	26 23       	and	r18, r22
    1938:	fc 01       	movw	r30, r24
    193a:	21 83       	std	Z+1, r18	; 0x01
    193c:	00 00       	nop
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	08 95       	ret

00001948 <PORTC_get_pin_level>:
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	1f 92       	push	r1
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	88 e0       	ldi	r24, 0x08	; 8
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	fc 01       	movw	r30, r24
    195a:	82 81       	ldd	r24, Z+2	; 0x02
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	48 2f       	mov	r20, r24
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <PORTC_get_pin_level+0x28>
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	4a 95       	dec	r20
    1972:	e2 f7       	brpl	.-8      	; 0x196c <PORTC_get_pin_level+0x24>
    1974:	82 23       	and	r24, r18
    1976:	93 23       	and	r25, r19
    1978:	21 e0       	ldi	r18, 0x01	; 1
    197a:	89 2b       	or	r24, r25
    197c:	09 f4       	brne	.+2      	; 0x1980 <PORTC_get_pin_level+0x38>
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	82 2f       	mov	r24, r18
    1982:	0f 90       	pop	r0
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	08 95       	ret

0000198a <CONF_WIFI_M2M_RESET_PIN_set_dir>:
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	1f 92       	push	r1
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	69 81       	ldd	r22, Y+1	; 0x01
    1998:	82 e0       	ldi	r24, 0x02	; 2
    199a:	0e 94 34 0b 	call	0x1668	; 0x1668 <PORTA_set_pin_dir>
    199e:	00 00       	nop
    19a0:	0f 90       	pop	r0
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	08 95       	ret

000019a8 <CONF_WIFI_M2M_RESET_PIN_set_level>:
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	1f 92       	push	r1
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	69 81       	ldd	r22, Y+1	; 0x01
    19b6:	82 e0       	ldi	r24, 0x02	; 2
    19b8:	0e 94 88 0b 	call	0x1710	; 0x1710 <PORTA_set_pin_level>
    19bc:	00 00       	nop
    19be:	0f 90       	pop	r0
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	08 95       	ret

000019c6 <CONF_WIFI_M2M_WAKE_PIN_set_dir>:
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	1f 92       	push	r1
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	69 81       	ldd	r22, Y+1	; 0x01
    19d4:	83 e0       	ldi	r24, 0x03	; 3
    19d6:	0e 94 34 0b 	call	0x1668	; 0x1668 <PORTA_set_pin_dir>
    19da:	00 00       	nop
    19dc:	0f 90       	pop	r0
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	08 95       	ret

000019e4 <CONF_WIFI_M2M_INT_PIN_set_pull_mode>:
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	1f 92       	push	r1
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	69 81       	ldd	r22, Y+1	; 0x01
    19f2:	86 e0       	ldi	r24, 0x06	; 6
    19f4:	0e 94 c2 0b 	call	0x1784	; 0x1784 <PORTC_set_pin_pull_mode>
    19f8:	00 00       	nop
    19fa:	0f 90       	pop	r0
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <CONF_WIFI_M2M_INT_PIN_set_dir>:
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	1f 92       	push	r1
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	69 81       	ldd	r22, Y+1	; 0x01
    1a10:	86 e0       	ldi	r24, 0x06	; 6
    1a12:	0e 94 16 0c 	call	0x182c	; 0x182c <PORTC_set_pin_dir>
    1a16:	00 00       	nop
    1a18:	0f 90       	pop	r0
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	08 95       	ret

00001a20 <CONF_WIFI_M2M_INT_PIN_set_isc>:
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	1f 92       	push	r1
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	69 81       	ldd	r22, Y+1	; 0x01
    1a2e:	86 e0       	ldi	r24, 0x06	; 6
    1a30:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <PORTC_pin_set_isc>
    1a34:	00 00       	nop
    1a36:	0f 90       	pop	r0
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	08 95       	ret

00001a3e <CONF_WIFI_M2M_INT_PIN_get_level>:
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	86 e0       	ldi	r24, 0x06	; 6
    1a48:	0e 94 a4 0c 	call	0x1948	; 0x1948 <PORTC_get_pin_level>
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	08 95       	ret

00001a52 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>:
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	1f 92       	push	r1
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    1a5e:	69 81       	ldd	r22, Y+1	; 0x01
    1a60:	87 e0       	ldi	r24, 0x07	; 7
    1a62:	0e 94 16 0c 	call	0x182c	; 0x182c <PORTC_set_pin_dir>
    1a66:	00 00       	nop
    1a68:	0f 90       	pop	r0
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	08 95       	ret

00001a70 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>:
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	1f 92       	push	r1
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	69 81       	ldd	r22, Y+1	; 0x01
    1a7e:	87 e0       	ldi	r24, 0x07	; 7
    1a80:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <PORTC_set_pin_level>
    1a84:	00 00       	nop
    1a86:	0f 90       	pop	r0
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	08 95       	ret

00001a8e <__vector_24>:
    1a8e:	1f 92       	push	r1
    1a90:	0f 92       	push	r0
    1a92:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1a96:	0f 92       	push	r0
    1a98:	11 24       	eor	r1, r1
    1a9a:	2f 93       	push	r18
    1a9c:	3f 93       	push	r19
    1a9e:	4f 93       	push	r20
    1aa0:	5f 93       	push	r21
    1aa2:	6f 93       	push	r22
    1aa4:	7f 93       	push	r23
    1aa6:	8f 93       	push	r24
    1aa8:	9f 93       	push	r25
    1aaa:	af 93       	push	r26
    1aac:	bf 93       	push	r27
    1aae:	ef 93       	push	r30
    1ab0:	ff 93       	push	r31
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <CONF_WIFI_M2M_INT_PIN_get_level>
    1abe:	98 2f       	mov	r25, r24
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	89 27       	eor	r24, r25
    1ac4:	88 23       	and	r24, r24
    1ac6:	61 f0       	breq	.+24     	; 0x1ae0 <__vector_24+0x52>
    1ac8:	80 91 07 2e 	lds	r24, 0x2E07	; 0x802e07 <gpfIsr>
    1acc:	90 91 08 2e 	lds	r25, 0x2E08	; 0x802e08 <gpfIsr+0x1>
    1ad0:	89 2b       	or	r24, r25
    1ad2:	31 f0       	breq	.+12     	; 0x1ae0 <__vector_24+0x52>
    1ad4:	80 91 07 2e 	lds	r24, 0x2E07	; 0x802e07 <gpfIsr>
    1ad8:	90 91 08 2e 	lds	r25, 0x2E08	; 0x802e08 <gpfIsr+0x1>
    1adc:	fc 01       	movw	r30, r24
    1ade:	09 95       	icall
    1ae0:	8b e0       	ldi	r24, 0x0B	; 11
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	20 ec       	ldi	r18, 0xC0	; 192
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	20 83       	st	Z, r18
    1aea:	00 00       	nop
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	ff 91       	pop	r31
    1af2:	ef 91       	pop	r30
    1af4:	bf 91       	pop	r27
    1af6:	af 91       	pop	r26
    1af8:	9f 91       	pop	r25
    1afa:	8f 91       	pop	r24
    1afc:	7f 91       	pop	r23
    1afe:	6f 91       	pop	r22
    1b00:	5f 91       	pop	r21
    1b02:	4f 91       	pop	r20
    1b04:	3f 91       	pop	r19
    1b06:	2f 91       	pop	r18
    1b08:	0f 90       	pop	r0
    1b0a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1b0e:	0f 90       	pop	r0
    1b10:	1f 90       	pop	r1
    1b12:	18 95       	reti

00001b14 <init_chip_pins>:
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	0e 94 c5 0c 	call	0x198a	; 0x198a <CONF_WIFI_M2M_RESET_PIN_set_dir>
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <CONF_WIFI_M2M_WAKE_PIN_set_dir>
    1b2e:	00 00       	nop
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	08 95       	ret

00001b36 <nm_bsp_init>:
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	10 92 07 2e 	sts	0x2E07, r1	; 0x802e07 <gpfIsr>
    1b42:	10 92 08 2e 	sts	0x2E08, r1	; 0x802e08 <gpfIsr+0x1>
    1b46:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <init_chip_pins>
    1b4a:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <nm_bsp_reset>
    1b4e:	78 94       	sei
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	08 95       	ret

00001b58 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
	//ioport_set_pin_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, false);
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(false);
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>
	
	//ioport_set_pin_level(CONF_WIFI_M2M_RESET_PIN, false);
	CONF_WIFI_M2M_RESET_PIN_set_level(false);
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <CONF_WIFI_M2M_RESET_PIN_set_level>
	
// 	asm volatile ("nop");
// 	PORTB_set_pin_level(5,true);
	nm_bsp_sleep(1);
    1b6c:	61 e0       	ldi	r22, 0x01	; 1
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <nm_bsp_sleep>
// 	PORTB_set_pin_level(5,false);
// 	asm volatile ("nop");

	//ioport_set_pin_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, true);
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(true);
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>
	
	nm_bsp_sleep(10);
    1b7e:	6a e0       	ldi	r22, 0x0A	; 10
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <nm_bsp_sleep>

	//ioport_set_pin_level(CONF_WIFI_M2M_RESET_PIN, true);
	CONF_WIFI_M2M_RESET_PIN_set_level(true);
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <CONF_WIFI_M2M_RESET_PIN_set_level>
	
	//nm_bsp_sleep(100);
}
    1b90:	00 00       	nop
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	08 95       	ret

00001b98 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	62 97       	sbiw	r28, 0x12	; 18
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	6f 87       	std	Y+15, r22	; 0x0f
    1ba8:	78 8b       	std	Y+16, r23	; 0x10
    1baa:	89 8b       	std	Y+17, r24	; 0x11
    1bac:	9a 8b       	std	Y+18, r25	; 0x12
	while (u32TimeMsec--) {
    1bae:	72 c0       	rjmp	.+228    	; 0x1c94 <nm_bsp_sleep+0xfc>
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	a0 e8       	ldi	r26, 0x80	; 128
    1bb6:	bf e3       	ldi	r27, 0x3F	; 63
    1bb8:	89 83       	std	Y+1, r24	; 0x01
    1bba:	9a 83       	std	Y+2, r25	; 0x02
    1bbc:	ab 83       	std	Y+3, r26	; 0x03
    1bbe:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e4       	ldi	r19, 0x40	; 64
    1bc4:	4c e1       	ldi	r20, 0x1C	; 28
    1bc6:	55 e4       	ldi	r21, 0x45	; 69
    1bc8:	69 81       	ldd	r22, Y+1	; 0x01
    1bca:	7a 81       	ldd	r23, Y+2	; 0x02
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd0:	0e 94 d7 36 	call	0x6dae	; 0x6dae <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	8d 83       	std	Y+5, r24	; 0x05
    1bda:	9e 83       	std	Y+6, r25	; 0x06
    1bdc:	af 83       	std	Y+7, r26	; 0x07
    1bde:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e8       	ldi	r20, 0x80	; 128
    1be6:	5f e3       	ldi	r21, 0x3F	; 63
    1be8:	6d 81       	ldd	r22, Y+5	; 0x05
    1bea:	7e 81       	ldd	r23, Y+6	; 0x06
    1bec:	8f 81       	ldd	r24, Y+7	; 0x07
    1bee:	98 85       	ldd	r25, Y+8	; 0x08
    1bf0:	0e 94 51 36 	call	0x6ca2	; 0x6ca2 <__cmpsf2>
    1bf4:	88 23       	and	r24, r24
    1bf6:	2c f4       	brge	.+10     	; 0x1c02 <nm_bsp_sleep+0x6a>
		__ticks = 1;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	89 87       	std	Y+9, r24	; 0x09
    1bfe:	9a 87       	std	Y+10, r25	; 0x0a
    1c00:	3f c0       	rjmp	.+126    	; 0x1c80 <nm_bsp_sleep+0xe8>
	else if (__tmp > 65535)
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	3f ef       	ldi	r19, 0xFF	; 255
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	57 e4       	ldi	r21, 0x47	; 71
    1c0a:	6d 81       	ldd	r22, Y+5	; 0x05
    1c0c:	7e 81       	ldd	r23, Y+6	; 0x06
    1c0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c10:	98 85       	ldd	r25, Y+8	; 0x08
    1c12:	0e 94 d2 36 	call	0x6da4	; 0x6da4 <__gesf2>
    1c16:	18 16       	cp	r1, r24
    1c18:	4c f5       	brge	.+82     	; 0x1c6c <nm_bsp_sleep+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e2       	ldi	r20, 0x20	; 32
    1c20:	51 e4       	ldi	r21, 0x41	; 65
    1c22:	69 81       	ldd	r22, Y+1	; 0x01
    1c24:	7a 81       	ldd	r23, Y+2	; 0x02
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2a:	0e 94 d7 36 	call	0x6dae	; 0x6dae <__mulsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	bc 01       	movw	r22, r24
    1c34:	cd 01       	movw	r24, r26
    1c36:	0e 94 56 36 	call	0x6cac	; 0x6cac <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	89 87       	std	Y+9, r24	; 0x09
    1c40:	9a 87       	std	Y+10, r25	; 0x0a
    1c42:	0f c0       	rjmp	.+30     	; 0x1c62 <nm_bsp_sleep+0xca>
    1c44:	8a ef       	ldi	r24, 0xFA	; 250
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	8b 87       	std	Y+11, r24	; 0x0b
    1c4a:	9c 87       	std	Y+12, r25	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	f1 f7       	brne	.-4      	; 0x1c50 <nm_bsp_sleep+0xb8>
    1c54:	8b 87       	std	Y+11, r24	; 0x0b
    1c56:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c58:	89 85       	ldd	r24, Y+9	; 0x09
    1c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	89 87       	std	Y+9, r24	; 0x09
    1c60:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c62:	89 85       	ldd	r24, Y+9	; 0x09
    1c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c66:	89 2b       	or	r24, r25
    1c68:	69 f7       	brne	.-38     	; 0x1c44 <nm_bsp_sleep+0xac>
    1c6a:	14 c0       	rjmp	.+40     	; 0x1c94 <nm_bsp_sleep+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6c:	6d 81       	ldd	r22, Y+5	; 0x05
    1c6e:	7e 81       	ldd	r23, Y+6	; 0x06
    1c70:	8f 81       	ldd	r24, Y+7	; 0x07
    1c72:	98 85       	ldd	r25, Y+8	; 0x08
    1c74:	0e 94 56 36 	call	0x6cac	; 0x6cac <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	89 87       	std	Y+9, r24	; 0x09
    1c7e:	9a 87       	std	Y+10, r25	; 0x0a
    1c80:	89 85       	ldd	r24, Y+9	; 0x09
    1c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c84:	8d 87       	std	Y+13, r24	; 0x0d
    1c86:	9e 87       	std	Y+14, r25	; 0x0e
    1c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <nm_bsp_sleep+0xf4>
    1c90:	8d 87       	std	Y+13, r24	; 0x0d
    1c92:	9e 87       	std	Y+14, r25	; 0x0e
    1c94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c96:	98 89       	ldd	r25, Y+16	; 0x10
    1c98:	a9 89       	ldd	r26, Y+17	; 0x11
    1c9a:	ba 89       	ldd	r27, Y+18	; 0x12
    1c9c:	9c 01       	movw	r18, r24
    1c9e:	ad 01       	movw	r20, r26
    1ca0:	21 50       	subi	r18, 0x01	; 1
    1ca2:	31 09       	sbc	r19, r1
    1ca4:	41 09       	sbc	r20, r1
    1ca6:	51 09       	sbc	r21, r1
    1ca8:	2f 87       	std	Y+15, r18	; 0x0f
    1caa:	38 8b       	std	Y+16, r19	; 0x10
    1cac:	49 8b       	std	Y+17, r20	; 0x11
    1cae:	5a 8b       	std	Y+18, r21	; 0x12
    1cb0:	89 2b       	or	r24, r25
    1cb2:	8a 2b       	or	r24, r26
    1cb4:	8b 2b       	or	r24, r27
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <nm_bsp_sleep+0x122>
    1cb8:	7b cf       	rjmp	.-266    	; 0x1bb0 <nm_bsp_sleep+0x18>
		_delay_ms(1);
	}
}
    1cba:	00 00       	nop
    1cbc:	62 96       	adiw	r28, 0x12	; 18
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	08 95       	ret

00001cc8 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <nm_bsp_register_isr+0x6>
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	89 83       	std	Y+1, r24	; 0x01
    1cd4:	9a 83       	std	Y+2, r25	; 0x02
	gpfIsr = pfIsr;
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	80 93 07 2e 	sts	0x2E07, r24	; 0x802e07 <gpfIsr>
    1cde:	90 93 08 2e 	sts	0x2E08, r25	; 0x802e08 <gpfIsr+0x1>

	//ioport_configure_pin(CONF_WIFI_M2M_INT_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	CONF_WIFI_M2M_INT_PIN_set_dir(PORT_DIR_IN);
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <CONF_WIFI_M2M_INT_PIN_set_dir>
	CONF_WIFI_M2M_INT_PIN_set_pull_mode(PORT_PULL_UP);
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <CONF_WIFI_M2M_INT_PIN_set_pull_mode>
	CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    1cee:	83 e0       	ldi	r24, 0x03	; 3
    1cf0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <CONF_WIFI_M2M_INT_PIN_set_isc>
	
	/* Enable interrupt */
// 	CONF_WIFI_M2M_INT_INTMASK_reg = CONF_WIFI_M2M_INT_INTFLAG_Msk;
// 	CONF_WIFI_M2M_INT_INTCTRL_reg = CONF_WIFI_M2M_INT_INTCTRL_Msk;
	CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    1cf4:	83 e0       	ldi	r24, 0x03	; 3
    1cf6:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <CONF_WIFI_M2M_INT_PIN_set_isc>
	//ENABLE_INTERRUPTS();
	sei();
    1cfa:	78 94       	sei
}
    1cfc:	00 00       	nop
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	08 95       	ret

00001d08 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	1f 92       	push	r1
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	89 83       	std	Y+1, r24	; 0x01
	if (u8Enable)
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	88 23       	and	r24, r24
    1d18:	21 f0       	breq	.+8      	; 0x1d22 <nm_bsp_interrupt_ctrl+0x1a>
	{
		//CONF_WIFI_M2M_INT_INTMASK_reg |= CONF_WIFI_M2M_INT_INTFLAG_Msk;
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    1d1a:	83 e0       	ldi	r24, 0x03	; 3
    1d1c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <CONF_WIFI_M2M_INT_PIN_set_isc>
	else
	{
		//CONF_WIFI_M2M_INT_INTMASK_reg &= ~CONF_WIFI_M2M_INT_INTFLAG_Msk;
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_INTDISABLE_gc);
	}
}
    1d20:	03 c0       	rjmp	.+6      	; 0x1d28 <nm_bsp_interrupt_ctrl+0x20>
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
	}
	else
	{
		//CONF_WIFI_M2M_INT_INTMASK_reg &= ~CONF_WIFI_M2M_INT_INTFLAG_Msk;
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_INTDISABLE_gc);
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <CONF_WIFI_M2M_INT_PIN_set_isc>
	}
}
    1d28:	00 00       	nop
    1d2a:	0f 90       	pop	r0
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	08 95       	ret

00001d32 <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <PORTA_set_pin_dir+0x6>
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	88 2f       	mov	r24, r24
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	91 05       	cpc	r25, r1
    1d4a:	e1 f0       	breq	.+56     	; 0x1d84 <PORTA_set_pin_dir+0x52>
    1d4c:	82 30       	cpi	r24, 0x02	; 2
    1d4e:	91 05       	cpc	r25, r1
    1d50:	71 f1       	breq	.+92     	; 0x1dae <PORTA_set_pin_dir+0x7c>
    1d52:	89 2b       	or	r24, r25
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    1d56:	3b c0       	rjmp	.+118    	; 0x1dce <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	fc 01       	movw	r30, r24
    1d62:	80 81       	ld	r24, Z
    1d64:	68 2f       	mov	r22, r24
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	48 2f       	mov	r20, r24
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <PORTA_set_pin_dir+0x44>
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	4a 95       	dec	r20
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <PORTA_set_pin_dir+0x40>
    1d7a:	80 95       	com	r24
    1d7c:	86 23       	and	r24, r22
    1d7e:	f9 01       	movw	r30, r18
    1d80:	80 83       	st	Z, r24
		break;
    1d82:	25 c0       	rjmp	.+74     	; 0x1dce <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	80 81       	ld	r24, Z
    1d90:	68 2f       	mov	r22, r24
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	48 2f       	mov	r20, r24
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <PORTA_set_pin_dir+0x70>
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	4a 95       	dec	r20
    1da4:	e2 f7       	brpl	.-8      	; 0x1d9e <PORTA_set_pin_dir+0x6c>
    1da6:	86 2b       	or	r24, r22
    1da8:	f9 01       	movw	r30, r18
    1daa:	80 83       	st	Z, r24
		break;
    1dac:	10 c0       	rjmp	.+32     	; 0x1dce <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	88 2f       	mov	r24, r24
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	80 5f       	subi	r24, 0xF0	; 240
    1db6:	9b 4f       	sbci	r25, 0xFB	; 251
    1db8:	29 81       	ldd	r18, Y+1	; 0x01
    1dba:	22 2f       	mov	r18, r18
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	20 5f       	subi	r18, 0xF0	; 240
    1dc0:	3b 4f       	sbci	r19, 0xFB	; 251
    1dc2:	f9 01       	movw	r30, r18
    1dc4:	20 81       	ld	r18, Z
    1dc6:	28 60       	ori	r18, 0x08	; 8
    1dc8:	fc 01       	movw	r30, r24
    1dca:	20 83       	st	Z, r18
		break;
    1dcc:	00 00       	nop
	default:
		break;
	}
}
    1dce:	00 00       	nop
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	08 95       	ret

00001dda <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <PORTA_set_pin_level+0x6>
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	88 23       	and	r24, r24
    1dec:	a9 f0       	breq	.+42     	; 0x1e18 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	fc 01       	movw	r30, r24
    1df8:	81 81       	ldd	r24, Z+1	; 0x01
    1dfa:	68 2f       	mov	r22, r24
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	48 2f       	mov	r20, r24
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <PORTA_set_pin_level+0x32>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	4a 95       	dec	r20
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <PORTA_set_pin_level+0x2e>
    1e10:	86 2b       	or	r24, r22
    1e12:	f9 01       	movw	r30, r18
    1e14:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
    1e16:	15 c0       	rjmp	.+42     	; 0x1e42 <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	fc 01       	movw	r30, r24
    1e22:	81 81       	ldd	r24, Z+1	; 0x01
    1e24:	68 2f       	mov	r22, r24
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	48 2f       	mov	r20, r24
    1e2a:	50 e0       	ldi	r21, 0x00	; 0
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <PORTA_set_pin_level+0x5c>
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	4a 95       	dec	r20
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <PORTA_set_pin_level+0x58>
    1e3a:	80 95       	com	r24
    1e3c:	86 23       	and	r24, r22
    1e3e:	f9 01       	movw	r30, r18
    1e40:	81 83       	std	Z+1, r24	; 0x01
	}
}
    1e42:	00 00       	nop
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	df 91       	pop	r29
    1e4a:	cf 91       	pop	r28
    1e4c:	08 95       	ret

00001e4e <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir(const enum port_dir dir)
{
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	1f 92       	push	r1
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(4, dir);
    1e5a:	69 81       	ldd	r22, Y+1	; 0x01
    1e5c:	84 e0       	ldi	r24, 0x04	; 4
    1e5e:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <PORTA_set_pin_dir>
}
    1e62:	00 00       	nop
    1e64:	0f 90       	pop	r0
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	08 95       	ret

00001e6c <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void CONF_WIFI_M2M_SPI_MOSI_PIN_set_level(const bool level)
{
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	1f 92       	push	r1
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(4, level);
    1e78:	69 81       	ldd	r22, Y+1	; 0x01
    1e7a:	84 e0       	ldi	r24, 0x04	; 4
    1e7c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <PORTA_set_pin_level>
}
    1e80:	00 00       	nop
    1e82:	0f 90       	pop	r0
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	08 95       	ret

00001e8a <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_MISO_PIN_set_dir(const enum port_dir dir)
{
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	1f 92       	push	r1
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(5, dir);
    1e96:	69 81       	ldd	r22, Y+1	; 0x01
    1e98:	85 e0       	ldi	r24, 0x05	; 5
    1e9a:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <PORTA_set_pin_dir>
}
    1e9e:	00 00       	nop
    1ea0:	0f 90       	pop	r0
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	08 95       	ret

00001ea8 <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_SCK_PIN_set_dir(const enum port_dir dir)
{
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	1f 92       	push	r1
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(6, dir);
    1eb4:	69 81       	ldd	r22, Y+1	; 0x01
    1eb6:	86 e0       	ldi	r24, 0x06	; 6
    1eb8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <PORTA_set_pin_dir>
}
    1ebc:	00 00       	nop
    1ebe:	0f 90       	pop	r0
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	08 95       	ret

00001ec6 <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void CONF_WIFI_M2M_SPI_SCK_PIN_set_level(const bool level)
{
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	1f 92       	push	r1
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(6, level);
    1ed2:	69 81       	ldd	r22, Y+1	; 0x01
    1ed4:	86 e0       	ldi	r24, 0x06	; 6
    1ed6:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <PORTA_set_pin_level>
}
    1eda:	00 00       	nop
    1edc:	0f 90       	pop	r0
    1ede:	df 91       	pop	r29
    1ee0:	cf 91       	pop	r28
    1ee2:	08 95       	ret

00001ee4 <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_CS_PIN_set_dir(const enum port_dir dir)
{
    1ee4:	cf 93       	push	r28
    1ee6:	df 93       	push	r29
    1ee8:	1f 92       	push	r1
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(7, dir);
    1ef0:	69 81       	ldd	r22, Y+1	; 0x01
    1ef2:	87 e0       	ldi	r24, 0x07	; 7
    1ef4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <PORTA_set_pin_dir>
}
    1ef8:	00 00       	nop
    1efa:	0f 90       	pop	r0
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	08 95       	ret

00001f02 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void CONF_WIFI_M2M_SPI_CS_PIN_set_level(const bool level)
{
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	1f 92       	push	r1
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(7, level);
    1f0e:	69 81       	ldd	r22, Y+1	; 0x01
    1f10:	87 e0       	ldi	r24, 0x07	; 7
    1f12:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <PORTA_set_pin_level>
}
    1f16:	00 00       	nop
    1f18:	0f 90       	pop	r0
    1f1a:	df 91       	pop	r29
    1f1c:	cf 91       	pop	r28
    1f1e:	08 95       	ret

00001f20 <spi_rw>:
}
#endif

#ifdef CONF_WINC_USE_SPI
static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	2d 97       	sbiw	r28, 0x0d	; 13
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	88 87       	std	Y+8, r24	; 0x08
    1f30:	99 87       	std	Y+9, r25	; 0x09
    1f32:	6a 87       	std	Y+10, r22	; 0x0a
    1f34:	7b 87       	std	Y+11, r23	; 0x0b
    1f36:	4c 87       	std	Y+12, r20	; 0x0c
    1f38:	5d 87       	std	Y+13, r21	; 0x0d
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8 u8Dummy = 0;
    1f3a:	1f 82       	std	Y+7, r1	; 0x07
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    1f3c:	19 82       	std	Y+1, r1	; 0x01
    1f3e:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t txd_data = 0;
    1f40:	1b 82       	std	Y+3, r1	; 0x03
    1f42:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t rxd_data = 0;
    1f44:	1d 82       	std	Y+5, r1	; 0x05
    1f46:	1e 82       	std	Y+6, r1	; 0x06

	if (!pu8Mosi) {
    1f48:	88 85       	ldd	r24, Y+8	; 0x08
    1f4a:	99 85       	ldd	r25, Y+9	; 0x09
    1f4c:	89 2b       	or	r24, r25
    1f4e:	39 f4       	brne	.+14     	; 0x1f5e <spi_rw+0x3e>
		pu8Mosi = &u8Dummy;
    1f50:	ce 01       	movw	r24, r28
    1f52:	07 96       	adiw	r24, 0x07	; 7
    1f54:	88 87       	std	Y+8, r24	; 0x08
    1f56:	99 87       	std	Y+9, r25	; 0x09
		u8SkipMosi = 1;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	0d c0       	rjmp	.+26     	; 0x1f78 <spi_rw+0x58>
	}
	else if(!pu8Miso) {
    1f5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f60:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f62:	89 2b       	or	r24, r25
    1f64:	39 f4       	brne	.+14     	; 0x1f74 <spi_rw+0x54>
		pu8Miso = &u8Dummy;
    1f66:	ce 01       	movw	r24, r28
    1f68:	07 96       	adiw	r24, 0x07	; 7
    1f6a:	8a 87       	std	Y+10, r24	; 0x0a
    1f6c:	9b 87       	std	Y+11, r25	; 0x0b
		u8SkipMiso = 1;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	8a 83       	std	Y+2, r24	; 0x02
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <spi_rw+0x58>
	}
	else {
		return M2M_ERR_BUS_FAIL;
    1f74:	8a ef       	ldi	r24, 0xFA	; 250
    1f76:	34 c0       	rjmp	.+104    	; 0x1fe0 <spi_rw+0xc0>
	}

	//spi_select_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(false);
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>
	
	while (u16Sz) {
    1f7e:	28 c0       	rjmp	.+80     	; 0x1fd0 <spi_rw+0xb0>
		txd_data = *pu8Mosi;
    1f80:	88 85       	ldd	r24, Y+8	; 0x08
    1f82:	99 85       	ldd	r25, Y+9	; 0x09
    1f84:	fc 01       	movw	r30, r24
    1f86:	80 81       	ld	r24, Z
    1f88:	88 2f       	mov	r24, r24
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	8b 83       	std	Y+3, r24	; 0x03
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
//		spi_read_single((uint8_t*)(&rxd_data));
		//SPI_0_read_block((uint8_t*)(&rxd_data), 1);
		
		
		
		rxd_data = SPI_0_exchange_byte(txd_data);		
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	9c 81       	ldd	r25, Y+4	; 0x04
    1f94:	0e 94 27 09 	call	0x124e	; 0x124e <SPI_0_exchange_byte>
    1f98:	8d 83       	std	Y+5, r24	; 0x05
    1f9a:	9e 83       	std	Y+6, r25	; 0x06
		
		*pu8Miso = rxd_data;
    1f9c:	2d 81       	ldd	r18, Y+5	; 0x05
    1f9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fa0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	20 83       	st	Z, r18

		u16Sz--;
    1fa6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fa8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	8c 87       	std	Y+12, r24	; 0x0c
    1fae:	9d 87       	std	Y+13, r25	; 0x0d
		if (!u8SkipMiso)
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	88 23       	and	r24, r24
    1fb4:	29 f4       	brne	.+10     	; 0x1fc0 <spi_rw+0xa0>
			pu8Miso++;
    1fb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fba:	01 96       	adiw	r24, 0x01	; 1
    1fbc:	8a 87       	std	Y+10, r24	; 0x0a
    1fbe:	9b 87       	std	Y+11, r25	; 0x0b
		if (!u8SkipMosi)
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	88 23       	and	r24, r24
    1fc4:	29 f4       	brne	.+10     	; 0x1fd0 <spi_rw+0xb0>
			pu8Mosi++;
    1fc6:	88 85       	ldd	r24, Y+8	; 0x08
    1fc8:	99 85       	ldd	r25, Y+9	; 0x09
    1fca:	01 96       	adiw	r24, 0x01	; 1
    1fcc:	88 87       	std	Y+8, r24	; 0x08
    1fce:	99 87       	std	Y+9, r25	; 0x09
	}

	//spi_select_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(false);
	
	while (u16Sz) {
    1fd0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fd2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fd4:	89 2b       	or	r24, r25
    1fd6:	a1 f6       	brne	.-88     	; 0x1f80 <spi_rw+0x60>
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	//spi_deselect_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(true);
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>

	return M2M_SUCCESS;
    1fde:	80 e0       	ldi	r24, 0x00	; 0
}
    1fe0:	2d 96       	adiw	r28, 0x0d	; 13
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	08 95       	ret

00001fec <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 volatile nm_bus_init(void *pvinit)
{
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <nm_bus_init+0x6>
    1ff2:	1f 92       	push	r1
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	8a 83       	std	Y+2, r24	; 0x02
    1ffa:	9b 83       	std	Y+3, r25	; 0x03
	sint8 result = M2M_SUCCESS;
    1ffc:	19 82       	std	Y+1, r1	; 0x01
#ifdef CONF_WINC_USE_I2C
		/* Not implemented */
#elif defined CONF_WINC_USE_SPI
	/* Configure pins */
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_CS_PIN, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
	CONF_WIFI_M2M_SPI_CS_PIN_set_dir(PORT_DIR_OUT);
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(true);
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>
	
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_MOSI_PIN, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
	CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir(PORT_DIR_OUT);
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>
	CONF_WIFI_M2M_SPI_MOSI_PIN_set_level(true);
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>
	
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_MISO_PIN, IOPORT_DIR_INPUT);
	CONF_WIFI_M2M_SPI_MISO_PIN_set_dir(PORT_DIR_IN);
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>
	
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_SCK_PIN, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	CONF_WIFI_M2M_SPI_SCK_PIN_set_dir(PORT_DIR_OUT);
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>
	CONF_WIFI_M2M_SPI_SCK_PIN_set_level(false);
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	 
	/* Configure the SPI master. */
	//spi_master_init(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_init();
    2028:	0e 94 07 09 	call	0x120e	; 0x120e <SPI_0_init>
	
	//spi_master_setup_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf, SPI_MODE_0, CONF_WIFI_M2M_SPI_BAUDRATE, 0);
	
	/* Enable the SPI master. */
	//spi_enable(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_enable();
    202c:	0e 94 16 09 	call	0x122c	; 0x122c <SPI_0_enable>

	nm_bsp_reset();
    2030:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <nm_bsp_reset>
	nm_bsp_sleep(1);
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	70 e0       	ldi	r23, 0x00	; 0
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <nm_bsp_sleep>
#endif
	return result;
    2040:	89 81       	ldd	r24, Y+1	; 0x01
}
    2042:	23 96       	adiw	r28, 0x03	; 3
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	08 95       	ret

0000204e <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	26 97       	sbiw	r28, 0x06	; 6
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	8c 83       	std	Y+4, r24	; 0x04
    205e:	6d 83       	std	Y+5, r22	; 0x05
    2060:	7e 83       	std	Y+6, r23	; 0x06
	sint8 s8Ret = 0;
    2062:	19 82       	std	Y+1, r1	; 0x01
	switch(u8Cmd)
    2064:	8c 81       	ldd	r24, Y+4	; 0x04
    2066:	88 2f       	mov	r24, r24
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	03 97       	sbiw	r24, 0x03	; 3
    206c:	c1 f4       	brne	.+48     	; 0x209e <nm_bus_ioctl+0x50>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	9e 81       	ldd	r25, Y+6	; 0x06
    2072:	8a 83       	std	Y+2, r24	; 0x02
    2074:	9b 83       	std	Y+3, r25	; 0x03
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	9b 81       	ldd	r25, Y+3	; 0x03
    207a:	fc 01       	movw	r30, r24
    207c:	44 81       	ldd	r20, Z+4	; 0x04
    207e:	55 81       	ldd	r21, Z+5	; 0x05
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	9b 81       	ldd	r25, Y+3	; 0x03
    2084:	fc 01       	movw	r30, r24
    2086:	22 81       	ldd	r18, Z+2	; 0x02
    2088:	33 81       	ldd	r19, Z+3	; 0x03
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	9b 81       	ldd	r25, Y+3	; 0x03
    208e:	fc 01       	movw	r30, r24
    2090:	80 81       	ld	r24, Z
    2092:	91 81       	ldd	r25, Z+1	; 0x01
    2094:	b9 01       	movw	r22, r18
    2096:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <spi_rw>
    209a:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    209c:	03 c0       	rjmp	.+6      	; 0x20a4 <nm_bus_ioctl+0x56>
#endif
		default:
			s8Ret = -1;
    209e:	8f ef       	ldi	r24, 0xFF	; 255
    20a0:	89 83       	std	Y+1, r24	; 0x01
			M2M_ERR("invalide ioclt cmd\n");
			break;
    20a2:	00 00       	nop
	}

	return s8Ret;
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20a6:	26 96       	adiw	r28, 0x06	; 6
    20a8:	cd bf       	out	0x3d, r28	; 61
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	08 95       	ret

000020b2 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
	return M2M_SUCCESS;
    20ba:	80 e0       	ldi	r24, 0x00	; 0
}
    20bc:	df 91       	pop	r29
    20be:	cf 91       	pop	r28
    20c0:	08 95       	ret

000020c2 <m2m_memcpy>:
		cs ^= *buf;
		buf++;
	}

	return cs;
}
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	28 97       	sbiw	r28, 0x08	; 8
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	9a 83       	std	Y+2, r25	; 0x02
    20d4:	6b 83       	std	Y+3, r22	; 0x03
    20d6:	7c 83       	std	Y+4, r23	; 0x04
    20d8:	2d 83       	std	Y+5, r18	; 0x05
    20da:	3e 83       	std	Y+6, r19	; 0x06
    20dc:	4f 83       	std	Y+7, r20	; 0x07
    20de:	58 87       	std	Y+8, r21	; 0x08
    20e0:	8d 81       	ldd	r24, Y+5	; 0x05
    20e2:	9e 81       	ldd	r25, Y+6	; 0x06
    20e4:	af 81       	ldd	r26, Y+7	; 0x07
    20e6:	b8 85       	ldd	r27, Y+8	; 0x08
    20e8:	89 2b       	or	r24, r25
    20ea:	8a 2b       	or	r24, r26
    20ec:	8b 2b       	or	r24, r27
    20ee:	31 f1       	breq	.+76     	; 0x213c <m2m_memcpy+0x7a>
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	fc 01       	movw	r30, r24
    20f6:	20 81       	ld	r18, Z
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	fc 01       	movw	r30, r24
    20fe:	20 83       	st	Z, r18
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	9a 81       	ldd	r25, Y+2	; 0x02
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	9a 83       	std	Y+2, r25	; 0x02
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	01 96       	adiw	r24, 0x01	; 1
    2110:	8b 83       	std	Y+3, r24	; 0x03
    2112:	9c 83       	std	Y+4, r25	; 0x04
    2114:	8d 81       	ldd	r24, Y+5	; 0x05
    2116:	9e 81       	ldd	r25, Y+6	; 0x06
    2118:	af 81       	ldd	r26, Y+7	; 0x07
    211a:	b8 85       	ldd	r27, Y+8	; 0x08
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	a1 09       	sbc	r26, r1
    2120:	b1 09       	sbc	r27, r1
    2122:	8d 83       	std	Y+5, r24	; 0x05
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	af 83       	std	Y+7, r26	; 0x07
    2128:	b8 87       	std	Y+8, r27	; 0x08
    212a:	8d 81       	ldd	r24, Y+5	; 0x05
    212c:	9e 81       	ldd	r25, Y+6	; 0x06
    212e:	af 81       	ldd	r26, Y+7	; 0x07
    2130:	b8 85       	ldd	r27, Y+8	; 0x08
    2132:	89 2b       	or	r24, r25
    2134:	8a 2b       	or	r24, r26
    2136:	8b 2b       	or	r24, r27
    2138:	d9 f6       	brne	.-74     	; 0x20f0 <m2m_memcpy+0x2e>
    213a:	01 c0       	rjmp	.+2      	; 0x213e <m2m_memcpy+0x7c>
    213c:	00 00       	nop
    213e:	28 96       	adiw	r28, 0x08	; 8
    2140:	cd bf       	out	0x3d, r28	; 61
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <m2m_memset>:

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	27 97       	sbiw	r28, 0x07	; 7
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	9a 83       	std	Y+2, r25	; 0x02
    215c:	6b 83       	std	Y+3, r22	; 0x03
    215e:	2c 83       	std	Y+4, r18	; 0x04
    2160:	3d 83       	std	Y+5, r19	; 0x05
    2162:	4e 83       	std	Y+6, r20	; 0x06
    2164:	5f 83       	std	Y+7, r21	; 0x07
	if(sz == 0) return;
    2166:	8c 81       	ldd	r24, Y+4	; 0x04
    2168:	9d 81       	ldd	r25, Y+5	; 0x05
    216a:	ae 81       	ldd	r26, Y+6	; 0x06
    216c:	bf 81       	ldd	r27, Y+7	; 0x07
    216e:	89 2b       	or	r24, r25
    2170:	8a 2b       	or	r24, r26
    2172:	8b 2b       	or	r24, r27
    2174:	f1 f0       	breq	.+60     	; 0x21b2 <m2m_memset+0x68>
	do
	{
		*pBuf = val;
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	9a 81       	ldd	r25, Y+2	; 0x02
    217a:	2b 81       	ldd	r18, Y+3	; 0x03
    217c:	fc 01       	movw	r30, r24
    217e:	20 83       	st	Z, r18
		pBuf++;
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	9a 81       	ldd	r25, Y+2	; 0x02
    2184:	01 96       	adiw	r24, 0x01	; 1
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	9a 83       	std	Y+2, r25	; 0x02
	}while(--sz);
    218a:	8c 81       	ldd	r24, Y+4	; 0x04
    218c:	9d 81       	ldd	r25, Y+5	; 0x05
    218e:	ae 81       	ldd	r26, Y+6	; 0x06
    2190:	bf 81       	ldd	r27, Y+7	; 0x07
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	a1 09       	sbc	r26, r1
    2196:	b1 09       	sbc	r27, r1
    2198:	8c 83       	std	Y+4, r24	; 0x04
    219a:	9d 83       	std	Y+5, r25	; 0x05
    219c:	ae 83       	std	Y+6, r26	; 0x06
    219e:	bf 83       	std	Y+7, r27	; 0x07
    21a0:	8c 81       	ldd	r24, Y+4	; 0x04
    21a2:	9d 81       	ldd	r25, Y+5	; 0x05
    21a4:	ae 81       	ldd	r26, Y+6	; 0x06
    21a6:	bf 81       	ldd	r27, Y+7	; 0x07
    21a8:	89 2b       	or	r24, r25
    21aa:	8a 2b       	or	r24, r26
    21ac:	8b 2b       	or	r24, r27
    21ae:	19 f7       	brne	.-58     	; 0x2176 <m2m_memset+0x2c>
    21b0:	01 c0       	rjmp	.+2      	; 0x21b4 <m2m_memset+0x6a>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    21b2:	00 00       	nop
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
    21b4:	27 96       	adiw	r28, 0x07	; 7
    21b6:	cd bf       	out	0x3d, r28	; 61
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	08 95       	ret

000021c0 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <m2m_strlen+0x6>
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <m2m_strlen+0x8>
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	8b 83       	std	Y+3, r24	; 0x03
    21ce:	9c 83       	std	Y+4, r25	; 0x04
	uint16	u16StrLen = 0;
    21d0:	19 82       	std	Y+1, r1	; 0x01
    21d2:	1a 82       	std	Y+2, r1	; 0x02
	while(*pcStr)
    21d4:	0a c0       	rjmp	.+20     	; 0x21ea <m2m_strlen+0x2a>
	{
		u16StrLen ++;
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	9a 83       	std	Y+2, r25	; 0x02
		pcStr++;
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	9c 81       	ldd	r25, Y+4	; 0x04
    21e4:	01 96       	adiw	r24, 0x01	; 1
    21e6:	8b 83       	std	Y+3, r24	; 0x03
    21e8:	9c 83       	std	Y+4, r25	; 0x04
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	9c 81       	ldd	r25, Y+4	; 0x04
    21ee:	fc 01       	movw	r30, r24
    21f0:	80 81       	ld	r24, Z
    21f2:	88 23       	and	r24, r24
    21f4:	81 f7       	brne	.-32     	; 0x21d6 <m2m_strlen+0x16>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    21fa:	24 96       	adiw	r28, 0x04	; 4
    21fc:	cd bf       	out	0x3d, r28	; 61
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	08 95       	ret

00002206 <isr>:
{
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
	return ret;
}
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	80 91 1a 2e 	lds	r24, 0x2E1A	; 0x802e1a <gstrHifCxt+0x3>
    2212:	8f 5f       	subi	r24, 0xFF	; 255
    2214:	80 93 1a 2e 	sts	0x2E1A, r24	; 0x802e1a <gstrHifCxt+0x3>
    2218:	00 00       	nop
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	08 95       	ret

00002220 <hif_set_rx_done>:
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	25 97       	sbiw	r28, 0x05	; 5
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	19 82       	std	Y+1, r1	; 0x01
    2230:	10 92 19 2e 	sts	0x2E19, r1	; 0x802e19 <gstrHifCxt+0x2>
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <nm_bsp_interrupt_ctrl>
    223a:	ce 01       	movw	r24, r28
    223c:	02 96       	adiw	r24, 0x02	; 2
    223e:	ac 01       	movw	r20, r24
    2240:	60 e7       	ldi	r22, 0x70	; 112
    2242:	70 e1       	ldi	r23, 0x10	; 16
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	88 23       	and	r24, r24
    2252:	b9 f4       	brne	.+46     	; 0x2282 <hif_set_rx_done+0x62>
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	9b 81       	ldd	r25, Y+3	; 0x03
    2258:	ac 81       	ldd	r26, Y+4	; 0x04
    225a:	bd 81       	ldd	r27, Y+5	; 0x05
    225c:	82 60       	ori	r24, 0x02	; 2
    225e:	8a 83       	std	Y+2, r24	; 0x02
    2260:	9b 83       	std	Y+3, r25	; 0x03
    2262:	ac 83       	std	Y+4, r26	; 0x04
    2264:	bd 83       	std	Y+5, r27	; 0x05
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	9b 81       	ldd	r25, Y+3	; 0x03
    226a:	ac 81       	ldd	r26, Y+4	; 0x04
    226c:	bd 81       	ldd	r27, Y+5	; 0x05
    226e:	9c 01       	movw	r18, r24
    2270:	ad 01       	movw	r20, r26
    2272:	60 e7       	ldi	r22, 0x70	; 112
    2274:	70 e1       	ldi	r23, 0x10	; 16
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	01 c0       	rjmp	.+2      	; 0x2284 <hif_set_rx_done+0x64>
    2282:	00 00       	nop
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	25 96       	adiw	r28, 0x05	; 5
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	de bf       	out	0x3e, r29	; 62
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	08 95       	ret

00002292 <m2m_hif_cb>:
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	27 97       	sbiw	r28, 0x07	; 7
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	6a 83       	std	Y+2, r22	; 0x02
    22a4:	7b 83       	std	Y+3, r23	; 0x03
    22a6:	2c 83       	std	Y+4, r18	; 0x04
    22a8:	3d 83       	std	Y+5, r19	; 0x05
    22aa:	4e 83       	std	Y+6, r20	; 0x06
    22ac:	5f 83       	std	Y+7, r21	; 0x07
    22ae:	00 00       	nop
    22b0:	27 96       	adiw	r28, 0x07	; 7
    22b2:	cd bf       	out	0x3d, r28	; 61
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	08 95       	ret

000022bc <hif_chip_wake>:
    22bc:	cf 93       	push	r28
    22be:	df 93       	push	r29
    22c0:	1f 92       	push	r1
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	19 82       	std	Y+1, r1	; 0x01
    22c8:	80 91 19 2e 	lds	r24, 0x2E19	; 0x802e19 <gstrHifCxt+0x2>
    22cc:	88 23       	and	r24, r24
    22ce:	11 f0       	breq	.+4      	; 0x22d4 <hif_chip_wake+0x18>
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	16 c0       	rjmp	.+44     	; 0x2300 <hif_chip_wake+0x44>
    22d4:	80 91 18 2e 	lds	r24, 0x2E18	; 0x802e18 <gstrHifCxt+0x1>
    22d8:	88 23       	and	r24, r24
    22da:	51 f4       	brne	.+20     	; 0x22f0 <hif_chip_wake+0x34>
    22dc:	80 91 17 2e 	lds	r24, 0x2E17	; 0x802e17 <gstrHifCxt>
    22e0:	88 23       	and	r24, r24
    22e2:	31 f0       	breq	.+12     	; 0x22f0 <hif_chip_wake+0x34>
    22e4:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <chip_wake>
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	88 23       	and	r24, r24
    22ee:	31 f4       	brne	.+12     	; 0x22fc <hif_chip_wake+0x40>
    22f0:	80 91 18 2e 	lds	r24, 0x2E18	; 0x802e18 <gstrHifCxt+0x1>
    22f4:	8f 5f       	subi	r24, 0xFF	; 255
    22f6:	80 93 18 2e 	sts	0x2E18, r24	; 0x802e18 <gstrHifCxt+0x1>
    22fa:	01 c0       	rjmp	.+2      	; 0x22fe <hif_chip_wake+0x42>
    22fc:	00 00       	nop
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	0f 90       	pop	r0
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	08 95       	ret

00002308 <hif_chip_sleep_sc>:
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	80 91 18 2e 	lds	r24, 0x2E18	; 0x802e18 <gstrHifCxt+0x1>
    2314:	88 23       	and	r24, r24
    2316:	29 f0       	breq	.+10     	; 0x2322 <hif_chip_sleep_sc+0x1a>
    2318:	80 91 18 2e 	lds	r24, 0x2E18	; 0x802e18 <gstrHifCxt+0x1>
    231c:	81 50       	subi	r24, 0x01	; 1
    231e:	80 93 18 2e 	sts	0x2E18, r24	; 0x802e18 <gstrHifCxt+0x1>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	08 95       	ret

0000232a <hif_chip_sleep>:
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	1f 92       	push	r1
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	19 82       	std	Y+1, r1	; 0x01
    2336:	80 91 18 2e 	lds	r24, 0x2E18	; 0x802e18 <gstrHifCxt+0x1>
    233a:	88 23       	and	r24, r24
    233c:	29 f0       	breq	.+10     	; 0x2348 <hif_chip_sleep+0x1e>
    233e:	80 91 18 2e 	lds	r24, 0x2E18	; 0x802e18 <gstrHifCxt+0x1>
    2342:	81 50       	subi	r24, 0x01	; 1
    2344:	80 93 18 2e 	sts	0x2E18, r24	; 0x802e18 <gstrHifCxt+0x1>
    2348:	80 91 18 2e 	lds	r24, 0x2E18	; 0x802e18 <gstrHifCxt+0x1>
    234c:	88 23       	and	r24, r24
    234e:	39 f4       	brne	.+14     	; 0x235e <hif_chip_sleep+0x34>
    2350:	80 91 17 2e 	lds	r24, 0x2E17	; 0x802e17 <gstrHifCxt>
    2354:	88 23       	and	r24, r24
    2356:	19 f0       	breq	.+6      	; 0x235e <hif_chip_sleep+0x34>
    2358:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <chip_sleep>
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	0f 90       	pop	r0
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	08 95       	ret

00002368 <hif_init>:
    2368:	cf 93       	push	r28
    236a:	df 93       	push	r29
    236c:	00 d0       	rcall	.+0      	; 0x236e <hif_init+0x6>
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	89 83       	std	Y+1, r24	; 0x01
    2374:	9a 83       	std	Y+2, r25	; 0x02
    2376:	2a e1       	ldi	r18, 0x1A	; 26
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e0       	ldi	r20, 0x00	; 0
    237c:	50 e0       	ldi	r21, 0x00	; 0
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	87 e1       	ldi	r24, 0x17	; 23
    2382:	9e e2       	ldi	r25, 0x2E	; 46
    2384:	0e 94 a5 10 	call	0x214a	; 0x214a <m2m_memset>
    2388:	83 e0       	ldi	r24, 0x03	; 3
    238a:	91 e1       	ldi	r25, 0x11	; 17
    238c:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <nm_bsp_register_isr>
    2390:	69 e4       	ldi	r22, 0x49	; 73
    2392:	71 e1       	ldi	r23, 0x11	; 17
    2394:	83 e0       	ldi	r24, 0x03	; 3
    2396:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <hif_register_cb>
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	08 95       	ret

000023a6 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    23a6:	cf 92       	push	r12
    23a8:	df 92       	push	r13
    23aa:	ef 92       	push	r14
    23ac:	ff 92       	push	r15
    23ae:	0f 93       	push	r16
    23b0:	1f 93       	push	r17
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	6f 97       	sbiw	r28, 0x1f	; 31
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	8c 8b       	std	Y+20, r24	; 0x14
    23c2:	6d 8b       	std	Y+21, r22	; 0x15
    23c4:	4e 8b       	std	Y+22, r20	; 0x16
    23c6:	5f 8b       	std	Y+23, r21	; 0x17
    23c8:	28 8f       	std	Y+24, r18	; 0x18
    23ca:	39 8f       	std	Y+25, r19	; 0x19
    23cc:	0a 8f       	std	Y+26, r16	; 0x1a
    23ce:	1b 8f       	std	Y+27, r17	; 0x1b
    23d0:	ec 8e       	std	Y+28, r14	; 0x1c
    23d2:	fd 8e       	std	Y+29, r15	; 0x1d
    23d4:	ce 8e       	std	Y+30, r12	; 0x1e
    23d6:	df 8e       	std	Y+31, r13	; 0x1f
	sint8		ret = M2M_ERR_SEND;
    23d8:	8f ef       	ldi	r24, 0xFF	; 255
    23da:	89 83       	std	Y+1, r24	; 0x01
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    23dc:	8d 89       	ldd	r24, Y+21	; 0x15
    23de:	8f 77       	andi	r24, 0x7F	; 127
    23e0:	8b 83       	std	Y+3, r24	; 0x03
	strHif.u8Gid		= u8Gid;
    23e2:	8c 89       	ldd	r24, Y+20	; 0x14
    23e4:	8a 83       	std	Y+2, r24	; 0x02
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    23e6:	88 e0       	ldi	r24, 0x08	; 8
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	8c 83       	std	Y+4, r24	; 0x04
    23ec:	9d 83       	std	Y+5, r25	; 0x05
	if(pu8DataBuf != NULL)
    23ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23f0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23f2:	89 2b       	or	r24, r25
    23f4:	69 f0       	breq	.+26     	; 0x2410 <hif_send+0x6a>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    23f6:	2c 81       	ldd	r18, Y+4	; 0x04
    23f8:	3d 81       	ldd	r19, Y+5	; 0x05
    23fa:	4e 8d       	ldd	r20, Y+30	; 0x1e
    23fc:	5f 8d       	ldd	r21, Y+31	; 0x1f
    23fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2400:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2402:	84 0f       	add	r24, r20
    2404:	95 1f       	adc	r25, r21
    2406:	82 0f       	add	r24, r18
    2408:	93 1f       	adc	r25, r19
    240a:	8c 83       	std	Y+4, r24	; 0x04
    240c:	9d 83       	std	Y+5, r25	; 0x05
    240e:	08 c0       	rjmp	.+16     	; 0x2420 <hif_send+0x7a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    2410:	2c 81       	ldd	r18, Y+4	; 0x04
    2412:	3d 81       	ldd	r19, Y+5	; 0x05
    2414:	88 8d       	ldd	r24, Y+24	; 0x18
    2416:	99 8d       	ldd	r25, Y+25	; 0x19
    2418:	82 0f       	add	r24, r18
    241a:	93 1f       	adc	r25, r19
    241c:	8c 83       	std	Y+4, r24	; 0x04
    241e:	9d 83       	std	Y+5, r25	; 0x05
	}
	ret = hif_chip_wake();
    2420:	0e 94 5e 11 	call	0x22bc	; 0x22bc <hif_chip_wake>
    2424:	89 83       	std	Y+1, r24	; 0x01
	if(ret == M2M_SUCCESS)
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	88 23       	and	r24, r24
    242a:	09 f0       	breq	.+2      	; 0x242e <hif_send+0x88>
    242c:	a6 c1       	rjmp	.+844    	; 0x277a <hif_send+0x3d4>
	{
		volatile uint32 reg, dma_addr = 0;
    242e:	1a 86       	std	Y+10, r1	; 0x0a
    2430:	1b 86       	std	Y+11, r1	; 0x0b
    2432:	1c 86       	std	Y+12, r1	; 0x0c
    2434:	1d 86       	std	Y+13, r1	; 0x0d
		volatile uint16 cnt = 0;
    2436:	1e 86       	std	Y+14, r1	; 0x0e
    2438:	1f 86       	std	Y+15, r1	; 0x0f
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    243a:	1e 82       	std	Y+6, r1	; 0x06
    243c:	1f 82       	std	Y+7, r1	; 0x07
    243e:	18 86       	std	Y+8, r1	; 0x08
    2440:	19 86       	std	Y+9, r1	; 0x09
		reg |= (uint32)u8Gid;
    2442:	8c 89       	ldd	r24, Y+20	; 0x14
    2444:	28 2f       	mov	r18, r24
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	50 e0       	ldi	r21, 0x00	; 0
    244c:	8e 81       	ldd	r24, Y+6	; 0x06
    244e:	9f 81       	ldd	r25, Y+7	; 0x07
    2450:	a8 85       	ldd	r26, Y+8	; 0x08
    2452:	b9 85       	ldd	r27, Y+9	; 0x09
    2454:	82 2b       	or	r24, r18
    2456:	93 2b       	or	r25, r19
    2458:	a4 2b       	or	r26, r20
    245a:	b5 2b       	or	r27, r21
    245c:	8e 83       	std	Y+6, r24	; 0x06
    245e:	9f 83       	std	Y+7, r25	; 0x07
    2460:	a8 87       	std	Y+8, r26	; 0x08
    2462:	b9 87       	std	Y+9, r27	; 0x09
		reg |= ((uint32)u8Opcode<<8);
    2464:	8d 89       	ldd	r24, Y+21	; 0x15
    2466:	88 2f       	mov	r24, r24
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	a0 e0       	ldi	r26, 0x00	; 0
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	22 27       	eor	r18, r18
    2470:	38 2f       	mov	r19, r24
    2472:	49 2f       	mov	r20, r25
    2474:	5a 2f       	mov	r21, r26
    2476:	8e 81       	ldd	r24, Y+6	; 0x06
    2478:	9f 81       	ldd	r25, Y+7	; 0x07
    247a:	a8 85       	ldd	r26, Y+8	; 0x08
    247c:	b9 85       	ldd	r27, Y+9	; 0x09
    247e:	82 2b       	or	r24, r18
    2480:	93 2b       	or	r25, r19
    2482:	a4 2b       	or	r26, r20
    2484:	b5 2b       	or	r27, r21
    2486:	8e 83       	std	Y+6, r24	; 0x06
    2488:	9f 83       	std	Y+7, r25	; 0x07
    248a:	a8 87       	std	Y+8, r26	; 0x08
    248c:	b9 87       	std	Y+9, r27	; 0x09
		reg |= ((uint32)strHif.u16Length<<16);
    248e:	8c 81       	ldd	r24, Y+4	; 0x04
    2490:	9d 81       	ldd	r25, Y+5	; 0x05
    2492:	cc 01       	movw	r24, r24
    2494:	a0 e0       	ldi	r26, 0x00	; 0
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	ac 01       	movw	r20, r24
    249a:	33 27       	eor	r19, r19
    249c:	22 27       	eor	r18, r18
    249e:	8e 81       	ldd	r24, Y+6	; 0x06
    24a0:	9f 81       	ldd	r25, Y+7	; 0x07
    24a2:	a8 85       	ldd	r26, Y+8	; 0x08
    24a4:	b9 85       	ldd	r27, Y+9	; 0x09
    24a6:	82 2b       	or	r24, r18
    24a8:	93 2b       	or	r25, r19
    24aa:	a4 2b       	or	r26, r20
    24ac:	b5 2b       	or	r27, r21
    24ae:	8e 83       	std	Y+6, r24	; 0x06
    24b0:	9f 83       	std	Y+7, r25	; 0x07
    24b2:	a8 87       	std	Y+8, r26	; 0x08
    24b4:	b9 87       	std	Y+9, r27	; 0x09
		ret = nm_write_reg(NMI_STATE_REG,reg);
    24b6:	8e 81       	ldd	r24, Y+6	; 0x06
    24b8:	9f 81       	ldd	r25, Y+7	; 0x07
    24ba:	a8 85       	ldd	r26, Y+8	; 0x08
    24bc:	b9 85       	ldd	r27, Y+9	; 0x09
    24be:	9c 01       	movw	r18, r24
    24c0:	ad 01       	movw	r20, r26
    24c2:	6c e8       	ldi	r22, 0x8C	; 140
    24c4:	70 e1       	ldi	r23, 0x10	; 16
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    24ce:	89 83       	std	Y+1, r24	; 0x01
		if(M2M_SUCCESS != ret) goto ERR1;
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	88 23       	and	r24, r24
    24d4:	09 f0       	breq	.+2      	; 0x24d8 <hif_send+0x132>
    24d6:	45 c1       	rjmp	.+650    	; 0x2762 <hif_send+0x3bc>

		reg = 0UL;
    24d8:	1e 82       	std	Y+6, r1	; 0x06
    24da:	1f 82       	std	Y+7, r1	; 0x07
    24dc:	18 86       	std	Y+8, r1	; 0x08
    24de:	19 86       	std	Y+9, r1	; 0x09
		reg |= NBIT1;
    24e0:	8e 81       	ldd	r24, Y+6	; 0x06
    24e2:	9f 81       	ldd	r25, Y+7	; 0x07
    24e4:	a8 85       	ldd	r26, Y+8	; 0x08
    24e6:	b9 85       	ldd	r27, Y+9	; 0x09
    24e8:	82 60       	ori	r24, 0x02	; 2
    24ea:	8e 83       	std	Y+6, r24	; 0x06
    24ec:	9f 83       	std	Y+7, r25	; 0x07
    24ee:	a8 87       	std	Y+8, r26	; 0x08
    24f0:	b9 87       	std	Y+9, r27	; 0x09
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    24f2:	8e 81       	ldd	r24, Y+6	; 0x06
    24f4:	9f 81       	ldd	r25, Y+7	; 0x07
    24f6:	a8 85       	ldd	r26, Y+8	; 0x08
    24f8:	b9 85       	ldd	r27, Y+9	; 0x09
    24fa:	9c 01       	movw	r18, r24
    24fc:	ad 01       	movw	r20, r26
    24fe:	68 e7       	ldi	r22, 0x78	; 120
    2500:	70 e1       	ldi	r23, 0x10	; 16
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    250a:	89 83       	std	Y+1, r24	; 0x01
		if(M2M_SUCCESS != ret) goto ERR1;
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	88 23       	and	r24, r24
    2510:	09 f0       	breq	.+2      	; 0x2514 <hif_send+0x16e>
    2512:	29 c1       	rjmp	.+594    	; 0x2766 <hif_send+0x3c0>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    2514:	1a 86       	std	Y+10, r1	; 0x0a
    2516:	1b 86       	std	Y+11, r1	; 0x0b
    2518:	1c 86       	std	Y+12, r1	; 0x0c
    251a:	1d 86       	std	Y+13, r1	; 0x0d
		
		for(cnt = 0; cnt < 1000; cnt ++)
    251c:	1e 86       	std	Y+14, r1	; 0x0e
    251e:	1f 86       	std	Y+15, r1	; 0x0f
    2520:	3d c0       	rjmp	.+122    	; 0x259c <hif_send+0x1f6>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    2522:	ce 01       	movw	r24, r28
    2524:	06 96       	adiw	r24, 0x06	; 6
    2526:	ac 01       	movw	r20, r24
    2528:	68 e7       	ldi	r22, 0x78	; 120
    252a:	70 e1       	ldi	r23, 0x10	; 16
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    2534:	89 83       	std	Y+1, r24	; 0x01
			if(ret != M2M_SUCCESS) break;
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	88 23       	and	r24, r24
    253a:	b9 f5       	brne	.+110    	; 0x25aa <hif_send+0x204>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    253c:	8e 85       	ldd	r24, Y+14	; 0x0e
    253e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2540:	84 3f       	cpi	r24, 0xF4	; 244
    2542:	91 40       	sbci	r25, 0x01	; 1
    2544:	40 f0       	brcs	.+16     	; 0x2556 <hif_send+0x1b0>
				if(cnt < 501) {
    2546:	8e 85       	ldd	r24, Y+14	; 0x0e
    2548:	9f 85       	ldd	r25, Y+15	; 0x0f
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    254a:	61 e0       	ldi	r22, 0x01	; 1
    254c:	70 e0       	ldi	r23, 0x00	; 0
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
    2556:	8e 81       	ldd	r24, Y+6	; 0x06
    2558:	9f 81       	ldd	r25, Y+7	; 0x07
    255a:	a8 85       	ldd	r26, Y+8	; 0x08
    255c:	b9 85       	ldd	r27, Y+9	; 0x09
    255e:	82 70       	andi	r24, 0x02	; 2
    2560:	99 27       	eor	r25, r25
    2562:	aa 27       	eor	r26, r26
    2564:	bb 27       	eor	r27, r27
    2566:	89 2b       	or	r24, r25
    2568:	8a 2b       	or	r24, r26
    256a:	8b 2b       	or	r24, r27
    256c:	91 f4       	brne	.+36     	; 0x2592 <hif_send+0x1ec>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    256e:	ce 01       	movw	r24, r28
    2570:	0a 96       	adiw	r24, 0x0a	; 10
    2572:	ac 01       	movw	r20, r24
    2574:	60 e0       	ldi	r22, 0x00	; 0
    2576:	74 e0       	ldi	r23, 0x04	; 4
    2578:	85 e1       	ldi	r24, 0x15	; 21
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    2580:	89 83       	std	Y+1, r24	; 0x01
				if(ret != M2M_SUCCESS) {
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	88 23       	and	r24, r24
    2586:	99 f0       	breq	.+38     	; 0x25ae <hif_send+0x208>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    2588:	1a 86       	std	Y+10, r1	; 0x0a
    258a:	1b 86       	std	Y+11, r1	; 0x0b
    258c:	1c 86       	std	Y+12, r1	; 0x0c
    258e:	1d 86       	std	Y+13, r1	; 0x0d
					goto ERR1;
    2590:	f1 c0       	rjmp	.+482    	; 0x2774 <hif_send+0x3ce>
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
		
		for(cnt = 0; cnt < 1000; cnt ++)
    2592:	8e 85       	ldd	r24, Y+14	; 0x0e
    2594:	9f 85       	ldd	r25, Y+15	; 0x0f
    2596:	01 96       	adiw	r24, 0x01	; 1
    2598:	8e 87       	std	Y+14, r24	; 0x0e
    259a:	9f 87       	std	Y+15, r25	; 0x0f
    259c:	8e 85       	ldd	r24, Y+14	; 0x0e
    259e:	9f 85       	ldd	r25, Y+15	; 0x0f
    25a0:	88 3e       	cpi	r24, 0xE8	; 232
    25a2:	93 40       	sbci	r25, 0x03	; 3
    25a4:	08 f4       	brcc	.+2      	; 0x25a8 <hif_send+0x202>
    25a6:	bd cf       	rjmp	.-134    	; 0x2522 <hif_send+0x17c>
    25a8:	03 c0       	rjmp	.+6      	; 0x25b0 <hif_send+0x20a>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
    25aa:	00 00       	nop
    25ac:	01 c0       	rjmp	.+2      	; 0x25b0 <hif_send+0x20a>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
					goto ERR1;
				}
				/*in case of success break */
				break;
    25ae:	00 00       	nop
			}
		}

		if (dma_addr != 0)
    25b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25b4:	ac 85       	ldd	r26, Y+12	; 0x0c
    25b6:	bd 85       	ldd	r27, Y+13	; 0x0d
    25b8:	89 2b       	or	r24, r25
    25ba:	8a 2b       	or	r24, r26
    25bc:	8b 2b       	or	r24, r27
    25be:	09 f4       	brne	.+2      	; 0x25c2 <hif_send+0x21c>
    25c0:	c5 c0       	rjmp	.+394    	; 0x274c <hif_send+0x3a6>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    25c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    25c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    25c6:	ac 85       	ldd	r26, Y+12	; 0x0c
    25c8:	bd 85       	ldd	r27, Y+13	; 0x0d
    25ca:	88 8b       	std	Y+16, r24	; 0x10
    25cc:	99 8b       	std	Y+17, r25	; 0x11
    25ce:	aa 8b       	std	Y+18, r26	; 0x12
    25d0:	bb 8b       	std	Y+19, r27	; 0x13
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    25d2:	8c 81       	ldd	r24, Y+4	; 0x04
    25d4:	9d 81       	ldd	r25, Y+5	; 0x05
    25d6:	8c 83       	std	Y+4, r24	; 0x04
    25d8:	9d 83       	std	Y+5, r25	; 0x05
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    25da:	88 89       	ldd	r24, Y+16	; 0x10
    25dc:	99 89       	ldd	r25, Y+17	; 0x11
    25de:	aa 89       	ldd	r26, Y+18	; 0x12
    25e0:	bb 89       	ldd	r27, Y+19	; 0x13
    25e2:	ae 01       	movw	r20, r28
    25e4:	4e 5f       	subi	r20, 0xFE	; 254
    25e6:	5f 4f       	sbci	r21, 0xFF	; 255
    25e8:	08 e0       	ldi	r16, 0x08	; 8
    25ea:	10 e0       	ldi	r17, 0x00	; 0
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	bc 01       	movw	r22, r24
    25f2:	cd 01       	movw	r24, r26
    25f4:	0e 94 01 22 	call	0x4402	; 0x4402 <nm_write_block>
    25f8:	89 83       	std	Y+1, r24	; 0x01
			if(M2M_SUCCESS != ret) goto ERR1;
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	88 23       	and	r24, r24
    25fe:	09 f0       	breq	.+2      	; 0x2602 <hif_send+0x25c>
    2600:	b4 c0       	rjmp	.+360    	; 0x276a <hif_send+0x3c4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    2602:	88 89       	ldd	r24, Y+16	; 0x10
    2604:	99 89       	ldd	r25, Y+17	; 0x11
    2606:	aa 89       	ldd	r26, Y+18	; 0x12
    2608:	bb 89       	ldd	r27, Y+19	; 0x13
    260a:	08 96       	adiw	r24, 0x08	; 8
    260c:	a1 1d       	adc	r26, r1
    260e:	b1 1d       	adc	r27, r1
    2610:	88 8b       	std	Y+16, r24	; 0x10
    2612:	99 8b       	std	Y+17, r25	; 0x11
    2614:	aa 8b       	std	Y+18, r26	; 0x12
    2616:	bb 8b       	std	Y+19, r27	; 0x13
			if(pu8CtrlBuf != NULL)
    2618:	8e 89       	ldd	r24, Y+22	; 0x16
    261a:	9f 89       	ldd	r25, Y+23	; 0x17
    261c:	89 2b       	or	r24, r25
    261e:	41 f1       	breq	.+80     	; 0x2670 <hif_send+0x2ca>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    2620:	88 8d       	ldd	r24, Y+24	; 0x18
    2622:	99 8d       	ldd	r25, Y+25	; 0x19
    2624:	9c 01       	movw	r18, r24
    2626:	40 e0       	ldi	r20, 0x00	; 0
    2628:	50 e0       	ldi	r21, 0x00	; 0
    262a:	88 89       	ldd	r24, Y+16	; 0x10
    262c:	99 89       	ldd	r25, Y+17	; 0x11
    262e:	aa 89       	ldd	r26, Y+18	; 0x12
    2630:	bb 89       	ldd	r27, Y+19	; 0x13
    2632:	6e 89       	ldd	r22, Y+22	; 0x16
    2634:	7f 89       	ldd	r23, Y+23	; 0x17
    2636:	89 01       	movw	r16, r18
    2638:	9a 01       	movw	r18, r20
    263a:	ab 01       	movw	r20, r22
    263c:	bc 01       	movw	r22, r24
    263e:	cd 01       	movw	r24, r26
    2640:	0e 94 01 22 	call	0x4402	; 0x4402 <nm_write_block>
    2644:	89 83       	std	Y+1, r24	; 0x01
				if(M2M_SUCCESS != ret) goto ERR1;
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	88 23       	and	r24, r24
    264a:	09 f0       	breq	.+2      	; 0x264e <hif_send+0x2a8>
    264c:	90 c0       	rjmp	.+288    	; 0x276e <hif_send+0x3c8>
				u32CurrAddr += u16CtrlBufSize;
    264e:	88 8d       	ldd	r24, Y+24	; 0x18
    2650:	99 8d       	ldd	r25, Y+25	; 0x19
    2652:	9c 01       	movw	r18, r24
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	88 89       	ldd	r24, Y+16	; 0x10
    265a:	99 89       	ldd	r25, Y+17	; 0x11
    265c:	aa 89       	ldd	r26, Y+18	; 0x12
    265e:	bb 89       	ldd	r27, Y+19	; 0x13
    2660:	82 0f       	add	r24, r18
    2662:	93 1f       	adc	r25, r19
    2664:	a4 1f       	adc	r26, r20
    2666:	b5 1f       	adc	r27, r21
    2668:	88 8b       	std	Y+16, r24	; 0x10
    266a:	99 8b       	std	Y+17, r25	; 0x11
    266c:	aa 8b       	std	Y+18, r26	; 0x12
    266e:	bb 8b       	std	Y+19, r27	; 0x13
			}
			if(pu8DataBuf != NULL)
    2670:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2672:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2674:	89 2b       	or	r24, r25
    2676:	09 f4       	brne	.+2      	; 0x267a <hif_send+0x2d4>
    2678:	3f c0       	rjmp	.+126    	; 0x26f8 <hif_send+0x352>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    267a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    267c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    267e:	88 8d       	ldd	r24, Y+24	; 0x18
    2680:	99 8d       	ldd	r25, Y+25	; 0x19
    2682:	a9 01       	movw	r20, r18
    2684:	48 1b       	sub	r20, r24
    2686:	59 0b       	sbc	r21, r25
    2688:	ca 01       	movw	r24, r20
    268a:	9c 01       	movw	r18, r24
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	50 e0       	ldi	r21, 0x00	; 0
    2690:	88 89       	ldd	r24, Y+16	; 0x10
    2692:	99 89       	ldd	r25, Y+17	; 0x11
    2694:	aa 89       	ldd	r26, Y+18	; 0x12
    2696:	bb 89       	ldd	r27, Y+19	; 0x13
    2698:	82 0f       	add	r24, r18
    269a:	93 1f       	adc	r25, r19
    269c:	a4 1f       	adc	r26, r20
    269e:	b5 1f       	adc	r27, r21
    26a0:	88 8b       	std	Y+16, r24	; 0x10
    26a2:	99 8b       	std	Y+17, r25	; 0x11
    26a4:	aa 8b       	std	Y+18, r26	; 0x12
    26a6:	bb 8b       	std	Y+19, r27	; 0x13
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    26a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26aa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26ac:	9c 01       	movw	r18, r24
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	50 e0       	ldi	r21, 0x00	; 0
    26b2:	88 89       	ldd	r24, Y+16	; 0x10
    26b4:	99 89       	ldd	r25, Y+17	; 0x11
    26b6:	aa 89       	ldd	r26, Y+18	; 0x12
    26b8:	bb 89       	ldd	r27, Y+19	; 0x13
    26ba:	6a 8d       	ldd	r22, Y+26	; 0x1a
    26bc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    26be:	89 01       	movw	r16, r18
    26c0:	9a 01       	movw	r18, r20
    26c2:	ab 01       	movw	r20, r22
    26c4:	bc 01       	movw	r22, r24
    26c6:	cd 01       	movw	r24, r26
    26c8:	0e 94 01 22 	call	0x4402	; 0x4402 <nm_write_block>
    26cc:	89 83       	std	Y+1, r24	; 0x01
				if(M2M_SUCCESS != ret) goto ERR1;
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	88 23       	and	r24, r24
    26d2:	09 f0       	breq	.+2      	; 0x26d6 <hif_send+0x330>
    26d4:	4e c0       	rjmp	.+156    	; 0x2772 <hif_send+0x3cc>
				u32CurrAddr += u16DataSize;
    26d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26d8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26da:	9c 01       	movw	r18, r24
    26dc:	40 e0       	ldi	r20, 0x00	; 0
    26de:	50 e0       	ldi	r21, 0x00	; 0
    26e0:	88 89       	ldd	r24, Y+16	; 0x10
    26e2:	99 89       	ldd	r25, Y+17	; 0x11
    26e4:	aa 89       	ldd	r26, Y+18	; 0x12
    26e6:	bb 89       	ldd	r27, Y+19	; 0x13
    26e8:	82 0f       	add	r24, r18
    26ea:	93 1f       	adc	r25, r19
    26ec:	a4 1f       	adc	r26, r20
    26ee:	b5 1f       	adc	r27, r21
    26f0:	88 8b       	std	Y+16, r24	; 0x10
    26f2:	99 8b       	std	Y+17, r25	; 0x11
    26f4:	aa 8b       	std	Y+18, r26	; 0x12
    26f6:	bb 8b       	std	Y+19, r27	; 0x13
			}

			reg = dma_addr << 2;
    26f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    26fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    26fc:	ac 85       	ldd	r26, Y+12	; 0x0c
    26fe:	bd 85       	ldd	r27, Y+13	; 0x0d
    2700:	88 0f       	add	r24, r24
    2702:	99 1f       	adc	r25, r25
    2704:	aa 1f       	adc	r26, r26
    2706:	bb 1f       	adc	r27, r27
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	aa 1f       	adc	r26, r26
    270e:	bb 1f       	adc	r27, r27
    2710:	8e 83       	std	Y+6, r24	; 0x06
    2712:	9f 83       	std	Y+7, r25	; 0x07
    2714:	a8 87       	std	Y+8, r26	; 0x08
    2716:	b9 87       	std	Y+9, r27	; 0x09
			reg |= NBIT1;
    2718:	8e 81       	ldd	r24, Y+6	; 0x06
    271a:	9f 81       	ldd	r25, Y+7	; 0x07
    271c:	a8 85       	ldd	r26, Y+8	; 0x08
    271e:	b9 85       	ldd	r27, Y+9	; 0x09
    2720:	82 60       	ori	r24, 0x02	; 2
    2722:	8e 83       	std	Y+6, r24	; 0x06
    2724:	9f 83       	std	Y+7, r25	; 0x07
    2726:	a8 87       	std	Y+8, r26	; 0x08
    2728:	b9 87       	std	Y+9, r27	; 0x09
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    272a:	8e 81       	ldd	r24, Y+6	; 0x06
    272c:	9f 81       	ldd	r25, Y+7	; 0x07
    272e:	a8 85       	ldd	r26, Y+8	; 0x08
    2730:	b9 85       	ldd	r27, Y+9	; 0x09
    2732:	9c 01       	movw	r18, r24
    2734:	ad 01       	movw	r20, r26
    2736:	6c e6       	ldi	r22, 0x6C	; 108
    2738:	70 e1       	ldi	r23, 0x10	; 16
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    2742:	89 83       	std	Y+1, r24	; 0x01
			if(M2M_SUCCESS != ret) goto ERR1;
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	88 23       	and	r24, r24
    2748:	39 f0       	breq	.+14     	; 0x2758 <hif_send+0x3b2>
    274a:	14 c0       	rjmp	.+40     	; 0x2774 <hif_send+0x3ce>
		}
		else
		{
			ret = hif_chip_sleep();
    274c:	0e 94 95 11 	call	0x232a	; 0x232a <hif_chip_sleep>
    2750:	89 83       	std	Y+1, r24	; 0x01
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    2752:	8d ef       	ldi	r24, 0xFD	; 253
    2754:	89 83       	std	Y+1, r24	; 0x01
			goto ERR2;
    2756:	12 c0       	rjmp	.+36     	; 0x277c <hif_send+0x3d6>
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR2;
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    2758:	0e 94 95 11 	call	0x232a	; 0x232a <hif_chip_sleep>
    275c:	89 83       	std	Y+1, r24	; 0x01
	return ret;
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	0e c0       	rjmp	.+28     	; 0x277e <hif_send+0x3d8>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    2762:	00 00       	nop
    2764:	07 c0       	rjmp	.+14     	; 0x2774 <hif_send+0x3ce>

		reg = 0UL;
		reg |= NBIT1;
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    2766:	00 00       	nop
    2768:	05 c0       	rjmp	.+10     	; 0x2774 <hif_send+0x3ce>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
			if(M2M_SUCCESS != ret) goto ERR1;
    276a:	00 00       	nop
    276c:	03 c0       	rjmp	.+6      	; 0x2774 <hif_send+0x3ce>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
			if(pu8CtrlBuf != NULL)
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
				if(M2M_SUCCESS != ret) goto ERR1;
    276e:	00 00       	nop
    2770:	01 c0       	rjmp	.+2      	; 0x2774 <hif_send+0x3ce>
			}
			if(pu8DataBuf != NULL)
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
				if(M2M_SUCCESS != ret) goto ERR1;
    2772:	00 00       	nop
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    2774:	0e 94 84 11 	call	0x2308	; 0x2308 <hif_chip_sleep_sc>
    2778:	01 c0       	rjmp	.+2      	; 0x277c <hif_send+0x3d6>

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR2;
    277a:	00 00       	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
ERR2:
	/*logical error*/
	return ret;
    277c:	89 81       	ldd	r24, Y+1	; 0x01
}
    277e:	6f 96       	adiw	r28, 0x1f	; 31
    2780:	cd bf       	out	0x3d, r28	; 61
    2782:	de bf       	out	0x3e, r29	; 62
    2784:	df 91       	pop	r29
    2786:	cf 91       	pop	r28
    2788:	1f 91       	pop	r17
    278a:	0f 91       	pop	r16
    278c:	ff 90       	pop	r15
    278e:	ef 90       	pop	r14
    2790:	df 90       	pop	r13
    2792:	cf 90       	pop	r12
    2794:	08 95       	ret

00002796 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    2796:	0f 93       	push	r16
    2798:	1f 93       	push	r17
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	2f 97       	sbiw	r28, 0x0f	; 15
    27a4:	cd bf       	out	0x3d, r28	; 61
    27a6:	de bf       	out	0x3e, r29	; 62
	sint8 ret = M2M_SUCCESS;
    27a8:	19 82       	std	Y+1, r1	; 0x01
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    27aa:	ce 01       	movw	r24, r28
    27ac:	04 96       	adiw	r24, 0x04	; 4
    27ae:	ac 01       	movw	r20, r24
    27b0:	60 e7       	ldi	r22, 0x70	; 112
    27b2:	70 e1       	ldi	r23, 0x10	; 16
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    27bc:	89 83       	std	Y+1, r24	; 0x01
	if(M2M_SUCCESS == ret)
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	88 23       	and	r24, r24
    27c2:	09 f0       	breq	.+2      	; 0x27c6 <hif_isr+0x30>
    27c4:	70 c1       	rjmp	.+736    	; 0x2aa6 <hif_isr+0x310>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    27c6:	8c 81       	ldd	r24, Y+4	; 0x04
    27c8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ca:	ae 81       	ldd	r26, Y+6	; 0x06
    27cc:	bf 81       	ldd	r27, Y+7	; 0x07
    27ce:	81 70       	andi	r24, 0x01	; 1
    27d0:	99 27       	eor	r25, r25
    27d2:	aa 27       	eor	r26, r26
    27d4:	bb 27       	eor	r27, r27
    27d6:	89 2b       	or	r24, r25
    27d8:	8a 2b       	or	r24, r26
    27da:	8b 2b       	or	r24, r27
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <hif_isr+0x4a>
    27de:	60 c1       	rjmp	.+704    	; 0x2aa0 <hif_isr+0x30a>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <nm_bsp_interrupt_ctrl>
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    27e6:	8c 81       	ldd	r24, Y+4	; 0x04
    27e8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ea:	ae 81       	ldd	r26, Y+6	; 0x06
    27ec:	bf 81       	ldd	r27, Y+7	; 0x07
    27ee:	8e 7f       	andi	r24, 0xFE	; 254
    27f0:	8c 83       	std	Y+4, r24	; 0x04
    27f2:	9d 83       	std	Y+5, r25	; 0x05
    27f4:	ae 83       	std	Y+6, r26	; 0x06
    27f6:	bf 83       	std	Y+7, r27	; 0x07
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    27f8:	8c 81       	ldd	r24, Y+4	; 0x04
    27fa:	9d 81       	ldd	r25, Y+5	; 0x05
    27fc:	ae 81       	ldd	r26, Y+6	; 0x06
    27fe:	bf 81       	ldd	r27, Y+7	; 0x07
    2800:	9c 01       	movw	r18, r24
    2802:	ad 01       	movw	r20, r26
    2804:	60 e7       	ldi	r22, 0x70	; 112
    2806:	70 e1       	ldi	r23, 0x10	; 16
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    2810:	89 83       	std	Y+1, r24	; 0x01
			if(ret != M2M_SUCCESS)goto ERR1;
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	88 23       	and	r24, r24
    2816:	09 f0       	breq	.+2      	; 0x281a <hif_isr+0x84>
    2818:	48 c1       	rjmp	.+656    	; 0x2aaa <hif_isr+0x314>
			gstrHifCxt.u8HifRXDone = 1;
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	80 93 19 2e 	sts	0x2E19, r24	; 0x802e19 <gstrHifCxt+0x2>
			size = (uint16)((reg >> 2) & 0xfff);
    2820:	8c 81       	ldd	r24, Y+4	; 0x04
    2822:	9d 81       	ldd	r25, Y+5	; 0x05
    2824:	ae 81       	ldd	r26, Y+6	; 0x06
    2826:	bf 81       	ldd	r27, Y+7	; 0x07
    2828:	b6 95       	lsr	r27
    282a:	a7 95       	ror	r26
    282c:	97 95       	ror	r25
    282e:	87 95       	ror	r24
    2830:	b6 95       	lsr	r27
    2832:	a7 95       	ror	r26
    2834:	97 95       	ror	r25
    2836:	87 95       	ror	r24
    2838:	9f 70       	andi	r25, 0x0F	; 15
    283a:	8a 83       	std	Y+2, r24	; 0x02
    283c:	9b 83       	std	Y+3, r25	; 0x03
			if (size > 0) {
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
    2840:	9b 81       	ldd	r25, Y+3	; 0x03
    2842:	89 2b       	or	r24, r25
    2844:	09 f4       	brne	.+2      	; 0x2848 <hif_isr+0xb2>
    2846:	29 c1       	rjmp	.+594    	; 0x2a9a <hif_isr+0x304>
				uint32 address = 0;
    2848:	1c 86       	std	Y+12, r1	; 0x0c
    284a:	1d 86       	std	Y+13, r1	; 0x0d
    284c:	1e 86       	std	Y+14, r1	; 0x0e
    284e:	1f 86       	std	Y+15, r1	; 0x0f
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    2850:	ce 01       	movw	r24, r28
    2852:	0c 96       	adiw	r24, 0x0c	; 12
    2854:	ac 01       	movw	r20, r24
    2856:	64 e8       	ldi	r22, 0x84	; 132
    2858:	70 e1       	ldi	r23, 0x10	; 16
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    2862:	89 83       	std	Y+1, r24	; 0x01
				if(M2M_SUCCESS != ret)
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	88 23       	and	r24, r24
    2868:	21 f0       	breq	.+8      	; 0x2872 <hif_isr+0xdc>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
					nm_bsp_interrupt_ctrl(1);
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <nm_bsp_interrupt_ctrl>
					goto ERR1;
    2870:	1d c1       	rjmp	.+570    	; 0x2aac <hif_isr+0x316>
				}
				gstrHifCxt.u32RxAddr = address;
    2872:	8c 85       	ldd	r24, Y+12	; 0x0c
    2874:	9d 85       	ldd	r25, Y+13	; 0x0d
    2876:	ae 85       	ldd	r26, Y+14	; 0x0e
    2878:	bf 85       	ldd	r27, Y+15	; 0x0f
    287a:	80 93 1b 2e 	sts	0x2E1B, r24	; 0x802e1b <gstrHifCxt+0x4>
    287e:	90 93 1c 2e 	sts	0x2E1C, r25	; 0x802e1c <gstrHifCxt+0x5>
    2882:	a0 93 1d 2e 	sts	0x2E1D, r26	; 0x802e1d <gstrHifCxt+0x6>
    2886:	b0 93 1e 2e 	sts	0x2E1E, r27	; 0x802e1e <gstrHifCxt+0x7>
				gstrHifCxt.u32RxSize = size;
    288a:	8a 81       	ldd	r24, Y+2	; 0x02
    288c:	9b 81       	ldd	r25, Y+3	; 0x03
    288e:	cc 01       	movw	r24, r24
    2890:	a0 e0       	ldi	r26, 0x00	; 0
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	80 93 1f 2e 	sts	0x2E1F, r24	; 0x802e1f <gstrHifCxt+0x8>
    2898:	90 93 20 2e 	sts	0x2E20, r25	; 0x802e20 <gstrHifCxt+0x9>
    289c:	a0 93 21 2e 	sts	0x2E21, r26	; 0x802e21 <gstrHifCxt+0xa>
    28a0:	b0 93 22 2e 	sts	0x2E22, r27	; 0x802e22 <gstrHifCxt+0xb>
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    28a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    28a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    28a8:	ae 85       	ldd	r26, Y+14	; 0x0e
    28aa:	bf 85       	ldd	r27, Y+15	; 0x0f
    28ac:	ae 01       	movw	r20, r28
    28ae:	48 5f       	subi	r20, 0xF8	; 248
    28b0:	5f 4f       	sbci	r21, 0xFF	; 255
    28b2:	04 e0       	ldi	r16, 0x04	; 4
    28b4:	10 e0       	ldi	r17, 0x00	; 0
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	bc 01       	movw	r22, r24
    28bc:	cd 01       	movw	r24, r26
    28be:	0e 94 3e 21 	call	0x427c	; 0x427c <nm_read_block>
    28c2:	89 83       	std	Y+1, r24	; 0x01
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    28c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    28c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    28c8:	8a 87       	std	Y+10, r24	; 0x0a
    28ca:	9b 87       	std	Y+11, r25	; 0x0b
				if(M2M_SUCCESS != ret)
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	88 23       	and	r24, r24
    28d0:	21 f0       	breq	.+8      	; 0x28da <hif_isr+0x144>
				{
					M2M_ERR("(hif) address bus fail\n");
					nm_bsp_interrupt_ctrl(1);
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <nm_bsp_interrupt_ctrl>
					goto ERR1;
    28d8:	e9 c0       	rjmp	.+466    	; 0x2aac <hif_isr+0x316>
				}
				if(strHif.u16Length != size)
    28da:	2a 85       	ldd	r18, Y+10	; 0x0a
    28dc:	3b 85       	ldd	r19, Y+11	; 0x0b
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	9b 81       	ldd	r25, Y+3	; 0x03
    28e2:	28 17       	cp	r18, r24
    28e4:	39 07       	cpc	r19, r25
    28e6:	81 f0       	breq	.+32     	; 0x2908 <hif_isr+0x172>
				{
					if((size - strHif.u16Length) > 4)
    28e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    28ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    28ec:	2a 81       	ldd	r18, Y+2	; 0x02
    28ee:	3b 81       	ldd	r19, Y+3	; 0x03
    28f0:	a9 01       	movw	r20, r18
    28f2:	48 1b       	sub	r20, r24
    28f4:	59 0b       	sbc	r21, r25
    28f6:	ca 01       	movw	r24, r20
    28f8:	05 97       	sbiw	r24, 0x05	; 5
    28fa:	30 f0       	brcs	.+12     	; 0x2908 <hif_isr+0x172>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <nm_bsp_interrupt_ctrl>
						ret = M2M_ERR_BUS_FAIL;
    2902:	8a ef       	ldi	r24, 0xFA	; 250
    2904:	89 83       	std	Y+1, r24	; 0x01
						goto ERR1;
    2906:	d2 c0       	rjmp	.+420    	; 0x2aac <hif_isr+0x316>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    2908:	88 85       	ldd	r24, Y+8	; 0x08
    290a:	81 30       	cpi	r24, 0x01	; 1
    290c:	e9 f4       	brne	.+58     	; 0x2948 <hif_isr+0x1b2>
				{
					if(gstrHifCxt.pfWifiCb)
    290e:	80 91 23 2e 	lds	r24, 0x2E23	; 0x802e23 <gstrHifCxt+0xc>
    2912:	90 91 24 2e 	lds	r25, 0x2E24	; 0x802e24 <gstrHifCxt+0xd>
    2916:	89 2b       	or	r24, r25
    2918:	09 f4       	brne	.+2      	; 0x291c <hif_isr+0x186>
    291a:	b7 c0       	rjmp	.+366    	; 0x2a8a <hif_isr+0x2f4>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    291c:	e0 91 23 2e 	lds	r30, 0x2E23	; 0x802e23 <gstrHifCxt+0xc>
    2920:	f0 91 24 2e 	lds	r31, 0x2E24	; 0x802e24 <gstrHifCxt+0xd>
    2924:	8c 85       	ldd	r24, Y+12	; 0x0c
    2926:	9d 85       	ldd	r25, Y+13	; 0x0d
    2928:	ae 85       	ldd	r26, Y+14	; 0x0e
    292a:	bf 85       	ldd	r27, Y+15	; 0x0f
    292c:	08 96       	adiw	r24, 0x08	; 8
    292e:	a1 1d       	adc	r26, r1
    2930:	b1 1d       	adc	r27, r1
    2932:	2a 85       	ldd	r18, Y+10	; 0x0a
    2934:	3b 85       	ldd	r19, Y+11	; 0x0b
    2936:	b9 01       	movw	r22, r18
    2938:	68 50       	subi	r22, 0x08	; 8
    293a:	71 09       	sbc	r23, r1
    293c:	19 85       	ldd	r17, Y+9	; 0x09
    293e:	9c 01       	movw	r18, r24
    2940:	ad 01       	movw	r20, r26
    2942:	81 2f       	mov	r24, r17
    2944:	09 95       	icall
    2946:	a1 c0       	rjmp	.+322    	; 0x2a8a <hif_isr+0x2f4>
					else
						M2M_ERR("WIFI callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    2948:	88 85       	ldd	r24, Y+8	; 0x08
    294a:	82 30       	cpi	r24, 0x02	; 2
    294c:	e9 f4       	brne	.+58     	; 0x2988 <hif_isr+0x1f2>
				{
					if(gstrHifCxt.pfIpCb)
    294e:	80 91 25 2e 	lds	r24, 0x2E25	; 0x802e25 <gstrHifCxt+0xe>
    2952:	90 91 26 2e 	lds	r25, 0x2E26	; 0x802e26 <gstrHifCxt+0xf>
    2956:	89 2b       	or	r24, r25
    2958:	09 f4       	brne	.+2      	; 0x295c <hif_isr+0x1c6>
    295a:	97 c0       	rjmp	.+302    	; 0x2a8a <hif_isr+0x2f4>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    295c:	e0 91 25 2e 	lds	r30, 0x2E25	; 0x802e25 <gstrHifCxt+0xe>
    2960:	f0 91 26 2e 	lds	r31, 0x2E26	; 0x802e26 <gstrHifCxt+0xf>
    2964:	8c 85       	ldd	r24, Y+12	; 0x0c
    2966:	9d 85       	ldd	r25, Y+13	; 0x0d
    2968:	ae 85       	ldd	r26, Y+14	; 0x0e
    296a:	bf 85       	ldd	r27, Y+15	; 0x0f
    296c:	08 96       	adiw	r24, 0x08	; 8
    296e:	a1 1d       	adc	r26, r1
    2970:	b1 1d       	adc	r27, r1
    2972:	2a 85       	ldd	r18, Y+10	; 0x0a
    2974:	3b 85       	ldd	r19, Y+11	; 0x0b
    2976:	b9 01       	movw	r22, r18
    2978:	68 50       	subi	r22, 0x08	; 8
    297a:	71 09       	sbc	r23, r1
    297c:	19 85       	ldd	r17, Y+9	; 0x09
    297e:	9c 01       	movw	r18, r24
    2980:	ad 01       	movw	r20, r26
    2982:	81 2f       	mov	r24, r17
    2984:	09 95       	icall
    2986:	81 c0       	rjmp	.+258    	; 0x2a8a <hif_isr+0x2f4>
					else
						M2M_ERR("Scoket callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    2988:	88 85       	ldd	r24, Y+8	; 0x08
    298a:	84 30       	cpi	r24, 0x04	; 4
    298c:	e9 f4       	brne	.+58     	; 0x29c8 <hif_isr+0x232>
				{
					if(gstrHifCxt.pfOtaCb)
    298e:	80 91 27 2e 	lds	r24, 0x2E27	; 0x802e27 <gstrHifCxt+0x10>
    2992:	90 91 28 2e 	lds	r25, 0x2E28	; 0x802e28 <gstrHifCxt+0x11>
    2996:	89 2b       	or	r24, r25
    2998:	09 f4       	brne	.+2      	; 0x299c <hif_isr+0x206>
    299a:	77 c0       	rjmp	.+238    	; 0x2a8a <hif_isr+0x2f4>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    299c:	e0 91 27 2e 	lds	r30, 0x2E27	; 0x802e27 <gstrHifCxt+0x10>
    29a0:	f0 91 28 2e 	lds	r31, 0x2E28	; 0x802e28 <gstrHifCxt+0x11>
    29a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    29a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    29a8:	ae 85       	ldd	r26, Y+14	; 0x0e
    29aa:	bf 85       	ldd	r27, Y+15	; 0x0f
    29ac:	08 96       	adiw	r24, 0x08	; 8
    29ae:	a1 1d       	adc	r26, r1
    29b0:	b1 1d       	adc	r27, r1
    29b2:	2a 85       	ldd	r18, Y+10	; 0x0a
    29b4:	3b 85       	ldd	r19, Y+11	; 0x0b
    29b6:	b9 01       	movw	r22, r18
    29b8:	68 50       	subi	r22, 0x08	; 8
    29ba:	71 09       	sbc	r23, r1
    29bc:	19 85       	ldd	r17, Y+9	; 0x09
    29be:	9c 01       	movw	r18, r24
    29c0:	ad 01       	movw	r20, r26
    29c2:	81 2f       	mov	r24, r17
    29c4:	09 95       	icall
    29c6:	61 c0       	rjmp	.+194    	; 0x2a8a <hif_isr+0x2f4>
					else
						M2M_ERR("Ota callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    29c8:	88 85       	ldd	r24, Y+8	; 0x08
    29ca:	86 30       	cpi	r24, 0x06	; 6
    29cc:	e9 f4       	brne	.+58     	; 0x2a08 <hif_isr+0x272>
				{
					if(gstrHifCxt.pfCryptoCb)
    29ce:	80 91 2d 2e 	lds	r24, 0x2E2D	; 0x802e2d <gstrHifCxt+0x16>
    29d2:	90 91 2e 2e 	lds	r25, 0x2E2E	; 0x802e2e <gstrHifCxt+0x17>
    29d6:	89 2b       	or	r24, r25
    29d8:	09 f4       	brne	.+2      	; 0x29dc <hif_isr+0x246>
    29da:	57 c0       	rjmp	.+174    	; 0x2a8a <hif_isr+0x2f4>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    29dc:	e0 91 2d 2e 	lds	r30, 0x2E2D	; 0x802e2d <gstrHifCxt+0x16>
    29e0:	f0 91 2e 2e 	lds	r31, 0x2E2E	; 0x802e2e <gstrHifCxt+0x17>
    29e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    29e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    29e8:	ae 85       	ldd	r26, Y+14	; 0x0e
    29ea:	bf 85       	ldd	r27, Y+15	; 0x0f
    29ec:	08 96       	adiw	r24, 0x08	; 8
    29ee:	a1 1d       	adc	r26, r1
    29f0:	b1 1d       	adc	r27, r1
    29f2:	2a 85       	ldd	r18, Y+10	; 0x0a
    29f4:	3b 85       	ldd	r19, Y+11	; 0x0b
    29f6:	b9 01       	movw	r22, r18
    29f8:	68 50       	subi	r22, 0x08	; 8
    29fa:	71 09       	sbc	r23, r1
    29fc:	19 85       	ldd	r17, Y+9	; 0x09
    29fe:	9c 01       	movw	r18, r24
    2a00:	ad 01       	movw	r20, r26
    2a02:	81 2f       	mov	r24, r17
    2a04:	09 95       	icall
    2a06:	41 c0       	rjmp	.+130    	; 0x2a8a <hif_isr+0x2f4>

					else
						M2M_ERR("Crypto callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    2a08:	88 85       	ldd	r24, Y+8	; 0x08
    2a0a:	87 30       	cpi	r24, 0x07	; 7
    2a0c:	e1 f4       	brne	.+56     	; 0x2a46 <hif_isr+0x2b0>
				{
					if(gstrHifCxt.pfSigmaCb)
    2a0e:	80 91 29 2e 	lds	r24, 0x2E29	; 0x802e29 <gstrHifCxt+0x12>
    2a12:	90 91 2a 2e 	lds	r25, 0x2E2A	; 0x802e2a <gstrHifCxt+0x13>
    2a16:	89 2b       	or	r24, r25
    2a18:	c1 f1       	breq	.+112    	; 0x2a8a <hif_isr+0x2f4>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2a1a:	e0 91 29 2e 	lds	r30, 0x2E29	; 0x802e29 <gstrHifCxt+0x12>
    2a1e:	f0 91 2a 2e 	lds	r31, 0x2E2A	; 0x802e2a <gstrHifCxt+0x13>
    2a22:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a24:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a26:	ae 85       	ldd	r26, Y+14	; 0x0e
    2a28:	bf 85       	ldd	r27, Y+15	; 0x0f
    2a2a:	08 96       	adiw	r24, 0x08	; 8
    2a2c:	a1 1d       	adc	r26, r1
    2a2e:	b1 1d       	adc	r27, r1
    2a30:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a32:	3b 85       	ldd	r19, Y+11	; 0x0b
    2a34:	b9 01       	movw	r22, r18
    2a36:	68 50       	subi	r22, 0x08	; 8
    2a38:	71 09       	sbc	r23, r1
    2a3a:	19 85       	ldd	r17, Y+9	; 0x09
    2a3c:	9c 01       	movw	r18, r24
    2a3e:	ad 01       	movw	r20, r26
    2a40:	81 2f       	mov	r24, r17
    2a42:	09 95       	icall
    2a44:	22 c0       	rjmp	.+68     	; 0x2a8a <hif_isr+0x2f4>
					else
						M2M_ERR("Sigma callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    2a46:	88 85       	ldd	r24, Y+8	; 0x08
    2a48:	85 30       	cpi	r24, 0x05	; 5
    2a4a:	e1 f4       	brne	.+56     	; 0x2a84 <hif_isr+0x2ee>
				{
				    if(gstrHifCxt.pfSslCb)
    2a4c:	80 91 2f 2e 	lds	r24, 0x2E2F	; 0x802e2f <gstrHifCxt+0x18>
    2a50:	90 91 30 2e 	lds	r25, 0x2E30	; 0x802e30 <gstrHifCxt+0x19>
    2a54:	89 2b       	or	r24, r25
    2a56:	c9 f0       	breq	.+50     	; 0x2a8a <hif_isr+0x2f4>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2a58:	e0 91 2f 2e 	lds	r30, 0x2E2F	; 0x802e2f <gstrHifCxt+0x18>
    2a5c:	f0 91 30 2e 	lds	r31, 0x2E30	; 0x802e30 <gstrHifCxt+0x19>
    2a60:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a62:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a64:	ae 85       	ldd	r26, Y+14	; 0x0e
    2a66:	bf 85       	ldd	r27, Y+15	; 0x0f
    2a68:	08 96       	adiw	r24, 0x08	; 8
    2a6a:	a1 1d       	adc	r26, r1
    2a6c:	b1 1d       	adc	r27, r1
    2a6e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a70:	3b 85       	ldd	r19, Y+11	; 0x0b
    2a72:	b9 01       	movw	r22, r18
    2a74:	68 50       	subi	r22, 0x08	; 8
    2a76:	71 09       	sbc	r23, r1
    2a78:	19 85       	ldd	r17, Y+9	; 0x09
    2a7a:	9c 01       	movw	r18, r24
    2a7c:	ad 01       	movw	r20, r26
    2a7e:	81 2f       	mov	r24, r17
    2a80:	09 95       	icall
    2a82:	03 c0       	rjmp	.+6      	; 0x2a8a <hif_isr+0x2f4>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
					ret = M2M_ERR_BUS_FAIL;
    2a84:	8a ef       	ldi	r24, 0xFA	; 250
    2a86:	89 83       	std	Y+1, r24	; 0x01
					goto ERR1;
    2a88:	11 c0       	rjmp	.+34     	; 0x2aac <hif_isr+0x316>
				}
				if(gstrHifCxt.u8HifRXDone)
    2a8a:	80 91 19 2e 	lds	r24, 0x2E19	; 0x802e19 <gstrHifCxt+0x2>
    2a8e:	88 23       	and	r24, r24
    2a90:	69 f0       	breq	.+26     	; 0x2aac <hif_isr+0x316>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
					ret = hif_set_rx_done();
    2a92:	0e 94 10 11 	call	0x2220	; 0x2220 <hif_set_rx_done>
    2a96:	89 83       	std	Y+1, r24	; 0x01
    2a98:	09 c0       	rjmp	.+18     	; 0x2aac <hif_isr+0x316>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
				ret = M2M_ERR_RCV;
    2a9a:	8e ef       	ldi	r24, 0xFE	; 254
    2a9c:	89 83       	std	Y+1, r24	; 0x01
				goto ERR1;
    2a9e:	06 c0       	rjmp	.+12     	; 0x2aac <hif_isr+0x316>
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
			ret = M2M_ERR_FAIL;
    2aa0:	84 ef       	ldi	r24, 0xF4	; 244
    2aa2:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    2aa4:	03 c0       	rjmp	.+6      	; 0x2aac <hif_isr+0x316>
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
		goto ERR1;
    2aa6:	00 00       	nop
    2aa8:	01 c0       	rjmp	.+2      	; 0x2aac <hif_isr+0x316>

			nm_bsp_interrupt_ctrl(0);
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
			if(ret != M2M_SUCCESS)goto ERR1;
    2aaa:	00 00       	nop
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
		goto ERR1;
	}

ERR1:
	return ret;
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aae:	2f 96       	adiw	r28, 0x0f	; 15
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	de bf       	out	0x3e, r29	; 62
    2ab4:	df 91       	pop	r29
    2ab6:	cf 91       	pop	r28
    2ab8:	1f 91       	pop	r17
    2aba:	0f 91       	pop	r16
    2abc:	08 95       	ret

00002abe <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	1f 92       	push	r1
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
	sint8 ret = M2M_SUCCESS;	
    2ac8:	19 82       	std	Y+1, r1	; 0x01
	while (gstrHifCxt.u8Interrupt) {
    2aca:	0b c0       	rjmp	.+22     	; 0x2ae2 <hif_handle_isr+0x24>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    2acc:	80 91 1a 2e 	lds	r24, 0x2E1A	; 0x802e1a <gstrHifCxt+0x3>
    2ad0:	81 50       	subi	r24, 0x01	; 1
    2ad2:	80 93 1a 2e 	sts	0x2E1A, r24	; 0x802e1a <gstrHifCxt+0x3>
		while(1)
		{
			ret = hif_isr();
    2ad6:	0e 94 cb 13 	call	0x2796	; 0x2796 <hif_isr>
    2ada:	89 83       	std	Y+1, r24	; 0x01
			if(ret == M2M_SUCCESS) {
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	88 23       	and	r24, r24
    2ae0:	d1 f7       	brne	.-12     	; 0x2ad6 <hif_handle_isr+0x18>
*/

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    2ae2:	80 91 1a 2e 	lds	r24, 0x2E1A	; 0x802e1a <gstrHifCxt+0x3>
    2ae6:	88 23       	and	r24, r24
    2ae8:	89 f7       	brne	.-30     	; 0x2acc <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aec:	0f 90       	pop	r0
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	08 95       	ret

00002af4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    2af4:	ef 92       	push	r14
    2af6:	ff 92       	push	r15
    2af8:	0f 93       	push	r16
    2afa:	1f 93       	push	r17
    2afc:	cf 93       	push	r28
    2afe:	df 93       	push	r29
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
    2b04:	2a 97       	sbiw	r28, 0x0a	; 10
    2b06:	cd bf       	out	0x3d, r28	; 61
    2b08:	de bf       	out	0x3e, r29	; 62
    2b0a:	6a 83       	std	Y+2, r22	; 0x02
    2b0c:	7b 83       	std	Y+3, r23	; 0x03
    2b0e:	8c 83       	std	Y+4, r24	; 0x04
    2b10:	9d 83       	std	Y+5, r25	; 0x05
    2b12:	4e 83       	std	Y+6, r20	; 0x06
    2b14:	5f 83       	std	Y+7, r21	; 0x07
    2b16:	28 87       	std	Y+8, r18	; 0x08
    2b18:	39 87       	std	Y+9, r19	; 0x09
    2b1a:	0a 87       	std	Y+10, r16	; 0x0a
	sint8 ret = M2M_SUCCESS;
    2b1c:	19 82       	std	Y+1, r1	; 0x01
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    2b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b20:	9b 81       	ldd	r25, Y+3	; 0x03
    2b22:	ac 81       	ldd	r26, Y+4	; 0x04
    2b24:	bd 81       	ldd	r27, Y+5	; 0x05
    2b26:	89 2b       	or	r24, r25
    2b28:	8a 2b       	or	r24, r26
    2b2a:	8b 2b       	or	r24, r27
    2b2c:	41 f0       	breq	.+16     	; 0x2b3e <hif_receive+0x4a>
    2b2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b30:	9f 81       	ldd	r25, Y+7	; 0x07
    2b32:	89 2b       	or	r24, r25
    2b34:	21 f0       	breq	.+8      	; 0x2b3e <hif_receive+0x4a>
    2b36:	88 85       	ldd	r24, Y+8	; 0x08
    2b38:	99 85       	ldd	r25, Y+9	; 0x09
    2b3a:	89 2b       	or	r24, r25
    2b3c:	51 f4       	brne	.+20     	; 0x2b52 <hif_receive+0x5e>
	{
		if(isDone)
    2b3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b40:	88 23       	and	r24, r24
    2b42:	21 f0       	breq	.+8      	; 0x2b4c <hif_receive+0x58>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    2b44:	0e 94 10 11 	call	0x2220	; 0x2220 <hif_set_rx_done>
    2b48:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    2b4a:	96 c0       	rjmp	.+300    	; 0x2c78 <hif_receive+0x184>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    2b4c:	84 ef       	ldi	r24, 0xF4	; 244
    2b4e:	89 83       	std	Y+1, r24	; 0x01
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    2b50:	93 c0       	rjmp	.+294    	; 0x2c78 <hif_receive+0x184>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    2b52:	88 85       	ldd	r24, Y+8	; 0x08
    2b54:	99 85       	ldd	r25, Y+9	; 0x09
    2b56:	9c 01       	movw	r18, r24
    2b58:	40 e0       	ldi	r20, 0x00	; 0
    2b5a:	50 e0       	ldi	r21, 0x00	; 0
    2b5c:	80 91 1f 2e 	lds	r24, 0x2E1F	; 0x802e1f <gstrHifCxt+0x8>
    2b60:	90 91 20 2e 	lds	r25, 0x2E20	; 0x802e20 <gstrHifCxt+0x9>
    2b64:	a0 91 21 2e 	lds	r26, 0x2E21	; 0x802e21 <gstrHifCxt+0xa>
    2b68:	b0 91 22 2e 	lds	r27, 0x2E22	; 0x802e22 <gstrHifCxt+0xb>
    2b6c:	82 17       	cp	r24, r18
    2b6e:	93 07       	cpc	r25, r19
    2b70:	a4 07       	cpc	r26, r20
    2b72:	b5 07       	cpc	r27, r21
    2b74:	18 f4       	brcc	.+6      	; 0x2b7c <hif_receive+0x88>
	{
		ret = M2M_ERR_FAIL;
    2b76:	84 ef       	ldi	r24, 0xF4	; 244
    2b78:	89 83       	std	Y+1, r24	; 0x01
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
    2b7a:	7e c0       	rjmp	.+252    	; 0x2c78 <hif_receive+0x184>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    2b7c:	20 91 1b 2e 	lds	r18, 0x2E1B	; 0x802e1b <gstrHifCxt+0x4>
    2b80:	30 91 1c 2e 	lds	r19, 0x2E1C	; 0x802e1c <gstrHifCxt+0x5>
    2b84:	40 91 1d 2e 	lds	r20, 0x2E1D	; 0x802e1d <gstrHifCxt+0x6>
    2b88:	50 91 1e 2e 	lds	r21, 0x2E1E	; 0x802e1e <gstrHifCxt+0x7>
    2b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b90:	ac 81       	ldd	r26, Y+4	; 0x04
    2b92:	bd 81       	ldd	r27, Y+5	; 0x05
    2b94:	82 17       	cp	r24, r18
    2b96:	93 07       	cpc	r25, r19
    2b98:	a4 07       	cpc	r26, r20
    2b9a:	b5 07       	cpc	r27, r21
    2b9c:	30 f1       	brcs	.+76     	; 0x2bea <hif_receive+0xf6>
    2b9e:	88 85       	ldd	r24, Y+8	; 0x08
    2ba0:	99 85       	ldd	r25, Y+9	; 0x09
    2ba2:	9c 01       	movw	r18, r24
    2ba4:	40 e0       	ldi	r20, 0x00	; 0
    2ba6:	50 e0       	ldi	r21, 0x00	; 0
    2ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    2baa:	9b 81       	ldd	r25, Y+3	; 0x03
    2bac:	ac 81       	ldd	r26, Y+4	; 0x04
    2bae:	bd 81       	ldd	r27, Y+5	; 0x05
    2bb0:	28 0f       	add	r18, r24
    2bb2:	39 1f       	adc	r19, r25
    2bb4:	4a 1f       	adc	r20, r26
    2bb6:	5b 1f       	adc	r21, r27
    2bb8:	e0 90 1b 2e 	lds	r14, 0x2E1B	; 0x802e1b <gstrHifCxt+0x4>
    2bbc:	f0 90 1c 2e 	lds	r15, 0x2E1C	; 0x802e1c <gstrHifCxt+0x5>
    2bc0:	00 91 1d 2e 	lds	r16, 0x2E1D	; 0x802e1d <gstrHifCxt+0x6>
    2bc4:	10 91 1e 2e 	lds	r17, 0x2E1E	; 0x802e1e <gstrHifCxt+0x7>
    2bc8:	80 91 1f 2e 	lds	r24, 0x2E1F	; 0x802e1f <gstrHifCxt+0x8>
    2bcc:	90 91 20 2e 	lds	r25, 0x2E20	; 0x802e20 <gstrHifCxt+0x9>
    2bd0:	a0 91 21 2e 	lds	r26, 0x2E21	; 0x802e21 <gstrHifCxt+0xa>
    2bd4:	b0 91 22 2e 	lds	r27, 0x2E22	; 0x802e22 <gstrHifCxt+0xb>
    2bd8:	8e 0d       	add	r24, r14
    2bda:	9f 1d       	adc	r25, r15
    2bdc:	a0 1f       	adc	r26, r16
    2bde:	b1 1f       	adc	r27, r17
    2be0:	82 17       	cp	r24, r18
    2be2:	93 07       	cpc	r25, r19
    2be4:	a4 07       	cpc	r26, r20
    2be6:	b5 07       	cpc	r27, r21
    2be8:	18 f4       	brcc	.+6      	; 0x2bf0 <hif_receive+0xfc>
	{
		ret = M2M_ERR_FAIL;
    2bea:	84 ef       	ldi	r24, 0xF4	; 244
    2bec:	89 83       	std	Y+1, r24	; 0x01
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
    2bee:	44 c0       	rjmp	.+136    	; 0x2c78 <hif_receive+0x184>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    2bf0:	88 85       	ldd	r24, Y+8	; 0x08
    2bf2:	99 85       	ldd	r25, Y+9	; 0x09
    2bf4:	9c 01       	movw	r18, r24
    2bf6:	40 e0       	ldi	r20, 0x00	; 0
    2bf8:	50 e0       	ldi	r21, 0x00	; 0
    2bfa:	6e 81       	ldd	r22, Y+6	; 0x06
    2bfc:	7f 81       	ldd	r23, Y+7	; 0x07
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	9b 81       	ldd	r25, Y+3	; 0x03
    2c02:	ac 81       	ldd	r26, Y+4	; 0x04
    2c04:	bd 81       	ldd	r27, Y+5	; 0x05
    2c06:	89 01       	movw	r16, r18
    2c08:	9a 01       	movw	r18, r20
    2c0a:	ab 01       	movw	r20, r22
    2c0c:	bc 01       	movw	r22, r24
    2c0e:	cd 01       	movw	r24, r26
    2c10:	0e 94 3e 21 	call	0x427c	; 0x427c <nm_read_block>
    2c14:	89 83       	std	Y+1, r24	; 0x01
	if(ret != M2M_SUCCESS)goto ERR1;
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	88 23       	and	r24, r24
    2c1a:	69 f5       	brne	.+90     	; 0x2c76 <hif_receive+0x182>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    2c1c:	20 91 1b 2e 	lds	r18, 0x2E1B	; 0x802e1b <gstrHifCxt+0x4>
    2c20:	30 91 1c 2e 	lds	r19, 0x2E1C	; 0x802e1c <gstrHifCxt+0x5>
    2c24:	40 91 1d 2e 	lds	r20, 0x2E1D	; 0x802e1d <gstrHifCxt+0x6>
    2c28:	50 91 1e 2e 	lds	r21, 0x2E1E	; 0x802e1e <gstrHifCxt+0x7>
    2c2c:	80 91 1f 2e 	lds	r24, 0x2E1F	; 0x802e1f <gstrHifCxt+0x8>
    2c30:	90 91 20 2e 	lds	r25, 0x2E20	; 0x802e20 <gstrHifCxt+0x9>
    2c34:	a0 91 21 2e 	lds	r26, 0x2E21	; 0x802e21 <gstrHifCxt+0xa>
    2c38:	b0 91 22 2e 	lds	r27, 0x2E22	; 0x802e22 <gstrHifCxt+0xb>
    2c3c:	28 0f       	add	r18, r24
    2c3e:	39 1f       	adc	r19, r25
    2c40:	4a 1f       	adc	r20, r26
    2c42:	5b 1f       	adc	r21, r27
    2c44:	88 85       	ldd	r24, Y+8	; 0x08
    2c46:	99 85       	ldd	r25, Y+9	; 0x09
    2c48:	7c 01       	movw	r14, r24
    2c4a:	00 e0       	ldi	r16, 0x00	; 0
    2c4c:	10 e0       	ldi	r17, 0x00	; 0
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	9b 81       	ldd	r25, Y+3	; 0x03
    2c52:	ac 81       	ldd	r26, Y+4	; 0x04
    2c54:	bd 81       	ldd	r27, Y+5	; 0x05
    2c56:	8e 0d       	add	r24, r14
    2c58:	9f 1d       	adc	r25, r15
    2c5a:	a0 1f       	adc	r26, r16
    2c5c:	b1 1f       	adc	r27, r17
    2c5e:	28 17       	cp	r18, r24
    2c60:	39 07       	cpc	r19, r25
    2c62:	4a 07       	cpc	r20, r26
    2c64:	5b 07       	cpc	r21, r27
    2c66:	19 f0       	breq	.+6      	; 0x2c6e <hif_receive+0x17a>
    2c68:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c6a:	88 23       	and	r24, r24
    2c6c:	29 f0       	breq	.+10     	; 0x2c78 <hif_receive+0x184>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    2c6e:	0e 94 10 11 	call	0x2220	; 0x2220 <hif_set_rx_done>
    2c72:	89 83       	std	Y+1, r24	; 0x01
    2c74:	01 c0       	rjmp	.+2      	; 0x2c78 <hif_receive+0x184>
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;
    2c76:	00 00       	nop
		/* set RX done */
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c7a:	2a 96       	adiw	r28, 0x0a	; 10
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	de bf       	out	0x3e, r29	; 62
    2c80:	df 91       	pop	r29
    2c82:	cf 91       	pop	r28
    2c84:	1f 91       	pop	r17
    2c86:	0f 91       	pop	r16
    2c88:	ff 90       	pop	r15
    2c8a:	ef 90       	pop	r14
    2c8c:	08 95       	ret

00002c8e <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    2c8e:	cf 93       	push	r28
    2c90:	df 93       	push	r29
    2c92:	00 d0       	rcall	.+0      	; 0x2c94 <hif_register_cb+0x6>
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <hif_register_cb+0x8>
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    2c9a:	8a 83       	std	Y+2, r24	; 0x02
    2c9c:	6b 83       	std	Y+3, r22	; 0x03
    2c9e:	7c 83       	std	Y+4, r23	; 0x04
	sint8 ret = M2M_SUCCESS;
    2ca0:	19 82       	std	Y+1, r1	; 0x01
	switch(u8Grp)
    2ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca4:	88 2f       	mov	r24, r24
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	09 2e       	mov	r0, r25
    2caa:	00 0c       	add	r0, r0
    2cac:	aa 0b       	sbc	r26, r26
    2cae:	bb 0b       	sbc	r27, r27
    2cb0:	41 e0       	ldi	r20, 0x01	; 1
    2cb2:	50 e0       	ldi	r21, 0x00	; 0
    2cb4:	26 e0       	ldi	r18, 0x06	; 6
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	84 1b       	sub	r24, r20
    2cba:	95 0b       	sbc	r25, r21
    2cbc:	28 17       	cp	r18, r24
    2cbe:	39 07       	cpc	r19, r25
    2cc0:	b0 f1       	brcs	.+108    	; 0x2d2e <hif_register_cb+0xa0>
    2cc2:	80 5b       	subi	r24, 0xB0	; 176
    2cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	0c 94 80 37 	jmp	0x6f00	; 0x6f00 <__tablejump2__>
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    2ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cce:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd0:	80 93 25 2e 	sts	0x2E25, r24	; 0x802e25 <gstrHifCxt+0xe>
    2cd4:	90 93 26 2e 	sts	0x2E26, r25	; 0x802e26 <gstrHifCxt+0xf>
			break;
    2cd8:	2d c0       	rjmp	.+90     	; 0x2d34 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cde:	80 93 23 2e 	sts	0x2E23, r24	; 0x802e23 <gstrHifCxt+0xc>
    2ce2:	90 93 24 2e 	sts	0x2E24, r25	; 0x802e24 <gstrHifCxt+0xd>
			break;
    2ce6:	26 c0       	rjmp	.+76     	; 0x2d34 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	9c 81       	ldd	r25, Y+4	; 0x04
    2cec:	80 93 27 2e 	sts	0x2E27, r24	; 0x802e27 <gstrHifCxt+0x10>
    2cf0:	90 93 28 2e 	sts	0x2E28, r25	; 0x802e28 <gstrHifCxt+0x11>
			break;
    2cf4:	1f c0       	rjmp	.+62     	; 0x2d34 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    2cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfa:	80 93 2b 2e 	sts	0x2E2B, r24	; 0x802e2b <gstrHifCxt+0x14>
    2cfe:	90 93 2c 2e 	sts	0x2E2C, r25	; 0x802e2c <gstrHifCxt+0x15>
			break;
    2d02:	18 c0       	rjmp	.+48     	; 0x2d34 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    2d04:	8b 81       	ldd	r24, Y+3	; 0x03
    2d06:	9c 81       	ldd	r25, Y+4	; 0x04
    2d08:	80 93 2d 2e 	sts	0x2E2D, r24	; 0x802e2d <gstrHifCxt+0x16>
    2d0c:	90 93 2e 2e 	sts	0x2E2E, r25	; 0x802e2e <gstrHifCxt+0x17>
			break;
    2d10:	11 c0       	rjmp	.+34     	; 0x2d34 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    2d12:	8b 81       	ldd	r24, Y+3	; 0x03
    2d14:	9c 81       	ldd	r25, Y+4	; 0x04
    2d16:	80 93 29 2e 	sts	0x2E29, r24	; 0x802e29 <gstrHifCxt+0x12>
    2d1a:	90 93 2a 2e 	sts	0x2E2A, r25	; 0x802e2a <gstrHifCxt+0x13>
			break;
    2d1e:	0a c0       	rjmp	.+20     	; 0x2d34 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    2d20:	8b 81       	ldd	r24, Y+3	; 0x03
    2d22:	9c 81       	ldd	r25, Y+4	; 0x04
    2d24:	80 93 2f 2e 	sts	0x2E2F, r24	; 0x802e2f <gstrHifCxt+0x18>
    2d28:	90 93 30 2e 	sts	0x2E30, r25	; 0x802e30 <gstrHifCxt+0x19>
			break;
    2d2c:	03 c0       	rjmp	.+6      	; 0x2d34 <hif_register_cb+0xa6>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
    2d2e:	84 ef       	ldi	r24, 0xF4	; 244
    2d30:	89 83       	std	Y+1, r24	; 0x01
			break;
    2d32:	00 00       	nop
	}
	return ret;
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d36:	24 96       	adiw	r28, 0x04	; 4
    2d38:	cd bf       	out	0x3d, r28	; 61
    2d3a:	de bf       	out	0x3e, r29	; 62
    2d3c:	df 91       	pop	r29
    2d3e:	cf 91       	pop	r28
    2d40:	08 95       	ret

00002d42 <m2m_wifi_cb>:
}

sint8 m2m_wifi_default_connect(void)
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}
    2d42:	0f 93       	push	r16
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	c5 5a       	subi	r28, 0xA5	; 165
    2d4e:	d1 09       	sbc	r29, r1
    2d50:	cd bf       	out	0x3d, r28	; 61
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	fe 01       	movw	r30, r28
    2d56:	e1 56       	subi	r30, 0x61	; 97
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	80 83       	st	Z, r24
    2d5c:	ce 01       	movw	r24, r28
    2d5e:	80 56       	subi	r24, 0x60	; 96
    2d60:	9f 4f       	sbci	r25, 0xFF	; 255
    2d62:	fc 01       	movw	r30, r24
    2d64:	60 83       	st	Z, r22
    2d66:	71 83       	std	Z+1, r23	; 0x01
    2d68:	ce 01       	movw	r24, r28
    2d6a:	8e 55       	subi	r24, 0x5E	; 94
    2d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d6e:	fc 01       	movw	r30, r24
    2d70:	20 83       	st	Z, r18
    2d72:	31 83       	std	Z+1, r19	; 0x01
    2d74:	42 83       	std	Z+2, r20	; 0x02
    2d76:	53 83       	std	Z+3, r21	; 0x03
    2d78:	ce 01       	movw	r24, r28
    2d7a:	81 56       	subi	r24, 0x61	; 97
    2d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d7e:	fc 01       	movw	r30, r24
    2d80:	80 81       	ld	r24, Z
    2d82:	8c 32       	cpi	r24, 0x2C	; 44
    2d84:	39 f5       	brne	.+78     	; 0x2dd4 <m2m_wifi_cb+0x92>
    2d86:	ae 01       	movw	r20, r28
    2d88:	47 5f       	subi	r20, 0xF7	; 247
    2d8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d8c:	ce 01       	movw	r24, r28
    2d8e:	8e 55       	subi	r24, 0x5E	; 94
    2d90:	9f 4f       	sbci	r25, 0xFF	; 255
    2d92:	fc 01       	movw	r30, r24
    2d94:	80 81       	ld	r24, Z
    2d96:	91 81       	ldd	r25, Z+1	; 0x01
    2d98:	a2 81       	ldd	r26, Z+2	; 0x02
    2d9a:	b3 81       	ldd	r27, Z+3	; 0x03
    2d9c:	00 e0       	ldi	r16, 0x00	; 0
    2d9e:	24 e0       	ldi	r18, 0x04	; 4
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	bc 01       	movw	r22, r24
    2da4:	cd 01       	movw	r24, r26
    2da6:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    2daa:	88 23       	and	r24, r24
    2dac:	09 f0       	breq	.+2      	; 0x2db0 <m2m_wifi_cb+0x6e>
    2dae:	62 c2       	rjmp	.+1220   	; 0x3274 <m2m_wifi_cb+0x532>
    2db0:	80 91 0b 2e 	lds	r24, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    2db4:	90 91 0c 2e 	lds	r25, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    2db8:	89 2b       	or	r24, r25
    2dba:	09 f4       	brne	.+2      	; 0x2dbe <m2m_wifi_cb+0x7c>
    2dbc:	5b c2       	rjmp	.+1206   	; 0x3274 <m2m_wifi_cb+0x532>
    2dbe:	20 91 0b 2e 	lds	r18, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    2dc2:	30 91 0c 2e 	lds	r19, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    2dc6:	ce 01       	movw	r24, r28
    2dc8:	09 96       	adiw	r24, 0x09	; 9
    2dca:	bc 01       	movw	r22, r24
    2dcc:	8c e2       	ldi	r24, 0x2C	; 44
    2dce:	f9 01       	movw	r30, r18
    2dd0:	09 95       	icall
    2dd2:	50 c2       	rjmp	.+1184   	; 0x3274 <m2m_wifi_cb+0x532>
    2dd4:	ce 01       	movw	r24, r28
    2dd6:	81 56       	subi	r24, 0x61	; 97
    2dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dda:	fc 01       	movw	r30, r24
    2ddc:	80 81       	ld	r24, Z
    2dde:	8b 31       	cpi	r24, 0x1B	; 27
    2de0:	39 f5       	brne	.+78     	; 0x2e30 <m2m_wifi_cb+0xee>
    2de2:	ae 01       	movw	r20, r28
    2de4:	43 5f       	subi	r20, 0xF3	; 243
    2de6:	5f 4f       	sbci	r21, 0xFF	; 255
    2de8:	ce 01       	movw	r24, r28
    2dea:	8e 55       	subi	r24, 0x5E	; 94
    2dec:	9f 4f       	sbci	r25, 0xFF	; 255
    2dee:	fc 01       	movw	r30, r24
    2df0:	80 81       	ld	r24, Z
    2df2:	91 81       	ldd	r25, Z+1	; 0x01
    2df4:	a2 81       	ldd	r26, Z+2	; 0x02
    2df6:	b3 81       	ldd	r27, Z+3	; 0x03
    2df8:	00 e0       	ldi	r16, 0x00	; 0
    2dfa:	28 e0       	ldi	r18, 0x08	; 8
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	bc 01       	movw	r22, r24
    2e00:	cd 01       	movw	r24, r26
    2e02:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    2e06:	88 23       	and	r24, r24
    2e08:	09 f0       	breq	.+2      	; 0x2e0c <m2m_wifi_cb+0xca>
    2e0a:	34 c2       	rjmp	.+1128   	; 0x3274 <m2m_wifi_cb+0x532>
    2e0c:	80 91 0b 2e 	lds	r24, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    2e10:	90 91 0c 2e 	lds	r25, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    2e14:	89 2b       	or	r24, r25
    2e16:	09 f4       	brne	.+2      	; 0x2e1a <m2m_wifi_cb+0xd8>
    2e18:	2d c2       	rjmp	.+1114   	; 0x3274 <m2m_wifi_cb+0x532>
    2e1a:	20 91 0b 2e 	lds	r18, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    2e1e:	30 91 0c 2e 	lds	r19, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    2e22:	ce 01       	movw	r24, r28
    2e24:	0d 96       	adiw	r24, 0x0d	; 13
    2e26:	bc 01       	movw	r22, r24
    2e28:	8b e1       	ldi	r24, 0x1B	; 27
    2e2a:	f9 01       	movw	r30, r18
    2e2c:	09 95       	icall
    2e2e:	22 c2       	rjmp	.+1092   	; 0x3274 <m2m_wifi_cb+0x532>
    2e30:	ce 01       	movw	r24, r28
    2e32:	81 56       	subi	r24, 0x61	; 97
    2e34:	9f 4f       	sbci	r25, 0xFF	; 255
    2e36:	fc 01       	movw	r30, r24
    2e38:	80 81       	ld	r24, Z
    2e3a:	86 30       	cpi	r24, 0x06	; 6
    2e3c:	39 f5       	brne	.+78     	; 0x2e8c <m2m_wifi_cb+0x14a>
    2e3e:	ae 01       	movw	r20, r28
    2e40:	45 5c       	subi	r20, 0xC5	; 197
    2e42:	5f 4f       	sbci	r21, 0xFF	; 255
    2e44:	ce 01       	movw	r24, r28
    2e46:	8e 55       	subi	r24, 0x5E	; 94
    2e48:	9f 4f       	sbci	r25, 0xFF	; 255
    2e4a:	fc 01       	movw	r30, r24
    2e4c:	80 81       	ld	r24, Z
    2e4e:	91 81       	ldd	r25, Z+1	; 0x01
    2e50:	a2 81       	ldd	r26, Z+2	; 0x02
    2e52:	b3 81       	ldd	r27, Z+3	; 0x03
    2e54:	01 e0       	ldi	r16, 0x01	; 1
    2e56:	20 e3       	ldi	r18, 0x30	; 48
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    2e62:	88 23       	and	r24, r24
    2e64:	09 f0       	breq	.+2      	; 0x2e68 <m2m_wifi_cb+0x126>
    2e66:	06 c2       	rjmp	.+1036   	; 0x3274 <m2m_wifi_cb+0x532>
    2e68:	80 91 0b 2e 	lds	r24, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    2e6c:	90 91 0c 2e 	lds	r25, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    2e70:	89 2b       	or	r24, r25
    2e72:	09 f4       	brne	.+2      	; 0x2e76 <m2m_wifi_cb+0x134>
    2e74:	ff c1       	rjmp	.+1022   	; 0x3274 <m2m_wifi_cb+0x532>
    2e76:	20 91 0b 2e 	lds	r18, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    2e7a:	30 91 0c 2e 	lds	r19, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    2e7e:	ce 01       	movw	r24, r28
    2e80:	cb 96       	adiw	r24, 0x3b	; 59
    2e82:	bc 01       	movw	r22, r24
    2e84:	86 e0       	ldi	r24, 0x06	; 6
    2e86:	f9 01       	movw	r30, r18
    2e88:	09 95       	icall
    2e8a:	f4 c1       	rjmp	.+1000   	; 0x3274 <m2m_wifi_cb+0x532>
    2e8c:	ce 01       	movw	r24, r28
    2e8e:	81 56       	subi	r24, 0x61	; 97
    2e90:	9f 4f       	sbci	r25, 0xFF	; 255
    2e92:	fc 01       	movw	r30, r24
    2e94:	80 81       	ld	r24, Z
    2e96:	8e 30       	cpi	r24, 0x0E	; 14
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <m2m_wifi_cb+0x15a>
    2e9a:	ec c1       	rjmp	.+984    	; 0x3274 <m2m_wifi_cb+0x532>
    2e9c:	ce 01       	movw	r24, r28
    2e9e:	81 56       	subi	r24, 0x61	; 97
    2ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	80 81       	ld	r24, Z
    2ea6:	82 33       	cpi	r24, 0x32	; 50
    2ea8:	39 f5       	brne	.+78     	; 0x2ef8 <m2m_wifi_cb+0x1b6>
    2eaa:	ae 01       	movw	r20, r28
    2eac:	4b 5e       	subi	r20, 0xEB	; 235
    2eae:	5f 4f       	sbci	r21, 0xFF	; 255
    2eb0:	ce 01       	movw	r24, r28
    2eb2:	8e 55       	subi	r24, 0x5E	; 94
    2eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	80 81       	ld	r24, Z
    2eba:	91 81       	ldd	r25, Z+1	; 0x01
    2ebc:	a2 81       	ldd	r26, Z+2	; 0x02
    2ebe:	b3 81       	ldd	r27, Z+3	; 0x03
    2ec0:	00 e0       	ldi	r16, 0x00	; 0
    2ec2:	24 e1       	ldi	r18, 0x14	; 20
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	bc 01       	movw	r22, r24
    2ec8:	cd 01       	movw	r24, r26
    2eca:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    2ece:	88 23       	and	r24, r24
    2ed0:	09 f0       	breq	.+2      	; 0x2ed4 <m2m_wifi_cb+0x192>
    2ed2:	d0 c1       	rjmp	.+928    	; 0x3274 <m2m_wifi_cb+0x532>
    2ed4:	80 91 0b 2e 	lds	r24, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    2ed8:	90 91 0c 2e 	lds	r25, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    2edc:	89 2b       	or	r24, r25
    2ede:	09 f4       	brne	.+2      	; 0x2ee2 <m2m_wifi_cb+0x1a0>
    2ee0:	c9 c1       	rjmp	.+914    	; 0x3274 <m2m_wifi_cb+0x532>
    2ee2:	20 91 0b 2e 	lds	r18, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    2ee6:	30 91 0c 2e 	lds	r19, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    2eea:	ce 01       	movw	r24, r28
    2eec:	45 96       	adiw	r24, 0x15	; 21
    2eee:	bc 01       	movw	r22, r24
    2ef0:	82 e3       	ldi	r24, 0x32	; 50
    2ef2:	f9 01       	movw	r30, r18
    2ef4:	09 95       	icall
    2ef6:	be c1       	rjmp	.+892    	; 0x3274 <m2m_wifi_cb+0x532>
    2ef8:	ce 01       	movw	r24, r28
    2efa:	81 56       	subi	r24, 0x61	; 97
    2efc:	9f 4f       	sbci	r25, 0xFF	; 255
    2efe:	fc 01       	movw	r30, r24
    2f00:	80 81       	ld	r24, Z
    2f02:	8f 32       	cpi	r24, 0x2F	; 47
    2f04:	81 f5       	brne	.+96     	; 0x2f66 <m2m_wifi_cb+0x224>
    2f06:	ce 01       	movw	r24, r28
    2f08:	cb 96       	adiw	r24, 0x3b	; 59
    2f0a:	24 e6       	ldi	r18, 0x64	; 100
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e0       	ldi	r20, 0x00	; 0
    2f10:	50 e0       	ldi	r21, 0x00	; 0
    2f12:	60 e0       	ldi	r22, 0x00	; 0
    2f14:	0e 94 a5 10 	call	0x214a	; 0x214a <m2m_memset>
    2f18:	ae 01       	movw	r20, r28
    2f1a:	45 5c       	subi	r20, 0xC5	; 197
    2f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f1e:	ce 01       	movw	r24, r28
    2f20:	8e 55       	subi	r24, 0x5E	; 94
    2f22:	9f 4f       	sbci	r25, 0xFF	; 255
    2f24:	fc 01       	movw	r30, r24
    2f26:	80 81       	ld	r24, Z
    2f28:	91 81       	ldd	r25, Z+1	; 0x01
    2f2a:	a2 81       	ldd	r26, Z+2	; 0x02
    2f2c:	b3 81       	ldd	r27, Z+3	; 0x03
    2f2e:	00 e0       	ldi	r16, 0x00	; 0
    2f30:	24 e6       	ldi	r18, 0x64	; 100
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	bc 01       	movw	r22, r24
    2f36:	cd 01       	movw	r24, r26
    2f38:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    2f3c:	88 23       	and	r24, r24
    2f3e:	09 f0       	breq	.+2      	; 0x2f42 <m2m_wifi_cb+0x200>
    2f40:	99 c1       	rjmp	.+818    	; 0x3274 <m2m_wifi_cb+0x532>
    2f42:	80 91 0b 2e 	lds	r24, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    2f46:	90 91 0c 2e 	lds	r25, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    2f4a:	89 2b       	or	r24, r25
    2f4c:	09 f4       	brne	.+2      	; 0x2f50 <m2m_wifi_cb+0x20e>
    2f4e:	92 c1       	rjmp	.+804    	; 0x3274 <m2m_wifi_cb+0x532>
    2f50:	20 91 0b 2e 	lds	r18, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    2f54:	30 91 0c 2e 	lds	r19, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    2f58:	ce 01       	movw	r24, r28
    2f5a:	cb 96       	adiw	r24, 0x3b	; 59
    2f5c:	bc 01       	movw	r22, r24
    2f5e:	8f e2       	ldi	r24, 0x2F	; 47
    2f60:	f9 01       	movw	r30, r18
    2f62:	09 95       	icall
    2f64:	87 c1       	rjmp	.+782    	; 0x3274 <m2m_wifi_cb+0x532>
    2f66:	ce 01       	movw	r24, r28
    2f68:	81 56       	subi	r24, 0x61	; 97
    2f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	80 81       	ld	r24, Z
    2f70:	84 33       	cpi	r24, 0x34	; 52
    2f72:	31 f5       	brne	.+76     	; 0x2fc0 <m2m_wifi_cb+0x27e>
    2f74:	ae 01       	movw	r20, r28
    2f76:	47 5d       	subi	r20, 0xD7	; 215
    2f78:	5f 4f       	sbci	r21, 0xFF	; 255
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	8e 55       	subi	r24, 0x5E	; 94
    2f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f80:	fc 01       	movw	r30, r24
    2f82:	80 81       	ld	r24, Z
    2f84:	91 81       	ldd	r25, Z+1	; 0x01
    2f86:	a2 81       	ldd	r26, Z+2	; 0x02
    2f88:	b3 81       	ldd	r27, Z+3	; 0x03
    2f8a:	00 e0       	ldi	r16, 0x00	; 0
    2f8c:	24 e0       	ldi	r18, 0x04	; 4
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	bc 01       	movw	r22, r24
    2f92:	cd 01       	movw	r24, r26
    2f94:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    2f98:	88 23       	and	r24, r24
    2f9a:	09 f0       	breq	.+2      	; 0x2f9e <m2m_wifi_cb+0x25c>
    2f9c:	6b c1       	rjmp	.+726    	; 0x3274 <m2m_wifi_cb+0x532>
    2f9e:	80 91 0b 2e 	lds	r24, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    2fa2:	90 91 0c 2e 	lds	r25, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    2fa6:	89 2b       	or	r24, r25
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <m2m_wifi_cb+0x26a>
    2faa:	64 c1       	rjmp	.+712    	; 0x3274 <m2m_wifi_cb+0x532>
    2fac:	20 91 0b 2e 	lds	r18, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    2fb0:	30 91 0c 2e 	lds	r19, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    2fb4:	60 e0       	ldi	r22, 0x00	; 0
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	84 e3       	ldi	r24, 0x34	; 52
    2fba:	f9 01       	movw	r30, r18
    2fbc:	09 95       	icall
    2fbe:	5a c1       	rjmp	.+692    	; 0x3274 <m2m_wifi_cb+0x532>
    2fc0:	ce 01       	movw	r24, r28
    2fc2:	81 56       	subi	r24, 0x61	; 97
    2fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	80 81       	ld	r24, Z
    2fca:	81 31       	cpi	r24, 0x11	; 17
    2fcc:	61 f5       	brne	.+88     	; 0x3026 <m2m_wifi_cb+0x2e4>
    2fce:	10 92 0a 2e 	sts	0x2E0A, r1	; 0x802e0a <gu8scanInProgress>
    2fd2:	ae 01       	movw	r20, r28
    2fd4:	43 5d       	subi	r20, 0xD3	; 211
    2fd6:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd8:	ce 01       	movw	r24, r28
    2fda:	8e 55       	subi	r24, 0x5E	; 94
    2fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    2fde:	fc 01       	movw	r30, r24
    2fe0:	80 81       	ld	r24, Z
    2fe2:	91 81       	ldd	r25, Z+1	; 0x01
    2fe4:	a2 81       	ldd	r26, Z+2	; 0x02
    2fe6:	b3 81       	ldd	r27, Z+3	; 0x03
    2fe8:	00 e0       	ldi	r16, 0x00	; 0
    2fea:	24 e0       	ldi	r18, 0x04	; 4
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	bc 01       	movw	r22, r24
    2ff0:	cd 01       	movw	r24, r26
    2ff2:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    2ff6:	88 23       	and	r24, r24
    2ff8:	09 f0       	breq	.+2      	; 0x2ffc <m2m_wifi_cb+0x2ba>
    2ffa:	3c c1       	rjmp	.+632    	; 0x3274 <m2m_wifi_cb+0x532>
    2ffc:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ffe:	80 93 09 2e 	sts	0x2E09, r24	; 0x802e09 <gu8ChNum>
    3002:	80 91 0b 2e 	lds	r24, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    3006:	90 91 0c 2e 	lds	r25, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    300a:	89 2b       	or	r24, r25
    300c:	09 f4       	brne	.+2      	; 0x3010 <m2m_wifi_cb+0x2ce>
    300e:	32 c1       	rjmp	.+612    	; 0x3274 <m2m_wifi_cb+0x532>
    3010:	20 91 0b 2e 	lds	r18, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    3014:	30 91 0c 2e 	lds	r19, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    3018:	ce 01       	movw	r24, r28
    301a:	8d 96       	adiw	r24, 0x2d	; 45
    301c:	bc 01       	movw	r22, r24
    301e:	81 e1       	ldi	r24, 0x11	; 17
    3020:	f9 01       	movw	r30, r18
    3022:	09 95       	icall
    3024:	27 c1       	rjmp	.+590    	; 0x3274 <m2m_wifi_cb+0x532>
    3026:	ce 01       	movw	r24, r28
    3028:	81 56       	subi	r24, 0x61	; 97
    302a:	9f 4f       	sbci	r25, 0xFF	; 255
    302c:	fc 01       	movw	r30, r24
    302e:	80 81       	ld	r24, Z
    3030:	83 31       	cpi	r24, 0x13	; 19
    3032:	39 f5       	brne	.+78     	; 0x3082 <m2m_wifi_cb+0x340>
    3034:	ae 01       	movw	r20, r28
    3036:	45 5c       	subi	r20, 0xC5	; 197
    3038:	5f 4f       	sbci	r21, 0xFF	; 255
    303a:	ce 01       	movw	r24, r28
    303c:	8e 55       	subi	r24, 0x5E	; 94
    303e:	9f 4f       	sbci	r25, 0xFF	; 255
    3040:	fc 01       	movw	r30, r24
    3042:	80 81       	ld	r24, Z
    3044:	91 81       	ldd	r25, Z+1	; 0x01
    3046:	a2 81       	ldd	r26, Z+2	; 0x02
    3048:	b3 81       	ldd	r27, Z+3	; 0x03
    304a:	00 e0       	ldi	r16, 0x00	; 0
    304c:	2c e2       	ldi	r18, 0x2C	; 44
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	bc 01       	movw	r22, r24
    3052:	cd 01       	movw	r24, r26
    3054:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    3058:	88 23       	and	r24, r24
    305a:	09 f0       	breq	.+2      	; 0x305e <m2m_wifi_cb+0x31c>
    305c:	0b c1       	rjmp	.+534    	; 0x3274 <m2m_wifi_cb+0x532>
    305e:	80 91 0b 2e 	lds	r24, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    3062:	90 91 0c 2e 	lds	r25, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    3066:	89 2b       	or	r24, r25
    3068:	09 f4       	brne	.+2      	; 0x306c <m2m_wifi_cb+0x32a>
    306a:	04 c1       	rjmp	.+520    	; 0x3274 <m2m_wifi_cb+0x532>
    306c:	20 91 0b 2e 	lds	r18, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    3070:	30 91 0c 2e 	lds	r19, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    3074:	ce 01       	movw	r24, r28
    3076:	cb 96       	adiw	r24, 0x3b	; 59
    3078:	bc 01       	movw	r22, r24
    307a:	83 e1       	ldi	r24, 0x13	; 19
    307c:	f9 01       	movw	r30, r18
    307e:	09 95       	icall
    3080:	f9 c0       	rjmp	.+498    	; 0x3274 <m2m_wifi_cb+0x532>
    3082:	ce 01       	movw	r24, r28
    3084:	81 56       	subi	r24, 0x61	; 97
    3086:	9f 4f       	sbci	r25, 0xFF	; 255
    3088:	fc 01       	movw	r30, r24
    308a:	80 81       	ld	r24, Z
    308c:	84 30       	cpi	r24, 0x04	; 4
    308e:	39 f5       	brne	.+78     	; 0x30de <m2m_wifi_cb+0x39c>
    3090:	ce 01       	movw	r24, r28
    3092:	8e 55       	subi	r24, 0x5E	; 94
    3094:	9f 4f       	sbci	r25, 0xFF	; 255
    3096:	fc 01       	movw	r30, r24
    3098:	80 81       	ld	r24, Z
    309a:	91 81       	ldd	r25, Z+1	; 0x01
    309c:	a2 81       	ldd	r26, Z+2	; 0x02
    309e:	b3 81       	ldd	r27, Z+3	; 0x03
    30a0:	00 e0       	ldi	r16, 0x00	; 0
    30a2:	24 e0       	ldi	r18, 0x04	; 4
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	ae 01       	movw	r20, r28
    30a8:	4f 5f       	subi	r20, 0xFF	; 255
    30aa:	5f 4f       	sbci	r21, 0xFF	; 255
    30ac:	bc 01       	movw	r22, r24
    30ae:	cd 01       	movw	r24, r26
    30b0:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    30b4:	88 23       	and	r24, r24
    30b6:	09 f0       	breq	.+2      	; 0x30ba <m2m_wifi_cb+0x378>
    30b8:	dd c0       	rjmp	.+442    	; 0x3274 <m2m_wifi_cb+0x532>
    30ba:	80 91 0b 2e 	lds	r24, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    30be:	90 91 0c 2e 	lds	r25, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    30c2:	89 2b       	or	r24, r25
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <m2m_wifi_cb+0x386>
    30c6:	d6 c0       	rjmp	.+428    	; 0x3274 <m2m_wifi_cb+0x532>
    30c8:	20 91 0b 2e 	lds	r18, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    30cc:	30 91 0c 2e 	lds	r19, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    30d0:	ce 01       	movw	r24, r28
    30d2:	01 96       	adiw	r24, 0x01	; 1
    30d4:	bc 01       	movw	r22, r24
    30d6:	84 e0       	ldi	r24, 0x04	; 4
    30d8:	f9 01       	movw	r30, r18
    30da:	09 95       	icall
    30dc:	cb c0       	rjmp	.+406    	; 0x3274 <m2m_wifi_cb+0x532>
    30de:	ce 01       	movw	r24, r28
    30e0:	81 56       	subi	r24, 0x61	; 97
    30e2:	9f 4f       	sbci	r25, 0xFF	; 255
    30e4:	fc 01       	movw	r30, r24
    30e6:	80 81       	ld	r24, Z
    30e8:	85 36       	cpi	r24, 0x65	; 101
    30ea:	39 f5       	brne	.+78     	; 0x313a <m2m_wifi_cb+0x3f8>
    30ec:	ce 01       	movw	r24, r28
    30ee:	8e 55       	subi	r24, 0x5E	; 94
    30f0:	9f 4f       	sbci	r25, 0xFF	; 255
    30f2:	fc 01       	movw	r30, r24
    30f4:	80 81       	ld	r24, Z
    30f6:	91 81       	ldd	r25, Z+1	; 0x01
    30f8:	a2 81       	ldd	r26, Z+2	; 0x02
    30fa:	b3 81       	ldd	r27, Z+3	; 0x03
    30fc:	00 e0       	ldi	r16, 0x00	; 0
    30fe:	24 e0       	ldi	r18, 0x04	; 4
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	ae 01       	movw	r20, r28
    3104:	4f 5f       	subi	r20, 0xFF	; 255
    3106:	5f 4f       	sbci	r21, 0xFF	; 255
    3108:	bc 01       	movw	r22, r24
    310a:	cd 01       	movw	r24, r26
    310c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    3110:	88 23       	and	r24, r24
    3112:	09 f0       	breq	.+2      	; 0x3116 <m2m_wifi_cb+0x3d4>
    3114:	af c0       	rjmp	.+350    	; 0x3274 <m2m_wifi_cb+0x532>
    3116:	80 91 0b 2e 	lds	r24, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    311a:	90 91 0c 2e 	lds	r25, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    311e:	89 2b       	or	r24, r25
    3120:	09 f4       	brne	.+2      	; 0x3124 <m2m_wifi_cb+0x3e2>
    3122:	a8 c0       	rjmp	.+336    	; 0x3274 <m2m_wifi_cb+0x532>
    3124:	20 91 0b 2e 	lds	r18, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    3128:	30 91 0c 2e 	lds	r19, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    312c:	ce 01       	movw	r24, r28
    312e:	01 96       	adiw	r24, 0x01	; 1
    3130:	bc 01       	movw	r22, r24
    3132:	85 e6       	ldi	r24, 0x65	; 101
    3134:	f9 01       	movw	r30, r18
    3136:	09 95       	icall
    3138:	9d c0       	rjmp	.+314    	; 0x3274 <m2m_wifi_cb+0x532>
    313a:	ce 01       	movw	r24, r28
    313c:	81 56       	subi	r24, 0x61	; 97
    313e:	9f 4f       	sbci	r25, 0xFF	; 255
    3140:	fc 01       	movw	r30, r24
    3142:	80 81       	ld	r24, Z
    3144:	89 30       	cpi	r24, 0x09	; 9
    3146:	39 f5       	brne	.+78     	; 0x3196 <m2m_wifi_cb+0x454>
    3148:	ae 01       	movw	r20, r28
    314a:	45 5c       	subi	r20, 0xC5	; 197
    314c:	5f 4f       	sbci	r21, 0xFF	; 255
    314e:	ce 01       	movw	r24, r28
    3150:	8e 55       	subi	r24, 0x5E	; 94
    3152:	9f 4f       	sbci	r25, 0xFF	; 255
    3154:	fc 01       	movw	r30, r24
    3156:	80 81       	ld	r24, Z
    3158:	91 81       	ldd	r25, Z+1	; 0x01
    315a:	a2 81       	ldd	r26, Z+2	; 0x02
    315c:	b3 81       	ldd	r27, Z+3	; 0x03
    315e:	01 e0       	ldi	r16, 0x01	; 1
    3160:	24 e6       	ldi	r18, 0x64	; 100
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	bc 01       	movw	r22, r24
    3166:	cd 01       	movw	r24, r26
    3168:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    316c:	88 23       	and	r24, r24
    316e:	09 f0       	breq	.+2      	; 0x3172 <m2m_wifi_cb+0x430>
    3170:	81 c0       	rjmp	.+258    	; 0x3274 <m2m_wifi_cb+0x532>
    3172:	80 91 0b 2e 	lds	r24, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    3176:	90 91 0c 2e 	lds	r25, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    317a:	89 2b       	or	r24, r25
    317c:	09 f4       	brne	.+2      	; 0x3180 <m2m_wifi_cb+0x43e>
    317e:	7a c0       	rjmp	.+244    	; 0x3274 <m2m_wifi_cb+0x532>
    3180:	20 91 0b 2e 	lds	r18, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    3184:	30 91 0c 2e 	lds	r19, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    3188:	ce 01       	movw	r24, r28
    318a:	cb 96       	adiw	r24, 0x3b	; 59
    318c:	bc 01       	movw	r22, r24
    318e:	89 e0       	ldi	r24, 0x09	; 9
    3190:	f9 01       	movw	r30, r18
    3192:	09 95       	icall
    3194:	6f c0       	rjmp	.+222    	; 0x3274 <m2m_wifi_cb+0x532>
    3196:	ce 01       	movw	r24, r28
    3198:	81 56       	subi	r24, 0x61	; 97
    319a:	9f 4f       	sbci	r25, 0xFF	; 255
    319c:	fc 01       	movw	r30, r24
    319e:	80 81       	ld	r24, Z
    31a0:	8a 32       	cpi	r24, 0x2A	; 42
    31a2:	39 f5       	brne	.+78     	; 0x31f2 <m2m_wifi_cb+0x4b0>
    31a4:	ae 01       	movw	r20, r28
    31a6:	4f 5c       	subi	r20, 0xCF	; 207
    31a8:	5f 4f       	sbci	r21, 0xFF	; 255
    31aa:	ce 01       	movw	r24, r28
    31ac:	8e 55       	subi	r24, 0x5E	; 94
    31ae:	9f 4f       	sbci	r25, 0xFF	; 255
    31b0:	fc 01       	movw	r30, r24
    31b2:	80 81       	ld	r24, Z
    31b4:	91 81       	ldd	r25, Z+1	; 0x01
    31b6:	a2 81       	ldd	r26, Z+2	; 0x02
    31b8:	b3 81       	ldd	r27, Z+3	; 0x03
    31ba:	01 e0       	ldi	r16, 0x01	; 1
    31bc:	24 e0       	ldi	r18, 0x04	; 4
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	bc 01       	movw	r22, r24
    31c2:	cd 01       	movw	r24, r26
    31c4:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    31c8:	88 23       	and	r24, r24
    31ca:	09 f0       	breq	.+2      	; 0x31ce <m2m_wifi_cb+0x48c>
    31cc:	53 c0       	rjmp	.+166    	; 0x3274 <m2m_wifi_cb+0x532>
    31ce:	80 91 0b 2e 	lds	r24, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    31d2:	90 91 0c 2e 	lds	r25, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    31d6:	89 2b       	or	r24, r25
    31d8:	09 f4       	brne	.+2      	; 0x31dc <m2m_wifi_cb+0x49a>
    31da:	4c c0       	rjmp	.+152    	; 0x3274 <m2m_wifi_cb+0x532>
    31dc:	20 91 0b 2e 	lds	r18, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    31e0:	30 91 0c 2e 	lds	r19, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    31e4:	ce 01       	movw	r24, r28
    31e6:	c1 96       	adiw	r24, 0x31	; 49
    31e8:	bc 01       	movw	r22, r24
    31ea:	8a e2       	ldi	r24, 0x2A	; 42
    31ec:	f9 01       	movw	r30, r18
    31ee:	09 95       	icall
    31f0:	41 c0       	rjmp	.+130    	; 0x3274 <m2m_wifi_cb+0x532>
    31f2:	ce 01       	movw	r24, r28
    31f4:	81 56       	subi	r24, 0x61	; 97
    31f6:	9f 4f       	sbci	r25, 0xFF	; 255
    31f8:	fc 01       	movw	r30, r24
    31fa:	80 81       	ld	r24, Z
    31fc:	80 32       	cpi	r24, 0x20	; 32
    31fe:	d1 f5       	brne	.+116    	; 0x3274 <m2m_wifi_cb+0x532>
    3200:	ae 01       	movw	r20, r28
    3202:	4b 5c       	subi	r20, 0xCB	; 203
    3204:	5f 4f       	sbci	r21, 0xFF	; 255
    3206:	ce 01       	movw	r24, r28
    3208:	8e 55       	subi	r24, 0x5E	; 94
    320a:	9f 4f       	sbci	r25, 0xFF	; 255
    320c:	fc 01       	movw	r30, r24
    320e:	80 81       	ld	r24, Z
    3210:	91 81       	ldd	r25, Z+1	; 0x01
    3212:	a2 81       	ldd	r26, Z+2	; 0x02
    3214:	b3 81       	ldd	r27, Z+3	; 0x03
    3216:	00 e0       	ldi	r16, 0x00	; 0
    3218:	26 e0       	ldi	r18, 0x06	; 6
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	bc 01       	movw	r22, r24
    321e:	cd 01       	movw	r24, r26
    3220:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    3224:	88 23       	and	r24, r24
    3226:	31 f5       	brne	.+76     	; 0x3274 <m2m_wifi_cb+0x532>
    3228:	2f a9       	ldd	r18, Y+55	; 0x37
    322a:	38 ad       	ldd	r19, Y+56	; 0x38
    322c:	4d a9       	ldd	r20, Y+53	; 0x35
    322e:	5e a9       	ldd	r21, Y+54	; 0x36
    3230:	ce 01       	movw	r24, r28
    3232:	8e 55       	subi	r24, 0x5E	; 94
    3234:	9f 4f       	sbci	r25, 0xFF	; 255
    3236:	fc 01       	movw	r30, r24
    3238:	80 81       	ld	r24, Z
    323a:	91 81       	ldd	r25, Z+1	; 0x01
    323c:	a2 81       	ldd	r26, Z+2	; 0x02
    323e:	b3 81       	ldd	r27, Z+3	; 0x03
    3240:	06 96       	adiw	r24, 0x06	; 6
    3242:	a1 1d       	adc	r26, r1
    3244:	b1 1d       	adc	r27, r1
    3246:	01 e0       	ldi	r16, 0x01	; 1
    3248:	bc 01       	movw	r22, r24
    324a:	cd 01       	movw	r24, r26
    324c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    3250:	88 23       	and	r24, r24
    3252:	81 f4       	brne	.+32     	; 0x3274 <m2m_wifi_cb+0x532>
    3254:	80 91 0b 2e 	lds	r24, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    3258:	90 91 0c 2e 	lds	r25, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    325c:	89 2b       	or	r24, r25
    325e:	51 f0       	breq	.+20     	; 0x3274 <m2m_wifi_cb+0x532>
    3260:	20 91 0b 2e 	lds	r18, 0x2E0B	; 0x802e0b <gpfAppWifiCb>
    3264:	30 91 0c 2e 	lds	r19, 0x2E0C	; 0x802e0c <gpfAppWifiCb+0x1>
    3268:	ce 01       	movw	r24, r28
    326a:	c5 96       	adiw	r24, 0x35	; 53
    326c:	bc 01       	movw	r22, r24
    326e:	80 e2       	ldi	r24, 0x20	; 32
    3270:	f9 01       	movw	r30, r18
    3272:	09 95       	icall
    3274:	00 00       	nop
    3276:	cb 55       	subi	r28, 0x5B	; 91
    3278:	df 4f       	sbci	r29, 0xFF	; 255
    327a:	cd bf       	out	0x3d, r28	; 61
    327c:	de bf       	out	0x3e, r29	; 62
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	0f 91       	pop	r16
    3284:	08 95       	ret

00003286 <m2m_wifi_init>:
    3286:	cf 93       	push	r28
    3288:	df 93       	push	r29
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
    328e:	aa 97       	sbiw	r28, 0x2a	; 42
    3290:	cd bf       	out	0x3d, r28	; 61
    3292:	de bf       	out	0x3e, r29	; 62
    3294:	89 a7       	std	Y+41, r24	; 0x29
    3296:	9a a7       	std	Y+42, r25	; 0x2a
    3298:	19 82       	std	Y+1, r1	; 0x01
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	88 a7       	std	Y+40, r24	; 0x28
    329e:	89 a5       	ldd	r24, Y+41	; 0x29
    32a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    32a2:	89 2b       	or	r24, r25
    32a4:	19 f4       	brne	.+6      	; 0x32ac <m2m_wifi_init+0x26>
    32a6:	84 ef       	ldi	r24, 0xF4	; 244
    32a8:	89 83       	std	Y+1, r24	; 0x01
    32aa:	2d c0       	rjmp	.+90     	; 0x3306 <m2m_wifi_init+0x80>
    32ac:	89 a5       	ldd	r24, Y+41	; 0x29
    32ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    32b0:	fc 01       	movw	r30, r24
    32b2:	80 81       	ld	r24, Z
    32b4:	91 81       	ldd	r25, Z+1	; 0x01
    32b6:	80 93 0b 2e 	sts	0x2E0B, r24	; 0x802e0b <gpfAppWifiCb>
    32ba:	90 93 0c 2e 	sts	0x2E0C, r25	; 0x802e0c <gpfAppWifiCb+0x1>
    32be:	10 92 0a 2e 	sts	0x2E0A, r1	; 0x802e0a <gu8scanInProgress>
    32c2:	ce 01       	movw	r24, r28
    32c4:	88 96       	adiw	r24, 0x28	; 40
    32c6:	0e 94 9f 23 	call	0x473e	; 0x473e <nm_drv_init>
    32ca:	89 83       	std	Y+1, r24	; 0x01
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	88 23       	and	r24, r24
    32d0:	c9 f4       	brne	.+50     	; 0x3304 <m2m_wifi_init+0x7e>
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	0e 94 b4 11 	call	0x2368	; 0x2368 <hif_init>
    32da:	89 83       	std	Y+1, r24	; 0x01
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	88 23       	and	r24, r24
    32e0:	59 f4       	brne	.+22     	; 0x32f8 <m2m_wifi_init+0x72>
    32e2:	61 ea       	ldi	r22, 0xA1	; 161
    32e4:	76 e1       	ldi	r23, 0x16	; 22
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <hif_register_cb>
    32ec:	ce 01       	movw	r24, r28
    32ee:	02 96       	adiw	r24, 0x02	; 2
    32f0:	0e 94 a3 22 	call	0x4546	; 0x4546 <nm_get_firmware_full_info>
    32f4:	89 83       	std	Y+1, r24	; 0x01
    32f6:	07 c0       	rjmp	.+14     	; 0x3306 <m2m_wifi_init+0x80>
    32f8:	00 00       	nop
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <nm_drv_deinit>
    3302:	01 c0       	rjmp	.+2      	; 0x3306 <m2m_wifi_init+0x80>
    3304:	00 00       	nop
    3306:	89 81       	ldd	r24, Y+1	; 0x01
    3308:	aa 96       	adiw	r28, 0x2a	; 42
    330a:	cd bf       	out	0x3d, r28	; 61
    330c:	de bf       	out	0x3e, r29	; 62
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	08 95       	ret

00003314 <m2m_wifi_handle_events>:
    3314:	cf 93       	push	r28
    3316:	df 93       	push	r29
    3318:	00 d0       	rcall	.+0      	; 0x331a <m2m_wifi_handle_events+0x6>
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	89 83       	std	Y+1, r24	; 0x01
    3320:	9a 83       	std	Y+2, r25	; 0x02
    3322:	0e 94 5f 15 	call	0x2abe	; 0x2abe <hif_handle_isr>
    3326:	0f 90       	pop	r0
    3328:	0f 90       	pop	r0
    332a:	df 91       	pop	r29
    332c:	cf 91       	pop	r28
    332e:	08 95       	ret

00003330 <m2m_wifi_connect>:

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    3330:	ef 92       	push	r14
    3332:	0f 93       	push	r16
    3334:	1f 93       	push	r17
    3336:	cf 93       	push	r28
    3338:	df 93       	push	r29
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
    333e:	28 97       	sbiw	r28, 0x08	; 8
    3340:	cd bf       	out	0x3d, r28	; 61
    3342:	de bf       	out	0x3e, r29	; 62
    3344:	89 83       	std	Y+1, r24	; 0x01
    3346:	9a 83       	std	Y+2, r25	; 0x02
    3348:	6b 83       	std	Y+3, r22	; 0x03
    334a:	4c 83       	std	Y+4, r20	; 0x04
    334c:	2d 83       	std	Y+5, r18	; 0x05
    334e:	3e 83       	std	Y+6, r19	; 0x06
    3350:	0f 83       	std	Y+7, r16	; 0x07
    3352:	18 87       	std	Y+8, r17	; 0x08
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    3354:	4f 81       	ldd	r20, Y+7	; 0x07
    3356:	58 85       	ldd	r21, Y+8	; 0x08
    3358:	2d 81       	ldd	r18, Y+5	; 0x05
    335a:	3e 81       	ldd	r19, Y+6	; 0x06
    335c:	89 81       	ldd	r24, Y+1	; 0x01
    335e:	9a 81       	ldd	r25, Y+2	; 0x02
    3360:	e1 2c       	mov	r14, r1
    3362:	8a 01       	movw	r16, r20
    3364:	4c 81       	ldd	r20, Y+4	; 0x04
    3366:	6b 81       	ldd	r22, Y+3	; 0x03
    3368:	0e 94 bf 19 	call	0x337e	; 0x337e <m2m_wifi_connect_sc>
}
    336c:	28 96       	adiw	r28, 0x08	; 8
    336e:	cd bf       	out	0x3d, r28	; 61
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	df 91       	pop	r29
    3374:	cf 91       	pop	r28
    3376:	1f 91       	pop	r17
    3378:	0f 91       	pop	r16
    337a:	ef 90       	pop	r14
    337c:	08 95       	ret

0000337e <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    337e:	cf 92       	push	r12
    3380:	df 92       	push	r13
    3382:	ef 92       	push	r14
    3384:	ff 92       	push	r15
    3386:	0f 93       	push	r16
    3388:	1f 93       	push	r17
    338a:	cf 93       	push	r28
    338c:	df 93       	push	r29
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	c3 58       	subi	r28, 0x83	; 131
    3394:	d1 09       	sbc	r29, r1
    3396:	cd bf       	out	0x3d, r28	; 61
    3398:	de bf       	out	0x3e, r29	; 62
    339a:	fe 01       	movw	r30, r28
    339c:	e7 58       	subi	r30, 0x87	; 135
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	80 83       	st	Z, r24
    33a2:	91 83       	std	Z+1, r25	; 0x01
    33a4:	ce 01       	movw	r24, r28
    33a6:	85 58       	subi	r24, 0x85	; 133
    33a8:	9f 4f       	sbci	r25, 0xFF	; 255
    33aa:	dc 01       	movw	r26, r24
    33ac:	6c 93       	st	X, r22
    33ae:	ce 01       	movw	r24, r28
    33b0:	84 58       	subi	r24, 0x84	; 132
    33b2:	9f 4f       	sbci	r25, 0xFF	; 255
    33b4:	fc 01       	movw	r30, r24
    33b6:	40 83       	st	Z, r20
    33b8:	ce 01       	movw	r24, r28
    33ba:	83 58       	subi	r24, 0x83	; 131
    33bc:	9f 4f       	sbci	r25, 0xFF	; 255
    33be:	dc 01       	movw	r26, r24
    33c0:	2d 93       	st	X+, r18
    33c2:	3c 93       	st	X, r19
    33c4:	ce 01       	movw	r24, r28
    33c6:	81 58       	subi	r24, 0x81	; 129
    33c8:	9f 4f       	sbci	r25, 0xFF	; 255
    33ca:	fc 01       	movw	r30, r24
    33cc:	00 83       	st	Z, r16
    33ce:	11 83       	std	Z+1, r17	; 0x01
    33d0:	ce 01       	movw	r24, r28
    33d2:	8f 57       	subi	r24, 0x7F	; 127
    33d4:	9f 4f       	sbci	r25, 0xFF	; 255
    33d6:	dc 01       	movw	r26, r24
    33d8:	ec 92       	st	X, r14
	sint8				ret = M2M_SUCCESS;
    33da:	19 82       	std	Y+1, r1	; 0x01
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    33dc:	ce 01       	movw	r24, r28
    33de:	84 58       	subi	r24, 0x84	; 132
    33e0:	9f 4f       	sbci	r25, 0xFF	; 255
    33e2:	fc 01       	movw	r30, r24
    33e4:	80 81       	ld	r24, Z
    33e6:	81 30       	cpi	r24, 0x01	; 1
    33e8:	09 f4       	brne	.+2      	; 0x33ec <m2m_wifi_connect_sc+0x6e>
    33ea:	75 c0       	rjmp	.+234    	; 0x34d6 <m2m_wifi_connect_sc+0x158>
	{
		if(pvAuthInfo == NULL)
    33ec:	ce 01       	movw	r24, r28
    33ee:	83 58       	subi	r24, 0x83	; 131
    33f0:	9f 4f       	sbci	r25, 0xFF	; 255
    33f2:	dc 01       	movw	r26, r24
    33f4:	8d 91       	ld	r24, X+
    33f6:	9c 91       	ld	r25, X
    33f8:	89 2b       	or	r24, r25
    33fa:	19 f4       	brne	.+6      	; 0x3402 <m2m_wifi_connect_sc+0x84>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
    33fc:	84 ef       	ldi	r24, 0xF4	; 244
    33fe:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    3400:	bd c1       	rjmp	.+890    	; 0x377c <m2m_wifi_connect_sc+0x3fe>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    3402:	ce 01       	movw	r24, r28
    3404:	84 58       	subi	r24, 0x84	; 132
    3406:	9f 4f       	sbci	r25, 0xFF	; 255
    3408:	fc 01       	movw	r30, r24
    340a:	80 81       	ld	r24, Z
    340c:	82 30       	cpi	r24, 0x02	; 2
    340e:	09 f0       	breq	.+2      	; 0x3412 <m2m_wifi_connect_sc+0x94>
    3410:	62 c0       	rjmp	.+196    	; 0x34d6 <m2m_wifi_connect_sc+0x158>
    3412:	ce 01       	movw	r24, r28
    3414:	83 58       	subi	r24, 0x83	; 131
    3416:	9f 4f       	sbci	r25, 0xFF	; 255
    3418:	dc 01       	movw	r26, r24
    341a:	8d 91       	ld	r24, X+
    341c:	9c 91       	ld	r25, X
    341e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <m2m_strlen>
    3422:	80 34       	cpi	r24, 0x40	; 64
    3424:	91 05       	cpc	r25, r1
    3426:	09 f0       	breq	.+2      	; 0x342a <m2m_wifi_connect_sc+0xac>
    3428:	56 c0       	rjmp	.+172    	; 0x34d6 <m2m_wifi_connect_sc+0x158>
		{
			uint8 i = 0;
    342a:	1a 82       	std	Y+2, r1	; 0x02
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    342c:	ce 01       	movw	r24, r28
    342e:	83 58       	subi	r24, 0x83	; 131
    3430:	9f 4f       	sbci	r25, 0xFF	; 255
    3432:	fc 01       	movw	r30, r24
    3434:	80 81       	ld	r24, Z
    3436:	91 81       	ldd	r25, Z+1	; 0x01
    3438:	8b 83       	std	Y+3, r24	; 0x03
    343a:	9c 83       	std	Y+4, r25	; 0x04
			while(i < (M2M_MAX_PSK_LEN-1))
    343c:	48 c0       	rjmp	.+144    	; 0x34ce <m2m_wifi_connect_sc+0x150>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    343e:	8a 81       	ldd	r24, Y+2	; 0x02
    3440:	88 2f       	mov	r24, r24
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	2b 81       	ldd	r18, Y+3	; 0x03
    3446:	3c 81       	ldd	r19, Y+4	; 0x04
    3448:	82 0f       	add	r24, r18
    344a:	93 1f       	adc	r25, r19
    344c:	dc 01       	movw	r26, r24
    344e:	8c 91       	ld	r24, X
    3450:	80 33       	cpi	r24, 0x30	; 48
    3452:	b8 f1       	brcs	.+110    	; 0x34c2 <m2m_wifi_connect_sc+0x144>
    3454:	8a 81       	ldd	r24, Y+2	; 0x02
    3456:	88 2f       	mov	r24, r24
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	2b 81       	ldd	r18, Y+3	; 0x03
    345c:	3c 81       	ldd	r19, Y+4	; 0x04
    345e:	82 0f       	add	r24, r18
    3460:	93 1f       	adc	r25, r19
    3462:	fc 01       	movw	r30, r24
    3464:	80 81       	ld	r24, Z
    3466:	8a 33       	cpi	r24, 0x3A	; 58
    3468:	58 f0       	brcs	.+22     	; 0x3480 <m2m_wifi_connect_sc+0x102>
    346a:	8a 81       	ldd	r24, Y+2	; 0x02
    346c:	88 2f       	mov	r24, r24
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	2b 81       	ldd	r18, Y+3	; 0x03
    3472:	3c 81       	ldd	r19, Y+4	; 0x04
    3474:	82 0f       	add	r24, r18
    3476:	93 1f       	adc	r25, r19
    3478:	dc 01       	movw	r26, r24
    347a:	8c 91       	ld	r24, X
    347c:	81 34       	cpi	r24, 0x41	; 65
    347e:	08 f1       	brcs	.+66     	; 0x34c2 <m2m_wifi_connect_sc+0x144>
    3480:	8a 81       	ldd	r24, Y+2	; 0x02
    3482:	88 2f       	mov	r24, r24
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	2b 81       	ldd	r18, Y+3	; 0x03
    3488:	3c 81       	ldd	r19, Y+4	; 0x04
    348a:	82 0f       	add	r24, r18
    348c:	93 1f       	adc	r25, r19
    348e:	fc 01       	movw	r30, r24
    3490:	80 81       	ld	r24, Z
    3492:	87 34       	cpi	r24, 0x47	; 71
    3494:	58 f0       	brcs	.+22     	; 0x34ac <m2m_wifi_connect_sc+0x12e>
    3496:	8a 81       	ldd	r24, Y+2	; 0x02
    3498:	88 2f       	mov	r24, r24
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	2b 81       	ldd	r18, Y+3	; 0x03
    349e:	3c 81       	ldd	r19, Y+4	; 0x04
    34a0:	82 0f       	add	r24, r18
    34a2:	93 1f       	adc	r25, r19
    34a4:	dc 01       	movw	r26, r24
    34a6:	8c 91       	ld	r24, X
    34a8:	81 36       	cpi	r24, 0x61	; 97
    34aa:	58 f0       	brcs	.+22     	; 0x34c2 <m2m_wifi_connect_sc+0x144>
    34ac:	8a 81       	ldd	r24, Y+2	; 0x02
    34ae:	88 2f       	mov	r24, r24
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	2b 81       	ldd	r18, Y+3	; 0x03
    34b4:	3c 81       	ldd	r19, Y+4	; 0x04
    34b6:	82 0f       	add	r24, r18
    34b8:	93 1f       	adc	r25, r19
    34ba:	fc 01       	movw	r30, r24
    34bc:	80 81       	ld	r24, Z
    34be:	87 36       	cpi	r24, 0x67	; 103
    34c0:	18 f0       	brcs	.+6      	; 0x34c8 <m2m_wifi_connect_sc+0x14a>
				{
					M2M_ERR("Invalid Key\n");
					ret = M2M_ERR_FAIL;
    34c2:	84 ef       	ldi	r24, 0xF4	; 244
    34c4:	89 83       	std	Y+1, r24	; 0x01
					goto ERR1;
    34c6:	5a c1       	rjmp	.+692    	; 0x377c <m2m_wifi_connect_sc+0x3fe>
				}
				i++;
    34c8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ca:	8f 5f       	subi	r24, 0xFF	; 255
    34cc:	8a 83       	std	Y+2, r24	; 0x02
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    34ce:	8a 81       	ldd	r24, Y+2	; 0x02
    34d0:	80 34       	cpi	r24, 0x40	; 64
    34d2:	08 f4       	brcc	.+2      	; 0x34d6 <m2m_wifi_connect_sc+0x158>
    34d4:	b4 cf       	rjmp	.-152    	; 0x343e <m2m_wifi_connect_sc+0xc0>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    34d6:	ce 01       	movw	r24, r28
    34d8:	85 58       	subi	r24, 0x85	; 133
    34da:	9f 4f       	sbci	r25, 0xFF	; 255
    34dc:	dc 01       	movw	r26, r24
    34de:	8c 91       	ld	r24, X
    34e0:	88 23       	and	r24, r24
    34e2:	39 f0       	breq	.+14     	; 0x34f2 <m2m_wifi_connect_sc+0x174>
    34e4:	ce 01       	movw	r24, r28
    34e6:	85 58       	subi	r24, 0x85	; 133
    34e8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ea:	fc 01       	movw	r30, r24
    34ec:	80 81       	ld	r24, Z
    34ee:	81 32       	cpi	r24, 0x21	; 33
    34f0:	18 f0       	brcs	.+6      	; 0x34f8 <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
    34f2:	84 ef       	ldi	r24, 0xF4	; 244
    34f4:	89 83       	std	Y+1, r24	; 0x01
		goto ERR1;
    34f6:	42 c1       	rjmp	.+644    	; 0x377c <m2m_wifi_connect_sc+0x3fe>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    34f8:	ce 01       	movw	r24, r28
    34fa:	81 58       	subi	r24, 0x81	; 129
    34fc:	9f 4f       	sbci	r25, 0xFF	; 255
    34fe:	dc 01       	movw	r26, r24
    3500:	8d 91       	ld	r24, X+
    3502:	9c 91       	ld	r25, X
    3504:	89 2b       	or	r24, r25
    3506:	41 f0       	breq	.+16     	; 0x3518 <m2m_wifi_connect_sc+0x19a>
    3508:	ce 01       	movw	r24, r28
    350a:	81 58       	subi	r24, 0x81	; 129
    350c:	9f 4f       	sbci	r25, 0xFF	; 255
    350e:	fc 01       	movw	r30, r24
    3510:	80 81       	ld	r24, Z
    3512:	91 81       	ldd	r25, Z+1	; 0x01
    3514:	0f 97       	sbiw	r24, 0x0f	; 15
    3516:	60 f0       	brcs	.+24     	; 0x3530 <m2m_wifi_connect_sc+0x1b2>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    3518:	ce 01       	movw	r24, r28
    351a:	81 58       	subi	r24, 0x81	; 129
    351c:	9f 4f       	sbci	r25, 0xFF	; 255
    351e:	dc 01       	movw	r26, r24
    3520:	8d 91       	ld	r24, X+
    3522:	9c 91       	ld	r25, X
    3524:	8f 3f       	cpi	r24, 0xFF	; 255
    3526:	91 05       	cpc	r25, r1
    3528:	19 f0       	breq	.+6      	; 0x3530 <m2m_wifi_connect_sc+0x1b2>
		{
			M2M_ERR("CH INVALID\n");
			ret = M2M_ERR_FAIL;
    352a:	84 ef       	ldi	r24, 0xF4	; 244
    352c:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    352e:	26 c1       	rjmp	.+588    	; 0x377c <m2m_wifi_connect_sc+0x3fe>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    3530:	ce 01       	movw	r24, r28
    3532:	85 58       	subi	r24, 0x85	; 133
    3534:	9f 4f       	sbci	r25, 0xFF	; 255
    3536:	fc 01       	movw	r30, r24
    3538:	80 81       	ld	r24, Z
    353a:	88 2f       	mov	r24, r24
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	a0 e0       	ldi	r26, 0x00	; 0
    3540:	b0 e0       	ldi	r27, 0x00	; 0
    3542:	9e 01       	movw	r18, r28
    3544:	27 58       	subi	r18, 0x87	; 135
    3546:	3f 4f       	sbci	r19, 0xFF	; 255
    3548:	f9 01       	movw	r30, r18
    354a:	60 81       	ld	r22, Z
    354c:	71 81       	ldd	r23, Z+1	; 0x01
    354e:	9e 01       	movw	r18, r28
    3550:	23 5f       	subi	r18, 0xF3	; 243
    3552:	3f 4f       	sbci	r19, 0xFF	; 255
    3554:	f9 01       	movw	r30, r18
    3556:	ea 5b       	subi	r30, 0xBA	; 186
    3558:	ff 4f       	sbci	r31, 0xFF	; 255
    355a:	9c 01       	movw	r18, r24
    355c:	ad 01       	movw	r20, r26
    355e:	cf 01       	movw	r24, r30
    3560:	0e 94 61 10 	call	0x20c2	; 0x20c2 <m2m_memcpy>
	strConnect.au8SSID[u8SsidLen]	= 0;
    3564:	ce 01       	movw	r24, r28
    3566:	85 58       	subi	r24, 0x85	; 133
    3568:	9f 4f       	sbci	r25, 0xFF	; 255
    356a:	dc 01       	movw	r26, r24
    356c:	8c 91       	ld	r24, X
    356e:	88 2f       	mov	r24, r24
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	9e 01       	movw	r18, r28
    3574:	2d 5a       	subi	r18, 0xAD	; 173
    3576:	3f 4f       	sbci	r19, 0xFF	; 255
    3578:	82 0f       	add	r24, r18
    357a:	93 1f       	adc	r25, r19
    357c:	fc 01       	movw	r30, r24
    357e:	10 82       	st	Z, r1
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    3580:	ce 01       	movw	r24, r28
    3582:	8f 5a       	subi	r24, 0xAF	; 175
    3584:	9f 4f       	sbci	r25, 0xFF	; 255
    3586:	9e 01       	movw	r18, r28
    3588:	21 58       	subi	r18, 0x81	; 129
    358a:	3f 4f       	sbci	r19, 0xFF	; 255
    358c:	d9 01       	movw	r26, r18
    358e:	2d 91       	ld	r18, X+
    3590:	3c 91       	ld	r19, X
    3592:	fc 01       	movw	r30, r24
    3594:	20 83       	st	Z, r18
    3596:	31 83       	std	Z+1, r19	; 0x01
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    3598:	ce 01       	movw	r24, r28
    359a:	8f 57       	subi	r24, 0x7F	; 127
    359c:	9f 4f       	sbci	r25, 0xFF	; 255
    359e:	21 e0       	ldi	r18, 0x01	; 1
    35a0:	dc 01       	movw	r26, r24
    35a2:	8c 91       	ld	r24, X
    35a4:	88 23       	and	r24, r24
    35a6:	09 f4       	brne	.+2      	; 0x35aa <m2m_wifi_connect_sc+0x22c>
    35a8:	20 e0       	ldi	r18, 0x00	; 0
    35aa:	ce 01       	movw	r24, r28
    35ac:	8c 58       	subi	r24, 0x8C	; 140
    35ae:	9f 4f       	sbci	r25, 0xFF	; 255
    35b0:	fc 01       	movw	r30, r24
    35b2:	20 83       	st	Z, r18
	pstrAuthInfo = &strConnect.strSec;
    35b4:	ce 01       	movw	r24, r28
    35b6:	0d 96       	adiw	r24, 0x0d	; 13
    35b8:	8d 83       	std	Y+5, r24	; 0x05
    35ba:	9e 83       	std	Y+6, r25	; 0x06
	pstrAuthInfo->u8SecType		= u8SecType;
    35bc:	8d 81       	ldd	r24, Y+5	; 0x05
    35be:	9e 81       	ldd	r25, Y+6	; 0x06
    35c0:	8f 5b       	subi	r24, 0xBF	; 191
    35c2:	9f 4f       	sbci	r25, 0xFF	; 255
    35c4:	9e 01       	movw	r18, r28
    35c6:	24 58       	subi	r18, 0x84	; 132
    35c8:	3f 4f       	sbci	r19, 0xFF	; 255
    35ca:	d9 01       	movw	r26, r18
    35cc:	2c 91       	ld	r18, X
    35ce:	fc 01       	movw	r30, r24
    35d0:	20 83       	st	Z, r18

	if(u8SecType == M2M_WIFI_SEC_WEP)
    35d2:	ce 01       	movw	r24, r28
    35d4:	84 58       	subi	r24, 0x84	; 132
    35d6:	9f 4f       	sbci	r25, 0xFF	; 255
    35d8:	dc 01       	movw	r26, r24
    35da:	8c 91       	ld	r24, X
    35dc:	83 30       	cpi	r24, 0x03	; 3
    35de:	09 f0       	breq	.+2      	; 0x35e2 <m2m_wifi_connect_sc+0x264>
    35e0:	5f c0       	rjmp	.+190    	; 0x36a0 <m2m_wifi_connect_sc+0x322>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    35e2:	ce 01       	movw	r24, r28
    35e4:	83 58       	subi	r24, 0x83	; 131
    35e6:	9f 4f       	sbci	r25, 0xFF	; 255
    35e8:	fc 01       	movw	r30, r24
    35ea:	80 81       	ld	r24, Z
    35ec:	91 81       	ldd	r25, Z+1	; 0x01
    35ee:	8f 83       	std	Y+7, r24	; 0x07
    35f0:	98 87       	std	Y+8, r25	; 0x08
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    35f2:	8d 81       	ldd	r24, Y+5	; 0x05
    35f4:	9e 81       	ldd	r25, Y+6	; 0x06
    35f6:	89 87       	std	Y+9, r24	; 0x09
    35f8:	9a 87       	std	Y+10, r25	; 0x0a
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    35fa:	8f 81       	ldd	r24, Y+7	; 0x07
    35fc:	98 85       	ldd	r25, Y+8	; 0x08
    35fe:	dc 01       	movw	r26, r24
    3600:	8c 91       	ld	r24, X
    3602:	2f ef       	ldi	r18, 0xFF	; 255
    3604:	28 0f       	add	r18, r24
    3606:	89 85       	ldd	r24, Y+9	; 0x09
    3608:	9a 85       	ldd	r25, Y+10	; 0x0a
    360a:	fc 01       	movw	r30, r24
    360c:	20 83       	st	Z, r18

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    360e:	89 85       	ldd	r24, Y+9	; 0x09
    3610:	9a 85       	ldd	r25, Y+10	; 0x0a
    3612:	dc 01       	movw	r26, r24
    3614:	8c 91       	ld	r24, X
    3616:	84 30       	cpi	r24, 0x04	; 4
    3618:	18 f0       	brcs	.+6      	; 0x3620 <m2m_wifi_connect_sc+0x2a2>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
			ret = M2M_ERR_FAIL;
    361a:	84 ef       	ldi	r24, 0xF4	; 244
    361c:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    361e:	ae c0       	rjmp	.+348    	; 0x377c <m2m_wifi_connect_sc+0x3fe>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    3620:	8f 81       	ldd	r24, Y+7	; 0x07
    3622:	98 85       	ldd	r25, Y+8	; 0x08
    3624:	fc 01       	movw	r30, r24
    3626:	81 81       	ldd	r24, Z+1	; 0x01
    3628:	2f ef       	ldi	r18, 0xFF	; 255
    362a:	28 0f       	add	r18, r24
    362c:	89 85       	ldd	r24, Y+9	; 0x09
    362e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3630:	dc 01       	movw	r26, r24
    3632:	11 96       	adiw	r26, 0x01	; 1
    3634:	2c 93       	st	X, r18
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    3636:	89 85       	ldd	r24, Y+9	; 0x09
    3638:	9a 85       	ldd	r25, Y+10	; 0x0a
    363a:	fc 01       	movw	r30, r24
    363c:	81 81       	ldd	r24, Z+1	; 0x01
    363e:	8a 30       	cpi	r24, 0x0A	; 10
    3640:	51 f0       	breq	.+20     	; 0x3656 <m2m_wifi_connect_sc+0x2d8>
    3642:	89 85       	ldd	r24, Y+9	; 0x09
    3644:	9a 85       	ldd	r25, Y+10	; 0x0a
    3646:	dc 01       	movw	r26, r24
    3648:	11 96       	adiw	r26, 0x01	; 1
    364a:	8c 91       	ld	r24, X
    364c:	8a 31       	cpi	r24, 0x1A	; 26
    364e:	19 f0       	breq	.+6      	; 0x3656 <m2m_wifi_connect_sc+0x2d8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
			ret = M2M_ERR_FAIL;
    3650:	84 ef       	ldi	r24, 0xF4	; 244
    3652:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    3654:	93 c0       	rjmp	.+294    	; 0x377c <m2m_wifi_connect_sc+0x3fe>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    3656:	8f 81       	ldd	r24, Y+7	; 0x07
    3658:	98 85       	ldd	r25, Y+8	; 0x08
    365a:	fc 01       	movw	r30, r24
    365c:	81 81       	ldd	r24, Z+1	; 0x01
    365e:	88 2f       	mov	r24, r24
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	a0 e0       	ldi	r26, 0x00	; 0
    3664:	b0 e0       	ldi	r27, 0x00	; 0
    3666:	2f 81       	ldd	r18, Y+7	; 0x07
    3668:	38 85       	ldd	r19, Y+8	; 0x08
    366a:	b9 01       	movw	r22, r18
    366c:	6e 5f       	subi	r22, 0xFE	; 254
    366e:	7f 4f       	sbci	r23, 0xFF	; 255
    3670:	29 85       	ldd	r18, Y+9	; 0x09
    3672:	3a 85       	ldd	r19, Y+10	; 0x0a
    3674:	f9 01       	movw	r30, r18
    3676:	32 96       	adiw	r30, 0x02	; 2
    3678:	9c 01       	movw	r18, r24
    367a:	ad 01       	movw	r20, r26
    367c:	cf 01       	movw	r24, r30
    367e:	0e 94 61 10 	call	0x20c2	; 0x20c2 <m2m_memcpy>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    3682:	8f 81       	ldd	r24, Y+7	; 0x07
    3684:	98 85       	ldd	r25, Y+8	; 0x08
    3686:	dc 01       	movw	r26, r24
    3688:	11 96       	adiw	r26, 0x01	; 1
    368a:	8c 91       	ld	r24, X
    368c:	88 2f       	mov	r24, r24
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	29 85       	ldd	r18, Y+9	; 0x09
    3692:	3a 85       	ldd	r19, Y+10	; 0x0a
    3694:	82 0f       	add	r24, r18
    3696:	93 1f       	adc	r25, r19
    3698:	02 96       	adiw	r24, 0x02	; 2
    369a:	fc 01       	movw	r30, r24
    369c:	10 82       	st	Z, r1
    369e:	5e c0       	rjmp	.+188    	; 0x375c <m2m_wifi_connect_sc+0x3de>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    36a0:	ce 01       	movw	r24, r28
    36a2:	84 58       	subi	r24, 0x84	; 132
    36a4:	9f 4f       	sbci	r25, 0xFF	; 255
    36a6:	dc 01       	movw	r26, r24
    36a8:	8c 91       	ld	r24, X
    36aa:	82 30       	cpi	r24, 0x02	; 2
    36ac:	a9 f5       	brne	.+106    	; 0x3718 <m2m_wifi_connect_sc+0x39a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    36ae:	ce 01       	movw	r24, r28
    36b0:	83 58       	subi	r24, 0x83	; 131
    36b2:	9f 4f       	sbci	r25, 0xFF	; 255
    36b4:	fc 01       	movw	r30, r24
    36b6:	80 81       	ld	r24, Z
    36b8:	91 81       	ldd	r25, Z+1	; 0x01
    36ba:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <m2m_strlen>
    36be:	8b 87       	std	Y+11, r24	; 0x0b
    36c0:	9c 87       	std	Y+12, r25	; 0x0c
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    36c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    36c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    36c6:	89 2b       	or	r24, r25
    36c8:	29 f0       	breq	.+10     	; 0x36d4 <m2m_wifi_connect_sc+0x356>
    36ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    36cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    36ce:	81 34       	cpi	r24, 0x41	; 65
    36d0:	91 05       	cpc	r25, r1
    36d2:	18 f0       	brcs	.+6      	; 0x36da <m2m_wifi_connect_sc+0x35c>
		{
			M2M_ERR("Incorrect PSK key length\n");
			ret = M2M_ERR_FAIL;
    36d4:	84 ef       	ldi	r24, 0xF4	; 244
    36d6:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    36d8:	51 c0       	rjmp	.+162    	; 0x377c <m2m_wifi_connect_sc+0x3fe>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    36da:	8b 85       	ldd	r24, Y+11	; 0x0b
    36dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    36de:	01 96       	adiw	r24, 0x01	; 1
    36e0:	cc 01       	movw	r24, r24
    36e2:	a0 e0       	ldi	r26, 0x00	; 0
    36e4:	b0 e0       	ldi	r27, 0x00	; 0
    36e6:	ed 81       	ldd	r30, Y+5	; 0x05
    36e8:	fe 81       	ldd	r31, Y+6	; 0x06
    36ea:	ce 57       	subi	r28, 0x7E	; 126
    36ec:	df 4f       	sbci	r29, 0xFF	; 255
    36ee:	e8 83       	st	Y, r30
    36f0:	f9 83       	std	Y+1, r31	; 0x01
    36f2:	c2 58       	subi	r28, 0x82	; 130
    36f4:	d0 40       	sbci	r29, 0x00	; 0
    36f6:	9e 01       	movw	r18, r28
    36f8:	23 58       	subi	r18, 0x83	; 131
    36fa:	3f 4f       	sbci	r19, 0xFF	; 255
    36fc:	f9 01       	movw	r30, r18
    36fe:	60 81       	ld	r22, Z
    3700:	71 81       	ldd	r23, Z+1	; 0x01
    3702:	9c 01       	movw	r18, r24
    3704:	ad 01       	movw	r20, r26
    3706:	ce 57       	subi	r28, 0x7E	; 126
    3708:	df 4f       	sbci	r29, 0xFF	; 255
    370a:	88 81       	ld	r24, Y
    370c:	99 81       	ldd	r25, Y+1	; 0x01
    370e:	c2 58       	subi	r28, 0x82	; 130
    3710:	d0 40       	sbci	r29, 0x00	; 0
    3712:	0e 94 61 10 	call	0x20c2	; 0x20c2 <m2m_memcpy>
    3716:	22 c0       	rjmp	.+68     	; 0x375c <m2m_wifi_connect_sc+0x3de>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    3718:	ce 01       	movw	r24, r28
    371a:	84 58       	subi	r24, 0x84	; 132
    371c:	9f 4f       	sbci	r25, 0xFF	; 255
    371e:	dc 01       	movw	r26, r24
    3720:	8c 91       	ld	r24, X
    3722:	84 30       	cpi	r24, 0x04	; 4
    3724:	89 f4       	brne	.+34     	; 0x3748 <m2m_wifi_connect_sc+0x3ca>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    3726:	ed 81       	ldd	r30, Y+5	; 0x05
    3728:	fe 81       	ldd	r31, Y+6	; 0x06
    372a:	ce 01       	movw	r24, r28
    372c:	83 58       	subi	r24, 0x83	; 131
    372e:	9f 4f       	sbci	r25, 0xFF	; 255
    3730:	dc 01       	movw	r26, r24
    3732:	8d 91       	ld	r24, X+
    3734:	9c 91       	ld	r25, X
    3736:	2e e3       	ldi	r18, 0x3E	; 62
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	40 e0       	ldi	r20, 0x00	; 0
    373c:	50 e0       	ldi	r21, 0x00	; 0
    373e:	bc 01       	movw	r22, r24
    3740:	cf 01       	movw	r24, r30
    3742:	0e 94 61 10 	call	0x20c2	; 0x20c2 <m2m_memcpy>
    3746:	0a c0       	rjmp	.+20     	; 0x375c <m2m_wifi_connect_sc+0x3de>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    3748:	ce 01       	movw	r24, r28
    374a:	84 58       	subi	r24, 0x84	; 132
    374c:	9f 4f       	sbci	r25, 0xFF	; 255
    374e:	fc 01       	movw	r30, r24
    3750:	80 81       	ld	r24, Z
    3752:	81 30       	cpi	r24, 0x01	; 1
    3754:	19 f0       	breq	.+6      	; 0x375c <m2m_wifi_connect_sc+0x3de>

	}
	else
	{
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
    3756:	84 ef       	ldi	r24, 0xF4	; 244
    3758:	89 83       	std	Y+1, r24	; 0x01
		goto ERR1;
    375a:	10 c0       	rjmp	.+32     	; 0x377c <m2m_wifi_connect_sc+0x3fe>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    375c:	ce 01       	movw	r24, r28
    375e:	0d 96       	adiw	r24, 0x0d	; 13
    3760:	c1 2c       	mov	r12, r1
    3762:	d1 2c       	mov	r13, r1
    3764:	e1 2c       	mov	r14, r1
    3766:	f1 2c       	mov	r15, r1
    3768:	00 e0       	ldi	r16, 0x00	; 0
    376a:	10 e0       	ldi	r17, 0x00	; 0
    376c:	2c e6       	ldi	r18, 0x6C	; 108
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	ac 01       	movw	r20, r24
    3772:	68 e2       	ldi	r22, 0x28	; 40
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <hif_send>
    377a:	89 83       	std	Y+1, r24	; 0x01

ERR1:
	return ret;
    377c:	89 81       	ldd	r24, Y+1	; 0x01
}
    377e:	cd 57       	subi	r28, 0x7D	; 125
    3780:	df 4f       	sbci	r29, 0xFF	; 255
    3782:	cd bf       	out	0x3d, r28	; 61
    3784:	de bf       	out	0x3e, r29	; 62
    3786:	df 91       	pop	r29
    3788:	cf 91       	pop	r28
    378a:	1f 91       	pop	r17
    378c:	0f 91       	pop	r16
    378e:	ff 90       	pop	r15
    3790:	ef 90       	pop	r14
    3792:	df 90       	pop	r13
    3794:	cf 90       	pop	r12
    3796:	08 95       	ret

00003798 <chip_apply_conf>:
{
	sint8 ret = M2M_SUCCESS;
	ret = nm_write_reg(NMI_GLB_RESET_0, 0);
	nm_bsp_sleep(50);
	return ret;
}
    3798:	cf 93       	push	r28
    379a:	df 93       	push	r29
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    37a0:	2d 97       	sbiw	r28, 0x0d	; 13
    37a2:	cd bf       	out	0x3d, r28	; 61
    37a4:	de bf       	out	0x3e, r29	; 62
    37a6:	6a 87       	std	Y+10, r22	; 0x0a
    37a8:	7b 87       	std	Y+11, r23	; 0x0b
    37aa:	8c 87       	std	Y+12, r24	; 0x0c
    37ac:	9d 87       	std	Y+13, r25	; 0x0d
    37ae:	19 82       	std	Y+1, r1	; 0x01
    37b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    37b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    37b4:	ac 85       	ldd	r26, Y+12	; 0x0c
    37b6:	bd 85       	ldd	r27, Y+13	; 0x0d
    37b8:	8a 83       	std	Y+2, r24	; 0x02
    37ba:	9b 83       	std	Y+3, r25	; 0x03
    37bc:	ac 83       	std	Y+4, r26	; 0x04
    37be:	bd 83       	std	Y+5, r27	; 0x05
    37c0:	8a 81       	ldd	r24, Y+2	; 0x02
    37c2:	9b 81       	ldd	r25, Y+3	; 0x03
    37c4:	ac 81       	ldd	r26, Y+4	; 0x04
    37c6:	bd 81       	ldd	r27, Y+5	; 0x05
    37c8:	91 60       	ori	r25, 0x01	; 1
    37ca:	8a 83       	std	Y+2, r24	; 0x02
    37cc:	9b 83       	std	Y+3, r25	; 0x03
    37ce:	ac 83       	std	Y+4, r26	; 0x04
    37d0:	bd 83       	std	Y+5, r27	; 0x05
    37d2:	8a 81       	ldd	r24, Y+2	; 0x02
    37d4:	9b 81       	ldd	r25, Y+3	; 0x03
    37d6:	ac 81       	ldd	r26, Y+4	; 0x04
    37d8:	bd 81       	ldd	r27, Y+5	; 0x05
    37da:	9c 01       	movw	r18, r24
    37dc:	ad 01       	movw	r20, r26
    37de:	60 ea       	ldi	r22, 0xA0	; 160
    37e0:	74 e1       	ldi	r23, 0x14	; 20
    37e2:	80 e0       	ldi	r24, 0x00	; 0
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    37ea:	8a 81       	ldd	r24, Y+2	; 0x02
    37ec:	9b 81       	ldd	r25, Y+3	; 0x03
    37ee:	ac 81       	ldd	r26, Y+4	; 0x04
    37f0:	bd 81       	ldd	r27, Y+5	; 0x05
    37f2:	89 2b       	or	r24, r25
    37f4:	8a 2b       	or	r24, r26
    37f6:	8b 2b       	or	r24, r27
    37f8:	f9 f0       	breq	.+62     	; 0x3838 <chip_apply_conf+0xa0>
    37fa:	1e 82       	std	Y+6, r1	; 0x06
    37fc:	1f 82       	std	Y+7, r1	; 0x07
    37fe:	18 86       	std	Y+8, r1	; 0x08
    3800:	19 86       	std	Y+9, r1	; 0x09
    3802:	ce 01       	movw	r24, r28
    3804:	06 96       	adiw	r24, 0x06	; 6
    3806:	ac 01       	movw	r20, r24
    3808:	60 ea       	ldi	r22, 0xA0	; 160
    380a:	74 e1       	ldi	r23, 0x14	; 20
    380c:	80 e0       	ldi	r24, 0x00	; 0
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    3814:	89 83       	std	Y+1, r24	; 0x01
    3816:	89 81       	ldd	r24, Y+1	; 0x01
    3818:	88 23       	and	r24, r24
    381a:	d9 f6       	brne	.-74     	; 0x37d2 <chip_apply_conf+0x3a>
    381c:	2e 81       	ldd	r18, Y+6	; 0x06
    381e:	3f 81       	ldd	r19, Y+7	; 0x07
    3820:	48 85       	ldd	r20, Y+8	; 0x08
    3822:	59 85       	ldd	r21, Y+9	; 0x09
    3824:	8a 81       	ldd	r24, Y+2	; 0x02
    3826:	9b 81       	ldd	r25, Y+3	; 0x03
    3828:	ac 81       	ldd	r26, Y+4	; 0x04
    382a:	bd 81       	ldd	r27, Y+5	; 0x05
    382c:	28 17       	cp	r18, r24
    382e:	39 07       	cpc	r19, r25
    3830:	4a 07       	cpc	r20, r26
    3832:	5b 07       	cpc	r21, r27
    3834:	19 f0       	breq	.+6      	; 0x383c <chip_apply_conf+0xa4>
    3836:	cd cf       	rjmp	.-102    	; 0x37d2 <chip_apply_conf+0x3a>
    3838:	00 00       	nop
    383a:	01 c0       	rjmp	.+2      	; 0x383e <chip_apply_conf+0xa6>
    383c:	00 00       	nop
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	2d 96       	adiw	r28, 0x0d	; 13
    3842:	cd bf       	out	0x3d, r28	; 61
    3844:	de bf       	out	0x3e, r29	; 62
    3846:	df 91       	pop	r29
    3848:	cf 91       	pop	r28
    384a:	08 95       	ret

0000384c <enable_interrupts>:
    384c:	cf 93       	push	r28
    384e:	df 93       	push	r29
    3850:	cd b7       	in	r28, 0x3d	; 61
    3852:	de b7       	in	r29, 0x3e	; 62
    3854:	25 97       	sbiw	r28, 0x05	; 5
    3856:	cd bf       	out	0x3d, r28	; 61
    3858:	de bf       	out	0x3e, r29	; 62
    385a:	1a 82       	std	Y+2, r1	; 0x02
    385c:	1b 82       	std	Y+3, r1	; 0x03
    385e:	1c 82       	std	Y+4, r1	; 0x04
    3860:	1d 82       	std	Y+5, r1	; 0x05
    3862:	19 82       	std	Y+1, r1	; 0x01
    3864:	ce 01       	movw	r24, r28
    3866:	02 96       	adiw	r24, 0x02	; 2
    3868:	ac 01       	movw	r20, r24
    386a:	68 e0       	ldi	r22, 0x08	; 8
    386c:	74 e1       	ldi	r23, 0x14	; 20
    386e:	80 e0       	ldi	r24, 0x00	; 0
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    3876:	89 83       	std	Y+1, r24	; 0x01
    3878:	89 81       	ldd	r24, Y+1	; 0x01
    387a:	88 23       	and	r24, r24
    387c:	e9 f5       	brne	.+122    	; 0x38f8 <enable_interrupts+0xac>
    387e:	8a 81       	ldd	r24, Y+2	; 0x02
    3880:	9b 81       	ldd	r25, Y+3	; 0x03
    3882:	ac 81       	ldd	r26, Y+4	; 0x04
    3884:	bd 81       	ldd	r27, Y+5	; 0x05
    3886:	91 60       	ori	r25, 0x01	; 1
    3888:	8a 83       	std	Y+2, r24	; 0x02
    388a:	9b 83       	std	Y+3, r25	; 0x03
    388c:	ac 83       	std	Y+4, r26	; 0x04
    388e:	bd 83       	std	Y+5, r27	; 0x05
    3890:	8a 81       	ldd	r24, Y+2	; 0x02
    3892:	9b 81       	ldd	r25, Y+3	; 0x03
    3894:	ac 81       	ldd	r26, Y+4	; 0x04
    3896:	bd 81       	ldd	r27, Y+5	; 0x05
    3898:	9c 01       	movw	r18, r24
    389a:	ad 01       	movw	r20, r26
    389c:	68 e0       	ldi	r22, 0x08	; 8
    389e:	74 e1       	ldi	r23, 0x14	; 20
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    38a8:	89 83       	std	Y+1, r24	; 0x01
    38aa:	89 81       	ldd	r24, Y+1	; 0x01
    38ac:	88 23       	and	r24, r24
    38ae:	31 f5       	brne	.+76     	; 0x38fc <enable_interrupts+0xb0>
    38b0:	ce 01       	movw	r24, r28
    38b2:	02 96       	adiw	r24, 0x02	; 2
    38b4:	ac 01       	movw	r20, r24
    38b6:	60 e0       	ldi	r22, 0x00	; 0
    38b8:	7a e1       	ldi	r23, 0x1A	; 26
    38ba:	80 e0       	ldi	r24, 0x00	; 0
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    38c2:	89 83       	std	Y+1, r24	; 0x01
    38c4:	89 81       	ldd	r24, Y+1	; 0x01
    38c6:	88 23       	and	r24, r24
    38c8:	d9 f4       	brne	.+54     	; 0x3900 <enable_interrupts+0xb4>
    38ca:	8a 81       	ldd	r24, Y+2	; 0x02
    38cc:	9b 81       	ldd	r25, Y+3	; 0x03
    38ce:	ac 81       	ldd	r26, Y+4	; 0x04
    38d0:	bd 81       	ldd	r27, Y+5	; 0x05
    38d2:	a1 60       	ori	r26, 0x01	; 1
    38d4:	8a 83       	std	Y+2, r24	; 0x02
    38d6:	9b 83       	std	Y+3, r25	; 0x03
    38d8:	ac 83       	std	Y+4, r26	; 0x04
    38da:	bd 83       	std	Y+5, r27	; 0x05
    38dc:	8a 81       	ldd	r24, Y+2	; 0x02
    38de:	9b 81       	ldd	r25, Y+3	; 0x03
    38e0:	ac 81       	ldd	r26, Y+4	; 0x04
    38e2:	bd 81       	ldd	r27, Y+5	; 0x05
    38e4:	9c 01       	movw	r18, r24
    38e6:	ad 01       	movw	r20, r26
    38e8:	60 e0       	ldi	r22, 0x00	; 0
    38ea:	7a e1       	ldi	r23, 0x1A	; 26
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    38f4:	89 83       	std	Y+1, r24	; 0x01
    38f6:	05 c0       	rjmp	.+10     	; 0x3902 <enable_interrupts+0xb6>
    38f8:	00 00       	nop
    38fa:	03 c0       	rjmp	.+6      	; 0x3902 <enable_interrupts+0xb6>
    38fc:	00 00       	nop
    38fe:	01 c0       	rjmp	.+2      	; 0x3902 <enable_interrupts+0xb6>
    3900:	00 00       	nop
    3902:	89 81       	ldd	r24, Y+1	; 0x01
    3904:	25 96       	adiw	r28, 0x05	; 5
    3906:	cd bf       	out	0x3d, r28	; 61
    3908:	de bf       	out	0x3e, r29	; 62
    390a:	df 91       	pop	r29
    390c:	cf 91       	pop	r28
    390e:	08 95       	ret

00003910 <nmi_get_chipid>:
    3910:	cf 93       	push	r28
    3912:	df 93       	push	r29
    3914:	00 d0       	rcall	.+0      	; 0x3916 <nmi_get_chipid+0x6>
    3916:	00 d0       	rcall	.+0      	; 0x3918 <nmi_get_chipid+0x8>
    3918:	cd b7       	in	r28, 0x3d	; 61
    391a:	de b7       	in	r29, 0x3e	; 62
    391c:	80 91 0d 2e 	lds	r24, 0x2E0D	; 0x802e0d <chipid.2327>
    3920:	90 91 0e 2e 	lds	r25, 0x2E0E	; 0x802e0e <chipid.2327+0x1>
    3924:	a0 91 0f 2e 	lds	r26, 0x2E0F	; 0x802e0f <chipid.2327+0x2>
    3928:	b0 91 10 2e 	lds	r27, 0x2E10	; 0x802e10 <chipid.2327+0x3>
    392c:	89 2b       	or	r24, r25
    392e:	8a 2b       	or	r24, r26
    3930:	8b 2b       	or	r24, r27
    3932:	09 f0       	breq	.+2      	; 0x3936 <nmi_get_chipid+0x26>
    3934:	cd c0       	rjmp	.+410    	; 0x3ad0 <nmi_get_chipid+0x1c0>
    3936:	4d e0       	ldi	r20, 0x0D	; 13
    3938:	5e e2       	ldi	r21, 0x2E	; 46
    393a:	60 e0       	ldi	r22, 0x00	; 0
    393c:	70 e1       	ldi	r23, 0x10	; 16
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    3946:	88 23       	and	r24, r24
    3948:	61 f0       	breq	.+24     	; 0x3962 <nmi_get_chipid+0x52>
    394a:	10 92 0d 2e 	sts	0x2E0D, r1	; 0x802e0d <chipid.2327>
    394e:	10 92 0e 2e 	sts	0x2E0E, r1	; 0x802e0e <chipid.2327+0x1>
    3952:	10 92 0f 2e 	sts	0x2E0F, r1	; 0x802e0f <chipid.2327+0x2>
    3956:	10 92 10 2e 	sts	0x2E10, r1	; 0x802e10 <chipid.2327+0x3>
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	dc 01       	movw	r26, r24
    3960:	bf c0       	rjmp	.+382    	; 0x3ae0 <nmi_get_chipid+0x1d0>
    3962:	ce 01       	movw	r24, r28
    3964:	01 96       	adiw	r24, 0x01	; 1
    3966:	ac 01       	movw	r20, r24
    3968:	64 ef       	ldi	r22, 0xF4	; 244
    396a:	73 e1       	ldi	r23, 0x13	; 19
    396c:	80 e0       	ldi	r24, 0x00	; 0
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    3974:	88 23       	and	r24, r24
    3976:	61 f0       	breq	.+24     	; 0x3990 <nmi_get_chipid+0x80>
    3978:	10 92 0d 2e 	sts	0x2E0D, r1	; 0x802e0d <chipid.2327>
    397c:	10 92 0e 2e 	sts	0x2E0E, r1	; 0x802e0e <chipid.2327+0x1>
    3980:	10 92 0f 2e 	sts	0x2E0F, r1	; 0x802e0f <chipid.2327+0x2>
    3984:	10 92 10 2e 	sts	0x2E10, r1	; 0x802e10 <chipid.2327+0x3>
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	dc 01       	movw	r26, r24
    398e:	a8 c0       	rjmp	.+336    	; 0x3ae0 <nmi_get_chipid+0x1d0>
    3990:	80 91 0d 2e 	lds	r24, 0x2E0D	; 0x802e0d <chipid.2327>
    3994:	90 91 0e 2e 	lds	r25, 0x2E0E	; 0x802e0e <chipid.2327+0x1>
    3998:	a0 91 0f 2e 	lds	r26, 0x2E0F	; 0x802e0f <chipid.2327+0x2>
    399c:	b0 91 10 2e 	lds	r27, 0x2E10	; 0x802e10 <chipid.2327+0x3>
    39a0:	80 3a       	cpi	r24, 0xA0	; 160
    39a2:	92 40       	sbci	r25, 0x02	; 2
    39a4:	a0 41       	sbci	r26, 0x10	; 16
    39a6:	b1 05       	cpc	r27, r1
    39a8:	b1 f4       	brne	.+44     	; 0x39d6 <nmi_get_chipid+0xc6>
    39aa:	89 81       	ldd	r24, Y+1	; 0x01
    39ac:	9a 81       	ldd	r25, Y+2	; 0x02
    39ae:	ab 81       	ldd	r26, Y+3	; 0x03
    39b0:	bc 81       	ldd	r27, Y+4	; 0x04
    39b2:	01 97       	sbiw	r24, 0x01	; 1
    39b4:	a1 05       	cpc	r26, r1
    39b6:	b1 05       	cpc	r27, r1
    39b8:	09 f4       	brne	.+2      	; 0x39bc <nmi_get_chipid+0xac>
    39ba:	68 c0       	rjmp	.+208    	; 0x3a8c <nmi_get_chipid+0x17c>
    39bc:	81 ea       	ldi	r24, 0xA1	; 161
    39be:	92 e0       	ldi	r25, 0x02	; 2
    39c0:	a0 e1       	ldi	r26, 0x10	; 16
    39c2:	b0 e0       	ldi	r27, 0x00	; 0
    39c4:	80 93 0d 2e 	sts	0x2E0D, r24	; 0x802e0d <chipid.2327>
    39c8:	90 93 0e 2e 	sts	0x2E0E, r25	; 0x802e0e <chipid.2327+0x1>
    39cc:	a0 93 0f 2e 	sts	0x2E0F, r26	; 0x802e0f <chipid.2327+0x2>
    39d0:	b0 93 10 2e 	sts	0x2E10, r27	; 0x802e10 <chipid.2327+0x3>
    39d4:	5b c0       	rjmp	.+182    	; 0x3a8c <nmi_get_chipid+0x17c>
    39d6:	80 91 0d 2e 	lds	r24, 0x2E0D	; 0x802e0d <chipid.2327>
    39da:	90 91 0e 2e 	lds	r25, 0x2E0E	; 0x802e0e <chipid.2327+0x1>
    39de:	a0 91 0f 2e 	lds	r26, 0x2E0F	; 0x802e0f <chipid.2327+0x2>
    39e2:	b0 91 10 2e 	lds	r27, 0x2E10	; 0x802e10 <chipid.2327+0x3>
    39e6:	80 3b       	cpi	r24, 0xB0	; 176
    39e8:	92 40       	sbci	r25, 0x02	; 2
    39ea:	a0 41       	sbci	r26, 0x10	; 16
    39ec:	b1 05       	cpc	r27, r1
    39ee:	59 f5       	brne	.+86     	; 0x3a46 <nmi_get_chipid+0x136>
    39f0:	89 81       	ldd	r24, Y+1	; 0x01
    39f2:	9a 81       	ldd	r25, Y+2	; 0x02
    39f4:	ab 81       	ldd	r26, Y+3	; 0x03
    39f6:	bc 81       	ldd	r27, Y+4	; 0x04
    39f8:	03 97       	sbiw	r24, 0x03	; 3
    39fa:	a1 05       	cpc	r26, r1
    39fc:	b1 05       	cpc	r27, r1
    39fe:	09 f4       	brne	.+2      	; 0x3a02 <nmi_get_chipid+0xf2>
    3a00:	45 c0       	rjmp	.+138    	; 0x3a8c <nmi_get_chipid+0x17c>
    3a02:	89 81       	ldd	r24, Y+1	; 0x01
    3a04:	9a 81       	ldd	r25, Y+2	; 0x02
    3a06:	ab 81       	ldd	r26, Y+3	; 0x03
    3a08:	bc 81       	ldd	r27, Y+4	; 0x04
    3a0a:	04 97       	sbiw	r24, 0x04	; 4
    3a0c:	a1 05       	cpc	r26, r1
    3a0e:	b1 05       	cpc	r27, r1
    3a10:	69 f4       	brne	.+26     	; 0x3a2c <nmi_get_chipid+0x11c>
    3a12:	81 eb       	ldi	r24, 0xB1	; 177
    3a14:	92 e0       	ldi	r25, 0x02	; 2
    3a16:	a0 e1       	ldi	r26, 0x10	; 16
    3a18:	b0 e0       	ldi	r27, 0x00	; 0
    3a1a:	80 93 0d 2e 	sts	0x2E0D, r24	; 0x802e0d <chipid.2327>
    3a1e:	90 93 0e 2e 	sts	0x2E0E, r25	; 0x802e0e <chipid.2327+0x1>
    3a22:	a0 93 0f 2e 	sts	0x2E0F, r26	; 0x802e0f <chipid.2327+0x2>
    3a26:	b0 93 10 2e 	sts	0x2E10, r27	; 0x802e10 <chipid.2327+0x3>
    3a2a:	30 c0       	rjmp	.+96     	; 0x3a8c <nmi_get_chipid+0x17c>
    3a2c:	82 eb       	ldi	r24, 0xB2	; 178
    3a2e:	92 e0       	ldi	r25, 0x02	; 2
    3a30:	a0 e1       	ldi	r26, 0x10	; 16
    3a32:	b0 e0       	ldi	r27, 0x00	; 0
    3a34:	80 93 0d 2e 	sts	0x2E0D, r24	; 0x802e0d <chipid.2327>
    3a38:	90 93 0e 2e 	sts	0x2E0E, r25	; 0x802e0e <chipid.2327+0x1>
    3a3c:	a0 93 0f 2e 	sts	0x2E0F, r26	; 0x802e0f <chipid.2327+0x2>
    3a40:	b0 93 10 2e 	sts	0x2E10, r27	; 0x802e10 <chipid.2327+0x3>
    3a44:	23 c0       	rjmp	.+70     	; 0x3a8c <nmi_get_chipid+0x17c>
    3a46:	80 91 0d 2e 	lds	r24, 0x2E0D	; 0x802e0d <chipid.2327>
    3a4a:	90 91 0e 2e 	lds	r25, 0x2E0E	; 0x802e0e <chipid.2327+0x1>
    3a4e:	a0 91 0f 2e 	lds	r26, 0x2E0F	; 0x802e0f <chipid.2327+0x2>
    3a52:	b0 91 10 2e 	lds	r27, 0x2E10	; 0x802e10 <chipid.2327+0x3>
    3a56:	80 3f       	cpi	r24, 0xF0	; 240
    3a58:	91 05       	cpc	r25, r1
    3a5a:	a0 41       	sbci	r26, 0x10	; 16
    3a5c:	b1 05       	cpc	r27, r1
    3a5e:	b1 f4       	brne	.+44     	; 0x3a8c <nmi_get_chipid+0x17c>
    3a60:	4d e0       	ldi	r20, 0x0D	; 13
    3a62:	5e e2       	ldi	r21, 0x2E	; 46
    3a64:	60 e0       	ldi	r22, 0x00	; 0
    3a66:	70 e0       	ldi	r23, 0x00	; 0
    3a68:	8b e3       	ldi	r24, 0x3B	; 59
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    3a70:	88 23       	and	r24, r24
    3a72:	61 f0       	breq	.+24     	; 0x3a8c <nmi_get_chipid+0x17c>
    3a74:	10 92 0d 2e 	sts	0x2E0D, r1	; 0x802e0d <chipid.2327>
    3a78:	10 92 0e 2e 	sts	0x2E0E, r1	; 0x802e0e <chipid.2327+0x1>
    3a7c:	10 92 0f 2e 	sts	0x2E0F, r1	; 0x802e0f <chipid.2327+0x2>
    3a80:	10 92 10 2e 	sts	0x2E10, r1	; 0x802e10 <chipid.2327+0x3>
    3a84:	80 e0       	ldi	r24, 0x00	; 0
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	dc 01       	movw	r26, r24
    3a8a:	2a c0       	rjmp	.+84     	; 0x3ae0 <nmi_get_chipid+0x1d0>
    3a8c:	80 91 0d 2e 	lds	r24, 0x2E0D	; 0x802e0d <chipid.2327>
    3a90:	90 91 0e 2e 	lds	r25, 0x2E0E	; 0x802e0e <chipid.2327+0x1>
    3a94:	a0 91 0f 2e 	lds	r26, 0x2E0F	; 0x802e0f <chipid.2327+0x2>
    3a98:	b0 91 10 2e 	lds	r27, 0x2E10	; 0x802e10 <chipid.2327+0x3>
    3a9c:	a0 7f       	andi	r26, 0xF0	; 240
    3a9e:	80 93 0d 2e 	sts	0x2E0D, r24	; 0x802e0d <chipid.2327>
    3aa2:	90 93 0e 2e 	sts	0x2E0E, r25	; 0x802e0e <chipid.2327+0x1>
    3aa6:	a0 93 0f 2e 	sts	0x2E0F, r26	; 0x802e0f <chipid.2327+0x2>
    3aaa:	b0 93 10 2e 	sts	0x2E10, r27	; 0x802e10 <chipid.2327+0x3>
    3aae:	80 91 0d 2e 	lds	r24, 0x2E0D	; 0x802e0d <chipid.2327>
    3ab2:	90 91 0e 2e 	lds	r25, 0x2E0E	; 0x802e0e <chipid.2327+0x1>
    3ab6:	a0 91 0f 2e 	lds	r26, 0x2E0F	; 0x802e0f <chipid.2327+0x2>
    3aba:	b0 91 10 2e 	lds	r27, 0x2E10	; 0x802e10 <chipid.2327+0x3>
    3abe:	a5 60       	ori	r26, 0x05	; 5
    3ac0:	80 93 0d 2e 	sts	0x2E0D, r24	; 0x802e0d <chipid.2327>
    3ac4:	90 93 0e 2e 	sts	0x2E0E, r25	; 0x802e0e <chipid.2327+0x1>
    3ac8:	a0 93 0f 2e 	sts	0x2E0F, r26	; 0x802e0f <chipid.2327+0x2>
    3acc:	b0 93 10 2e 	sts	0x2E10, r27	; 0x802e10 <chipid.2327+0x3>
    3ad0:	80 91 0d 2e 	lds	r24, 0x2E0D	; 0x802e0d <chipid.2327>
    3ad4:	90 91 0e 2e 	lds	r25, 0x2E0E	; 0x802e0e <chipid.2327+0x1>
    3ad8:	a0 91 0f 2e 	lds	r26, 0x2E0F	; 0x802e0f <chipid.2327+0x2>
    3adc:	b0 91 10 2e 	lds	r27, 0x2E10	; 0x802e10 <chipid.2327+0x3>
    3ae0:	bc 01       	movw	r22, r24
    3ae2:	cd 01       	movw	r24, r26
    3ae4:	24 96       	adiw	r28, 0x04	; 4
    3ae6:	cd bf       	out	0x3d, r28	; 61
    3ae8:	de bf       	out	0x3e, r29	; 62
    3aea:	df 91       	pop	r29
    3aec:	cf 91       	pop	r28
    3aee:	08 95       	ret

00003af0 <chip_sleep>:
    3af0:	cf 93       	push	r28
    3af2:	df 93       	push	r29
    3af4:	cd b7       	in	r28, 0x3d	; 61
    3af6:	de b7       	in	r29, 0x3e	; 62
    3af8:	25 97       	sbiw	r28, 0x05	; 5
    3afa:	cd bf       	out	0x3d, r28	; 61
    3afc:	de bf       	out	0x3e, r29	; 62
    3afe:	19 82       	std	Y+1, r1	; 0x01
    3b00:	ce 01       	movw	r24, r28
    3b02:	02 96       	adiw	r24, 0x02	; 2
    3b04:	ac 01       	movw	r20, r24
    3b06:	60 e1       	ldi	r22, 0x10	; 16
    3b08:	70 e0       	ldi	r23, 0x00	; 0
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    3b12:	89 83       	std	Y+1, r24	; 0x01
    3b14:	89 81       	ldd	r24, Y+1	; 0x01
    3b16:	88 23       	and	r24, r24
    3b18:	09 f0       	breq	.+2      	; 0x3b1c <chip_sleep+0x2c>
    3b1a:	71 c0       	rjmp	.+226    	; 0x3bfe <chip_sleep+0x10e>
    3b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b20:	ac 81       	ldd	r26, Y+4	; 0x04
    3b22:	bd 81       	ldd	r27, Y+5	; 0x05
    3b24:	81 70       	andi	r24, 0x01	; 1
    3b26:	99 27       	eor	r25, r25
    3b28:	aa 27       	eor	r26, r26
    3b2a:	bb 27       	eor	r27, r27
    3b2c:	89 2b       	or	r24, r25
    3b2e:	8a 2b       	or	r24, r26
    3b30:	8b 2b       	or	r24, r27
    3b32:	09 f0       	breq	.+2      	; 0x3b36 <chip_sleep+0x46>
    3b34:	e5 cf       	rjmp	.-54     	; 0x3b00 <chip_sleep+0x10>
    3b36:	00 00       	nop
    3b38:	ce 01       	movw	r24, r28
    3b3a:	02 96       	adiw	r24, 0x02	; 2
    3b3c:	ac 01       	movw	r20, r24
    3b3e:	61 e0       	ldi	r22, 0x01	; 1
    3b40:	70 e0       	ldi	r23, 0x00	; 0
    3b42:	80 e0       	ldi	r24, 0x00	; 0
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    3b4a:	89 83       	std	Y+1, r24	; 0x01
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    3b4e:	88 23       	and	r24, r24
    3b50:	09 f0       	breq	.+2      	; 0x3b54 <chip_sleep+0x64>
    3b52:	57 c0       	rjmp	.+174    	; 0x3c02 <chip_sleep+0x112>
    3b54:	8a 81       	ldd	r24, Y+2	; 0x02
    3b56:	9b 81       	ldd	r25, Y+3	; 0x03
    3b58:	ac 81       	ldd	r26, Y+4	; 0x04
    3b5a:	bd 81       	ldd	r27, Y+5	; 0x05
    3b5c:	82 70       	andi	r24, 0x02	; 2
    3b5e:	99 27       	eor	r25, r25
    3b60:	aa 27       	eor	r26, r26
    3b62:	bb 27       	eor	r27, r27
    3b64:	89 2b       	or	r24, r25
    3b66:	8a 2b       	or	r24, r26
    3b68:	8b 2b       	or	r24, r27
    3b6a:	c9 f0       	breq	.+50     	; 0x3b9e <chip_sleep+0xae>
    3b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b70:	ac 81       	ldd	r26, Y+4	; 0x04
    3b72:	bd 81       	ldd	r27, Y+5	; 0x05
    3b74:	8d 7f       	andi	r24, 0xFD	; 253
    3b76:	8a 83       	std	Y+2, r24	; 0x02
    3b78:	9b 83       	std	Y+3, r25	; 0x03
    3b7a:	ac 83       	std	Y+4, r26	; 0x04
    3b7c:	bd 83       	std	Y+5, r27	; 0x05
    3b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b80:	9b 81       	ldd	r25, Y+3	; 0x03
    3b82:	ac 81       	ldd	r26, Y+4	; 0x04
    3b84:	bd 81       	ldd	r27, Y+5	; 0x05
    3b86:	9c 01       	movw	r18, r24
    3b88:	ad 01       	movw	r20, r26
    3b8a:	61 e0       	ldi	r22, 0x01	; 1
    3b8c:	70 e0       	ldi	r23, 0x00	; 0
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    3b96:	89 83       	std	Y+1, r24	; 0x01
    3b98:	89 81       	ldd	r24, Y+1	; 0x01
    3b9a:	88 23       	and	r24, r24
    3b9c:	a1 f5       	brne	.+104    	; 0x3c06 <chip_sleep+0x116>
    3b9e:	ce 01       	movw	r24, r28
    3ba0:	02 96       	adiw	r24, 0x02	; 2
    3ba2:	ac 01       	movw	r20, r24
    3ba4:	6b e0       	ldi	r22, 0x0B	; 11
    3ba6:	70 e0       	ldi	r23, 0x00	; 0
    3ba8:	80 e0       	ldi	r24, 0x00	; 0
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    3bb0:	89 83       	std	Y+1, r24	; 0x01
    3bb2:	89 81       	ldd	r24, Y+1	; 0x01
    3bb4:	88 23       	and	r24, r24
    3bb6:	49 f5       	brne	.+82     	; 0x3c0a <chip_sleep+0x11a>
    3bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bba:	9b 81       	ldd	r25, Y+3	; 0x03
    3bbc:	ac 81       	ldd	r26, Y+4	; 0x04
    3bbe:	bd 81       	ldd	r27, Y+5	; 0x05
    3bc0:	81 70       	andi	r24, 0x01	; 1
    3bc2:	99 27       	eor	r25, r25
    3bc4:	aa 27       	eor	r26, r26
    3bc6:	bb 27       	eor	r27, r27
    3bc8:	89 2b       	or	r24, r25
    3bca:	8a 2b       	or	r24, r26
    3bcc:	8b 2b       	or	r24, r27
    3bce:	f1 f0       	breq	.+60     	; 0x3c0c <chip_sleep+0x11c>
    3bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd4:	ac 81       	ldd	r26, Y+4	; 0x04
    3bd6:	bd 81       	ldd	r27, Y+5	; 0x05
    3bd8:	8e 7f       	andi	r24, 0xFE	; 254
    3bda:	8a 83       	std	Y+2, r24	; 0x02
    3bdc:	9b 83       	std	Y+3, r25	; 0x03
    3bde:	ac 83       	std	Y+4, r26	; 0x04
    3be0:	bd 83       	std	Y+5, r27	; 0x05
    3be2:	8a 81       	ldd	r24, Y+2	; 0x02
    3be4:	9b 81       	ldd	r25, Y+3	; 0x03
    3be6:	ac 81       	ldd	r26, Y+4	; 0x04
    3be8:	bd 81       	ldd	r27, Y+5	; 0x05
    3bea:	9c 01       	movw	r18, r24
    3bec:	ad 01       	movw	r20, r26
    3bee:	6b e0       	ldi	r22, 0x0B	; 11
    3bf0:	70 e0       	ldi	r23, 0x00	; 0
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    3bfa:	89 83       	std	Y+1, r24	; 0x01
    3bfc:	07 c0       	rjmp	.+14     	; 0x3c0c <chip_sleep+0x11c>
    3bfe:	00 00       	nop
    3c00:	05 c0       	rjmp	.+10     	; 0x3c0c <chip_sleep+0x11c>
    3c02:	00 00       	nop
    3c04:	03 c0       	rjmp	.+6      	; 0x3c0c <chip_sleep+0x11c>
    3c06:	00 00       	nop
    3c08:	01 c0       	rjmp	.+2      	; 0x3c0c <chip_sleep+0x11c>
    3c0a:	00 00       	nop
    3c0c:	89 81       	ldd	r24, Y+1	; 0x01
    3c0e:	25 96       	adiw	r28, 0x05	; 5
    3c10:	cd bf       	out	0x3d, r28	; 61
    3c12:	de bf       	out	0x3e, r29	; 62
    3c14:	df 91       	pop	r29
    3c16:	cf 91       	pop	r28
    3c18:	08 95       	ret

00003c1a <chip_wake>:
    3c1a:	cf 93       	push	r28
    3c1c:	df 93       	push	r29
    3c1e:	cd b7       	in	r28, 0x3d	; 61
    3c20:	de b7       	in	r29, 0x3e	; 62
    3c22:	2d 97       	sbiw	r28, 0x0d	; 13
    3c24:	cd bf       	out	0x3d, r28	; 61
    3c26:	de bf       	out	0x3e, r29	; 62
    3c28:	19 82       	std	Y+1, r1	; 0x01
    3c2a:	1e 82       	std	Y+6, r1	; 0x06
    3c2c:	1f 82       	std	Y+7, r1	; 0x07
    3c2e:	18 86       	std	Y+8, r1	; 0x08
    3c30:	19 86       	std	Y+9, r1	; 0x09
    3c32:	1a 86       	std	Y+10, r1	; 0x0a
    3c34:	1b 86       	std	Y+11, r1	; 0x0b
    3c36:	1c 86       	std	Y+12, r1	; 0x0c
    3c38:	1d 86       	std	Y+13, r1	; 0x0d
    3c3a:	1a 82       	std	Y+2, r1	; 0x02
    3c3c:	1b 82       	std	Y+3, r1	; 0x03
    3c3e:	1c 82       	std	Y+4, r1	; 0x04
    3c40:	1d 82       	std	Y+5, r1	; 0x05
    3c42:	ce 01       	movw	r24, r28
    3c44:	06 96       	adiw	r24, 0x06	; 6
    3c46:	ac 01       	movw	r20, r24
    3c48:	6b e0       	ldi	r22, 0x0B	; 11
    3c4a:	70 e0       	ldi	r23, 0x00	; 0
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    3c54:	89 83       	std	Y+1, r24	; 0x01
    3c56:	89 81       	ldd	r24, Y+1	; 0x01
    3c58:	88 23       	and	r24, r24
    3c5a:	09 f0       	breq	.+2      	; 0x3c5e <chip_wake+0x44>
    3c5c:	83 c0       	rjmp	.+262    	; 0x3d64 <chip_wake+0x14a>
    3c5e:	8e 81       	ldd	r24, Y+6	; 0x06
    3c60:	9f 81       	ldd	r25, Y+7	; 0x07
    3c62:	a8 85       	ldd	r26, Y+8	; 0x08
    3c64:	b9 85       	ldd	r27, Y+9	; 0x09
    3c66:	81 70       	andi	r24, 0x01	; 1
    3c68:	99 27       	eor	r25, r25
    3c6a:	aa 27       	eor	r26, r26
    3c6c:	bb 27       	eor	r27, r27
    3c6e:	89 2b       	or	r24, r25
    3c70:	8a 2b       	or	r24, r26
    3c72:	8b 2b       	or	r24, r27
    3c74:	91 f4       	brne	.+36     	; 0x3c9a <chip_wake+0x80>
    3c76:	8e 81       	ldd	r24, Y+6	; 0x06
    3c78:	9f 81       	ldd	r25, Y+7	; 0x07
    3c7a:	a8 85       	ldd	r26, Y+8	; 0x08
    3c7c:	b9 85       	ldd	r27, Y+9	; 0x09
    3c7e:	81 60       	ori	r24, 0x01	; 1
    3c80:	9c 01       	movw	r18, r24
    3c82:	ad 01       	movw	r20, r26
    3c84:	6b e0       	ldi	r22, 0x0B	; 11
    3c86:	70 e0       	ldi	r23, 0x00	; 0
    3c88:	80 e0       	ldi	r24, 0x00	; 0
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    3c90:	89 83       	std	Y+1, r24	; 0x01
    3c92:	89 81       	ldd	r24, Y+1	; 0x01
    3c94:	88 23       	and	r24, r24
    3c96:	09 f0       	breq	.+2      	; 0x3c9a <chip_wake+0x80>
    3c98:	67 c0       	rjmp	.+206    	; 0x3d68 <chip_wake+0x14e>
    3c9a:	ce 01       	movw	r24, r28
    3c9c:	06 96       	adiw	r24, 0x06	; 6
    3c9e:	ac 01       	movw	r20, r24
    3ca0:	61 e0       	ldi	r22, 0x01	; 1
    3ca2:	70 e0       	ldi	r23, 0x00	; 0
    3ca4:	80 e0       	ldi	r24, 0x00	; 0
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    3cac:	89 83       	std	Y+1, r24	; 0x01
    3cae:	89 81       	ldd	r24, Y+1	; 0x01
    3cb0:	88 23       	and	r24, r24
    3cb2:	09 f0       	breq	.+2      	; 0x3cb6 <chip_wake+0x9c>
    3cb4:	5b c0       	rjmp	.+182    	; 0x3d6c <chip_wake+0x152>
    3cb6:	8e 81       	ldd	r24, Y+6	; 0x06
    3cb8:	9f 81       	ldd	r25, Y+7	; 0x07
    3cba:	a8 85       	ldd	r26, Y+8	; 0x08
    3cbc:	b9 85       	ldd	r27, Y+9	; 0x09
    3cbe:	82 70       	andi	r24, 0x02	; 2
    3cc0:	99 27       	eor	r25, r25
    3cc2:	aa 27       	eor	r26, r26
    3cc4:	bb 27       	eor	r27, r27
    3cc6:	89 2b       	or	r24, r25
    3cc8:	8a 2b       	or	r24, r26
    3cca:	8b 2b       	or	r24, r27
    3ccc:	91 f4       	brne	.+36     	; 0x3cf2 <chip_wake+0xd8>
    3cce:	8e 81       	ldd	r24, Y+6	; 0x06
    3cd0:	9f 81       	ldd	r25, Y+7	; 0x07
    3cd2:	a8 85       	ldd	r26, Y+8	; 0x08
    3cd4:	b9 85       	ldd	r27, Y+9	; 0x09
    3cd6:	82 60       	ori	r24, 0x02	; 2
    3cd8:	9c 01       	movw	r18, r24
    3cda:	ad 01       	movw	r20, r26
    3cdc:	61 e0       	ldi	r22, 0x01	; 1
    3cde:	70 e0       	ldi	r23, 0x00	; 0
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    3ce8:	89 83       	std	Y+1, r24	; 0x01
    3cea:	89 81       	ldd	r24, Y+1	; 0x01
    3cec:	88 23       	and	r24, r24
    3cee:	09 f0       	breq	.+2      	; 0x3cf2 <chip_wake+0xd8>
    3cf0:	3f c0       	rjmp	.+126    	; 0x3d70 <chip_wake+0x156>
    3cf2:	ce 01       	movw	r24, r28
    3cf4:	0a 96       	adiw	r24, 0x0a	; 10
    3cf6:	ac 01       	movw	r20, r24
    3cf8:	6f e0       	ldi	r22, 0x0F	; 15
    3cfa:	70 e0       	ldi	r23, 0x00	; 0
    3cfc:	80 e0       	ldi	r24, 0x00	; 0
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    3d04:	89 83       	std	Y+1, r24	; 0x01
    3d06:	89 81       	ldd	r24, Y+1	; 0x01
    3d08:	88 23       	and	r24, r24
    3d0a:	a1 f5       	brne	.+104    	; 0x3d74 <chip_wake+0x15a>
    3d0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d10:	ac 85       	ldd	r26, Y+12	; 0x0c
    3d12:	bd 85       	ldd	r27, Y+13	; 0x0d
    3d14:	84 70       	andi	r24, 0x04	; 4
    3d16:	99 27       	eor	r25, r25
    3d18:	aa 27       	eor	r26, r26
    3d1a:	bb 27       	eor	r27, r27
    3d1c:	89 2b       	or	r24, r25
    3d1e:	8a 2b       	or	r24, r26
    3d20:	8b 2b       	or	r24, r27
    3d22:	e1 f4       	brne	.+56     	; 0x3d5c <chip_wake+0x142>
    3d24:	62 e0       	ldi	r22, 0x02	; 2
    3d26:	70 e0       	ldi	r23, 0x00	; 0
    3d28:	80 e0       	ldi	r24, 0x00	; 0
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <nm_bsp_sleep>
    3d30:	8a 81       	ldd	r24, Y+2	; 0x02
    3d32:	9b 81       	ldd	r25, Y+3	; 0x03
    3d34:	ac 81       	ldd	r26, Y+4	; 0x04
    3d36:	bd 81       	ldd	r27, Y+5	; 0x05
    3d38:	01 96       	adiw	r24, 0x01	; 1
    3d3a:	a1 1d       	adc	r26, r1
    3d3c:	b1 1d       	adc	r27, r1
    3d3e:	8a 83       	std	Y+2, r24	; 0x02
    3d40:	9b 83       	std	Y+3, r25	; 0x03
    3d42:	ac 83       	std	Y+4, r26	; 0x04
    3d44:	bd 83       	std	Y+5, r27	; 0x05
    3d46:	8a 81       	ldd	r24, Y+2	; 0x02
    3d48:	9b 81       	ldd	r25, Y+3	; 0x03
    3d4a:	ac 81       	ldd	r26, Y+4	; 0x04
    3d4c:	bd 81       	ldd	r27, Y+5	; 0x05
    3d4e:	05 97       	sbiw	r24, 0x05	; 5
    3d50:	a1 05       	cpc	r26, r1
    3d52:	b1 05       	cpc	r27, r1
    3d54:	70 f2       	brcs	.-100    	; 0x3cf2 <chip_wake+0xd8>
    3d56:	8c ef       	ldi	r24, 0xFC	; 252
    3d58:	89 83       	std	Y+1, r24	; 0x01
    3d5a:	0d c0       	rjmp	.+26     	; 0x3d76 <chip_wake+0x15c>
    3d5c:	00 00       	nop
    3d5e:	0e 94 b6 20 	call	0x416c	; 0x416c <nm_bus_reset>
    3d62:	09 c0       	rjmp	.+18     	; 0x3d76 <chip_wake+0x15c>
    3d64:	00 00       	nop
    3d66:	07 c0       	rjmp	.+14     	; 0x3d76 <chip_wake+0x15c>
    3d68:	00 00       	nop
    3d6a:	05 c0       	rjmp	.+10     	; 0x3d76 <chip_wake+0x15c>
    3d6c:	00 00       	nop
    3d6e:	03 c0       	rjmp	.+6      	; 0x3d76 <chip_wake+0x15c>
    3d70:	00 00       	nop
    3d72:	01 c0       	rjmp	.+2      	; 0x3d76 <chip_wake+0x15c>
    3d74:	00 00       	nop
    3d76:	89 81       	ldd	r24, Y+1	; 0x01
    3d78:	2d 96       	adiw	r28, 0x0d	; 13
    3d7a:	cd bf       	out	0x3d, r28	; 61
    3d7c:	de bf       	out	0x3e, r29	; 62
    3d7e:	df 91       	pop	r29
    3d80:	cf 91       	pop	r28
    3d82:	08 95       	ret

00003d84 <wait_for_bootrom>:

sint8 wait_for_bootrom(uint8 arg)
{
    3d84:	cf 93       	push	r28
    3d86:	df 93       	push	r29
    3d88:	cd b7       	in	r28, 0x3d	; 61
    3d8a:	de b7       	in	r29, 0x3e	; 62
    3d8c:	62 97       	sbiw	r28, 0x12	; 18
    3d8e:	cd bf       	out	0x3d, r28	; 61
    3d90:	de bf       	out	0x3e, r29	; 62
    3d92:	8a 8b       	std	Y+18, r24	; 0x12
	sint8 ret = M2M_SUCCESS;
    3d94:	1d 86       	std	Y+13, r1	; 0x0d
	uint32 reg = 0, cnt = 0;
    3d96:	19 82       	std	Y+1, r1	; 0x01
    3d98:	1a 82       	std	Y+2, r1	; 0x02
    3d9a:	1b 82       	std	Y+3, r1	; 0x03
    3d9c:	1c 82       	std	Y+4, r1	; 0x04
    3d9e:	1d 82       	std	Y+5, r1	; 0x05
    3da0:	1e 82       	std	Y+6, r1	; 0x06
    3da2:	1f 82       	std	Y+7, r1	; 0x07
    3da4:	18 86       	std	Y+8, r1	; 0x08
	uint32 u32GpReg1 = 0;
    3da6:	19 86       	std	Y+9, r1	; 0x09
    3da8:	1a 86       	std	Y+10, r1	; 0x0a
    3daa:	1b 86       	std	Y+11, r1	; 0x0b
    3dac:	1c 86       	std	Y+12, r1	; 0x0c
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    3dae:	82 e5       	ldi	r24, 0x52	; 82
    3db0:	93 e1       	ldi	r25, 0x13	; 19
    3db2:	dc 01       	movw	r26, r24
    3db4:	8e 87       	std	Y+14, r24	; 0x0e
    3db6:	9f 87       	std	Y+15, r25	; 0x0f
    3db8:	a8 8b       	std	Y+16, r26	; 0x10
    3dba:	b9 8b       	std	Y+17, r27	; 0x11
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    3dbc:	19 82       	std	Y+1, r1	; 0x01
    3dbe:	1a 82       	std	Y+2, r1	; 0x02
    3dc0:	1b 82       	std	Y+3, r1	; 0x03
    3dc2:	1c 82       	std	Y+4, r1	; 0x04
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    3dc4:	64 e1       	ldi	r22, 0x14	; 20
    3dc6:	70 e1       	ldi	r23, 0x10	; 16
    3dc8:	80 e0       	ldi	r24, 0x00	; 0
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	0e 94 c2 20 	call	0x4184	; 0x4184 <nm_read_reg>
    3dd0:	dc 01       	movw	r26, r24
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	89 83       	std	Y+1, r24	; 0x01
    3dd6:	9a 83       	std	Y+2, r25	; 0x02
    3dd8:	ab 83       	std	Y+3, r26	; 0x03
    3dda:	bc 83       	std	Y+4, r27	; 0x04
		if (reg & 0x80000000) {
    3ddc:	89 81       	ldd	r24, Y+1	; 0x01
    3dde:	9a 81       	ldd	r25, Y+2	; 0x02
    3de0:	ab 81       	ldd	r26, Y+3	; 0x03
    3de2:	bc 81       	ldd	r27, Y+4	; 0x04
    3de4:	bb 23       	and	r27, r27
    3de6:	3c f0       	brlt	.+14     	; 0x3df6 <wait_for_bootrom+0x72>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    3de8:	61 e0       	ldi	r22, 0x01	; 1
    3dea:	70 e0       	ldi	r23, 0x00	; 0
    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <nm_bsp_sleep>
	}
    3df4:	e7 cf       	rjmp	.-50     	; 0x3dc4 <wait_for_bootrom+0x40>

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
    3df6:	00 00       	nop
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    3df8:	6c eb       	ldi	r22, 0xBC	; 188
    3dfa:	77 e0       	ldi	r23, 0x07	; 7
    3dfc:	82 e0       	ldi	r24, 0x02	; 2
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	0e 94 c2 20 	call	0x4184	; 0x4184 <nm_read_reg>
    3e04:	dc 01       	movw	r26, r24
    3e06:	cb 01       	movw	r24, r22
    3e08:	89 83       	std	Y+1, r24	; 0x01
    3e0a:	9a 83       	std	Y+2, r25	; 0x02
    3e0c:	ab 83       	std	Y+3, r26	; 0x03
    3e0e:	bc 83       	std	Y+4, r27	; 0x04
	reg &= 0x1;
    3e10:	89 81       	ldd	r24, Y+1	; 0x01
    3e12:	9a 81       	ldd	r25, Y+2	; 0x02
    3e14:	ab 81       	ldd	r26, Y+3	; 0x03
    3e16:	bc 81       	ldd	r27, Y+4	; 0x04
    3e18:	81 70       	andi	r24, 0x01	; 1
    3e1a:	99 27       	eor	r25, r25
    3e1c:	aa 27       	eor	r26, r26
    3e1e:	bb 27       	eor	r27, r27
    3e20:	89 83       	std	Y+1, r24	; 0x01
    3e22:	9a 83       	std	Y+2, r25	; 0x02
    3e24:	ab 83       	std	Y+3, r26	; 0x03
    3e26:	bc 83       	std	Y+4, r27	; 0x04

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
    3e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e2c:	ab 81       	ldd	r26, Y+3	; 0x03
    3e2e:	bc 81       	ldd	r27, Y+4	; 0x04
    3e30:	89 2b       	or	r24, r25
    3e32:	8a 2b       	or	r24, r26
    3e34:	8b 2b       	or	r24, r27
    3e36:	51 f5       	brne	.+84     	; 0x3e8c <wait_for_bootrom+0x108>
	{
		reg = 0;
    3e38:	19 82       	std	Y+1, r1	; 0x01
    3e3a:	1a 82       	std	Y+2, r1	; 0x02
    3e3c:	1b 82       	std	Y+3, r1	; 0x03
    3e3e:	1c 82       	std	Y+4, r1	; 0x04
		while(reg != M2M_FINISH_BOOT_ROM)
    3e40:	1c c0       	rjmp	.+56     	; 0x3e7a <wait_for_bootrom+0xf6>
		{
			nm_bsp_sleep(1);
    3e42:	61 e0       	ldi	r22, 0x01	; 1
    3e44:	70 e0       	ldi	r23, 0x00	; 0
    3e46:	80 e0       	ldi	r24, 0x00	; 0
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
    3e4e:	6c e0       	ldi	r22, 0x0C	; 12
    3e50:	70 e0       	ldi	r23, 0x00	; 0
    3e52:	cb 01       	movw	r24, r22
    3e54:	0e 94 c2 20 	call	0x4184	; 0x4184 <nm_read_reg>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	89 83       	std	Y+1, r24	; 0x01
    3e5e:	9a 83       	std	Y+2, r25	; 0x02
    3e60:	ab 83       	std	Y+3, r26	; 0x03
    3e62:	bc 83       	std	Y+4, r27	; 0x04

			if(++cnt > TIMEOUT)
    3e64:	8d 81       	ldd	r24, Y+5	; 0x05
    3e66:	9e 81       	ldd	r25, Y+6	; 0x06
    3e68:	af 81       	ldd	r26, Y+7	; 0x07
    3e6a:	b8 85       	ldd	r27, Y+8	; 0x08
    3e6c:	01 96       	adiw	r24, 0x01	; 1
    3e6e:	a1 1d       	adc	r26, r1
    3e70:	b1 1d       	adc	r27, r1
    3e72:	8d 83       	std	Y+5, r24	; 0x05
    3e74:	9e 83       	std	Y+6, r25	; 0x06
    3e76:	af 83       	std	Y+7, r26	; 0x07
    3e78:	b8 87       	std	Y+8, r27	; 0x08

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    3e7a:	89 81       	ldd	r24, Y+1	; 0x01
    3e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e7e:	ab 81       	ldd	r26, Y+3	; 0x03
    3e80:	bc 81       	ldd	r27, Y+4	; 0x04
    3e82:	8e 39       	cpi	r24, 0x9E	; 158
    3e84:	90 4d       	sbci	r25, 0xD0	; 208
    3e86:	ad 4a       	sbci	r26, 0xAD	; 173
    3e88:	b0 41       	sbci	r27, 0x10	; 16
    3e8a:	d9 f6       	brne	.-74     	; 0x3e42 <wait_for_bootrom+0xbe>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    3e8c:	8a 89       	ldd	r24, Y+18	; 0x12
    3e8e:	82 30       	cpi	r24, 0x02	; 2
    3e90:	a9 f4       	brne	.+42     	; 0x3ebc <wait_for_bootrom+0x138>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    3e92:	2d e7       	ldi	r18, 0x7D	; 125
    3e94:	35 ed       	ldi	r19, 0xD5	; 213
    3e96:	4c e1       	ldi	r20, 0x1C	; 28
    3e98:	5c e3       	ldi	r21, 0x3C	; 60
    3e9a:	6c ea       	ldi	r22, 0xAC	; 172
    3e9c:	77 e0       	ldi	r23, 0x07	; 7
    3e9e:	82 e0       	ldi	r24, 0x02	; 2
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	40 e1       	ldi	r20, 0x10	; 16
    3eac:	50 e0       	ldi	r21, 0x00	; 0
    3eae:	6c e8       	ldi	r22, 0x8C	; 140
    3eb0:	70 e1       	ldi	r23, 0x10	; 16
    3eb2:	80 e0       	ldi	r24, 0x00	; 0
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    3eba:	3b c0       	rjmp	.+118    	; 0x3f32 <wait_for_bootrom+0x1ae>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    3ebc:	8a 89       	ldd	r24, Y+18	; 0x12
    3ebe:	83 30       	cpi	r24, 0x03	; 3
    3ec0:	a1 f4       	brne	.+40     	; 0x3eea <wait_for_bootrom+0x166>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    3ec2:	2d e7       	ldi	r18, 0x7D	; 125
    3ec4:	35 ed       	ldi	r19, 0xD5	; 213
    3ec6:	4c e1       	ldi	r20, 0x1C	; 28
    3ec8:	5c e3       	ldi	r21, 0x3C	; 60
    3eca:	6c ea       	ldi	r22, 0xAC	; 172
    3ecc:	77 e0       	ldi	r23, 0x07	; 7
    3ece:	82 e0       	ldi	r24, 0x02	; 2
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	a9 01       	movw	r20, r18
    3edc:	6c e8       	ldi	r22, 0x8C	; 140
    3ede:	70 e1       	ldi	r23, 0x10	; 16
    3ee0:	80 e0       	ldi	r24, 0x00	; 0
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    3ee8:	24 c0       	rjmp	.+72     	; 0x3f32 <wait_for_bootrom+0x1ae>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    3eea:	8a 89       	ldd	r24, Y+18	; 0x12
    3eec:	84 30       	cpi	r24, 0x04	; 4
    3eee:	a9 f4       	brne	.+42     	; 0x3f1a <wait_for_bootrom+0x196>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    3ef0:	80 e8       	ldi	r24, 0x80	; 128
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	a0 e0       	ldi	r26, 0x00	; 0
    3ef6:	b0 e0       	ldi	r27, 0x00	; 0
    3ef8:	89 87       	std	Y+9, r24	; 0x09
    3efa:	9a 87       	std	Y+10, r25	; 0x0a
    3efc:	ab 87       	std	Y+11, r26	; 0x0b
    3efe:	bc 87       	std	Y+12, r27	; 0x0c
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    3f00:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f02:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f04:	a8 89       	ldd	r26, Y+16	; 0x10
    3f06:	b9 89       	ldd	r27, Y+17	; 0x11
    3f08:	9c 01       	movw	r18, r24
    3f0a:	ad 01       	movw	r20, r26
    3f0c:	6c e8       	ldi	r22, 0x8C	; 140
    3f0e:	70 e1       	ldi	r23, 0x10	; 16
    3f10:	80 e0       	ldi	r24, 0x00	; 0
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    3f18:	0c c0       	rjmp	.+24     	; 0x3f32 <wait_for_bootrom+0x1ae>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    3f1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f1c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f1e:	a8 89       	ldd	r26, Y+16	; 0x10
    3f20:	b9 89       	ldd	r27, Y+17	; 0x11
    3f22:	9c 01       	movw	r18, r24
    3f24:	ad 01       	movw	r20, r26
    3f26:	6c e8       	ldi	r22, 0x8C	; 140
    3f28:	70 e1       	ldi	r23, 0x10	; 16
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    3f32:	0e 94 88 1c 	call	0x3910	; 0x3910 <nmi_get_chipid>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	9f 70       	andi	r25, 0x0F	; 15
    3f3c:	aa 27       	eor	r26, r26
    3f3e:	bb 27       	eor	r27, r27
    3f40:	80 3a       	cpi	r24, 0xA0	; 160
    3f42:	93 40       	sbci	r25, 0x03	; 3
    3f44:	a1 05       	cpc	r26, r1
    3f46:	b1 05       	cpc	r27, r1
    3f48:	50 f0       	brcs	.+20     	; 0x3f5e <wait_for_bootrom+0x1da>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    3f4a:	89 85       	ldd	r24, Y+9	; 0x09
    3f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f4e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3f50:	bc 85       	ldd	r27, Y+12	; 0x0c
    3f52:	82 60       	ori	r24, 0x02	; 2
    3f54:	bc 01       	movw	r22, r24
    3f56:	cd 01       	movw	r24, r26
    3f58:	0e 94 cc 1b 	call	0x3798	; 0x3798 <chip_apply_conf>
    3f5c:	08 c0       	rjmp	.+16     	; 0x3f6e <wait_for_bootrom+0x1ea>
	} else {
		chip_apply_conf(u32GpReg1);
    3f5e:	89 85       	ldd	r24, Y+9	; 0x09
    3f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f62:	ab 85       	ldd	r26, Y+11	; 0x0b
    3f64:	bc 85       	ldd	r27, Y+12	; 0x0c
    3f66:	bc 01       	movw	r22, r24
    3f68:	cd 01       	movw	r24, r26
    3f6a:	0e 94 cc 1b 	call	0x3798	; 0x3798 <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    3f6e:	21 e6       	ldi	r18, 0x61	; 97
    3f70:	3f e2       	ldi	r19, 0x2F	; 47
    3f72:	42 e5       	ldi	r20, 0x52	; 82
    3f74:	5f ee       	ldi	r21, 0xEF	; 239
    3f76:	6c e0       	ldi	r22, 0x0C	; 12
    3f78:	70 e0       	ldi	r23, 0x00	; 0
    3f7a:	cb 01       	movw	r24, r22
    3f7c:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    3f80:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    3f82:	62 96       	adiw	r28, 0x12	; 18
    3f84:	cd bf       	out	0x3d, r28	; 61
    3f86:	de bf       	out	0x3e, r29	; 62
    3f88:	df 91       	pop	r29
    3f8a:	cf 91       	pop	r28
    3f8c:	08 95       	ret

00003f8e <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    3f8e:	cf 93       	push	r28
    3f90:	df 93       	push	r29
    3f92:	cd b7       	in	r28, 0x3d	; 61
    3f94:	de b7       	in	r29, 0x3e	; 62
    3f96:	66 97       	sbiw	r28, 0x16	; 22
    3f98:	cd bf       	out	0x3d, r28	; 61
    3f9a:	de bf       	out	0x3e, r29	; 62
    3f9c:	8e 8b       	std	Y+22, r24	; 0x16
	sint8 ret = M2M_SUCCESS;
    3f9e:	19 82       	std	Y+1, r1	; 0x01
	uint32 reg = 0, cnt = 0;
    3fa0:	1a 82       	std	Y+2, r1	; 0x02
    3fa2:	1b 82       	std	Y+3, r1	; 0x03
    3fa4:	1c 82       	std	Y+4, r1	; 0x04
    3fa6:	1d 82       	std	Y+5, r1	; 0x05
    3fa8:	1e 82       	std	Y+6, r1	; 0x06
    3faa:	1f 82       	std	Y+7, r1	; 0x07
    3fac:	18 86       	std	Y+8, r1	; 0x08
    3fae:	19 86       	std	Y+9, r1	; 0x09
	uint32 u32Timeout = TIMEOUT;
    3fb0:	8f ef       	ldi	r24, 0xFF	; 255
    3fb2:	9f ef       	ldi	r25, 0xFF	; 255
    3fb4:	dc 01       	movw	r26, r24
    3fb6:	8a 87       	std	Y+10, r24	; 0x0a
    3fb8:	9b 87       	std	Y+11, r25	; 0x0b
    3fba:	ac 87       	std	Y+12, r26	; 0x0c
    3fbc:	bd 87       	std	Y+13, r27	; 0x0d
	volatile uint32 regAddress = NMI_STATE_REG;
    3fbe:	8c e8       	ldi	r24, 0x8C	; 140
    3fc0:	90 e1       	ldi	r25, 0x10	; 16
    3fc2:	a0 e0       	ldi	r26, 0x00	; 0
    3fc4:	b0 e0       	ldi	r27, 0x00	; 0
    3fc6:	8e 87       	std	Y+14, r24	; 0x0e
    3fc8:	9f 87       	std	Y+15, r25	; 0x0f
    3fca:	a8 8b       	std	Y+16, r26	; 0x10
    3fcc:	b9 8b       	std	Y+17, r27	; 0x11
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    3fce:	86 e3       	ldi	r24, 0x36	; 54
    3fd0:	96 e2       	ldi	r25, 0x26	; 38
    3fd2:	a3 e5       	ldi	r26, 0x53	; 83
    3fd4:	b2 e0       	ldi	r27, 0x02	; 2
    3fd6:	8a 8b       	std	Y+18, r24	; 0x12
    3fd8:	9b 8b       	std	Y+19, r25	; 0x13
    3fda:	ac 8b       	std	Y+20, r26	; 0x14
    3fdc:	bd 8b       	std	Y+21, r27	; 0x15
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    3fde:	8e 89       	ldd	r24, Y+22	; 0x16
    3fe0:	82 30       	cpi	r24, 0x02	; 2
    3fe2:	21 f0       	breq	.+8      	; 0x3fec <wait_for_firmware_start+0x5e>
    3fe4:	8e 89       	ldd	r24, Y+22	; 0x16
    3fe6:	83 30       	cpi	r24, 0x03	; 3
    3fe8:	09 f0       	breq	.+2      	; 0x3fec <wait_for_firmware_start+0x5e>
    3fea:	40 c0       	rjmp	.+128    	; 0x406c <__RODATA_PM_OFFSET__+0x6c>
		regAddress = NMI_REV_REG;
    3fec:	8c ea       	ldi	r24, 0xAC	; 172
    3fee:	97 e0       	ldi	r25, 0x07	; 7
    3ff0:	a2 e0       	ldi	r26, 0x02	; 2
    3ff2:	b0 e0       	ldi	r27, 0x00	; 0
    3ff4:	8e 87       	std	Y+14, r24	; 0x0e
    3ff6:	9f 87       	std	Y+15, r25	; 0x0f
    3ff8:	a8 8b       	std	Y+16, r26	; 0x10
    3ffa:	b9 8b       	std	Y+17, r27	; 0x11
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    3ffc:	83 ec       	ldi	r24, 0xC3	; 195
    3ffe:	91 ec       	ldi	r25, 0xC1	; 193
    4000:	ad e5       	ldi	r26, 0x5D	; 93
    4002:	b7 ed       	ldi	r27, 0xD7	; 215
    4004:	8a 8b       	std	Y+18, r24	; 0x12
    4006:	9b 8b       	std	Y+19, r25	; 0x13
    4008:	ac 8b       	std	Y+20, r26	; 0x14
    400a:	bd 8b       	std	Y+21, r27	; 0x15
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    400c:	2f c0       	rjmp	.+94     	; 0x406c <__RODATA_PM_OFFSET__+0x6c>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    400e:	62 e0       	ldi	r22, 0x02	; 2
    4010:	70 e0       	ldi	r23, 0x00	; 0
    4012:	80 e0       	ldi	r24, 0x00	; 0
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    401a:	8e 85       	ldd	r24, Y+14	; 0x0e
    401c:	9f 85       	ldd	r25, Y+15	; 0x0f
    401e:	a8 89       	ldd	r26, Y+16	; 0x10
    4020:	b9 89       	ldd	r27, Y+17	; 0x11
    4022:	bc 01       	movw	r22, r24
    4024:	cd 01       	movw	r24, r26
    4026:	0e 94 c2 20 	call	0x4184	; 0x4184 <nm_read_reg>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	8a 83       	std	Y+2, r24	; 0x02
    4030:	9b 83       	std	Y+3, r25	; 0x03
    4032:	ac 83       	std	Y+4, r26	; 0x04
    4034:	bd 83       	std	Y+5, r27	; 0x05
		if(++cnt >= u32Timeout)
    4036:	8e 81       	ldd	r24, Y+6	; 0x06
    4038:	9f 81       	ldd	r25, Y+7	; 0x07
    403a:	a8 85       	ldd	r26, Y+8	; 0x08
    403c:	b9 85       	ldd	r27, Y+9	; 0x09
    403e:	01 96       	adiw	r24, 0x01	; 1
    4040:	a1 1d       	adc	r26, r1
    4042:	b1 1d       	adc	r27, r1
    4044:	8e 83       	std	Y+6, r24	; 0x06
    4046:	9f 83       	std	Y+7, r25	; 0x07
    4048:	a8 87       	std	Y+8, r26	; 0x08
    404a:	b9 87       	std	Y+9, r27	; 0x09
    404c:	2e 81       	ldd	r18, Y+6	; 0x06
    404e:	3f 81       	ldd	r19, Y+7	; 0x07
    4050:	48 85       	ldd	r20, Y+8	; 0x08
    4052:	59 85       	ldd	r21, Y+9	; 0x09
    4054:	8a 85       	ldd	r24, Y+10	; 0x0a
    4056:	9b 85       	ldd	r25, Y+11	; 0x0b
    4058:	ac 85       	ldd	r26, Y+12	; 0x0c
    405a:	bd 85       	ldd	r27, Y+13	; 0x0d
    405c:	28 17       	cp	r18, r24
    405e:	39 07       	cpc	r19, r25
    4060:	4a 07       	cpc	r20, r26
    4062:	5b 07       	cpc	r21, r27
    4064:	18 f0       	brcs	.+6      	; 0x406c <__RODATA_PM_OFFSET__+0x6c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    4066:	8b ef       	ldi	r24, 0xFB	; 251
    4068:	89 83       	std	Y+1, r24	; 0x01
			goto ERR;
    406a:	1f c0       	rjmp	.+62     	; 0x40aa <__RODATA_PM_OFFSET__+0xaa>
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    406c:	2a 89       	ldd	r18, Y+18	; 0x12
    406e:	3b 89       	ldd	r19, Y+19	; 0x13
    4070:	4c 89       	ldd	r20, Y+20	; 0x14
    4072:	5d 89       	ldd	r21, Y+21	; 0x15
    4074:	8a 81       	ldd	r24, Y+2	; 0x02
    4076:	9b 81       	ldd	r25, Y+3	; 0x03
    4078:	ac 81       	ldd	r26, Y+4	; 0x04
    407a:	bd 81       	ldd	r27, Y+5	; 0x05
    407c:	28 17       	cp	r18, r24
    407e:	39 07       	cpc	r19, r25
    4080:	4a 07       	cpc	r20, r26
    4082:	5b 07       	cpc	r21, r27
    4084:	21 f6       	brne	.-120    	; 0x400e <__RODATA_PM_OFFSET__+0xe>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    4086:	8a 89       	ldd	r24, Y+18	; 0x12
    4088:	9b 89       	ldd	r25, Y+19	; 0x13
    408a:	ac 89       	ldd	r26, Y+20	; 0x14
    408c:	bd 89       	ldd	r27, Y+21	; 0x15
    408e:	86 33       	cpi	r24, 0x36	; 54
    4090:	96 42       	sbci	r25, 0x26	; 38
    4092:	a3 45       	sbci	r26, 0x53	; 83
    4094:	b2 40       	sbci	r27, 0x02	; 2
    4096:	49 f4       	brne	.+18     	; 0x40aa <__RODATA_PM_OFFSET__+0xaa>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	a9 01       	movw	r20, r18
    409e:	6c e8       	ldi	r22, 0x8C	; 140
    40a0:	70 e1       	ldi	r23, 0x10	; 16
    40a2:	80 e0       	ldi	r24, 0x00	; 0
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
	}
ERR:
	return ret;
    40aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    40ac:	66 96       	adiw	r28, 0x16	; 22
    40ae:	cd bf       	out	0x3d, r28	; 61
    40b0:	de bf       	out	0x3e, r29	; 62
    40b2:	df 91       	pop	r29
    40b4:	cf 91       	pop	r28
    40b6:	08 95       	ret

000040b8 <chip_deinit>:

sint8 chip_deinit(void)
{
    40b8:	cf 93       	push	r28
    40ba:	df 93       	push	r29
    40bc:	cd b7       	in	r28, 0x3d	; 61
    40be:	de b7       	in	r29, 0x3e	; 62
    40c0:	25 97       	sbiw	r28, 0x05	; 5
    40c2:	cd bf       	out	0x3d, r28	; 61
    40c4:	de bf       	out	0x3e, r29	; 62
	uint32 reg = 0;
    40c6:	1a 82       	std	Y+2, r1	; 0x02
    40c8:	1b 82       	std	Y+3, r1	; 0x03
    40ca:	1c 82       	std	Y+4, r1	; 0x04
    40cc:	1d 82       	std	Y+5, r1	; 0x05
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    40ce:	ce 01       	movw	r24, r28
    40d0:	02 96       	adiw	r24, 0x02	; 2
    40d2:	ac 01       	movw	r20, r24
    40d4:	60 e0       	ldi	r22, 0x00	; 0
    40d6:	74 e1       	ldi	r23, 0x14	; 20
    40d8:	80 e0       	ldi	r24, 0x00	; 0
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    40e0:	89 83       	std	Y+1, r24	; 0x01
	if (ret != M2M_SUCCESS) {
    40e2:	89 81       	ldd	r24, Y+1	; 0x01
    40e4:	88 23       	and	r24, r24
    40e6:	b9 f4       	brne	.+46     	; 0x4116 <chip_deinit+0x5e>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    40e8:	8a 81       	ldd	r24, Y+2	; 0x02
    40ea:	9b 81       	ldd	r25, Y+3	; 0x03
    40ec:	ac 81       	ldd	r26, Y+4	; 0x04
    40ee:	bd 81       	ldd	r27, Y+5	; 0x05
    40f0:	9b 7f       	andi	r25, 0xFB	; 251
    40f2:	8a 83       	std	Y+2, r24	; 0x02
    40f4:	9b 83       	std	Y+3, r25	; 0x03
    40f6:	ac 83       	std	Y+4, r26	; 0x04
    40f8:	bd 83       	std	Y+5, r27	; 0x05
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    40fa:	8a 81       	ldd	r24, Y+2	; 0x02
    40fc:	9b 81       	ldd	r25, Y+3	; 0x03
    40fe:	ac 81       	ldd	r26, Y+4	; 0x04
    4100:	bd 81       	ldd	r27, Y+5	; 0x05
    4102:	9c 01       	movw	r18, r24
    4104:	ad 01       	movw	r20, r26
    4106:	60 e0       	ldi	r22, 0x00	; 0
    4108:	74 e1       	ldi	r23, 0x14	; 20
    410a:	80 e0       	ldi	r24, 0x00	; 0
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    4112:	89 83       	std	Y+1, r24	; 0x01
    4114:	01 c0       	rjmp	.+2      	; 0x4118 <chip_deinit+0x60>
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
	if (ret != M2M_SUCCESS) {
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
    4116:	00 00       	nop
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}

ERR1:
	return ret;
    4118:	89 81       	ldd	r24, Y+1	; 0x01
}
    411a:	25 96       	adiw	r28, 0x05	; 5
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	de bf       	out	0x3e, r29	; 62
    4120:	df 91       	pop	r29
    4122:	cf 91       	pop	r28
    4124:	08 95       	ret

00004126 <nm_bus_iface_init>:
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
	ret = nm_uart_reconfigure(ptr);
#endif
	return ret;
}
    4126:	cf 93       	push	r28
    4128:	df 93       	push	r29
    412a:	00 d0       	rcall	.+0      	; 0x412c <nm_bus_iface_init+0x6>
    412c:	1f 92       	push	r1
    412e:	cd b7       	in	r28, 0x3d	; 61
    4130:	de b7       	in	r29, 0x3e	; 62
    4132:	8a 83       	std	Y+2, r24	; 0x02
    4134:	9b 83       	std	Y+3, r25	; 0x03
    4136:	19 82       	std	Y+1, r1	; 0x01
    4138:	8a 81       	ldd	r24, Y+2	; 0x02
    413a:	9b 81       	ldd	r25, Y+3	; 0x03
    413c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <nm_bus_init>
    4140:	89 83       	std	Y+1, r24	; 0x01
    4142:	89 81       	ldd	r24, Y+1	; 0x01
    4144:	23 96       	adiw	r28, 0x03	; 3
    4146:	cd bf       	out	0x3d, r28	; 61
    4148:	de bf       	out	0x3e, r29	; 62
    414a:	df 91       	pop	r29
    414c:	cf 91       	pop	r28
    414e:	08 95       	ret

00004150 <nm_bus_iface_deinit>:
    4150:	cf 93       	push	r28
    4152:	df 93       	push	r29
    4154:	1f 92       	push	r1
    4156:	cd b7       	in	r28, 0x3d	; 61
    4158:	de b7       	in	r29, 0x3e	; 62
    415a:	19 82       	std	Y+1, r1	; 0x01
    415c:	0e 94 59 10 	call	0x20b2	; 0x20b2 <nm_bus_deinit>
    4160:	89 83       	std	Y+1, r24	; 0x01
    4162:	89 81       	ldd	r24, Y+1	; 0x01
    4164:	0f 90       	pop	r0
    4166:	df 91       	pop	r29
    4168:	cf 91       	pop	r28
    416a:	08 95       	ret

0000416c <nm_bus_reset>:
    416c:	cf 93       	push	r28
    416e:	df 93       	push	r29
    4170:	1f 92       	push	r1
    4172:	cd b7       	in	r28, 0x3d	; 61
    4174:	de b7       	in	r29, 0x3e	; 62
    4176:	19 82       	std	Y+1, r1	; 0x01
    4178:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <nm_spi_reset>
    417c:	0f 90       	pop	r0
    417e:	df 91       	pop	r29
    4180:	cf 91       	pop	r28
    4182:	08 95       	ret

00004184 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    4184:	cf 93       	push	r28
    4186:	df 93       	push	r29
    4188:	00 d0       	rcall	.+0      	; 0x418a <nm_read_reg+0x6>
    418a:	00 d0       	rcall	.+0      	; 0x418c <nm_read_reg+0x8>
    418c:	cd b7       	in	r28, 0x3d	; 61
    418e:	de b7       	in	r29, 0x3e	; 62
    4190:	69 83       	std	Y+1, r22	; 0x01
    4192:	7a 83       	std	Y+2, r23	; 0x02
    4194:	8b 83       	std	Y+3, r24	; 0x03
    4196:	9c 83       	std	Y+4, r25	; 0x04
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    4198:	89 81       	ldd	r24, Y+1	; 0x01
    419a:	9a 81       	ldd	r25, Y+2	; 0x02
    419c:	ab 81       	ldd	r26, Y+3	; 0x03
    419e:	bc 81       	ldd	r27, Y+4	; 0x04
    41a0:	bc 01       	movw	r22, r24
    41a2:	cd 01       	movw	r24, r26
    41a4:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <nm_spi_read_reg>
    41a8:	dc 01       	movw	r26, r24
    41aa:	cb 01       	movw	r24, r22
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    41ac:	bc 01       	movw	r22, r24
    41ae:	cd 01       	movw	r24, r26
    41b0:	24 96       	adiw	r28, 0x04	; 4
    41b2:	cd bf       	out	0x3d, r28	; 61
    41b4:	de bf       	out	0x3e, r29	; 62
    41b6:	df 91       	pop	r29
    41b8:	cf 91       	pop	r28
    41ba:	08 95       	ret

000041bc <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    41bc:	cf 93       	push	r28
    41be:	df 93       	push	r29
    41c0:	cd b7       	in	r28, 0x3d	; 61
    41c2:	de b7       	in	r29, 0x3e	; 62
    41c4:	26 97       	sbiw	r28, 0x06	; 6
    41c6:	cd bf       	out	0x3d, r28	; 61
    41c8:	de bf       	out	0x3e, r29	; 62
    41ca:	69 83       	std	Y+1, r22	; 0x01
    41cc:	7a 83       	std	Y+2, r23	; 0x02
    41ce:	8b 83       	std	Y+3, r24	; 0x03
    41d0:	9c 83       	std	Y+4, r25	; 0x04
    41d2:	4d 83       	std	Y+5, r20	; 0x05
    41d4:	5e 83       	std	Y+6, r21	; 0x06
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    41d6:	2d 81       	ldd	r18, Y+5	; 0x05
    41d8:	3e 81       	ldd	r19, Y+6	; 0x06
    41da:	89 81       	ldd	r24, Y+1	; 0x01
    41dc:	9a 81       	ldd	r25, Y+2	; 0x02
    41de:	ab 81       	ldd	r26, Y+3	; 0x03
    41e0:	bc 81       	ldd	r27, Y+4	; 0x04
    41e2:	a9 01       	movw	r20, r18
    41e4:	bc 01       	movw	r22, r24
    41e6:	cd 01       	movw	r24, r26
    41e8:	0e 94 1d 2b 	call	0x563a	; 0x563a <nm_spi_read_reg_with_ret>
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    41ec:	26 96       	adiw	r28, 0x06	; 6
    41ee:	cd bf       	out	0x3d, r28	; 61
    41f0:	de bf       	out	0x3e, r29	; 62
    41f2:	df 91       	pop	r29
    41f4:	cf 91       	pop	r28
    41f6:	08 95       	ret

000041f8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    41f8:	cf 93       	push	r28
    41fa:	df 93       	push	r29
    41fc:	cd b7       	in	r28, 0x3d	; 61
    41fe:	de b7       	in	r29, 0x3e	; 62
    4200:	28 97       	sbiw	r28, 0x08	; 8
    4202:	cd bf       	out	0x3d, r28	; 61
    4204:	de bf       	out	0x3e, r29	; 62
    4206:	69 83       	std	Y+1, r22	; 0x01
    4208:	7a 83       	std	Y+2, r23	; 0x02
    420a:	8b 83       	std	Y+3, r24	; 0x03
    420c:	9c 83       	std	Y+4, r25	; 0x04
    420e:	2d 83       	std	Y+5, r18	; 0x05
    4210:	3e 83       	std	Y+6, r19	; 0x06
    4212:	4f 83       	std	Y+7, r20	; 0x07
    4214:	58 87       	std	Y+8, r21	; 0x08
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    4216:	2d 81       	ldd	r18, Y+5	; 0x05
    4218:	3e 81       	ldd	r19, Y+6	; 0x06
    421a:	4f 81       	ldd	r20, Y+7	; 0x07
    421c:	58 85       	ldd	r21, Y+8	; 0x08
    421e:	89 81       	ldd	r24, Y+1	; 0x01
    4220:	9a 81       	ldd	r25, Y+2	; 0x02
    4222:	ab 81       	ldd	r26, Y+3	; 0x03
    4224:	bc 81       	ldd	r27, Y+4	; 0x04
    4226:	bc 01       	movw	r22, r24
    4228:	cd 01       	movw	r24, r26
    422a:	0e 94 44 2b 	call	0x5688	; 0x5688 <nm_spi_write_reg>
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    422e:	28 96       	adiw	r28, 0x08	; 8
    4230:	cd bf       	out	0x3d, r28	; 61
    4232:	de bf       	out	0x3e, r29	; 62
    4234:	df 91       	pop	r29
    4236:	cf 91       	pop	r28
    4238:	08 95       	ret

0000423a <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    423a:	cf 93       	push	r28
    423c:	df 93       	push	r29
    423e:	cd b7       	in	r28, 0x3d	; 61
    4240:	de b7       	in	r29, 0x3e	; 62
    4242:	28 97       	sbiw	r28, 0x08	; 8
    4244:	cd bf       	out	0x3d, r28	; 61
    4246:	de bf       	out	0x3e, r29	; 62
    4248:	69 83       	std	Y+1, r22	; 0x01
    424a:	7a 83       	std	Y+2, r23	; 0x02
    424c:	8b 83       	std	Y+3, r24	; 0x03
    424e:	9c 83       	std	Y+4, r25	; 0x04
    4250:	4d 83       	std	Y+5, r20	; 0x05
    4252:	5e 83       	std	Y+6, r21	; 0x06
    4254:	2f 83       	std	Y+7, r18	; 0x07
    4256:	38 87       	std	Y+8, r19	; 0x08
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    4258:	2f 81       	ldd	r18, Y+7	; 0x07
    425a:	38 85       	ldd	r19, Y+8	; 0x08
    425c:	4d 81       	ldd	r20, Y+5	; 0x05
    425e:	5e 81       	ldd	r21, Y+6	; 0x06
    4260:	89 81       	ldd	r24, Y+1	; 0x01
    4262:	9a 81       	ldd	r25, Y+2	; 0x02
    4264:	ab 81       	ldd	r26, Y+3	; 0x03
    4266:	bc 81       	ldd	r27, Y+4	; 0x04
    4268:	bc 01       	movw	r22, r24
    426a:	cd 01       	movw	r24, r26
    426c:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <nm_spi_read_block>
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    4270:	28 96       	adiw	r28, 0x08	; 8
    4272:	cd bf       	out	0x3d, r28	; 61
    4274:	de bf       	out	0x3e, r29	; 62
    4276:	df 91       	pop	r29
    4278:	cf 91       	pop	r28
    427a:	08 95       	ret

0000427c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    427c:	ef 92       	push	r14
    427e:	ff 92       	push	r15
    4280:	0f 93       	push	r16
    4282:	1f 93       	push	r17
    4284:	cf 93       	push	r28
    4286:	df 93       	push	r29
    4288:	cd b7       	in	r28, 0x3d	; 61
    428a:	de b7       	in	r29, 0x3e	; 62
    428c:	61 97       	sbiw	r28, 0x11	; 17
    428e:	cd bf       	out	0x3d, r28	; 61
    4290:	de bf       	out	0x3e, r29	; 62
    4292:	68 87       	std	Y+8, r22	; 0x08
    4294:	79 87       	std	Y+9, r23	; 0x09
    4296:	8a 87       	std	Y+10, r24	; 0x0a
    4298:	9b 87       	std	Y+11, r25	; 0x0b
    429a:	4c 87       	std	Y+12, r20	; 0x0c
    429c:	5d 87       	std	Y+13, r21	; 0x0d
    429e:	0e 87       	std	Y+14, r16	; 0x0e
    42a0:	1f 87       	std	Y+15, r17	; 0x0f
    42a2:	28 8b       	std	Y+16, r18	; 0x10
    42a4:	39 8b       	std	Y+17, r19	; 0x11
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    42a6:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <egstrNmBusCapabilities>
    42aa:	90 91 43 28 	lds	r25, 0x2843	; 0x802843 <egstrNmBusCapabilities+0x1>
    42ae:	08 97       	sbiw	r24, 0x08	; 8
    42b0:	8e 83       	std	Y+6, r24	; 0x06
    42b2:	9f 83       	std	Y+7, r25	; 0x07
	uint32 off = 0;
    42b4:	19 82       	std	Y+1, r1	; 0x01
    42b6:	1a 82       	std	Y+2, r1	; 0x02
    42b8:	1b 82       	std	Y+3, r1	; 0x03
    42ba:	1c 82       	std	Y+4, r1	; 0x04
	sint8 s8Ret = M2M_SUCCESS;
    42bc:	1d 82       	std	Y+5, r1	; 0x05

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    42be:	8e 81       	ldd	r24, Y+6	; 0x06
    42c0:	9f 81       	ldd	r25, Y+7	; 0x07
    42c2:	9c 01       	movw	r18, r24
    42c4:	40 e0       	ldi	r20, 0x00	; 0
    42c6:	50 e0       	ldi	r21, 0x00	; 0
    42c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    42ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    42cc:	a8 89       	ldd	r26, Y+16	; 0x10
    42ce:	b9 89       	ldd	r27, Y+17	; 0x11
    42d0:	28 17       	cp	r18, r24
    42d2:	39 07       	cpc	r19, r25
    42d4:	4a 07       	cpc	r20, r26
    42d6:	5b 07       	cpc	r21, r27
    42d8:	b8 f0       	brcs	.+46     	; 0x4308 <nm_read_block+0x8c>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    42da:	6e 85       	ldd	r22, Y+14	; 0x0e
    42dc:	7f 85       	ldd	r23, Y+15	; 0x0f
    42de:	89 81       	ldd	r24, Y+1	; 0x01
    42e0:	9a 81       	ldd	r25, Y+2	; 0x02
    42e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    42e4:	3d 85       	ldd	r19, Y+13	; 0x0d
    42e6:	a9 01       	movw	r20, r18
    42e8:	48 0f       	add	r20, r24
    42ea:	59 1f       	adc	r21, r25
    42ec:	88 85       	ldd	r24, Y+8	; 0x08
    42ee:	99 85       	ldd	r25, Y+9	; 0x09
    42f0:	aa 85       	ldd	r26, Y+10	; 0x0a
    42f2:	bb 85       	ldd	r27, Y+11	; 0x0b
    42f4:	9b 01       	movw	r18, r22
    42f6:	bc 01       	movw	r22, r24
    42f8:	cd 01       	movw	r24, r26
    42fa:	0e 94 1d 21 	call	0x423a	; 0x423a <p_nm_read_block>
    42fe:	98 2f       	mov	r25, r24
    4300:	8d 81       	ldd	r24, Y+5	; 0x05
    4302:	89 0f       	add	r24, r25
    4304:	8d 83       	std	Y+5, r24	; 0x05
			break;
    4306:	51 c0       	rjmp	.+162    	; 0x43aa <nm_read_block+0x12e>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    4308:	89 81       	ldd	r24, Y+1	; 0x01
    430a:	9a 81       	ldd	r25, Y+2	; 0x02
    430c:	2c 85       	ldd	r18, Y+12	; 0x0c
    430e:	3d 85       	ldd	r19, Y+13	; 0x0d
    4310:	a9 01       	movw	r20, r18
    4312:	48 0f       	add	r20, r24
    4314:	59 1f       	adc	r21, r25
    4316:	2e 81       	ldd	r18, Y+6	; 0x06
    4318:	3f 81       	ldd	r19, Y+7	; 0x07
    431a:	88 85       	ldd	r24, Y+8	; 0x08
    431c:	99 85       	ldd	r25, Y+9	; 0x09
    431e:	aa 85       	ldd	r26, Y+10	; 0x0a
    4320:	bb 85       	ldd	r27, Y+11	; 0x0b
    4322:	bc 01       	movw	r22, r24
    4324:	cd 01       	movw	r24, r26
    4326:	0e 94 1d 21 	call	0x423a	; 0x423a <p_nm_read_block>
    432a:	98 2f       	mov	r25, r24
    432c:	8d 81       	ldd	r24, Y+5	; 0x05
    432e:	89 0f       	add	r24, r25
    4330:	8d 83       	std	Y+5, r24	; 0x05
			if(M2M_SUCCESS != s8Ret) break;
    4332:	8d 81       	ldd	r24, Y+5	; 0x05
    4334:	88 23       	and	r24, r24
    4336:	c1 f5       	brne	.+112    	; 0x43a8 <nm_read_block+0x12c>
			u32Sz -= u16MaxTrxSz;
    4338:	8e 81       	ldd	r24, Y+6	; 0x06
    433a:	9f 81       	ldd	r25, Y+7	; 0x07
    433c:	cc 01       	movw	r24, r24
    433e:	a0 e0       	ldi	r26, 0x00	; 0
    4340:	b0 e0       	ldi	r27, 0x00	; 0
    4342:	2e 85       	ldd	r18, Y+14	; 0x0e
    4344:	3f 85       	ldd	r19, Y+15	; 0x0f
    4346:	48 89       	ldd	r20, Y+16	; 0x10
    4348:	59 89       	ldd	r21, Y+17	; 0x11
    434a:	79 01       	movw	r14, r18
    434c:	8a 01       	movw	r16, r20
    434e:	e8 1a       	sub	r14, r24
    4350:	f9 0a       	sbc	r15, r25
    4352:	0a 0b       	sbc	r16, r26
    4354:	1b 0b       	sbc	r17, r27
    4356:	d8 01       	movw	r26, r16
    4358:	c7 01       	movw	r24, r14
    435a:	8e 87       	std	Y+14, r24	; 0x0e
    435c:	9f 87       	std	Y+15, r25	; 0x0f
    435e:	a8 8b       	std	Y+16, r26	; 0x10
    4360:	b9 8b       	std	Y+17, r27	; 0x11
			off += u16MaxTrxSz;
    4362:	8e 81       	ldd	r24, Y+6	; 0x06
    4364:	9f 81       	ldd	r25, Y+7	; 0x07
    4366:	cc 01       	movw	r24, r24
    4368:	a0 e0       	ldi	r26, 0x00	; 0
    436a:	b0 e0       	ldi	r27, 0x00	; 0
    436c:	29 81       	ldd	r18, Y+1	; 0x01
    436e:	3a 81       	ldd	r19, Y+2	; 0x02
    4370:	4b 81       	ldd	r20, Y+3	; 0x03
    4372:	5c 81       	ldd	r21, Y+4	; 0x04
    4374:	82 0f       	add	r24, r18
    4376:	93 1f       	adc	r25, r19
    4378:	a4 1f       	adc	r26, r20
    437a:	b5 1f       	adc	r27, r21
    437c:	89 83       	std	Y+1, r24	; 0x01
    437e:	9a 83       	std	Y+2, r25	; 0x02
    4380:	ab 83       	std	Y+3, r26	; 0x03
    4382:	bc 83       	std	Y+4, r27	; 0x04
			u32Addr += u16MaxTrxSz;
    4384:	8e 81       	ldd	r24, Y+6	; 0x06
    4386:	9f 81       	ldd	r25, Y+7	; 0x07
    4388:	cc 01       	movw	r24, r24
    438a:	a0 e0       	ldi	r26, 0x00	; 0
    438c:	b0 e0       	ldi	r27, 0x00	; 0
    438e:	28 85       	ldd	r18, Y+8	; 0x08
    4390:	39 85       	ldd	r19, Y+9	; 0x09
    4392:	4a 85       	ldd	r20, Y+10	; 0x0a
    4394:	5b 85       	ldd	r21, Y+11	; 0x0b
    4396:	82 0f       	add	r24, r18
    4398:	93 1f       	adc	r25, r19
    439a:	a4 1f       	adc	r26, r20
    439c:	b5 1f       	adc	r27, r21
    439e:	88 87       	std	Y+8, r24	; 0x08
    43a0:	99 87       	std	Y+9, r25	; 0x09
    43a2:	aa 87       	std	Y+10, r26	; 0x0a
    43a4:	bb 87       	std	Y+11, r27	; 0x0b
		}
	}
    43a6:	8b cf       	rjmp	.-234    	; 0x42be <nm_read_block+0x42>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    43a8:	00 00       	nop
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    43aa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    43ac:	61 96       	adiw	r28, 0x11	; 17
    43ae:	cd bf       	out	0x3d, r28	; 61
    43b0:	de bf       	out	0x3e, r29	; 62
    43b2:	df 91       	pop	r29
    43b4:	cf 91       	pop	r28
    43b6:	1f 91       	pop	r17
    43b8:	0f 91       	pop	r16
    43ba:	ff 90       	pop	r15
    43bc:	ef 90       	pop	r14
    43be:	08 95       	ret

000043c0 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    43c0:	cf 93       	push	r28
    43c2:	df 93       	push	r29
    43c4:	cd b7       	in	r28, 0x3d	; 61
    43c6:	de b7       	in	r29, 0x3e	; 62
    43c8:	28 97       	sbiw	r28, 0x08	; 8
    43ca:	cd bf       	out	0x3d, r28	; 61
    43cc:	de bf       	out	0x3e, r29	; 62
    43ce:	69 83       	std	Y+1, r22	; 0x01
    43d0:	7a 83       	std	Y+2, r23	; 0x02
    43d2:	8b 83       	std	Y+3, r24	; 0x03
    43d4:	9c 83       	std	Y+4, r25	; 0x04
    43d6:	4d 83       	std	Y+5, r20	; 0x05
    43d8:	5e 83       	std	Y+6, r21	; 0x06
    43da:	2f 83       	std	Y+7, r18	; 0x07
    43dc:	38 87       	std	Y+8, r19	; 0x08
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    43de:	2f 81       	ldd	r18, Y+7	; 0x07
    43e0:	38 85       	ldd	r19, Y+8	; 0x08
    43e2:	4d 81       	ldd	r20, Y+5	; 0x05
    43e4:	5e 81       	ldd	r21, Y+6	; 0x06
    43e6:	89 81       	ldd	r24, Y+1	; 0x01
    43e8:	9a 81       	ldd	r25, Y+2	; 0x02
    43ea:	ab 81       	ldd	r26, Y+3	; 0x03
    43ec:	bc 81       	ldd	r27, Y+4	; 0x04
    43ee:	bc 01       	movw	r22, r24
    43f0:	cd 01       	movw	r24, r26
    43f2:	0e 94 98 2b 	call	0x5730	; 0x5730 <nm_spi_write_block>
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    43f6:	28 96       	adiw	r28, 0x08	; 8
    43f8:	cd bf       	out	0x3d, r28	; 61
    43fa:	de bf       	out	0x3e, r29	; 62
    43fc:	df 91       	pop	r29
    43fe:	cf 91       	pop	r28
    4400:	08 95       	ret

00004402 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    4402:	ef 92       	push	r14
    4404:	ff 92       	push	r15
    4406:	0f 93       	push	r16
    4408:	1f 93       	push	r17
    440a:	cf 93       	push	r28
    440c:	df 93       	push	r29
    440e:	cd b7       	in	r28, 0x3d	; 61
    4410:	de b7       	in	r29, 0x3e	; 62
    4412:	61 97       	sbiw	r28, 0x11	; 17
    4414:	cd bf       	out	0x3d, r28	; 61
    4416:	de bf       	out	0x3e, r29	; 62
    4418:	68 87       	std	Y+8, r22	; 0x08
    441a:	79 87       	std	Y+9, r23	; 0x09
    441c:	8a 87       	std	Y+10, r24	; 0x0a
    441e:	9b 87       	std	Y+11, r25	; 0x0b
    4420:	4c 87       	std	Y+12, r20	; 0x0c
    4422:	5d 87       	std	Y+13, r21	; 0x0d
    4424:	0e 87       	std	Y+14, r16	; 0x0e
    4426:	1f 87       	std	Y+15, r17	; 0x0f
    4428:	28 8b       	std	Y+16, r18	; 0x10
    442a:	39 8b       	std	Y+17, r19	; 0x11
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    442c:	80 91 42 28 	lds	r24, 0x2842	; 0x802842 <egstrNmBusCapabilities>
    4430:	90 91 43 28 	lds	r25, 0x2843	; 0x802843 <egstrNmBusCapabilities+0x1>
    4434:	08 97       	sbiw	r24, 0x08	; 8
    4436:	8e 83       	std	Y+6, r24	; 0x06
    4438:	9f 83       	std	Y+7, r25	; 0x07
	uint32 off = 0;
    443a:	19 82       	std	Y+1, r1	; 0x01
    443c:	1a 82       	std	Y+2, r1	; 0x02
    443e:	1b 82       	std	Y+3, r1	; 0x03
    4440:	1c 82       	std	Y+4, r1	; 0x04
	sint8 s8Ret = M2M_SUCCESS;
    4442:	1d 82       	std	Y+5, r1	; 0x05

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    4444:	8e 81       	ldd	r24, Y+6	; 0x06
    4446:	9f 81       	ldd	r25, Y+7	; 0x07
    4448:	9c 01       	movw	r18, r24
    444a:	40 e0       	ldi	r20, 0x00	; 0
    444c:	50 e0       	ldi	r21, 0x00	; 0
    444e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4450:	9f 85       	ldd	r25, Y+15	; 0x0f
    4452:	a8 89       	ldd	r26, Y+16	; 0x10
    4454:	b9 89       	ldd	r27, Y+17	; 0x11
    4456:	28 17       	cp	r18, r24
    4458:	39 07       	cpc	r19, r25
    445a:	4a 07       	cpc	r20, r26
    445c:	5b 07       	cpc	r21, r27
    445e:	b8 f0       	brcs	.+46     	; 0x448e <nm_write_block+0x8c>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    4460:	6e 85       	ldd	r22, Y+14	; 0x0e
    4462:	7f 85       	ldd	r23, Y+15	; 0x0f
    4464:	89 81       	ldd	r24, Y+1	; 0x01
    4466:	9a 81       	ldd	r25, Y+2	; 0x02
    4468:	2c 85       	ldd	r18, Y+12	; 0x0c
    446a:	3d 85       	ldd	r19, Y+13	; 0x0d
    446c:	a9 01       	movw	r20, r18
    446e:	48 0f       	add	r20, r24
    4470:	59 1f       	adc	r21, r25
    4472:	88 85       	ldd	r24, Y+8	; 0x08
    4474:	99 85       	ldd	r25, Y+9	; 0x09
    4476:	aa 85       	ldd	r26, Y+10	; 0x0a
    4478:	bb 85       	ldd	r27, Y+11	; 0x0b
    447a:	9b 01       	movw	r18, r22
    447c:	bc 01       	movw	r22, r24
    447e:	cd 01       	movw	r24, r26
    4480:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <p_nm_write_block>
    4484:	98 2f       	mov	r25, r24
    4486:	8d 81       	ldd	r24, Y+5	; 0x05
    4488:	89 0f       	add	r24, r25
    448a:	8d 83       	std	Y+5, r24	; 0x05
			break;
    448c:	51 c0       	rjmp	.+162    	; 0x4530 <nm_write_block+0x12e>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    448e:	89 81       	ldd	r24, Y+1	; 0x01
    4490:	9a 81       	ldd	r25, Y+2	; 0x02
    4492:	2c 85       	ldd	r18, Y+12	; 0x0c
    4494:	3d 85       	ldd	r19, Y+13	; 0x0d
    4496:	a9 01       	movw	r20, r18
    4498:	48 0f       	add	r20, r24
    449a:	59 1f       	adc	r21, r25
    449c:	2e 81       	ldd	r18, Y+6	; 0x06
    449e:	3f 81       	ldd	r19, Y+7	; 0x07
    44a0:	88 85       	ldd	r24, Y+8	; 0x08
    44a2:	99 85       	ldd	r25, Y+9	; 0x09
    44a4:	aa 85       	ldd	r26, Y+10	; 0x0a
    44a6:	bb 85       	ldd	r27, Y+11	; 0x0b
    44a8:	bc 01       	movw	r22, r24
    44aa:	cd 01       	movw	r24, r26
    44ac:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <p_nm_write_block>
    44b0:	98 2f       	mov	r25, r24
    44b2:	8d 81       	ldd	r24, Y+5	; 0x05
    44b4:	89 0f       	add	r24, r25
    44b6:	8d 83       	std	Y+5, r24	; 0x05
			if(M2M_SUCCESS != s8Ret) break;
    44b8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ba:	88 23       	and	r24, r24
    44bc:	c1 f5       	brne	.+112    	; 0x452e <nm_write_block+0x12c>
			u32Sz -= u16MaxTrxSz;
    44be:	8e 81       	ldd	r24, Y+6	; 0x06
    44c0:	9f 81       	ldd	r25, Y+7	; 0x07
    44c2:	cc 01       	movw	r24, r24
    44c4:	a0 e0       	ldi	r26, 0x00	; 0
    44c6:	b0 e0       	ldi	r27, 0x00	; 0
    44c8:	2e 85       	ldd	r18, Y+14	; 0x0e
    44ca:	3f 85       	ldd	r19, Y+15	; 0x0f
    44cc:	48 89       	ldd	r20, Y+16	; 0x10
    44ce:	59 89       	ldd	r21, Y+17	; 0x11
    44d0:	79 01       	movw	r14, r18
    44d2:	8a 01       	movw	r16, r20
    44d4:	e8 1a       	sub	r14, r24
    44d6:	f9 0a       	sbc	r15, r25
    44d8:	0a 0b       	sbc	r16, r26
    44da:	1b 0b       	sbc	r17, r27
    44dc:	d8 01       	movw	r26, r16
    44de:	c7 01       	movw	r24, r14
    44e0:	8e 87       	std	Y+14, r24	; 0x0e
    44e2:	9f 87       	std	Y+15, r25	; 0x0f
    44e4:	a8 8b       	std	Y+16, r26	; 0x10
    44e6:	b9 8b       	std	Y+17, r27	; 0x11
			off += u16MaxTrxSz;
    44e8:	8e 81       	ldd	r24, Y+6	; 0x06
    44ea:	9f 81       	ldd	r25, Y+7	; 0x07
    44ec:	cc 01       	movw	r24, r24
    44ee:	a0 e0       	ldi	r26, 0x00	; 0
    44f0:	b0 e0       	ldi	r27, 0x00	; 0
    44f2:	29 81       	ldd	r18, Y+1	; 0x01
    44f4:	3a 81       	ldd	r19, Y+2	; 0x02
    44f6:	4b 81       	ldd	r20, Y+3	; 0x03
    44f8:	5c 81       	ldd	r21, Y+4	; 0x04
    44fa:	82 0f       	add	r24, r18
    44fc:	93 1f       	adc	r25, r19
    44fe:	a4 1f       	adc	r26, r20
    4500:	b5 1f       	adc	r27, r21
    4502:	89 83       	std	Y+1, r24	; 0x01
    4504:	9a 83       	std	Y+2, r25	; 0x02
    4506:	ab 83       	std	Y+3, r26	; 0x03
    4508:	bc 83       	std	Y+4, r27	; 0x04
			u32Addr += u16MaxTrxSz;
    450a:	8e 81       	ldd	r24, Y+6	; 0x06
    450c:	9f 81       	ldd	r25, Y+7	; 0x07
    450e:	cc 01       	movw	r24, r24
    4510:	a0 e0       	ldi	r26, 0x00	; 0
    4512:	b0 e0       	ldi	r27, 0x00	; 0
    4514:	28 85       	ldd	r18, Y+8	; 0x08
    4516:	39 85       	ldd	r19, Y+9	; 0x09
    4518:	4a 85       	ldd	r20, Y+10	; 0x0a
    451a:	5b 85       	ldd	r21, Y+11	; 0x0b
    451c:	82 0f       	add	r24, r18
    451e:	93 1f       	adc	r25, r19
    4520:	a4 1f       	adc	r26, r20
    4522:	b5 1f       	adc	r27, r21
    4524:	88 87       	std	Y+8, r24	; 0x08
    4526:	99 87       	std	Y+9, r25	; 0x09
    4528:	aa 87       	std	Y+10, r26	; 0x0a
    452a:	bb 87       	std	Y+11, r27	; 0x0b
		}
	}
    452c:	8b cf       	rjmp	.-234    	; 0x4444 <nm_write_block+0x42>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    452e:	00 00       	nop
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    4530:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4532:	61 96       	adiw	r28, 0x11	; 17
    4534:	cd bf       	out	0x3d, r28	; 61
    4536:	de bf       	out	0x3e, r29	; 62
    4538:	df 91       	pop	r29
    453a:	cf 91       	pop	r28
    453c:	1f 91       	pop	r17
    453e:	0f 91       	pop	r16
    4540:	ff 90       	pop	r15
    4542:	ef 90       	pop	r14
    4544:	08 95       	ret

00004546 <nm_get_firmware_full_info>:
	/*disable all interrupt in ROM (to disable uart) in 2b0 chip*/
	nm_write_reg(0x20300,0);

ERR1:
	return ret;
}
    4546:	0f 93       	push	r16
    4548:	1f 93       	push	r17
    454a:	cf 93       	push	r28
    454c:	df 93       	push	r29
    454e:	cd b7       	in	r28, 0x3d	; 61
    4550:	de b7       	in	r29, 0x3e	; 62
    4552:	65 97       	sbiw	r28, 0x15	; 21
    4554:	cd bf       	out	0x3d, r28	; 61
    4556:	de bf       	out	0x3e, r29	; 62
    4558:	8c 8b       	std	Y+20, r24	; 0x14
    455a:	9d 8b       	std	Y+21, r25	; 0x15
    455c:	18 86       	std	Y+8, r1	; 0x08
    455e:	19 86       	std	Y+9, r1	; 0x09
    4560:	1a 86       	std	Y+10, r1	; 0x0a
    4562:	1b 86       	std	Y+11, r1	; 0x0b
    4564:	19 82       	std	Y+1, r1	; 0x01
    4566:	28 e0       	ldi	r18, 0x08	; 8
    4568:	ce 01       	movw	r24, r28
    456a:	0c 96       	adiw	r24, 0x0c	; 12
    456c:	fc 01       	movw	r30, r24
    456e:	32 2f       	mov	r19, r18
    4570:	11 92       	st	Z+, r1
    4572:	3a 95       	dec	r19
    4574:	e9 f7       	brne	.-6      	; 0x4570 <nm_get_firmware_full_info+0x2a>
    4576:	8c 89       	ldd	r24, Y+20	; 0x14
    4578:	9d 89       	ldd	r25, Y+21	; 0x15
    457a:	89 2b       	or	r24, r25
    457c:	09 f4       	brne	.+2      	; 0x4580 <nm_get_firmware_full_info+0x3a>
    457e:	d6 c0       	rjmp	.+428    	; 0x472c <nm_get_firmware_full_info+0x1e6>
    4580:	8c 89       	ldd	r24, Y+20	; 0x14
    4582:	9d 89       	ldd	r25, Y+21	; 0x15
    4584:	26 e2       	ldi	r18, 0x26	; 38
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	40 e0       	ldi	r20, 0x00	; 0
    458a:	50 e0       	ldi	r21, 0x00	; 0
    458c:	60 e0       	ldi	r22, 0x00	; 0
    458e:	0e 94 a5 10 	call	0x214a	; 0x214a <m2m_memset>
    4592:	ce 01       	movw	r24, r28
    4594:	08 96       	adiw	r24, 0x08	; 8
    4596:	ac 01       	movw	r20, r24
    4598:	68 e0       	ldi	r22, 0x08	; 8
    459a:	70 e0       	ldi	r23, 0x00	; 0
    459c:	8c e0       	ldi	r24, 0x0C	; 12
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    45a4:	89 83       	std	Y+1, r24	; 0x01
    45a6:	89 81       	ldd	r24, Y+1	; 0x01
    45a8:	88 23       	and	r24, r24
    45aa:	09 f0       	breq	.+2      	; 0x45ae <nm_get_firmware_full_info+0x68>
    45ac:	bf c0       	rjmp	.+382    	; 0x472c <nm_get_firmware_full_info+0x1e6>
    45ae:	88 85       	ldd	r24, Y+8	; 0x08
    45b0:	99 85       	ldd	r25, Y+9	; 0x09
    45b2:	aa 85       	ldd	r26, Y+10	; 0x0a
    45b4:	bb 85       	ldd	r27, Y+11	; 0x0b
    45b6:	89 2b       	or	r24, r25
    45b8:	8a 2b       	or	r24, r26
    45ba:	8b 2b       	or	r24, r27
    45bc:	09 f4       	brne	.+2      	; 0x45c0 <nm_get_firmware_full_info+0x7a>
    45be:	b4 c0       	rjmp	.+360    	; 0x4728 <nm_get_firmware_full_info+0x1e2>
    45c0:	88 85       	ldd	r24, Y+8	; 0x08
    45c2:	99 85       	ldd	r25, Y+9	; 0x09
    45c4:	aa 85       	ldd	r26, Y+10	; 0x0a
    45c6:	bb 85       	ldd	r27, Y+11	; 0x0b
    45c8:	a3 60       	ori	r26, 0x03	; 3
    45ca:	ae 01       	movw	r20, r28
    45cc:	44 5f       	subi	r20, 0xF4	; 244
    45ce:	5f 4f       	sbci	r21, 0xFF	; 255
    45d0:	08 e0       	ldi	r16, 0x08	; 8
    45d2:	10 e0       	ldi	r17, 0x00	; 0
    45d4:	20 e0       	ldi	r18, 0x00	; 0
    45d6:	30 e0       	ldi	r19, 0x00	; 0
    45d8:	bc 01       	movw	r22, r24
    45da:	cd 01       	movw	r24, r26
    45dc:	0e 94 3e 21 	call	0x427c	; 0x427c <nm_read_block>
    45e0:	89 83       	std	Y+1, r24	; 0x01
    45e2:	89 81       	ldd	r24, Y+1	; 0x01
    45e4:	88 23       	and	r24, r24
    45e6:	09 f0       	breq	.+2      	; 0x45ea <nm_get_firmware_full_info+0xa4>
    45e8:	a1 c0       	rjmp	.+322    	; 0x472c <nm_get_firmware_full_info+0x1e6>
    45ea:	88 89       	ldd	r24, Y+16	; 0x10
    45ec:	99 89       	ldd	r25, Y+17	; 0x11
    45ee:	aa 89       	ldd	r26, Y+18	; 0x12
    45f0:	bb 89       	ldd	r27, Y+19	; 0x13
    45f2:	88 87       	std	Y+8, r24	; 0x08
    45f4:	99 87       	std	Y+9, r25	; 0x09
    45f6:	aa 87       	std	Y+10, r26	; 0x0a
    45f8:	bb 87       	std	Y+11, r27	; 0x0b
    45fa:	88 85       	ldd	r24, Y+8	; 0x08
    45fc:	99 85       	ldd	r25, Y+9	; 0x09
    45fe:	aa 85       	ldd	r26, Y+10	; 0x0a
    4600:	bb 85       	ldd	r27, Y+11	; 0x0b
    4602:	aa 27       	eor	r26, r26
    4604:	bb 27       	eor	r27, r27
    4606:	88 87       	std	Y+8, r24	; 0x08
    4608:	99 87       	std	Y+9, r25	; 0x09
    460a:	aa 87       	std	Y+10, r26	; 0x0a
    460c:	bb 87       	std	Y+11, r27	; 0x0b
    460e:	88 85       	ldd	r24, Y+8	; 0x08
    4610:	99 85       	ldd	r25, Y+9	; 0x09
    4612:	aa 85       	ldd	r26, Y+10	; 0x0a
    4614:	bb 85       	ldd	r27, Y+11	; 0x0b
    4616:	89 2b       	or	r24, r25
    4618:	8a 2b       	or	r24, r26
    461a:	8b 2b       	or	r24, r27
    461c:	09 f4       	brne	.+2      	; 0x4620 <nm_get_firmware_full_info+0xda>
    461e:	81 c0       	rjmp	.+258    	; 0x4722 <nm_get_firmware_full_info+0x1dc>
    4620:	88 85       	ldd	r24, Y+8	; 0x08
    4622:	99 85       	ldd	r25, Y+9	; 0x09
    4624:	aa 85       	ldd	r26, Y+10	; 0x0a
    4626:	bb 85       	ldd	r27, Y+11	; 0x0b
    4628:	a3 60       	ori	r26, 0x03	; 3
    462a:	4c 89       	ldd	r20, Y+20	; 0x14
    462c:	5d 89       	ldd	r21, Y+21	; 0x15
    462e:	06 e2       	ldi	r16, 0x26	; 38
    4630:	10 e0       	ldi	r17, 0x00	; 0
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	bc 01       	movw	r22, r24
    4638:	cd 01       	movw	r24, r26
    463a:	0e 94 3e 21 	call	0x427c	; 0x427c <nm_read_block>
    463e:	89 83       	std	Y+1, r24	; 0x01
    4640:	89 81       	ldd	r24, Y+1	; 0x01
    4642:	88 23       	and	r24, r24
    4644:	09 f0       	breq	.+2      	; 0x4648 <nm_get_firmware_full_info+0x102>
    4646:	72 c0       	rjmp	.+228    	; 0x472c <nm_get_firmware_full_info+0x1e6>
    4648:	8c 89       	ldd	r24, Y+20	; 0x14
    464a:	9d 89       	ldd	r25, Y+21	; 0x15
    464c:	fc 01       	movw	r30, r24
    464e:	84 81       	ldd	r24, Z+4	; 0x04
    4650:	88 2f       	mov	r24, r24
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	38 2f       	mov	r19, r24
    4656:	22 27       	eor	r18, r18
    4658:	8c 89       	ldd	r24, Y+20	; 0x14
    465a:	9d 89       	ldd	r25, Y+21	; 0x15
    465c:	fc 01       	movw	r30, r24
    465e:	85 81       	ldd	r24, Z+5	; 0x05
    4660:	88 2f       	mov	r24, r24
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	82 95       	swap	r24
    4666:	92 95       	swap	r25
    4668:	90 7f       	andi	r25, 0xF0	; 240
    466a:	98 27       	eor	r25, r24
    466c:	80 7f       	andi	r24, 0xF0	; 240
    466e:	98 27       	eor	r25, r24
    4670:	99 27       	eor	r25, r25
    4672:	28 2b       	or	r18, r24
    4674:	39 2b       	or	r19, r25
    4676:	8c 89       	ldd	r24, Y+20	; 0x14
    4678:	9d 89       	ldd	r25, Y+21	; 0x15
    467a:	fc 01       	movw	r30, r24
    467c:	86 81       	ldd	r24, Z+6	; 0x06
    467e:	88 2f       	mov	r24, r24
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	8f 70       	andi	r24, 0x0F	; 15
    4684:	99 27       	eor	r25, r25
    4686:	82 2b       	or	r24, r18
    4688:	93 2b       	or	r25, r19
    468a:	8a 83       	std	Y+2, r24	; 0x02
    468c:	9b 83       	std	Y+3, r25	; 0x03
    468e:	82 e5       	ldi	r24, 0x52	; 82
    4690:	93 e1       	ldi	r25, 0x13	; 19
    4692:	8c 83       	std	Y+4, r24	; 0x04
    4694:	9d 83       	std	Y+5, r25	; 0x05
    4696:	8c 89       	ldd	r24, Y+20	; 0x14
    4698:	9d 89       	ldd	r25, Y+21	; 0x15
    469a:	fc 01       	movw	r30, r24
    469c:	87 81       	ldd	r24, Z+7	; 0x07
    469e:	88 2f       	mov	r24, r24
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	38 2f       	mov	r19, r24
    46a4:	22 27       	eor	r18, r18
    46a6:	8c 89       	ldd	r24, Y+20	; 0x14
    46a8:	9d 89       	ldd	r25, Y+21	; 0x15
    46aa:	fc 01       	movw	r30, r24
    46ac:	80 85       	ldd	r24, Z+8	; 0x08
    46ae:	88 2f       	mov	r24, r24
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	82 95       	swap	r24
    46b4:	92 95       	swap	r25
    46b6:	90 7f       	andi	r25, 0xF0	; 240
    46b8:	98 27       	eor	r25, r24
    46ba:	80 7f       	andi	r24, 0xF0	; 240
    46bc:	98 27       	eor	r25, r24
    46be:	99 27       	eor	r25, r25
    46c0:	28 2b       	or	r18, r24
    46c2:	39 2b       	or	r19, r25
    46c4:	8c 89       	ldd	r24, Y+20	; 0x14
    46c6:	9d 89       	ldd	r25, Y+21	; 0x15
    46c8:	fc 01       	movw	r30, r24
    46ca:	81 85       	ldd	r24, Z+9	; 0x09
    46cc:	88 2f       	mov	r24, r24
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	8f 70       	andi	r24, 0x0F	; 15
    46d2:	99 27       	eor	r25, r25
    46d4:	82 2b       	or	r24, r18
    46d6:	93 2b       	or	r25, r19
    46d8:	8e 83       	std	Y+6, r24	; 0x06
    46da:	9f 83       	std	Y+7, r25	; 0x07
    46dc:	8a 81       	ldd	r24, Y+2	; 0x02
    46de:	9b 81       	ldd	r25, Y+3	; 0x03
    46e0:	89 2b       	or	r24, r25
    46e2:	41 f0       	breq	.+16     	; 0x46f4 <nm_get_firmware_full_info+0x1ae>
    46e4:	8e 81       	ldd	r24, Y+6	; 0x06
    46e6:	9f 81       	ldd	r25, Y+7	; 0x07
    46e8:	89 2b       	or	r24, r25
    46ea:	21 f0       	breq	.+8      	; 0x46f4 <nm_get_firmware_full_info+0x1ae>
    46ec:	8e 81       	ldd	r24, Y+6	; 0x06
    46ee:	9f 81       	ldd	r25, Y+7	; 0x07
    46f0:	89 2b       	or	r24, r25
    46f2:	19 f4       	brne	.+6      	; 0x46fa <nm_get_firmware_full_info+0x1b4>
    46f4:	84 ef       	ldi	r24, 0xF4	; 244
    46f6:	89 83       	std	Y+1, r24	; 0x01
    46f8:	19 c0       	rjmp	.+50     	; 0x472c <nm_get_firmware_full_info+0x1e6>
    46fa:	2c 81       	ldd	r18, Y+4	; 0x04
    46fc:	3d 81       	ldd	r19, Y+5	; 0x05
    46fe:	8e 81       	ldd	r24, Y+6	; 0x06
    4700:	9f 81       	ldd	r25, Y+7	; 0x07
    4702:	28 17       	cp	r18, r24
    4704:	39 07       	cpc	r19, r25
    4706:	18 f4       	brcc	.+6      	; 0x470e <nm_get_firmware_full_info+0x1c8>
    4708:	83 ef       	ldi	r24, 0xF3	; 243
    470a:	89 83       	std	Y+1, r24	; 0x01
    470c:	0f c0       	rjmp	.+30     	; 0x472c <nm_get_firmware_full_info+0x1e6>
    470e:	2c 81       	ldd	r18, Y+4	; 0x04
    4710:	3d 81       	ldd	r19, Y+5	; 0x05
    4712:	8a 81       	ldd	r24, Y+2	; 0x02
    4714:	9b 81       	ldd	r25, Y+3	; 0x03
    4716:	82 17       	cp	r24, r18
    4718:	93 07       	cpc	r25, r19
    471a:	40 f4       	brcc	.+16     	; 0x472c <nm_get_firmware_full_info+0x1e6>
    471c:	83 ef       	ldi	r24, 0xF3	; 243
    471e:	89 83       	std	Y+1, r24	; 0x01
    4720:	05 c0       	rjmp	.+10     	; 0x472c <nm_get_firmware_full_info+0x1e6>
    4722:	84 ef       	ldi	r24, 0xF4	; 244
    4724:	89 83       	std	Y+1, r24	; 0x01
    4726:	02 c0       	rjmp	.+4      	; 0x472c <nm_get_firmware_full_info+0x1e6>
    4728:	84 ef       	ldi	r24, 0xF4	; 244
    472a:	89 83       	std	Y+1, r24	; 0x01
    472c:	89 81       	ldd	r24, Y+1	; 0x01
    472e:	65 96       	adiw	r28, 0x15	; 21
    4730:	cd bf       	out	0x3d, r28	; 61
    4732:	de bf       	out	0x3e, r29	; 62
    4734:	df 91       	pop	r29
    4736:	cf 91       	pop	r28
    4738:	1f 91       	pop	r17
    473a:	0f 91       	pop	r16
    473c:	08 95       	ret

0000473e <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    473e:	cf 93       	push	r28
    4740:	df 93       	push	r29
    4742:	00 d0       	rcall	.+0      	; 0x4744 <nm_drv_init+0x6>
    4744:	00 d0       	rcall	.+0      	; 0x4746 <nm_drv_init+0x8>
    4746:	cd b7       	in	r28, 0x3d	; 61
    4748:	de b7       	in	r29, 0x3e	; 62
    474a:	8b 83       	std	Y+3, r24	; 0x03
    474c:	9c 83       	std	Y+4, r25	; 0x04
	sint8 ret = M2M_SUCCESS;
    474e:	19 82       	std	Y+1, r1	; 0x01
	uint8 u8Mode;
	
	if(NULL != arg) {
    4750:	8b 81       	ldd	r24, Y+3	; 0x03
    4752:	9c 81       	ldd	r25, Y+4	; 0x04
    4754:	89 2b       	or	r24, r25
    4756:	71 f0       	breq	.+28     	; 0x4774 <nm_drv_init+0x36>
		u8Mode = *((uint8 *)arg);
    4758:	8b 81       	ldd	r24, Y+3	; 0x03
    475a:	9c 81       	ldd	r25, Y+4	; 0x04
    475c:	fc 01       	movw	r30, r24
    475e:	80 81       	ld	r24, Z
    4760:	8a 83       	std	Y+2, r24	; 0x02
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    4762:	8a 81       	ldd	r24, Y+2	; 0x02
    4764:	88 23       	and	r24, r24
    4766:	19 f0       	breq	.+6      	; 0x476e <nm_drv_init+0x30>
    4768:	8a 81       	ldd	r24, Y+2	; 0x02
    476a:	85 30       	cpi	r24, 0x05	; 5
    476c:	28 f0       	brcs	.+10     	; 0x4778 <nm_drv_init+0x3a>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    476e:	81 e0       	ldi	r24, 0x01	; 1
    4770:	8a 83       	std	Y+2, r24	; 0x02
    4772:	02 c0       	rjmp	.+4      	; 0x4778 <nm_drv_init+0x3a>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    4774:	81 e0       	ldi	r24, 0x01	; 1
    4776:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	ret = nm_bus_iface_init(NULL);
    4778:	80 e0       	ldi	r24, 0x00	; 0
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	0e 94 93 20 	call	0x4126	; 0x4126 <nm_bus_iface_init>
    4780:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    4782:	89 81       	ldd	r24, Y+1	; 0x01
    4784:	88 23       	and	r24, r24
    4786:	31 f5       	brne	.+76     	; 0x47d4 <nm_drv_init+0x96>
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    4788:	0e 94 80 2a 	call	0x5500	; 0x5500 <nm_spi_init>
#endif
	ret = wait_for_bootrom(u8Mode);
    478c:	8a 81       	ldd	r24, Y+2	; 0x02
    478e:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <wait_for_bootrom>
    4792:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    4794:	89 81       	ldd	r24, Y+1	; 0x01
    4796:	88 23       	and	r24, r24
    4798:	a9 f4       	brne	.+42     	; 0x47c4 <nm_drv_init+0x86>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    479a:	8a 81       	ldd	r24, Y+2	; 0x02
    479c:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <wait_for_firmware_start>
    47a0:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    47a2:	89 81       	ldd	r24, Y+1	; 0x01
    47a4:	88 23       	and	r24, r24
    47a6:	81 f4       	brne	.+32     	; 0x47c8 <nm_drv_init+0x8a>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    47a8:	8a 81       	ldd	r24, Y+2	; 0x02
    47aa:	82 30       	cpi	r24, 0x02	; 2
    47ac:	a1 f0       	breq	.+40     	; 0x47d6 <nm_drv_init+0x98>
    47ae:	8a 81       	ldd	r24, Y+2	; 0x02
    47b0:	83 30       	cpi	r24, 0x03	; 3
    47b2:	89 f0       	breq	.+34     	; 0x47d6 <nm_drv_init+0x98>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    47b4:	0e 94 26 1c 	call	0x384c	; 0x384c <enable_interrupts>
    47b8:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    47ba:	89 81       	ldd	r24, Y+1	; 0x01
    47bc:	88 23       	and	r24, r24
    47be:	31 f4       	brne	.+12     	; 0x47cc <nm_drv_init+0x8e>
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
    47c0:	89 81       	ldd	r24, Y+1	; 0x01
    47c2:	0a c0       	rjmp	.+20     	; 0x47d8 <nm_drv_init+0x9a>
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
#endif
	ret = wait_for_bootrom(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    47c4:	00 00       	nop
    47c6:	03 c0       	rjmp	.+6      	; 0x47ce <nm_drv_init+0x90>
	}
		
	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    47c8:	00 00       	nop
    47ca:	01 c0       	rjmp	.+2      	; 0x47ce <nm_drv_init+0x90>
	}
	
	ret = enable_interrupts();
	if (M2M_SUCCESS != ret) {
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
    47cc:	00 00       	nop
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    47ce:	0e 94 a8 20 	call	0x4150	; 0x4150 <nm_bus_iface_deinit>
    47d2:	01 c0       	rjmp	.+2      	; 0x47d6 <nm_drv_init+0x98>
	}
	
	ret = nm_bus_iface_init(NULL);
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi start]: fail init bus\n");
		goto ERR1;
    47d4:	00 00       	nop
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
ERR1:
	return ret;
    47d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    47d8:	24 96       	adiw	r28, 0x04	; 4
    47da:	cd bf       	out	0x3d, r28	; 61
    47dc:	de bf       	out	0x3e, r29	; 62
    47de:	df 91       	pop	r29
    47e0:	cf 91       	pop	r28
    47e2:	08 95       	ret

000047e4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    47e4:	cf 93       	push	r28
    47e6:	df 93       	push	r29
    47e8:	00 d0       	rcall	.+0      	; 0x47ea <nm_drv_deinit+0x6>
    47ea:	1f 92       	push	r1
    47ec:	cd b7       	in	r28, 0x3d	; 61
    47ee:	de b7       	in	r29, 0x3e	; 62
    47f0:	8a 83       	std	Y+2, r24	; 0x02
    47f2:	9b 83       	std	Y+3, r25	; 0x03
	sint8 ret;

	ret = chip_deinit();
    47f4:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <chip_deinit>
    47f8:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    47fa:	89 81       	ldd	r24, Y+1	; 0x01
    47fc:	88 23       	and	r24, r24
    47fe:	81 f4       	brne	.+32     	; 0x4820 <nm_drv_deinit+0x3c>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    4800:	80 e0       	ldi	r24, 0x00	; 0
    4802:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <spi_flash_enable>
    4806:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    4808:	89 81       	ldd	r24, Y+1	; 0x01
    480a:	88 23       	and	r24, r24
    480c:	59 f4       	brne	.+22     	; 0x4824 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    480e:	0e 94 a8 20 	call	0x4150	; 0x4150 <nm_bus_iface_deinit>
    4812:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    4814:	89 81       	ldd	r24, Y+1	; 0x01
    4816:	88 23       	and	r24, r24
    4818:	39 f4       	brne	.+14     	; 0x4828 <nm_drv_deinit+0x44>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    481a:	0e 94 f0 2a 	call	0x55e0	; 0x55e0 <nm_spi_deinit>
    481e:	05 c0       	rjmp	.+10     	; 0x482a <nm_drv_deinit+0x46>
	sint8 ret;

	ret = chip_deinit();
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
    4820:	00 00       	nop
    4822:	03 c0       	rjmp	.+6      	; 0x482a <nm_drv_deinit+0x46>
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
    4824:	00 00       	nop
    4826:	01 c0       	rjmp	.+2      	; 0x482a <nm_drv_deinit+0x46>
	}

	ret = nm_bus_iface_deinit();
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
    4828:	00 00       	nop
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
#endif

ERR1:
	return ret;
    482a:	89 81       	ldd	r24, Y+1	; 0x01
}
    482c:	23 96       	adiw	r28, 0x03	; 3
    482e:	cd bf       	out	0x3d, r28	; 61
    4830:	de bf       	out	0x3e, r29	; 62
    4832:	df 91       	pop	r29
    4834:	cf 91       	pop	r28
    4836:	08 95       	ret

00004838 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    4838:	cf 93       	push	r28
    483a:	df 93       	push	r29
    483c:	cd b7       	in	r28, 0x3d	; 61
    483e:	de b7       	in	r29, 0x3e	; 62
    4840:	2a 97       	sbiw	r28, 0x0a	; 10
    4842:	cd bf       	out	0x3d, r28	; 61
    4844:	de bf       	out	0x3e, r29	; 62
    4846:	8f 83       	std	Y+7, r24	; 0x07
    4848:	98 87       	std	Y+8, r25	; 0x08
    484a:	69 87       	std	Y+9, r22	; 0x09
    484c:	7a 87       	std	Y+10, r23	; 0x0a
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    484e:	19 82       	std	Y+1, r1	; 0x01
    4850:	1a 82       	std	Y+2, r1	; 0x02
	spi.pu8OutBuf = b;
    4852:	8f 81       	ldd	r24, Y+7	; 0x07
    4854:	98 85       	ldd	r25, Y+8	; 0x08
    4856:	8b 83       	std	Y+3, r24	; 0x03
    4858:	9c 83       	std	Y+4, r25	; 0x04
	spi.u16Sz = sz;
    485a:	89 85       	ldd	r24, Y+9	; 0x09
    485c:	9a 85       	ldd	r25, Y+10	; 0x0a
    485e:	8d 83       	std	Y+5, r24	; 0x05
    4860:	9e 83       	std	Y+6, r25	; 0x06
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    4862:	ce 01       	movw	r24, r28
    4864:	01 96       	adiw	r24, 0x01	; 1
    4866:	bc 01       	movw	r22, r24
    4868:	83 e0       	ldi	r24, 0x03	; 3
    486a:	0e 94 27 10 	call	0x204e	; 0x204e <nm_bus_ioctl>
}
    486e:	2a 96       	adiw	r28, 0x0a	; 10
    4870:	cd bf       	out	0x3d, r28	; 61
    4872:	de bf       	out	0x3e, r29	; 62
    4874:	df 91       	pop	r29
    4876:	cf 91       	pop	r28
    4878:	08 95       	ret

0000487a <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    487a:	cf 93       	push	r28
    487c:	df 93       	push	r29
    487e:	cd b7       	in	r28, 0x3d	; 61
    4880:	de b7       	in	r29, 0x3e	; 62
    4882:	2a 97       	sbiw	r28, 0x0a	; 10
    4884:	cd bf       	out	0x3d, r28	; 61
    4886:	de bf       	out	0x3e, r29	; 62
    4888:	8f 83       	std	Y+7, r24	; 0x07
    488a:	98 87       	std	Y+8, r25	; 0x08
    488c:	69 87       	std	Y+9, r22	; 0x09
    488e:	7a 87       	std	Y+10, r23	; 0x0a
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    4890:	8f 81       	ldd	r24, Y+7	; 0x07
    4892:	98 85       	ldd	r25, Y+8	; 0x08
    4894:	89 83       	std	Y+1, r24	; 0x01
    4896:	9a 83       	std	Y+2, r25	; 0x02
	spi.pu8OutBuf = NULL;
    4898:	1b 82       	std	Y+3, r1	; 0x03
    489a:	1c 82       	std	Y+4, r1	; 0x04
	spi.u16Sz = sz;
    489c:	89 85       	ldd	r24, Y+9	; 0x09
    489e:	9a 85       	ldd	r25, Y+10	; 0x0a
    48a0:	8d 83       	std	Y+5, r24	; 0x05
    48a2:	9e 83       	std	Y+6, r25	; 0x06
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    48a4:	ce 01       	movw	r24, r28
    48a6:	01 96       	adiw	r24, 0x01	; 1
    48a8:	bc 01       	movw	r22, r24
    48aa:	83 e0       	ldi	r24, 0x03	; 3
    48ac:	0e 94 27 10 	call	0x204e	; 0x204e <nm_bus_ioctl>
}
    48b0:	2a 96       	adiw	r28, 0x0a	; 10
    48b2:	cd bf       	out	0x3d, r28	; 61
    48b4:	de bf       	out	0x3e, r29	; 62
    48b6:	df 91       	pop	r29
    48b8:	cf 91       	pop	r28
    48ba:	08 95       	ret

000048bc <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    48bc:	cf 93       	push	r28
    48be:	df 93       	push	r29
    48c0:	cd b7       	in	r28, 0x3d	; 61
    48c2:	de b7       	in	r29, 0x3e	; 62
    48c4:	25 97       	sbiw	r28, 0x05	; 5
    48c6:	cd bf       	out	0x3d, r28	; 61
    48c8:	de bf       	out	0x3e, r29	; 62
    48ca:	8c 83       	std	Y+4, r24	; 0x04
    48cc:	6d 83       	std	Y+5, r22	; 0x05
	return pgm_read_byte(&(crc7_syndrome_table[(crc << 1) ^ data]));
    48ce:	8c 81       	ldd	r24, Y+4	; 0x04
    48d0:	88 2f       	mov	r24, r24
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	9c 01       	movw	r18, r24
    48d6:	22 0f       	add	r18, r18
    48d8:	33 1f       	adc	r19, r19
    48da:	8d 81       	ldd	r24, Y+5	; 0x05
    48dc:	88 2f       	mov	r24, r24
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	82 27       	eor	r24, r18
    48e2:	93 27       	eor	r25, r19
    48e4:	84 53       	subi	r24, 0x34	; 52
    48e6:	9f 4f       	sbci	r25, 0xFF	; 255
    48e8:	89 83       	std	Y+1, r24	; 0x01
    48ea:	9a 83       	std	Y+2, r25	; 0x02
    48ec:	89 81       	ldd	r24, Y+1	; 0x01
    48ee:	9a 81       	ldd	r25, Y+2	; 0x02
    48f0:	fc 01       	movw	r30, r24
    48f2:	84 91       	lpm	r24, Z
    48f4:	8b 83       	std	Y+3, r24	; 0x03
    48f6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    48f8:	25 96       	adiw	r28, 0x05	; 5
    48fa:	cd bf       	out	0x3d, r28	; 61
    48fc:	de bf       	out	0x3e, r29	; 62
    48fe:	df 91       	pop	r29
    4900:	cf 91       	pop	r28
    4902:	08 95       	ret

00004904 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    4904:	cf 93       	push	r28
    4906:	df 93       	push	r29
    4908:	cd b7       	in	r28, 0x3d	; 61
    490a:	de b7       	in	r29, 0x3e	; 62
    490c:	27 97       	sbiw	r28, 0x07	; 7
    490e:	cd bf       	out	0x3d, r28	; 61
    4910:	de bf       	out	0x3e, r29	; 62
    4912:	89 83       	std	Y+1, r24	; 0x01
    4914:	6a 83       	std	Y+2, r22	; 0x02
    4916:	7b 83       	std	Y+3, r23	; 0x03
    4918:	2c 83       	std	Y+4, r18	; 0x04
    491a:	3d 83       	std	Y+5, r19	; 0x05
    491c:	4e 83       	std	Y+6, r20	; 0x06
    491e:	5f 83       	std	Y+7, r21	; 0x07
	while (len--)
    4920:	0e c0       	rjmp	.+28     	; 0x493e <crc7+0x3a>
		crc = crc7_byte(crc, *buffer++);
    4922:	8a 81       	ldd	r24, Y+2	; 0x02
    4924:	9b 81       	ldd	r25, Y+3	; 0x03
    4926:	9c 01       	movw	r18, r24
    4928:	2f 5f       	subi	r18, 0xFF	; 255
    492a:	3f 4f       	sbci	r19, 0xFF	; 255
    492c:	2a 83       	std	Y+2, r18	; 0x02
    492e:	3b 83       	std	Y+3, r19	; 0x03
    4930:	fc 01       	movw	r30, r24
    4932:	80 81       	ld	r24, Z
    4934:	68 2f       	mov	r22, r24
    4936:	89 81       	ldd	r24, Y+1	; 0x01
    4938:	0e 94 5e 24 	call	0x48bc	; 0x48bc <crc7_byte>
    493c:	89 83       	std	Y+1, r24	; 0x01
	return pgm_read_byte(&(crc7_syndrome_table[(crc << 1) ^ data]));
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    493e:	8c 81       	ldd	r24, Y+4	; 0x04
    4940:	9d 81       	ldd	r25, Y+5	; 0x05
    4942:	ae 81       	ldd	r26, Y+6	; 0x06
    4944:	bf 81       	ldd	r27, Y+7	; 0x07
    4946:	9c 01       	movw	r18, r24
    4948:	ad 01       	movw	r20, r26
    494a:	21 50       	subi	r18, 0x01	; 1
    494c:	31 09       	sbc	r19, r1
    494e:	41 09       	sbc	r20, r1
    4950:	51 09       	sbc	r21, r1
    4952:	2c 83       	std	Y+4, r18	; 0x04
    4954:	3d 83       	std	Y+5, r19	; 0x05
    4956:	4e 83       	std	Y+6, r20	; 0x06
    4958:	5f 83       	std	Y+7, r21	; 0x07
    495a:	89 2b       	or	r24, r25
    495c:	8a 2b       	or	r24, r26
    495e:	8b 2b       	or	r24, r27
    4960:	01 f7       	brne	.-64     	; 0x4922 <crc7+0x1e>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    4962:	89 81       	ldd	r24, Y+1	; 0x01
}
    4964:	27 96       	adiw	r28, 0x07	; 7
    4966:	cd bf       	out	0x3d, r28	; 61
    4968:	de bf       	out	0x3e, r29	; 62
    496a:	df 91       	pop	r29
    496c:	cf 91       	pop	r28
    496e:	08 95       	ret

00004970 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    4970:	af 92       	push	r10
    4972:	cf 92       	push	r12
    4974:	df 92       	push	r13
    4976:	ef 92       	push	r14
    4978:	ff 92       	push	r15
    497a:	0f 93       	push	r16
    497c:	1f 93       	push	r17
    497e:	cf 93       	push	r28
    4980:	df 93       	push	r29
    4982:	cd b7       	in	r28, 0x3d	; 61
    4984:	de b7       	in	r29, 0x3e	; 62
    4986:	69 97       	sbiw	r28, 0x19	; 25
    4988:	cd bf       	out	0x3d, r28	; 61
    498a:	de bf       	out	0x3e, r29	; 62
    498c:	8c 87       	std	Y+12, r24	; 0x0c
    498e:	4d 87       	std	Y+13, r20	; 0x0d
    4990:	5e 87       	std	Y+14, r21	; 0x0e
    4992:	6f 87       	std	Y+15, r22	; 0x0f
    4994:	78 8b       	std	Y+16, r23	; 0x10
    4996:	09 8b       	std	Y+17, r16	; 0x11
    4998:	1a 8b       	std	Y+18, r17	; 0x12
    499a:	2b 8b       	std	Y+19, r18	; 0x13
    499c:	3c 8b       	std	Y+20, r19	; 0x14
    499e:	cd 8a       	std	Y+21, r12	; 0x15
    49a0:	de 8a       	std	Y+22, r13	; 0x16
    49a2:	ef 8a       	std	Y+23, r14	; 0x17
    49a4:	f8 8e       	std	Y+24, r15	; 0x18
    49a6:	a9 8e       	std	Y+25, r10	; 0x19
	uint8 bc[9];
	uint8 len = 5;
    49a8:	85 e0       	ldi	r24, 0x05	; 5
    49aa:	89 83       	std	Y+1, r24	; 0x01
	sint8 result = N_OK;
    49ac:	81 e0       	ldi	r24, 0x01	; 1
    49ae:	8a 83       	std	Y+2, r24	; 0x02

	bc[0] = cmd;
    49b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    49b2:	8b 83       	std	Y+3, r24	; 0x03
	switch (cmd) {
    49b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    49b6:	88 2f       	mov	r24, r24
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	09 2e       	mov	r0, r25
    49bc:	00 0c       	add	r0, r0
    49be:	aa 0b       	sbc	r26, r26
    49c0:	bb 0b       	sbc	r27, r27
    49c2:	41 ec       	ldi	r20, 0xC1	; 193
    49c4:	50 e0       	ldi	r21, 0x00	; 0
    49c6:	2e e0       	ldi	r18, 0x0E	; 14
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	84 1b       	sub	r24, r20
    49cc:	95 0b       	sbc	r25, r21
    49ce:	28 17       	cp	r18, r24
    49d0:	39 07       	cpc	r19, r25
    49d2:	08 f4       	brcc	.+2      	; 0x49d6 <spi_cmd+0x66>
    49d4:	f1 c0       	rjmp	.+482    	; 0x4bb8 <spi_cmd+0x248>
    49d6:	89 5a       	subi	r24, 0xA9	; 169
    49d8:	9f 4f       	sbci	r25, 0xFF	; 255
    49da:	fc 01       	movw	r30, r24
    49dc:	0c 94 80 37 	jmp	0x6f00	; 0x6f00 <__tablejump2__>
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    49e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    49e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    49e4:	af 85       	ldd	r26, Y+15	; 0x0f
    49e6:	b8 89       	ldd	r27, Y+16	; 0x10
    49e8:	cd 01       	movw	r24, r26
    49ea:	aa 27       	eor	r26, r26
    49ec:	bb 27       	eor	r27, r27
    49ee:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    49f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    49f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    49f4:	af 85       	ldd	r26, Y+15	; 0x0f
    49f6:	b8 89       	ldd	r27, Y+16	; 0x10
    49f8:	89 2f       	mov	r24, r25
    49fa:	9a 2f       	mov	r25, r26
    49fc:	ab 2f       	mov	r26, r27
    49fe:	bb 27       	eor	r27, r27
    4a00:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)adr;
    4a02:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a04:	8e 83       	std	Y+6, r24	; 0x06
		len = 5;
    4a06:	85 e0       	ldi	r24, 0x05	; 5
    4a08:	89 83       	std	Y+1, r24	; 0x01
		break;
    4a0a:	d8 c0       	rjmp	.+432    	; 0x4bbc <spi_cmd+0x24c>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    4a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a10:	af 85       	ldd	r26, Y+15	; 0x0f
    4a12:	b8 89       	ldd	r27, Y+16	; 0x10
    4a14:	89 2f       	mov	r24, r25
    4a16:	9a 2f       	mov	r25, r26
    4a18:	ab 2f       	mov	r26, r27
    4a1a:	bb 27       	eor	r27, r27
    4a1c:	8c 83       	std	Y+4, r24	; 0x04
		if(clockless)  bc[1] |= (1 << 7);
    4a1e:	89 8d       	ldd	r24, Y+25	; 0x19
    4a20:	88 23       	and	r24, r24
    4a22:	19 f0       	breq	.+6      	; 0x4a2a <spi_cmd+0xba>
    4a24:	8c 81       	ldd	r24, Y+4	; 0x04
    4a26:	80 68       	ori	r24, 0x80	; 128
    4a28:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)adr;
    4a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a2c:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = 0x00;
    4a2e:	1e 82       	std	Y+6, r1	; 0x06
		len = 5;
    4a30:	85 e0       	ldi	r24, 0x05	; 5
    4a32:	89 83       	std	Y+1, r24	; 0x01
		break;
    4a34:	c3 c0       	rjmp	.+390    	; 0x4bbc <spi_cmd+0x24c>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    4a36:	1c 82       	std	Y+4, r1	; 0x04
		bc[2] = 0x00;
    4a38:	1d 82       	std	Y+5, r1	; 0x05
		bc[3] = 0x00;
    4a3a:	1e 82       	std	Y+6, r1	; 0x06
		len = 5;
    4a3c:	85 e0       	ldi	r24, 0x05	; 5
    4a3e:	89 83       	std	Y+1, r24	; 0x01
		break;
    4a40:	bd c0       	rjmp	.+378    	; 0x4bbc <spi_cmd+0x24c>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    4a42:	1c 82       	std	Y+4, r1	; 0x04
		bc[2] = 0x00;
    4a44:	1d 82       	std	Y+5, r1	; 0x05
		bc[3] = 0x00;
    4a46:	1e 82       	std	Y+6, r1	; 0x06
		len = 5;
    4a48:	85 e0       	ldi	r24, 0x05	; 5
    4a4a:	89 83       	std	Y+1, r24	; 0x01
		break;
    4a4c:	b7 c0       	rjmp	.+366    	; 0x4bbc <spi_cmd+0x24c>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    4a4e:	8f ef       	ldi	r24, 0xFF	; 255
    4a50:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = 0xff;
    4a52:	8f ef       	ldi	r24, 0xFF	; 255
    4a54:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = 0xff;
    4a56:	8f ef       	ldi	r24, 0xFF	; 255
    4a58:	8e 83       	std	Y+6, r24	; 0x06
		len = 5;
    4a5a:	85 e0       	ldi	r24, 0x05	; 5
    4a5c:	89 83       	std	Y+1, r24	; 0x01
		break;
    4a5e:	ae c0       	rjmp	.+348    	; 0x4bbc <spi_cmd+0x24c>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    4a60:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a62:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a64:	af 85       	ldd	r26, Y+15	; 0x0f
    4a66:	b8 89       	ldd	r27, Y+16	; 0x10
    4a68:	cd 01       	movw	r24, r26
    4a6a:	aa 27       	eor	r26, r26
    4a6c:	bb 27       	eor	r27, r27
    4a6e:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    4a70:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a72:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a74:	af 85       	ldd	r26, Y+15	; 0x0f
    4a76:	b8 89       	ldd	r27, Y+16	; 0x10
    4a78:	89 2f       	mov	r24, r25
    4a7a:	9a 2f       	mov	r25, r26
    4a7c:	ab 2f       	mov	r26, r27
    4a7e:	bb 27       	eor	r27, r27
    4a80:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)adr;
    4a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a84:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(sz >> 8);
    4a86:	8d 89       	ldd	r24, Y+21	; 0x15
    4a88:	9e 89       	ldd	r25, Y+22	; 0x16
    4a8a:	af 89       	ldd	r26, Y+23	; 0x17
    4a8c:	b8 8d       	ldd	r27, Y+24	; 0x18
    4a8e:	89 2f       	mov	r24, r25
    4a90:	9a 2f       	mov	r25, r26
    4a92:	ab 2f       	mov	r26, r27
    4a94:	bb 27       	eor	r27, r27
    4a96:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(sz);
    4a98:	8d 89       	ldd	r24, Y+21	; 0x15
    4a9a:	88 87       	std	Y+8, r24	; 0x08
		len = 7;
    4a9c:	87 e0       	ldi	r24, 0x07	; 7
    4a9e:	89 83       	std	Y+1, r24	; 0x01
		break;
    4aa0:	8d c0       	rjmp	.+282    	; 0x4bbc <spi_cmd+0x24c>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    4aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4aa6:	af 85       	ldd	r26, Y+15	; 0x0f
    4aa8:	b8 89       	ldd	r27, Y+16	; 0x10
    4aaa:	cd 01       	movw	r24, r26
    4aac:	aa 27       	eor	r26, r26
    4aae:	bb 27       	eor	r27, r27
    4ab0:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    4ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ab6:	af 85       	ldd	r26, Y+15	; 0x0f
    4ab8:	b8 89       	ldd	r27, Y+16	; 0x10
    4aba:	89 2f       	mov	r24, r25
    4abc:	9a 2f       	mov	r25, r26
    4abe:	ab 2f       	mov	r26, r27
    4ac0:	bb 27       	eor	r27, r27
    4ac2:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)adr;
    4ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ac6:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(sz >> 16);
    4ac8:	8d 89       	ldd	r24, Y+21	; 0x15
    4aca:	9e 89       	ldd	r25, Y+22	; 0x16
    4acc:	af 89       	ldd	r26, Y+23	; 0x17
    4ace:	b8 8d       	ldd	r27, Y+24	; 0x18
    4ad0:	cd 01       	movw	r24, r26
    4ad2:	aa 27       	eor	r26, r26
    4ad4:	bb 27       	eor	r27, r27
    4ad6:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(sz >> 8);
    4ad8:	8d 89       	ldd	r24, Y+21	; 0x15
    4ada:	9e 89       	ldd	r25, Y+22	; 0x16
    4adc:	af 89       	ldd	r26, Y+23	; 0x17
    4ade:	b8 8d       	ldd	r27, Y+24	; 0x18
    4ae0:	89 2f       	mov	r24, r25
    4ae2:	9a 2f       	mov	r25, r26
    4ae4:	ab 2f       	mov	r26, r27
    4ae6:	bb 27       	eor	r27, r27
    4ae8:	88 87       	std	Y+8, r24	; 0x08
		bc[6] = (uint8)(sz);
    4aea:	8d 89       	ldd	r24, Y+21	; 0x15
    4aec:	89 87       	std	Y+9, r24	; 0x09
		len = 8;
    4aee:	88 e0       	ldi	r24, 0x08	; 8
    4af0:	89 83       	std	Y+1, r24	; 0x01
		break;
    4af2:	64 c0       	rjmp	.+200    	; 0x4bbc <spi_cmd+0x24c>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    4af4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4af6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4af8:	af 85       	ldd	r26, Y+15	; 0x0f
    4afa:	b8 89       	ldd	r27, Y+16	; 0x10
    4afc:	89 2f       	mov	r24, r25
    4afe:	9a 2f       	mov	r25, r26
    4b00:	ab 2f       	mov	r26, r27
    4b02:	bb 27       	eor	r27, r27
    4b04:	8c 83       	std	Y+4, r24	; 0x04
		if(clockless)  bc[1] |= (1 << 7);
    4b06:	89 8d       	ldd	r24, Y+25	; 0x19
    4b08:	88 23       	and	r24, r24
    4b0a:	19 f0       	breq	.+6      	; 0x4b12 <spi_cmd+0x1a2>
    4b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    4b0e:	80 68       	ori	r24, 0x80	; 128
    4b10:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr);
    4b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b14:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)(u32data >> 24);
    4b16:	89 89       	ldd	r24, Y+17	; 0x11
    4b18:	9a 89       	ldd	r25, Y+18	; 0x12
    4b1a:	ab 89       	ldd	r26, Y+19	; 0x13
    4b1c:	bc 89       	ldd	r27, Y+20	; 0x14
    4b1e:	8b 2f       	mov	r24, r27
    4b20:	99 27       	eor	r25, r25
    4b22:	aa 27       	eor	r26, r26
    4b24:	bb 27       	eor	r27, r27
    4b26:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(u32data >> 16);
    4b28:	89 89       	ldd	r24, Y+17	; 0x11
    4b2a:	9a 89       	ldd	r25, Y+18	; 0x12
    4b2c:	ab 89       	ldd	r26, Y+19	; 0x13
    4b2e:	bc 89       	ldd	r27, Y+20	; 0x14
    4b30:	cd 01       	movw	r24, r26
    4b32:	aa 27       	eor	r26, r26
    4b34:	bb 27       	eor	r27, r27
    4b36:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(u32data >> 8);
    4b38:	89 89       	ldd	r24, Y+17	; 0x11
    4b3a:	9a 89       	ldd	r25, Y+18	; 0x12
    4b3c:	ab 89       	ldd	r26, Y+19	; 0x13
    4b3e:	bc 89       	ldd	r27, Y+20	; 0x14
    4b40:	89 2f       	mov	r24, r25
    4b42:	9a 2f       	mov	r25, r26
    4b44:	ab 2f       	mov	r26, r27
    4b46:	bb 27       	eor	r27, r27
    4b48:	88 87       	std	Y+8, r24	; 0x08
		bc[6] = (uint8)(u32data);
    4b4a:	89 89       	ldd	r24, Y+17	; 0x11
    4b4c:	89 87       	std	Y+9, r24	; 0x09
		len = 8;
    4b4e:	88 e0       	ldi	r24, 0x08	; 8
    4b50:	89 83       	std	Y+1, r24	; 0x01
		break;
    4b52:	34 c0       	rjmp	.+104    	; 0x4bbc <spi_cmd+0x24c>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    4b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b58:	af 85       	ldd	r26, Y+15	; 0x0f
    4b5a:	b8 89       	ldd	r27, Y+16	; 0x10
    4b5c:	cd 01       	movw	r24, r26
    4b5e:	aa 27       	eor	r26, r26
    4b60:	bb 27       	eor	r27, r27
    4b62:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    4b64:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b66:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b68:	af 85       	ldd	r26, Y+15	; 0x0f
    4b6a:	b8 89       	ldd	r27, Y+16	; 0x10
    4b6c:	89 2f       	mov	r24, r25
    4b6e:	9a 2f       	mov	r25, r26
    4b70:	ab 2f       	mov	r26, r27
    4b72:	bb 27       	eor	r27, r27
    4b74:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)(adr);
    4b76:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b78:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(u32data >> 24);
    4b7a:	89 89       	ldd	r24, Y+17	; 0x11
    4b7c:	9a 89       	ldd	r25, Y+18	; 0x12
    4b7e:	ab 89       	ldd	r26, Y+19	; 0x13
    4b80:	bc 89       	ldd	r27, Y+20	; 0x14
    4b82:	8b 2f       	mov	r24, r27
    4b84:	99 27       	eor	r25, r25
    4b86:	aa 27       	eor	r26, r26
    4b88:	bb 27       	eor	r27, r27
    4b8a:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(u32data >> 16);
    4b8c:	89 89       	ldd	r24, Y+17	; 0x11
    4b8e:	9a 89       	ldd	r25, Y+18	; 0x12
    4b90:	ab 89       	ldd	r26, Y+19	; 0x13
    4b92:	bc 89       	ldd	r27, Y+20	; 0x14
    4b94:	cd 01       	movw	r24, r26
    4b96:	aa 27       	eor	r26, r26
    4b98:	bb 27       	eor	r27, r27
    4b9a:	88 87       	std	Y+8, r24	; 0x08
		bc[6] = (uint8)(u32data >> 8);
    4b9c:	89 89       	ldd	r24, Y+17	; 0x11
    4b9e:	9a 89       	ldd	r25, Y+18	; 0x12
    4ba0:	ab 89       	ldd	r26, Y+19	; 0x13
    4ba2:	bc 89       	ldd	r27, Y+20	; 0x14
    4ba4:	89 2f       	mov	r24, r25
    4ba6:	9a 2f       	mov	r25, r26
    4ba8:	ab 2f       	mov	r26, r27
    4baa:	bb 27       	eor	r27, r27
    4bac:	89 87       	std	Y+9, r24	; 0x09
		bc[7] = (uint8)(u32data);
    4bae:	89 89       	ldd	r24, Y+17	; 0x11
    4bb0:	8a 87       	std	Y+10, r24	; 0x0a
		len = 9;
    4bb2:	89 e0       	ldi	r24, 0x09	; 9
    4bb4:	89 83       	std	Y+1, r24	; 0x01
		break;
    4bb6:	02 c0       	rjmp	.+4      	; 0x4bbc <spi_cmd+0x24c>
	default:
		result = N_FAIL;
    4bb8:	1a 82       	std	Y+2, r1	; 0x02
		break;
    4bba:	00 00       	nop
	}

	if (result) {
    4bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    4bbe:	88 23       	and	r24, r24
    4bc0:	89 f1       	breq	.+98     	; 0x4c24 <spi_cmd+0x2b4>
		if (!gu8Crc_off)
    4bc2:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <gu8Crc_off>
    4bc6:	88 23       	and	r24, r24
    4bc8:	f9 f4       	brne	.+62     	; 0x4c08 <spi_cmd+0x298>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    4bca:	89 81       	ldd	r24, Y+1	; 0x01
    4bcc:	88 2f       	mov	r24, r24
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	8c 01       	movw	r16, r24
    4bd2:	01 50       	subi	r16, 0x01	; 1
    4bd4:	11 09       	sbc	r17, r1
    4bd6:	89 81       	ldd	r24, Y+1	; 0x01
    4bd8:	88 2f       	mov	r24, r24
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	01 97       	sbiw	r24, 0x01	; 1
    4bde:	09 2e       	mov	r0, r25
    4be0:	00 0c       	add	r0, r0
    4be2:	aa 0b       	sbc	r26, r26
    4be4:	bb 0b       	sbc	r27, r27
    4be6:	be 01       	movw	r22, r28
    4be8:	6d 5f       	subi	r22, 0xFD	; 253
    4bea:	7f 4f       	sbci	r23, 0xFF	; 255
    4bec:	9c 01       	movw	r18, r24
    4bee:	ad 01       	movw	r20, r26
    4bf0:	8f e7       	ldi	r24, 0x7F	; 127
    4bf2:	0e 94 82 24 	call	0x4904	; 0x4904 <crc7>
    4bf6:	28 2f       	mov	r18, r24
    4bf8:	22 0f       	add	r18, r18
    4bfa:	ce 01       	movw	r24, r28
    4bfc:	03 96       	adiw	r24, 0x03	; 3
    4bfe:	80 0f       	add	r24, r16
    4c00:	91 1f       	adc	r25, r17
    4c02:	fc 01       	movw	r30, r24
    4c04:	20 83       	st	Z, r18
    4c06:	03 c0       	rjmp	.+6      	; 0x4c0e <spi_cmd+0x29e>
		else
			len-=1;
    4c08:	89 81       	ldd	r24, Y+1	; 0x01
    4c0a:	81 50       	subi	r24, 0x01	; 1
    4c0c:	89 83       	std	Y+1, r24	; 0x01

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    4c0e:	89 81       	ldd	r24, Y+1	; 0x01
    4c10:	28 2f       	mov	r18, r24
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	ce 01       	movw	r24, r28
    4c16:	03 96       	adiw	r24, 0x03	; 3
    4c18:	b9 01       	movw	r22, r18
    4c1a:	0e 94 3d 24 	call	0x487a	; 0x487a <nmi_spi_write>
    4c1e:	88 23       	and	r24, r24
    4c20:	09 f0       	breq	.+2      	; 0x4c24 <spi_cmd+0x2b4>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
    4c22:	1a 82       	std	Y+2, r1	; 0x02
		}
	}

	return result;
    4c24:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4c26:	69 96       	adiw	r28, 0x19	; 25
    4c28:	cd bf       	out	0x3d, r28	; 61
    4c2a:	de bf       	out	0x3e, r29	; 62
    4c2c:	df 91       	pop	r29
    4c2e:	cf 91       	pop	r28
    4c30:	1f 91       	pop	r17
    4c32:	0f 91       	pop	r16
    4c34:	ff 90       	pop	r15
    4c36:	ef 90       	pop	r14
    4c38:	df 90       	pop	r13
    4c3a:	cf 90       	pop	r12
    4c3c:	af 90       	pop	r10
    4c3e:	08 95       	ret

00004c40 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    4c40:	cf 93       	push	r28
    4c42:	df 93       	push	r29
    4c44:	cd b7       	in	r28, 0x3d	; 61
    4c46:	de b7       	in	r29, 0x3e	; 62
    4c48:	26 97       	sbiw	r28, 0x06	; 6
    4c4a:	cd bf       	out	0x3d, r28	; 61
    4c4c:	de bf       	out	0x3e, r29	; 62
    4c4e:	8e 83       	std	Y+6, r24	; 0x06
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    4c50:	81 e0       	ldi	r24, 0x01	; 1
    4c52:	8a 83       	std	Y+2, r24	; 0x02

    if (!gu8Crc_off)
    4c54:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <gu8Crc_off>
    4c58:	88 23       	and	r24, r24
    4c5a:	19 f4       	brne	.+6      	; 0x4c62 <spi_data_rsp+0x22>
		len = 2;
    4c5c:	82 e0       	ldi	r24, 0x02	; 2
    4c5e:	89 83       	std	Y+1, r24	; 0x01
    4c60:	02 c0       	rjmp	.+4      	; 0x4c66 <spi_data_rsp+0x26>
	else
		len = 3;
    4c62:	83 e0       	ldi	r24, 0x03	; 3
    4c64:	89 83       	std	Y+1, r24	; 0x01

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    4c66:	89 81       	ldd	r24, Y+1	; 0x01
    4c68:	28 2f       	mov	r18, r24
    4c6a:	30 e0       	ldi	r19, 0x00	; 0
    4c6c:	ce 01       	movw	r24, r28
    4c6e:	03 96       	adiw	r24, 0x03	; 3
    4c70:	b9 01       	movw	r22, r18
    4c72:	0e 94 1c 24 	call	0x4838	; 0x4838 <nmi_spi_read>
    4c76:	88 23       	and	r24, r24
    4c78:	11 f0       	breq	.+4      	; 0x4c7e <spi_data_rsp+0x3e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
    4c7a:	1a 82       	std	Y+2, r1	; 0x02
		goto _fail_;
    4c7c:	1c c0       	rjmp	.+56     	; 0x4cb6 <spi_data_rsp+0x76>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    4c7e:	89 81       	ldd	r24, Y+1	; 0x01
    4c80:	88 2f       	mov	r24, r24
    4c82:	90 e0       	ldi	r25, 0x00	; 0
    4c84:	01 97       	sbiw	r24, 0x01	; 1
    4c86:	9e 01       	movw	r18, r28
    4c88:	2d 5f       	subi	r18, 0xFD	; 253
    4c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c8c:	82 0f       	add	r24, r18
    4c8e:	93 1f       	adc	r25, r19
    4c90:	fc 01       	movw	r30, r24
    4c92:	80 81       	ld	r24, Z
    4c94:	88 23       	and	r24, r24
    4c96:	69 f4       	brne	.+26     	; 0x4cb2 <spi_data_rsp+0x72>
    4c98:	89 81       	ldd	r24, Y+1	; 0x01
    4c9a:	88 2f       	mov	r24, r24
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	02 97       	sbiw	r24, 0x02	; 2
    4ca0:	9e 01       	movw	r18, r28
    4ca2:	2d 5f       	subi	r18, 0xFD	; 253
    4ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ca6:	82 0f       	add	r24, r18
    4ca8:	93 1f       	adc	r25, r19
    4caa:	fc 01       	movw	r30, r24
    4cac:	80 81       	ld	r24, Z
    4cae:	83 3c       	cpi	r24, 0xC3	; 195
    4cb0:	11 f0       	breq	.+4      	; 0x4cb6 <spi_data_rsp+0x76>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
		result = N_FAIL;
    4cb2:	1a 82       	std	Y+2, r1	; 0x02
		goto _fail_;
    4cb4:	00 00       	nop
	}
_fail_:

	return result;
    4cb6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4cb8:	26 96       	adiw	r28, 0x06	; 6
    4cba:	cd bf       	out	0x3d, r28	; 61
    4cbc:	de bf       	out	0x3e, r29	; 62
    4cbe:	df 91       	pop	r29
    4cc0:	cf 91       	pop	r28
    4cc2:	08 95       	ret

00004cc4 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    4cc4:	cf 93       	push	r28
    4cc6:	df 93       	push	r29
    4cc8:	00 d0       	rcall	.+0      	; 0x4cca <spi_cmd_rsp+0x6>
    4cca:	00 d0       	rcall	.+0      	; 0x4ccc <spi_cmd_rsp+0x8>
    4ccc:	cd b7       	in	r28, 0x3d	; 61
    4cce:	de b7       	in	r29, 0x3e	; 62
    4cd0:	8c 83       	std	Y+4, r24	; 0x04
	uint8 rsp;
	sint8 result = N_OK;
    4cd2:	81 e0       	ldi	r24, 0x01	; 1
    4cd4:	89 83       	std	Y+1, r24	; 0x01
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    4cd6:	8c 81       	ldd	r24, Y+4	; 0x04
    4cd8:	8f 3c       	cpi	r24, 0xCF	; 207
    4cda:	31 f0       	breq	.+12     	; 0x4ce8 <spi_cmd_rsp+0x24>
    4cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    4cde:	85 3c       	cpi	r24, 0xC5	; 197
    4ce0:	19 f0       	breq	.+6      	; 0x4ce8 <spi_cmd_rsp+0x24>
		 (cmd == CMD_TERMINATE) ||
    4ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ce4:	86 3c       	cpi	r24, 0xC6	; 198
    4ce6:	51 f4       	brne	.+20     	; 0x4cfc <spi_cmd_rsp+0x38>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4ce8:	ce 01       	movw	r24, r28
    4cea:	03 96       	adiw	r24, 0x03	; 3
    4cec:	61 e0       	ldi	r22, 0x01	; 1
    4cee:	70 e0       	ldi	r23, 0x00	; 0
    4cf0:	0e 94 1c 24 	call	0x4838	; 0x4838 <nmi_spi_read>
    4cf4:	88 23       	and	r24, r24
    4cf6:	11 f0       	breq	.+4      	; 0x4cfc <spi_cmd_rsp+0x38>
			result = N_FAIL;
    4cf8:	19 82       	std	Y+1, r1	; 0x01
			goto _fail_;
    4cfa:	2b c0       	rjmp	.+86     	; 0x4d52 <spi_cmd_rsp+0x8e>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    4cfc:	8a e0       	ldi	r24, 0x0A	; 10
    4cfe:	8a 83       	std	Y+2, r24	; 0x02
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4d00:	ce 01       	movw	r24, r28
    4d02:	03 96       	adiw	r24, 0x03	; 3
    4d04:	61 e0       	ldi	r22, 0x01	; 1
    4d06:	70 e0       	ldi	r23, 0x00	; 0
    4d08:	0e 94 1c 24 	call	0x4838	; 0x4838 <nmi_spi_read>
    4d0c:	88 23       	and	r24, r24
    4d0e:	11 f0       	breq	.+4      	; 0x4d14 <spi_cmd_rsp+0x50>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
    4d10:	19 82       	std	Y+1, r1	; 0x01
			goto _fail_;
    4d12:	1f c0       	rjmp	.+62     	; 0x4d52 <spi_cmd_rsp+0x8e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    4d14:	9b 81       	ldd	r25, Y+3	; 0x03
    4d16:	8c 81       	ldd	r24, Y+4	; 0x04
    4d18:	98 17       	cp	r25, r24
    4d1a:	31 f0       	breq	.+12     	; 0x4d28 <spi_cmd_rsp+0x64>
    4d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d1e:	98 2f       	mov	r25, r24
    4d20:	91 50       	subi	r25, 0x01	; 1
    4d22:	9a 83       	std	Y+2, r25	; 0x02
    4d24:	18 16       	cp	r1, r24
    4d26:	64 f3       	brlt	.-40     	; 0x4d00 <spi_cmd_rsp+0x3c>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    4d28:	8a e0       	ldi	r24, 0x0A	; 10
    4d2a:	8a 83       	std	Y+2, r24	; 0x02
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4d2c:	ce 01       	movw	r24, r28
    4d2e:	03 96       	adiw	r24, 0x03	; 3
    4d30:	61 e0       	ldi	r22, 0x01	; 1
    4d32:	70 e0       	ldi	r23, 0x00	; 0
    4d34:	0e 94 1c 24 	call	0x4838	; 0x4838 <nmi_spi_read>
    4d38:	88 23       	and	r24, r24
    4d3a:	11 f0       	breq	.+4      	; 0x4d40 <spi_cmd_rsp+0x7c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
    4d3c:	19 82       	std	Y+1, r1	; 0x01
			goto _fail_;
    4d3e:	09 c0       	rjmp	.+18     	; 0x4d52 <spi_cmd_rsp+0x8e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    4d40:	8b 81       	ldd	r24, Y+3	; 0x03
    4d42:	88 23       	and	r24, r24
    4d44:	31 f0       	breq	.+12     	; 0x4d52 <spi_cmd_rsp+0x8e>
    4d46:	8a 81       	ldd	r24, Y+2	; 0x02
    4d48:	98 2f       	mov	r25, r24
    4d4a:	91 50       	subi	r25, 0x01	; 1
    4d4c:	9a 83       	std	Y+2, r25	; 0x02
    4d4e:	18 16       	cp	r1, r24
    4d50:	6c f3       	brlt	.-38     	; 0x4d2c <spi_cmd_rsp+0x68>

_fail_:

	return result;
    4d52:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d54:	24 96       	adiw	r28, 0x04	; 4
    4d56:	cd bf       	out	0x3d, r28	; 61
    4d58:	de bf       	out	0x3e, r29	; 62
    4d5a:	df 91       	pop	r29
    4d5c:	cf 91       	pop	r28
    4d5e:	08 95       	ret

00004d60 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    4d60:	cf 93       	push	r28
    4d62:	df 93       	push	r29
    4d64:	cd b7       	in	r28, 0x3d	; 61
    4d66:	de b7       	in	r29, 0x3e	; 62
    4d68:	2f 97       	sbiw	r28, 0x0f	; 15
    4d6a:	cd bf       	out	0x3d, r28	; 61
    4d6c:	de bf       	out	0x3e, r29	; 62
    4d6e:	8b 87       	std	Y+11, r24	; 0x0b
    4d70:	9c 87       	std	Y+12, r25	; 0x0c
    4d72:	6d 87       	std	Y+13, r22	; 0x0d
    4d74:	7e 87       	std	Y+14, r23	; 0x0e
    4d76:	4f 87       	std	Y+15, r20	; 0x0f
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    4d78:	81 e0       	ldi	r24, 0x01	; 1
    4d7a:	8f 83       	std	Y+7, r24	; 0x07
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    4d7c:	1b 82       	std	Y+3, r1	; 0x03
    4d7e:	1c 82       	std	Y+4, r1	; 0x04
	do {
		if (sz <= DATA_PKT_SZ)
    4d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d84:	81 30       	cpi	r24, 0x01	; 1
    4d86:	90 42       	sbci	r25, 0x20	; 32
    4d88:	28 f4       	brcc	.+10     	; 0x4d94 <spi_data_read+0x34>
			nbytes = sz;
    4d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d8e:	8d 83       	std	Y+5, r24	; 0x05
    4d90:	9e 83       	std	Y+6, r25	; 0x06
    4d92:	04 c0       	rjmp	.+8      	; 0x4d9c <spi_data_read+0x3c>
		else
			nbytes = DATA_PKT_SZ;
    4d94:	80 e0       	ldi	r24, 0x00	; 0
    4d96:	90 e2       	ldi	r25, 0x20	; 32
    4d98:	8d 83       	std	Y+5, r24	; 0x05
    4d9a:	9e 83       	std	Y+6, r25	; 0x06

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    4d9c:	8a e0       	ldi	r24, 0x0A	; 10
    4d9e:	90 e0       	ldi	r25, 0x00	; 0
    4da0:	89 83       	std	Y+1, r24	; 0x01
    4da2:	9a 83       	std	Y+2, r25	; 0x02
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4da4:	ce 01       	movw	r24, r28
    4da6:	0a 96       	adiw	r24, 0x0a	; 10
    4da8:	61 e0       	ldi	r22, 0x01	; 1
    4daa:	70 e0       	ldi	r23, 0x00	; 0
    4dac:	0e 94 1c 24 	call	0x4838	; 0x4838 <nmi_spi_read>
    4db0:	88 23       	and	r24, r24
    4db2:	11 f0       	breq	.+4      	; 0x4db8 <spi_data_read+0x58>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
    4db4:	1f 82       	std	Y+7, r1	; 0x07
				break;
    4db6:	14 c0       	rjmp	.+40     	; 0x4de0 <spi_data_read+0x80>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    4db8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4dba:	82 95       	swap	r24
    4dbc:	8f 70       	andi	r24, 0x0F	; 15
    4dbe:	88 2f       	mov	r24, r24
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	8f 70       	andi	r24, 0x0F	; 15
    4dc4:	99 27       	eor	r25, r25
    4dc6:	0f 97       	sbiw	r24, 0x0f	; 15
    4dc8:	51 f0       	breq	.+20     	; 0x4dde <spi_data_read+0x7e>
				break;
		} while (retry--);
    4dca:	89 81       	ldd	r24, Y+1	; 0x01
    4dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    4dce:	9c 01       	movw	r18, r24
    4dd0:	21 50       	subi	r18, 0x01	; 1
    4dd2:	31 09       	sbc	r19, r1
    4dd4:	29 83       	std	Y+1, r18	; 0x01
    4dd6:	3a 83       	std	Y+2, r19	; 0x02
    4dd8:	89 2b       	or	r24, r25
    4dda:	21 f7       	brne	.-56     	; 0x4da4 <spi_data_read+0x44>
    4ddc:	01 c0       	rjmp	.+2      	; 0x4de0 <spi_data_read+0x80>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    4dde:	00 00       	nop
		} while (retry--);

		if (result == N_FAIL)
    4de0:	8f 81       	ldd	r24, Y+7	; 0x07
    4de2:	88 23       	and	r24, r24
    4de4:	09 f4       	brne	.+2      	; 0x4de8 <spi_data_read+0x88>
    4de6:	3f c0       	rjmp	.+126    	; 0x4e66 <spi_data_read+0x106>
			break;

		if (retry <= 0) {
    4de8:	89 81       	ldd	r24, Y+1	; 0x01
    4dea:	9a 81       	ldd	r25, Y+2	; 0x02
    4dec:	18 16       	cp	r1, r24
    4dee:	19 06       	cpc	r1, r25
    4df0:	14 f0       	brlt	.+4      	; 0x4df6 <spi_data_read+0x96>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
    4df2:	1f 82       	std	Y+7, r1	; 0x07
			break;
    4df4:	39 c0       	rjmp	.+114    	; 0x4e68 <spi_data_read+0x108>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    4df6:	4d 81       	ldd	r20, Y+5	; 0x05
    4df8:	5e 81       	ldd	r21, Y+6	; 0x06
    4dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    4dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    4dfe:	2b 85       	ldd	r18, Y+11	; 0x0b
    4e00:	3c 85       	ldd	r19, Y+12	; 0x0c
    4e02:	82 0f       	add	r24, r18
    4e04:	93 1f       	adc	r25, r19
    4e06:	ba 01       	movw	r22, r20
    4e08:	0e 94 1c 24 	call	0x4838	; 0x4838 <nmi_spi_read>
    4e0c:	88 23       	and	r24, r24
    4e0e:	11 f0       	breq	.+4      	; 0x4e14 <spi_data_read+0xb4>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
    4e10:	1f 82       	std	Y+7, r1	; 0x07
			break;
    4e12:	2a c0       	rjmp	.+84     	; 0x4e68 <spi_data_read+0x108>
		}
		if(!clockless)
    4e14:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e16:	88 23       	and	r24, r24
    4e18:	71 f4       	brne	.+28     	; 0x4e36 <spi_data_read+0xd6>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    4e1a:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <gu8Crc_off>
    4e1e:	88 23       	and	r24, r24
    4e20:	51 f4       	brne	.+20     	; 0x4e36 <spi_data_read+0xd6>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    4e22:	ce 01       	movw	r24, r28
    4e24:	08 96       	adiw	r24, 0x08	; 8
    4e26:	62 e0       	ldi	r22, 0x02	; 2
    4e28:	70 e0       	ldi	r23, 0x00	; 0
    4e2a:	0e 94 1c 24 	call	0x4838	; 0x4838 <nmi_spi_read>
    4e2e:	88 23       	and	r24, r24
    4e30:	11 f0       	breq	.+4      	; 0x4e36 <spi_data_read+0xd6>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
					result = N_FAIL;
    4e32:	1f 82       	std	Y+7, r1	; 0x07
					break;
    4e34:	19 c0       	rjmp	.+50     	; 0x4e68 <spi_data_read+0x108>
				}
			}
		}
		ix += nbytes;
    4e36:	2b 81       	ldd	r18, Y+3	; 0x03
    4e38:	3c 81       	ldd	r19, Y+4	; 0x04
    4e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e3e:	82 0f       	add	r24, r18
    4e40:	93 1f       	adc	r25, r19
    4e42:	8b 83       	std	Y+3, r24	; 0x03
    4e44:	9c 83       	std	Y+4, r25	; 0x04
		sz -= nbytes;
    4e46:	8d 81       	ldd	r24, Y+5	; 0x05
    4e48:	9e 81       	ldd	r25, Y+6	; 0x06
    4e4a:	2d 85       	ldd	r18, Y+13	; 0x0d
    4e4c:	3e 85       	ldd	r19, Y+14	; 0x0e
    4e4e:	a9 01       	movw	r20, r18
    4e50:	48 1b       	sub	r20, r24
    4e52:	59 0b       	sbc	r21, r25
    4e54:	ca 01       	movw	r24, r20
    4e56:	8d 87       	std	Y+13, r24	; 0x0d
    4e58:	9e 87       	std	Y+14, r25	; 0x0e

	} while (sz);
    4e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e5e:	89 2b       	or	r24, r25
    4e60:	09 f0       	breq	.+2      	; 0x4e64 <spi_data_read+0x104>
    4e62:	8e cf       	rjmp	.-228    	; 0x4d80 <spi_data_read+0x20>
    4e64:	01 c0       	rjmp	.+2      	; 0x4e68 <spi_data_read+0x108>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    4e66:	00 00       	nop
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    4e68:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4e6a:	2f 96       	adiw	r28, 0x0f	; 15
    4e6c:	cd bf       	out	0x3d, r28	; 61
    4e6e:	de bf       	out	0x3e, r29	; 62
    4e70:	df 91       	pop	r29
    4e72:	cf 91       	pop	r28
    4e74:	08 95       	ret

00004e76 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    4e76:	cf 93       	push	r28
    4e78:	df 93       	push	r29
    4e7a:	cd b7       	in	r28, 0x3d	; 61
    4e7c:	de b7       	in	r29, 0x3e	; 62
    4e7e:	2d 97       	sbiw	r28, 0x0d	; 13
    4e80:	cd bf       	out	0x3d, r28	; 61
    4e82:	de bf       	out	0x3e, r29	; 62
    4e84:	8a 87       	std	Y+10, r24	; 0x0a
    4e86:	9b 87       	std	Y+11, r25	; 0x0b
    4e88:	6c 87       	std	Y+12, r22	; 0x0c
    4e8a:	7d 87       	std	Y+13, r23	; 0x0d
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    4e8c:	81 e0       	ldi	r24, 0x01	; 1
    4e8e:	8d 83       	std	Y+5, r24	; 0x05
	uint8 cmd, order, crc[2] = {0};
    4e90:	18 86       	std	Y+8, r1	; 0x08
    4e92:	19 86       	std	Y+9, r1	; 0x09
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    4e94:	19 82       	std	Y+1, r1	; 0x01
    4e96:	1a 82       	std	Y+2, r1	; 0x02
	do {
		if (sz <= DATA_PKT_SZ)
    4e98:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    4e9c:	81 30       	cpi	r24, 0x01	; 1
    4e9e:	90 42       	sbci	r25, 0x20	; 32
    4ea0:	28 f4       	brcc	.+10     	; 0x4eac <spi_data_write+0x36>
			nbytes = sz;
    4ea2:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ea4:	9d 85       	ldd	r25, Y+13	; 0x0d
    4ea6:	8b 83       	std	Y+3, r24	; 0x03
    4ea8:	9c 83       	std	Y+4, r25	; 0x04
    4eaa:	04 c0       	rjmp	.+8      	; 0x4eb4 <spi_data_write+0x3e>
		else
			nbytes = DATA_PKT_SZ;
    4eac:	80 e0       	ldi	r24, 0x00	; 0
    4eae:	90 e2       	ldi	r25, 0x20	; 32
    4eb0:	8b 83       	std	Y+3, r24	; 0x03
    4eb2:	9c 83       	std	Y+4, r25	; 0x04

		/**
			Write command
		**/
		cmd = 0xf0;
    4eb4:	80 ef       	ldi	r24, 0xF0	; 240
    4eb6:	8f 83       	std	Y+7, r24	; 0x07
		if (ix == 0)  {
    4eb8:	89 81       	ldd	r24, Y+1	; 0x01
    4eba:	9a 81       	ldd	r25, Y+2	; 0x02
    4ebc:	89 2b       	or	r24, r25
    4ebe:	59 f4       	brne	.+22     	; 0x4ed6 <spi_data_write+0x60>
			if (sz <= DATA_PKT_SZ)
    4ec0:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ec2:	9d 85       	ldd	r25, Y+13	; 0x0d
    4ec4:	81 30       	cpi	r24, 0x01	; 1
    4ec6:	90 42       	sbci	r25, 0x20	; 32
    4ec8:	18 f4       	brcc	.+6      	; 0x4ed0 <spi_data_write+0x5a>
				order = 0x3;
    4eca:	83 e0       	ldi	r24, 0x03	; 3
    4ecc:	8e 83       	std	Y+6, r24	; 0x06
    4ece:	0d c0       	rjmp	.+26     	; 0x4eea <spi_data_write+0x74>
			else
				order = 0x1;
    4ed0:	81 e0       	ldi	r24, 0x01	; 1
    4ed2:	8e 83       	std	Y+6, r24	; 0x06
    4ed4:	0a c0       	rjmp	.+20     	; 0x4eea <spi_data_write+0x74>
		} else {
			if (sz <= DATA_PKT_SZ)
    4ed6:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ed8:	9d 85       	ldd	r25, Y+13	; 0x0d
    4eda:	81 30       	cpi	r24, 0x01	; 1
    4edc:	90 42       	sbci	r25, 0x20	; 32
    4ede:	18 f4       	brcc	.+6      	; 0x4ee6 <spi_data_write+0x70>
				order = 0x3;
    4ee0:	83 e0       	ldi	r24, 0x03	; 3
    4ee2:	8e 83       	std	Y+6, r24	; 0x06
    4ee4:	02 c0       	rjmp	.+4      	; 0x4eea <spi_data_write+0x74>
			else
				order = 0x2;
    4ee6:	82 e0       	ldi	r24, 0x02	; 2
    4ee8:	8e 83       	std	Y+6, r24	; 0x06
		}
		cmd |= order;
    4eea:	9f 81       	ldd	r25, Y+7	; 0x07
    4eec:	8e 81       	ldd	r24, Y+6	; 0x06
    4eee:	89 2b       	or	r24, r25
    4ef0:	8f 83       	std	Y+7, r24	; 0x07
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    4ef2:	ce 01       	movw	r24, r28
    4ef4:	07 96       	adiw	r24, 0x07	; 7
    4ef6:	61 e0       	ldi	r22, 0x01	; 1
    4ef8:	70 e0       	ldi	r23, 0x00	; 0
    4efa:	0e 94 3d 24 	call	0x487a	; 0x487a <nmi_spi_write>
    4efe:	88 23       	and	r24, r24
    4f00:	11 f0       	breq	.+4      	; 0x4f06 <spi_data_write+0x90>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
			result = N_FAIL;
    4f02:	1d 82       	std	Y+5, r1	; 0x05
			break;
    4f04:	34 c0       	rjmp	.+104    	; 0x4f6e <spi_data_write+0xf8>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    4f06:	89 81       	ldd	r24, Y+1	; 0x01
    4f08:	9a 81       	ldd	r25, Y+2	; 0x02
    4f0a:	2a 85       	ldd	r18, Y+10	; 0x0a
    4f0c:	3b 85       	ldd	r19, Y+11	; 0x0b
    4f0e:	82 0f       	add	r24, r18
    4f10:	93 1f       	adc	r25, r19
    4f12:	2b 81       	ldd	r18, Y+3	; 0x03
    4f14:	3c 81       	ldd	r19, Y+4	; 0x04
    4f16:	b9 01       	movw	r22, r18
    4f18:	0e 94 3d 24 	call	0x487a	; 0x487a <nmi_spi_write>
    4f1c:	88 23       	and	r24, r24
    4f1e:	11 f0       	breq	.+4      	; 0x4f24 <spi_data_write+0xae>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
			result = N_FAIL;
    4f20:	1d 82       	std	Y+5, r1	; 0x05
			break;
    4f22:	25 c0       	rjmp	.+74     	; 0x4f6e <spi_data_write+0xf8>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    4f24:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <gu8Crc_off>
    4f28:	88 23       	and	r24, r24
    4f2a:	51 f4       	brne	.+20     	; 0x4f40 <spi_data_write+0xca>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    4f2c:	ce 01       	movw	r24, r28
    4f2e:	08 96       	adiw	r24, 0x08	; 8
    4f30:	62 e0       	ldi	r22, 0x02	; 2
    4f32:	70 e0       	ldi	r23, 0x00	; 0
    4f34:	0e 94 3d 24 	call	0x487a	; 0x487a <nmi_spi_write>
    4f38:	88 23       	and	r24, r24
    4f3a:	11 f0       	breq	.+4      	; 0x4f40 <spi_data_write+0xca>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
				result = N_FAIL;
    4f3c:	1d 82       	std	Y+5, r1	; 0x05
				break;
    4f3e:	17 c0       	rjmp	.+46     	; 0x4f6e <spi_data_write+0xf8>
			}
		}

		ix += nbytes;
    4f40:	29 81       	ldd	r18, Y+1	; 0x01
    4f42:	3a 81       	ldd	r19, Y+2	; 0x02
    4f44:	8b 81       	ldd	r24, Y+3	; 0x03
    4f46:	9c 81       	ldd	r25, Y+4	; 0x04
    4f48:	82 0f       	add	r24, r18
    4f4a:	93 1f       	adc	r25, r19
    4f4c:	89 83       	std	Y+1, r24	; 0x01
    4f4e:	9a 83       	std	Y+2, r25	; 0x02
		sz -= nbytes;
    4f50:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f52:	3d 85       	ldd	r19, Y+13	; 0x0d
    4f54:	8b 81       	ldd	r24, Y+3	; 0x03
    4f56:	9c 81       	ldd	r25, Y+4	; 0x04
    4f58:	a9 01       	movw	r20, r18
    4f5a:	48 1b       	sub	r20, r24
    4f5c:	59 0b       	sbc	r21, r25
    4f5e:	ca 01       	movw	r24, r20
    4f60:	8c 87       	std	Y+12, r24	; 0x0c
    4f62:	9d 87       	std	Y+13, r25	; 0x0d
	} while (sz);
    4f64:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f66:	9d 85       	ldd	r25, Y+13	; 0x0d
    4f68:	89 2b       	or	r24, r25
    4f6a:	09 f0       	breq	.+2      	; 0x4f6e <spi_data_write+0xf8>
    4f6c:	95 cf       	rjmp	.-214    	; 0x4e98 <spi_data_write+0x22>


	return result;
    4f6e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4f70:	2d 96       	adiw	r28, 0x0d	; 13
    4f72:	cd bf       	out	0x3d, r28	; 61
    4f74:	de bf       	out	0x3e, r29	; 62
    4f76:	df 91       	pop	r29
    4f78:	cf 91       	pop	r28
    4f7a:	08 95       	ret

00004f7c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    4f7c:	af 92       	push	r10
    4f7e:	cf 92       	push	r12
    4f80:	df 92       	push	r13
    4f82:	ef 92       	push	r14
    4f84:	ff 92       	push	r15
    4f86:	0f 93       	push	r16
    4f88:	1f 93       	push	r17
    4f8a:	cf 93       	push	r28
    4f8c:	df 93       	push	r29
    4f8e:	cd b7       	in	r28, 0x3d	; 61
    4f90:	de b7       	in	r29, 0x3e	; 62
    4f92:	2c 97       	sbiw	r28, 0x0c	; 12
    4f94:	cd bf       	out	0x3d, r28	; 61
    4f96:	de bf       	out	0x3e, r29	; 62
    4f98:	6d 83       	std	Y+5, r22	; 0x05
    4f9a:	7e 83       	std	Y+6, r23	; 0x06
    4f9c:	8f 83       	std	Y+7, r24	; 0x07
    4f9e:	98 87       	std	Y+8, r25	; 0x08
    4fa0:	29 87       	std	Y+9, r18	; 0x09
    4fa2:	3a 87       	std	Y+10, r19	; 0x0a
    4fa4:	4b 87       	std	Y+11, r20	; 0x0b
    4fa6:	5c 87       	std	Y+12, r21	; 0x0c
	uint8 retry = SPI_RETRY_COUNT;
    4fa8:	8a e0       	ldi	r24, 0x0A	; 10
    4faa:	89 83       	std	Y+1, r24	; 0x01
	sint8 result = N_OK;
    4fac:	81 e0       	ldi	r24, 0x01	; 1
    4fae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 cmd = CMD_SINGLE_WRITE;
    4fb0:	89 ec       	ldi	r24, 0xC9	; 201
    4fb2:	8b 83       	std	Y+3, r24	; 0x03
	uint8 clockless = 0;
    4fb4:	1c 82       	std	Y+4, r1	; 0x04
	
_RETRY_:	
	if (addr <= 0x30)
    4fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    4fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    4fba:	af 81       	ldd	r26, Y+7	; 0x07
    4fbc:	b8 85       	ldd	r27, Y+8	; 0x08
    4fbe:	c1 97       	sbiw	r24, 0x31	; 49
    4fc0:	a1 05       	cpc	r26, r1
    4fc2:	b1 05       	cpc	r27, r1
    4fc4:	28 f4       	brcc	.+10     	; 0x4fd0 <spi_write_reg+0x54>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    4fc6:	83 ec       	ldi	r24, 0xC3	; 195
    4fc8:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 1;
    4fca:	81 e0       	ldi	r24, 0x01	; 1
    4fcc:	8c 83       	std	Y+4, r24	; 0x04
    4fce:	03 c0       	rjmp	.+6      	; 0x4fd6 <spi_write_reg+0x5a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    4fd0:	89 ec       	ldi	r24, 0xC9	; 201
    4fd2:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 0;
    4fd4:	1c 82       	std	Y+4, r1	; 0x04
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    4fd6:	29 85       	ldd	r18, Y+9	; 0x09
    4fd8:	3a 85       	ldd	r19, Y+10	; 0x0a
    4fda:	4b 85       	ldd	r20, Y+11	; 0x0b
    4fdc:	5c 85       	ldd	r21, Y+12	; 0x0c
    4fde:	8d 81       	ldd	r24, Y+5	; 0x05
    4fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    4fe2:	af 81       	ldd	r26, Y+7	; 0x07
    4fe4:	b8 85       	ldd	r27, Y+8	; 0x08
    4fe6:	ac 80       	ldd	r10, Y+4	; 0x04
    4fe8:	c1 2c       	mov	r12, r1
    4fea:	d1 2c       	mov	r13, r1
    4fec:	76 01       	movw	r14, r12
    4fee:	68 94       	set
    4ff0:	c2 f8       	bld	r12, 2
    4ff2:	89 01       	movw	r16, r18
    4ff4:	9a 01       	movw	r18, r20
    4ff6:	ac 01       	movw	r20, r24
    4ff8:	bd 01       	movw	r22, r26
    4ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    4ffc:	0e 94 b8 24 	call	0x4970	; 0x4970 <spi_cmd>
    5000:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    5002:	8a 81       	ldd	r24, Y+2	; 0x02
    5004:	81 30       	cpi	r24, 0x01	; 1
    5006:	29 f4       	brne	.+10     	; 0x5012 <spi_write_reg+0x96>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    5008:	8b 81       	ldd	r24, Y+3	; 0x03
    500a:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <spi_cmd_rsp>
    500e:	8a 83       	std	Y+2, r24	; 0x02
    5010:	01 c0       	rjmp	.+2      	; 0x5014 <spi_write_reg+0x98>

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5012:	00 00       	nop
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    5014:	8a 81       	ldd	r24, Y+2	; 0x02
    5016:	81 30       	cpi	r24, 0x01	; 1
    5018:	19 f1       	breq	.+70     	; 0x5060 <spi_write_reg+0xe4>
	{
		nm_bsp_sleep(1);
    501a:	61 e0       	ldi	r22, 0x01	; 1
    501c:	70 e0       	ldi	r23, 0x00	; 0
    501e:	80 e0       	ldi	r24, 0x00	; 0
    5020:	90 e0       	ldi	r25, 0x00	; 0
    5022:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5026:	a1 2c       	mov	r10, r1
    5028:	c1 2c       	mov	r12, r1
    502a:	d1 2c       	mov	r13, r1
    502c:	76 01       	movw	r14, r12
    502e:	00 e0       	ldi	r16, 0x00	; 0
    5030:	10 e0       	ldi	r17, 0x00	; 0
    5032:	98 01       	movw	r18, r16
    5034:	40 e0       	ldi	r20, 0x00	; 0
    5036:	50 e0       	ldi	r21, 0x00	; 0
    5038:	ba 01       	movw	r22, r20
    503a:	8f ec       	ldi	r24, 0xCF	; 207
    503c:	0e 94 b8 24 	call	0x4970	; 0x4970 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    5040:	8f ec       	ldi	r24, 0xCF	; 207
    5042:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
		nm_bsp_sleep(1);
    5046:	61 e0       	ldi	r22, 0x01	; 1
    5048:	70 e0       	ldi	r23, 0x00	; 0
    504a:	80 e0       	ldi	r24, 0x00	; 0
    504c:	90 e0       	ldi	r25, 0x00	; 0
    504e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <nm_bsp_sleep>
		retry--;
    5052:	89 81       	ldd	r24, Y+1	; 0x01
    5054:	81 50       	subi	r24, 0x01	; 1
    5056:	89 83       	std	Y+1, r24	; 0x01
		if(retry) goto _RETRY_;
    5058:	89 81       	ldd	r24, Y+1	; 0x01
    505a:	88 23       	and	r24, r24
    505c:	09 f0       	breq	.+2      	; 0x5060 <spi_write_reg+0xe4>
    505e:	ab cf       	rjmp	.-170    	; 0x4fb6 <spi_write_reg+0x3a>
	}

	return result;
    5060:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5062:	2c 96       	adiw	r28, 0x0c	; 12
    5064:	cd bf       	out	0x3d, r28	; 61
    5066:	de bf       	out	0x3e, r29	; 62
    5068:	df 91       	pop	r29
    506a:	cf 91       	pop	r28
    506c:	1f 91       	pop	r17
    506e:	0f 91       	pop	r16
    5070:	ff 90       	pop	r15
    5072:	ef 90       	pop	r14
    5074:	df 90       	pop	r13
    5076:	cf 90       	pop	r12
    5078:	af 90       	pop	r10
    507a:	08 95       	ret

0000507c <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    507c:	af 92       	push	r10
    507e:	cf 92       	push	r12
    5080:	df 92       	push	r13
    5082:	ef 92       	push	r14
    5084:	ff 92       	push	r15
    5086:	0f 93       	push	r16
    5088:	1f 93       	push	r17
    508a:	cf 93       	push	r28
    508c:	df 93       	push	r29
    508e:	cd b7       	in	r28, 0x3d	; 61
    5090:	de b7       	in	r29, 0x3e	; 62
    5092:	2b 97       	sbiw	r28, 0x0b	; 11
    5094:	cd bf       	out	0x3d, r28	; 61
    5096:	de bf       	out	0x3e, r29	; 62
    5098:	6c 83       	std	Y+4, r22	; 0x04
    509a:	7d 83       	std	Y+5, r23	; 0x05
    509c:	8e 83       	std	Y+6, r24	; 0x06
    509e:	9f 83       	std	Y+7, r25	; 0x07
    50a0:	48 87       	std	Y+8, r20	; 0x08
    50a2:	59 87       	std	Y+9, r21	; 0x09
    50a4:	2a 87       	std	Y+10, r18	; 0x0a
    50a6:	3b 87       	std	Y+11, r19	; 0x0b
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    50a8:	8a e0       	ldi	r24, 0x0A	; 10
    50aa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 cmd = CMD_DMA_EXT_WRITE;
    50ac:	87 ec       	ldi	r24, 0xC7	; 199
    50ae:	8b 83       	std	Y+3, r24	; 0x03
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    50b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    50b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    50b4:	01 97       	sbiw	r24, 0x01	; 1
    50b6:	21 f4       	brne	.+8      	; 0x50c0 <nm_spi_write+0x44>
		size = 2;
    50b8:	82 e0       	ldi	r24, 0x02	; 2
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	8a 87       	std	Y+10, r24	; 0x0a
    50be:	9b 87       	std	Y+11, r25	; 0x0b

	result = spi_cmd(cmd, addr, 0, size,0);
    50c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    50c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    50c4:	9c 01       	movw	r18, r24
    50c6:	40 e0       	ldi	r20, 0x00	; 0
    50c8:	50 e0       	ldi	r21, 0x00	; 0
    50ca:	8c 81       	ldd	r24, Y+4	; 0x04
    50cc:	9d 81       	ldd	r25, Y+5	; 0x05
    50ce:	ae 81       	ldd	r26, Y+6	; 0x06
    50d0:	bf 81       	ldd	r27, Y+7	; 0x07
    50d2:	a1 2c       	mov	r10, r1
    50d4:	69 01       	movw	r12, r18
    50d6:	7a 01       	movw	r14, r20
    50d8:	00 e0       	ldi	r16, 0x00	; 0
    50da:	10 e0       	ldi	r17, 0x00	; 0
    50dc:	98 01       	movw	r18, r16
    50de:	ac 01       	movw	r20, r24
    50e0:	bd 01       	movw	r22, r26
    50e2:	8b 81       	ldd	r24, Y+3	; 0x03
    50e4:	0e 94 b8 24 	call	0x4970	; 0x4970 <spi_cmd>
    50e8:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    50ea:	89 81       	ldd	r24, Y+1	; 0x01
    50ec:	81 30       	cpi	r24, 0x01	; 1
    50ee:	b9 f4       	brne	.+46     	; 0x511e <nm_spi_write+0xa2>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    50f0:	8b 81       	ldd	r24, Y+3	; 0x03
    50f2:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <spi_cmd_rsp>
    50f6:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    50f8:	89 81       	ldd	r24, Y+1	; 0x01
    50fa:	81 30       	cpi	r24, 0x01	; 1
    50fc:	91 f4       	brne	.+36     	; 0x5122 <nm_spi_write+0xa6>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    50fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    5100:	3b 85       	ldd	r19, Y+11	; 0x0b
    5102:	88 85       	ldd	r24, Y+8	; 0x08
    5104:	99 85       	ldd	r25, Y+9	; 0x09
    5106:	b9 01       	movw	r22, r18
    5108:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <spi_data_write>
    510c:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    510e:	89 81       	ldd	r24, Y+1	; 0x01
    5110:	81 30       	cpi	r24, 0x01	; 1
    5112:	49 f4       	brne	.+18     	; 0x5126 <nm_spi_write+0xaa>
		goto _FAIL_;
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    5114:	8b 81       	ldd	r24, Y+3	; 0x03
    5116:	0e 94 20 26 	call	0x4c40	; 0x4c40 <spi_data_rsp>
    511a:	89 83       	std	Y+1, r24	; 0x01
    511c:	05 c0       	rjmp	.+10     	; 0x5128 <nm_spi_write+0xac>
		size = 2;

	result = spi_cmd(cmd, addr, 0, size,0);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    511e:	00 00       	nop
    5120:	03 c0       	rjmp	.+6      	; 0x5128 <nm_spi_write+0xac>
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5122:	00 00       	nop
    5124:	01 c0       	rjmp	.+2      	; 0x5128 <nm_spi_write+0xac>
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
    5126:	00 00       	nop
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
	}
	
_FAIL_:
	if(result != N_OK)
    5128:	89 81       	ldd	r24, Y+1	; 0x01
    512a:	81 30       	cpi	r24, 0x01	; 1
    512c:	19 f1       	breq	.+70     	; 0x5174 <nm_spi_write+0xf8>
	{
		nm_bsp_sleep(1);
    512e:	61 e0       	ldi	r22, 0x01	; 1
    5130:	70 e0       	ldi	r23, 0x00	; 0
    5132:	80 e0       	ldi	r24, 0x00	; 0
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    513a:	a1 2c       	mov	r10, r1
    513c:	c1 2c       	mov	r12, r1
    513e:	d1 2c       	mov	r13, r1
    5140:	76 01       	movw	r14, r12
    5142:	00 e0       	ldi	r16, 0x00	; 0
    5144:	10 e0       	ldi	r17, 0x00	; 0
    5146:	98 01       	movw	r18, r16
    5148:	40 e0       	ldi	r20, 0x00	; 0
    514a:	50 e0       	ldi	r21, 0x00	; 0
    514c:	ba 01       	movw	r22, r20
    514e:	8f ec       	ldi	r24, 0xCF	; 207
    5150:	0e 94 b8 24 	call	0x4970	; 0x4970 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    5154:	8f ec       	ldi	r24, 0xCF	; 207
    5156:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
    515a:	61 e0       	ldi	r22, 0x01	; 1
    515c:	70 e0       	ldi	r23, 0x00	; 0
    515e:	80 e0       	ldi	r24, 0x00	; 0
    5160:	90 e0       	ldi	r25, 0x00	; 0
    5162:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <nm_bsp_sleep>
		retry--;
    5166:	8a 81       	ldd	r24, Y+2	; 0x02
    5168:	81 50       	subi	r24, 0x01	; 1
    516a:	8a 83       	std	Y+2, r24	; 0x02
		if(retry) goto _RETRY_;
    516c:	8a 81       	ldd	r24, Y+2	; 0x02
    516e:	88 23       	and	r24, r24
    5170:	09 f0       	breq	.+2      	; 0x5174 <nm_spi_write+0xf8>
    5172:	9e cf       	rjmp	.-196    	; 0x50b0 <nm_spi_write+0x34>
	}


	return result;
    5174:	89 81       	ldd	r24, Y+1	; 0x01
}
    5176:	2b 96       	adiw	r28, 0x0b	; 11
    5178:	cd bf       	out	0x3d, r28	; 61
    517a:	de bf       	out	0x3e, r29	; 62
    517c:	df 91       	pop	r29
    517e:	cf 91       	pop	r28
    5180:	1f 91       	pop	r17
    5182:	0f 91       	pop	r16
    5184:	ff 90       	pop	r15
    5186:	ef 90       	pop	r14
    5188:	df 90       	pop	r13
    518a:	cf 90       	pop	r12
    518c:	af 90       	pop	r10
    518e:	08 95       	ret

00005190 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    5190:	af 92       	push	r10
    5192:	cf 92       	push	r12
    5194:	df 92       	push	r13
    5196:	ef 92       	push	r14
    5198:	ff 92       	push	r15
    519a:	0f 93       	push	r16
    519c:	1f 93       	push	r17
    519e:	cf 93       	push	r28
    51a0:	df 93       	push	r29
    51a2:	cd b7       	in	r28, 0x3d	; 61
    51a4:	de b7       	in	r29, 0x3e	; 62
    51a6:	2e 97       	sbiw	r28, 0x0e	; 14
    51a8:	cd bf       	out	0x3d, r28	; 61
    51aa:	de bf       	out	0x3e, r29	; 62
    51ac:	69 87       	std	Y+9, r22	; 0x09
    51ae:	7a 87       	std	Y+10, r23	; 0x0a
    51b0:	8b 87       	std	Y+11, r24	; 0x0b
    51b2:	9c 87       	std	Y+12, r25	; 0x0c
    51b4:	4d 87       	std	Y+13, r20	; 0x0d
    51b6:	5e 87       	std	Y+14, r21	; 0x0e
	uint8 retry = SPI_RETRY_COUNT;
    51b8:	8a e0       	ldi	r24, 0x0A	; 10
    51ba:	89 83       	std	Y+1, r24	; 0x01
	sint8 result = N_OK;
    51bc:	81 e0       	ldi	r24, 0x01	; 1
    51be:	8a 83       	std	Y+2, r24	; 0x02
	uint8 cmd = CMD_SINGLE_READ;
    51c0:	8a ec       	ldi	r24, 0xCA	; 202
    51c2:	8b 83       	std	Y+3, r24	; 0x03
	uint8 tmp[4];
	uint8 clockless = 0;
    51c4:	1c 82       	std	Y+4, r1	; 0x04

_RETRY_:

	if (addr <= 0xff)
    51c6:	89 85       	ldd	r24, Y+9	; 0x09
    51c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    51ca:	ab 85       	ldd	r26, Y+11	; 0x0b
    51cc:	bc 85       	ldd	r27, Y+12	; 0x0c
    51ce:	8f 3f       	cpi	r24, 0xFF	; 255
    51d0:	91 05       	cpc	r25, r1
    51d2:	a1 05       	cpc	r26, r1
    51d4:	b1 05       	cpc	r27, r1
    51d6:	09 f0       	breq	.+2      	; 0x51da <spi_read_reg+0x4a>
    51d8:	28 f4       	brcc	.+10     	; 0x51e4 <spi_read_reg+0x54>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    51da:	84 ec       	ldi	r24, 0xC4	; 196
    51dc:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 1;
    51de:	81 e0       	ldi	r24, 0x01	; 1
    51e0:	8c 83       	std	Y+4, r24	; 0x04
    51e2:	03 c0       	rjmp	.+6      	; 0x51ea <spi_read_reg+0x5a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    51e4:	8a ec       	ldi	r24, 0xCA	; 202
    51e6:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 0;
    51e8:	1c 82       	std	Y+4, r1	; 0x04
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    51ea:	89 85       	ldd	r24, Y+9	; 0x09
    51ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    51ee:	ab 85       	ldd	r26, Y+11	; 0x0b
    51f0:	bc 85       	ldd	r27, Y+12	; 0x0c
    51f2:	ac 80       	ldd	r10, Y+4	; 0x04
    51f4:	c1 2c       	mov	r12, r1
    51f6:	d1 2c       	mov	r13, r1
    51f8:	76 01       	movw	r14, r12
    51fa:	68 94       	set
    51fc:	c2 f8       	bld	r12, 2
    51fe:	00 e0       	ldi	r16, 0x00	; 0
    5200:	10 e0       	ldi	r17, 0x00	; 0
    5202:	98 01       	movw	r18, r16
    5204:	ac 01       	movw	r20, r24
    5206:	bd 01       	movw	r22, r26
    5208:	8b 81       	ldd	r24, Y+3	; 0x03
    520a:	0e 94 b8 24 	call	0x4970	; 0x4970 <spi_cmd>
    520e:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    5210:	8a 81       	ldd	r24, Y+2	; 0x02
    5212:	81 30       	cpi	r24, 0x01	; 1
    5214:	09 f0       	breq	.+2      	; 0x5218 <spi_read_reg+0x88>
    5216:	46 c0       	rjmp	.+140    	; 0x52a4 <spi_read_reg+0x114>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    5218:	8b 81       	ldd	r24, Y+3	; 0x03
    521a:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <spi_cmd_rsp>
    521e:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    5220:	8a 81       	ldd	r24, Y+2	; 0x02
    5222:	81 30       	cpi	r24, 0x01	; 1
    5224:	09 f0       	breq	.+2      	; 0x5228 <spi_read_reg+0x98>
    5226:	40 c0       	rjmp	.+128    	; 0x52a8 <spi_read_reg+0x118>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    5228:	ce 01       	movw	r24, r28
    522a:	05 96       	adiw	r24, 0x05	; 5
    522c:	4c 81       	ldd	r20, Y+4	; 0x04
    522e:	64 e0       	ldi	r22, 0x04	; 4
    5230:	70 e0       	ldi	r23, 0x00	; 0
    5232:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <spi_data_read>
    5236:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    5238:	8a 81       	ldd	r24, Y+2	; 0x02
    523a:	81 30       	cpi	r24, 0x01	; 1
    523c:	b9 f5       	brne	.+110    	; 0x52ac <spi_read_reg+0x11c>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    523e:	8d 81       	ldd	r24, Y+5	; 0x05
    5240:	28 2f       	mov	r18, r24
    5242:	30 e0       	ldi	r19, 0x00	; 0
    5244:	40 e0       	ldi	r20, 0x00	; 0
    5246:	50 e0       	ldi	r21, 0x00	; 0
		((uint32)tmp[1] << 8) |
    5248:	8e 81       	ldd	r24, Y+6	; 0x06
    524a:	88 2f       	mov	r24, r24
    524c:	90 e0       	ldi	r25, 0x00	; 0
    524e:	a0 e0       	ldi	r26, 0x00	; 0
    5250:	b0 e0       	ldi	r27, 0x00	; 0
    5252:	ba 2f       	mov	r27, r26
    5254:	a9 2f       	mov	r26, r25
    5256:	98 2f       	mov	r25, r24
    5258:	88 27       	eor	r24, r24
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    525a:	28 2b       	or	r18, r24
    525c:	39 2b       	or	r19, r25
    525e:	4a 2b       	or	r20, r26
    5260:	5b 2b       	or	r21, r27
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    5262:	8f 81       	ldd	r24, Y+7	; 0x07
    5264:	88 2f       	mov	r24, r24
    5266:	90 e0       	ldi	r25, 0x00	; 0
    5268:	a0 e0       	ldi	r26, 0x00	; 0
    526a:	b0 e0       	ldi	r27, 0x00	; 0
    526c:	dc 01       	movw	r26, r24
    526e:	99 27       	eor	r25, r25
    5270:	88 27       	eor	r24, r24
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    5272:	28 2b       	or	r18, r24
    5274:	39 2b       	or	r19, r25
    5276:	4a 2b       	or	r20, r26
    5278:	5b 2b       	or	r21, r27
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    527a:	88 85       	ldd	r24, Y+8	; 0x08
    527c:	88 2f       	mov	r24, r24
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	a0 e0       	ldi	r26, 0x00	; 0
    5282:	b0 e0       	ldi	r27, 0x00	; 0
    5284:	b8 2f       	mov	r27, r24
    5286:	aa 27       	eor	r26, r26
    5288:	99 27       	eor	r25, r25
    528a:	88 27       	eor	r24, r24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    528c:	82 2b       	or	r24, r18
    528e:	93 2b       	or	r25, r19
    5290:	a4 2b       	or	r26, r20
    5292:	b5 2b       	or	r27, r21
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    5294:	2d 85       	ldd	r18, Y+13	; 0x0d
    5296:	3e 85       	ldd	r19, Y+14	; 0x0e
    5298:	f9 01       	movw	r30, r18
    529a:	80 83       	st	Z, r24
    529c:	91 83       	std	Z+1, r25	; 0x01
    529e:	a2 83       	std	Z+2, r26	; 0x02
    52a0:	b3 83       	std	Z+3, r27	; 0x03
    52a2:	05 c0       	rjmp	.+10     	; 0x52ae <spi_read_reg+0x11e>

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    52a4:	00 00       	nop
    52a6:	03 c0       	rjmp	.+6      	; 0x52ae <spi_read_reg+0x11e>
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    52a8:	00 00       	nop
    52aa:	01 c0       	rjmp	.+2      	; 0x52ae <spi_read_reg+0x11e>

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
    52ac:	00 00       	nop
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
		
_FAIL_:
	if(result != N_OK)
    52ae:	8a 81       	ldd	r24, Y+2	; 0x02
    52b0:	81 30       	cpi	r24, 0x01	; 1
    52b2:	19 f1       	breq	.+70     	; 0x52fa <spi_read_reg+0x16a>
	{
		
		nm_bsp_sleep(1);
    52b4:	61 e0       	ldi	r22, 0x01	; 1
    52b6:	70 e0       	ldi	r23, 0x00	; 0
    52b8:	80 e0       	ldi	r24, 0x00	; 0
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    52c0:	a1 2c       	mov	r10, r1
    52c2:	c1 2c       	mov	r12, r1
    52c4:	d1 2c       	mov	r13, r1
    52c6:	76 01       	movw	r14, r12
    52c8:	00 e0       	ldi	r16, 0x00	; 0
    52ca:	10 e0       	ldi	r17, 0x00	; 0
    52cc:	98 01       	movw	r18, r16
    52ce:	40 e0       	ldi	r20, 0x00	; 0
    52d0:	50 e0       	ldi	r21, 0x00	; 0
    52d2:	ba 01       	movw	r22, r20
    52d4:	8f ec       	ldi	r24, 0xCF	; 207
    52d6:	0e 94 b8 24 	call	0x4970	; 0x4970 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    52da:	8f ec       	ldi	r24, 0xCF	; 207
    52dc:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
    52e0:	61 e0       	ldi	r22, 0x01	; 1
    52e2:	70 e0       	ldi	r23, 0x00	; 0
    52e4:	80 e0       	ldi	r24, 0x00	; 0
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <nm_bsp_sleep>
		retry--;
    52ec:	89 81       	ldd	r24, Y+1	; 0x01
    52ee:	81 50       	subi	r24, 0x01	; 1
    52f0:	89 83       	std	Y+1, r24	; 0x01
		if(retry) goto _RETRY_;
    52f2:	89 81       	ldd	r24, Y+1	; 0x01
    52f4:	88 23       	and	r24, r24
    52f6:	09 f0       	breq	.+2      	; 0x52fa <spi_read_reg+0x16a>
    52f8:	66 cf       	rjmp	.-308    	; 0x51c6 <spi_read_reg+0x36>
	}
		
	return result;
    52fa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    52fc:	2e 96       	adiw	r28, 0x0e	; 14
    52fe:	cd bf       	out	0x3d, r28	; 61
    5300:	de bf       	out	0x3e, r29	; 62
    5302:	df 91       	pop	r29
    5304:	cf 91       	pop	r28
    5306:	1f 91       	pop	r17
    5308:	0f 91       	pop	r16
    530a:	ff 90       	pop	r15
    530c:	ef 90       	pop	r14
    530e:	df 90       	pop	r13
    5310:	cf 90       	pop	r12
    5312:	af 90       	pop	r10
    5314:	08 95       	ret

00005316 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    5316:	af 92       	push	r10
    5318:	cf 92       	push	r12
    531a:	df 92       	push	r13
    531c:	ef 92       	push	r14
    531e:	ff 92       	push	r15
    5320:	0f 93       	push	r16
    5322:	1f 93       	push	r17
    5324:	cf 93       	push	r28
    5326:	df 93       	push	r29
    5328:	cd b7       	in	r28, 0x3d	; 61
    532a:	de b7       	in	r29, 0x3e	; 62
    532c:	2e 97       	sbiw	r28, 0x0e	; 14
    532e:	cd bf       	out	0x3d, r28	; 61
    5330:	de bf       	out	0x3e, r29	; 62
    5332:	6f 83       	std	Y+7, r22	; 0x07
    5334:	78 87       	std	Y+8, r23	; 0x08
    5336:	89 87       	std	Y+9, r24	; 0x09
    5338:	9a 87       	std	Y+10, r25	; 0x0a
    533a:	4b 87       	std	Y+11, r20	; 0x0b
    533c:	5c 87       	std	Y+12, r21	; 0x0c
    533e:	2d 87       	std	Y+13, r18	; 0x0d
    5340:	3e 87       	std	Y+14, r19	; 0x0e
	uint8 cmd = CMD_DMA_EXT_READ;
    5342:	88 ec       	ldi	r24, 0xC8	; 200
    5344:	8c 83       	std	Y+4, r24	; 0x04
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    5346:	8a e0       	ldi	r24, 0x0A	; 10
    5348:	8a 83       	std	Y+2, r24	; 0x02
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    534a:	1b 82       	std	Y+3, r1	; 0x03

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    534c:	8d 85       	ldd	r24, Y+13	; 0x0d
    534e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5350:	01 97       	sbiw	r24, 0x01	; 1
    5352:	31 f4       	brne	.+12     	; 0x5360 <nm_spi_read+0x4a>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    5354:	82 e0       	ldi	r24, 0x02	; 2
    5356:	90 e0       	ldi	r25, 0x00	; 0
    5358:	8d 87       	std	Y+13, r24	; 0x0d
    535a:	9e 87       	std	Y+14, r25	; 0x0e
		single_byte_workaround = 1;
    535c:	81 e0       	ldi	r24, 0x01	; 1
    535e:	8b 83       	std	Y+3, r24	; 0x03
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    5360:	8d 85       	ldd	r24, Y+13	; 0x0d
    5362:	9e 85       	ldd	r25, Y+14	; 0x0e
    5364:	9c 01       	movw	r18, r24
    5366:	40 e0       	ldi	r20, 0x00	; 0
    5368:	50 e0       	ldi	r21, 0x00	; 0
    536a:	8f 81       	ldd	r24, Y+7	; 0x07
    536c:	98 85       	ldd	r25, Y+8	; 0x08
    536e:	a9 85       	ldd	r26, Y+9	; 0x09
    5370:	ba 85       	ldd	r27, Y+10	; 0x0a
    5372:	a1 2c       	mov	r10, r1
    5374:	69 01       	movw	r12, r18
    5376:	7a 01       	movw	r14, r20
    5378:	00 e0       	ldi	r16, 0x00	; 0
    537a:	10 e0       	ldi	r17, 0x00	; 0
    537c:	98 01       	movw	r18, r16
    537e:	ac 01       	movw	r20, r24
    5380:	bd 01       	movw	r22, r26
    5382:	8c 81       	ldd	r24, Y+4	; 0x04
    5384:	0e 94 b8 24 	call	0x4970	; 0x4970 <spi_cmd>
    5388:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    538a:	89 81       	ldd	r24, Y+1	; 0x01
    538c:	81 30       	cpi	r24, 0x01	; 1
    538e:	19 f5       	brne	.+70     	; 0x53d6 <nm_spi_read+0xc0>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    5390:	8c 81       	ldd	r24, Y+4	; 0x04
    5392:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <spi_cmd_rsp>
    5396:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    5398:	89 81       	ldd	r24, Y+1	; 0x01
    539a:	81 30       	cpi	r24, 0x01	; 1
    539c:	f1 f4       	brne	.+60     	; 0x53da <nm_spi_read+0xc4>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    539e:	8b 81       	ldd	r24, Y+3	; 0x03
    53a0:	88 23       	and	r24, r24
    53a2:	79 f0       	breq	.+30     	; 0x53c2 <nm_spi_read+0xac>
	{
		result = spi_data_read(tmp, size,0);
    53a4:	2d 85       	ldd	r18, Y+13	; 0x0d
    53a6:	3e 85       	ldd	r19, Y+14	; 0x0e
    53a8:	ce 01       	movw	r24, r28
    53aa:	05 96       	adiw	r24, 0x05	; 5
    53ac:	40 e0       	ldi	r20, 0x00	; 0
    53ae:	b9 01       	movw	r22, r18
    53b0:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <spi_data_read>
    53b4:	89 83       	std	Y+1, r24	; 0x01
		buf[0] = tmp[0];
    53b6:	2d 81       	ldd	r18, Y+5	; 0x05
    53b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    53ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    53bc:	fc 01       	movw	r30, r24
    53be:	20 83       	st	Z, r18
    53c0:	0d c0       	rjmp	.+26     	; 0x53dc <nm_spi_read+0xc6>
	}
	else
		result = spi_data_read(buf, size,0);
    53c2:	2d 85       	ldd	r18, Y+13	; 0x0d
    53c4:	3e 85       	ldd	r19, Y+14	; 0x0e
    53c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    53c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    53ca:	40 e0       	ldi	r20, 0x00	; 0
    53cc:	b9 01       	movw	r22, r18
    53ce:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <spi_data_read>
    53d2:	89 83       	std	Y+1, r24	; 0x01
    53d4:	03 c0       	rjmp	.+6      	; 0x53dc <nm_spi_read+0xc6>
		single_byte_workaround = 1;
	}
	result = spi_cmd(cmd, addr, 0, size,0);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    53d6:	00 00       	nop
    53d8:	01 c0       	rjmp	.+2      	; 0x53dc <nm_spi_read+0xc6>
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    53da:	00 00       	nop
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    53dc:	89 81       	ldd	r24, Y+1	; 0x01
    53de:	81 30       	cpi	r24, 0x01	; 1
    53e0:	19 f1       	breq	.+70     	; 0x5428 <nm_spi_read+0x112>
	{
		nm_bsp_sleep(1);
    53e2:	61 e0       	ldi	r22, 0x01	; 1
    53e4:	70 e0       	ldi	r23, 0x00	; 0
    53e6:	80 e0       	ldi	r24, 0x00	; 0
    53e8:	90 e0       	ldi	r25, 0x00	; 0
    53ea:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    53ee:	a1 2c       	mov	r10, r1
    53f0:	c1 2c       	mov	r12, r1
    53f2:	d1 2c       	mov	r13, r1
    53f4:	76 01       	movw	r14, r12
    53f6:	00 e0       	ldi	r16, 0x00	; 0
    53f8:	10 e0       	ldi	r17, 0x00	; 0
    53fa:	98 01       	movw	r18, r16
    53fc:	40 e0       	ldi	r20, 0x00	; 0
    53fe:	50 e0       	ldi	r21, 0x00	; 0
    5400:	ba 01       	movw	r22, r20
    5402:	8f ec       	ldi	r24, 0xCF	; 207
    5404:	0e 94 b8 24 	call	0x4970	; 0x4970 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    5408:	8f ec       	ldi	r24, 0xCF	; 207
    540a:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
    540e:	61 e0       	ldi	r22, 0x01	; 1
    5410:	70 e0       	ldi	r23, 0x00	; 0
    5412:	80 e0       	ldi	r24, 0x00	; 0
    5414:	90 e0       	ldi	r25, 0x00	; 0
    5416:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <nm_bsp_sleep>
		retry--;
    541a:	8a 81       	ldd	r24, Y+2	; 0x02
    541c:	81 50       	subi	r24, 0x01	; 1
    541e:	8a 83       	std	Y+2, r24	; 0x02
		if(retry) goto _RETRY_;
    5420:	8a 81       	ldd	r24, Y+2	; 0x02
    5422:	88 23       	and	r24, r24
    5424:	09 f0       	breq	.+2      	; 0x5428 <nm_spi_read+0x112>
    5426:	92 cf       	rjmp	.-220    	; 0x534c <nm_spi_read+0x36>
	}

	return result;
    5428:	89 81       	ldd	r24, Y+1	; 0x01
}
    542a:	2e 96       	adiw	r28, 0x0e	; 14
    542c:	cd bf       	out	0x3d, r28	; 61
    542e:	de bf       	out	0x3e, r29	; 62
    5430:	df 91       	pop	r29
    5432:	cf 91       	pop	r28
    5434:	1f 91       	pop	r17
    5436:	0f 91       	pop	r16
    5438:	ff 90       	pop	r15
    543a:	ef 90       	pop	r14
    543c:	df 90       	pop	r13
    543e:	cf 90       	pop	r12
    5440:	af 90       	pop	r10
    5442:	08 95       	ret

00005444 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    5444:	cf 93       	push	r28
    5446:	df 93       	push	r29
    5448:	00 d0       	rcall	.+0      	; 0x544a <spi_init_pkt_sz+0x6>
    544a:	00 d0       	rcall	.+0      	; 0x544c <spi_init_pkt_sz+0x8>
    544c:	cd b7       	in	r28, 0x3d	; 61
    544e:	de b7       	in	r29, 0x3e	; 62
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    5450:	64 e2       	ldi	r22, 0x24	; 36
    5452:	78 ee       	ldi	r23, 0xE8	; 232
    5454:	80 e0       	ldi	r24, 0x00	; 0
    5456:	90 e0       	ldi	r25, 0x00	; 0
    5458:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <nm_spi_read_reg>
    545c:	dc 01       	movw	r26, r24
    545e:	cb 01       	movw	r24, r22
    5460:	89 83       	std	Y+1, r24	; 0x01
    5462:	9a 83       	std	Y+2, r25	; 0x02
    5464:	ab 83       	std	Y+3, r26	; 0x03
    5466:	bc 83       	std	Y+4, r27	; 0x04
	val32 &= ~(0x7 << 4);
    5468:	89 81       	ldd	r24, Y+1	; 0x01
    546a:	9a 81       	ldd	r25, Y+2	; 0x02
    546c:	ab 81       	ldd	r26, Y+3	; 0x03
    546e:	bc 81       	ldd	r27, Y+4	; 0x04
    5470:	8f 78       	andi	r24, 0x8F	; 143
    5472:	89 83       	std	Y+1, r24	; 0x01
    5474:	9a 83       	std	Y+2, r25	; 0x02
    5476:	ab 83       	std	Y+3, r26	; 0x03
    5478:	bc 83       	std	Y+4, r27	; 0x04
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    547a:	89 81       	ldd	r24, Y+1	; 0x01
    547c:	9a 81       	ldd	r25, Y+2	; 0x02
    547e:	ab 81       	ldd	r26, Y+3	; 0x03
    5480:	bc 81       	ldd	r27, Y+4	; 0x04
    5482:	80 65       	ori	r24, 0x50	; 80
    5484:	89 83       	std	Y+1, r24	; 0x01
    5486:	9a 83       	std	Y+2, r25	; 0x02
    5488:	ab 83       	std	Y+3, r26	; 0x03
    548a:	bc 83       	std	Y+4, r27	; 0x04
    548c:	00 00       	nop

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    548e:	89 81       	ldd	r24, Y+1	; 0x01
    5490:	9a 81       	ldd	r25, Y+2	; 0x02
    5492:	ab 81       	ldd	r26, Y+3	; 0x03
    5494:	bc 81       	ldd	r27, Y+4	; 0x04
    5496:	9c 01       	movw	r18, r24
    5498:	ad 01       	movw	r20, r26
    549a:	64 e2       	ldi	r22, 0x24	; 36
    549c:	78 ee       	ldi	r23, 0xE8	; 232
    549e:	80 e0       	ldi	r24, 0x00	; 0
    54a0:	90 e0       	ldi	r25, 0x00	; 0
    54a2:	0e 94 44 2b 	call	0x5688	; 0x5688 <nm_spi_write_reg>
}
    54a6:	00 00       	nop
    54a8:	24 96       	adiw	r28, 0x04	; 4
    54aa:	cd bf       	out	0x3d, r28	; 61
    54ac:	de bf       	out	0x3e, r29	; 62
    54ae:	df 91       	pop	r29
    54b0:	cf 91       	pop	r28
    54b2:	08 95       	ret

000054b4 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    54b4:	af 92       	push	r10
    54b6:	cf 92       	push	r12
    54b8:	df 92       	push	r13
    54ba:	ef 92       	push	r14
    54bc:	ff 92       	push	r15
    54be:	0f 93       	push	r16
    54c0:	1f 93       	push	r17
    54c2:	cf 93       	push	r28
    54c4:	df 93       	push	r29
    54c6:	cd b7       	in	r28, 0x3d	; 61
    54c8:	de b7       	in	r29, 0x3e	; 62
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    54ca:	a1 2c       	mov	r10, r1
    54cc:	c1 2c       	mov	r12, r1
    54ce:	d1 2c       	mov	r13, r1
    54d0:	76 01       	movw	r14, r12
    54d2:	00 e0       	ldi	r16, 0x00	; 0
    54d4:	10 e0       	ldi	r17, 0x00	; 0
    54d6:	98 01       	movw	r18, r16
    54d8:	40 e0       	ldi	r20, 0x00	; 0
    54da:	50 e0       	ldi	r21, 0x00	; 0
    54dc:	ba 01       	movw	r22, r20
    54de:	8f ec       	ldi	r24, 0xCF	; 207
    54e0:	0e 94 b8 24 	call	0x4970	; 0x4970 <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
    54e4:	8f ec       	ldi	r24, 0xCF	; 207
    54e6:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <spi_cmd_rsp>
	return M2M_SUCCESS;
    54ea:	80 e0       	ldi	r24, 0x00	; 0
}
    54ec:	df 91       	pop	r29
    54ee:	cf 91       	pop	r28
    54f0:	1f 91       	pop	r17
    54f2:	0f 91       	pop	r16
    54f4:	ff 90       	pop	r15
    54f6:	ef 90       	pop	r14
    54f8:	df 90       	pop	r13
    54fa:	cf 90       	pop	r12
    54fc:	af 90       	pop	r10
    54fe:	08 95       	ret

00005500 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    5500:	cf 93       	push	r28
    5502:	df 93       	push	r29
    5504:	cd b7       	in	r28, 0x3d	; 61
    5506:	de b7       	in	r29, 0x3e	; 62
    5508:	28 97       	sbiw	r28, 0x08	; 8
    550a:	cd bf       	out	0x3d, r28	; 61
    550c:	de bf       	out	0x3e, r29	; 62
	uint32 chipid;
	uint32 reg = 0;
    550e:	1d 82       	std	Y+5, r1	; 0x05
    5510:	1e 82       	std	Y+6, r1	; 0x06
    5512:	1f 82       	std	Y+7, r1	; 0x07
    5514:	18 86       	std	Y+8, r1	; 0x08
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    5516:	10 92 11 2e 	sts	0x2E11, r1	; 0x802e11 <gu8Crc_off>

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    551a:	ce 01       	movw	r24, r28
    551c:	05 96       	adiw	r24, 0x05	; 5
    551e:	ac 01       	movw	r20, r24
    5520:	64 e2       	ldi	r22, 0x24	; 36
    5522:	78 ee       	ldi	r23, 0xE8	; 232
    5524:	80 e0       	ldi	r24, 0x00	; 0
    5526:	90 e0       	ldi	r25, 0x00	; 0
    5528:	0e 94 c8 28 	call	0x5190	; 0x5190 <spi_read_reg>
    552c:	88 23       	and	r24, r24
    552e:	81 f4       	brne	.+32     	; 0x5550 <nm_spi_init+0x50>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    5530:	81 e0       	ldi	r24, 0x01	; 1
    5532:	80 93 11 2e 	sts	0x2E11, r24	; 0x802e11 <gu8Crc_off>
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    5536:	ce 01       	movw	r24, r28
    5538:	05 96       	adiw	r24, 0x05	; 5
    553a:	ac 01       	movw	r20, r24
    553c:	64 e2       	ldi	r22, 0x24	; 36
    553e:	78 ee       	ldi	r23, 0xE8	; 232
    5540:	80 e0       	ldi	r24, 0x00	; 0
    5542:	90 e0       	ldi	r25, 0x00	; 0
    5544:	0e 94 c8 28 	call	0x5190	; 0x5190 <spi_read_reg>
    5548:	88 23       	and	r24, r24
    554a:	11 f4       	brne	.+4      	; 0x5550 <nm_spi_init+0x50>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
    554c:	80 e0       	ldi	r24, 0x00	; 0
    554e:	42 c0       	rjmp	.+132    	; 0x55d4 <nm_spi_init+0xd4>
		}
	}
	if(gu8Crc_off == 0)
    5550:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <gu8Crc_off>
    5554:	88 23       	and	r24, r24
    5556:	71 f5       	brne	.+92     	; 0x55b4 <nm_spi_init+0xb4>
	{
		reg &= ~0xc;	/* disable crc checking */
    5558:	8d 81       	ldd	r24, Y+5	; 0x05
    555a:	9e 81       	ldd	r25, Y+6	; 0x06
    555c:	af 81       	ldd	r26, Y+7	; 0x07
    555e:	b8 85       	ldd	r27, Y+8	; 0x08
    5560:	83 7f       	andi	r24, 0xF3	; 243
    5562:	8d 83       	std	Y+5, r24	; 0x05
    5564:	9e 83       	std	Y+6, r25	; 0x06
    5566:	af 83       	std	Y+7, r26	; 0x07
    5568:	b8 87       	std	Y+8, r27	; 0x08
		reg &= ~0x70;
    556a:	8d 81       	ldd	r24, Y+5	; 0x05
    556c:	9e 81       	ldd	r25, Y+6	; 0x06
    556e:	af 81       	ldd	r26, Y+7	; 0x07
    5570:	b8 85       	ldd	r27, Y+8	; 0x08
    5572:	8f 78       	andi	r24, 0x8F	; 143
    5574:	8d 83       	std	Y+5, r24	; 0x05
    5576:	9e 83       	std	Y+6, r25	; 0x06
    5578:	af 83       	std	Y+7, r26	; 0x07
    557a:	b8 87       	std	Y+8, r27	; 0x08
		reg |= (0x5 << 4);
    557c:	8d 81       	ldd	r24, Y+5	; 0x05
    557e:	9e 81       	ldd	r25, Y+6	; 0x06
    5580:	af 81       	ldd	r26, Y+7	; 0x07
    5582:	b8 85       	ldd	r27, Y+8	; 0x08
    5584:	80 65       	ori	r24, 0x50	; 80
    5586:	8d 83       	std	Y+5, r24	; 0x05
    5588:	9e 83       	std	Y+6, r25	; 0x06
    558a:	af 83       	std	Y+7, r26	; 0x07
    558c:	b8 87       	std	Y+8, r27	; 0x08
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    558e:	8d 81       	ldd	r24, Y+5	; 0x05
    5590:	9e 81       	ldd	r25, Y+6	; 0x06
    5592:	af 81       	ldd	r26, Y+7	; 0x07
    5594:	b8 85       	ldd	r27, Y+8	; 0x08
    5596:	9c 01       	movw	r18, r24
    5598:	ad 01       	movw	r20, r26
    559a:	64 e2       	ldi	r22, 0x24	; 36
    559c:	78 ee       	ldi	r23, 0xE8	; 232
    559e:	80 e0       	ldi	r24, 0x00	; 0
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <spi_write_reg>
    55a6:	88 23       	and	r24, r24
    55a8:	11 f4       	brne	.+4      	; 0x55ae <nm_spi_init+0xae>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
    55aa:	80 e0       	ldi	r24, 0x00	; 0
    55ac:	13 c0       	rjmp	.+38     	; 0x55d4 <nm_spi_init+0xd4>
		}
		gu8Crc_off = 1;
    55ae:	81 e0       	ldi	r24, 0x01	; 1
    55b0:	80 93 11 2e 	sts	0x2E11, r24	; 0x802e11 <gu8Crc_off>
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    55b4:	ce 01       	movw	r24, r28
    55b6:	01 96       	adiw	r24, 0x01	; 1
    55b8:	ac 01       	movw	r20, r24
    55ba:	60 e0       	ldi	r22, 0x00	; 0
    55bc:	70 e1       	ldi	r23, 0x10	; 16
    55be:	80 e0       	ldi	r24, 0x00	; 0
    55c0:	90 e0       	ldi	r25, 0x00	; 0
    55c2:	0e 94 c8 28 	call	0x5190	; 0x5190 <spi_read_reg>
    55c6:	88 23       	and	r24, r24
    55c8:	11 f4       	brne	.+4      	; 0x55ce <nm_spi_init+0xce>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
    55ca:	8a ef       	ldi	r24, 0xFA	; 250
    55cc:	03 c0       	rjmp	.+6      	; 0x55d4 <nm_spi_init+0xd4>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    55ce:	0e 94 22 2a 	call	0x5444	; 0x5444 <spi_init_pkt_sz>


	return M2M_SUCCESS;
    55d2:	80 e0       	ldi	r24, 0x00	; 0
}
    55d4:	28 96       	adiw	r28, 0x08	; 8
    55d6:	cd bf       	out	0x3d, r28	; 61
    55d8:	de bf       	out	0x3e, r29	; 62
    55da:	df 91       	pop	r29
    55dc:	cf 91       	pop	r28
    55de:	08 95       	ret

000055e0 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    55e0:	cf 93       	push	r28
    55e2:	df 93       	push	r29
    55e4:	cd b7       	in	r28, 0x3d	; 61
    55e6:	de b7       	in	r29, 0x3e	; 62
	gu8Crc_off = 0;
    55e8:	10 92 11 2e 	sts	0x2E11, r1	; 0x802e11 <gu8Crc_off>
	return M2M_SUCCESS;
    55ec:	80 e0       	ldi	r24, 0x00	; 0
}
    55ee:	df 91       	pop	r29
    55f0:	cf 91       	pop	r28
    55f2:	08 95       	ret

000055f4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    55f4:	cf 93       	push	r28
    55f6:	df 93       	push	r29
    55f8:	cd b7       	in	r28, 0x3d	; 61
    55fa:	de b7       	in	r29, 0x3e	; 62
    55fc:	28 97       	sbiw	r28, 0x08	; 8
    55fe:	cd bf       	out	0x3d, r28	; 61
    5600:	de bf       	out	0x3e, r29	; 62
    5602:	6d 83       	std	Y+5, r22	; 0x05
    5604:	7e 83       	std	Y+6, r23	; 0x06
    5606:	8f 83       	std	Y+7, r24	; 0x07
    5608:	98 87       	std	Y+8, r25	; 0x08
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    560a:	8d 81       	ldd	r24, Y+5	; 0x05
    560c:	9e 81       	ldd	r25, Y+6	; 0x06
    560e:	af 81       	ldd	r26, Y+7	; 0x07
    5610:	b8 85       	ldd	r27, Y+8	; 0x08
    5612:	9e 01       	movw	r18, r28
    5614:	2f 5f       	subi	r18, 0xFF	; 255
    5616:	3f 4f       	sbci	r19, 0xFF	; 255
    5618:	a9 01       	movw	r20, r18
    561a:	bc 01       	movw	r22, r24
    561c:	cd 01       	movw	r24, r26
    561e:	0e 94 c8 28 	call	0x5190	; 0x5190 <spi_read_reg>

	return u32Val;
    5622:	89 81       	ldd	r24, Y+1	; 0x01
    5624:	9a 81       	ldd	r25, Y+2	; 0x02
    5626:	ab 81       	ldd	r26, Y+3	; 0x03
    5628:	bc 81       	ldd	r27, Y+4	; 0x04
}
    562a:	bc 01       	movw	r22, r24
    562c:	cd 01       	movw	r24, r26
    562e:	28 96       	adiw	r28, 0x08	; 8
    5630:	cd bf       	out	0x3d, r28	; 61
    5632:	de bf       	out	0x3e, r29	; 62
    5634:	df 91       	pop	r29
    5636:	cf 91       	pop	r28
    5638:	08 95       	ret

0000563a <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    563a:	cf 93       	push	r28
    563c:	df 93       	push	r29
    563e:	cd b7       	in	r28, 0x3d	; 61
    5640:	de b7       	in	r29, 0x3e	; 62
    5642:	27 97       	sbiw	r28, 0x07	; 7
    5644:	cd bf       	out	0x3d, r28	; 61
    5646:	de bf       	out	0x3e, r29	; 62
    5648:	6a 83       	std	Y+2, r22	; 0x02
    564a:	7b 83       	std	Y+3, r23	; 0x03
    564c:	8c 83       	std	Y+4, r24	; 0x04
    564e:	9d 83       	std	Y+5, r25	; 0x05
    5650:	4e 83       	std	Y+6, r20	; 0x06
    5652:	5f 83       	std	Y+7, r21	; 0x07
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    5654:	2e 81       	ldd	r18, Y+6	; 0x06
    5656:	3f 81       	ldd	r19, Y+7	; 0x07
    5658:	8a 81       	ldd	r24, Y+2	; 0x02
    565a:	9b 81       	ldd	r25, Y+3	; 0x03
    565c:	ac 81       	ldd	r26, Y+4	; 0x04
    565e:	bd 81       	ldd	r27, Y+5	; 0x05
    5660:	a9 01       	movw	r20, r18
    5662:	bc 01       	movw	r22, r24
    5664:	cd 01       	movw	r24, r26
    5666:	0e 94 c8 28 	call	0x5190	; 0x5190 <spi_read_reg>
    566a:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    566c:	89 81       	ldd	r24, Y+1	; 0x01
    566e:	81 30       	cpi	r24, 0x01	; 1
    5670:	11 f4       	brne	.+4      	; 0x5676 <nm_spi_read_reg_with_ret+0x3c>
    5672:	19 82       	std	Y+1, r1	; 0x01
    5674:	02 c0       	rjmp	.+4      	; 0x567a <nm_spi_read_reg_with_ret+0x40>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5676:	8a ef       	ldi	r24, 0xFA	; 250
    5678:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    567a:	89 81       	ldd	r24, Y+1	; 0x01
}
    567c:	27 96       	adiw	r28, 0x07	; 7
    567e:	cd bf       	out	0x3d, r28	; 61
    5680:	de bf       	out	0x3e, r29	; 62
    5682:	df 91       	pop	r29
    5684:	cf 91       	pop	r28
    5686:	08 95       	ret

00005688 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    5688:	cf 93       	push	r28
    568a:	df 93       	push	r29
    568c:	cd b7       	in	r28, 0x3d	; 61
    568e:	de b7       	in	r29, 0x3e	; 62
    5690:	29 97       	sbiw	r28, 0x09	; 9
    5692:	cd bf       	out	0x3d, r28	; 61
    5694:	de bf       	out	0x3e, r29	; 62
    5696:	6a 83       	std	Y+2, r22	; 0x02
    5698:	7b 83       	std	Y+3, r23	; 0x03
    569a:	8c 83       	std	Y+4, r24	; 0x04
    569c:	9d 83       	std	Y+5, r25	; 0x05
    569e:	2e 83       	std	Y+6, r18	; 0x06
    56a0:	3f 83       	std	Y+7, r19	; 0x07
    56a2:	48 87       	std	Y+8, r20	; 0x08
    56a4:	59 87       	std	Y+9, r21	; 0x09
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    56a6:	2e 81       	ldd	r18, Y+6	; 0x06
    56a8:	3f 81       	ldd	r19, Y+7	; 0x07
    56aa:	48 85       	ldd	r20, Y+8	; 0x08
    56ac:	59 85       	ldd	r21, Y+9	; 0x09
    56ae:	8a 81       	ldd	r24, Y+2	; 0x02
    56b0:	9b 81       	ldd	r25, Y+3	; 0x03
    56b2:	ac 81       	ldd	r26, Y+4	; 0x04
    56b4:	bd 81       	ldd	r27, Y+5	; 0x05
    56b6:	bc 01       	movw	r22, r24
    56b8:	cd 01       	movw	r24, r26
    56ba:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <spi_write_reg>
    56be:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    56c0:	89 81       	ldd	r24, Y+1	; 0x01
    56c2:	81 30       	cpi	r24, 0x01	; 1
    56c4:	11 f4       	brne	.+4      	; 0x56ca <nm_spi_write_reg+0x42>
    56c6:	19 82       	std	Y+1, r1	; 0x01
    56c8:	02 c0       	rjmp	.+4      	; 0x56ce <nm_spi_write_reg+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    56ca:	8a ef       	ldi	r24, 0xFA	; 250
    56cc:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    56ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    56d0:	29 96       	adiw	r28, 0x09	; 9
    56d2:	cd bf       	out	0x3d, r28	; 61
    56d4:	de bf       	out	0x3e, r29	; 62
    56d6:	df 91       	pop	r29
    56d8:	cf 91       	pop	r28
    56da:	08 95       	ret

000056dc <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    56dc:	cf 93       	push	r28
    56de:	df 93       	push	r29
    56e0:	cd b7       	in	r28, 0x3d	; 61
    56e2:	de b7       	in	r29, 0x3e	; 62
    56e4:	29 97       	sbiw	r28, 0x09	; 9
    56e6:	cd bf       	out	0x3d, r28	; 61
    56e8:	de bf       	out	0x3e, r29	; 62
    56ea:	6a 83       	std	Y+2, r22	; 0x02
    56ec:	7b 83       	std	Y+3, r23	; 0x03
    56ee:	8c 83       	std	Y+4, r24	; 0x04
    56f0:	9d 83       	std	Y+5, r25	; 0x05
    56f2:	4e 83       	std	Y+6, r20	; 0x06
    56f4:	5f 83       	std	Y+7, r21	; 0x07
    56f6:	28 87       	std	Y+8, r18	; 0x08
    56f8:	39 87       	std	Y+9, r19	; 0x09
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    56fa:	28 85       	ldd	r18, Y+8	; 0x08
    56fc:	39 85       	ldd	r19, Y+9	; 0x09
    56fe:	4e 81       	ldd	r20, Y+6	; 0x06
    5700:	5f 81       	ldd	r21, Y+7	; 0x07
    5702:	8a 81       	ldd	r24, Y+2	; 0x02
    5704:	9b 81       	ldd	r25, Y+3	; 0x03
    5706:	ac 81       	ldd	r26, Y+4	; 0x04
    5708:	bd 81       	ldd	r27, Y+5	; 0x05
    570a:	bc 01       	movw	r22, r24
    570c:	cd 01       	movw	r24, r26
    570e:	0e 94 8b 29 	call	0x5316	; 0x5316 <nm_spi_read>
    5712:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5714:	89 81       	ldd	r24, Y+1	; 0x01
    5716:	81 30       	cpi	r24, 0x01	; 1
    5718:	11 f4       	brne	.+4      	; 0x571e <nm_spi_read_block+0x42>
    571a:	19 82       	std	Y+1, r1	; 0x01
    571c:	02 c0       	rjmp	.+4      	; 0x5722 <nm_spi_read_block+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    571e:	8a ef       	ldi	r24, 0xFA	; 250
    5720:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    5722:	89 81       	ldd	r24, Y+1	; 0x01
}
    5724:	29 96       	adiw	r28, 0x09	; 9
    5726:	cd bf       	out	0x3d, r28	; 61
    5728:	de bf       	out	0x3e, r29	; 62
    572a:	df 91       	pop	r29
    572c:	cf 91       	pop	r28
    572e:	08 95       	ret

00005730 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    5730:	cf 93       	push	r28
    5732:	df 93       	push	r29
    5734:	cd b7       	in	r28, 0x3d	; 61
    5736:	de b7       	in	r29, 0x3e	; 62
    5738:	29 97       	sbiw	r28, 0x09	; 9
    573a:	cd bf       	out	0x3d, r28	; 61
    573c:	de bf       	out	0x3e, r29	; 62
    573e:	6a 83       	std	Y+2, r22	; 0x02
    5740:	7b 83       	std	Y+3, r23	; 0x03
    5742:	8c 83       	std	Y+4, r24	; 0x04
    5744:	9d 83       	std	Y+5, r25	; 0x05
    5746:	4e 83       	std	Y+6, r20	; 0x06
    5748:	5f 83       	std	Y+7, r21	; 0x07
    574a:	28 87       	std	Y+8, r18	; 0x08
    574c:	39 87       	std	Y+9, r19	; 0x09
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    574e:	28 85       	ldd	r18, Y+8	; 0x08
    5750:	39 85       	ldd	r19, Y+9	; 0x09
    5752:	4e 81       	ldd	r20, Y+6	; 0x06
    5754:	5f 81       	ldd	r21, Y+7	; 0x07
    5756:	8a 81       	ldd	r24, Y+2	; 0x02
    5758:	9b 81       	ldd	r25, Y+3	; 0x03
    575a:	ac 81       	ldd	r26, Y+4	; 0x04
    575c:	bd 81       	ldd	r27, Y+5	; 0x05
    575e:	bc 01       	movw	r22, r24
    5760:	cd 01       	movw	r24, r26
    5762:	0e 94 3e 28 	call	0x507c	; 0x507c <nm_spi_write>
    5766:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5768:	89 81       	ldd	r24, Y+1	; 0x01
    576a:	81 30       	cpi	r24, 0x01	; 1
    576c:	11 f4       	brne	.+4      	; 0x5772 <nm_spi_write_block+0x42>
    576e:	19 82       	std	Y+1, r1	; 0x01
    5770:	02 c0       	rjmp	.+4      	; 0x5776 <nm_spi_write_block+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5772:	8a ef       	ldi	r24, 0xFA	; 250
    5774:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    5776:	89 81       	ldd	r24, Y+1	; 0x01
}
    5778:	29 96       	adiw	r28, 0x09	; 9
    577a:	cd bf       	out	0x3d, r28	; 61
    577c:	de bf       	out	0x3e, r29	; 62
    577e:	df 91       	pop	r29
    5780:	cf 91       	pop	r28
    5782:	08 95       	ret

00005784 <Socket_ReadSocketData>:
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
    5784:	ef 92       	push	r14
    5786:	ff 92       	push	r15
    5788:	0f 93       	push	r16
    578a:	1f 93       	push	r17
    578c:	cf 93       	push	r28
    578e:	df 93       	push	r29
    5790:	cd b7       	in	r28, 0x3d	; 61
    5792:	de b7       	in	r29, 0x3e	; 62
    5794:	63 97       	sbiw	r28, 0x13	; 19
    5796:	cd bf       	out	0x3d, r28	; 61
    5798:	de bf       	out	0x3e, r29	; 62
    579a:	8a 87       	std	Y+10, r24	; 0x0a
    579c:	6b 87       	std	Y+11, r22	; 0x0b
    579e:	7c 87       	std	Y+12, r23	; 0x0c
    57a0:	4d 87       	std	Y+13, r20	; 0x0d
    57a2:	0e 87       	std	Y+14, r16	; 0x0e
    57a4:	1f 87       	std	Y+15, r17	; 0x0f
    57a6:	28 8b       	std	Y+16, r18	; 0x10
    57a8:	39 8b       	std	Y+17, r19	; 0x11
    57aa:	ea 8a       	std	Y+18, r14	; 0x12
    57ac:	fb 8a       	std	Y+19, r15	; 0x13
    57ae:	8a 89       	ldd	r24, Y+18	; 0x12
    57b0:	9b 89       	ldd	r25, Y+19	; 0x13
    57b2:	89 2b       	or	r24, r25
    57b4:	09 f4       	brne	.+2      	; 0x57b8 <Socket_ReadSocketData+0x34>
    57b6:	10 c1       	rjmp	.+544    	; 0x59d8 <Socket_ReadSocketData+0x254>
    57b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    57ba:	28 2f       	mov	r18, r24
    57bc:	88 0f       	add	r24, r24
    57be:	33 0b       	sbc	r19, r19
    57c0:	4b e0       	ldi	r20, 0x0B	; 11
    57c2:	42 9f       	mul	r20, r18
    57c4:	c0 01       	movw	r24, r0
    57c6:	43 9f       	mul	r20, r19
    57c8:	90 0d       	add	r25, r0
    57ca:	11 24       	eor	r1, r1
    57cc:	8b 5c       	subi	r24, 0xCB	; 203
    57ce:	91 4d       	sbci	r25, 0xD1	; 209
    57d0:	fc 01       	movw	r30, r24
    57d2:	80 81       	ld	r24, Z
    57d4:	91 81       	ldd	r25, Z+1	; 0x01
    57d6:	89 2b       	or	r24, r25
    57d8:	09 f4       	brne	.+2      	; 0x57dc <Socket_ReadSocketData+0x58>
    57da:	fe c0       	rjmp	.+508    	; 0x59d8 <Socket_ReadSocketData+0x254>
    57dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    57de:	28 2f       	mov	r18, r24
    57e0:	88 0f       	add	r24, r24
    57e2:	33 0b       	sbc	r19, r19
    57e4:	4b e0       	ldi	r20, 0x0B	; 11
    57e6:	42 9f       	mul	r20, r18
    57e8:	c0 01       	movw	r24, r0
    57ea:	43 9f       	mul	r20, r19
    57ec:	90 0d       	add	r25, r0
    57ee:	11 24       	eor	r1, r1
    57f0:	89 5c       	subi	r24, 0xC9	; 201
    57f2:	91 4d       	sbci	r25, 0xD1	; 209
    57f4:	fc 01       	movw	r30, r24
    57f6:	80 81       	ld	r24, Z
    57f8:	91 81       	ldd	r25, Z+1	; 0x01
    57fa:	89 2b       	or	r24, r25
    57fc:	09 f4       	brne	.+2      	; 0x5800 <Socket_ReadSocketData+0x7c>
    57fe:	ec c0       	rjmp	.+472    	; 0x59d8 <Socket_ReadSocketData+0x254>
    5800:	8a 85       	ldd	r24, Y+10	; 0x0a
    5802:	28 2f       	mov	r18, r24
    5804:	88 0f       	add	r24, r24
    5806:	33 0b       	sbc	r19, r19
    5808:	4b e0       	ldi	r20, 0x0B	; 11
    580a:	42 9f       	mul	r20, r18
    580c:	c0 01       	movw	r24, r0
    580e:	43 9f       	mul	r20, r19
    5810:	90 0d       	add	r25, r0
    5812:	11 24       	eor	r1, r1
    5814:	83 5c       	subi	r24, 0xC3	; 195
    5816:	91 4d       	sbci	r25, 0xD1	; 209
    5818:	fc 01       	movw	r30, r24
    581a:	80 81       	ld	r24, Z
    581c:	81 30       	cpi	r24, 0x01	; 1
    581e:	09 f0       	breq	.+2      	; 0x5822 <Socket_ReadSocketData+0x9e>
    5820:	db c0       	rjmp	.+438    	; 0x59d8 <Socket_ReadSocketData+0x254>
    5822:	8e 85       	ldd	r24, Y+14	; 0x0e
    5824:	9f 85       	ldd	r25, Y+15	; 0x0f
    5826:	a8 89       	ldd	r26, Y+16	; 0x10
    5828:	b9 89       	ldd	r27, Y+17	; 0x11
    582a:	89 83       	std	Y+1, r24	; 0x01
    582c:	9a 83       	std	Y+2, r25	; 0x02
    582e:	ab 83       	std	Y+3, r26	; 0x03
    5830:	bc 83       	std	Y+4, r27	; 0x04
    5832:	8b 85       	ldd	r24, Y+11	; 0x0b
    5834:	9c 85       	ldd	r25, Y+12	; 0x0c
    5836:	2a 89       	ldd	r18, Y+18	; 0x12
    5838:	3b 89       	ldd	r19, Y+19	; 0x13
    583a:	fc 01       	movw	r30, r24
    583c:	24 83       	std	Z+4, r18	; 0x04
    583e:	35 83       	std	Z+5, r19	; 0x05
    5840:	81 e0       	ldi	r24, 0x01	; 1
    5842:	8f 83       	std	Y+7, r24	; 0x07
    5844:	8a 89       	ldd	r24, Y+18	; 0x12
    5846:	9b 89       	ldd	r25, Y+19	; 0x13
    5848:	8d 83       	std	Y+5, r24	; 0x05
    584a:	9e 83       	std	Y+6, r25	; 0x06
    584c:	8a 85       	ldd	r24, Y+10	; 0x0a
    584e:	28 2f       	mov	r18, r24
    5850:	88 0f       	add	r24, r24
    5852:	33 0b       	sbc	r19, r19
    5854:	4b e0       	ldi	r20, 0x0B	; 11
    5856:	42 9f       	mul	r20, r18
    5858:	c0 01       	movw	r24, r0
    585a:	43 9f       	mul	r20, r19
    585c:	90 0d       	add	r25, r0
    585e:	11 24       	eor	r1, r1
    5860:	89 5c       	subi	r24, 0xC9	; 201
    5862:	91 4d       	sbci	r25, 0xD1	; 209
    5864:	fc 01       	movw	r30, r24
    5866:	80 81       	ld	r24, Z
    5868:	91 81       	ldd	r25, Z+1	; 0x01
    586a:	2d 81       	ldd	r18, Y+5	; 0x05
    586c:	3e 81       	ldd	r19, Y+6	; 0x06
    586e:	a9 01       	movw	r20, r18
    5870:	48 1b       	sub	r20, r24
    5872:	59 0b       	sbc	r21, r25
    5874:	ca 01       	movw	r24, r20
    5876:	88 87       	std	Y+8, r24	; 0x08
    5878:	99 87       	std	Y+9, r25	; 0x09
    587a:	88 85       	ldd	r24, Y+8	; 0x08
    587c:	99 85       	ldd	r25, Y+9	; 0x09
    587e:	18 16       	cp	r1, r24
    5880:	19 06       	cpc	r1, r25
    5882:	94 f4       	brge	.+36     	; 0x58a8 <Socket_ReadSocketData+0x124>
    5884:	1f 82       	std	Y+7, r1	; 0x07
    5886:	8a 85       	ldd	r24, Y+10	; 0x0a
    5888:	28 2f       	mov	r18, r24
    588a:	88 0f       	add	r24, r24
    588c:	33 0b       	sbc	r19, r19
    588e:	4b e0       	ldi	r20, 0x0B	; 11
    5890:	42 9f       	mul	r20, r18
    5892:	c0 01       	movw	r24, r0
    5894:	43 9f       	mul	r20, r19
    5896:	90 0d       	add	r25, r0
    5898:	11 24       	eor	r1, r1
    589a:	89 5c       	subi	r24, 0xC9	; 201
    589c:	91 4d       	sbci	r25, 0xD1	; 209
    589e:	fc 01       	movw	r30, r24
    58a0:	80 81       	ld	r24, Z
    58a2:	91 81       	ldd	r25, Z+1	; 0x01
    58a4:	8d 83       	std	Y+5, r24	; 0x05
    58a6:	9e 83       	std	Y+6, r25	; 0x06
    58a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    58aa:	28 2f       	mov	r18, r24
    58ac:	88 0f       	add	r24, r24
    58ae:	33 0b       	sbc	r19, r19
    58b0:	4b e0       	ldi	r20, 0x0B	; 11
    58b2:	42 9f       	mul	r20, r18
    58b4:	c0 01       	movw	r24, r0
    58b6:	43 9f       	mul	r20, r19
    58b8:	90 0d       	add	r25, r0
    58ba:	11 24       	eor	r1, r1
    58bc:	8b 5c       	subi	r24, 0xCB	; 203
    58be:	91 4d       	sbci	r25, 0xD1	; 209
    58c0:	fc 01       	movw	r30, r24
    58c2:	40 81       	ld	r20, Z
    58c4:	51 81       	ldd	r21, Z+1	; 0x01
    58c6:	2d 81       	ldd	r18, Y+5	; 0x05
    58c8:	3e 81       	ldd	r19, Y+6	; 0x06
    58ca:	89 81       	ldd	r24, Y+1	; 0x01
    58cc:	9a 81       	ldd	r25, Y+2	; 0x02
    58ce:	ab 81       	ldd	r26, Y+3	; 0x03
    58d0:	bc 81       	ldd	r27, Y+4	; 0x04
    58d2:	0f 81       	ldd	r16, Y+7	; 0x07
    58d4:	bc 01       	movw	r22, r24
    58d6:	cd 01       	movw	r24, r26
    58d8:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    58dc:	88 23       	and	r24, r24
    58de:	09 f0       	breq	.+2      	; 0x58e2 <Socket_ReadSocketData+0x15e>
    58e0:	7a c0       	rjmp	.+244    	; 0x59d6 <Socket_ReadSocketData+0x252>
    58e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    58e4:	28 2f       	mov	r18, r24
    58e6:	88 0f       	add	r24, r24
    58e8:	33 0b       	sbc	r19, r19
    58ea:	4b e0       	ldi	r20, 0x0B	; 11
    58ec:	42 9f       	mul	r20, r18
    58ee:	c0 01       	movw	r24, r0
    58f0:	43 9f       	mul	r20, r19
    58f2:	90 0d       	add	r25, r0
    58f4:	11 24       	eor	r1, r1
    58f6:	8b 5c       	subi	r24, 0xCB	; 203
    58f8:	91 4d       	sbci	r25, 0xD1	; 209
    58fa:	fc 01       	movw	r30, r24
    58fc:	20 81       	ld	r18, Z
    58fe:	31 81       	ldd	r19, Z+1	; 0x01
    5900:	8b 85       	ldd	r24, Y+11	; 0x0b
    5902:	9c 85       	ldd	r25, Y+12	; 0x0c
    5904:	fc 01       	movw	r30, r24
    5906:	20 83       	st	Z, r18
    5908:	31 83       	std	Z+1, r19	; 0x01
    590a:	2d 81       	ldd	r18, Y+5	; 0x05
    590c:	3e 81       	ldd	r19, Y+6	; 0x06
    590e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5910:	9c 85       	ldd	r25, Y+12	; 0x0c
    5912:	fc 01       	movw	r30, r24
    5914:	22 83       	std	Z+2, r18	; 0x02
    5916:	33 83       	std	Z+3, r19	; 0x03
    5918:	8b 85       	ldd	r24, Y+11	; 0x0b
    591a:	9c 85       	ldd	r25, Y+12	; 0x0c
    591c:	fc 01       	movw	r30, r24
    591e:	24 81       	ldd	r18, Z+4	; 0x04
    5920:	35 81       	ldd	r19, Z+5	; 0x05
    5922:	8d 81       	ldd	r24, Y+5	; 0x05
    5924:	9e 81       	ldd	r25, Y+6	; 0x06
    5926:	28 1b       	sub	r18, r24
    5928:	39 0b       	sbc	r19, r25
    592a:	8b 85       	ldd	r24, Y+11	; 0x0b
    592c:	9c 85       	ldd	r25, Y+12	; 0x0c
    592e:	fc 01       	movw	r30, r24
    5930:	24 83       	std	Z+4, r18	; 0x04
    5932:	35 83       	std	Z+5, r19	; 0x05
    5934:	80 91 ae 2e 	lds	r24, 0x2EAE	; 0x802eae <gpfAppSocketCb>
    5938:	90 91 af 2e 	lds	r25, 0x2EAF	; 0x802eaf <gpfAppSocketCb+0x1>
    593c:	89 2b       	or	r24, r25
    593e:	59 f0       	breq	.+22     	; 0x5956 <Socket_ReadSocketData+0x1d2>
    5940:	20 91 ae 2e 	lds	r18, 0x2EAE	; 0x802eae <gpfAppSocketCb>
    5944:	30 91 af 2e 	lds	r19, 0x2EAF	; 0x802eaf <gpfAppSocketCb+0x1>
    5948:	8b 85       	ldd	r24, Y+11	; 0x0b
    594a:	9c 85       	ldd	r25, Y+12	; 0x0c
    594c:	ac 01       	movw	r20, r24
    594e:	6d 85       	ldd	r22, Y+13	; 0x0d
    5950:	8a 85       	ldd	r24, Y+10	; 0x0a
    5952:	f9 01       	movw	r30, r18
    5954:	09 95       	icall
    5956:	2a 89       	ldd	r18, Y+18	; 0x12
    5958:	3b 89       	ldd	r19, Y+19	; 0x13
    595a:	8d 81       	ldd	r24, Y+5	; 0x05
    595c:	9e 81       	ldd	r25, Y+6	; 0x06
    595e:	a9 01       	movw	r20, r18
    5960:	48 1b       	sub	r20, r24
    5962:	59 0b       	sbc	r21, r25
    5964:	ca 01       	movw	r24, r20
    5966:	8a 8b       	std	Y+18, r24	; 0x12
    5968:	9b 8b       	std	Y+19, r25	; 0x13
    596a:	8d 81       	ldd	r24, Y+5	; 0x05
    596c:	9e 81       	ldd	r25, Y+6	; 0x06
    596e:	cc 01       	movw	r24, r24
    5970:	a0 e0       	ldi	r26, 0x00	; 0
    5972:	b0 e0       	ldi	r27, 0x00	; 0
    5974:	29 81       	ldd	r18, Y+1	; 0x01
    5976:	3a 81       	ldd	r19, Y+2	; 0x02
    5978:	4b 81       	ldd	r20, Y+3	; 0x03
    597a:	5c 81       	ldd	r21, Y+4	; 0x04
    597c:	82 0f       	add	r24, r18
    597e:	93 1f       	adc	r25, r19
    5980:	a4 1f       	adc	r26, r20
    5982:	b5 1f       	adc	r27, r21
    5984:	89 83       	std	Y+1, r24	; 0x01
    5986:	9a 83       	std	Y+2, r25	; 0x02
    5988:	ab 83       	std	Y+3, r26	; 0x03
    598a:	bc 83       	std	Y+4, r27	; 0x04
    598c:	8a 85       	ldd	r24, Y+10	; 0x0a
    598e:	28 2f       	mov	r18, r24
    5990:	88 0f       	add	r24, r24
    5992:	33 0b       	sbc	r19, r19
    5994:	4b e0       	ldi	r20, 0x0B	; 11
    5996:	42 9f       	mul	r20, r18
    5998:	c0 01       	movw	r24, r0
    599a:	43 9f       	mul	r20, r19
    599c:	90 0d       	add	r25, r0
    599e:	11 24       	eor	r1, r1
    59a0:	83 5c       	subi	r24, 0xC3	; 195
    59a2:	91 4d       	sbci	r25, 0xD1	; 209
    59a4:	fc 01       	movw	r30, r24
    59a6:	80 81       	ld	r24, Z
    59a8:	88 23       	and	r24, r24
    59aa:	79 f4       	brne	.+30     	; 0x59ca <Socket_ReadSocketData+0x246>
    59ac:	8a 89       	ldd	r24, Y+18	; 0x12
    59ae:	9b 89       	ldd	r25, Y+19	; 0x13
    59b0:	89 2b       	or	r24, r25
    59b2:	59 f0       	breq	.+22     	; 0x59ca <Socket_ReadSocketData+0x246>
    59b4:	01 e0       	ldi	r16, 0x01	; 1
    59b6:	20 e0       	ldi	r18, 0x00	; 0
    59b8:	30 e0       	ldi	r19, 0x00	; 0
    59ba:	40 e0       	ldi	r20, 0x00	; 0
    59bc:	50 e0       	ldi	r21, 0x00	; 0
    59be:	60 e0       	ldi	r22, 0x00	; 0
    59c0:	70 e0       	ldi	r23, 0x00	; 0
    59c2:	cb 01       	movw	r24, r22
    59c4:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    59c8:	07 c0       	rjmp	.+14     	; 0x59d8 <Socket_ReadSocketData+0x254>
    59ca:	8a 89       	ldd	r24, Y+18	; 0x12
    59cc:	9b 89       	ldd	r25, Y+19	; 0x13
    59ce:	89 2b       	or	r24, r25
    59d0:	09 f0       	breq	.+2      	; 0x59d4 <Socket_ReadSocketData+0x250>
    59d2:	36 cf       	rjmp	.-404    	; 0x5840 <Socket_ReadSocketData+0xbc>
    59d4:	01 c0       	rjmp	.+2      	; 0x59d8 <Socket_ReadSocketData+0x254>
    59d6:	00 00       	nop
    59d8:	00 00       	nop
    59da:	63 96       	adiw	r28, 0x13	; 19
    59dc:	cd bf       	out	0x3d, r28	; 61
    59de:	de bf       	out	0x3e, r29	; 62
    59e0:	df 91       	pop	r29
    59e2:	cf 91       	pop	r28
    59e4:	1f 91       	pop	r17
    59e6:	0f 91       	pop	r16
    59e8:	ff 90       	pop	r15
    59ea:	ef 90       	pop	r14
    59ec:	08 95       	ret

000059ee <m2m_ip_cb>:
    59ee:	ef 92       	push	r14
    59f0:	ff 92       	push	r15
    59f2:	0f 93       	push	r16
    59f4:	1f 93       	push	r17
    59f6:	cf 93       	push	r28
    59f8:	df 93       	push	r29
    59fa:	cd b7       	in	r28, 0x3d	; 61
    59fc:	de b7       	in	r29, 0x3e	; 62
    59fe:	cc 5c       	subi	r28, 0xCC	; 204
    5a00:	d1 09       	sbc	r29, r1
    5a02:	cd bf       	out	0x3d, r28	; 61
    5a04:	de bf       	out	0x3e, r29	; 62
    5a06:	fe 01       	movw	r30, r28
    5a08:	ec 53       	subi	r30, 0x3C	; 60
    5a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a0c:	80 83       	st	Z, r24
    5a0e:	ce 01       	movw	r24, r28
    5a10:	8b 53       	subi	r24, 0x3B	; 59
    5a12:	9f 4f       	sbci	r25, 0xFF	; 255
    5a14:	dc 01       	movw	r26, r24
    5a16:	6d 93       	st	X+, r22
    5a18:	7c 93       	st	X, r23
    5a1a:	ce 01       	movw	r24, r28
    5a1c:	89 53       	subi	r24, 0x39	; 57
    5a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a20:	fc 01       	movw	r30, r24
    5a22:	20 83       	st	Z, r18
    5a24:	31 83       	std	Z+1, r19	; 0x01
    5a26:	42 83       	std	Z+2, r20	; 0x02
    5a28:	53 83       	std	Z+3, r21	; 0x03
    5a2a:	ce 01       	movw	r24, r28
    5a2c:	8c 53       	subi	r24, 0x3C	; 60
    5a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a30:	dc 01       	movw	r26, r24
    5a32:	8c 91       	ld	r24, X
    5a34:	81 34       	cpi	r24, 0x41	; 65
    5a36:	39 f0       	breq	.+14     	; 0x5a46 <m2m_ip_cb+0x58>
    5a38:	ce 01       	movw	r24, r28
    5a3a:	8c 53       	subi	r24, 0x3C	; 60
    5a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a3e:	fc 01       	movw	r30, r24
    5a40:	80 81       	ld	r24, Z
    5a42:	84 35       	cpi	r24, 0x54	; 84
    5a44:	59 f5       	brne	.+86     	; 0x5a9c <m2m_ip_cb+0xae>
    5a46:	ae 01       	movw	r20, r28
    5a48:	41 5f       	subi	r20, 0xF1	; 241
    5a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    5a4c:	ce 01       	movw	r24, r28
    5a4e:	89 53       	subi	r24, 0x39	; 57
    5a50:	9f 4f       	sbci	r25, 0xFF	; 255
    5a52:	fc 01       	movw	r30, r24
    5a54:	80 81       	ld	r24, Z
    5a56:	91 81       	ldd	r25, Z+1	; 0x01
    5a58:	a2 81       	ldd	r26, Z+2	; 0x02
    5a5a:	b3 81       	ldd	r27, Z+3	; 0x03
    5a5c:	00 e0       	ldi	r16, 0x00	; 0
    5a5e:	24 e0       	ldi	r18, 0x04	; 4
    5a60:	30 e0       	ldi	r19, 0x00	; 0
    5a62:	bc 01       	movw	r22, r24
    5a64:	cd 01       	movw	r24, r26
    5a66:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    5a6a:	88 23       	and	r24, r24
    5a6c:	09 f0       	breq	.+2      	; 0x5a70 <m2m_ip_cb+0x82>
    5a6e:	70 c3       	rjmp	.+1760   	; 0x6150 <m2m_ip_cb+0x762>
    5a70:	88 89       	ldd	r24, Y+16	; 0x10
    5a72:	8b 8b       	std	Y+19, r24	; 0x13
    5a74:	80 91 ae 2e 	lds	r24, 0x2EAE	; 0x802eae <gpfAppSocketCb>
    5a78:	90 91 af 2e 	lds	r25, 0x2EAF	; 0x802eaf <gpfAppSocketCb+0x1>
    5a7c:	89 2b       	or	r24, r25
    5a7e:	09 f4       	brne	.+2      	; 0x5a82 <m2m_ip_cb+0x94>
    5a80:	67 c3       	rjmp	.+1742   	; 0x6150 <m2m_ip_cb+0x762>
    5a82:	20 91 ae 2e 	lds	r18, 0x2EAE	; 0x802eae <gpfAppSocketCb>
    5a86:	30 91 af 2e 	lds	r19, 0x2EAF	; 0x802eaf <gpfAppSocketCb+0x1>
    5a8a:	7f 85       	ldd	r23, Y+15	; 0x0f
    5a8c:	ce 01       	movw	r24, r28
    5a8e:	43 96       	adiw	r24, 0x13	; 19
    5a90:	ac 01       	movw	r20, r24
    5a92:	61 e0       	ldi	r22, 0x01	; 1
    5a94:	87 2f       	mov	r24, r23
    5a96:	f9 01       	movw	r30, r18
    5a98:	09 95       	icall
    5a9a:	5a c3       	rjmp	.+1716   	; 0x6150 <m2m_ip_cb+0x762>
    5a9c:	ce 01       	movw	r24, r28
    5a9e:	8c 53       	subi	r24, 0x3C	; 60
    5aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    5aa2:	dc 01       	movw	r26, r24
    5aa4:	8c 91       	ld	r24, X
    5aa6:	82 34       	cpi	r24, 0x42	; 66
    5aa8:	59 f5       	brne	.+86     	; 0x5b00 <m2m_ip_cb+0x112>
    5aaa:	ae 01       	movw	r20, r28
    5aac:	4c 5e       	subi	r20, 0xEC	; 236
    5aae:	5f 4f       	sbci	r21, 0xFF	; 255
    5ab0:	ce 01       	movw	r24, r28
    5ab2:	89 53       	subi	r24, 0x39	; 57
    5ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab6:	fc 01       	movw	r30, r24
    5ab8:	80 81       	ld	r24, Z
    5aba:	91 81       	ldd	r25, Z+1	; 0x01
    5abc:	a2 81       	ldd	r26, Z+2	; 0x02
    5abe:	b3 81       	ldd	r27, Z+3	; 0x03
    5ac0:	00 e0       	ldi	r16, 0x00	; 0
    5ac2:	24 e0       	ldi	r18, 0x04	; 4
    5ac4:	30 e0       	ldi	r19, 0x00	; 0
    5ac6:	bc 01       	movw	r22, r24
    5ac8:	cd 01       	movw	r24, r26
    5aca:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    5ace:	88 23       	and	r24, r24
    5ad0:	09 f0       	breq	.+2      	; 0x5ad4 <m2m_ip_cb+0xe6>
    5ad2:	45 c3       	rjmp	.+1674   	; 0x615e <m2m_ip_cb+0x770>
    5ad4:	8d 89       	ldd	r24, Y+21	; 0x15
    5ad6:	88 8f       	std	Y+24, r24	; 0x18
    5ad8:	80 91 ae 2e 	lds	r24, 0x2EAE	; 0x802eae <gpfAppSocketCb>
    5adc:	90 91 af 2e 	lds	r25, 0x2EAF	; 0x802eaf <gpfAppSocketCb+0x1>
    5ae0:	89 2b       	or	r24, r25
    5ae2:	09 f4       	brne	.+2      	; 0x5ae6 <m2m_ip_cb+0xf8>
    5ae4:	3c c3       	rjmp	.+1656   	; 0x615e <m2m_ip_cb+0x770>
    5ae6:	20 91 ae 2e 	lds	r18, 0x2EAE	; 0x802eae <gpfAppSocketCb>
    5aea:	30 91 af 2e 	lds	r19, 0x2EAF	; 0x802eaf <gpfAppSocketCb+0x1>
    5aee:	7c 89       	ldd	r23, Y+20	; 0x14
    5af0:	ce 01       	movw	r24, r28
    5af2:	48 96       	adiw	r24, 0x18	; 24
    5af4:	ac 01       	movw	r20, r24
    5af6:	62 e0       	ldi	r22, 0x02	; 2
    5af8:	87 2f       	mov	r24, r23
    5afa:	f9 01       	movw	r30, r18
    5afc:	09 95       	icall
    5afe:	2f c3       	rjmp	.+1630   	; 0x615e <m2m_ip_cb+0x770>
    5b00:	ce 01       	movw	r24, r28
    5b02:	8c 53       	subi	r24, 0x3C	; 60
    5b04:	9f 4f       	sbci	r25, 0xFF	; 255
    5b06:	dc 01       	movw	r26, r24
    5b08:	8c 91       	ld	r24, X
    5b0a:	83 34       	cpi	r24, 0x43	; 67
    5b0c:	09 f0       	breq	.+2      	; 0x5b10 <m2m_ip_cb+0x122>
    5b0e:	a9 c0       	rjmp	.+338    	; 0x5c62 <m2m_ip_cb+0x274>
    5b10:	ae 01       	movw	r20, r28
    5b12:	47 5e       	subi	r20, 0xE7	; 231
    5b14:	5f 4f       	sbci	r21, 0xFF	; 255
    5b16:	ce 01       	movw	r24, r28
    5b18:	89 53       	subi	r24, 0x39	; 57
    5b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b1c:	fc 01       	movw	r30, r24
    5b1e:	80 81       	ld	r24, Z
    5b20:	91 81       	ldd	r25, Z+1	; 0x01
    5b22:	a2 81       	ldd	r26, Z+2	; 0x02
    5b24:	b3 81       	ldd	r27, Z+3	; 0x03
    5b26:	00 e0       	ldi	r16, 0x00	; 0
    5b28:	2c e0       	ldi	r18, 0x0C	; 12
    5b2a:	30 e0       	ldi	r19, 0x00	; 0
    5b2c:	bc 01       	movw	r22, r24
    5b2e:	cd 01       	movw	r24, r26
    5b30:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    5b34:	88 23       	and	r24, r24
    5b36:	09 f0       	breq	.+2      	; 0x5b3a <m2m_ip_cb+0x14c>
    5b38:	12 c3       	rjmp	.+1572   	; 0x615e <m2m_ip_cb+0x770>
    5b3a:	8a a1       	ldd	r24, Y+34	; 0x22
    5b3c:	88 23       	and	r24, r24
    5b3e:	0c f4       	brge	.+2      	; 0x5b42 <m2m_ip_cb+0x154>
    5b40:	6a c0       	rjmp	.+212    	; 0x5c16 <m2m_ip_cb+0x228>
    5b42:	8a a1       	ldd	r24, Y+34	; 0x22
    5b44:	28 2f       	mov	r18, r24
    5b46:	88 0f       	add	r24, r24
    5b48:	33 0b       	sbc	r19, r19
    5b4a:	89 a1       	ldd	r24, Y+33	; 0x21
    5b4c:	48 2f       	mov	r20, r24
    5b4e:	88 0f       	add	r24, r24
    5b50:	55 0b       	sbc	r21, r21
    5b52:	6b e0       	ldi	r22, 0x0B	; 11
    5b54:	64 9f       	mul	r22, r20
    5b56:	c0 01       	movw	r24, r0
    5b58:	65 9f       	mul	r22, r21
    5b5a:	90 0d       	add	r25, r0
    5b5c:	11 24       	eor	r1, r1
    5b5e:	82 5c       	subi	r24, 0xC2	; 194
    5b60:	91 4d       	sbci	r25, 0xD1	; 209
    5b62:	dc 01       	movw	r26, r24
    5b64:	4c 91       	ld	r20, X
    5b66:	5b e0       	ldi	r21, 0x0B	; 11
    5b68:	52 9f       	mul	r21, r18
    5b6a:	c0 01       	movw	r24, r0
    5b6c:	53 9f       	mul	r21, r19
    5b6e:	90 0d       	add	r25, r0
    5b70:	11 24       	eor	r1, r1
    5b72:	82 5c       	subi	r24, 0xC2	; 194
    5b74:	91 4d       	sbci	r25, 0xD1	; 209
    5b76:	fc 01       	movw	r30, r24
    5b78:	40 83       	st	Z, r20
    5b7a:	8a a1       	ldd	r24, Y+34	; 0x22
    5b7c:	28 2f       	mov	r18, r24
    5b7e:	88 0f       	add	r24, r24
    5b80:	33 0b       	sbc	r19, r19
    5b82:	4b e0       	ldi	r20, 0x0B	; 11
    5b84:	42 9f       	mul	r20, r18
    5b86:	c0 01       	movw	r24, r0
    5b88:	43 9f       	mul	r20, r19
    5b8a:	90 0d       	add	r25, r0
    5b8c:	11 24       	eor	r1, r1
    5b8e:	83 5c       	subi	r24, 0xC3	; 195
    5b90:	91 4d       	sbci	r25, 0xD1	; 209
    5b92:	21 e0       	ldi	r18, 0x01	; 1
    5b94:	dc 01       	movw	r26, r24
    5b96:	2c 93       	st	X, r18
    5b98:	8a a1       	ldd	r24, Y+34	; 0x22
    5b9a:	48 2f       	mov	r20, r24
    5b9c:	88 0f       	add	r24, r24
    5b9e:	55 0b       	sbc	r21, r21
    5ba0:	8b a1       	ldd	r24, Y+35	; 0x23
    5ba2:	9c a1       	ldd	r25, Y+36	; 0x24
    5ba4:	9c 01       	movw	r18, r24
    5ba6:	28 50       	subi	r18, 0x08	; 8
    5ba8:	31 09       	sbc	r19, r1
    5baa:	6b e0       	ldi	r22, 0x0B	; 11
    5bac:	64 9f       	mul	r22, r20
    5bae:	c0 01       	movw	r24, r0
    5bb0:	65 9f       	mul	r22, r21
    5bb2:	90 0d       	add	r25, r0
    5bb4:	11 24       	eor	r1, r1
    5bb6:	85 5c       	subi	r24, 0xC5	; 197
    5bb8:	91 4d       	sbci	r25, 0xD1	; 209
    5bba:	fc 01       	movw	r30, r24
    5bbc:	20 83       	st	Z, r18
    5bbe:	31 83       	std	Z+1, r19	; 0x01
    5bc0:	80 91 12 2e 	lds	r24, 0x2E12	; 0x802e12 <gu16SessionID>
    5bc4:	90 91 13 2e 	lds	r25, 0x2E13	; 0x802e13 <gu16SessionID+0x1>
    5bc8:	01 96       	adiw	r24, 0x01	; 1
    5bca:	80 93 12 2e 	sts	0x2E12, r24	; 0x802e12 <gu16SessionID>
    5bce:	90 93 13 2e 	sts	0x2E13, r25	; 0x802e13 <gu16SessionID+0x1>
    5bd2:	80 91 12 2e 	lds	r24, 0x2E12	; 0x802e12 <gu16SessionID>
    5bd6:	90 91 13 2e 	lds	r25, 0x2E13	; 0x802e13 <gu16SessionID+0x1>
    5bda:	89 2b       	or	r24, r25
    5bdc:	49 f4       	brne	.+18     	; 0x5bf0 <m2m_ip_cb+0x202>
    5bde:	80 91 12 2e 	lds	r24, 0x2E12	; 0x802e12 <gu16SessionID>
    5be2:	90 91 13 2e 	lds	r25, 0x2E13	; 0x802e13 <gu16SessionID+0x1>
    5be6:	01 96       	adiw	r24, 0x01	; 1
    5be8:	80 93 12 2e 	sts	0x2E12, r24	; 0x802e12 <gu16SessionID>
    5bec:	90 93 13 2e 	sts	0x2E13, r25	; 0x802e13 <gu16SessionID+0x1>
    5bf0:	8a a1       	ldd	r24, Y+34	; 0x22
    5bf2:	48 2f       	mov	r20, r24
    5bf4:	88 0f       	add	r24, r24
    5bf6:	55 0b       	sbc	r21, r21
    5bf8:	20 91 12 2e 	lds	r18, 0x2E12	; 0x802e12 <gu16SessionID>
    5bfc:	30 91 13 2e 	lds	r19, 0x2E13	; 0x802e13 <gu16SessionID+0x1>
    5c00:	6b e0       	ldi	r22, 0x0B	; 11
    5c02:	64 9f       	mul	r22, r20
    5c04:	c0 01       	movw	r24, r0
    5c06:	65 9f       	mul	r22, r21
    5c08:	90 0d       	add	r25, r0
    5c0a:	11 24       	eor	r1, r1
    5c0c:	87 5c       	subi	r24, 0xC7	; 199
    5c0e:	91 4d       	sbci	r25, 0xD1	; 209
    5c10:	dc 01       	movw	r26, r24
    5c12:	2d 93       	st	X+, r18
    5c14:	3c 93       	st	X, r19
    5c16:	8a a1       	ldd	r24, Y+34	; 0x22
    5c18:	8d a3       	std	Y+37, r24	; 0x25
    5c1a:	82 e0       	ldi	r24, 0x02	; 2
    5c1c:	90 e0       	ldi	r25, 0x00	; 0
    5c1e:	8e a3       	std	Y+38, r24	; 0x26
    5c20:	9f a3       	std	Y+39, r25	; 0x27
    5c22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c26:	88 a7       	std	Y+40, r24	; 0x28
    5c28:	99 a7       	std	Y+41, r25	; 0x29
    5c2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5c2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5c2e:	af 8d       	ldd	r26, Y+31	; 0x1f
    5c30:	b8 a1       	ldd	r27, Y+32	; 0x20
    5c32:	8a a7       	std	Y+42, r24	; 0x2a
    5c34:	9b a7       	std	Y+43, r25	; 0x2b
    5c36:	ac a7       	std	Y+44, r26	; 0x2c
    5c38:	bd a7       	std	Y+45, r27	; 0x2d
    5c3a:	80 91 ae 2e 	lds	r24, 0x2EAE	; 0x802eae <gpfAppSocketCb>
    5c3e:	90 91 af 2e 	lds	r25, 0x2EAF	; 0x802eaf <gpfAppSocketCb+0x1>
    5c42:	89 2b       	or	r24, r25
    5c44:	09 f4       	brne	.+2      	; 0x5c48 <m2m_ip_cb+0x25a>
    5c46:	8b c2       	rjmp	.+1302   	; 0x615e <m2m_ip_cb+0x770>
    5c48:	20 91 ae 2e 	lds	r18, 0x2EAE	; 0x802eae <gpfAppSocketCb>
    5c4c:	30 91 af 2e 	lds	r19, 0x2EAF	; 0x802eaf <gpfAppSocketCb+0x1>
    5c50:	79 a1       	ldd	r23, Y+33	; 0x21
    5c52:	ce 01       	movw	r24, r28
    5c54:	85 96       	adiw	r24, 0x25	; 37
    5c56:	ac 01       	movw	r20, r24
    5c58:	64 e0       	ldi	r22, 0x04	; 4
    5c5a:	87 2f       	mov	r24, r23
    5c5c:	f9 01       	movw	r30, r18
    5c5e:	09 95       	icall
    5c60:	7e c2       	rjmp	.+1276   	; 0x615e <m2m_ip_cb+0x770>
    5c62:	ce 01       	movw	r24, r28
    5c64:	8c 53       	subi	r24, 0x3C	; 60
    5c66:	9f 4f       	sbci	r25, 0xFF	; 255
    5c68:	dc 01       	movw	r26, r24
    5c6a:	8c 91       	ld	r24, X
    5c6c:	84 34       	cpi	r24, 0x44	; 68
    5c6e:	41 f0       	breq	.+16     	; 0x5c80 <m2m_ip_cb+0x292>
    5c70:	ce 01       	movw	r24, r28
    5c72:	8c 53       	subi	r24, 0x3C	; 60
    5c74:	9f 4f       	sbci	r25, 0xFF	; 255
    5c76:	fc 01       	movw	r30, r24
    5c78:	80 81       	ld	r24, Z
    5c7a:	8b 34       	cpi	r24, 0x4B	; 75
    5c7c:	09 f0       	breq	.+2      	; 0x5c80 <m2m_ip_cb+0x292>
    5c7e:	44 c0       	rjmp	.+136    	; 0x5d08 <m2m_ip_cb+0x31a>
    5c80:	ae 01       	movw	r20, r28
    5c82:	4a 5c       	subi	r20, 0xCA	; 202
    5c84:	5f 4f       	sbci	r21, 0xFF	; 255
    5c86:	ce 01       	movw	r24, r28
    5c88:	89 53       	subi	r24, 0x39	; 57
    5c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c8c:	fc 01       	movw	r30, r24
    5c8e:	80 81       	ld	r24, Z
    5c90:	91 81       	ldd	r25, Z+1	; 0x01
    5c92:	a2 81       	ldd	r26, Z+2	; 0x02
    5c94:	b3 81       	ldd	r27, Z+3	; 0x03
    5c96:	00 e0       	ldi	r16, 0x00	; 0
    5c98:	24 e0       	ldi	r18, 0x04	; 4
    5c9a:	30 e0       	ldi	r19, 0x00	; 0
    5c9c:	bc 01       	movw	r22, r24
    5c9e:	cd 01       	movw	r24, r26
    5ca0:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    5ca4:	88 23       	and	r24, r24
    5ca6:	09 f0       	breq	.+2      	; 0x5caa <m2m_ip_cb+0x2bc>
    5ca8:	55 c2       	rjmp	.+1194   	; 0x6154 <m2m_ip_cb+0x766>
    5caa:	8e a9       	ldd	r24, Y+54	; 0x36
    5cac:	8a af       	std	Y+58, r24	; 0x3a
    5cae:	8f a9       	ldd	r24, Y+55	; 0x37
    5cb0:	8b af       	std	Y+59, r24	; 0x3b
    5cb2:	8f a9       	ldd	r24, Y+55	; 0x37
    5cb4:	88 23       	and	r24, r24
    5cb6:	a1 f4       	brne	.+40     	; 0x5ce0 <m2m_ip_cb+0x2f2>
    5cb8:	8e a9       	ldd	r24, Y+54	; 0x36
    5cba:	48 2f       	mov	r20, r24
    5cbc:	88 0f       	add	r24, r24
    5cbe:	55 0b       	sbc	r21, r21
    5cc0:	88 ad       	ldd	r24, Y+56	; 0x38
    5cc2:	99 ad       	ldd	r25, Y+57	; 0x39
    5cc4:	9c 01       	movw	r18, r24
    5cc6:	28 50       	subi	r18, 0x08	; 8
    5cc8:	31 09       	sbc	r19, r1
    5cca:	6b e0       	ldi	r22, 0x0B	; 11
    5ccc:	64 9f       	mul	r22, r20
    5cce:	c0 01       	movw	r24, r0
    5cd0:	65 9f       	mul	r22, r21
    5cd2:	90 0d       	add	r25, r0
    5cd4:	11 24       	eor	r1, r1
    5cd6:	85 5c       	subi	r24, 0xC5	; 197
    5cd8:	91 4d       	sbci	r25, 0xD1	; 209
    5cda:	dc 01       	movw	r26, r24
    5cdc:	2d 93       	st	X+, r18
    5cde:	3c 93       	st	X, r19
    5ce0:	80 91 ae 2e 	lds	r24, 0x2EAE	; 0x802eae <gpfAppSocketCb>
    5ce4:	90 91 af 2e 	lds	r25, 0x2EAF	; 0x802eaf <gpfAppSocketCb+0x1>
    5ce8:	89 2b       	or	r24, r25
    5cea:	09 f4       	brne	.+2      	; 0x5cee <m2m_ip_cb+0x300>
    5cec:	33 c2       	rjmp	.+1126   	; 0x6154 <m2m_ip_cb+0x766>
    5cee:	20 91 ae 2e 	lds	r18, 0x2EAE	; 0x802eae <gpfAppSocketCb>
    5cf2:	30 91 af 2e 	lds	r19, 0x2EAF	; 0x802eaf <gpfAppSocketCb+0x1>
    5cf6:	7e a9       	ldd	r23, Y+54	; 0x36
    5cf8:	ce 01       	movw	r24, r28
    5cfa:	ca 96       	adiw	r24, 0x3a	; 58
    5cfc:	ac 01       	movw	r20, r24
    5cfe:	65 e0       	ldi	r22, 0x05	; 5
    5d00:	87 2f       	mov	r24, r23
    5d02:	f9 01       	movw	r30, r18
    5d04:	09 95       	icall
    5d06:	26 c2       	rjmp	.+1100   	; 0x6154 <m2m_ip_cb+0x766>
    5d08:	ce 01       	movw	r24, r28
    5d0a:	8c 53       	subi	r24, 0x3C	; 60
    5d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d0e:	dc 01       	movw	r26, r24
    5d10:	8c 91       	ld	r24, X
    5d12:	8a 34       	cpi	r24, 0x4A	; 74
    5d14:	99 f5       	brne	.+102    	; 0x5d7c <m2m_ip_cb+0x38e>
    5d16:	ae 01       	movw	r20, r28
    5d18:	40 58       	subi	r20, 0x80	; 128
    5d1a:	5f 4f       	sbci	r21, 0xFF	; 255
    5d1c:	ce 01       	movw	r24, r28
    5d1e:	89 53       	subi	r24, 0x39	; 57
    5d20:	9f 4f       	sbci	r25, 0xFF	; 255
    5d22:	fc 01       	movw	r30, r24
    5d24:	80 81       	ld	r24, Z
    5d26:	91 81       	ldd	r25, Z+1	; 0x01
    5d28:	a2 81       	ldd	r26, Z+2	; 0x02
    5d2a:	b3 81       	ldd	r27, Z+3	; 0x03
    5d2c:	00 e0       	ldi	r16, 0x00	; 0
    5d2e:	24 e4       	ldi	r18, 0x44	; 68
    5d30:	30 e0       	ldi	r19, 0x00	; 0
    5d32:	bc 01       	movw	r22, r24
    5d34:	cd 01       	movw	r24, r26
    5d36:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    5d3a:	88 23       	and	r24, r24
    5d3c:	09 f0       	breq	.+2      	; 0x5d40 <m2m_ip_cb+0x352>
    5d3e:	0f c2       	rjmp	.+1054   	; 0x615e <m2m_ip_cb+0x770>
    5d40:	80 91 b2 2e 	lds	r24, 0x2EB2	; 0x802eb2 <gpfAppResolveCb>
    5d44:	90 91 b3 2e 	lds	r25, 0x2EB3	; 0x802eb3 <gpfAppResolveCb+0x1>
    5d48:	89 2b       	or	r24, r25
    5d4a:	09 f4       	brne	.+2      	; 0x5d4e <m2m_ip_cb+0x360>
    5d4c:	08 c2       	rjmp	.+1040   	; 0x615e <m2m_ip_cb+0x770>
    5d4e:	20 91 b2 2e 	lds	r18, 0x2EB2	; 0x802eb2 <gpfAppResolveCb>
    5d52:	30 91 b3 2e 	lds	r19, 0x2EB3	; 0x802eb3 <gpfAppResolveCb+0x1>
    5d56:	ce 01       	movw	r24, r28
    5d58:	80 58       	subi	r24, 0x80	; 128
    5d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d5c:	80 5c       	subi	r24, 0xC0	; 192
    5d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d60:	fc 01       	movw	r30, r24
    5d62:	80 81       	ld	r24, Z
    5d64:	91 81       	ldd	r25, Z+1	; 0x01
    5d66:	a2 81       	ldd	r26, Z+2	; 0x02
    5d68:	b3 81       	ldd	r27, Z+3	; 0x03
    5d6a:	fe 01       	movw	r30, r28
    5d6c:	e0 58       	subi	r30, 0x80	; 128
    5d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d70:	ac 01       	movw	r20, r24
    5d72:	bd 01       	movw	r22, r26
    5d74:	cf 01       	movw	r24, r30
    5d76:	f9 01       	movw	r30, r18
    5d78:	09 95       	icall
    5d7a:	f1 c1       	rjmp	.+994    	; 0x615e <m2m_ip_cb+0x770>
    5d7c:	ce 01       	movw	r24, r28
    5d7e:	8c 53       	subi	r24, 0x3C	; 60
    5d80:	9f 4f       	sbci	r25, 0xFF	; 255
    5d82:	dc 01       	movw	r26, r24
    5d84:	8c 91       	ld	r24, X
    5d86:	86 34       	cpi	r24, 0x46	; 70
    5d88:	79 f0       	breq	.+30     	; 0x5da8 <m2m_ip_cb+0x3ba>
    5d8a:	ce 01       	movw	r24, r28
    5d8c:	8c 53       	subi	r24, 0x3C	; 60
    5d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d90:	fc 01       	movw	r30, r24
    5d92:	80 81       	ld	r24, Z
    5d94:	88 34       	cpi	r24, 0x48	; 72
    5d96:	41 f0       	breq	.+16     	; 0x5da8 <m2m_ip_cb+0x3ba>
    5d98:	ce 01       	movw	r24, r28
    5d9a:	8c 53       	subi	r24, 0x3C	; 60
    5d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d9e:	dc 01       	movw	r26, r24
    5da0:	8c 91       	ld	r24, X
    5da2:	8d 34       	cpi	r24, 0x4D	; 77
    5da4:	09 f0       	breq	.+2      	; 0x5da8 <m2m_ip_cb+0x3ba>
    5da6:	fc c0       	rjmp	.+504    	; 0x5fa0 <m2m_ip_cb+0x5b2>
    5da8:	86 e0       	ldi	r24, 0x06	; 6
    5daa:	89 83       	std	Y+1, r24	; 0x01
    5dac:	ce 01       	movw	r24, r28
    5dae:	8c 53       	subi	r24, 0x3C	; 60
    5db0:	9f 4f       	sbci	r25, 0xFF	; 255
    5db2:	fc 01       	movw	r30, r24
    5db4:	80 81       	ld	r24, Z
    5db6:	88 34       	cpi	r24, 0x48	; 72
    5db8:	11 f4       	brne	.+4      	; 0x5dbe <m2m_ip_cb+0x3d0>
    5dba:	89 e0       	ldi	r24, 0x09	; 9
    5dbc:	89 83       	std	Y+1, r24	; 0x01
    5dbe:	80 e1       	ldi	r24, 0x10	; 16
    5dc0:	90 e0       	ldi	r25, 0x00	; 0
    5dc2:	8e 83       	std	Y+6, r24	; 0x06
    5dc4:	9f 83       	std	Y+7, r25	; 0x07
    5dc6:	2e 81       	ldd	r18, Y+6	; 0x06
    5dc8:	3f 81       	ldd	r19, Y+7	; 0x07
    5dca:	ae 01       	movw	r20, r28
    5dcc:	44 5c       	subi	r20, 0xC4	; 196
    5dce:	5f 4f       	sbci	r21, 0xFF	; 255
    5dd0:	ce 01       	movw	r24, r28
    5dd2:	89 53       	subi	r24, 0x39	; 57
    5dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    5dd6:	fc 01       	movw	r30, r24
    5dd8:	80 81       	ld	r24, Z
    5dda:	91 81       	ldd	r25, Z+1	; 0x01
    5ddc:	a2 81       	ldd	r26, Z+2	; 0x02
    5dde:	b3 81       	ldd	r27, Z+3	; 0x03
    5de0:	00 e0       	ldi	r16, 0x00	; 0
    5de2:	bc 01       	movw	r22, r24
    5de4:	cd 01       	movw	r24, r26
    5de6:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    5dea:	88 23       	and	r24, r24
    5dec:	09 f0       	breq	.+2      	; 0x5df0 <m2m_ip_cb+0x402>
    5dee:	b4 c1       	rjmp	.+872    	; 0x6158 <m2m_ip_cb+0x76a>
    5df0:	18 86       	std	Y+8, r1	; 0x08
    5df2:	19 86       	std	Y+9, r1	; 0x09
    5df4:	ce 01       	movw	r24, r28
    5df6:	88 5b       	subi	r24, 0xB8	; 184
    5df8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dfa:	dc 01       	movw	r26, r24
    5dfc:	8c 91       	ld	r24, X
    5dfe:	8a 87       	std	Y+10, r24	; 0x0a
    5e00:	ce 01       	movw	r24, r28
    5e02:	86 5b       	subi	r24, 0xB6	; 182
    5e04:	9f 4f       	sbci	r25, 0xFF	; 255
    5e06:	fc 01       	movw	r30, r24
    5e08:	80 81       	ld	r24, Z
    5e0a:	91 81       	ldd	r25, Z+1	; 0x01
    5e0c:	88 87       	std	Y+8, r24	; 0x08
    5e0e:	99 87       	std	Y+9, r25	; 0x09
    5e10:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e12:	28 2f       	mov	r18, r24
    5e14:	88 0f       	add	r24, r24
    5e16:	33 0b       	sbc	r19, r19
    5e18:	4b e0       	ldi	r20, 0x0B	; 11
    5e1a:	42 9f       	mul	r20, r18
    5e1c:	c0 01       	movw	r24, r0
    5e1e:	43 9f       	mul	r20, r19
    5e20:	90 0d       	add	r25, r0
    5e22:	11 24       	eor	r1, r1
    5e24:	81 5c       	subi	r24, 0xC1	; 193
    5e26:	91 4d       	sbci	r25, 0xD1	; 209
    5e28:	dc 01       	movw	r26, r24
    5e2a:	1c 92       	st	X, r1
    5e2c:	ce 01       	movw	r24, r28
    5e2e:	8c 5b       	subi	r24, 0xBC	; 188
    5e30:	9f 4f       	sbci	r25, 0xFF	; 255
    5e32:	fc 01       	movw	r30, r24
    5e34:	80 81       	ld	r24, Z
    5e36:	91 81       	ldd	r25, Z+1	; 0x01
    5e38:	8b 87       	std	Y+11, r24	; 0x0b
    5e3a:	9c 87       	std	Y+12, r25	; 0x0c
    5e3c:	ce 01       	movw	r24, r28
    5e3e:	8a 5b       	subi	r24, 0xBA	; 186
    5e40:	9f 4f       	sbci	r25, 0xFF	; 255
    5e42:	dc 01       	movw	r26, r24
    5e44:	8d 91       	ld	r24, X+
    5e46:	9c 91       	ld	r25, X
    5e48:	8d 87       	std	Y+13, r24	; 0x0d
    5e4a:	9e 87       	std	Y+14, r25	; 0x0e
    5e4c:	2e ad       	ldd	r18, Y+62	; 0x3e
    5e4e:	3f ad       	ldd	r19, Y+63	; 0x3f
    5e50:	ce 01       	movw	r24, r28
    5e52:	84 5b       	subi	r24, 0xB4	; 180
    5e54:	9f 4f       	sbci	r25, 0xFF	; 255
    5e56:	fc 01       	movw	r30, r24
    5e58:	20 87       	std	Z+8, r18	; 0x08
    5e5a:	31 87       	std	Z+9, r19	; 0x09
    5e5c:	ce 01       	movw	r24, r28
    5e5e:	80 5c       	subi	r24, 0xC0	; 192
    5e60:	9f 4f       	sbci	r25, 0xFF	; 255
    5e62:	fc 01       	movw	r30, r24
    5e64:	80 81       	ld	r24, Z
    5e66:	91 81       	ldd	r25, Z+1	; 0x01
    5e68:	a2 81       	ldd	r26, Z+2	; 0x02
    5e6a:	b3 81       	ldd	r27, Z+3	; 0x03
    5e6c:	9e 01       	movw	r18, r28
    5e6e:	24 5b       	subi	r18, 0xB4	; 180
    5e70:	3f 4f       	sbci	r19, 0xFF	; 255
    5e72:	f9 01       	movw	r30, r18
    5e74:	82 87       	std	Z+10, r24	; 0x0a
    5e76:	93 87       	std	Z+11, r25	; 0x0b
    5e78:	a4 87       	std	Z+12, r26	; 0x0c
    5e7a:	b5 87       	std	Z+13, r27	; 0x0d
    5e7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e7e:	28 2f       	mov	r18, r24
    5e80:	88 0f       	add	r24, r24
    5e82:	33 0b       	sbc	r19, r19
    5e84:	4b e0       	ldi	r20, 0x0B	; 11
    5e86:	42 9f       	mul	r20, r18
    5e88:	c0 01       	movw	r24, r0
    5e8a:	43 9f       	mul	r20, r19
    5e8c:	90 0d       	add	r25, r0
    5e8e:	11 24       	eor	r1, r1
    5e90:	87 5c       	subi	r24, 0xC7	; 199
    5e92:	91 4d       	sbci	r25, 0xD1	; 209
    5e94:	dc 01       	movw	r26, r24
    5e96:	2d 91       	ld	r18, X+
    5e98:	3c 91       	ld	r19, X
    5e9a:	88 85       	ldd	r24, Y+8	; 0x08
    5e9c:	99 85       	ldd	r25, Y+9	; 0x09
    5e9e:	28 17       	cp	r18, r24
    5ea0:	39 07       	cpc	r19, r25
    5ea2:	09 f0       	breq	.+2      	; 0x5ea6 <m2m_ip_cb+0x4b8>
    5ea4:	66 c0       	rjmp	.+204    	; 0x5f72 <m2m_ip_cb+0x584>
    5ea6:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ea8:	9c 85       	ldd	r25, Y+12	; 0x0c
    5eaa:	18 16       	cp	r1, r24
    5eac:	19 06       	cpc	r1, r25
    5eae:	ec f5       	brge	.+122    	; 0x5f2a <m2m_ip_cb+0x53c>
    5eb0:	2b 85       	ldd	r18, Y+11	; 0x0b
    5eb2:	3c 85       	ldd	r19, Y+12	; 0x0c
    5eb4:	ce 01       	movw	r24, r28
    5eb6:	8b 53       	subi	r24, 0x3B	; 59
    5eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    5eba:	fc 01       	movw	r30, r24
    5ebc:	80 81       	ld	r24, Z
    5ebe:	91 81       	ldd	r25, Z+1	; 0x01
    5ec0:	28 17       	cp	r18, r24
    5ec2:	39 07       	cpc	r19, r25
    5ec4:	90 f5       	brcc	.+100    	; 0x5f2a <m2m_ip_cb+0x53c>
    5ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
    5eca:	9c 01       	movw	r18, r24
    5ecc:	40 e0       	ldi	r20, 0x00	; 0
    5ece:	50 e0       	ldi	r21, 0x00	; 0
    5ed0:	be 01       	movw	r22, r28
    5ed2:	69 53       	subi	r22, 0x39	; 57
    5ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ed6:	ce 01       	movw	r24, r28
    5ed8:	89 53       	subi	r24, 0x39	; 57
    5eda:	9f 4f       	sbci	r25, 0xFF	; 255
    5edc:	fc 01       	movw	r30, r24
    5ede:	80 81       	ld	r24, Z
    5ee0:	91 81       	ldd	r25, Z+1	; 0x01
    5ee2:	a2 81       	ldd	r26, Z+2	; 0x02
    5ee4:	b3 81       	ldd	r27, Z+3	; 0x03
    5ee6:	82 0f       	add	r24, r18
    5ee8:	93 1f       	adc	r25, r19
    5eea:	a4 1f       	adc	r26, r20
    5eec:	b5 1f       	adc	r27, r21
    5eee:	fb 01       	movw	r30, r22
    5ef0:	80 83       	st	Z, r24
    5ef2:	91 83       	std	Z+1, r25	; 0x01
    5ef4:	a2 83       	std	Z+2, r26	; 0x02
    5ef6:	b3 83       	std	Z+3, r27	; 0x03
    5ef8:	8b 85       	ldd	r24, Y+11	; 0x0b
    5efa:	9c 85       	ldd	r25, Y+12	; 0x0c
    5efc:	8e 83       	std	Y+6, r24	; 0x06
    5efe:	9f 83       	std	Y+7, r25	; 0x07
    5f00:	2e 81       	ldd	r18, Y+6	; 0x06
    5f02:	3f 81       	ldd	r19, Y+7	; 0x07
    5f04:	ce 01       	movw	r24, r28
    5f06:	89 53       	subi	r24, 0x39	; 57
    5f08:	9f 4f       	sbci	r25, 0xFF	; 255
    5f0a:	fc 01       	movw	r30, r24
    5f0c:	80 81       	ld	r24, Z
    5f0e:	91 81       	ldd	r25, Z+1	; 0x01
    5f10:	a2 81       	ldd	r26, Z+2	; 0x02
    5f12:	b3 81       	ldd	r27, Z+3	; 0x03
    5f14:	be 01       	movw	r22, r28
    5f16:	64 5b       	subi	r22, 0xB4	; 180
    5f18:	7f 4f       	sbci	r23, 0xFF	; 255
    5f1a:	79 01       	movw	r14, r18
    5f1c:	8c 01       	movw	r16, r24
    5f1e:	9d 01       	movw	r18, r26
    5f20:	49 81       	ldd	r20, Y+1	; 0x01
    5f22:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f24:	0e 94 c2 2b 	call	0x5784	; 0x5784 <Socket_ReadSocketData>
    5f28:	17 c1       	rjmp	.+558    	; 0x6158 <m2m_ip_cb+0x76a>
    5f2a:	ce 01       	movw	r24, r28
    5f2c:	84 5b       	subi	r24, 0xB4	; 180
    5f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5f30:	2b 85       	ldd	r18, Y+11	; 0x0b
    5f32:	3c 85       	ldd	r19, Y+12	; 0x0c
    5f34:	dc 01       	movw	r26, r24
    5f36:	12 96       	adiw	r26, 0x02	; 2
    5f38:	2d 93       	st	X+, r18
    5f3a:	3c 93       	st	X, r19
    5f3c:	13 97       	sbiw	r26, 0x03	; 3
    5f3e:	ce 01       	movw	r24, r28
    5f40:	84 5b       	subi	r24, 0xB4	; 180
    5f42:	9f 4f       	sbci	r25, 0xFF	; 255
    5f44:	fc 01       	movw	r30, r24
    5f46:	10 82       	st	Z, r1
    5f48:	11 82       	std	Z+1, r1	; 0x01
    5f4a:	80 91 ae 2e 	lds	r24, 0x2EAE	; 0x802eae <gpfAppSocketCb>
    5f4e:	90 91 af 2e 	lds	r25, 0x2EAF	; 0x802eaf <gpfAppSocketCb+0x1>
    5f52:	89 2b       	or	r24, r25
    5f54:	09 f4       	brne	.+2      	; 0x5f58 <m2m_ip_cb+0x56a>
    5f56:	00 c1       	rjmp	.+512    	; 0x6158 <m2m_ip_cb+0x76a>
    5f58:	20 91 ae 2e 	lds	r18, 0x2EAE	; 0x802eae <gpfAppSocketCb>
    5f5c:	30 91 af 2e 	lds	r19, 0x2EAF	; 0x802eaf <gpfAppSocketCb+0x1>
    5f60:	ce 01       	movw	r24, r28
    5f62:	84 5b       	subi	r24, 0xB4	; 180
    5f64:	9f 4f       	sbci	r25, 0xFF	; 255
    5f66:	ac 01       	movw	r20, r24
    5f68:	69 81       	ldd	r22, Y+1	; 0x01
    5f6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f6c:	f9 01       	movw	r30, r18
    5f6e:	09 95       	icall
    5f70:	f3 c0       	rjmp	.+486    	; 0x6158 <m2m_ip_cb+0x76a>
    5f72:	ce 01       	movw	r24, r28
    5f74:	8b 53       	subi	r24, 0x3B	; 59
    5f76:	9f 4f       	sbci	r25, 0xFF	; 255
    5f78:	2e 81       	ldd	r18, Y+6	; 0x06
    5f7a:	3f 81       	ldd	r19, Y+7	; 0x07
    5f7c:	dc 01       	movw	r26, r24
    5f7e:	8d 91       	ld	r24, X+
    5f80:	9c 91       	ld	r25, X
    5f82:	28 17       	cp	r18, r24
    5f84:	39 07       	cpc	r19, r25
    5f86:	08 f0       	brcs	.+2      	; 0x5f8a <m2m_ip_cb+0x59c>
    5f88:	e7 c0       	rjmp	.+462    	; 0x6158 <m2m_ip_cb+0x76a>
    5f8a:	01 e0       	ldi	r16, 0x01	; 1
    5f8c:	20 e0       	ldi	r18, 0x00	; 0
    5f8e:	30 e0       	ldi	r19, 0x00	; 0
    5f90:	40 e0       	ldi	r20, 0x00	; 0
    5f92:	50 e0       	ldi	r21, 0x00	; 0
    5f94:	60 e0       	ldi	r22, 0x00	; 0
    5f96:	70 e0       	ldi	r23, 0x00	; 0
    5f98:	cb 01       	movw	r24, r22
    5f9a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    5f9e:	dc c0       	rjmp	.+440    	; 0x6158 <m2m_ip_cb+0x76a>
    5fa0:	ce 01       	movw	r24, r28
    5fa2:	8c 53       	subi	r24, 0x3C	; 60
    5fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    5fa6:	fc 01       	movw	r30, r24
    5fa8:	80 81       	ld	r24, Z
    5faa:	85 34       	cpi	r24, 0x45	; 69
    5fac:	79 f0       	breq	.+30     	; 0x5fcc <m2m_ip_cb+0x5de>
    5fae:	ce 01       	movw	r24, r28
    5fb0:	8c 53       	subi	r24, 0x3C	; 60
    5fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    5fb4:	dc 01       	movw	r26, r24
    5fb6:	8c 91       	ld	r24, X
    5fb8:	87 34       	cpi	r24, 0x47	; 71
    5fba:	41 f0       	breq	.+16     	; 0x5fcc <m2m_ip_cb+0x5de>
    5fbc:	ce 01       	movw	r24, r28
    5fbe:	8c 53       	subi	r24, 0x3C	; 60
    5fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    5fc2:	fc 01       	movw	r30, r24
    5fc4:	80 81       	ld	r24, Z
    5fc6:	8c 34       	cpi	r24, 0x4C	; 76
    5fc8:	09 f0       	breq	.+2      	; 0x5fcc <m2m_ip_cb+0x5de>
    5fca:	67 c0       	rjmp	.+206    	; 0x609a <m2m_ip_cb+0x6ac>
    5fcc:	87 e0       	ldi	r24, 0x07	; 7
    5fce:	8a 83       	std	Y+2, r24	; 0x02
    5fd0:	ce 01       	movw	r24, r28
    5fd2:	8c 53       	subi	r24, 0x3C	; 60
    5fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    5fd6:	dc 01       	movw	r26, r24
    5fd8:	8c 91       	ld	r24, X
    5fda:	87 34       	cpi	r24, 0x47	; 71
    5fdc:	11 f4       	brne	.+4      	; 0x5fe2 <m2m_ip_cb+0x5f4>
    5fde:	88 e0       	ldi	r24, 0x08	; 8
    5fe0:	8a 83       	std	Y+2, r24	; 0x02
    5fe2:	ae 01       	movw	r20, r28
    5fe4:	4c 59       	subi	r20, 0x9C	; 156
    5fe6:	5f 4f       	sbci	r21, 0xFF	; 255
    5fe8:	ce 01       	movw	r24, r28
    5fea:	89 53       	subi	r24, 0x39	; 57
    5fec:	9f 4f       	sbci	r25, 0xFF	; 255
    5fee:	fc 01       	movw	r30, r24
    5ff0:	80 81       	ld	r24, Z
    5ff2:	91 81       	ldd	r25, Z+1	; 0x01
    5ff4:	a2 81       	ldd	r26, Z+2	; 0x02
    5ff6:	b3 81       	ldd	r27, Z+3	; 0x03
    5ff8:	00 e0       	ldi	r16, 0x00	; 0
    5ffa:	28 e0       	ldi	r18, 0x08	; 8
    5ffc:	30 e0       	ldi	r19, 0x00	; 0
    5ffe:	bc 01       	movw	r22, r24
    6000:	cd 01       	movw	r24, r26
    6002:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    6006:	88 23       	and	r24, r24
    6008:	09 f0       	breq	.+2      	; 0x600c <m2m_ip_cb+0x61e>
    600a:	a8 c0       	rjmp	.+336    	; 0x615c <m2m_ip_cb+0x76e>
    600c:	1b 82       	std	Y+3, r1	; 0x03
    600e:	1c 82       	std	Y+4, r1	; 0x04
    6010:	ce 01       	movw	r24, r28
    6012:	8c 59       	subi	r24, 0x9C	; 156
    6014:	9f 4f       	sbci	r25, 0xFF	; 255
    6016:	dc 01       	movw	r26, r24
    6018:	8c 91       	ld	r24, X
    601a:	8d 83       	std	Y+5, r24	; 0x05
    601c:	ce 01       	movw	r24, r28
    601e:	8c 59       	subi	r24, 0x9C	; 156
    6020:	9f 4f       	sbci	r25, 0xFF	; 255
    6022:	fc 01       	movw	r30, r24
    6024:	84 81       	ldd	r24, Z+4	; 0x04
    6026:	95 81       	ldd	r25, Z+5	; 0x05
    6028:	8b 83       	std	Y+3, r24	; 0x03
    602a:	9c 83       	std	Y+4, r25	; 0x04
    602c:	ce 01       	movw	r24, r28
    602e:	8c 59       	subi	r24, 0x9C	; 156
    6030:	9f 4f       	sbci	r25, 0xFF	; 255
    6032:	dc 01       	movw	r26, r24
    6034:	12 96       	adiw	r26, 0x02	; 2
    6036:	2d 91       	ld	r18, X+
    6038:	3c 91       	ld	r19, X
    603a:	13 97       	sbiw	r26, 0x03	; 3
    603c:	ce 01       	movw	r24, r28
    603e:	8e 59       	subi	r24, 0x9E	; 158
    6040:	9f 4f       	sbci	r25, 0xFF	; 255
    6042:	fc 01       	movw	r30, r24
    6044:	20 83       	st	Z, r18
    6046:	31 83       	std	Z+1, r19	; 0x01
    6048:	8d 81       	ldd	r24, Y+5	; 0x05
    604a:	28 2f       	mov	r18, r24
    604c:	88 0f       	add	r24, r24
    604e:	33 0b       	sbc	r19, r19
    6050:	4b e0       	ldi	r20, 0x0B	; 11
    6052:	42 9f       	mul	r20, r18
    6054:	c0 01       	movw	r24, r0
    6056:	43 9f       	mul	r20, r19
    6058:	90 0d       	add	r25, r0
    605a:	11 24       	eor	r1, r1
    605c:	87 5c       	subi	r24, 0xC7	; 199
    605e:	91 4d       	sbci	r25, 0xD1	; 209
    6060:	dc 01       	movw	r26, r24
    6062:	2d 91       	ld	r18, X+
    6064:	3c 91       	ld	r19, X
    6066:	8b 81       	ldd	r24, Y+3	; 0x03
    6068:	9c 81       	ldd	r25, Y+4	; 0x04
    606a:	28 17       	cp	r18, r24
    606c:	39 07       	cpc	r19, r25
    606e:	09 f0       	breq	.+2      	; 0x6072 <m2m_ip_cb+0x684>
    6070:	75 c0       	rjmp	.+234    	; 0x615c <m2m_ip_cb+0x76e>
    6072:	80 91 ae 2e 	lds	r24, 0x2EAE	; 0x802eae <gpfAppSocketCb>
    6076:	90 91 af 2e 	lds	r25, 0x2EAF	; 0x802eaf <gpfAppSocketCb+0x1>
    607a:	89 2b       	or	r24, r25
    607c:	09 f4       	brne	.+2      	; 0x6080 <m2m_ip_cb+0x692>
    607e:	6e c0       	rjmp	.+220    	; 0x615c <m2m_ip_cb+0x76e>
    6080:	20 91 ae 2e 	lds	r18, 0x2EAE	; 0x802eae <gpfAppSocketCb>
    6084:	30 91 af 2e 	lds	r19, 0x2EAF	; 0x802eaf <gpfAppSocketCb+0x1>
    6088:	ce 01       	movw	r24, r28
    608a:	8e 59       	subi	r24, 0x9E	; 158
    608c:	9f 4f       	sbci	r25, 0xFF	; 255
    608e:	ac 01       	movw	r20, r24
    6090:	6a 81       	ldd	r22, Y+2	; 0x02
    6092:	8d 81       	ldd	r24, Y+5	; 0x05
    6094:	f9 01       	movw	r30, r18
    6096:	09 95       	icall
    6098:	61 c0       	rjmp	.+194    	; 0x615c <m2m_ip_cb+0x76e>
    609a:	ce 01       	movw	r24, r28
    609c:	8c 53       	subi	r24, 0x3C	; 60
    609e:	9f 4f       	sbci	r25, 0xFF	; 255
    60a0:	dc 01       	movw	r26, r24
    60a2:	8c 91       	ld	r24, X
    60a4:	82 35       	cpi	r24, 0x52	; 82
    60a6:	09 f0       	breq	.+2      	; 0x60aa <m2m_ip_cb+0x6bc>
    60a8:	5a c0       	rjmp	.+180    	; 0x615e <m2m_ip_cb+0x770>
    60aa:	ae 01       	movw	r20, r28
    60ac:	44 59       	subi	r20, 0x94	; 148
    60ae:	5f 4f       	sbci	r21, 0xFF	; 255
    60b0:	ce 01       	movw	r24, r28
    60b2:	89 53       	subi	r24, 0x39	; 57
    60b4:	9f 4f       	sbci	r25, 0xFF	; 255
    60b6:	fc 01       	movw	r30, r24
    60b8:	80 81       	ld	r24, Z
    60ba:	91 81       	ldd	r25, Z+1	; 0x01
    60bc:	a2 81       	ldd	r26, Z+2	; 0x02
    60be:	b3 81       	ldd	r27, Z+3	; 0x03
    60c0:	01 e0       	ldi	r16, 0x01	; 1
    60c2:	24 e1       	ldi	r18, 0x14	; 20
    60c4:	30 e0       	ldi	r19, 0x00	; 0
    60c6:	bc 01       	movw	r22, r24
    60c8:	cd 01       	movw	r24, r26
    60ca:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <hif_receive>
    60ce:	88 23       	and	r24, r24
    60d0:	09 f0       	breq	.+2      	; 0x60d4 <m2m_ip_cb+0x6e6>
    60d2:	45 c0       	rjmp	.+138    	; 0x615e <m2m_ip_cb+0x770>
    60d4:	ce 01       	movw	r24, r28
    60d6:	84 59       	subi	r24, 0x94	; 148
    60d8:	9f 4f       	sbci	r25, 0xFF	; 255
    60da:	fc 01       	movw	r30, r24
    60dc:	84 81       	ldd	r24, Z+4	; 0x04
    60de:	95 81       	ldd	r25, Z+5	; 0x05
    60e0:	a6 81       	ldd	r26, Z+6	; 0x06
    60e2:	b7 81       	ldd	r27, Z+7	; 0x07
    60e4:	80 93 b0 2e 	sts	0x2EB0, r24	; 0x802eb0 <gfpPingCb>
    60e8:	90 93 b1 2e 	sts	0x2EB1, r25	; 0x802eb1 <gfpPingCb+0x1>
    60ec:	80 91 b0 2e 	lds	r24, 0x2EB0	; 0x802eb0 <gfpPingCb>
    60f0:	90 91 b1 2e 	lds	r25, 0x2EB1	; 0x802eb1 <gfpPingCb+0x1>
    60f4:	89 2b       	or	r24, r25
    60f6:	99 f1       	breq	.+102    	; 0x615e <m2m_ip_cb+0x770>
    60f8:	a0 91 b0 2e 	lds	r26, 0x2EB0	; 0x802eb0 <gfpPingCb>
    60fc:	b0 91 b1 2e 	lds	r27, 0x2EB1	; 0x802eb1 <gfpPingCb+0x1>
    6100:	c5 53       	subi	r28, 0x35	; 53
    6102:	df 4f       	sbci	r29, 0xFF	; 255
    6104:	a8 83       	st	Y, r26
    6106:	b9 83       	std	Y+1, r27	; 0x01
    6108:	cb 5c       	subi	r28, 0xCB	; 203
    610a:	d0 40       	sbci	r29, 0x00	; 0
    610c:	ce 01       	movw	r24, r28
    610e:	84 59       	subi	r24, 0x94	; 148
    6110:	9f 4f       	sbci	r25, 0xFF	; 255
    6112:	fc 01       	movw	r30, r24
    6114:	60 89       	ldd	r22, Z+16	; 0x10
    6116:	ce 01       	movw	r24, r28
    6118:	84 59       	subi	r24, 0x94	; 148
    611a:	9f 4f       	sbci	r25, 0xFF	; 255
    611c:	dc 01       	movw	r26, r24
    611e:	18 96       	adiw	r26, 0x08	; 8
    6120:	2d 91       	ld	r18, X+
    6122:	3d 91       	ld	r19, X+
    6124:	4d 91       	ld	r20, X+
    6126:	5c 91       	ld	r21, X
    6128:	1b 97       	sbiw	r26, 0x0b	; 11
    612a:	ce 01       	movw	r24, r28
    612c:	84 59       	subi	r24, 0x94	; 148
    612e:	9f 4f       	sbci	r25, 0xFF	; 255
    6130:	fc 01       	movw	r30, r24
    6132:	80 81       	ld	r24, Z
    6134:	91 81       	ldd	r25, Z+1	; 0x01
    6136:	a2 81       	ldd	r26, Z+2	; 0x02
    6138:	b3 81       	ldd	r27, Z+3	; 0x03
    613a:	06 2f       	mov	r16, r22
    613c:	bc 01       	movw	r22, r24
    613e:	cd 01       	movw	r24, r26
    6140:	c5 53       	subi	r28, 0x35	; 53
    6142:	df 4f       	sbci	r29, 0xFF	; 255
    6144:	e8 81       	ld	r30, Y
    6146:	f9 81       	ldd	r31, Y+1	; 0x01
    6148:	cb 5c       	subi	r28, 0xCB	; 203
    614a:	d0 40       	sbci	r29, 0x00	; 0
    614c:	09 95       	icall
    614e:	07 c0       	rjmp	.+14     	; 0x615e <m2m_ip_cb+0x770>
    6150:	00 00       	nop
    6152:	05 c0       	rjmp	.+10     	; 0x615e <m2m_ip_cb+0x770>
    6154:	00 00       	nop
    6156:	03 c0       	rjmp	.+6      	; 0x615e <m2m_ip_cb+0x770>
    6158:	00 00       	nop
    615a:	01 c0       	rjmp	.+2      	; 0x615e <m2m_ip_cb+0x770>
    615c:	00 00       	nop
    615e:	00 00       	nop
    6160:	c4 53       	subi	r28, 0x34	; 52
    6162:	df 4f       	sbci	r29, 0xFF	; 255
    6164:	cd bf       	out	0x3d, r28	; 61
    6166:	de bf       	out	0x3e, r29	; 62
    6168:	df 91       	pop	r29
    616a:	cf 91       	pop	r28
    616c:	1f 91       	pop	r17
    616e:	0f 91       	pop	r16
    6170:	ff 90       	pop	r15
    6172:	ef 90       	pop	r14
    6174:	08 95       	ret

00006176 <socketInit>:
    6176:	cf 93       	push	r28
    6178:	df 93       	push	r29
    617a:	cd b7       	in	r28, 0x3d	; 61
    617c:	de b7       	in	r29, 0x3e	; 62
    617e:	80 91 14 2e 	lds	r24, 0x2E14	; 0x802e14 <gbSocketInit>
    6182:	88 23       	and	r24, r24
    6184:	a9 f4       	brne	.+42     	; 0x61b0 <socketInit+0x3a>
    6186:	29 e7       	ldi	r18, 0x79	; 121
    6188:	30 e0       	ldi	r19, 0x00	; 0
    618a:	40 e0       	ldi	r20, 0x00	; 0
    618c:	50 e0       	ldi	r21, 0x00	; 0
    618e:	60 e0       	ldi	r22, 0x00	; 0
    6190:	85 e3       	ldi	r24, 0x35	; 53
    6192:	9e e2       	ldi	r25, 0x2E	; 46
    6194:	0e 94 a5 10 	call	0x214a	; 0x214a <m2m_memset>
    6198:	67 ef       	ldi	r22, 0xF7	; 247
    619a:	7c e2       	ldi	r23, 0x2C	; 44
    619c:	82 e0       	ldi	r24, 0x02	; 2
    619e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <hif_register_cb>
    61a2:	81 e0       	ldi	r24, 0x01	; 1
    61a4:	80 93 14 2e 	sts	0x2E14, r24	; 0x802e14 <gbSocketInit>
    61a8:	10 92 12 2e 	sts	0x2E12, r1	; 0x802e12 <gu16SessionID>
    61ac:	10 92 13 2e 	sts	0x2E13, r1	; 0x802e13 <gu16SessionID+0x1>
    61b0:	00 00       	nop
    61b2:	df 91       	pop	r29
    61b4:	cf 91       	pop	r28
    61b6:	08 95       	ret

000061b8 <registerSocketCallback>:
    61b8:	cf 93       	push	r28
    61ba:	df 93       	push	r29
    61bc:	00 d0       	rcall	.+0      	; 0x61be <registerSocketCallback+0x6>
    61be:	00 d0       	rcall	.+0      	; 0x61c0 <registerSocketCallback+0x8>
    61c0:	cd b7       	in	r28, 0x3d	; 61
    61c2:	de b7       	in	r29, 0x3e	; 62
    61c4:	89 83       	std	Y+1, r24	; 0x01
    61c6:	9a 83       	std	Y+2, r25	; 0x02
    61c8:	6b 83       	std	Y+3, r22	; 0x03
    61ca:	7c 83       	std	Y+4, r23	; 0x04
    61cc:	89 81       	ldd	r24, Y+1	; 0x01
    61ce:	9a 81       	ldd	r25, Y+2	; 0x02
    61d0:	80 93 ae 2e 	sts	0x2EAE, r24	; 0x802eae <gpfAppSocketCb>
    61d4:	90 93 af 2e 	sts	0x2EAF, r25	; 0x802eaf <gpfAppSocketCb+0x1>
    61d8:	8b 81       	ldd	r24, Y+3	; 0x03
    61da:	9c 81       	ldd	r25, Y+4	; 0x04
    61dc:	80 93 b2 2e 	sts	0x2EB2, r24	; 0x802eb2 <gpfAppResolveCb>
    61e0:	90 93 b3 2e 	sts	0x2EB3, r25	; 0x802eb3 <gpfAppResolveCb+0x1>
    61e4:	00 00       	nop
    61e6:	24 96       	adiw	r28, 0x04	; 4
    61e8:	cd bf       	out	0x3d, r28	; 61
    61ea:	de bf       	out	0x3e, r29	; 62
    61ec:	df 91       	pop	r29
    61ee:	cf 91       	pop	r28
    61f0:	08 95       	ret

000061f2 <socket>:
    61f2:	cf 92       	push	r12
    61f4:	df 92       	push	r13
    61f6:	ef 92       	push	r14
    61f8:	ff 92       	push	r15
    61fa:	0f 93       	push	r16
    61fc:	1f 93       	push	r17
    61fe:	cf 93       	push	r28
    6200:	df 93       	push	r29
    6202:	cd b7       	in	r28, 0x3d	; 61
    6204:	de b7       	in	r29, 0x3e	; 62
    6206:	2f 97       	sbiw	r28, 0x0f	; 15
    6208:	cd bf       	out	0x3d, r28	; 61
    620a:	de bf       	out	0x3e, r29	; 62
    620c:	8c 87       	std	Y+12, r24	; 0x0c
    620e:	9d 87       	std	Y+13, r25	; 0x0d
    6210:	6e 87       	std	Y+14, r22	; 0x0e
    6212:	4f 87       	std	Y+15, r20	; 0x0f
    6214:	8f ef       	ldi	r24, 0xFF	; 255
    6216:	89 83       	std	Y+1, r24	; 0x01
    6218:	8c 85       	ldd	r24, Y+12	; 0x0c
    621a:	9d 85       	ldd	r25, Y+13	; 0x0d
    621c:	02 97       	sbiw	r24, 0x02	; 2
    621e:	09 f0       	breq	.+2      	; 0x6222 <socket+0x30>
    6220:	bd c0       	rjmp	.+378    	; 0x639c <socket+0x1aa>
    6222:	8e 85       	ldd	r24, Y+14	; 0x0e
    6224:	81 30       	cpi	r24, 0x01	; 1
    6226:	79 f5       	brne	.+94     	; 0x6286 <socket+0x94>
    6228:	1a 82       	std	Y+2, r1	; 0x02
    622a:	29 c0       	rjmp	.+82     	; 0x627e <socket+0x8c>
    622c:	80 91 15 2e 	lds	r24, 0x2E15	; 0x802e15 <u8NextTcpSock.2561>
    6230:	8d 83       	std	Y+5, r24	; 0x05
    6232:	80 91 15 2e 	lds	r24, 0x2E15	; 0x802e15 <u8NextTcpSock.2561>
    6236:	28 2f       	mov	r18, r24
    6238:	30 e0       	ldi	r19, 0x00	; 0
    623a:	4b e0       	ldi	r20, 0x0B	; 11
    623c:	42 9f       	mul	r20, r18
    623e:	c0 01       	movw	r24, r0
    6240:	43 9f       	mul	r20, r19
    6242:	90 0d       	add	r25, r0
    6244:	11 24       	eor	r1, r1
    6246:	8b 5c       	subi	r24, 0xCB	; 203
    6248:	91 4d       	sbci	r25, 0xD1	; 209
    624a:	8b 83       	std	Y+3, r24	; 0x03
    624c:	9c 83       	std	Y+4, r25	; 0x04
    624e:	80 91 15 2e 	lds	r24, 0x2E15	; 0x802e15 <u8NextTcpSock.2561>
    6252:	88 2f       	mov	r24, r24
    6254:	90 e0       	ldi	r25, 0x00	; 0
    6256:	01 96       	adiw	r24, 0x01	; 1
    6258:	27 e0       	ldi	r18, 0x07	; 7
    625a:	30 e0       	ldi	r19, 0x00	; 0
    625c:	b9 01       	movw	r22, r18
    625e:	0e 94 6c 37 	call	0x6ed8	; 0x6ed8 <__divmodhi4>
    6262:	80 93 15 2e 	sts	0x2E15, r24	; 0x802e15 <u8NextTcpSock.2561>
    6266:	8b 81       	ldd	r24, Y+3	; 0x03
    6268:	9c 81       	ldd	r25, Y+4	; 0x04
    626a:	fc 01       	movw	r30, r24
    626c:	80 85       	ldd	r24, Z+8	; 0x08
    626e:	88 23       	and	r24, r24
    6270:	19 f4       	brne	.+6      	; 0x6278 <socket+0x86>
    6272:	8d 81       	ldd	r24, Y+5	; 0x05
    6274:	89 83       	std	Y+1, r24	; 0x01
    6276:	42 c0       	rjmp	.+132    	; 0x62fc <socket+0x10a>
    6278:	8a 81       	ldd	r24, Y+2	; 0x02
    627a:	8f 5f       	subi	r24, 0xFF	; 255
    627c:	8a 83       	std	Y+2, r24	; 0x02
    627e:	8a 81       	ldd	r24, Y+2	; 0x02
    6280:	87 30       	cpi	r24, 0x07	; 7
    6282:	a0 f2       	brcs	.-88     	; 0x622c <socket+0x3a>
    6284:	3b c0       	rjmp	.+118    	; 0x62fc <socket+0x10a>
    6286:	8e 85       	ldd	r24, Y+14	; 0x0e
    6288:	82 30       	cpi	r24, 0x02	; 2
    628a:	c1 f5       	brne	.+112    	; 0x62fc <socket+0x10a>
    628c:	82 e8       	ldi	r24, 0x82	; 130
    628e:	9e e2       	ldi	r25, 0x2E	; 46
    6290:	8e 83       	std	Y+6, r24	; 0x06
    6292:	9f 83       	std	Y+7, r25	; 0x07
    6294:	1a 82       	std	Y+2, r1	; 0x02
    6296:	2f c0       	rjmp	.+94     	; 0x62f6 <socket+0x104>
    6298:	80 91 16 2e 	lds	r24, 0x2E16	; 0x802e16 <u8NextUdpSock.2562>
    629c:	8d 83       	std	Y+5, r24	; 0x05
    629e:	80 91 16 2e 	lds	r24, 0x2E16	; 0x802e16 <u8NextUdpSock.2562>
    62a2:	28 2f       	mov	r18, r24
    62a4:	30 e0       	ldi	r19, 0x00	; 0
    62a6:	4b e0       	ldi	r20, 0x0B	; 11
    62a8:	42 9f       	mul	r20, r18
    62aa:	c0 01       	movw	r24, r0
    62ac:	43 9f       	mul	r20, r19
    62ae:	90 0d       	add	r25, r0
    62b0:	11 24       	eor	r1, r1
    62b2:	2e 81       	ldd	r18, Y+6	; 0x06
    62b4:	3f 81       	ldd	r19, Y+7	; 0x07
    62b6:	82 0f       	add	r24, r18
    62b8:	93 1f       	adc	r25, r19
    62ba:	8b 83       	std	Y+3, r24	; 0x03
    62bc:	9c 83       	std	Y+4, r25	; 0x04
    62be:	80 91 16 2e 	lds	r24, 0x2E16	; 0x802e16 <u8NextUdpSock.2562>
    62c2:	88 2f       	mov	r24, r24
    62c4:	90 e0       	ldi	r25, 0x00	; 0
    62c6:	01 96       	adiw	r24, 0x01	; 1
    62c8:	83 70       	andi	r24, 0x03	; 3
    62ca:	90 78       	andi	r25, 0x80	; 128
    62cc:	99 23       	and	r25, r25
    62ce:	24 f4       	brge	.+8      	; 0x62d8 <socket+0xe6>
    62d0:	01 97       	sbiw	r24, 0x01	; 1
    62d2:	8c 6f       	ori	r24, 0xFC	; 252
    62d4:	9f 6f       	ori	r25, 0xFF	; 255
    62d6:	01 96       	adiw	r24, 0x01	; 1
    62d8:	80 93 16 2e 	sts	0x2E16, r24	; 0x802e16 <u8NextUdpSock.2562>
    62dc:	8b 81       	ldd	r24, Y+3	; 0x03
    62de:	9c 81       	ldd	r25, Y+4	; 0x04
    62e0:	fc 01       	movw	r30, r24
    62e2:	80 85       	ldd	r24, Z+8	; 0x08
    62e4:	88 23       	and	r24, r24
    62e6:	21 f4       	brne	.+8      	; 0x62f0 <socket+0xfe>
    62e8:	8d 81       	ldd	r24, Y+5	; 0x05
    62ea:	89 5f       	subi	r24, 0xF9	; 249
    62ec:	89 83       	std	Y+1, r24	; 0x01
    62ee:	06 c0       	rjmp	.+12     	; 0x62fc <socket+0x10a>
    62f0:	8a 81       	ldd	r24, Y+2	; 0x02
    62f2:	8f 5f       	subi	r24, 0xFF	; 255
    62f4:	8a 83       	std	Y+2, r24	; 0x02
    62f6:	8a 81       	ldd	r24, Y+2	; 0x02
    62f8:	84 30       	cpi	r24, 0x04	; 4
    62fa:	70 f2       	brcs	.-100    	; 0x6298 <socket+0xa6>
    62fc:	89 81       	ldd	r24, Y+1	; 0x01
    62fe:	88 23       	and	r24, r24
    6300:	0c f4       	brge	.+2      	; 0x6304 <socket+0x112>
    6302:	4c c0       	rjmp	.+152    	; 0x639c <socket+0x1aa>
    6304:	8b 81       	ldd	r24, Y+3	; 0x03
    6306:	9c 81       	ldd	r25, Y+4	; 0x04
    6308:	2b e0       	ldi	r18, 0x0B	; 11
    630a:	30 e0       	ldi	r19, 0x00	; 0
    630c:	40 e0       	ldi	r20, 0x00	; 0
    630e:	50 e0       	ldi	r21, 0x00	; 0
    6310:	60 e0       	ldi	r22, 0x00	; 0
    6312:	0e 94 a5 10 	call	0x214a	; 0x214a <m2m_memset>
    6316:	8b 81       	ldd	r24, Y+3	; 0x03
    6318:	9c 81       	ldd	r25, Y+4	; 0x04
    631a:	21 e0       	ldi	r18, 0x01	; 1
    631c:	fc 01       	movw	r30, r24
    631e:	20 87       	std	Z+8, r18	; 0x08
    6320:	80 91 12 2e 	lds	r24, 0x2E12	; 0x802e12 <gu16SessionID>
    6324:	90 91 13 2e 	lds	r25, 0x2E13	; 0x802e13 <gu16SessionID+0x1>
    6328:	01 96       	adiw	r24, 0x01	; 1
    632a:	80 93 12 2e 	sts	0x2E12, r24	; 0x802e12 <gu16SessionID>
    632e:	90 93 13 2e 	sts	0x2E13, r25	; 0x802e13 <gu16SessionID+0x1>
    6332:	80 91 12 2e 	lds	r24, 0x2E12	; 0x802e12 <gu16SessionID>
    6336:	90 91 13 2e 	lds	r25, 0x2E13	; 0x802e13 <gu16SessionID+0x1>
    633a:	89 2b       	or	r24, r25
    633c:	49 f4       	brne	.+18     	; 0x6350 <socket+0x15e>
    633e:	80 91 12 2e 	lds	r24, 0x2E12	; 0x802e12 <gu16SessionID>
    6342:	90 91 13 2e 	lds	r25, 0x2E13	; 0x802e13 <gu16SessionID+0x1>
    6346:	01 96       	adiw	r24, 0x01	; 1
    6348:	80 93 12 2e 	sts	0x2E12, r24	; 0x802e12 <gu16SessionID>
    634c:	90 93 13 2e 	sts	0x2E13, r25	; 0x802e13 <gu16SessionID+0x1>
    6350:	20 91 12 2e 	lds	r18, 0x2E12	; 0x802e12 <gu16SessionID>
    6354:	30 91 13 2e 	lds	r19, 0x2E13	; 0x802e13 <gu16SessionID+0x1>
    6358:	8b 81       	ldd	r24, Y+3	; 0x03
    635a:	9c 81       	ldd	r25, Y+4	; 0x04
    635c:	fc 01       	movw	r30, r24
    635e:	24 83       	std	Z+4, r18	; 0x04
    6360:	35 83       	std	Z+5, r19	; 0x05
    6362:	8f 85       	ldd	r24, Y+15	; 0x0f
    6364:	88 2f       	mov	r24, r24
    6366:	90 e0       	ldi	r25, 0x00	; 0
    6368:	81 70       	andi	r24, 0x01	; 1
    636a:	99 27       	eor	r25, r25
    636c:	89 2b       	or	r24, r25
    636e:	b1 f0       	breq	.+44     	; 0x639c <socket+0x1aa>
    6370:	89 81       	ldd	r24, Y+1	; 0x01
    6372:	88 87       	std	Y+8, r24	; 0x08
    6374:	8b 81       	ldd	r24, Y+3	; 0x03
    6376:	9c 81       	ldd	r25, Y+4	; 0x04
    6378:	21 e2       	ldi	r18, 0x21	; 33
    637a:	fc 01       	movw	r30, r24
    637c:	21 87       	std	Z+9, r18	; 0x09
    637e:	ce 01       	movw	r24, r28
    6380:	08 96       	adiw	r24, 0x08	; 8
    6382:	c1 2c       	mov	r12, r1
    6384:	d1 2c       	mov	r13, r1
    6386:	e1 2c       	mov	r14, r1
    6388:	f1 2c       	mov	r15, r1
    638a:	00 e0       	ldi	r16, 0x00	; 0
    638c:	10 e0       	ldi	r17, 0x00	; 0
    638e:	24 e0       	ldi	r18, 0x04	; 4
    6390:	30 e0       	ldi	r19, 0x00	; 0
    6392:	ac 01       	movw	r20, r24
    6394:	60 e5       	ldi	r22, 0x50	; 80
    6396:	82 e0       	ldi	r24, 0x02	; 2
    6398:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <hif_send>
    639c:	89 81       	ldd	r24, Y+1	; 0x01
    639e:	2f 96       	adiw	r28, 0x0f	; 15
    63a0:	cd bf       	out	0x3d, r28	; 61
    63a2:	de bf       	out	0x3e, r29	; 62
    63a4:	df 91       	pop	r29
    63a6:	cf 91       	pop	r28
    63a8:	1f 91       	pop	r17
    63aa:	0f 91       	pop	r16
    63ac:	ff 90       	pop	r15
    63ae:	ef 90       	pop	r14
    63b0:	df 90       	pop	r13
    63b2:	cf 90       	pop	r12
    63b4:	08 95       	ret

000063b6 <bind>:
    63b6:	cf 92       	push	r12
    63b8:	df 92       	push	r13
    63ba:	ef 92       	push	r14
    63bc:	ff 92       	push	r15
    63be:	0f 93       	push	r16
    63c0:	1f 93       	push	r17
    63c2:	cf 93       	push	r28
    63c4:	df 93       	push	r29
    63c6:	cd b7       	in	r28, 0x3d	; 61
    63c8:	de b7       	in	r29, 0x3e	; 62
    63ca:	62 97       	sbiw	r28, 0x12	; 18
    63cc:	cd bf       	out	0x3d, r28	; 61
    63ce:	de bf       	out	0x3e, r29	; 62
    63d0:	8f 87       	std	Y+15, r24	; 0x0f
    63d2:	68 8b       	std	Y+16, r22	; 0x10
    63d4:	79 8b       	std	Y+17, r23	; 0x11
    63d6:	4a 8b       	std	Y+18, r20	; 0x12
    63d8:	8a ef       	ldi	r24, 0xFA	; 250
    63da:	89 83       	std	Y+1, r24	; 0x01
    63dc:	88 89       	ldd	r24, Y+16	; 0x10
    63de:	99 89       	ldd	r25, Y+17	; 0x11
    63e0:	89 2b       	or	r24, r25
    63e2:	09 f4       	brne	.+2      	; 0x63e6 <bind+0x30>
    63e4:	63 c0       	rjmp	.+198    	; 0x64ac <bind+0xf6>
    63e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    63e8:	88 23       	and	r24, r24
    63ea:	0c f4       	brge	.+2      	; 0x63ee <bind+0x38>
    63ec:	5f c0       	rjmp	.+190    	; 0x64ac <bind+0xf6>
    63ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    63f0:	28 2f       	mov	r18, r24
    63f2:	88 0f       	add	r24, r24
    63f4:	33 0b       	sbc	r19, r19
    63f6:	4b e0       	ldi	r20, 0x0B	; 11
    63f8:	42 9f       	mul	r20, r18
    63fa:	c0 01       	movw	r24, r0
    63fc:	43 9f       	mul	r20, r19
    63fe:	90 0d       	add	r25, r0
    6400:	11 24       	eor	r1, r1
    6402:	83 5c       	subi	r24, 0xC3	; 195
    6404:	91 4d       	sbci	r25, 0xD1	; 209
    6406:	fc 01       	movw	r30, r24
    6408:	80 81       	ld	r24, Z
    640a:	81 30       	cpi	r24, 0x01	; 1
    640c:	09 f0       	breq	.+2      	; 0x6410 <bind+0x5a>
    640e:	4e c0       	rjmp	.+156    	; 0x64ac <bind+0xf6>
    6410:	8a 89       	ldd	r24, Y+18	; 0x12
    6412:	88 23       	and	r24, r24
    6414:	09 f4       	brne	.+2      	; 0x6418 <bind+0x62>
    6416:	4a c0       	rjmp	.+148    	; 0x64ac <bind+0xf6>
    6418:	81 e4       	ldi	r24, 0x41	; 65
    641a:	8a 83       	std	Y+2, r24	; 0x02
    641c:	8f 85       	ldd	r24, Y+15	; 0x0f
    641e:	28 2f       	mov	r18, r24
    6420:	88 0f       	add	r24, r24
    6422:	33 0b       	sbc	r19, r19
    6424:	4b e0       	ldi	r20, 0x0B	; 11
    6426:	42 9f       	mul	r20, r18
    6428:	c0 01       	movw	r24, r0
    642a:	43 9f       	mul	r20, r19
    642c:	90 0d       	add	r25, r0
    642e:	11 24       	eor	r1, r1
    6430:	82 5c       	subi	r24, 0xC2	; 194
    6432:	91 4d       	sbci	r25, 0xD1	; 209
    6434:	fc 01       	movw	r30, r24
    6436:	80 81       	ld	r24, Z
    6438:	88 2f       	mov	r24, r24
    643a:	90 e0       	ldi	r25, 0x00	; 0
    643c:	81 70       	andi	r24, 0x01	; 1
    643e:	99 27       	eor	r25, r25
    6440:	89 2b       	or	r24, r25
    6442:	11 f0       	breq	.+4      	; 0x6448 <bind+0x92>
    6444:	84 e5       	ldi	r24, 0x54	; 84
    6446:	8a 83       	std	Y+2, r24	; 0x02
    6448:	8f 85       	ldd	r24, Y+15	; 0x0f
    644a:	8b 87       	std	Y+11, r24	; 0x0b
    644c:	68 89       	ldd	r22, Y+16	; 0x10
    644e:	79 89       	ldd	r23, Y+17	; 0x11
    6450:	ce 01       	movw	r24, r28
    6452:	03 96       	adiw	r24, 0x03	; 3
    6454:	28 e0       	ldi	r18, 0x08	; 8
    6456:	30 e0       	ldi	r19, 0x00	; 0
    6458:	40 e0       	ldi	r20, 0x00	; 0
    645a:	50 e0       	ldi	r21, 0x00	; 0
    645c:	0e 94 61 10 	call	0x20c2	; 0x20c2 <m2m_memcpy>
    6460:	8f 85       	ldd	r24, Y+15	; 0x0f
    6462:	28 2f       	mov	r18, r24
    6464:	88 0f       	add	r24, r24
    6466:	33 0b       	sbc	r19, r19
    6468:	4b e0       	ldi	r20, 0x0B	; 11
    646a:	42 9f       	mul	r20, r18
    646c:	c0 01       	movw	r24, r0
    646e:	43 9f       	mul	r20, r19
    6470:	90 0d       	add	r25, r0
    6472:	11 24       	eor	r1, r1
    6474:	87 5c       	subi	r24, 0xC7	; 199
    6476:	91 4d       	sbci	r25, 0xD1	; 209
    6478:	fc 01       	movw	r30, r24
    647a:	80 81       	ld	r24, Z
    647c:	91 81       	ldd	r25, Z+1	; 0x01
    647e:	8d 87       	std	Y+13, r24	; 0x0d
    6480:	9e 87       	std	Y+14, r25	; 0x0e
    6482:	ce 01       	movw	r24, r28
    6484:	03 96       	adiw	r24, 0x03	; 3
    6486:	c1 2c       	mov	r12, r1
    6488:	d1 2c       	mov	r13, r1
    648a:	e1 2c       	mov	r14, r1
    648c:	f1 2c       	mov	r15, r1
    648e:	00 e0       	ldi	r16, 0x00	; 0
    6490:	10 e0       	ldi	r17, 0x00	; 0
    6492:	2c e0       	ldi	r18, 0x0C	; 12
    6494:	30 e0       	ldi	r19, 0x00	; 0
    6496:	ac 01       	movw	r20, r24
    6498:	6a 81       	ldd	r22, Y+2	; 0x02
    649a:	82 e0       	ldi	r24, 0x02	; 2
    649c:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <hif_send>
    64a0:	89 83       	std	Y+1, r24	; 0x01
    64a2:	89 81       	ldd	r24, Y+1	; 0x01
    64a4:	88 23       	and	r24, r24
    64a6:	11 f0       	breq	.+4      	; 0x64ac <bind+0xf6>
    64a8:	87 ef       	ldi	r24, 0xF7	; 247
    64aa:	89 83       	std	Y+1, r24	; 0x01
    64ac:	89 81       	ldd	r24, Y+1	; 0x01
    64ae:	62 96       	adiw	r28, 0x12	; 18
    64b0:	cd bf       	out	0x3d, r28	; 61
    64b2:	de bf       	out	0x3e, r29	; 62
    64b4:	df 91       	pop	r29
    64b6:	cf 91       	pop	r28
    64b8:	1f 91       	pop	r17
    64ba:	0f 91       	pop	r16
    64bc:	ff 90       	pop	r15
    64be:	ef 90       	pop	r14
    64c0:	df 90       	pop	r13
    64c2:	cf 90       	pop	r12
    64c4:	08 95       	ret

000064c6 <listen>:
    64c6:	cf 92       	push	r12
    64c8:	df 92       	push	r13
    64ca:	ef 92       	push	r14
    64cc:	ff 92       	push	r15
    64ce:	0f 93       	push	r16
    64d0:	1f 93       	push	r17
    64d2:	cf 93       	push	r28
    64d4:	df 93       	push	r29
    64d6:	cd b7       	in	r28, 0x3d	; 61
    64d8:	de b7       	in	r29, 0x3e	; 62
    64da:	27 97       	sbiw	r28, 0x07	; 7
    64dc:	cd bf       	out	0x3d, r28	; 61
    64de:	de bf       	out	0x3e, r29	; 62
    64e0:	8e 83       	std	Y+6, r24	; 0x06
    64e2:	6f 83       	std	Y+7, r22	; 0x07
    64e4:	8a ef       	ldi	r24, 0xFA	; 250
    64e6:	89 83       	std	Y+1, r24	; 0x01
    64e8:	8e 81       	ldd	r24, Y+6	; 0x06
    64ea:	88 23       	and	r24, r24
    64ec:	d4 f1       	brlt	.+116    	; 0x6562 <listen+0x9c>
    64ee:	8e 81       	ldd	r24, Y+6	; 0x06
    64f0:	28 2f       	mov	r18, r24
    64f2:	88 0f       	add	r24, r24
    64f4:	33 0b       	sbc	r19, r19
    64f6:	4b e0       	ldi	r20, 0x0B	; 11
    64f8:	42 9f       	mul	r20, r18
    64fa:	c0 01       	movw	r24, r0
    64fc:	43 9f       	mul	r20, r19
    64fe:	90 0d       	add	r25, r0
    6500:	11 24       	eor	r1, r1
    6502:	83 5c       	subi	r24, 0xC3	; 195
    6504:	91 4d       	sbci	r25, 0xD1	; 209
    6506:	fc 01       	movw	r30, r24
    6508:	80 81       	ld	r24, Z
    650a:	81 30       	cpi	r24, 0x01	; 1
    650c:	51 f5       	brne	.+84     	; 0x6562 <listen+0x9c>
    650e:	8e 81       	ldd	r24, Y+6	; 0x06
    6510:	8a 83       	std	Y+2, r24	; 0x02
    6512:	8f 81       	ldd	r24, Y+7	; 0x07
    6514:	8b 83       	std	Y+3, r24	; 0x03
    6516:	8e 81       	ldd	r24, Y+6	; 0x06
    6518:	28 2f       	mov	r18, r24
    651a:	88 0f       	add	r24, r24
    651c:	33 0b       	sbc	r19, r19
    651e:	4b e0       	ldi	r20, 0x0B	; 11
    6520:	42 9f       	mul	r20, r18
    6522:	c0 01       	movw	r24, r0
    6524:	43 9f       	mul	r20, r19
    6526:	90 0d       	add	r25, r0
    6528:	11 24       	eor	r1, r1
    652a:	87 5c       	subi	r24, 0xC7	; 199
    652c:	91 4d       	sbci	r25, 0xD1	; 209
    652e:	fc 01       	movw	r30, r24
    6530:	80 81       	ld	r24, Z
    6532:	91 81       	ldd	r25, Z+1	; 0x01
    6534:	8c 83       	std	Y+4, r24	; 0x04
    6536:	9d 83       	std	Y+5, r25	; 0x05
    6538:	ce 01       	movw	r24, r28
    653a:	02 96       	adiw	r24, 0x02	; 2
    653c:	c1 2c       	mov	r12, r1
    653e:	d1 2c       	mov	r13, r1
    6540:	e1 2c       	mov	r14, r1
    6542:	f1 2c       	mov	r15, r1
    6544:	00 e0       	ldi	r16, 0x00	; 0
    6546:	10 e0       	ldi	r17, 0x00	; 0
    6548:	24 e0       	ldi	r18, 0x04	; 4
    654a:	30 e0       	ldi	r19, 0x00	; 0
    654c:	ac 01       	movw	r20, r24
    654e:	62 e4       	ldi	r22, 0x42	; 66
    6550:	82 e0       	ldi	r24, 0x02	; 2
    6552:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <hif_send>
    6556:	89 83       	std	Y+1, r24	; 0x01
    6558:	89 81       	ldd	r24, Y+1	; 0x01
    655a:	88 23       	and	r24, r24
    655c:	11 f0       	breq	.+4      	; 0x6562 <listen+0x9c>
    655e:	87 ef       	ldi	r24, 0xF7	; 247
    6560:	89 83       	std	Y+1, r24	; 0x01
    6562:	89 81       	ldd	r24, Y+1	; 0x01
    6564:	27 96       	adiw	r28, 0x07	; 7
    6566:	cd bf       	out	0x3d, r28	; 61
    6568:	de bf       	out	0x3e, r29	; 62
    656a:	df 91       	pop	r29
    656c:	cf 91       	pop	r28
    656e:	1f 91       	pop	r17
    6570:	0f 91       	pop	r16
    6572:	ff 90       	pop	r15
    6574:	ef 90       	pop	r14
    6576:	df 90       	pop	r13
    6578:	cf 90       	pop	r12
    657a:	08 95       	ret

0000657c <accept>:
    657c:	cf 93       	push	r28
    657e:	df 93       	push	r29
    6580:	cd b7       	in	r28, 0x3d	; 61
    6582:	de b7       	in	r29, 0x3e	; 62
    6584:	26 97       	sbiw	r28, 0x06	; 6
    6586:	cd bf       	out	0x3d, r28	; 61
    6588:	de bf       	out	0x3e, r29	; 62
    658a:	8a 83       	std	Y+2, r24	; 0x02
    658c:	6b 83       	std	Y+3, r22	; 0x03
    658e:	7c 83       	std	Y+4, r23	; 0x04
    6590:	4d 83       	std	Y+5, r20	; 0x05
    6592:	5e 83       	std	Y+6, r21	; 0x06
    6594:	8a ef       	ldi	r24, 0xFA	; 250
    6596:	89 83       	std	Y+1, r24	; 0x01
    6598:	8a 81       	ldd	r24, Y+2	; 0x02
    659a:	88 23       	and	r24, r24
    659c:	8c f0       	brlt	.+34     	; 0x65c0 <accept+0x44>
    659e:	8a 81       	ldd	r24, Y+2	; 0x02
    65a0:	28 2f       	mov	r18, r24
    65a2:	88 0f       	add	r24, r24
    65a4:	33 0b       	sbc	r19, r19
    65a6:	4b e0       	ldi	r20, 0x0B	; 11
    65a8:	42 9f       	mul	r20, r18
    65aa:	c0 01       	movw	r24, r0
    65ac:	43 9f       	mul	r20, r19
    65ae:	90 0d       	add	r25, r0
    65b0:	11 24       	eor	r1, r1
    65b2:	83 5c       	subi	r24, 0xC3	; 195
    65b4:	91 4d       	sbci	r25, 0xD1	; 209
    65b6:	fc 01       	movw	r30, r24
    65b8:	80 81       	ld	r24, Z
    65ba:	81 30       	cpi	r24, 0x01	; 1
    65bc:	09 f4       	brne	.+2      	; 0x65c0 <accept+0x44>
    65be:	19 82       	std	Y+1, r1	; 0x01
    65c0:	89 81       	ldd	r24, Y+1	; 0x01
    65c2:	26 96       	adiw	r28, 0x06	; 6
    65c4:	cd bf       	out	0x3d, r28	; 61
    65c6:	de bf       	out	0x3e, r29	; 62
    65c8:	df 91       	pop	r29
    65ca:	cf 91       	pop	r28
    65cc:	08 95       	ret

000065ce <send>:
    65ce:	cf 92       	push	r12
    65d0:	df 92       	push	r13
    65d2:	ef 92       	push	r14
    65d4:	ff 92       	push	r15
    65d6:	0f 93       	push	r16
    65d8:	1f 93       	push	r17
    65da:	cf 93       	push	r28
    65dc:	df 93       	push	r29
    65de:	cd b7       	in	r28, 0x3d	; 61
    65e0:	de b7       	in	r29, 0x3e	; 62
    65e2:	6c 97       	sbiw	r28, 0x1c	; 28
    65e4:	cd bf       	out	0x3d, r28	; 61
    65e6:	de bf       	out	0x3e, r29	; 62
    65e8:	8e 8b       	std	Y+22, r24	; 0x16
    65ea:	6f 8b       	std	Y+23, r22	; 0x17
    65ec:	78 8f       	std	Y+24, r23	; 0x18
    65ee:	49 8f       	std	Y+25, r20	; 0x19
    65f0:	5a 8f       	std	Y+26, r21	; 0x1a
    65f2:	2b 8f       	std	Y+27, r18	; 0x1b
    65f4:	3c 8f       	std	Y+28, r19	; 0x1c
    65f6:	8a ef       	ldi	r24, 0xFA	; 250
    65f8:	9f ef       	ldi	r25, 0xFF	; 255
    65fa:	89 83       	std	Y+1, r24	; 0x01
    65fc:	9a 83       	std	Y+2, r25	; 0x02
    65fe:	8e 89       	ldd	r24, Y+22	; 0x16
    6600:	88 23       	and	r24, r24
    6602:	0c f4       	brge	.+2      	; 0x6606 <send+0x38>
    6604:	89 c0       	rjmp	.+274    	; 0x6718 <send+0x14a>
    6606:	8f 89       	ldd	r24, Y+23	; 0x17
    6608:	98 8d       	ldd	r25, Y+24	; 0x18
    660a:	89 2b       	or	r24, r25
    660c:	09 f4       	brne	.+2      	; 0x6610 <send+0x42>
    660e:	84 c0       	rjmp	.+264    	; 0x6718 <send+0x14a>
    6610:	89 8d       	ldd	r24, Y+25	; 0x19
    6612:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6614:	89 37       	cpi	r24, 0x79	; 121
    6616:	95 40       	sbci	r25, 0x05	; 5
    6618:	08 f0       	brcs	.+2      	; 0x661c <send+0x4e>
    661a:	7e c0       	rjmp	.+252    	; 0x6718 <send+0x14a>
    661c:	8e 89       	ldd	r24, Y+22	; 0x16
    661e:	28 2f       	mov	r18, r24
    6620:	88 0f       	add	r24, r24
    6622:	33 0b       	sbc	r19, r19
    6624:	4b e0       	ldi	r20, 0x0B	; 11
    6626:	42 9f       	mul	r20, r18
    6628:	c0 01       	movw	r24, r0
    662a:	43 9f       	mul	r20, r19
    662c:	90 0d       	add	r25, r0
    662e:	11 24       	eor	r1, r1
    6630:	83 5c       	subi	r24, 0xC3	; 195
    6632:	91 4d       	sbci	r25, 0xD1	; 209
    6634:	fc 01       	movw	r30, r24
    6636:	80 81       	ld	r24, Z
    6638:	81 30       	cpi	r24, 0x01	; 1
    663a:	09 f0       	breq	.+2      	; 0x663e <send+0x70>
    663c:	6d c0       	rjmp	.+218    	; 0x6718 <send+0x14a>
    663e:	85 e4       	ldi	r24, 0x45	; 69
    6640:	8d 83       	std	Y+5, r24	; 0x05
    6642:	80 e5       	ldi	r24, 0x50	; 80
    6644:	90 e0       	ldi	r25, 0x00	; 0
    6646:	8b 83       	std	Y+3, r24	; 0x03
    6648:	9c 83       	std	Y+4, r25	; 0x04
    664a:	8e 89       	ldd	r24, Y+22	; 0x16
    664c:	8e 83       	std	Y+6, r24	; 0x06
    664e:	89 8d       	ldd	r24, Y+25	; 0x19
    6650:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6652:	88 87       	std	Y+8, r24	; 0x08
    6654:	99 87       	std	Y+9, r25	; 0x09
    6656:	8e 89       	ldd	r24, Y+22	; 0x16
    6658:	28 2f       	mov	r18, r24
    665a:	88 0f       	add	r24, r24
    665c:	33 0b       	sbc	r19, r19
    665e:	4b e0       	ldi	r20, 0x0B	; 11
    6660:	42 9f       	mul	r20, r18
    6662:	c0 01       	movw	r24, r0
    6664:	43 9f       	mul	r20, r19
    6666:	90 0d       	add	r25, r0
    6668:	11 24       	eor	r1, r1
    666a:	87 5c       	subi	r24, 0xC7	; 199
    666c:	91 4d       	sbci	r25, 0xD1	; 209
    666e:	fc 01       	movw	r30, r24
    6670:	80 81       	ld	r24, Z
    6672:	91 81       	ldd	r25, Z+1	; 0x01
    6674:	8a 8b       	std	Y+18, r24	; 0x12
    6676:	9b 8b       	std	Y+19, r25	; 0x13
    6678:	8e 89       	ldd	r24, Y+22	; 0x16
    667a:	87 30       	cpi	r24, 0x07	; 7
    667c:	24 f0       	brlt	.+8      	; 0x6686 <send+0xb8>
    667e:	84 e4       	ldi	r24, 0x44	; 68
    6680:	90 e0       	ldi	r25, 0x00	; 0
    6682:	8b 83       	std	Y+3, r24	; 0x03
    6684:	9c 83       	std	Y+4, r25	; 0x04
    6686:	8e 89       	ldd	r24, Y+22	; 0x16
    6688:	28 2f       	mov	r18, r24
    668a:	88 0f       	add	r24, r24
    668c:	33 0b       	sbc	r19, r19
    668e:	4b e0       	ldi	r20, 0x0B	; 11
    6690:	42 9f       	mul	r20, r18
    6692:	c0 01       	movw	r24, r0
    6694:	43 9f       	mul	r20, r19
    6696:	90 0d       	add	r25, r0
    6698:	11 24       	eor	r1, r1
    669a:	82 5c       	subi	r24, 0xC2	; 194
    669c:	91 4d       	sbci	r25, 0xD1	; 209
    669e:	fc 01       	movw	r30, r24
    66a0:	80 81       	ld	r24, Z
    66a2:	88 2f       	mov	r24, r24
    66a4:	90 e0       	ldi	r25, 0x00	; 0
    66a6:	81 70       	andi	r24, 0x01	; 1
    66a8:	99 27       	eor	r25, r25
    66aa:	89 2b       	or	r24, r25
    66ac:	99 f0       	breq	.+38     	; 0x66d4 <send+0x106>
    66ae:	8c e4       	ldi	r24, 0x4C	; 76
    66b0:	8d 83       	std	Y+5, r24	; 0x05
    66b2:	8e 89       	ldd	r24, Y+22	; 0x16
    66b4:	28 2f       	mov	r18, r24
    66b6:	88 0f       	add	r24, r24
    66b8:	33 0b       	sbc	r19, r19
    66ba:	4b e0       	ldi	r20, 0x0B	; 11
    66bc:	42 9f       	mul	r20, r18
    66be:	c0 01       	movw	r24, r0
    66c0:	43 9f       	mul	r20, r19
    66c2:	90 0d       	add	r25, r0
    66c4:	11 24       	eor	r1, r1
    66c6:	85 5c       	subi	r24, 0xC5	; 197
    66c8:	91 4d       	sbci	r25, 0xD1	; 209
    66ca:	fc 01       	movw	r30, r24
    66cc:	80 81       	ld	r24, Z
    66ce:	91 81       	ldd	r25, Z+1	; 0x01
    66d0:	8b 83       	std	Y+3, r24	; 0x03
    66d2:	9c 83       	std	Y+4, r25	; 0x04
    66d4:	8d 81       	ldd	r24, Y+5	; 0x05
    66d6:	e8 2f       	mov	r30, r24
    66d8:	e0 68       	ori	r30, 0x80	; 128
    66da:	6b 81       	ldd	r22, Y+3	; 0x03
    66dc:	7c 81       	ldd	r23, Y+4	; 0x04
    66de:	49 8d       	ldd	r20, Y+25	; 0x19
    66e0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    66e2:	2f 89       	ldd	r18, Y+23	; 0x17
    66e4:	38 8d       	ldd	r19, Y+24	; 0x18
    66e6:	ce 01       	movw	r24, r28
    66e8:	06 96       	adiw	r24, 0x06	; 6
    66ea:	6b 01       	movw	r12, r22
    66ec:	7a 01       	movw	r14, r20
    66ee:	89 01       	movw	r16, r18
    66f0:	20 e1       	ldi	r18, 0x10	; 16
    66f2:	30 e0       	ldi	r19, 0x00	; 0
    66f4:	ac 01       	movw	r20, r24
    66f6:	6e 2f       	mov	r22, r30
    66f8:	82 e0       	ldi	r24, 0x02	; 2
    66fa:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <hif_send>
    66fe:	08 2e       	mov	r0, r24
    6700:	00 0c       	add	r0, r0
    6702:	99 0b       	sbc	r25, r25
    6704:	89 83       	std	Y+1, r24	; 0x01
    6706:	9a 83       	std	Y+2, r25	; 0x02
    6708:	89 81       	ldd	r24, Y+1	; 0x01
    670a:	9a 81       	ldd	r25, Y+2	; 0x02
    670c:	89 2b       	or	r24, r25
    670e:	21 f0       	breq	.+8      	; 0x6718 <send+0x14a>
    6710:	82 ef       	ldi	r24, 0xF2	; 242
    6712:	9f ef       	ldi	r25, 0xFF	; 255
    6714:	89 83       	std	Y+1, r24	; 0x01
    6716:	9a 83       	std	Y+2, r25	; 0x02
    6718:	89 81       	ldd	r24, Y+1	; 0x01
    671a:	9a 81       	ldd	r25, Y+2	; 0x02
    671c:	6c 96       	adiw	r28, 0x1c	; 28
    671e:	cd bf       	out	0x3d, r28	; 61
    6720:	de bf       	out	0x3e, r29	; 62
    6722:	df 91       	pop	r29
    6724:	cf 91       	pop	r28
    6726:	1f 91       	pop	r17
    6728:	0f 91       	pop	r16
    672a:	ff 90       	pop	r15
    672c:	ef 90       	pop	r14
    672e:	df 90       	pop	r13
    6730:	cf 90       	pop	r12
    6732:	08 95       	ret

00006734 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    6734:	cf 92       	push	r12
    6736:	df 92       	push	r13
    6738:	ef 92       	push	r14
    673a:	ff 92       	push	r15
    673c:	0f 93       	push	r16
    673e:	1f 93       	push	r17
    6740:	cf 93       	push	r28
    6742:	df 93       	push	r29
    6744:	cd b7       	in	r28, 0x3d	; 61
    6746:	de b7       	in	r29, 0x3e	; 62
    6748:	64 97       	sbiw	r28, 0x14	; 20
    674a:	cd bf       	out	0x3d, r28	; 61
    674c:	de bf       	out	0x3e, r29	; 62
    674e:	8c 87       	std	Y+12, r24	; 0x0c
    6750:	6d 87       	std	Y+13, r22	; 0x0d
    6752:	7e 87       	std	Y+14, r23	; 0x0e
    6754:	4f 87       	std	Y+15, r20	; 0x0f
    6756:	58 8b       	std	Y+16, r21	; 0x10
    6758:	09 8b       	std	Y+17, r16	; 0x11
    675a:	1a 8b       	std	Y+18, r17	; 0x12
    675c:	2b 8b       	std	Y+19, r18	; 0x13
    675e:	3c 8b       	std	Y+20, r19	; 0x14
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    6760:	8a ef       	ldi	r24, 0xFA	; 250
    6762:	9f ef       	ldi	r25, 0xFF	; 255
    6764:	89 83       	std	Y+1, r24	; 0x01
    6766:	9a 83       	std	Y+2, r25	; 0x02
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    6768:	8c 85       	ldd	r24, Y+12	; 0x0c
    676a:	88 23       	and	r24, r24
    676c:	0c f4       	brge	.+2      	; 0x6770 <recv+0x3c>
    676e:	be c0       	rjmp	.+380    	; 0x68ec <recv+0x1b8>
    6770:	8d 85       	ldd	r24, Y+13	; 0x0d
    6772:	9e 85       	ldd	r25, Y+14	; 0x0e
    6774:	89 2b       	or	r24, r25
    6776:	09 f4       	brne	.+2      	; 0x677a <recv+0x46>
    6778:	b9 c0       	rjmp	.+370    	; 0x68ec <recv+0x1b8>
    677a:	8f 85       	ldd	r24, Y+15	; 0x0f
    677c:	98 89       	ldd	r25, Y+16	; 0x10
    677e:	89 2b       	or	r24, r25
    6780:	09 f4       	brne	.+2      	; 0x6784 <recv+0x50>
    6782:	b4 c0       	rjmp	.+360    	; 0x68ec <recv+0x1b8>
    6784:	8c 85       	ldd	r24, Y+12	; 0x0c
    6786:	28 2f       	mov	r18, r24
    6788:	88 0f       	add	r24, r24
    678a:	33 0b       	sbc	r19, r19
    678c:	4b e0       	ldi	r20, 0x0B	; 11
    678e:	42 9f       	mul	r20, r18
    6790:	c0 01       	movw	r24, r0
    6792:	43 9f       	mul	r20, r19
    6794:	90 0d       	add	r25, r0
    6796:	11 24       	eor	r1, r1
    6798:	83 5c       	subi	r24, 0xC3	; 195
    679a:	91 4d       	sbci	r25, 0xD1	; 209
    679c:	fc 01       	movw	r30, r24
    679e:	80 81       	ld	r24, Z
    67a0:	81 30       	cpi	r24, 0x01	; 1
    67a2:	09 f0       	breq	.+2      	; 0x67a6 <recv+0x72>
    67a4:	a3 c0       	rjmp	.+326    	; 0x68ec <recv+0x1b8>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    67a6:	19 82       	std	Y+1, r1	; 0x01
    67a8:	1a 82       	std	Y+2, r1	; 0x02
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    67aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    67ac:	28 2f       	mov	r18, r24
    67ae:	88 0f       	add	r24, r24
    67b0:	33 0b       	sbc	r19, r19
    67b2:	4b e0       	ldi	r20, 0x0B	; 11
    67b4:	42 9f       	mul	r20, r18
    67b6:	c0 01       	movw	r24, r0
    67b8:	43 9f       	mul	r20, r19
    67ba:	90 0d       	add	r25, r0
    67bc:	11 24       	eor	r1, r1
    67be:	8b 5c       	subi	r24, 0xCB	; 203
    67c0:	91 4d       	sbci	r25, 0xD1	; 209
    67c2:	2d 85       	ldd	r18, Y+13	; 0x0d
    67c4:	3e 85       	ldd	r19, Y+14	; 0x0e
    67c6:	fc 01       	movw	r30, r24
    67c8:	20 83       	st	Z, r18
    67ca:	31 83       	std	Z+1, r19	; 0x01
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    67cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    67ce:	28 2f       	mov	r18, r24
    67d0:	88 0f       	add	r24, r24
    67d2:	33 0b       	sbc	r19, r19
    67d4:	4b e0       	ldi	r20, 0x0B	; 11
    67d6:	42 9f       	mul	r20, r18
    67d8:	c0 01       	movw	r24, r0
    67da:	43 9f       	mul	r20, r19
    67dc:	90 0d       	add	r25, r0
    67de:	11 24       	eor	r1, r1
    67e0:	89 5c       	subi	r24, 0xC9	; 201
    67e2:	91 4d       	sbci	r25, 0xD1	; 209
    67e4:	2f 85       	ldd	r18, Y+15	; 0x0f
    67e6:	38 89       	ldd	r19, Y+16	; 0x10
    67e8:	fc 01       	movw	r30, r24
    67ea:	20 83       	st	Z, r18
    67ec:	31 83       	std	Z+1, r19	; 0x01

		if(!gastrSockets[sock].bIsRecvPending)
    67ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    67f0:	28 2f       	mov	r18, r24
    67f2:	88 0f       	add	r24, r24
    67f4:	33 0b       	sbc	r19, r19
    67f6:	4b e0       	ldi	r20, 0x0B	; 11
    67f8:	42 9f       	mul	r20, r18
    67fa:	c0 01       	movw	r24, r0
    67fc:	43 9f       	mul	r20, r19
    67fe:	90 0d       	add	r25, r0
    6800:	11 24       	eor	r1, r1
    6802:	81 5c       	subi	r24, 0xC1	; 193
    6804:	91 4d       	sbci	r25, 0xD1	; 209
    6806:	fc 01       	movw	r30, r24
    6808:	80 81       	ld	r24, Z
    680a:	88 23       	and	r24, r24
    680c:	09 f0       	breq	.+2      	; 0x6810 <recv+0xdc>
    680e:	6e c0       	rjmp	.+220    	; 0x68ec <recv+0x1b8>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    6810:	86 e4       	ldi	r24, 0x46	; 70
    6812:	8b 83       	std	Y+3, r24	; 0x03

			gastrSockets[sock].bIsRecvPending = 1;
    6814:	8c 85       	ldd	r24, Y+12	; 0x0c
    6816:	28 2f       	mov	r18, r24
    6818:	88 0f       	add	r24, r24
    681a:	33 0b       	sbc	r19, r19
    681c:	4b e0       	ldi	r20, 0x0B	; 11
    681e:	42 9f       	mul	r20, r18
    6820:	c0 01       	movw	r24, r0
    6822:	43 9f       	mul	r20, r19
    6824:	90 0d       	add	r25, r0
    6826:	11 24       	eor	r1, r1
    6828:	81 5c       	subi	r24, 0xC1	; 193
    682a:	91 4d       	sbci	r25, 0xD1	; 209
    682c:	21 e0       	ldi	r18, 0x01	; 1
    682e:	fc 01       	movw	r30, r24
    6830:	20 83       	st	Z, r18
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    6832:	8c 85       	ldd	r24, Y+12	; 0x0c
    6834:	28 2f       	mov	r18, r24
    6836:	88 0f       	add	r24, r24
    6838:	33 0b       	sbc	r19, r19
    683a:	4b e0       	ldi	r20, 0x0B	; 11
    683c:	42 9f       	mul	r20, r18
    683e:	c0 01       	movw	r24, r0
    6840:	43 9f       	mul	r20, r19
    6842:	90 0d       	add	r25, r0
    6844:	11 24       	eor	r1, r1
    6846:	82 5c       	subi	r24, 0xC2	; 194
    6848:	91 4d       	sbci	r25, 0xD1	; 209
    684a:	fc 01       	movw	r30, r24
    684c:	80 81       	ld	r24, Z
    684e:	88 2f       	mov	r24, r24
    6850:	90 e0       	ldi	r25, 0x00	; 0
    6852:	81 70       	andi	r24, 0x01	; 1
    6854:	99 27       	eor	r25, r25
    6856:	89 2b       	or	r24, r25
    6858:	11 f0       	breq	.+4      	; 0x685e <recv+0x12a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    685a:	8d e4       	ldi	r24, 0x4D	; 77
    685c:	8b 83       	std	Y+3, r24	; 0x03
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    685e:	89 89       	ldd	r24, Y+17	; 0x11
    6860:	9a 89       	ldd	r25, Y+18	; 0x12
    6862:	ab 89       	ldd	r26, Y+19	; 0x13
    6864:	bc 89       	ldd	r27, Y+20	; 0x14
    6866:	89 2b       	or	r24, r25
    6868:	8a 2b       	or	r24, r26
    686a:	8b 2b       	or	r24, r27
    686c:	41 f4       	brne	.+16     	; 0x687e <recv+0x14a>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    686e:	8f ef       	ldi	r24, 0xFF	; 255
    6870:	9f ef       	ldi	r25, 0xFF	; 255
    6872:	dc 01       	movw	r26, r24
    6874:	8c 83       	std	Y+4, r24	; 0x04
    6876:	9d 83       	std	Y+5, r25	; 0x05
    6878:	ae 83       	std	Y+6, r26	; 0x06
    687a:	bf 83       	std	Y+7, r27	; 0x07
    687c:	08 c0       	rjmp	.+16     	; 0x688e <recv+0x15a>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    687e:	89 89       	ldd	r24, Y+17	; 0x11
    6880:	9a 89       	ldd	r25, Y+18	; 0x12
    6882:	ab 89       	ldd	r26, Y+19	; 0x13
    6884:	bc 89       	ldd	r27, Y+20	; 0x14
    6886:	8c 83       	std	Y+4, r24	; 0x04
    6888:	9d 83       	std	Y+5, r25	; 0x05
    688a:	ae 83       	std	Y+6, r26	; 0x06
    688c:	bf 83       	std	Y+7, r27	; 0x07
			strRecv.sock = sock;
    688e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6890:	88 87       	std	Y+8, r24	; 0x08
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    6892:	8c 85       	ldd	r24, Y+12	; 0x0c
    6894:	28 2f       	mov	r18, r24
    6896:	88 0f       	add	r24, r24
    6898:	33 0b       	sbc	r19, r19
    689a:	4b e0       	ldi	r20, 0x0B	; 11
    689c:	42 9f       	mul	r20, r18
    689e:	c0 01       	movw	r24, r0
    68a0:	43 9f       	mul	r20, r19
    68a2:	90 0d       	add	r25, r0
    68a4:	11 24       	eor	r1, r1
    68a6:	87 5c       	subi	r24, 0xC7	; 199
    68a8:	91 4d       	sbci	r25, 0xD1	; 209
    68aa:	fc 01       	movw	r30, r24
    68ac:	80 81       	ld	r24, Z
    68ae:	91 81       	ldd	r25, Z+1	; 0x01
    68b0:	8a 87       	std	Y+10, r24	; 0x0a
    68b2:	9b 87       	std	Y+11, r25	; 0x0b
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    68b4:	ce 01       	movw	r24, r28
    68b6:	04 96       	adiw	r24, 0x04	; 4
    68b8:	c1 2c       	mov	r12, r1
    68ba:	d1 2c       	mov	r13, r1
    68bc:	e1 2c       	mov	r14, r1
    68be:	f1 2c       	mov	r15, r1
    68c0:	00 e0       	ldi	r16, 0x00	; 0
    68c2:	10 e0       	ldi	r17, 0x00	; 0
    68c4:	28 e0       	ldi	r18, 0x08	; 8
    68c6:	30 e0       	ldi	r19, 0x00	; 0
    68c8:	ac 01       	movw	r20, r24
    68ca:	6b 81       	ldd	r22, Y+3	; 0x03
    68cc:	82 e0       	ldi	r24, 0x02	; 2
    68ce:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <hif_send>
    68d2:	08 2e       	mov	r0, r24
    68d4:	00 0c       	add	r0, r0
    68d6:	99 0b       	sbc	r25, r25
    68d8:	89 83       	std	Y+1, r24	; 0x01
    68da:	9a 83       	std	Y+2, r25	; 0x02
			if(s16Ret != SOCK_ERR_NO_ERROR)
    68dc:	89 81       	ldd	r24, Y+1	; 0x01
    68de:	9a 81       	ldd	r25, Y+2	; 0x02
    68e0:	89 2b       	or	r24, r25
    68e2:	21 f0       	breq	.+8      	; 0x68ec <recv+0x1b8>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    68e4:	82 ef       	ldi	r24, 0xF2	; 242
    68e6:	9f ef       	ldi	r25, 0xFF	; 255
    68e8:	89 83       	std	Y+1, r24	; 0x01
    68ea:	9a 83       	std	Y+2, r25	; 0x02
			}
		}
	}
	return s16Ret;
    68ec:	89 81       	ldd	r24, Y+1	; 0x01
    68ee:	9a 81       	ldd	r25, Y+2	; 0x02
}
    68f0:	64 96       	adiw	r28, 0x14	; 20
    68f2:	cd bf       	out	0x3d, r28	; 61
    68f4:	de bf       	out	0x3e, r29	; 62
    68f6:	df 91       	pop	r29
    68f8:	cf 91       	pop	r28
    68fa:	1f 91       	pop	r17
    68fc:	0f 91       	pop	r16
    68fe:	ff 90       	pop	r15
    6900:	ef 90       	pop	r14
    6902:	df 90       	pop	r13
    6904:	cf 90       	pop	r12
    6906:	08 95       	ret

00006908 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    6908:	cf 92       	push	r12
    690a:	df 92       	push	r13
    690c:	ef 92       	push	r14
    690e:	ff 92       	push	r15
    6910:	0f 93       	push	r16
    6912:	1f 93       	push	r17
    6914:	cf 93       	push	r28
    6916:	df 93       	push	r29
    6918:	cd b7       	in	r28, 0x3d	; 61
    691a:	de b7       	in	r29, 0x3e	; 62
    691c:	27 97       	sbiw	r28, 0x07	; 7
    691e:	cd bf       	out	0x3d, r28	; 61
    6920:	de bf       	out	0x3e, r29	; 62
    6922:	8f 83       	std	Y+7, r24	; 0x07
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    6924:	8a ef       	ldi	r24, 0xFA	; 250
    6926:	89 83       	std	Y+1, r24	; 0x01
    M2M_INFO("Sock to delete <%d>\n", sock);
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    6928:	8f 81       	ldd	r24, Y+7	; 0x07
    692a:	88 23       	and	r24, r24
    692c:	0c f4       	brge	.+2      	; 0x6930 <close+0x28>
    692e:	81 c0       	rjmp	.+258    	; 0x6a32 <close+0x12a>
    6930:	8f 81       	ldd	r24, Y+7	; 0x07
    6932:	28 2f       	mov	r18, r24
    6934:	88 0f       	add	r24, r24
    6936:	33 0b       	sbc	r19, r19
    6938:	4b e0       	ldi	r20, 0x0B	; 11
    693a:	42 9f       	mul	r20, r18
    693c:	c0 01       	movw	r24, r0
    693e:	43 9f       	mul	r20, r19
    6940:	90 0d       	add	r25, r0
    6942:	11 24       	eor	r1, r1
    6944:	83 5c       	subi	r24, 0xC3	; 195
    6946:	91 4d       	sbci	r25, 0xD1	; 209
    6948:	fc 01       	movw	r30, r24
    694a:	80 81       	ld	r24, Z
    694c:	81 30       	cpi	r24, 0x01	; 1
    694e:	09 f0       	breq	.+2      	; 0x6952 <close+0x4a>
    6950:	70 c0       	rjmp	.+224    	; 0x6a32 <close+0x12a>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    6952:	89 e4       	ldi	r24, 0x49	; 73
    6954:	8a 83       	std	Y+2, r24	; 0x02
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    6956:	8f 81       	ldd	r24, Y+7	; 0x07
    6958:	8b 83       	std	Y+3, r24	; 0x03
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    695a:	8f 81       	ldd	r24, Y+7	; 0x07
    695c:	28 2f       	mov	r18, r24
    695e:	88 0f       	add	r24, r24
    6960:	33 0b       	sbc	r19, r19
    6962:	4b e0       	ldi	r20, 0x0B	; 11
    6964:	42 9f       	mul	r20, r18
    6966:	c0 01       	movw	r24, r0
    6968:	43 9f       	mul	r20, r19
    696a:	90 0d       	add	r25, r0
    696c:	11 24       	eor	r1, r1
    696e:	87 5c       	subi	r24, 0xC7	; 199
    6970:	91 4d       	sbci	r25, 0xD1	; 209
    6972:	fc 01       	movw	r30, r24
    6974:	80 81       	ld	r24, Z
    6976:	91 81       	ldd	r25, Z+1	; 0x01
    6978:	8d 83       	std	Y+5, r24	; 0x05
    697a:	9e 83       	std	Y+6, r25	; 0x06
		
		gastrSockets[sock].bIsUsed = 0;
    697c:	8f 81       	ldd	r24, Y+7	; 0x07
    697e:	28 2f       	mov	r18, r24
    6980:	88 0f       	add	r24, r24
    6982:	33 0b       	sbc	r19, r19
    6984:	4b e0       	ldi	r20, 0x0B	; 11
    6986:	42 9f       	mul	r20, r18
    6988:	c0 01       	movw	r24, r0
    698a:	43 9f       	mul	r20, r19
    698c:	90 0d       	add	r25, r0
    698e:	11 24       	eor	r1, r1
    6990:	83 5c       	subi	r24, 0xC3	; 195
    6992:	91 4d       	sbci	r25, 0xD1	; 209
    6994:	fc 01       	movw	r30, r24
    6996:	10 82       	st	Z, r1
		gastrSockets[sock].u16SessionID =0;
    6998:	8f 81       	ldd	r24, Y+7	; 0x07
    699a:	28 2f       	mov	r18, r24
    699c:	88 0f       	add	r24, r24
    699e:	33 0b       	sbc	r19, r19
    69a0:	4b e0       	ldi	r20, 0x0B	; 11
    69a2:	42 9f       	mul	r20, r18
    69a4:	c0 01       	movw	r24, r0
    69a6:	43 9f       	mul	r20, r19
    69a8:	90 0d       	add	r25, r0
    69aa:	11 24       	eor	r1, r1
    69ac:	87 5c       	subi	r24, 0xC7	; 199
    69ae:	91 4d       	sbci	r25, 0xD1	; 209
    69b0:	fc 01       	movw	r30, r24
    69b2:	10 82       	st	Z, r1
    69b4:	11 82       	std	Z+1, r1	; 0x01
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    69b6:	8f 81       	ldd	r24, Y+7	; 0x07
    69b8:	28 2f       	mov	r18, r24
    69ba:	88 0f       	add	r24, r24
    69bc:	33 0b       	sbc	r19, r19
    69be:	4b e0       	ldi	r20, 0x0B	; 11
    69c0:	42 9f       	mul	r20, r18
    69c2:	c0 01       	movw	r24, r0
    69c4:	43 9f       	mul	r20, r19
    69c6:	90 0d       	add	r25, r0
    69c8:	11 24       	eor	r1, r1
    69ca:	82 5c       	subi	r24, 0xC2	; 194
    69cc:	91 4d       	sbci	r25, 0xD1	; 209
    69ce:	fc 01       	movw	r30, r24
    69d0:	80 81       	ld	r24, Z
    69d2:	88 2f       	mov	r24, r24
    69d4:	90 e0       	ldi	r25, 0x00	; 0
    69d6:	81 70       	andi	r24, 0x01	; 1
    69d8:	99 27       	eor	r25, r25
    69da:	89 2b       	or	r24, r25
    69dc:	11 f0       	breq	.+4      	; 0x69e2 <close+0xda>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    69de:	8e e4       	ldi	r24, 0x4E	; 78
    69e0:	8a 83       	std	Y+2, r24	; 0x02
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    69e2:	ce 01       	movw	r24, r28
    69e4:	03 96       	adiw	r24, 0x03	; 3
    69e6:	c1 2c       	mov	r12, r1
    69e8:	d1 2c       	mov	r13, r1
    69ea:	e1 2c       	mov	r14, r1
    69ec:	f1 2c       	mov	r15, r1
    69ee:	00 e0       	ldi	r16, 0x00	; 0
    69f0:	10 e0       	ldi	r17, 0x00	; 0
    69f2:	24 e0       	ldi	r18, 0x04	; 4
    69f4:	30 e0       	ldi	r19, 0x00	; 0
    69f6:	ac 01       	movw	r20, r24
    69f8:	6a 81       	ldd	r22, Y+2	; 0x02
    69fa:	82 e0       	ldi	r24, 0x02	; 2
    69fc:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <hif_send>
    6a00:	89 83       	std	Y+1, r24	; 0x01
		if(s8Ret != SOCK_ERR_NO_ERROR)
    6a02:	89 81       	ldd	r24, Y+1	; 0x01
    6a04:	88 23       	and	r24, r24
    6a06:	11 f0       	breq	.+4      	; 0x6a0c <close+0x104>
		{
			s8Ret = SOCK_ERR_INVALID;
    6a08:	87 ef       	ldi	r24, 0xF7	; 247
    6a0a:	89 83       	std	Y+1, r24	; 0x01
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    6a0c:	8f 81       	ldd	r24, Y+7	; 0x07
    6a0e:	28 2f       	mov	r18, r24
    6a10:	88 0f       	add	r24, r24
    6a12:	33 0b       	sbc	r19, r19
    6a14:	4b e0       	ldi	r20, 0x0B	; 11
    6a16:	42 9f       	mul	r20, r18
    6a18:	c0 01       	movw	r24, r0
    6a1a:	43 9f       	mul	r20, r19
    6a1c:	90 0d       	add	r25, r0
    6a1e:	11 24       	eor	r1, r1
    6a20:	8b 5c       	subi	r24, 0xCB	; 203
    6a22:	91 4d       	sbci	r25, 0xD1	; 209
    6a24:	2b e0       	ldi	r18, 0x0B	; 11
    6a26:	30 e0       	ldi	r19, 0x00	; 0
    6a28:	40 e0       	ldi	r20, 0x00	; 0
    6a2a:	50 e0       	ldi	r21, 0x00	; 0
    6a2c:	60 e0       	ldi	r22, 0x00	; 0
    6a2e:	0e 94 a5 10 	call	0x214a	; 0x214a <m2m_memset>
	}
	return s8Ret;
    6a32:	89 81       	ldd	r24, Y+1	; 0x01
}
    6a34:	27 96       	adiw	r28, 0x07	; 7
    6a36:	cd bf       	out	0x3d, r28	; 61
    6a38:	de bf       	out	0x3e, r29	; 62
    6a3a:	df 91       	pop	r29
    6a3c:	cf 91       	pop	r28
    6a3e:	1f 91       	pop	r17
    6a40:	0f 91       	pop	r16
    6a42:	ff 90       	pop	r15
    6a44:	ef 90       	pop	r14
    6a46:	df 90       	pop	r13
    6a48:	cf 90       	pop	r12
    6a4a:	08 95       	ret

00006a4c <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    6a4c:	cf 93       	push	r28
    6a4e:	df 93       	push	r29
    6a50:	cd b7       	in	r28, 0x3d	; 61
    6a52:	de b7       	in	r29, 0x3e	; 62
    6a54:	26 97       	sbiw	r28, 0x06	; 6
    6a56:	cd bf       	out	0x3d, r28	; 61
    6a58:	de bf       	out	0x3e, r29	; 62
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    6a5a:	ce 01       	movw	r24, r28
    6a5c:	03 96       	adiw	r24, 0x03	; 3
    6a5e:	89 83       	std	Y+1, r24	; 0x01
    6a60:	9a 83       	std	Y+2, r25	; 0x02

	cmd[0] = 0xb9;
    6a62:	89 81       	ldd	r24, Y+1	; 0x01
    6a64:	9a 81       	ldd	r25, Y+2	; 0x02
    6a66:	29 eb       	ldi	r18, 0xB9	; 185
    6a68:	fc 01       	movw	r30, r24
    6a6a:	20 83       	st	Z, r18

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    6a6c:	20 e0       	ldi	r18, 0x00	; 0
    6a6e:	30 e0       	ldi	r19, 0x00	; 0
    6a70:	a9 01       	movw	r20, r18
    6a72:	68 e0       	ldi	r22, 0x08	; 8
    6a74:	72 e0       	ldi	r23, 0x02	; 2
    6a76:	81 e0       	ldi	r24, 0x01	; 1
    6a78:	90 e0       	ldi	r25, 0x00	; 0
    6a7a:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    6a7e:	89 81       	ldd	r24, Y+1	; 0x01
    6a80:	9a 81       	ldd	r25, Y+2	; 0x02
    6a82:	fc 01       	movw	r30, r24
    6a84:	80 81       	ld	r24, Z
    6a86:	88 2f       	mov	r24, r24
    6a88:	90 e0       	ldi	r25, 0x00	; 0
    6a8a:	a0 e0       	ldi	r26, 0x00	; 0
    6a8c:	b0 e0       	ldi	r27, 0x00	; 0
    6a8e:	9c 01       	movw	r18, r24
    6a90:	ad 01       	movw	r20, r26
    6a92:	6c e0       	ldi	r22, 0x0C	; 12
    6a94:	72 e0       	ldi	r23, 0x02	; 2
    6a96:	81 e0       	ldi	r24, 0x01	; 1
    6a98:	90 e0       	ldi	r25, 0x00	; 0
    6a9a:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    6a9e:	21 e0       	ldi	r18, 0x01	; 1
    6aa0:	30 e0       	ldi	r19, 0x00	; 0
    6aa2:	40 e0       	ldi	r20, 0x00	; 0
    6aa4:	50 e0       	ldi	r21, 0x00	; 0
    6aa6:	64 e1       	ldi	r22, 0x14	; 20
    6aa8:	72 e0       	ldi	r23, 0x02	; 2
    6aaa:	81 e0       	ldi	r24, 0x01	; 1
    6aac:	90 e0       	ldi	r25, 0x00	; 0
    6aae:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    6ab2:	20 e0       	ldi	r18, 0x00	; 0
    6ab4:	30 e0       	ldi	r19, 0x00	; 0
    6ab6:	a9 01       	movw	r20, r18
    6ab8:	6c e1       	ldi	r22, 0x1C	; 28
    6aba:	72 e0       	ldi	r23, 0x02	; 2
    6abc:	81 e0       	ldi	r24, 0x01	; 1
    6abe:	90 e0       	ldi	r25, 0x00	; 0
    6ac0:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    6ac4:	21 e8       	ldi	r18, 0x81	; 129
    6ac6:	30 e0       	ldi	r19, 0x00	; 0
    6ac8:	40 e0       	ldi	r20, 0x00	; 0
    6aca:	50 e0       	ldi	r21, 0x00	; 0
    6acc:	64 e0       	ldi	r22, 0x04	; 4
    6ace:	72 e0       	ldi	r23, 0x02	; 2
    6ad0:	81 e0       	ldi	r24, 0x01	; 1
    6ad2:	90 e0       	ldi	r25, 0x00	; 0
    6ad4:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    6ad8:	00 00       	nop
    6ada:	68 e1       	ldi	r22, 0x18	; 24
    6adc:	72 e0       	ldi	r23, 0x02	; 2
    6ade:	81 e0       	ldi	r24, 0x01	; 1
    6ae0:	90 e0       	ldi	r25, 0x00	; 0
    6ae2:	0e 94 c2 20 	call	0x4184	; 0x4184 <nm_read_reg>
    6ae6:	dc 01       	movw	r26, r24
    6ae8:	cb 01       	movw	r24, r22
    6aea:	01 97       	sbiw	r24, 0x01	; 1
    6aec:	a1 05       	cpc	r26, r1
    6aee:	b1 05       	cpc	r27, r1
    6af0:	a1 f7       	brne	.-24     	; 0x6ada <spi_flash_enter_low_power_mode+0x8e>
}
    6af2:	00 00       	nop
    6af4:	26 96       	adiw	r28, 0x06	; 6
    6af6:	cd bf       	out	0x3d, r28	; 61
    6af8:	de bf       	out	0x3e, r29	; 62
    6afa:	df 91       	pop	r29
    6afc:	cf 91       	pop	r28
    6afe:	08 95       	ret

00006b00 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    6b00:	cf 93       	push	r28
    6b02:	df 93       	push	r29
    6b04:	cd b7       	in	r28, 0x3d	; 61
    6b06:	de b7       	in	r29, 0x3e	; 62
    6b08:	26 97       	sbiw	r28, 0x06	; 6
    6b0a:	cd bf       	out	0x3d, r28	; 61
    6b0c:	de bf       	out	0x3e, r29	; 62
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    6b0e:	ce 01       	movw	r24, r28
    6b10:	03 96       	adiw	r24, 0x03	; 3
    6b12:	89 83       	std	Y+1, r24	; 0x01
    6b14:	9a 83       	std	Y+2, r25	; 0x02

	cmd[0] = 0xab;
    6b16:	89 81       	ldd	r24, Y+1	; 0x01
    6b18:	9a 81       	ldd	r25, Y+2	; 0x02
    6b1a:	2b ea       	ldi	r18, 0xAB	; 171
    6b1c:	fc 01       	movw	r30, r24
    6b1e:	20 83       	st	Z, r18

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    6b20:	20 e0       	ldi	r18, 0x00	; 0
    6b22:	30 e0       	ldi	r19, 0x00	; 0
    6b24:	a9 01       	movw	r20, r18
    6b26:	68 e0       	ldi	r22, 0x08	; 8
    6b28:	72 e0       	ldi	r23, 0x02	; 2
    6b2a:	81 e0       	ldi	r24, 0x01	; 1
    6b2c:	90 e0       	ldi	r25, 0x00	; 0
    6b2e:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    6b32:	89 81       	ldd	r24, Y+1	; 0x01
    6b34:	9a 81       	ldd	r25, Y+2	; 0x02
    6b36:	fc 01       	movw	r30, r24
    6b38:	80 81       	ld	r24, Z
    6b3a:	88 2f       	mov	r24, r24
    6b3c:	90 e0       	ldi	r25, 0x00	; 0
    6b3e:	a0 e0       	ldi	r26, 0x00	; 0
    6b40:	b0 e0       	ldi	r27, 0x00	; 0
    6b42:	9c 01       	movw	r18, r24
    6b44:	ad 01       	movw	r20, r26
    6b46:	6c e0       	ldi	r22, 0x0C	; 12
    6b48:	72 e0       	ldi	r23, 0x02	; 2
    6b4a:	81 e0       	ldi	r24, 0x01	; 1
    6b4c:	90 e0       	ldi	r25, 0x00	; 0
    6b4e:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    6b52:	21 e0       	ldi	r18, 0x01	; 1
    6b54:	30 e0       	ldi	r19, 0x00	; 0
    6b56:	40 e0       	ldi	r20, 0x00	; 0
    6b58:	50 e0       	ldi	r21, 0x00	; 0
    6b5a:	64 e1       	ldi	r22, 0x14	; 20
    6b5c:	72 e0       	ldi	r23, 0x02	; 2
    6b5e:	81 e0       	ldi	r24, 0x01	; 1
    6b60:	90 e0       	ldi	r25, 0x00	; 0
    6b62:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    6b66:	20 e0       	ldi	r18, 0x00	; 0
    6b68:	30 e0       	ldi	r19, 0x00	; 0
    6b6a:	a9 01       	movw	r20, r18
    6b6c:	6c e1       	ldi	r22, 0x1C	; 28
    6b6e:	72 e0       	ldi	r23, 0x02	; 2
    6b70:	81 e0       	ldi	r24, 0x01	; 1
    6b72:	90 e0       	ldi	r25, 0x00	; 0
    6b74:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    6b78:	21 e8       	ldi	r18, 0x81	; 129
    6b7a:	30 e0       	ldi	r19, 0x00	; 0
    6b7c:	40 e0       	ldi	r20, 0x00	; 0
    6b7e:	50 e0       	ldi	r21, 0x00	; 0
    6b80:	64 e0       	ldi	r22, 0x04	; 4
    6b82:	72 e0       	ldi	r23, 0x02	; 2
    6b84:	81 e0       	ldi	r24, 0x01	; 1
    6b86:	90 e0       	ldi	r25, 0x00	; 0
    6b88:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    6b8c:	00 00       	nop
    6b8e:	68 e1       	ldi	r22, 0x18	; 24
    6b90:	72 e0       	ldi	r23, 0x02	; 2
    6b92:	81 e0       	ldi	r24, 0x01	; 1
    6b94:	90 e0       	ldi	r25, 0x00	; 0
    6b96:	0e 94 c2 20 	call	0x4184	; 0x4184 <nm_read_reg>
    6b9a:	dc 01       	movw	r26, r24
    6b9c:	cb 01       	movw	r24, r22
    6b9e:	01 97       	sbiw	r24, 0x01	; 1
    6ba0:	a1 05       	cpc	r26, r1
    6ba2:	b1 05       	cpc	r27, r1
    6ba4:	a1 f7       	brne	.-24     	; 0x6b8e <spi_flash_leave_low_power_mode+0x8e>
}
    6ba6:	00 00       	nop
    6ba8:	26 96       	adiw	r28, 0x06	; 6
    6baa:	cd bf       	out	0x3d, r28	; 61
    6bac:	de bf       	out	0x3e, r29	; 62
    6bae:	df 91       	pop	r29
    6bb0:	cf 91       	pop	r28
    6bb2:	08 95       	ret

00006bb4 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    6bb4:	cf 93       	push	r28
    6bb6:	df 93       	push	r29
    6bb8:	cd b7       	in	r28, 0x3d	; 61
    6bba:	de b7       	in	r29, 0x3e	; 62
    6bbc:	26 97       	sbiw	r28, 0x06	; 6
    6bbe:	cd bf       	out	0x3d, r28	; 61
    6bc0:	de bf       	out	0x3e, r29	; 62
    6bc2:	8e 83       	std	Y+6, r24	; 0x06
	sint8 s8Ret = M2M_SUCCESS;
    6bc4:	19 82       	std	Y+1, r1	; 0x01
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    6bc6:	0e 94 88 1c 	call	0x3910	; 0x3910 <nmi_get_chipid>
    6bca:	dc 01       	movw	r26, r24
    6bcc:	cb 01       	movw	r24, r22
    6bce:	9f 70       	andi	r25, 0x0F	; 15
    6bd0:	aa 27       	eor	r26, r26
    6bd2:	bb 27       	eor	r27, r27
    6bd4:	80 3a       	cpi	r24, 0xA0	; 160
    6bd6:	93 40       	sbci	r25, 0x03	; 3
    6bd8:	a1 05       	cpc	r26, r1
    6bda:	b1 05       	cpc	r27, r1
    6bdc:	08 f4       	brcc	.+2      	; 0x6be0 <spi_flash_enable+0x2c>
    6bde:	5a c0       	rjmp	.+180    	; 0x6c94 <spi_flash_enable+0xe0>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    6be0:	ce 01       	movw	r24, r28
    6be2:	02 96       	adiw	r24, 0x02	; 2
    6be4:	ac 01       	movw	r20, r24
    6be6:	60 e1       	ldi	r22, 0x10	; 16
    6be8:	74 e1       	ldi	r23, 0x14	; 20
    6bea:	80 e0       	ldi	r24, 0x00	; 0
    6bec:	90 e0       	ldi	r25, 0x00	; 0
    6bee:	0e 94 de 20 	call	0x41bc	; 0x41bc <nm_read_reg_with_ret>
    6bf2:	89 83       	std	Y+1, r24	; 0x01
		if(s8Ret != M2M_SUCCESS) {
    6bf4:	89 81       	ldd	r24, Y+1	; 0x01
    6bf6:	88 23       	and	r24, r24
    6bf8:	09 f0       	breq	.+2      	; 0x6bfc <spi_flash_enable+0x48>
    6bfa:	4b c0       	rjmp	.+150    	; 0x6c92 <spi_flash_enable+0xde>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    6bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    6bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    6c00:	ac 81       	ldd	r26, Y+4	; 0x04
    6c02:	bd 81       	ldd	r27, Y+5	; 0x05
    6c04:	9f 78       	andi	r25, 0x8F	; 143
    6c06:	a8 78       	andi	r26, 0x88	; 136
    6c08:	b8 7f       	andi	r27, 0xF8	; 248
    6c0a:	8a 83       	std	Y+2, r24	; 0x02
    6c0c:	9b 83       	std	Y+3, r25	; 0x03
    6c0e:	ac 83       	std	Y+4, r26	; 0x04
    6c10:	bd 83       	std	Y+5, r27	; 0x05
		u32Val |= ((0x1111ul) << 12);
    6c12:	8a 81       	ldd	r24, Y+2	; 0x02
    6c14:	9b 81       	ldd	r25, Y+3	; 0x03
    6c16:	ac 81       	ldd	r26, Y+4	; 0x04
    6c18:	bd 81       	ldd	r27, Y+5	; 0x05
    6c1a:	90 61       	ori	r25, 0x10	; 16
    6c1c:	a1 61       	ori	r26, 0x11	; 17
    6c1e:	b1 60       	ori	r27, 0x01	; 1
    6c20:	8a 83       	std	Y+2, r24	; 0x02
    6c22:	9b 83       	std	Y+3, r25	; 0x03
    6c24:	ac 83       	std	Y+4, r26	; 0x04
    6c26:	bd 83       	std	Y+5, r27	; 0x05
		nm_write_reg(0x1410, u32Val);
    6c28:	8a 81       	ldd	r24, Y+2	; 0x02
    6c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    6c2c:	ac 81       	ldd	r26, Y+4	; 0x04
    6c2e:	bd 81       	ldd	r27, Y+5	; 0x05
    6c30:	9c 01       	movw	r18, r24
    6c32:	ad 01       	movw	r20, r26
    6c34:	60 e1       	ldi	r22, 0x10	; 16
    6c36:	74 e1       	ldi	r23, 0x14	; 20
    6c38:	80 e0       	ldi	r24, 0x00	; 0
    6c3a:	90 e0       	ldi	r25, 0x00	; 0
    6c3c:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
		if(enable) {
    6c40:	8e 81       	ldd	r24, Y+6	; 0x06
    6c42:	88 23       	and	r24, r24
    6c44:	19 f0       	breq	.+6      	; 0x6c4c <spi_flash_enable+0x98>
			spi_flash_leave_low_power_mode();
    6c46:	0e 94 80 35 	call	0x6b00	; 0x6b00 <spi_flash_leave_low_power_mode>
    6c4a:	02 c0       	rjmp	.+4      	; 0x6c50 <spi_flash_enable+0x9c>
		} else {
			spi_flash_enter_low_power_mode();
    6c4c:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <spi_flash_enter_low_power_mode>
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    6c50:	8a 81       	ldd	r24, Y+2	; 0x02
    6c52:	9b 81       	ldd	r25, Y+3	; 0x03
    6c54:	ac 81       	ldd	r26, Y+4	; 0x04
    6c56:	bd 81       	ldd	r27, Y+5	; 0x05
    6c58:	9f 78       	andi	r25, 0x8F	; 143
    6c5a:	a8 78       	andi	r26, 0x88	; 136
    6c5c:	b8 7f       	andi	r27, 0xF8	; 248
    6c5e:	8a 83       	std	Y+2, r24	; 0x02
    6c60:	9b 83       	std	Y+3, r25	; 0x03
    6c62:	ac 83       	std	Y+4, r26	; 0x04
    6c64:	bd 83       	std	Y+5, r27	; 0x05
		u32Val |= ((0x0010ul) << 12);
    6c66:	8a 81       	ldd	r24, Y+2	; 0x02
    6c68:	9b 81       	ldd	r25, Y+3	; 0x03
    6c6a:	ac 81       	ldd	r26, Y+4	; 0x04
    6c6c:	bd 81       	ldd	r27, Y+5	; 0x05
    6c6e:	a1 60       	ori	r26, 0x01	; 1
    6c70:	8a 83       	std	Y+2, r24	; 0x02
    6c72:	9b 83       	std	Y+3, r25	; 0x03
    6c74:	ac 83       	std	Y+4, r26	; 0x04
    6c76:	bd 83       	std	Y+5, r27	; 0x05
		nm_write_reg(0x1410, u32Val);
    6c78:	8a 81       	ldd	r24, Y+2	; 0x02
    6c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    6c7c:	ac 81       	ldd	r26, Y+4	; 0x04
    6c7e:	bd 81       	ldd	r27, Y+5	; 0x05
    6c80:	9c 01       	movw	r18, r24
    6c82:	ad 01       	movw	r20, r26
    6c84:	60 e1       	ldi	r22, 0x10	; 16
    6c86:	74 e1       	ldi	r23, 0x14	; 20
    6c88:	80 e0       	ldi	r24, 0x00	; 0
    6c8a:	90 e0       	ldi	r25, 0x00	; 0
    6c8c:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <nm_write_reg>
    6c90:	01 c0       	rjmp	.+2      	; 0x6c94 <spi_flash_enable+0xe0>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
		if(s8Ret != M2M_SUCCESS) {
			goto ERR1;
    6c92:	00 00       	nop
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
    6c94:	89 81       	ldd	r24, Y+1	; 0x01
}
    6c96:	26 96       	adiw	r28, 0x06	; 6
    6c98:	cd bf       	out	0x3d, r28	; 61
    6c9a:	de bf       	out	0x3e, r29	; 62
    6c9c:	df 91       	pop	r29
    6c9e:	cf 91       	pop	r28
    6ca0:	08 95       	ret

00006ca2 <__cmpsf2>:
    6ca2:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <__fp_cmp>
    6ca6:	08 f4       	brcc	.+2      	; 0x6caa <__cmpsf2+0x8>
    6ca8:	81 e0       	ldi	r24, 0x01	; 1
    6caa:	08 95       	ret

00006cac <__fixunssfsi>:
    6cac:	0e 94 b1 36 	call	0x6d62	; 0x6d62 <__fp_splitA>
    6cb0:	88 f0       	brcs	.+34     	; 0x6cd4 <__fixunssfsi+0x28>
    6cb2:	9f 57       	subi	r25, 0x7F	; 127
    6cb4:	98 f0       	brcs	.+38     	; 0x6cdc <__fixunssfsi+0x30>
    6cb6:	b9 2f       	mov	r27, r25
    6cb8:	99 27       	eor	r25, r25
    6cba:	b7 51       	subi	r27, 0x17	; 23
    6cbc:	b0 f0       	brcs	.+44     	; 0x6cea <__fixunssfsi+0x3e>
    6cbe:	e1 f0       	breq	.+56     	; 0x6cf8 <__fixunssfsi+0x4c>
    6cc0:	66 0f       	add	r22, r22
    6cc2:	77 1f       	adc	r23, r23
    6cc4:	88 1f       	adc	r24, r24
    6cc6:	99 1f       	adc	r25, r25
    6cc8:	1a f0       	brmi	.+6      	; 0x6cd0 <__fixunssfsi+0x24>
    6cca:	ba 95       	dec	r27
    6ccc:	c9 f7       	brne	.-14     	; 0x6cc0 <__fixunssfsi+0x14>
    6cce:	14 c0       	rjmp	.+40     	; 0x6cf8 <__fixunssfsi+0x4c>
    6cd0:	b1 30       	cpi	r27, 0x01	; 1
    6cd2:	91 f0       	breq	.+36     	; 0x6cf8 <__fixunssfsi+0x4c>
    6cd4:	0e 94 cb 36 	call	0x6d96	; 0x6d96 <__fp_zero>
    6cd8:	b1 e0       	ldi	r27, 0x01	; 1
    6cda:	08 95       	ret
    6cdc:	0c 94 cb 36 	jmp	0x6d96	; 0x6d96 <__fp_zero>
    6ce0:	67 2f       	mov	r22, r23
    6ce2:	78 2f       	mov	r23, r24
    6ce4:	88 27       	eor	r24, r24
    6ce6:	b8 5f       	subi	r27, 0xF8	; 248
    6ce8:	39 f0       	breq	.+14     	; 0x6cf8 <__fixunssfsi+0x4c>
    6cea:	b9 3f       	cpi	r27, 0xF9	; 249
    6cec:	cc f3       	brlt	.-14     	; 0x6ce0 <__fixunssfsi+0x34>
    6cee:	86 95       	lsr	r24
    6cf0:	77 95       	ror	r23
    6cf2:	67 95       	ror	r22
    6cf4:	b3 95       	inc	r27
    6cf6:	d9 f7       	brne	.-10     	; 0x6cee <__fixunssfsi+0x42>
    6cf8:	3e f4       	brtc	.+14     	; 0x6d08 <__fixunssfsi+0x5c>
    6cfa:	90 95       	com	r25
    6cfc:	80 95       	com	r24
    6cfe:	70 95       	com	r23
    6d00:	61 95       	neg	r22
    6d02:	7f 4f       	sbci	r23, 0xFF	; 255
    6d04:	8f 4f       	sbci	r24, 0xFF	; 255
    6d06:	9f 4f       	sbci	r25, 0xFF	; 255
    6d08:	08 95       	ret

00006d0a <__fp_cmp>:
    6d0a:	99 0f       	add	r25, r25
    6d0c:	00 08       	sbc	r0, r0
    6d0e:	55 0f       	add	r21, r21
    6d10:	aa 0b       	sbc	r26, r26
    6d12:	e0 e8       	ldi	r30, 0x80	; 128
    6d14:	fe ef       	ldi	r31, 0xFE	; 254
    6d16:	16 16       	cp	r1, r22
    6d18:	17 06       	cpc	r1, r23
    6d1a:	e8 07       	cpc	r30, r24
    6d1c:	f9 07       	cpc	r31, r25
    6d1e:	c0 f0       	brcs	.+48     	; 0x6d50 <__fp_cmp+0x46>
    6d20:	12 16       	cp	r1, r18
    6d22:	13 06       	cpc	r1, r19
    6d24:	e4 07       	cpc	r30, r20
    6d26:	f5 07       	cpc	r31, r21
    6d28:	98 f0       	brcs	.+38     	; 0x6d50 <__fp_cmp+0x46>
    6d2a:	62 1b       	sub	r22, r18
    6d2c:	73 0b       	sbc	r23, r19
    6d2e:	84 0b       	sbc	r24, r20
    6d30:	95 0b       	sbc	r25, r21
    6d32:	39 f4       	brne	.+14     	; 0x6d42 <__fp_cmp+0x38>
    6d34:	0a 26       	eor	r0, r26
    6d36:	61 f0       	breq	.+24     	; 0x6d50 <__fp_cmp+0x46>
    6d38:	23 2b       	or	r18, r19
    6d3a:	24 2b       	or	r18, r20
    6d3c:	25 2b       	or	r18, r21
    6d3e:	21 f4       	brne	.+8      	; 0x6d48 <__fp_cmp+0x3e>
    6d40:	08 95       	ret
    6d42:	0a 26       	eor	r0, r26
    6d44:	09 f4       	brne	.+2      	; 0x6d48 <__fp_cmp+0x3e>
    6d46:	a1 40       	sbci	r26, 0x01	; 1
    6d48:	a6 95       	lsr	r26
    6d4a:	8f ef       	ldi	r24, 0xFF	; 255
    6d4c:	81 1d       	adc	r24, r1
    6d4e:	81 1d       	adc	r24, r1
    6d50:	08 95       	ret

00006d52 <__fp_split3>:
    6d52:	57 fd       	sbrc	r21, 7
    6d54:	90 58       	subi	r25, 0x80	; 128
    6d56:	44 0f       	add	r20, r20
    6d58:	55 1f       	adc	r21, r21
    6d5a:	59 f0       	breq	.+22     	; 0x6d72 <__fp_splitA+0x10>
    6d5c:	5f 3f       	cpi	r21, 0xFF	; 255
    6d5e:	71 f0       	breq	.+28     	; 0x6d7c <__fp_splitA+0x1a>
    6d60:	47 95       	ror	r20

00006d62 <__fp_splitA>:
    6d62:	88 0f       	add	r24, r24
    6d64:	97 fb       	bst	r25, 7
    6d66:	99 1f       	adc	r25, r25
    6d68:	61 f0       	breq	.+24     	; 0x6d82 <__fp_splitA+0x20>
    6d6a:	9f 3f       	cpi	r25, 0xFF	; 255
    6d6c:	79 f0       	breq	.+30     	; 0x6d8c <__fp_splitA+0x2a>
    6d6e:	87 95       	ror	r24
    6d70:	08 95       	ret
    6d72:	12 16       	cp	r1, r18
    6d74:	13 06       	cpc	r1, r19
    6d76:	14 06       	cpc	r1, r20
    6d78:	55 1f       	adc	r21, r21
    6d7a:	f2 cf       	rjmp	.-28     	; 0x6d60 <__fp_split3+0xe>
    6d7c:	46 95       	lsr	r20
    6d7e:	f1 df       	rcall	.-30     	; 0x6d62 <__fp_splitA>
    6d80:	08 c0       	rjmp	.+16     	; 0x6d92 <__fp_splitA+0x30>
    6d82:	16 16       	cp	r1, r22
    6d84:	17 06       	cpc	r1, r23
    6d86:	18 06       	cpc	r1, r24
    6d88:	99 1f       	adc	r25, r25
    6d8a:	f1 cf       	rjmp	.-30     	; 0x6d6e <__fp_splitA+0xc>
    6d8c:	86 95       	lsr	r24
    6d8e:	71 05       	cpc	r23, r1
    6d90:	61 05       	cpc	r22, r1
    6d92:	08 94       	sec
    6d94:	08 95       	ret

00006d96 <__fp_zero>:
    6d96:	e8 94       	clt

00006d98 <__fp_szero>:
    6d98:	bb 27       	eor	r27, r27
    6d9a:	66 27       	eor	r22, r22
    6d9c:	77 27       	eor	r23, r23
    6d9e:	cb 01       	movw	r24, r22
    6da0:	97 f9       	bld	r25, 7
    6da2:	08 95       	ret

00006da4 <__gesf2>:
    6da4:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <__fp_cmp>
    6da8:	08 f4       	brcc	.+2      	; 0x6dac <__gesf2+0x8>
    6daa:	8f ef       	ldi	r24, 0xFF	; 255
    6dac:	08 95       	ret

00006dae <__mulsf3>:
    6dae:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <__mulsf3x>
    6db2:	0c 94 5b 37 	jmp	0x6eb6	; 0x6eb6 <__fp_round>
    6db6:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <__fp_pscA>
    6dba:	38 f0       	brcs	.+14     	; 0x6dca <__mulsf3+0x1c>
    6dbc:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <__fp_pscB>
    6dc0:	20 f0       	brcs	.+8      	; 0x6dca <__mulsf3+0x1c>
    6dc2:	95 23       	and	r25, r21
    6dc4:	11 f0       	breq	.+4      	; 0x6dca <__mulsf3+0x1c>
    6dc6:	0c 94 44 37 	jmp	0x6e88	; 0x6e88 <__fp_inf>
    6dca:	0c 94 4a 37 	jmp	0x6e94	; 0x6e94 <__fp_nan>
    6dce:	11 24       	eor	r1, r1
    6dd0:	0c 94 cc 36 	jmp	0x6d98	; 0x6d98 <__fp_szero>

00006dd4 <__mulsf3x>:
    6dd4:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <__fp_split3>
    6dd8:	70 f3       	brcs	.-36     	; 0x6db6 <__mulsf3+0x8>

00006dda <__mulsf3_pse>:
    6dda:	95 9f       	mul	r25, r21
    6ddc:	c1 f3       	breq	.-16     	; 0x6dce <__mulsf3+0x20>
    6dde:	95 0f       	add	r25, r21
    6de0:	50 e0       	ldi	r21, 0x00	; 0
    6de2:	55 1f       	adc	r21, r21
    6de4:	62 9f       	mul	r22, r18
    6de6:	f0 01       	movw	r30, r0
    6de8:	72 9f       	mul	r23, r18
    6dea:	bb 27       	eor	r27, r27
    6dec:	f0 0d       	add	r31, r0
    6dee:	b1 1d       	adc	r27, r1
    6df0:	63 9f       	mul	r22, r19
    6df2:	aa 27       	eor	r26, r26
    6df4:	f0 0d       	add	r31, r0
    6df6:	b1 1d       	adc	r27, r1
    6df8:	aa 1f       	adc	r26, r26
    6dfa:	64 9f       	mul	r22, r20
    6dfc:	66 27       	eor	r22, r22
    6dfe:	b0 0d       	add	r27, r0
    6e00:	a1 1d       	adc	r26, r1
    6e02:	66 1f       	adc	r22, r22
    6e04:	82 9f       	mul	r24, r18
    6e06:	22 27       	eor	r18, r18
    6e08:	b0 0d       	add	r27, r0
    6e0a:	a1 1d       	adc	r26, r1
    6e0c:	62 1f       	adc	r22, r18
    6e0e:	73 9f       	mul	r23, r19
    6e10:	b0 0d       	add	r27, r0
    6e12:	a1 1d       	adc	r26, r1
    6e14:	62 1f       	adc	r22, r18
    6e16:	83 9f       	mul	r24, r19
    6e18:	a0 0d       	add	r26, r0
    6e1a:	61 1d       	adc	r22, r1
    6e1c:	22 1f       	adc	r18, r18
    6e1e:	74 9f       	mul	r23, r20
    6e20:	33 27       	eor	r19, r19
    6e22:	a0 0d       	add	r26, r0
    6e24:	61 1d       	adc	r22, r1
    6e26:	23 1f       	adc	r18, r19
    6e28:	84 9f       	mul	r24, r20
    6e2a:	60 0d       	add	r22, r0
    6e2c:	21 1d       	adc	r18, r1
    6e2e:	82 2f       	mov	r24, r18
    6e30:	76 2f       	mov	r23, r22
    6e32:	6a 2f       	mov	r22, r26
    6e34:	11 24       	eor	r1, r1
    6e36:	9f 57       	subi	r25, 0x7F	; 127
    6e38:	50 40       	sbci	r21, 0x00	; 0
    6e3a:	9a f0       	brmi	.+38     	; 0x6e62 <__mulsf3_pse+0x88>
    6e3c:	f1 f0       	breq	.+60     	; 0x6e7a <__mulsf3_pse+0xa0>
    6e3e:	88 23       	and	r24, r24
    6e40:	4a f0       	brmi	.+18     	; 0x6e54 <__mulsf3_pse+0x7a>
    6e42:	ee 0f       	add	r30, r30
    6e44:	ff 1f       	adc	r31, r31
    6e46:	bb 1f       	adc	r27, r27
    6e48:	66 1f       	adc	r22, r22
    6e4a:	77 1f       	adc	r23, r23
    6e4c:	88 1f       	adc	r24, r24
    6e4e:	91 50       	subi	r25, 0x01	; 1
    6e50:	50 40       	sbci	r21, 0x00	; 0
    6e52:	a9 f7       	brne	.-22     	; 0x6e3e <__mulsf3_pse+0x64>
    6e54:	9e 3f       	cpi	r25, 0xFE	; 254
    6e56:	51 05       	cpc	r21, r1
    6e58:	80 f0       	brcs	.+32     	; 0x6e7a <__mulsf3_pse+0xa0>
    6e5a:	0c 94 44 37 	jmp	0x6e88	; 0x6e88 <__fp_inf>
    6e5e:	0c 94 cc 36 	jmp	0x6d98	; 0x6d98 <__fp_szero>
    6e62:	5f 3f       	cpi	r21, 0xFF	; 255
    6e64:	e4 f3       	brlt	.-8      	; 0x6e5e <__mulsf3_pse+0x84>
    6e66:	98 3e       	cpi	r25, 0xE8	; 232
    6e68:	d4 f3       	brlt	.-12     	; 0x6e5e <__mulsf3_pse+0x84>
    6e6a:	86 95       	lsr	r24
    6e6c:	77 95       	ror	r23
    6e6e:	67 95       	ror	r22
    6e70:	b7 95       	ror	r27
    6e72:	f7 95       	ror	r31
    6e74:	e7 95       	ror	r30
    6e76:	9f 5f       	subi	r25, 0xFF	; 255
    6e78:	c1 f7       	brne	.-16     	; 0x6e6a <__mulsf3_pse+0x90>
    6e7a:	fe 2b       	or	r31, r30
    6e7c:	88 0f       	add	r24, r24
    6e7e:	91 1d       	adc	r25, r1
    6e80:	96 95       	lsr	r25
    6e82:	87 95       	ror	r24
    6e84:	97 f9       	bld	r25, 7
    6e86:	08 95       	ret

00006e88 <__fp_inf>:
    6e88:	97 f9       	bld	r25, 7
    6e8a:	9f 67       	ori	r25, 0x7F	; 127
    6e8c:	80 e8       	ldi	r24, 0x80	; 128
    6e8e:	70 e0       	ldi	r23, 0x00	; 0
    6e90:	60 e0       	ldi	r22, 0x00	; 0
    6e92:	08 95       	ret

00006e94 <__fp_nan>:
    6e94:	9f ef       	ldi	r25, 0xFF	; 255
    6e96:	80 ec       	ldi	r24, 0xC0	; 192
    6e98:	08 95       	ret

00006e9a <__fp_pscA>:
    6e9a:	00 24       	eor	r0, r0
    6e9c:	0a 94       	dec	r0
    6e9e:	16 16       	cp	r1, r22
    6ea0:	17 06       	cpc	r1, r23
    6ea2:	18 06       	cpc	r1, r24
    6ea4:	09 06       	cpc	r0, r25
    6ea6:	08 95       	ret

00006ea8 <__fp_pscB>:
    6ea8:	00 24       	eor	r0, r0
    6eaa:	0a 94       	dec	r0
    6eac:	12 16       	cp	r1, r18
    6eae:	13 06       	cpc	r1, r19
    6eb0:	14 06       	cpc	r1, r20
    6eb2:	05 06       	cpc	r0, r21
    6eb4:	08 95       	ret

00006eb6 <__fp_round>:
    6eb6:	09 2e       	mov	r0, r25
    6eb8:	03 94       	inc	r0
    6eba:	00 0c       	add	r0, r0
    6ebc:	11 f4       	brne	.+4      	; 0x6ec2 <__fp_round+0xc>
    6ebe:	88 23       	and	r24, r24
    6ec0:	52 f0       	brmi	.+20     	; 0x6ed6 <__fp_round+0x20>
    6ec2:	bb 0f       	add	r27, r27
    6ec4:	40 f4       	brcc	.+16     	; 0x6ed6 <__fp_round+0x20>
    6ec6:	bf 2b       	or	r27, r31
    6ec8:	11 f4       	brne	.+4      	; 0x6ece <__fp_round+0x18>
    6eca:	60 ff       	sbrs	r22, 0
    6ecc:	04 c0       	rjmp	.+8      	; 0x6ed6 <__fp_round+0x20>
    6ece:	6f 5f       	subi	r22, 0xFF	; 255
    6ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    6ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ed6:	08 95       	ret

00006ed8 <__divmodhi4>:
    6ed8:	97 fb       	bst	r25, 7
    6eda:	07 2e       	mov	r0, r23
    6edc:	16 f4       	brtc	.+4      	; 0x6ee2 <__divmodhi4+0xa>
    6ede:	00 94       	com	r0
    6ee0:	07 d0       	rcall	.+14     	; 0x6ef0 <__divmodhi4_neg1>
    6ee2:	77 fd       	sbrc	r23, 7
    6ee4:	09 d0       	rcall	.+18     	; 0x6ef8 <__divmodhi4_neg2>
    6ee6:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <__udivmodhi4>
    6eea:	07 fc       	sbrc	r0, 7
    6eec:	05 d0       	rcall	.+10     	; 0x6ef8 <__divmodhi4_neg2>
    6eee:	3e f4       	brtc	.+14     	; 0x6efe <__divmodhi4_exit>

00006ef0 <__divmodhi4_neg1>:
    6ef0:	90 95       	com	r25
    6ef2:	81 95       	neg	r24
    6ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ef6:	08 95       	ret

00006ef8 <__divmodhi4_neg2>:
    6ef8:	70 95       	com	r23
    6efa:	61 95       	neg	r22
    6efc:	7f 4f       	sbci	r23, 0xFF	; 255

00006efe <__divmodhi4_exit>:
    6efe:	08 95       	ret

00006f00 <__tablejump2__>:
    6f00:	ee 0f       	add	r30, r30
    6f02:	ff 1f       	adc	r31, r31
    6f04:	05 90       	lpm	r0, Z+
    6f06:	f4 91       	lpm	r31, Z
    6f08:	e0 2d       	mov	r30, r0
    6f0a:	09 94       	ijmp

00006f0c <__udivmodhi4>:
    6f0c:	aa 1b       	sub	r26, r26
    6f0e:	bb 1b       	sub	r27, r27
    6f10:	51 e1       	ldi	r21, 0x11	; 17
    6f12:	07 c0       	rjmp	.+14     	; 0x6f22 <__udivmodhi4_ep>

00006f14 <__udivmodhi4_loop>:
    6f14:	aa 1f       	adc	r26, r26
    6f16:	bb 1f       	adc	r27, r27
    6f18:	a6 17       	cp	r26, r22
    6f1a:	b7 07       	cpc	r27, r23
    6f1c:	10 f0       	brcs	.+4      	; 0x6f22 <__udivmodhi4_ep>
    6f1e:	a6 1b       	sub	r26, r22
    6f20:	b7 0b       	sbc	r27, r23

00006f22 <__udivmodhi4_ep>:
    6f22:	88 1f       	adc	r24, r24
    6f24:	99 1f       	adc	r25, r25
    6f26:	5a 95       	dec	r21
    6f28:	a9 f7       	brne	.-22     	; 0x6f14 <__udivmodhi4_loop>
    6f2a:	80 95       	com	r24
    6f2c:	90 95       	com	r25
    6f2e:	bc 01       	movw	r22, r24
    6f30:	cd 01       	movw	r24, r26
    6f32:	08 95       	ret

00006f34 <memset>:
    6f34:	dc 01       	movw	r26, r24
    6f36:	01 c0       	rjmp	.+2      	; 0x6f3a <memset+0x6>
    6f38:	6d 93       	st	X+, r22
    6f3a:	41 50       	subi	r20, 0x01	; 1
    6f3c:	50 40       	sbci	r21, 0x00	; 0
    6f3e:	e0 f7       	brcc	.-8      	; 0x6f38 <memset+0x4>
    6f40:	08 95       	ret

00006f42 <printf>:
    6f42:	a0 e0       	ldi	r26, 0x00	; 0
    6f44:	b0 e0       	ldi	r27, 0x00	; 0
    6f46:	e7 ea       	ldi	r30, 0xA7	; 167
    6f48:	f7 e3       	ldi	r31, 0x37	; 55
    6f4a:	0c 94 88 3a 	jmp	0x7510	; 0x7510 <__prologue_saves__+0x20>
    6f4e:	ae 01       	movw	r20, r28
    6f50:	4b 5f       	subi	r20, 0xFB	; 251
    6f52:	5f 4f       	sbci	r21, 0xFF	; 255
    6f54:	fa 01       	movw	r30, r20
    6f56:	61 91       	ld	r22, Z+
    6f58:	71 91       	ld	r23, Z+
    6f5a:	af 01       	movw	r20, r30
    6f5c:	80 91 b6 2e 	lds	r24, 0x2EB6	; 0x802eb6 <__iob+0x2>
    6f60:	90 91 b7 2e 	lds	r25, 0x2EB7	; 0x802eb7 <__iob+0x3>
    6f64:	0e 94 e7 37 	call	0x6fce	; 0x6fce <vfprintf>
    6f68:	e2 e0       	ldi	r30, 0x02	; 2
    6f6a:	0c 94 a1 3a 	jmp	0x7542	; 0x7542 <__epilogue_restores__+0x20>

00006f6e <puts>:
    6f6e:	0f 93       	push	r16
    6f70:	1f 93       	push	r17
    6f72:	cf 93       	push	r28
    6f74:	df 93       	push	r29
    6f76:	e0 91 b6 2e 	lds	r30, 0x2EB6	; 0x802eb6 <__iob+0x2>
    6f7a:	f0 91 b7 2e 	lds	r31, 0x2EB7	; 0x802eb7 <__iob+0x3>
    6f7e:	23 81       	ldd	r18, Z+3	; 0x03
    6f80:	21 ff       	sbrs	r18, 1
    6f82:	1b c0       	rjmp	.+54     	; 0x6fba <puts+0x4c>
    6f84:	8c 01       	movw	r16, r24
    6f86:	d0 e0       	ldi	r29, 0x00	; 0
    6f88:	c0 e0       	ldi	r28, 0x00	; 0
    6f8a:	f8 01       	movw	r30, r16
    6f8c:	81 91       	ld	r24, Z+
    6f8e:	8f 01       	movw	r16, r30
    6f90:	60 91 b6 2e 	lds	r22, 0x2EB6	; 0x802eb6 <__iob+0x2>
    6f94:	70 91 b7 2e 	lds	r23, 0x2EB7	; 0x802eb7 <__iob+0x3>
    6f98:	db 01       	movw	r26, r22
    6f9a:	18 96       	adiw	r26, 0x08	; 8
    6f9c:	ed 91       	ld	r30, X+
    6f9e:	fc 91       	ld	r31, X
    6fa0:	19 97       	sbiw	r26, 0x09	; 9
    6fa2:	88 23       	and	r24, r24
    6fa4:	31 f0       	breq	.+12     	; 0x6fb2 <puts+0x44>
    6fa6:	09 95       	icall
    6fa8:	89 2b       	or	r24, r25
    6faa:	79 f3       	breq	.-34     	; 0x6f8a <puts+0x1c>
    6fac:	df ef       	ldi	r29, 0xFF	; 255
    6fae:	cf ef       	ldi	r28, 0xFF	; 255
    6fb0:	ec cf       	rjmp	.-40     	; 0x6f8a <puts+0x1c>
    6fb2:	8a e0       	ldi	r24, 0x0A	; 10
    6fb4:	09 95       	icall
    6fb6:	89 2b       	or	r24, r25
    6fb8:	19 f0       	breq	.+6      	; 0x6fc0 <puts+0x52>
    6fba:	8f ef       	ldi	r24, 0xFF	; 255
    6fbc:	9f ef       	ldi	r25, 0xFF	; 255
    6fbe:	02 c0       	rjmp	.+4      	; 0x6fc4 <puts+0x56>
    6fc0:	8d 2f       	mov	r24, r29
    6fc2:	9c 2f       	mov	r25, r28
    6fc4:	df 91       	pop	r29
    6fc6:	cf 91       	pop	r28
    6fc8:	1f 91       	pop	r17
    6fca:	0f 91       	pop	r16
    6fcc:	08 95       	ret

00006fce <vfprintf>:
    6fce:	ab e0       	ldi	r26, 0x0B	; 11
    6fd0:	b0 e0       	ldi	r27, 0x00	; 0
    6fd2:	ed ee       	ldi	r30, 0xED	; 237
    6fd4:	f7 e3       	ldi	r31, 0x37	; 55
    6fd6:	0c 94 78 3a 	jmp	0x74f0	; 0x74f0 <__prologue_saves__>
    6fda:	6c 01       	movw	r12, r24
    6fdc:	7b 01       	movw	r14, r22
    6fde:	8a 01       	movw	r16, r20
    6fe0:	fc 01       	movw	r30, r24
    6fe2:	16 82       	std	Z+6, r1	; 0x06
    6fe4:	17 82       	std	Z+7, r1	; 0x07
    6fe6:	83 81       	ldd	r24, Z+3	; 0x03
    6fe8:	81 ff       	sbrs	r24, 1
    6fea:	cc c1       	rjmp	.+920    	; 0x7384 <vfprintf+0x3b6>
    6fec:	ce 01       	movw	r24, r28
    6fee:	01 96       	adiw	r24, 0x01	; 1
    6ff0:	3c 01       	movw	r6, r24
    6ff2:	f6 01       	movw	r30, r12
    6ff4:	93 81       	ldd	r25, Z+3	; 0x03
    6ff6:	f7 01       	movw	r30, r14
    6ff8:	93 fd       	sbrc	r25, 3
    6ffa:	85 91       	lpm	r24, Z+
    6ffc:	93 ff       	sbrs	r25, 3
    6ffe:	81 91       	ld	r24, Z+
    7000:	7f 01       	movw	r14, r30
    7002:	88 23       	and	r24, r24
    7004:	09 f4       	brne	.+2      	; 0x7008 <vfprintf+0x3a>
    7006:	ba c1       	rjmp	.+884    	; 0x737c <vfprintf+0x3ae>
    7008:	85 32       	cpi	r24, 0x25	; 37
    700a:	39 f4       	brne	.+14     	; 0x701a <vfprintf+0x4c>
    700c:	93 fd       	sbrc	r25, 3
    700e:	85 91       	lpm	r24, Z+
    7010:	93 ff       	sbrs	r25, 3
    7012:	81 91       	ld	r24, Z+
    7014:	7f 01       	movw	r14, r30
    7016:	85 32       	cpi	r24, 0x25	; 37
    7018:	29 f4       	brne	.+10     	; 0x7024 <vfprintf+0x56>
    701a:	b6 01       	movw	r22, r12
    701c:	90 e0       	ldi	r25, 0x00	; 0
    701e:	0e 94 de 39 	call	0x73bc	; 0x73bc <fputc>
    7022:	e7 cf       	rjmp	.-50     	; 0x6ff2 <vfprintf+0x24>
    7024:	91 2c       	mov	r9, r1
    7026:	21 2c       	mov	r2, r1
    7028:	31 2c       	mov	r3, r1
    702a:	ff e1       	ldi	r31, 0x1F	; 31
    702c:	f3 15       	cp	r31, r3
    702e:	d8 f0       	brcs	.+54     	; 0x7066 <vfprintf+0x98>
    7030:	8b 32       	cpi	r24, 0x2B	; 43
    7032:	79 f0       	breq	.+30     	; 0x7052 <vfprintf+0x84>
    7034:	38 f4       	brcc	.+14     	; 0x7044 <vfprintf+0x76>
    7036:	80 32       	cpi	r24, 0x20	; 32
    7038:	79 f0       	breq	.+30     	; 0x7058 <vfprintf+0x8a>
    703a:	83 32       	cpi	r24, 0x23	; 35
    703c:	a1 f4       	brne	.+40     	; 0x7066 <vfprintf+0x98>
    703e:	23 2d       	mov	r18, r3
    7040:	20 61       	ori	r18, 0x10	; 16
    7042:	1d c0       	rjmp	.+58     	; 0x707e <vfprintf+0xb0>
    7044:	8d 32       	cpi	r24, 0x2D	; 45
    7046:	61 f0       	breq	.+24     	; 0x7060 <vfprintf+0x92>
    7048:	80 33       	cpi	r24, 0x30	; 48
    704a:	69 f4       	brne	.+26     	; 0x7066 <vfprintf+0x98>
    704c:	23 2d       	mov	r18, r3
    704e:	21 60       	ori	r18, 0x01	; 1
    7050:	16 c0       	rjmp	.+44     	; 0x707e <vfprintf+0xb0>
    7052:	83 2d       	mov	r24, r3
    7054:	82 60       	ori	r24, 0x02	; 2
    7056:	38 2e       	mov	r3, r24
    7058:	e3 2d       	mov	r30, r3
    705a:	e4 60       	ori	r30, 0x04	; 4
    705c:	3e 2e       	mov	r3, r30
    705e:	2a c0       	rjmp	.+84     	; 0x70b4 <vfprintf+0xe6>
    7060:	f3 2d       	mov	r31, r3
    7062:	f8 60       	ori	r31, 0x08	; 8
    7064:	1d c0       	rjmp	.+58     	; 0x70a0 <vfprintf+0xd2>
    7066:	37 fc       	sbrc	r3, 7
    7068:	2d c0       	rjmp	.+90     	; 0x70c4 <vfprintf+0xf6>
    706a:	20 ed       	ldi	r18, 0xD0	; 208
    706c:	28 0f       	add	r18, r24
    706e:	2a 30       	cpi	r18, 0x0A	; 10
    7070:	40 f0       	brcs	.+16     	; 0x7082 <vfprintf+0xb4>
    7072:	8e 32       	cpi	r24, 0x2E	; 46
    7074:	b9 f4       	brne	.+46     	; 0x70a4 <vfprintf+0xd6>
    7076:	36 fc       	sbrc	r3, 6
    7078:	81 c1       	rjmp	.+770    	; 0x737c <vfprintf+0x3ae>
    707a:	23 2d       	mov	r18, r3
    707c:	20 64       	ori	r18, 0x40	; 64
    707e:	32 2e       	mov	r3, r18
    7080:	19 c0       	rjmp	.+50     	; 0x70b4 <vfprintf+0xe6>
    7082:	36 fe       	sbrs	r3, 6
    7084:	06 c0       	rjmp	.+12     	; 0x7092 <vfprintf+0xc4>
    7086:	8a e0       	ldi	r24, 0x0A	; 10
    7088:	98 9e       	mul	r9, r24
    708a:	20 0d       	add	r18, r0
    708c:	11 24       	eor	r1, r1
    708e:	92 2e       	mov	r9, r18
    7090:	11 c0       	rjmp	.+34     	; 0x70b4 <vfprintf+0xe6>
    7092:	ea e0       	ldi	r30, 0x0A	; 10
    7094:	2e 9e       	mul	r2, r30
    7096:	20 0d       	add	r18, r0
    7098:	11 24       	eor	r1, r1
    709a:	22 2e       	mov	r2, r18
    709c:	f3 2d       	mov	r31, r3
    709e:	f0 62       	ori	r31, 0x20	; 32
    70a0:	3f 2e       	mov	r3, r31
    70a2:	08 c0       	rjmp	.+16     	; 0x70b4 <vfprintf+0xe6>
    70a4:	8c 36       	cpi	r24, 0x6C	; 108
    70a6:	21 f4       	brne	.+8      	; 0x70b0 <vfprintf+0xe2>
    70a8:	83 2d       	mov	r24, r3
    70aa:	80 68       	ori	r24, 0x80	; 128
    70ac:	38 2e       	mov	r3, r24
    70ae:	02 c0       	rjmp	.+4      	; 0x70b4 <vfprintf+0xe6>
    70b0:	88 36       	cpi	r24, 0x68	; 104
    70b2:	41 f4       	brne	.+16     	; 0x70c4 <vfprintf+0xf6>
    70b4:	f7 01       	movw	r30, r14
    70b6:	93 fd       	sbrc	r25, 3
    70b8:	85 91       	lpm	r24, Z+
    70ba:	93 ff       	sbrs	r25, 3
    70bc:	81 91       	ld	r24, Z+
    70be:	7f 01       	movw	r14, r30
    70c0:	81 11       	cpse	r24, r1
    70c2:	b3 cf       	rjmp	.-154    	; 0x702a <vfprintf+0x5c>
    70c4:	98 2f       	mov	r25, r24
    70c6:	9f 7d       	andi	r25, 0xDF	; 223
    70c8:	95 54       	subi	r25, 0x45	; 69
    70ca:	93 30       	cpi	r25, 0x03	; 3
    70cc:	28 f4       	brcc	.+10     	; 0x70d8 <vfprintf+0x10a>
    70ce:	0c 5f       	subi	r16, 0xFC	; 252
    70d0:	1f 4f       	sbci	r17, 0xFF	; 255
    70d2:	9f e3       	ldi	r25, 0x3F	; 63
    70d4:	99 83       	std	Y+1, r25	; 0x01
    70d6:	0d c0       	rjmp	.+26     	; 0x70f2 <vfprintf+0x124>
    70d8:	83 36       	cpi	r24, 0x63	; 99
    70da:	31 f0       	breq	.+12     	; 0x70e8 <vfprintf+0x11a>
    70dc:	83 37       	cpi	r24, 0x73	; 115
    70de:	71 f0       	breq	.+28     	; 0x70fc <vfprintf+0x12e>
    70e0:	83 35       	cpi	r24, 0x53	; 83
    70e2:	09 f0       	breq	.+2      	; 0x70e6 <vfprintf+0x118>
    70e4:	59 c0       	rjmp	.+178    	; 0x7198 <vfprintf+0x1ca>
    70e6:	21 c0       	rjmp	.+66     	; 0x712a <vfprintf+0x15c>
    70e8:	f8 01       	movw	r30, r16
    70ea:	80 81       	ld	r24, Z
    70ec:	89 83       	std	Y+1, r24	; 0x01
    70ee:	0e 5f       	subi	r16, 0xFE	; 254
    70f0:	1f 4f       	sbci	r17, 0xFF	; 255
    70f2:	88 24       	eor	r8, r8
    70f4:	83 94       	inc	r8
    70f6:	91 2c       	mov	r9, r1
    70f8:	53 01       	movw	r10, r6
    70fa:	13 c0       	rjmp	.+38     	; 0x7122 <vfprintf+0x154>
    70fc:	28 01       	movw	r4, r16
    70fe:	f2 e0       	ldi	r31, 0x02	; 2
    7100:	4f 0e       	add	r4, r31
    7102:	51 1c       	adc	r5, r1
    7104:	f8 01       	movw	r30, r16
    7106:	a0 80       	ld	r10, Z
    7108:	b1 80       	ldd	r11, Z+1	; 0x01
    710a:	36 fe       	sbrs	r3, 6
    710c:	03 c0       	rjmp	.+6      	; 0x7114 <vfprintf+0x146>
    710e:	69 2d       	mov	r22, r9
    7110:	70 e0       	ldi	r23, 0x00	; 0
    7112:	02 c0       	rjmp	.+4      	; 0x7118 <vfprintf+0x14a>
    7114:	6f ef       	ldi	r22, 0xFF	; 255
    7116:	7f ef       	ldi	r23, 0xFF	; 255
    7118:	c5 01       	movw	r24, r10
    711a:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <strnlen>
    711e:	4c 01       	movw	r8, r24
    7120:	82 01       	movw	r16, r4
    7122:	f3 2d       	mov	r31, r3
    7124:	ff 77       	andi	r31, 0x7F	; 127
    7126:	3f 2e       	mov	r3, r31
    7128:	16 c0       	rjmp	.+44     	; 0x7156 <vfprintf+0x188>
    712a:	28 01       	movw	r4, r16
    712c:	22 e0       	ldi	r18, 0x02	; 2
    712e:	42 0e       	add	r4, r18
    7130:	51 1c       	adc	r5, r1
    7132:	f8 01       	movw	r30, r16
    7134:	a0 80       	ld	r10, Z
    7136:	b1 80       	ldd	r11, Z+1	; 0x01
    7138:	36 fe       	sbrs	r3, 6
    713a:	03 c0       	rjmp	.+6      	; 0x7142 <vfprintf+0x174>
    713c:	69 2d       	mov	r22, r9
    713e:	70 e0       	ldi	r23, 0x00	; 0
    7140:	02 c0       	rjmp	.+4      	; 0x7146 <vfprintf+0x178>
    7142:	6f ef       	ldi	r22, 0xFF	; 255
    7144:	7f ef       	ldi	r23, 0xFF	; 255
    7146:	c5 01       	movw	r24, r10
    7148:	0e 94 c8 39 	call	0x7390	; 0x7390 <strnlen_P>
    714c:	4c 01       	movw	r8, r24
    714e:	f3 2d       	mov	r31, r3
    7150:	f0 68       	ori	r31, 0x80	; 128
    7152:	3f 2e       	mov	r3, r31
    7154:	82 01       	movw	r16, r4
    7156:	33 fc       	sbrc	r3, 3
    7158:	1b c0       	rjmp	.+54     	; 0x7190 <vfprintf+0x1c2>
    715a:	82 2d       	mov	r24, r2
    715c:	90 e0       	ldi	r25, 0x00	; 0
    715e:	88 16       	cp	r8, r24
    7160:	99 06       	cpc	r9, r25
    7162:	b0 f4       	brcc	.+44     	; 0x7190 <vfprintf+0x1c2>
    7164:	b6 01       	movw	r22, r12
    7166:	80 e2       	ldi	r24, 0x20	; 32
    7168:	90 e0       	ldi	r25, 0x00	; 0
    716a:	0e 94 de 39 	call	0x73bc	; 0x73bc <fputc>
    716e:	2a 94       	dec	r2
    7170:	f4 cf       	rjmp	.-24     	; 0x715a <vfprintf+0x18c>
    7172:	f5 01       	movw	r30, r10
    7174:	37 fc       	sbrc	r3, 7
    7176:	85 91       	lpm	r24, Z+
    7178:	37 fe       	sbrs	r3, 7
    717a:	81 91       	ld	r24, Z+
    717c:	5f 01       	movw	r10, r30
    717e:	b6 01       	movw	r22, r12
    7180:	90 e0       	ldi	r25, 0x00	; 0
    7182:	0e 94 de 39 	call	0x73bc	; 0x73bc <fputc>
    7186:	21 10       	cpse	r2, r1
    7188:	2a 94       	dec	r2
    718a:	21 e0       	ldi	r18, 0x01	; 1
    718c:	82 1a       	sub	r8, r18
    718e:	91 08       	sbc	r9, r1
    7190:	81 14       	cp	r8, r1
    7192:	91 04       	cpc	r9, r1
    7194:	71 f7       	brne	.-36     	; 0x7172 <vfprintf+0x1a4>
    7196:	e8 c0       	rjmp	.+464    	; 0x7368 <vfprintf+0x39a>
    7198:	84 36       	cpi	r24, 0x64	; 100
    719a:	11 f0       	breq	.+4      	; 0x71a0 <vfprintf+0x1d2>
    719c:	89 36       	cpi	r24, 0x69	; 105
    719e:	41 f5       	brne	.+80     	; 0x71f0 <vfprintf+0x222>
    71a0:	f8 01       	movw	r30, r16
    71a2:	37 fe       	sbrs	r3, 7
    71a4:	07 c0       	rjmp	.+14     	; 0x71b4 <vfprintf+0x1e6>
    71a6:	60 81       	ld	r22, Z
    71a8:	71 81       	ldd	r23, Z+1	; 0x01
    71aa:	82 81       	ldd	r24, Z+2	; 0x02
    71ac:	93 81       	ldd	r25, Z+3	; 0x03
    71ae:	0c 5f       	subi	r16, 0xFC	; 252
    71b0:	1f 4f       	sbci	r17, 0xFF	; 255
    71b2:	08 c0       	rjmp	.+16     	; 0x71c4 <vfprintf+0x1f6>
    71b4:	60 81       	ld	r22, Z
    71b6:	71 81       	ldd	r23, Z+1	; 0x01
    71b8:	07 2e       	mov	r0, r23
    71ba:	00 0c       	add	r0, r0
    71bc:	88 0b       	sbc	r24, r24
    71be:	99 0b       	sbc	r25, r25
    71c0:	0e 5f       	subi	r16, 0xFE	; 254
    71c2:	1f 4f       	sbci	r17, 0xFF	; 255
    71c4:	f3 2d       	mov	r31, r3
    71c6:	ff 76       	andi	r31, 0x6F	; 111
    71c8:	3f 2e       	mov	r3, r31
    71ca:	97 ff       	sbrs	r25, 7
    71cc:	09 c0       	rjmp	.+18     	; 0x71e0 <vfprintf+0x212>
    71ce:	90 95       	com	r25
    71d0:	80 95       	com	r24
    71d2:	70 95       	com	r23
    71d4:	61 95       	neg	r22
    71d6:	7f 4f       	sbci	r23, 0xFF	; 255
    71d8:	8f 4f       	sbci	r24, 0xFF	; 255
    71da:	9f 4f       	sbci	r25, 0xFF	; 255
    71dc:	f0 68       	ori	r31, 0x80	; 128
    71de:	3f 2e       	mov	r3, r31
    71e0:	2a e0       	ldi	r18, 0x0A	; 10
    71e2:	30 e0       	ldi	r19, 0x00	; 0
    71e4:	a3 01       	movw	r20, r6
    71e6:	0e 94 1a 3a 	call	0x7434	; 0x7434 <__ultoa_invert>
    71ea:	88 2e       	mov	r8, r24
    71ec:	86 18       	sub	r8, r6
    71ee:	45 c0       	rjmp	.+138    	; 0x727a <vfprintf+0x2ac>
    71f0:	85 37       	cpi	r24, 0x75	; 117
    71f2:	31 f4       	brne	.+12     	; 0x7200 <vfprintf+0x232>
    71f4:	23 2d       	mov	r18, r3
    71f6:	2f 7e       	andi	r18, 0xEF	; 239
    71f8:	b2 2e       	mov	r11, r18
    71fa:	2a e0       	ldi	r18, 0x0A	; 10
    71fc:	30 e0       	ldi	r19, 0x00	; 0
    71fe:	25 c0       	rjmp	.+74     	; 0x724a <vfprintf+0x27c>
    7200:	93 2d       	mov	r25, r3
    7202:	99 7f       	andi	r25, 0xF9	; 249
    7204:	b9 2e       	mov	r11, r25
    7206:	8f 36       	cpi	r24, 0x6F	; 111
    7208:	c1 f0       	breq	.+48     	; 0x723a <vfprintf+0x26c>
    720a:	18 f4       	brcc	.+6      	; 0x7212 <vfprintf+0x244>
    720c:	88 35       	cpi	r24, 0x58	; 88
    720e:	79 f0       	breq	.+30     	; 0x722e <vfprintf+0x260>
    7210:	b5 c0       	rjmp	.+362    	; 0x737c <vfprintf+0x3ae>
    7212:	80 37       	cpi	r24, 0x70	; 112
    7214:	19 f0       	breq	.+6      	; 0x721c <vfprintf+0x24e>
    7216:	88 37       	cpi	r24, 0x78	; 120
    7218:	21 f0       	breq	.+8      	; 0x7222 <vfprintf+0x254>
    721a:	b0 c0       	rjmp	.+352    	; 0x737c <vfprintf+0x3ae>
    721c:	e9 2f       	mov	r30, r25
    721e:	e0 61       	ori	r30, 0x10	; 16
    7220:	be 2e       	mov	r11, r30
    7222:	b4 fe       	sbrs	r11, 4
    7224:	0d c0       	rjmp	.+26     	; 0x7240 <vfprintf+0x272>
    7226:	fb 2d       	mov	r31, r11
    7228:	f4 60       	ori	r31, 0x04	; 4
    722a:	bf 2e       	mov	r11, r31
    722c:	09 c0       	rjmp	.+18     	; 0x7240 <vfprintf+0x272>
    722e:	34 fe       	sbrs	r3, 4
    7230:	0a c0       	rjmp	.+20     	; 0x7246 <vfprintf+0x278>
    7232:	29 2f       	mov	r18, r25
    7234:	26 60       	ori	r18, 0x06	; 6
    7236:	b2 2e       	mov	r11, r18
    7238:	06 c0       	rjmp	.+12     	; 0x7246 <vfprintf+0x278>
    723a:	28 e0       	ldi	r18, 0x08	; 8
    723c:	30 e0       	ldi	r19, 0x00	; 0
    723e:	05 c0       	rjmp	.+10     	; 0x724a <vfprintf+0x27c>
    7240:	20 e1       	ldi	r18, 0x10	; 16
    7242:	30 e0       	ldi	r19, 0x00	; 0
    7244:	02 c0       	rjmp	.+4      	; 0x724a <vfprintf+0x27c>
    7246:	20 e1       	ldi	r18, 0x10	; 16
    7248:	32 e0       	ldi	r19, 0x02	; 2
    724a:	f8 01       	movw	r30, r16
    724c:	b7 fe       	sbrs	r11, 7
    724e:	07 c0       	rjmp	.+14     	; 0x725e <vfprintf+0x290>
    7250:	60 81       	ld	r22, Z
    7252:	71 81       	ldd	r23, Z+1	; 0x01
    7254:	82 81       	ldd	r24, Z+2	; 0x02
    7256:	93 81       	ldd	r25, Z+3	; 0x03
    7258:	0c 5f       	subi	r16, 0xFC	; 252
    725a:	1f 4f       	sbci	r17, 0xFF	; 255
    725c:	06 c0       	rjmp	.+12     	; 0x726a <vfprintf+0x29c>
    725e:	60 81       	ld	r22, Z
    7260:	71 81       	ldd	r23, Z+1	; 0x01
    7262:	80 e0       	ldi	r24, 0x00	; 0
    7264:	90 e0       	ldi	r25, 0x00	; 0
    7266:	0e 5f       	subi	r16, 0xFE	; 254
    7268:	1f 4f       	sbci	r17, 0xFF	; 255
    726a:	a3 01       	movw	r20, r6
    726c:	0e 94 1a 3a 	call	0x7434	; 0x7434 <__ultoa_invert>
    7270:	88 2e       	mov	r8, r24
    7272:	86 18       	sub	r8, r6
    7274:	fb 2d       	mov	r31, r11
    7276:	ff 77       	andi	r31, 0x7F	; 127
    7278:	3f 2e       	mov	r3, r31
    727a:	36 fe       	sbrs	r3, 6
    727c:	0d c0       	rjmp	.+26     	; 0x7298 <vfprintf+0x2ca>
    727e:	23 2d       	mov	r18, r3
    7280:	2e 7f       	andi	r18, 0xFE	; 254
    7282:	a2 2e       	mov	r10, r18
    7284:	89 14       	cp	r8, r9
    7286:	58 f4       	brcc	.+22     	; 0x729e <vfprintf+0x2d0>
    7288:	34 fe       	sbrs	r3, 4
    728a:	0b c0       	rjmp	.+22     	; 0x72a2 <vfprintf+0x2d4>
    728c:	32 fc       	sbrc	r3, 2
    728e:	09 c0       	rjmp	.+18     	; 0x72a2 <vfprintf+0x2d4>
    7290:	83 2d       	mov	r24, r3
    7292:	8e 7e       	andi	r24, 0xEE	; 238
    7294:	a8 2e       	mov	r10, r24
    7296:	05 c0       	rjmp	.+10     	; 0x72a2 <vfprintf+0x2d4>
    7298:	b8 2c       	mov	r11, r8
    729a:	a3 2c       	mov	r10, r3
    729c:	03 c0       	rjmp	.+6      	; 0x72a4 <vfprintf+0x2d6>
    729e:	b8 2c       	mov	r11, r8
    72a0:	01 c0       	rjmp	.+2      	; 0x72a4 <vfprintf+0x2d6>
    72a2:	b9 2c       	mov	r11, r9
    72a4:	a4 fe       	sbrs	r10, 4
    72a6:	0f c0       	rjmp	.+30     	; 0x72c6 <vfprintf+0x2f8>
    72a8:	fe 01       	movw	r30, r28
    72aa:	e8 0d       	add	r30, r8
    72ac:	f1 1d       	adc	r31, r1
    72ae:	80 81       	ld	r24, Z
    72b0:	80 33       	cpi	r24, 0x30	; 48
    72b2:	21 f4       	brne	.+8      	; 0x72bc <vfprintf+0x2ee>
    72b4:	9a 2d       	mov	r25, r10
    72b6:	99 7e       	andi	r25, 0xE9	; 233
    72b8:	a9 2e       	mov	r10, r25
    72ba:	09 c0       	rjmp	.+18     	; 0x72ce <vfprintf+0x300>
    72bc:	a2 fe       	sbrs	r10, 2
    72be:	06 c0       	rjmp	.+12     	; 0x72cc <vfprintf+0x2fe>
    72c0:	b3 94       	inc	r11
    72c2:	b3 94       	inc	r11
    72c4:	04 c0       	rjmp	.+8      	; 0x72ce <vfprintf+0x300>
    72c6:	8a 2d       	mov	r24, r10
    72c8:	86 78       	andi	r24, 0x86	; 134
    72ca:	09 f0       	breq	.+2      	; 0x72ce <vfprintf+0x300>
    72cc:	b3 94       	inc	r11
    72ce:	a3 fc       	sbrc	r10, 3
    72d0:	11 c0       	rjmp	.+34     	; 0x72f4 <vfprintf+0x326>
    72d2:	a0 fe       	sbrs	r10, 0
    72d4:	06 c0       	rjmp	.+12     	; 0x72e2 <vfprintf+0x314>
    72d6:	b2 14       	cp	r11, r2
    72d8:	88 f4       	brcc	.+34     	; 0x72fc <vfprintf+0x32e>
    72da:	28 0c       	add	r2, r8
    72dc:	92 2c       	mov	r9, r2
    72de:	9b 18       	sub	r9, r11
    72e0:	0e c0       	rjmp	.+28     	; 0x72fe <vfprintf+0x330>
    72e2:	b2 14       	cp	r11, r2
    72e4:	60 f4       	brcc	.+24     	; 0x72fe <vfprintf+0x330>
    72e6:	b6 01       	movw	r22, r12
    72e8:	80 e2       	ldi	r24, 0x20	; 32
    72ea:	90 e0       	ldi	r25, 0x00	; 0
    72ec:	0e 94 de 39 	call	0x73bc	; 0x73bc <fputc>
    72f0:	b3 94       	inc	r11
    72f2:	f7 cf       	rjmp	.-18     	; 0x72e2 <vfprintf+0x314>
    72f4:	b2 14       	cp	r11, r2
    72f6:	18 f4       	brcc	.+6      	; 0x72fe <vfprintf+0x330>
    72f8:	2b 18       	sub	r2, r11
    72fa:	02 c0       	rjmp	.+4      	; 0x7300 <vfprintf+0x332>
    72fc:	98 2c       	mov	r9, r8
    72fe:	21 2c       	mov	r2, r1
    7300:	a4 fe       	sbrs	r10, 4
    7302:	10 c0       	rjmp	.+32     	; 0x7324 <vfprintf+0x356>
    7304:	b6 01       	movw	r22, r12
    7306:	80 e3       	ldi	r24, 0x30	; 48
    7308:	90 e0       	ldi	r25, 0x00	; 0
    730a:	0e 94 de 39 	call	0x73bc	; 0x73bc <fputc>
    730e:	a2 fe       	sbrs	r10, 2
    7310:	17 c0       	rjmp	.+46     	; 0x7340 <vfprintf+0x372>
    7312:	a1 fc       	sbrc	r10, 1
    7314:	03 c0       	rjmp	.+6      	; 0x731c <vfprintf+0x34e>
    7316:	88 e7       	ldi	r24, 0x78	; 120
    7318:	90 e0       	ldi	r25, 0x00	; 0
    731a:	02 c0       	rjmp	.+4      	; 0x7320 <vfprintf+0x352>
    731c:	88 e5       	ldi	r24, 0x58	; 88
    731e:	90 e0       	ldi	r25, 0x00	; 0
    7320:	b6 01       	movw	r22, r12
    7322:	0c c0       	rjmp	.+24     	; 0x733c <vfprintf+0x36e>
    7324:	8a 2d       	mov	r24, r10
    7326:	86 78       	andi	r24, 0x86	; 134
    7328:	59 f0       	breq	.+22     	; 0x7340 <vfprintf+0x372>
    732a:	a1 fe       	sbrs	r10, 1
    732c:	02 c0       	rjmp	.+4      	; 0x7332 <vfprintf+0x364>
    732e:	8b e2       	ldi	r24, 0x2B	; 43
    7330:	01 c0       	rjmp	.+2      	; 0x7334 <vfprintf+0x366>
    7332:	80 e2       	ldi	r24, 0x20	; 32
    7334:	a7 fc       	sbrc	r10, 7
    7336:	8d e2       	ldi	r24, 0x2D	; 45
    7338:	b6 01       	movw	r22, r12
    733a:	90 e0       	ldi	r25, 0x00	; 0
    733c:	0e 94 de 39 	call	0x73bc	; 0x73bc <fputc>
    7340:	89 14       	cp	r8, r9
    7342:	38 f4       	brcc	.+14     	; 0x7352 <vfprintf+0x384>
    7344:	b6 01       	movw	r22, r12
    7346:	80 e3       	ldi	r24, 0x30	; 48
    7348:	90 e0       	ldi	r25, 0x00	; 0
    734a:	0e 94 de 39 	call	0x73bc	; 0x73bc <fputc>
    734e:	9a 94       	dec	r9
    7350:	f7 cf       	rjmp	.-18     	; 0x7340 <vfprintf+0x372>
    7352:	8a 94       	dec	r8
    7354:	f3 01       	movw	r30, r6
    7356:	e8 0d       	add	r30, r8
    7358:	f1 1d       	adc	r31, r1
    735a:	80 81       	ld	r24, Z
    735c:	b6 01       	movw	r22, r12
    735e:	90 e0       	ldi	r25, 0x00	; 0
    7360:	0e 94 de 39 	call	0x73bc	; 0x73bc <fputc>
    7364:	81 10       	cpse	r8, r1
    7366:	f5 cf       	rjmp	.-22     	; 0x7352 <vfprintf+0x384>
    7368:	22 20       	and	r2, r2
    736a:	09 f4       	brne	.+2      	; 0x736e <vfprintf+0x3a0>
    736c:	42 ce       	rjmp	.-892    	; 0x6ff2 <vfprintf+0x24>
    736e:	b6 01       	movw	r22, r12
    7370:	80 e2       	ldi	r24, 0x20	; 32
    7372:	90 e0       	ldi	r25, 0x00	; 0
    7374:	0e 94 de 39 	call	0x73bc	; 0x73bc <fputc>
    7378:	2a 94       	dec	r2
    737a:	f6 cf       	rjmp	.-20     	; 0x7368 <vfprintf+0x39a>
    737c:	f6 01       	movw	r30, r12
    737e:	86 81       	ldd	r24, Z+6	; 0x06
    7380:	97 81       	ldd	r25, Z+7	; 0x07
    7382:	02 c0       	rjmp	.+4      	; 0x7388 <vfprintf+0x3ba>
    7384:	8f ef       	ldi	r24, 0xFF	; 255
    7386:	9f ef       	ldi	r25, 0xFF	; 255
    7388:	2b 96       	adiw	r28, 0x0b	; 11
    738a:	e2 e1       	ldi	r30, 0x12	; 18
    738c:	0c 94 91 3a 	jmp	0x7522	; 0x7522 <__epilogue_restores__>

00007390 <strnlen_P>:
    7390:	fc 01       	movw	r30, r24
    7392:	05 90       	lpm	r0, Z+
    7394:	61 50       	subi	r22, 0x01	; 1
    7396:	70 40       	sbci	r23, 0x00	; 0
    7398:	01 10       	cpse	r0, r1
    739a:	d8 f7       	brcc	.-10     	; 0x7392 <strnlen_P+0x2>
    739c:	80 95       	com	r24
    739e:	90 95       	com	r25
    73a0:	8e 0f       	add	r24, r30
    73a2:	9f 1f       	adc	r25, r31
    73a4:	08 95       	ret

000073a6 <strnlen>:
    73a6:	fc 01       	movw	r30, r24
    73a8:	61 50       	subi	r22, 0x01	; 1
    73aa:	70 40       	sbci	r23, 0x00	; 0
    73ac:	01 90       	ld	r0, Z+
    73ae:	01 10       	cpse	r0, r1
    73b0:	d8 f7       	brcc	.-10     	; 0x73a8 <strnlen+0x2>
    73b2:	80 95       	com	r24
    73b4:	90 95       	com	r25
    73b6:	8e 0f       	add	r24, r30
    73b8:	9f 1f       	adc	r25, r31
    73ba:	08 95       	ret

000073bc <fputc>:
    73bc:	0f 93       	push	r16
    73be:	1f 93       	push	r17
    73c0:	cf 93       	push	r28
    73c2:	df 93       	push	r29
    73c4:	fb 01       	movw	r30, r22
    73c6:	23 81       	ldd	r18, Z+3	; 0x03
    73c8:	21 fd       	sbrc	r18, 1
    73ca:	03 c0       	rjmp	.+6      	; 0x73d2 <fputc+0x16>
    73cc:	8f ef       	ldi	r24, 0xFF	; 255
    73ce:	9f ef       	ldi	r25, 0xFF	; 255
    73d0:	2c c0       	rjmp	.+88     	; 0x742a <fputc+0x6e>
    73d2:	22 ff       	sbrs	r18, 2
    73d4:	16 c0       	rjmp	.+44     	; 0x7402 <fputc+0x46>
    73d6:	46 81       	ldd	r20, Z+6	; 0x06
    73d8:	57 81       	ldd	r21, Z+7	; 0x07
    73da:	24 81       	ldd	r18, Z+4	; 0x04
    73dc:	35 81       	ldd	r19, Z+5	; 0x05
    73de:	42 17       	cp	r20, r18
    73e0:	53 07       	cpc	r21, r19
    73e2:	44 f4       	brge	.+16     	; 0x73f4 <fputc+0x38>
    73e4:	a0 81       	ld	r26, Z
    73e6:	b1 81       	ldd	r27, Z+1	; 0x01
    73e8:	9d 01       	movw	r18, r26
    73ea:	2f 5f       	subi	r18, 0xFF	; 255
    73ec:	3f 4f       	sbci	r19, 0xFF	; 255
    73ee:	20 83       	st	Z, r18
    73f0:	31 83       	std	Z+1, r19	; 0x01
    73f2:	8c 93       	st	X, r24
    73f4:	26 81       	ldd	r18, Z+6	; 0x06
    73f6:	37 81       	ldd	r19, Z+7	; 0x07
    73f8:	2f 5f       	subi	r18, 0xFF	; 255
    73fa:	3f 4f       	sbci	r19, 0xFF	; 255
    73fc:	26 83       	std	Z+6, r18	; 0x06
    73fe:	37 83       	std	Z+7, r19	; 0x07
    7400:	14 c0       	rjmp	.+40     	; 0x742a <fputc+0x6e>
    7402:	8b 01       	movw	r16, r22
    7404:	ec 01       	movw	r28, r24
    7406:	fb 01       	movw	r30, r22
    7408:	00 84       	ldd	r0, Z+8	; 0x08
    740a:	f1 85       	ldd	r31, Z+9	; 0x09
    740c:	e0 2d       	mov	r30, r0
    740e:	09 95       	icall
    7410:	89 2b       	or	r24, r25
    7412:	e1 f6       	brne	.-72     	; 0x73cc <fputc+0x10>
    7414:	d8 01       	movw	r26, r16
    7416:	16 96       	adiw	r26, 0x06	; 6
    7418:	8d 91       	ld	r24, X+
    741a:	9c 91       	ld	r25, X
    741c:	17 97       	sbiw	r26, 0x07	; 7
    741e:	01 96       	adiw	r24, 0x01	; 1
    7420:	16 96       	adiw	r26, 0x06	; 6
    7422:	8d 93       	st	X+, r24
    7424:	9c 93       	st	X, r25
    7426:	17 97       	sbiw	r26, 0x07	; 7
    7428:	ce 01       	movw	r24, r28
    742a:	df 91       	pop	r29
    742c:	cf 91       	pop	r28
    742e:	1f 91       	pop	r17
    7430:	0f 91       	pop	r16
    7432:	08 95       	ret

00007434 <__ultoa_invert>:
    7434:	fa 01       	movw	r30, r20
    7436:	aa 27       	eor	r26, r26
    7438:	28 30       	cpi	r18, 0x08	; 8
    743a:	51 f1       	breq	.+84     	; 0x7490 <__ultoa_invert+0x5c>
    743c:	20 31       	cpi	r18, 0x10	; 16
    743e:	81 f1       	breq	.+96     	; 0x74a0 <__ultoa_invert+0x6c>
    7440:	e8 94       	clt
    7442:	6f 93       	push	r22
    7444:	6e 7f       	andi	r22, 0xFE	; 254
    7446:	6e 5f       	subi	r22, 0xFE	; 254
    7448:	7f 4f       	sbci	r23, 0xFF	; 255
    744a:	8f 4f       	sbci	r24, 0xFF	; 255
    744c:	9f 4f       	sbci	r25, 0xFF	; 255
    744e:	af 4f       	sbci	r26, 0xFF	; 255
    7450:	b1 e0       	ldi	r27, 0x01	; 1
    7452:	3e d0       	rcall	.+124    	; 0x74d0 <__ultoa_invert+0x9c>
    7454:	b4 e0       	ldi	r27, 0x04	; 4
    7456:	3c d0       	rcall	.+120    	; 0x74d0 <__ultoa_invert+0x9c>
    7458:	67 0f       	add	r22, r23
    745a:	78 1f       	adc	r23, r24
    745c:	89 1f       	adc	r24, r25
    745e:	9a 1f       	adc	r25, r26
    7460:	a1 1d       	adc	r26, r1
    7462:	68 0f       	add	r22, r24
    7464:	79 1f       	adc	r23, r25
    7466:	8a 1f       	adc	r24, r26
    7468:	91 1d       	adc	r25, r1
    746a:	a1 1d       	adc	r26, r1
    746c:	6a 0f       	add	r22, r26
    746e:	71 1d       	adc	r23, r1
    7470:	81 1d       	adc	r24, r1
    7472:	91 1d       	adc	r25, r1
    7474:	a1 1d       	adc	r26, r1
    7476:	20 d0       	rcall	.+64     	; 0x74b8 <__ultoa_invert+0x84>
    7478:	09 f4       	brne	.+2      	; 0x747c <__ultoa_invert+0x48>
    747a:	68 94       	set
    747c:	3f 91       	pop	r19
    747e:	2a e0       	ldi	r18, 0x0A	; 10
    7480:	26 9f       	mul	r18, r22
    7482:	11 24       	eor	r1, r1
    7484:	30 19       	sub	r19, r0
    7486:	30 5d       	subi	r19, 0xD0	; 208
    7488:	31 93       	st	Z+, r19
    748a:	de f6       	brtc	.-74     	; 0x7442 <__ultoa_invert+0xe>
    748c:	cf 01       	movw	r24, r30
    748e:	08 95       	ret
    7490:	46 2f       	mov	r20, r22
    7492:	47 70       	andi	r20, 0x07	; 7
    7494:	40 5d       	subi	r20, 0xD0	; 208
    7496:	41 93       	st	Z+, r20
    7498:	b3 e0       	ldi	r27, 0x03	; 3
    749a:	0f d0       	rcall	.+30     	; 0x74ba <__ultoa_invert+0x86>
    749c:	c9 f7       	brne	.-14     	; 0x7490 <__ultoa_invert+0x5c>
    749e:	f6 cf       	rjmp	.-20     	; 0x748c <__ultoa_invert+0x58>
    74a0:	46 2f       	mov	r20, r22
    74a2:	4f 70       	andi	r20, 0x0F	; 15
    74a4:	40 5d       	subi	r20, 0xD0	; 208
    74a6:	4a 33       	cpi	r20, 0x3A	; 58
    74a8:	18 f0       	brcs	.+6      	; 0x74b0 <__ultoa_invert+0x7c>
    74aa:	49 5d       	subi	r20, 0xD9	; 217
    74ac:	31 fd       	sbrc	r19, 1
    74ae:	40 52       	subi	r20, 0x20	; 32
    74b0:	41 93       	st	Z+, r20
    74b2:	02 d0       	rcall	.+4      	; 0x74b8 <__ultoa_invert+0x84>
    74b4:	a9 f7       	brne	.-22     	; 0x74a0 <__ultoa_invert+0x6c>
    74b6:	ea cf       	rjmp	.-44     	; 0x748c <__ultoa_invert+0x58>
    74b8:	b4 e0       	ldi	r27, 0x04	; 4
    74ba:	a6 95       	lsr	r26
    74bc:	97 95       	ror	r25
    74be:	87 95       	ror	r24
    74c0:	77 95       	ror	r23
    74c2:	67 95       	ror	r22
    74c4:	ba 95       	dec	r27
    74c6:	c9 f7       	brne	.-14     	; 0x74ba <__ultoa_invert+0x86>
    74c8:	00 97       	sbiw	r24, 0x00	; 0
    74ca:	61 05       	cpc	r22, r1
    74cc:	71 05       	cpc	r23, r1
    74ce:	08 95       	ret
    74d0:	9b 01       	movw	r18, r22
    74d2:	ac 01       	movw	r20, r24
    74d4:	0a 2e       	mov	r0, r26
    74d6:	06 94       	lsr	r0
    74d8:	57 95       	ror	r21
    74da:	47 95       	ror	r20
    74dc:	37 95       	ror	r19
    74de:	27 95       	ror	r18
    74e0:	ba 95       	dec	r27
    74e2:	c9 f7       	brne	.-14     	; 0x74d6 <__ultoa_invert+0xa2>
    74e4:	62 0f       	add	r22, r18
    74e6:	73 1f       	adc	r23, r19
    74e8:	84 1f       	adc	r24, r20
    74ea:	95 1f       	adc	r25, r21
    74ec:	a0 1d       	adc	r26, r0
    74ee:	08 95       	ret

000074f0 <__prologue_saves__>:
    74f0:	2f 92       	push	r2
    74f2:	3f 92       	push	r3
    74f4:	4f 92       	push	r4
    74f6:	5f 92       	push	r5
    74f8:	6f 92       	push	r6
    74fa:	7f 92       	push	r7
    74fc:	8f 92       	push	r8
    74fe:	9f 92       	push	r9
    7500:	af 92       	push	r10
    7502:	bf 92       	push	r11
    7504:	cf 92       	push	r12
    7506:	df 92       	push	r13
    7508:	ef 92       	push	r14
    750a:	ff 92       	push	r15
    750c:	0f 93       	push	r16
    750e:	1f 93       	push	r17
    7510:	cf 93       	push	r28
    7512:	df 93       	push	r29
    7514:	cd b7       	in	r28, 0x3d	; 61
    7516:	de b7       	in	r29, 0x3e	; 62
    7518:	ca 1b       	sub	r28, r26
    751a:	db 0b       	sbc	r29, r27
    751c:	cd bf       	out	0x3d, r28	; 61
    751e:	de bf       	out	0x3e, r29	; 62
    7520:	09 94       	ijmp

00007522 <__epilogue_restores__>:
    7522:	2a 88       	ldd	r2, Y+18	; 0x12
    7524:	39 88       	ldd	r3, Y+17	; 0x11
    7526:	48 88       	ldd	r4, Y+16	; 0x10
    7528:	5f 84       	ldd	r5, Y+15	; 0x0f
    752a:	6e 84       	ldd	r6, Y+14	; 0x0e
    752c:	7d 84       	ldd	r7, Y+13	; 0x0d
    752e:	8c 84       	ldd	r8, Y+12	; 0x0c
    7530:	9b 84       	ldd	r9, Y+11	; 0x0b
    7532:	aa 84       	ldd	r10, Y+10	; 0x0a
    7534:	b9 84       	ldd	r11, Y+9	; 0x09
    7536:	c8 84       	ldd	r12, Y+8	; 0x08
    7538:	df 80       	ldd	r13, Y+7	; 0x07
    753a:	ee 80       	ldd	r14, Y+6	; 0x06
    753c:	fd 80       	ldd	r15, Y+5	; 0x05
    753e:	0c 81       	ldd	r16, Y+4	; 0x04
    7540:	1b 81       	ldd	r17, Y+3	; 0x03
    7542:	aa 81       	ldd	r26, Y+2	; 0x02
    7544:	b9 81       	ldd	r27, Y+1	; 0x01
    7546:	ce 0f       	add	r28, r30
    7548:	d1 1d       	adc	r29, r1
    754a:	cd bf       	out	0x3d, r28	; 61
    754c:	de bf       	out	0x3e, r29	; 62
    754e:	ed 01       	movw	r28, r26
    7550:	08 95       	ret

00007552 <_exit>:
    7552:	f8 94       	cli

00007554 <__stop_program>:
    7554:	ff cf       	rjmp	.-2      	; 0x7554 <__stop_program>
