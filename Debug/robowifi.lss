
robowifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00802800  00007ea3  00007f57  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007d08  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019b  0000bd08  00007d08  00007dbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000006eb  00802846  00802846  00007f9d  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00007f9d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007ffc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000c40  00000000  00000000  00008040  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000d485  00000000  00000000  00008c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000044a2  00000000  00000000  00016105  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007840  00000000  00000000  0001a5a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003368  00000000  00000000  00021de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00005a64  00000000  00000000  00025150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006ea0  00000000  00000000  0002abb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bf8  00000000  00000000  00031a54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__ctors_end>
       4:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       8:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       c:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__vector_3>
      10:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      14:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      18:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      1c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      20:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      24:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      28:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      2c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      30:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      34:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      38:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      3c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      40:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      44:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      48:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      4c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      50:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      54:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      58:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      5c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      60:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__vector_24>
      64:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      68:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      6c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      70:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      74:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      78:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      7c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      80:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      84:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      88:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      8c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      90:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      94:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      98:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      9c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      a0:	87 19       	sub	r24, r7
      a2:	80 19       	sub	r24, r0
      a4:	95 19       	sub	r25, r5
      a6:	8e 19       	sub	r24, r14
      a8:	aa 19       	sub	r26, r10
      aa:	9c 19       	sub	r25, r12
      ac:	a3 19       	sub	r26, r3
      ae:	4a 28       	or	r4, r10
      b0:	4a 28       	or	r4, r10
      b2:	94 28       	or	r9, r4
      b4:	20 28       	or	r2, r0
      b6:	35 28       	or	r3, r5
      b8:	3b 28       	or	r3, r11
      ba:	6b 28       	or	r6, r11
      bc:	6b 28       	or	r6, r11
      be:	c4 28       	or	r12, r4
      c0:	0a 28       	or	r0, r10
      c2:	f6 28       	or	r15, r6
      c4:	f6 28       	or	r15, r6
      c6:	f6 28       	or	r15, r6
      c8:	f6 28       	or	r15, r6
      ca:	41 28       	or	r4, r1

000000cc <__trampolines_end>:
      cc:	00 09       	sbc	r16, r0
      ce:	12 1b       	sub	r17, r18
      d0:	24 2d       	mov	r18, r4
      d2:	36 3f       	cpi	r19, 0xF6	; 246
      d4:	48 41       	sbci	r20, 0x18	; 24
      d6:	5a 53       	subi	r21, 0x3A	; 58
      d8:	6c 65       	ori	r22, 0x5C	; 92
      da:	7e 77       	andi	r23, 0x7E	; 126
      dc:	19 10       	cpse	r1, r9
      de:	0b 02       	muls	r16, r27
      e0:	3d 34       	cpi	r19, 0x4D	; 77
      e2:	2f 26       	eor	r2, r31
      e4:	51 58       	subi	r21, 0x81	; 129
      e6:	43 4a       	sbci	r20, 0xA3	; 163
      e8:	75 7c       	andi	r23, 0xC5	; 197
      ea:	67 6e       	ori	r22, 0xE7	; 231
      ec:	32 3b       	cpi	r19, 0xB2	; 178
      ee:	20 29       	or	r18, r0
      f0:	16 1f       	adc	r17, r22
      f2:	04 0d       	add	r16, r4
      f4:	7a 73       	andi	r23, 0x3A	; 58
      f6:	68 61       	ori	r22, 0x18	; 24
      f8:	5e 57       	subi	r21, 0x7E	; 126
      fa:	4c 45       	sbci	r20, 0x5C	; 92
      fc:	2b 22       	and	r2, r27
      fe:	39 30       	cpi	r19, 0x09	; 9
     100:	0f 06       	cpc	r0, r31
     102:	1d 14       	cp	r1, r13
     104:	63 6a       	ori	r22, 0xA3	; 163
     106:	71 78       	andi	r23, 0x81	; 129
     108:	47 4e       	sbci	r20, 0xE7	; 231
     10a:	55 5c       	subi	r21, 0xC5	; 197
     10c:	64 6d       	ori	r22, 0xD4	; 212
     10e:	76 7f       	andi	r23, 0xF6	; 246
     110:	40 49       	sbci	r20, 0x90	; 144
     112:	52 5b       	subi	r21, 0xB2	; 178
     114:	2c 25       	eor	r18, r12
     116:	3e 37       	cpi	r19, 0x7E	; 126
     118:	08 01       	movw	r0, r16
     11a:	1a 13       	cpse	r17, r26
     11c:	7d 74       	andi	r23, 0x4D	; 77
     11e:	6f 66       	ori	r22, 0x6F	; 111
     120:	59 50       	subi	r21, 0x09	; 9
     122:	4b 42       	sbci	r20, 0x2B	; 43
     124:	35 3c       	cpi	r19, 0xC5	; 197
     126:	27 2e       	mov	r2, r23
     128:	11 18       	sub	r1, r1
     12a:	03 0a       	sbc	r0, r19
     12c:	56 5f       	subi	r21, 0xF6	; 246
     12e:	44 4d       	sbci	r20, 0xD4	; 212
     130:	72 7b       	andi	r23, 0xB2	; 178
     132:	60 69       	ori	r22, 0x90	; 144
     134:	1e 17       	cp	r17, r30
     136:	0c 05       	cpc	r16, r12
     138:	3a 33       	cpi	r19, 0x3A	; 58
     13a:	28 21       	and	r18, r8
     13c:	4f 46       	sbci	r20, 0x6F	; 111
     13e:	5d 54       	subi	r21, 0x4D	; 77
     140:	6b 62       	ori	r22, 0x2B	; 43
     142:	79 70       	andi	r23, 0x09	; 9
     144:	07 0e       	add	r0, r23
     146:	15 1c       	adc	r1, r5
     148:	23 2a       	or	r2, r19
     14a:	31 38       	cpi	r19, 0x81	; 129
     14c:	41 48       	sbci	r20, 0x81	; 129
     14e:	53 5a       	subi	r21, 0xA3	; 163
     150:	65 6c       	ori	r22, 0xC5	; 197
     152:	77 7e       	andi	r23, 0xE7	; 231
     154:	09 00       	.word	0x0009	; ????
     156:	1b 12       	cpse	r1, r27
     158:	2d 24       	eor	r2, r13
     15a:	3f 36       	cpi	r19, 0x6F	; 111
     15c:	58 51       	subi	r21, 0x18	; 24
     15e:	4a 43       	sbci	r20, 0x3A	; 58
     160:	7c 75       	andi	r23, 0x5C	; 92
     162:	6e 67       	ori	r22, 0x7E	; 126
     164:	10 19       	sub	r17, r0
     166:	02 0b       	sbc	r16, r18
     168:	34 3d       	cpi	r19, 0xD4	; 212
     16a:	26 2f       	mov	r18, r22
     16c:	73 7a       	andi	r23, 0xA3	; 163
     16e:	61 68       	ori	r22, 0x81	; 129
     170:	57 5e       	subi	r21, 0xE7	; 231
     172:	45 4c       	sbci	r20, 0xC5	; 197
     174:	3b 32       	cpi	r19, 0x2B	; 43
     176:	29 20       	and	r2, r9
     178:	1f 16       	cp	r1, r31
     17a:	0d 04       	cpc	r0, r13
     17c:	6a 63       	ori	r22, 0x3A	; 58
     17e:	78 71       	andi	r23, 0x18	; 24
     180:	4e 47       	sbci	r20, 0x7E	; 126
     182:	5c 55       	subi	r21, 0x5C	; 92
     184:	22 2b       	or	r18, r18
     186:	30 39       	cpi	r19, 0x90	; 144
     188:	06 0f       	add	r16, r22
     18a:	14 1d       	adc	r17, r4
     18c:	25 2c       	mov	r2, r5
     18e:	37 3e       	cpi	r19, 0xE7	; 231
     190:	01 08       	sbc	r0, r1
     192:	13 1a       	sub	r1, r19
     194:	6d 64       	ori	r22, 0x4D	; 77
     196:	7f 76       	andi	r23, 0x6F	; 111
     198:	49 40       	sbci	r20, 0x09	; 9
     19a:	5b 52       	subi	r21, 0x2B	; 43
     19c:	3c 35       	cpi	r19, 0x5C	; 92
     19e:	2e 27       	eor	r18, r30
     1a0:	18 11       	cpse	r17, r8
     1a2:	0a 03       	fmul	r16, r18
     1a4:	74 7d       	andi	r23, 0xD4	; 212
     1a6:	66 6f       	ori	r22, 0xF6	; 246
     1a8:	50 59       	subi	r21, 0x90	; 144
     1aa:	42 4b       	sbci	r20, 0xB2	; 178
     1ac:	17 1e       	adc	r1, r23
     1ae:	05 0c       	add	r0, r5
     1b0:	33 3a       	cpi	r19, 0xA3	; 163
     1b2:	21 28       	or	r2, r1
     1b4:	5f 56       	subi	r21, 0x6F	; 111
     1b6:	4d 44       	sbci	r20, 0x4D	; 77
     1b8:	7b 72       	andi	r23, 0x2B	; 43
     1ba:	69 60       	ori	r22, 0x09	; 9
     1bc:	0e 07       	cpc	r16, r30
     1be:	1c 15       	cp	r17, r12
     1c0:	2a 23       	and	r18, r26
     1c2:	38 31       	cpi	r19, 0x18	; 24
     1c4:	46 4f       	sbci	r20, 0xF6	; 246
     1c6:	54 5d       	subi	r21, 0xD4	; 212
     1c8:	62 6b       	ori	r22, 0xB2	; 178
     1ca:	70 79       	andi	r23, 0x90	; 144

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	df e3       	ldi	r29, 0x3F	; 63
     1d6:	de bf       	out	0x3e, r29	; 62

000001d8 <__do_copy_data>:
     1d8:	18 e2       	ldi	r17, 0x28	; 40
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b8 e2       	ldi	r27, 0x28	; 40
     1de:	e3 ea       	ldi	r30, 0xA3	; 163
     1e0:	fe e7       	ldi	r31, 0x7E	; 126
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__do_copy_data+0x10>
     1e4:	05 90       	lpm	r0, Z+
     1e6:	0d 92       	st	X+, r0
     1e8:	a6 34       	cpi	r26, 0x46	; 70
     1ea:	b1 07       	cpc	r27, r17
     1ec:	d9 f7       	brne	.-10     	; 0x1e4 <__do_copy_data+0xc>

000001ee <__do_clear_bss>:
     1ee:	2f e2       	ldi	r18, 0x2F	; 47
     1f0:	a6 e4       	ldi	r26, 0x46	; 70
     1f2:	b8 e2       	ldi	r27, 0x28	; 40
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <.do_clear_bss_start>

000001f6 <.do_clear_bss_loop>:
     1f6:	1d 92       	st	X+, r1

000001f8 <.do_clear_bss_start>:
     1f8:	a1 33       	cpi	r26, 0x31	; 49
     1fa:	b2 07       	cpc	r27, r18
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <.do_clear_bss_loop>
     1fe:	0e 94 21 06 	call	0xc42	; 0xc42 <main>
     202:	0c 94 82 3e 	jmp	0x7d04	; 0x7d04 <_exit>

00000206 <__bad_interrupt>:
     206:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020a <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
	system_init();
     212:	0e 94 c5 0b 	call	0x178a	; 0x178a <system_init>
}
     216:	00 00       	nop
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <motor_dir_port_init>:


uint8_t reverse_flag_left=0;
uint8_t reverse_flag_right=0;

void motor_dir_port_init(){
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
	
	/* left wheel */
	PORTE.DIR |= PIN3_bm;
     226:	80 e8       	ldi	r24, 0x80	; 128
     228:	94 e0       	ldi	r25, 0x04	; 4
     22a:	20 e8       	ldi	r18, 0x80	; 128
     22c:	34 e0       	ldi	r19, 0x04	; 4
     22e:	f9 01       	movw	r30, r18
     230:	20 81       	ld	r18, Z
     232:	28 60       	ori	r18, 0x08	; 8
     234:	fc 01       	movw	r30, r24
     236:	20 83       	st	Z, r18
	PORTE.DIR |= PIN2_bm;
     238:	80 e8       	ldi	r24, 0x80	; 128
     23a:	94 e0       	ldi	r25, 0x04	; 4
     23c:	20 e8       	ldi	r18, 0x80	; 128
     23e:	34 e0       	ldi	r19, 0x04	; 4
     240:	f9 01       	movw	r30, r18
     242:	20 81       	ld	r18, Z
     244:	24 60       	ori	r18, 0x04	; 4
     246:	fc 01       	movw	r30, r24
     248:	20 83       	st	Z, r18
	
	PORTE.OUT &= ~PIN2_bm;
     24a:	80 e8       	ldi	r24, 0x80	; 128
     24c:	94 e0       	ldi	r25, 0x04	; 4
     24e:	20 e8       	ldi	r18, 0x80	; 128
     250:	34 e0       	ldi	r19, 0x04	; 4
     252:	f9 01       	movw	r30, r18
     254:	24 81       	ldd	r18, Z+4	; 0x04
     256:	2b 7f       	andi	r18, 0xFB	; 251
     258:	fc 01       	movw	r30, r24
     25a:	24 83       	std	Z+4, r18	; 0x04
	PORTE.OUT |= PIN3_bm;
     25c:	80 e8       	ldi	r24, 0x80	; 128
     25e:	94 e0       	ldi	r25, 0x04	; 4
     260:	20 e8       	ldi	r18, 0x80	; 128
     262:	34 e0       	ldi	r19, 0x04	; 4
     264:	f9 01       	movw	r30, r18
     266:	24 81       	ldd	r18, Z+4	; 0x04
     268:	28 60       	ori	r18, 0x08	; 8
     26a:	fc 01       	movw	r30, r24
     26c:	24 83       	std	Z+4, r18	; 0x04
	
	/* right wheel */
	PORTF.DIR |= PIN6_bm;
     26e:	80 ea       	ldi	r24, 0xA0	; 160
     270:	94 e0       	ldi	r25, 0x04	; 4
     272:	20 ea       	ldi	r18, 0xA0	; 160
     274:	34 e0       	ldi	r19, 0x04	; 4
     276:	f9 01       	movw	r30, r18
     278:	20 81       	ld	r18, Z
     27a:	20 64       	ori	r18, 0x40	; 64
     27c:	fc 01       	movw	r30, r24
     27e:	20 83       	st	Z, r18
	PORTF.DIR |= PIN4_bm;
     280:	80 ea       	ldi	r24, 0xA0	; 160
     282:	94 e0       	ldi	r25, 0x04	; 4
     284:	20 ea       	ldi	r18, 0xA0	; 160
     286:	34 e0       	ldi	r19, 0x04	; 4
     288:	f9 01       	movw	r30, r18
     28a:	20 81       	ld	r18, Z
     28c:	20 61       	ori	r18, 0x10	; 16
     28e:	fc 01       	movw	r30, r24
     290:	20 83       	st	Z, r18
	
	PORTF.OUT &= ~PIN6_bm;
     292:	80 ea       	ldi	r24, 0xA0	; 160
     294:	94 e0       	ldi	r25, 0x04	; 4
     296:	20 ea       	ldi	r18, 0xA0	; 160
     298:	34 e0       	ldi	r19, 0x04	; 4
     29a:	f9 01       	movw	r30, r18
     29c:	24 81       	ldd	r18, Z+4	; 0x04
     29e:	2f 7b       	andi	r18, 0xBF	; 191
     2a0:	fc 01       	movw	r30, r24
     2a2:	24 83       	std	Z+4, r18	; 0x04
	PORTF.OUT |= PIN4_bm;
     2a4:	80 ea       	ldi	r24, 0xA0	; 160
     2a6:	94 e0       	ldi	r25, 0x04	; 4
     2a8:	20 ea       	ldi	r18, 0xA0	; 160
     2aa:	34 e0       	ldi	r19, 0x04	; 4
     2ac:	f9 01       	movw	r30, r18
     2ae:	24 81       	ldd	r18, Z+4	; 0x04
     2b0:	20 61       	ori	r18, 0x10	; 16
     2b2:	fc 01       	movw	r30, r24
     2b4:	24 83       	std	Z+4, r18	; 0x04
}
     2b6:	00 00       	nop
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <LEFT_WHEEL_TCB3_PWM_init>:

void LEFT_WHEEL_TCB3_PWM_init (void)
{
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
	
	PORTB_DIR |= PIN5_bm;
     2c6:	80 e2       	ldi	r24, 0x20	; 32
     2c8:	94 e0       	ldi	r25, 0x04	; 4
     2ca:	20 e2       	ldi	r18, 0x20	; 32
     2cc:	34 e0       	ldi	r19, 0x04	; 4
     2ce:	f9 01       	movw	r30, r18
     2d0:	20 81       	ld	r18, Z
     2d2:	20 62       	ori	r18, 0x20	; 32
     2d4:	fc 01       	movw	r30, r24
     2d6:	20 83       	st	Z, r18
	PORTB_OUT |= PIN5_bm;
     2d8:	84 e2       	ldi	r24, 0x24	; 36
     2da:	94 e0       	ldi	r25, 0x04	; 4
     2dc:	24 e2       	ldi	r18, 0x24	; 36
     2de:	34 e0       	ldi	r19, 0x04	; 4
     2e0:	f9 01       	movw	r30, r18
     2e2:	20 81       	ld	r18, Z
     2e4:	20 62       	ori	r18, 0x20	; 32
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
	
	/* Load CCMP register with the period and duty cycle of the PWM */
	//TCB3.CCMP = TCB_CMP_EXAMPLE_VALUE;
	TCB3.CCMPL = WHEEL_PWM_PERIOD; // period of pwm
     2ea:	80 eb       	ldi	r24, 0xB0	; 176
     2ec:	9a e0       	ldi	r25, 0x0A	; 10
     2ee:	2f ef       	ldi	r18, 0xFF	; 255
     2f0:	fc 01       	movw	r30, r24
     2f2:	24 87       	std	Z+12, r18	; 0x0c
	TCB3.CCMPH = 0;
     2f4:	80 eb       	ldi	r24, 0xB0	; 176
     2f6:	9a e0       	ldi	r25, 0x0A	; 10
     2f8:	fc 01       	movw	r30, r24
     2fa:	15 86       	std	Z+13, r1	; 0x0d
	//TCB3.CCMPH = left_pwm_duty(); // duty cycle
	/* Enable TCB3 and Divide CLK_PER by 2 */
	TCB3.CTRLA |= TCB_ENABLE_bm;
     2fc:	80 eb       	ldi	r24, 0xB0	; 176
     2fe:	9a e0       	ldi	r25, 0x0A	; 10
     300:	20 eb       	ldi	r18, 0xB0	; 176
     302:	3a e0       	ldi	r19, 0x0A	; 10
     304:	f9 01       	movw	r30, r18
     306:	20 81       	ld	r18, Z
     308:	21 60       	ori	r18, 0x01	; 1
     30a:	fc 01       	movw	r30, r24
     30c:	20 83       	st	Z, r18
	

	/* Enable Pin Output and configure TCB in 8-bit PWM mode */
	TCB3.CTRLB |= TCB_CCMPEN_bm;
     30e:	80 eb       	ldi	r24, 0xB0	; 176
     310:	9a e0       	ldi	r25, 0x0A	; 10
     312:	20 eb       	ldi	r18, 0xB0	; 176
     314:	3a e0       	ldi	r19, 0x0A	; 10
     316:	f9 01       	movw	r30, r18
     318:	21 81       	ldd	r18, Z+1	; 0x01
     31a:	20 61       	ori	r18, 0x10	; 16
     31c:	fc 01       	movw	r30, r24
     31e:	21 83       	std	Z+1, r18	; 0x01
	TCB3.CTRLB |= TCB_CNTMODE_PWM8_gc;
     320:	80 eb       	ldi	r24, 0xB0	; 176
     322:	9a e0       	ldi	r25, 0x0A	; 10
     324:	20 eb       	ldi	r18, 0xB0	; 176
     326:	3a e0       	ldi	r19, 0x0A	; 10
     328:	f9 01       	movw	r30, r18
     32a:	21 81       	ldd	r18, Z+1	; 0x01
     32c:	27 60       	ori	r18, 0x07	; 7
     32e:	fc 01       	movw	r30, r24
     330:	21 83       	std	Z+1, r18	; 0x01
}
     332:	00 00       	nop
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <RIGHT_WHEEL_TCB1_PWM_init>:

void RIGHT_WHEEL_TCB1_PWM_init(void){
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIR |= PIN5_bm;
     342:	80 ea       	ldi	r24, 0xA0	; 160
     344:	94 e0       	ldi	r25, 0x04	; 4
     346:	20 ea       	ldi	r18, 0xA0	; 160
     348:	34 e0       	ldi	r19, 0x04	; 4
     34a:	f9 01       	movw	r30, r18
     34c:	20 81       	ld	r18, Z
     34e:	20 62       	ori	r18, 0x20	; 32
     350:	fc 01       	movw	r30, r24
     352:	20 83       	st	Z, r18
	PORTF.OUT |= PIN5_bm;
     354:	80 ea       	ldi	r24, 0xA0	; 160
     356:	94 e0       	ldi	r25, 0x04	; 4
     358:	20 ea       	ldi	r18, 0xA0	; 160
     35a:	34 e0       	ldi	r19, 0x04	; 4
     35c:	f9 01       	movw	r30, r18
     35e:	24 81       	ldd	r18, Z+4	; 0x04
     360:	20 62       	ori	r18, 0x20	; 32
     362:	fc 01       	movw	r30, r24
     364:	24 83       	std	Z+4, r18	; 0x04
	/* Load CCMP register with the period and duty cycle of the PWM */

	TCB1.CCMPL = WHEEL_PWM_PERIOD; // period of pwm
     366:	80 e9       	ldi	r24, 0x90	; 144
     368:	9a e0       	ldi	r25, 0x0A	; 10
     36a:	2f ef       	ldi	r18, 0xFF	; 255
     36c:	fc 01       	movw	r30, r24
     36e:	24 87       	std	Z+12, r18	; 0x0c
	TCB1.CCMPH = 0;
     370:	80 e9       	ldi	r24, 0x90	; 144
     372:	9a e0       	ldi	r25, 0x0A	; 10
     374:	fc 01       	movw	r30, r24
     376:	15 86       	std	Z+13, r1	; 0x0d
	//TCB1.CCMPH = right_pwm_duty(); // duty cycle
	/* Enable TCB3 and Divide CLK_PER by 2 */
	TCB1.CTRLA |= TCB_ENABLE_bm;
     378:	80 e9       	ldi	r24, 0x90	; 144
     37a:	9a e0       	ldi	r25, 0x0A	; 10
     37c:	20 e9       	ldi	r18, 0x90	; 144
     37e:	3a e0       	ldi	r19, 0x0A	; 10
     380:	f9 01       	movw	r30, r18
     382:	20 81       	ld	r18, Z
     384:	21 60       	ori	r18, 0x01	; 1
     386:	fc 01       	movw	r30, r24
     388:	20 83       	st	Z, r18
	
	/* Enable Pin Output and configure TCB in 8-bit PWM mode */
	TCB1.CTRLB |= TCB_CCMPEN_bm;
     38a:	80 e9       	ldi	r24, 0x90	; 144
     38c:	9a e0       	ldi	r25, 0x0A	; 10
     38e:	20 e9       	ldi	r18, 0x90	; 144
     390:	3a e0       	ldi	r19, 0x0A	; 10
     392:	f9 01       	movw	r30, r18
     394:	21 81       	ldd	r18, Z+1	; 0x01
     396:	20 61       	ori	r18, 0x10	; 16
     398:	fc 01       	movw	r30, r24
     39a:	21 83       	std	Z+1, r18	; 0x01
	TCB1.CTRLB |= TCB_CNTMODE_PWM8_gc;
     39c:	80 e9       	ldi	r24, 0x90	; 144
     39e:	9a e0       	ldi	r25, 0x0A	; 10
     3a0:	20 e9       	ldi	r18, 0x90	; 144
     3a2:	3a e0       	ldi	r19, 0x0A	; 10
     3a4:	f9 01       	movw	r30, r18
     3a6:	21 81       	ldd	r18, Z+1	; 0x01
     3a8:	27 60       	ori	r18, 0x07	; 7
     3aa:	fc 01       	movw	r30, r24
     3ac:	21 83       	std	Z+1, r18	; 0x01
	PORTMUX.TCBROUTEA |= PIN1_bm;
     3ae:	80 ee       	ldi	r24, 0xE0	; 224
     3b0:	95 e0       	ldi	r25, 0x05	; 5
     3b2:	20 ee       	ldi	r18, 0xE0	; 224
     3b4:	35 e0       	ldi	r19, 0x05	; 5
     3b6:	f9 01       	movw	r30, r18
     3b8:	25 81       	ldd	r18, Z+5	; 0x05
     3ba:	22 60       	ori	r18, 0x02	; 2
     3bc:	fc 01       	movw	r30, r24
     3be:	25 83       	std	Z+5, r18	; 0x05
	
}
     3c0:	00 00       	nop
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <motor_start_left_wheel>:

void motor_start_left_wheel(uint8_t left_pwm){
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	1f 92       	push	r1
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
     3d6:	89 83       	std	Y+1, r24	; 0x01
	
	//TCB3.CTRLA &= ~PIN0_bm;  // disable TCB3
	//TCB3.CCMPL = 0xff;
	// go forward
	//if(reverse_flag_left==1){
	PORTE.OUT &= ~PIN2_bm;
     3d8:	80 e8       	ldi	r24, 0x80	; 128
     3da:	94 e0       	ldi	r25, 0x04	; 4
     3dc:	20 e8       	ldi	r18, 0x80	; 128
     3de:	34 e0       	ldi	r19, 0x04	; 4
     3e0:	f9 01       	movw	r30, r18
     3e2:	24 81       	ldd	r18, Z+4	; 0x04
     3e4:	2b 7f       	andi	r18, 0xFB	; 251
     3e6:	fc 01       	movw	r30, r24
     3e8:	24 83       	std	Z+4, r18	; 0x04
	PORTE.OUT |= PIN3_bm;
     3ea:	80 e8       	ldi	r24, 0x80	; 128
     3ec:	94 e0       	ldi	r25, 0x04	; 4
     3ee:	20 e8       	ldi	r18, 0x80	; 128
     3f0:	34 e0       	ldi	r19, 0x04	; 4
     3f2:	f9 01       	movw	r30, r18
     3f4:	24 81       	ldd	r18, Z+4	; 0x04
     3f6:	28 60       	ori	r18, 0x08	; 8
     3f8:	fc 01       	movw	r30, r24
     3fa:	24 83       	std	Z+4, r18	; 0x04
	reverse_flag_left=1;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	80 93 46 28 	sts	0x2846, r24	; 0x802846 <__data_end>
	//}
	
	TCB3.CCMPH = left_pwm_duty(left_pwm);
     402:	00 eb       	ldi	r16, 0xB0	; 176
     404:	1a e0       	ldi	r17, 0x0A	; 10
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	0e 94 a7 02 	call	0x54e	; 0x54e <left_pwm_duty>
     40c:	f8 01       	movw	r30, r16
     40e:	85 87       	std	Z+13, r24	; 0x0d
	//TCB3.CCMPH = left_pwm_duty(); // change duty cycle
	//TCB3.CNT = 0x00;
	//TCB3.CTRLA |=  TCB_ENABLE_bm; // re-enable TCB3;
}
     410:	00 00       	nop
     412:	0f 90       	pop	r0
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	1f 91       	pop	r17
     41a:	0f 91       	pop	r16
     41c:	08 95       	ret

0000041e <motor_stop_left_wheel>:


void motor_stop_left_wheel(){
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
	TCB3.CCMPH = 0; // change duty cycle
     426:	80 eb       	ldi	r24, 0xB0	; 176
     428:	9a e0       	ldi	r25, 0x0A	; 10
     42a:	fc 01       	movw	r30, r24
     42c:	15 86       	std	Z+13, r1	; 0x0d
}
     42e:	00 00       	nop
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <motor_start_right_wheel>:


void motor_start_right_wheel(uint8_t right_pwm){
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	1f 92       	push	r1
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	89 83       	std	Y+1, r24	; 0x01
	
	//if(reverse_flag_right==1){
	PORTF.OUT &= ~PIN6_bm;
     446:	80 ea       	ldi	r24, 0xA0	; 160
     448:	94 e0       	ldi	r25, 0x04	; 4
     44a:	20 ea       	ldi	r18, 0xA0	; 160
     44c:	34 e0       	ldi	r19, 0x04	; 4
     44e:	f9 01       	movw	r30, r18
     450:	24 81       	ldd	r18, Z+4	; 0x04
     452:	2f 7b       	andi	r18, 0xBF	; 191
     454:	fc 01       	movw	r30, r24
     456:	24 83       	std	Z+4, r18	; 0x04
	PORTF.OUT |= PIN4_bm;
     458:	80 ea       	ldi	r24, 0xA0	; 160
     45a:	94 e0       	ldi	r25, 0x04	; 4
     45c:	20 ea       	ldi	r18, 0xA0	; 160
     45e:	34 e0       	ldi	r19, 0x04	; 4
     460:	f9 01       	movw	r30, r18
     462:	24 81       	ldd	r18, Z+4	; 0x04
     464:	20 61       	ori	r18, 0x10	; 16
     466:	fc 01       	movw	r30, r24
     468:	24 83       	std	Z+4, r18	; 0x04
	reverse_flag_right=0;
     46a:	10 92 47 28 	sts	0x2847, r1	; 0x802847 <reverse_flag_right>
	//}
	TCB1.CCMPH = right_pwm_duty(right_pwm);
     46e:	00 e9       	ldi	r16, 0x90	; 144
     470:	1a e0       	ldi	r17, 0x0A	; 10
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <right_pwm_duty>
     478:	f8 01       	movw	r30, r16
     47a:	85 87       	std	Z+13, r24	; 0x0d
}
     47c:	00 00       	nop
     47e:	0f 90       	pop	r0
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	1f 91       	pop	r17
     486:	0f 91       	pop	r16
     488:	08 95       	ret

0000048a <motor_stop_right_wheel>:


void motor_stop_right_wheel(){
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
	TCB1.CCMPH = 0; // change duty cycle
     492:	80 e9       	ldi	r24, 0x90	; 144
     494:	9a e0       	ldi	r25, 0x0A	; 10
     496:	fc 01       	movw	r30, r24
     498:	15 86       	std	Z+13, r1	; 0x0d
}
     49a:	00 00       	nop
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <motor_reverse_left_wheel>:

void motor_reverse_left_wheel(uint8_t left_pwm){
     4a2:	0f 93       	push	r16
     4a4:	1f 93       	push	r17
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	1f 92       	push	r1
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
     4b0:	89 83       	std	Y+1, r24	; 0x01
	
	PORTE.OUT &= ~PIN3_bm;
     4b2:	80 e8       	ldi	r24, 0x80	; 128
     4b4:	94 e0       	ldi	r25, 0x04	; 4
     4b6:	20 e8       	ldi	r18, 0x80	; 128
     4b8:	34 e0       	ldi	r19, 0x04	; 4
     4ba:	f9 01       	movw	r30, r18
     4bc:	24 81       	ldd	r18, Z+4	; 0x04
     4be:	27 7f       	andi	r18, 0xF7	; 247
     4c0:	fc 01       	movw	r30, r24
     4c2:	24 83       	std	Z+4, r18	; 0x04
	PORTE.OUT |= PIN2_bm;
     4c4:	80 e8       	ldi	r24, 0x80	; 128
     4c6:	94 e0       	ldi	r25, 0x04	; 4
     4c8:	20 e8       	ldi	r18, 0x80	; 128
     4ca:	34 e0       	ldi	r19, 0x04	; 4
     4cc:	f9 01       	movw	r30, r18
     4ce:	24 81       	ldd	r18, Z+4	; 0x04
     4d0:	24 60       	ori	r18, 0x04	; 4
     4d2:	fc 01       	movw	r30, r24
     4d4:	24 83       	std	Z+4, r18	; 0x04
	
	TCB3.CCMPH = left_pwm_duty(left_pwm);
     4d6:	00 eb       	ldi	r16, 0xB0	; 176
     4d8:	1a e0       	ldi	r17, 0x0A	; 10
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	0e 94 a7 02 	call	0x54e	; 0x54e <left_pwm_duty>
     4e0:	f8 01       	movw	r30, r16
     4e2:	85 87       	std	Z+13, r24	; 0x0d
	reverse_flag_left=1;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	80 93 46 28 	sts	0x2846, r24	; 0x802846 <__data_end>
}
     4ea:	00 00       	nop
     4ec:	0f 90       	pop	r0
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	08 95       	ret

000004f8 <motor_reverse_right_wheel>:

void motor_reverse_right_wheel(uint8_t right_pwm){
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	1f 92       	push	r1
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	89 83       	std	Y+1, r24	; 0x01
	
	PORTF.OUT &= ~PIN4_bm;
     508:	80 ea       	ldi	r24, 0xA0	; 160
     50a:	94 e0       	ldi	r25, 0x04	; 4
     50c:	20 ea       	ldi	r18, 0xA0	; 160
     50e:	34 e0       	ldi	r19, 0x04	; 4
     510:	f9 01       	movw	r30, r18
     512:	24 81       	ldd	r18, Z+4	; 0x04
     514:	2f 7e       	andi	r18, 0xEF	; 239
     516:	fc 01       	movw	r30, r24
     518:	24 83       	std	Z+4, r18	; 0x04
	PORTF.OUT |= PIN6_bm;
     51a:	80 ea       	ldi	r24, 0xA0	; 160
     51c:	94 e0       	ldi	r25, 0x04	; 4
     51e:	20 ea       	ldi	r18, 0xA0	; 160
     520:	34 e0       	ldi	r19, 0x04	; 4
     522:	f9 01       	movw	r30, r18
     524:	24 81       	ldd	r18, Z+4	; 0x04
     526:	20 64       	ori	r18, 0x40	; 64
     528:	fc 01       	movw	r30, r24
     52a:	24 83       	std	Z+4, r18	; 0x04
	
	TCB1.CCMPH = right_pwm_duty(right_pwm);
     52c:	00 e9       	ldi	r16, 0x90	; 144
     52e:	1a e0       	ldi	r17, 0x0A	; 10
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <right_pwm_duty>
     536:	f8 01       	movw	r30, r16
     538:	85 87       	std	Z+13, r24	; 0x0d
	reverse_flag_right=1;
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	80 93 47 28 	sts	0x2847, r24	; 0x802847 <reverse_flag_right>
}
     540:	00 00       	nop
     542:	0f 90       	pop	r0
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	08 95       	ret

0000054e <left_pwm_duty>:





uint8_t left_pwm_duty(uint8_t left_duty){
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	00 d0       	rcall	.+0      	; 0x554 <left_pwm_duty+0x6>
     554:	1f 92       	push	r1
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	8b 83       	std	Y+3, r24	; 0x03
	
	int duty=left_duty;
     55c:	8b 81       	ldd	r24, Y+3	; 0x03
     55e:	88 2f       	mov	r24, r24
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	89 83       	std	Y+1, r24	; 0x01
     564:	9a 83       	std	Y+2, r25	; 0x02
	duty=(float)duty/100  * WHEEL_PWM_PERIOD;
     566:	89 81       	ldd	r24, Y+1	; 0x01
     568:	9a 81       	ldd	r25, Y+2	; 0x02
     56a:	09 2e       	mov	r0, r25
     56c:	00 0c       	add	r0, r0
     56e:	aa 0b       	sbc	r26, r26
     570:	bb 0b       	sbc	r27, r27
     572:	bc 01       	movw	r22, r24
     574:	cd 01       	movw	r24, r26
     576:	0e 94 1a 3a 	call	0x7434	; 0x7434 <__floatsisf>
     57a:	dc 01       	movw	r26, r24
     57c:	cb 01       	movw	r24, r22
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	48 ec       	ldi	r20, 0xC8	; 200
     584:	52 e4       	ldi	r21, 0x42	; 66
     586:	bc 01       	movw	r22, r24
     588:	cd 01       	movw	r24, r26
     58a:	0e 94 70 39 	call	0x72e0	; 0x72e0 <__divsf3>
     58e:	dc 01       	movw	r26, r24
     590:	cb 01       	movw	r24, r22
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	4f e7       	ldi	r20, 0x7F	; 127
     598:	53 e4       	ldi	r21, 0x43	; 67
     59a:	bc 01       	movw	r22, r24
     59c:	cd 01       	movw	r24, r26
     59e:	0e 94 cf 3a 	call	0x759e	; 0x759e <__mulsf3>
     5a2:	dc 01       	movw	r26, r24
     5a4:	cb 01       	movw	r24, r22
     5a6:	bc 01       	movw	r22, r24
     5a8:	cd 01       	movw	r24, r26
     5aa:	0e 94 e2 39 	call	0x73c4	; 0x73c4 <__fixsfsi>
     5ae:	dc 01       	movw	r26, r24
     5b0:	cb 01       	movw	r24, r22
     5b2:	89 83       	std	Y+1, r24	; 0x01
     5b4:	9a 83       	std	Y+2, r25	; 0x02
	
	return duty;
     5b6:	89 81       	ldd	r24, Y+1	; 0x01
}
     5b8:	23 96       	adiw	r28, 0x03	; 3
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <right_pwm_duty>:

uint8_t right_pwm_duty(uint8_t right_duty){
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	00 d0       	rcall	.+0      	; 0x5ca <right_pwm_duty+0x6>
     5ca:	1f 92       	push	r1
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
     5d0:	8b 83       	std	Y+3, r24	; 0x03
	
	int duty=right_duty;
     5d2:	8b 81       	ldd	r24, Y+3	; 0x03
     5d4:	88 2f       	mov	r24, r24
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	89 83       	std	Y+1, r24	; 0x01
     5da:	9a 83       	std	Y+2, r25	; 0x02
	duty=(float)duty/100  * WHEEL_PWM_PERIOD;
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	9a 81       	ldd	r25, Y+2	; 0x02
     5e0:	09 2e       	mov	r0, r25
     5e2:	00 0c       	add	r0, r0
     5e4:	aa 0b       	sbc	r26, r26
     5e6:	bb 0b       	sbc	r27, r27
     5e8:	bc 01       	movw	r22, r24
     5ea:	cd 01       	movw	r24, r26
     5ec:	0e 94 1a 3a 	call	0x7434	; 0x7434 <__floatsisf>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	48 ec       	ldi	r20, 0xC8	; 200
     5fa:	52 e4       	ldi	r21, 0x42	; 66
     5fc:	bc 01       	movw	r22, r24
     5fe:	cd 01       	movw	r24, r26
     600:	0e 94 70 39 	call	0x72e0	; 0x72e0 <__divsf3>
     604:	dc 01       	movw	r26, r24
     606:	cb 01       	movw	r24, r22
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	4f e7       	ldi	r20, 0x7F	; 127
     60e:	53 e4       	ldi	r21, 0x43	; 67
     610:	bc 01       	movw	r22, r24
     612:	cd 01       	movw	r24, r26
     614:	0e 94 cf 3a 	call	0x759e	; 0x759e <__mulsf3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	bc 01       	movw	r22, r24
     61e:	cd 01       	movw	r24, r26
     620:	0e 94 e2 39 	call	0x73c4	; 0x73c4 <__fixsfsi>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	9a 83       	std	Y+2, r25	; 0x02
	
	return duty;
     62c:	89 81       	ldd	r24, Y+1	; 0x01
     62e:	23 96       	adiw	r28, 0x03	; 3
     630:	cd bf       	out	0x3d, r28	; 61
     632:	de bf       	out	0x3e, r29	; 62
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <wifi_init>:

/*
 * \brief Initialize Wifi library
 */
void wifi_init(tstrWifiInitParam *params)
{
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	61 97       	sbiw	r28, 0x11	; 17
     644:	cd bf       	out	0x3d, r28	; 61
     646:	de bf       	out	0x3e, r29	; 62
     648:	88 8b       	std	Y+16, r24	; 0x10
     64a:	99 8b       	std	Y+17, r25	; 0x11
	tstrWifiInitParam param;
	int8_t            ret;

//	set_winc_spi_descriptor(&WINC_SPI);
	/* Initialize the BSP. */
	nm_bsp_init();
     64c:	0e 94 b5 10 	call	0x216a	; 0x216a <nm_bsp_init>
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
     650:	ce 01       	movw	r24, r28
     652:	02 96       	adiw	r24, 0x02	; 2
     654:	4e e0       	ldi	r20, 0x0E	; 14
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	0e 94 6a 3b 	call	0x76d4	; 0x76d4 <memset>
	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = params->pfAppWifiCb;
     660:	88 89       	ldd	r24, Y+16	; 0x10
     662:	99 89       	ldd	r25, Y+17	; 0x11
     664:	fc 01       	movw	r30, r24
     666:	80 81       	ld	r24, Z
     668:	91 81       	ldd	r25, Z+1	; 0x01
     66a:	8a 83       	std	Y+2, r24	; 0x02
     66c:	9b 83       	std	Y+3, r25	; 0x03
	ret               = m2m_wifi_init(&param);
     66e:	ce 01       	movw	r24, r28
     670:	02 96       	adiw	r24, 0x02	; 2
     672:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <m2m_wifi_init>
     676:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	88 23       	and	r24, r24
     67c:	09 f0       	breq	.+2      	; 0x680 <wifi_init+0x46>
		while (1) {
		}
     67e:	ff cf       	rjmp	.-2      	; 0x67e <wifi_init+0x44>





}
     680:	00 00       	nop
     682:	61 96       	adiw	r28, 0x11	; 17
     684:	cd bf       	out	0x3d, r28	; 61
     686:	de bf       	out	0x3e, r29	; 62
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <usart_putchar_printf>:
	
	result=MQTT_CreateConnectPacket(&adafruitConnectPacket);
	
	return result;
	
}
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	00 d0       	rcall	.+0      	; 0x694 <usart_putchar_printf+0x6>
     694:	1f 92       	push	r1
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	6a 83       	std	Y+2, r22	; 0x02
     69e:	7b 83       	std	Y+3, r23	; 0x03
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	88 2f       	mov	r24, r24
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <USART_1_write>
     6aa:	00 00       	nop
     6ac:	23 96       	adiw	r28, 0x03	; 3
     6ae:	cd bf       	out	0x3d, r28	; 61
     6b0:	de bf       	out	0x3e, r29	; 62
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <get_number>:
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	26 97       	sbiw	r28, 0x06	; 6
     6c2:	cd bf       	out	0x3d, r28	; 61
     6c4:	de bf       	out	0x3e, r29	; 62
     6c6:	8d 83       	std	Y+5, r24	; 0x05
     6c8:	9e 83       	std	Y+6, r25	; 0x06
     6ca:	8d 81       	ldd	r24, Y+5	; 0x05
     6cc:	9e 81       	ldd	r25, Y+6	; 0x06
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	fc 01       	movw	r30, r24
     6d2:	80 81       	ld	r24, Z
     6d4:	88 2f       	mov	r24, r24
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	89 83       	std	Y+1, r24	; 0x01
     6da:	9a 83       	std	Y+2, r25	; 0x02
     6dc:	8d 81       	ldd	r24, Y+5	; 0x05
     6de:	9e 81       	ldd	r25, Y+6	; 0x06
     6e0:	02 96       	adiw	r24, 0x02	; 2
     6e2:	fc 01       	movw	r30, r24
     6e4:	80 81       	ld	r24, Z
     6e6:	88 2f       	mov	r24, r24
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	8b 83       	std	Y+3, r24	; 0x03
     6ec:	9c 83       	std	Y+4, r25	; 0x04
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
     6f0:	88 0f       	add	r24, r24
     6f2:	98 2f       	mov	r25, r24
     6f4:	99 0f       	add	r25, r25
     6f6:	99 0f       	add	r25, r25
     6f8:	98 0f       	add	r25, r24
     6fa:	8b 81       	ldd	r24, Y+3	; 0x03
     6fc:	89 0f       	add	r24, r25
     6fe:	80 93 38 28 	sts	0x2838, r24	; 0x802838 <pwm>
     702:	00 00       	nop
     704:	26 96       	adiw	r28, 0x06	; 6
     706:	cd bf       	out	0x3d, r28	; 61
     708:	de bf       	out	0x3e, r29	; 62
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	08 95       	ret

00000710 <get_command>:
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	26 97       	sbiw	r28, 0x06	; 6
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	8b 83       	std	Y+3, r24	; 0x03
     720:	9c 83       	std	Y+4, r25	; 0x04
     722:	6d 83       	std	Y+5, r22	; 0x05
     724:	7e 83       	std	Y+6, r23	; 0x06
     726:	19 82       	std	Y+1, r1	; 0x01
     728:	1a 82       	std	Y+2, r1	; 0x02
     72a:	19 82       	std	Y+1, r1	; 0x01
     72c:	1a 82       	std	Y+2, r1	; 0x02
     72e:	0b c0       	rjmp	.+22     	; 0x746 <get_command+0x36>
     730:	89 81       	ldd	r24, Y+1	; 0x01
     732:	9a 81       	ldd	r25, Y+2	; 0x02
     734:	8c 57       	subi	r24, 0x7C	; 124
     736:	91 4d       	sbci	r25, 0xD1	; 209
     738:	fc 01       	movw	r30, r24
     73a:	10 82       	st	Z, r1
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	9a 81       	ldd	r25, Y+2	; 0x02
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	89 83       	std	Y+1, r24	; 0x01
     744:	9a 83       	std	Y+2, r25	; 0x02
     746:	89 81       	ldd	r24, Y+1	; 0x01
     748:	9a 81       	ldd	r25, Y+2	; 0x02
     74a:	0a 97       	sbiw	r24, 0x0a	; 10
     74c:	88 f3       	brcs	.-30     	; 0x730 <get_command+0x20>
     74e:	19 82       	std	Y+1, r1	; 0x01
     750:	1a 82       	std	Y+2, r1	; 0x02
     752:	18 c0       	rjmp	.+48     	; 0x784 <get_command+0x74>
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	9a 81       	ldd	r25, Y+2	; 0x02
     758:	2b 81       	ldd	r18, Y+3	; 0x03
     75a:	3c 81       	ldd	r19, Y+4	; 0x04
     75c:	82 0f       	add	r24, r18
     75e:	93 1f       	adc	r25, r19
     760:	2d 81       	ldd	r18, Y+5	; 0x05
     762:	3e 81       	ldd	r19, Y+6	; 0x06
     764:	f9 01       	movw	r30, r18
     766:	40 81       	ld	r20, Z
     768:	51 81       	ldd	r21, Z+1	; 0x01
     76a:	29 81       	ldd	r18, Y+1	; 0x01
     76c:	3a 81       	ldd	r19, Y+2	; 0x02
     76e:	24 0f       	add	r18, r20
     770:	35 1f       	adc	r19, r21
     772:	f9 01       	movw	r30, r18
     774:	20 81       	ld	r18, Z
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	9a 81       	ldd	r25, Y+2	; 0x02
     77e:	01 96       	adiw	r24, 0x01	; 1
     780:	89 83       	std	Y+1, r24	; 0x01
     782:	9a 83       	std	Y+2, r25	; 0x02
     784:	8d 81       	ldd	r24, Y+5	; 0x05
     786:	9e 81       	ldd	r25, Y+6	; 0x06
     788:	fc 01       	movw	r30, r24
     78a:	20 81       	ld	r18, Z
     78c:	31 81       	ldd	r19, Z+1	; 0x01
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	9a 81       	ldd	r25, Y+2	; 0x02
     792:	82 0f       	add	r24, r18
     794:	93 1f       	adc	r25, r19
     796:	fc 01       	movw	r30, r24
     798:	80 81       	ld	r24, Z
     79a:	88 37       	cpi	r24, 0x78	; 120
     79c:	21 f0       	breq	.+8      	; 0x7a6 <get_command+0x96>
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	9a 81       	ldd	r25, Y+2	; 0x02
     7a2:	0a 97       	sbiw	r24, 0x0a	; 10
     7a4:	bc f2       	brlt	.-82     	; 0x754 <get_command+0x44>
     7a6:	00 00       	nop
     7a8:	26 96       	adiw	r28, 0x06	; 6
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <socket_cb>:
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
     7c0:	2c 97       	sbiw	r28, 0x0c	; 12
     7c2:	cd bf       	out	0x3d, r28	; 61
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	89 87       	std	Y+9, r24	; 0x09
     7c8:	6a 87       	std	Y+10, r22	; 0x0a
     7ca:	4b 87       	std	Y+11, r20	; 0x0b
     7cc:	5c 87       	std	Y+12, r21	; 0x0c
     7ce:	8a 85       	ldd	r24, Y+10	; 0x0a
     7d0:	88 2f       	mov	r24, r24
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	84 30       	cpi	r24, 0x04	; 4
     7d6:	91 05       	cpc	r25, r1
     7d8:	09 f4       	brne	.+2      	; 0x7dc <socket_cb+0x28>
     7da:	5c c0       	rjmp	.+184    	; 0x894 <socket_cb+0xe0>
     7dc:	85 30       	cpi	r24, 0x05	; 5
     7de:	91 05       	cpc	r25, r1
     7e0:	34 f4       	brge	.+12     	; 0x7ee <socket_cb+0x3a>
     7e2:	81 30       	cpi	r24, 0x01	; 1
     7e4:	91 05       	cpc	r25, r1
     7e6:	59 f0       	breq	.+22     	; 0x7fe <socket_cb+0x4a>
     7e8:	02 97       	sbiw	r24, 0x02	; 2
     7ea:	69 f1       	breq	.+90     	; 0x846 <socket_cb+0x92>
     7ec:	a9 c1       	rjmp	.+850    	; 0xb40 <socket_cb+0x38c>
     7ee:	86 30       	cpi	r24, 0x06	; 6
     7f0:	91 05       	cpc	r25, r1
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <socket_cb+0x42>
     7f4:	8d c0       	rjmp	.+282    	; 0x910 <socket_cb+0x15c>
     7f6:	07 97       	sbiw	r24, 0x07	; 7
     7f8:	09 f4       	brne	.+2      	; 0x7fc <socket_cb+0x48>
     7fa:	7e c0       	rjmp	.+252    	; 0x8f8 <socket_cb+0x144>
     7fc:	a1 c1       	rjmp	.+834    	; 0xb40 <socket_cb+0x38c>
     7fe:	8b 85       	ldd	r24, Y+11	; 0x0b
     800:	9c 85       	ldd	r25, Y+12	; 0x0c
     802:	89 83       	std	Y+1, r24	; 0x01
     804:	9a 83       	std	Y+2, r25	; 0x02
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	9a 81       	ldd	r25, Y+2	; 0x02
     80a:	89 2b       	or	r24, r25
     80c:	81 f0       	breq	.+32     	; 0x82e <socket_cb+0x7a>
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	9a 81       	ldd	r25, Y+2	; 0x02
     812:	fc 01       	movw	r30, r24
     814:	80 81       	ld	r24, Z
     816:	88 23       	and	r24, r24
     818:	51 f4       	brne	.+20     	; 0x82e <socket_cb+0x7a>
     81a:	88 e0       	ldi	r24, 0x08	; 8
     81c:	9d eb       	ldi	r25, 0xBD	; 189
     81e:	0e 94 90 3b 	call	0x7720	; 0x7720 <puts>
     822:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 7d 35 	call	0x6afa	; 0x6afa <listen>
     82c:	89 c1       	rjmp	.+786    	; 0xb40 <socket_cb+0x38c>
     82e:	82 e2       	ldi	r24, 0x22	; 34
     830:	9d eb       	ldi	r25, 0xBD	; 189
     832:	0e 94 90 3b 	call	0x7720	; 0x7720 <puts>
     836:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     83a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <close>
     83e:	8f ef       	ldi	r24, 0xFF	; 255
     840:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <tcp_server_socket>
     844:	7d c1       	rjmp	.+762    	; 0xb40 <socket_cb+0x38c>
     846:	8b 85       	ldd	r24, Y+11	; 0x0b
     848:	9c 85       	ldd	r25, Y+12	; 0x0c
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	8b 81       	ldd	r24, Y+3	; 0x03
     850:	9c 81       	ldd	r25, Y+4	; 0x04
     852:	89 2b       	or	r24, r25
     854:	99 f0       	breq	.+38     	; 0x87c <socket_cb+0xc8>
     856:	8b 81       	ldd	r24, Y+3	; 0x03
     858:	9c 81       	ldd	r25, Y+4	; 0x04
     85a:	fc 01       	movw	r30, r24
     85c:	80 81       	ld	r24, Z
     85e:	88 23       	and	r24, r24
     860:	69 f4       	brne	.+26     	; 0x87c <socket_cb+0xc8>
     862:	8a e3       	ldi	r24, 0x3A	; 58
     864:	9d eb       	ldi	r25, 0xBD	; 189
     866:	0e 94 90 3b 	call	0x7720	; 0x7720 <puts>
     86a:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	0e 94 d8 35 	call	0x6bb0	; 0x6bb0 <accept>
     87a:	62 c1       	rjmp	.+708    	; 0xb40 <socket_cb+0x38c>
     87c:	86 e5       	ldi	r24, 0x56	; 86
     87e:	9d eb       	ldi	r25, 0xBD	; 189
     880:	0e 94 90 3b 	call	0x7720	; 0x7720 <puts>
     884:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     888:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <close>
     88c:	8f ef       	ldi	r24, 0xFF	; 255
     88e:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <tcp_server_socket>
     892:	56 c1       	rjmp	.+684    	; 0xb40 <socket_cb+0x38c>
     894:	8b 85       	ldd	r24, Y+11	; 0x0b
     896:	9c 85       	ldd	r25, Y+12	; 0x0c
     898:	8d 83       	std	Y+5, r24	; 0x05
     89a:	9e 83       	std	Y+6, r25	; 0x06
     89c:	8d 81       	ldd	r24, Y+5	; 0x05
     89e:	9e 81       	ldd	r25, Y+6	; 0x06
     8a0:	89 2b       	or	r24, r25
     8a2:	f1 f0       	breq	.+60     	; 0x8e0 <socket_cb+0x12c>
     8a4:	80 e7       	ldi	r24, 0x70	; 112
     8a6:	9d eb       	ldi	r25, 0xBD	; 189
     8a8:	0e 94 90 3b 	call	0x7720	; 0x7720 <puts>
     8ac:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     8b0:	40 e0       	ldi	r20, 0x00	; 0
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	0e 94 d8 35 	call	0x6bb0	; 0x6bb0 <accept>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	9e 81       	ldd	r25, Y+6	; 0x06
     8c0:	fc 01       	movw	r30, r24
     8c2:	80 81       	ld	r24, Z
     8c4:	80 93 0f 28 	sts	0x280F, r24	; 0x80280f <tcp_client_socket>
     8c8:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_client_socket>
     8cc:	00 e0       	ldi	r16, 0x00	; 0
     8ce:	10 e0       	ldi	r17, 0x00	; 0
     8d0:	98 01       	movw	r18, r16
     8d2:	44 eb       	ldi	r20, 0xB4	; 180
     8d4:	55 e0       	ldi	r21, 0x05	; 5
     8d6:	69 e4       	ldi	r22, 0x49	; 73
     8d8:	78 e2       	ldi	r23, 0x28	; 40
     8da:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <recv>
     8de:	30 c1       	rjmp	.+608    	; 0xb40 <socket_cb+0x38c>
     8e0:	8c e8       	ldi	r24, 0x8C	; 140
     8e2:	9d eb       	ldi	r25, 0xBD	; 189
     8e4:	0e 94 90 3b 	call	0x7720	; 0x7720 <puts>
     8e8:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     8ec:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <close>
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <tcp_server_socket>
     8f6:	24 c1       	rjmp	.+584    	; 0xb40 <socket_cb+0x38c>
     8f8:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_client_socket>
     8fc:	00 e0       	ldi	r16, 0x00	; 0
     8fe:	10 e0       	ldi	r17, 0x00	; 0
     900:	98 01       	movw	r18, r16
     902:	44 eb       	ldi	r20, 0xB4	; 180
     904:	55 e0       	ldi	r21, 0x05	; 5
     906:	69 e4       	ldi	r22, 0x49	; 73
     908:	78 e2       	ldi	r23, 0x28	; 40
     90a:	0e 94 b4 36 	call	0x6d68	; 0x6d68 <recv>
     90e:	18 c1       	rjmp	.+560    	; 0xb40 <socket_cb+0x38c>
     910:	8b 85       	ldd	r24, Y+11	; 0x0b
     912:	9c 85       	ldd	r25, Y+12	; 0x0c
     914:	8f 83       	std	Y+7, r24	; 0x07
     916:	98 87       	std	Y+8, r25	; 0x08
     918:	8f 81       	ldd	r24, Y+7	; 0x07
     91a:	98 85       	ldd	r25, Y+8	; 0x08
     91c:	89 2b       	or	r24, r25
     91e:	09 f4       	brne	.+2      	; 0x922 <socket_cb+0x16e>
     920:	03 c1       	rjmp	.+518    	; 0xb28 <socket_cb+0x374>
     922:	8f 81       	ldd	r24, Y+7	; 0x07
     924:	98 85       	ldd	r25, Y+8	; 0x08
     926:	fc 01       	movw	r30, r24
     928:	82 81       	ldd	r24, Z+2	; 0x02
     92a:	93 81       	ldd	r25, Z+3	; 0x03
     92c:	18 16       	cp	r1, r24
     92e:	19 06       	cpc	r1, r25
     930:	0c f0       	brlt	.+2      	; 0x934 <socket_cb+0x180>
     932:	fa c0       	rjmp	.+500    	; 0xb28 <socket_cb+0x374>
     934:	86 ea       	ldi	r24, 0xA6	; 166
     936:	9d eb       	ldi	r25, 0xBD	; 189
     938:	0e 94 90 3b 	call	0x7720	; 0x7720 <puts>
     93c:	8f 81       	ldd	r24, Y+7	; 0x07
     93e:	98 85       	ldd	r25, Y+8	; 0x08
     940:	bc 01       	movw	r22, r24
     942:	84 e8       	ldi	r24, 0x84	; 132
     944:	9e e2       	ldi	r25, 0x2E	; 46
     946:	0e 94 88 03 	call	0x710	; 0x710 <get_command>
     94a:	60 ec       	ldi	r22, 0xC0	; 192
     94c:	7d eb       	ldi	r23, 0xBD	; 189
     94e:	84 e8       	ldi	r24, 0x84	; 132
     950:	9e e2       	ldi	r25, 0x2E	; 46
     952:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <strcmp>
     956:	89 2b       	or	r24, r25
     958:	b9 f4       	brne	.+46     	; 0x988 <socket_cb+0x1d4>
     95a:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <pwm>
     95e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <motor_start_left_wheel>
     962:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <pwm>
     966:	0e 94 1b 02 	call	0x436	; 0x436 <motor_start_right_wheel>
     96a:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <pwm>
     96e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <motor_reverse_left_wheel>
     972:	87 ec       	ldi	r24, 0xC7	; 199
     974:	9d eb       	ldi	r25, 0xBD	; 189
     976:	89 2f       	mov	r24, r25
     978:	8f 93       	push	r24
     97a:	87 ec       	ldi	r24, 0xC7	; 199
     97c:	9d eb       	ldi	r25, 0xBD	; 189
     97e:	8f 93       	push	r24
     980:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <printf>
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	63 ed       	ldi	r22, 0xD3	; 211
     98a:	7d eb       	ldi	r23, 0xBD	; 189
     98c:	84 e8       	ldi	r24, 0x84	; 132
     98e:	9e e2       	ldi	r25, 0x2E	; 46
     990:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <strcmp>
     994:	89 2b       	or	r24, r25
     996:	41 f4       	brne	.+16     	; 0x9a8 <socket_cb+0x1f4>
     998:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <pwm>
     99c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <motor_start_left_wheel>
     9a0:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <pwm>
     9a4:	0e 94 1b 02 	call	0x436	; 0x436 <motor_start_right_wheel>
     9a8:	6b ed       	ldi	r22, 0xDB	; 219
     9aa:	7d eb       	ldi	r23, 0xBD	; 189
     9ac:	84 e8       	ldi	r24, 0x84	; 132
     9ae:	9e e2       	ldi	r25, 0x2E	; 46
     9b0:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <strcmp>
     9b4:	89 2b       	or	r24, r25
     9b6:	81 f4       	brne	.+32     	; 0x9d8 <socket_cb+0x224>
     9b8:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <pwm>
     9bc:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <motor_start_left_wheel>
     9c0:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <pwm>
     9c4:	0e 94 1b 02 	call	0x436	; 0x436 <motor_start_right_wheel>
     9c8:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <pwm>
     9cc:	0e 94 51 02 	call	0x4a2	; 0x4a2 <motor_reverse_left_wheel>
     9d0:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <pwm>
     9d4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <motor_reverse_right_wheel>
     9d8:	64 ee       	ldi	r22, 0xE4	; 228
     9da:	7d eb       	ldi	r23, 0xBD	; 189
     9dc:	84 e8       	ldi	r24, 0x84	; 132
     9de:	9e e2       	ldi	r25, 0x2E	; 46
     9e0:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <strcmp>
     9e4:	89 2b       	or	r24, r25
     9e6:	21 f4       	brne	.+8      	; 0x9f0 <socket_cb+0x23c>
     9e8:	0e 94 0f 02 	call	0x41e	; 0x41e <motor_stop_left_wheel>
     9ec:	0e 94 45 02 	call	0x48a	; 0x48a <motor_stop_right_wheel>
     9f0:	69 ee       	ldi	r22, 0xE9	; 233
     9f2:	7d eb       	ldi	r23, 0xBD	; 189
     9f4:	84 e8       	ldi	r24, 0x84	; 132
     9f6:	9e e2       	ldi	r25, 0x2E	; 46
     9f8:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <strcmp>
     9fc:	89 2b       	or	r24, r25
     9fe:	31 f4       	brne	.+12     	; 0xa0c <socket_cb+0x258>
     a00:	0e 94 0f 02 	call	0x41e	; 0x41e <motor_stop_left_wheel>
     a04:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <pwm>
     a08:	0e 94 1b 02 	call	0x436	; 0x436 <motor_start_right_wheel>
     a0c:	6e ee       	ldi	r22, 0xEE	; 238
     a0e:	7d eb       	ldi	r23, 0xBD	; 189
     a10:	84 e8       	ldi	r24, 0x84	; 132
     a12:	9e e2       	ldi	r25, 0x2E	; 46
     a14:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <strcmp>
     a18:	89 2b       	or	r24, r25
     a1a:	31 f4       	brne	.+12     	; 0xa28 <socket_cb+0x274>
     a1c:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <pwm>
     a20:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <motor_start_left_wheel>
     a24:	0e 94 45 02 	call	0x48a	; 0x48a <motor_stop_right_wheel>
     a28:	64 ef       	ldi	r22, 0xF4	; 244
     a2a:	7d eb       	ldi	r23, 0xBD	; 189
     a2c:	84 e8       	ldi	r24, 0x84	; 132
     a2e:	9e e2       	ldi	r25, 0x2E	; 46
     a30:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <strcmp>
     a34:	89 2b       	or	r24, r25
     a36:	61 f4       	brne	.+24     	; 0xa50 <socket_cb+0x29c>
     a38:	0e 94 0f 02 	call	0x41e	; 0x41e <motor_stop_left_wheel>
     a3c:	0e 94 45 02 	call	0x48a	; 0x48a <motor_stop_right_wheel>
     a40:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_client_socket>
     a44:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <close>
     a48:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     a4c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <close>
     a50:	80 91 84 2e 	lds	r24, 0x2E84	; 0x802e84 <order>
     a54:	83 36       	cpi	r24, 0x63	; 99
     a56:	09 f0       	breq	.+2      	; 0xa5a <socket_cb+0x2a6>
     a58:	48 c0       	rjmp	.+144    	; 0xaea <socket_cb+0x336>
     a5a:	84 e8       	ldi	r24, 0x84	; 132
     a5c:	9e e2       	ldi	r25, 0x2E	; 46
     a5e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <get_number>
     a62:	80 e9       	ldi	r24, 0x90	; 144
     a64:	9a e0       	ldi	r25, 0x0A	; 10
     a66:	fc 01       	movw	r30, r24
     a68:	85 85       	ldd	r24, Z+13	; 0x0d
     a6a:	88 23       	and	r24, r24
     a6c:	b1 f0       	breq	.+44     	; 0xa9a <socket_cb+0x2e6>
     a6e:	80 eb       	ldi	r24, 0xB0	; 176
     a70:	9a e0       	ldi	r25, 0x0A	; 10
     a72:	fc 01       	movw	r30, r24
     a74:	85 85       	ldd	r24, Z+13	; 0x0d
     a76:	88 23       	and	r24, r24
     a78:	81 f0       	breq	.+32     	; 0xa9a <socket_cb+0x2e6>
     a7a:	00 e9       	ldi	r16, 0x90	; 144
     a7c:	1a e0       	ldi	r17, 0x0A	; 10
     a7e:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <pwm>
     a82:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <right_pwm_duty>
     a86:	f8 01       	movw	r30, r16
     a88:	85 87       	std	Z+13, r24	; 0x0d
     a8a:	00 eb       	ldi	r16, 0xB0	; 176
     a8c:	1a e0       	ldi	r17, 0x0A	; 10
     a8e:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <pwm>
     a92:	0e 94 a7 02 	call	0x54e	; 0x54e <left_pwm_duty>
     a96:	f8 01       	movw	r30, r16
     a98:	85 87       	std	Z+13, r24	; 0x0d
     a9a:	80 e9       	ldi	r24, 0x90	; 144
     a9c:	9a e0       	ldi	r25, 0x0A	; 10
     a9e:	fc 01       	movw	r30, r24
     aa0:	85 85       	ldd	r24, Z+13	; 0x0d
     aa2:	88 23       	and	r24, r24
     aa4:	71 f0       	breq	.+28     	; 0xac2 <socket_cb+0x30e>
     aa6:	80 eb       	ldi	r24, 0xB0	; 176
     aa8:	9a e0       	ldi	r25, 0x0A	; 10
     aaa:	fc 01       	movw	r30, r24
     aac:	85 85       	ldd	r24, Z+13	; 0x0d
     aae:	88 23       	and	r24, r24
     ab0:	41 f4       	brne	.+16     	; 0xac2 <socket_cb+0x30e>
     ab2:	00 e9       	ldi	r16, 0x90	; 144
     ab4:	1a e0       	ldi	r17, 0x0A	; 10
     ab6:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <pwm>
     aba:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <right_pwm_duty>
     abe:	f8 01       	movw	r30, r16
     ac0:	85 87       	std	Z+13, r24	; 0x0d
     ac2:	80 eb       	ldi	r24, 0xB0	; 176
     ac4:	9a e0       	ldi	r25, 0x0A	; 10
     ac6:	fc 01       	movw	r30, r24
     ac8:	85 85       	ldd	r24, Z+13	; 0x0d
     aca:	88 23       	and	r24, r24
     acc:	71 f0       	breq	.+28     	; 0xaea <socket_cb+0x336>
     ace:	80 e9       	ldi	r24, 0x90	; 144
     ad0:	9a e0       	ldi	r25, 0x0A	; 10
     ad2:	fc 01       	movw	r30, r24
     ad4:	85 85       	ldd	r24, Z+13	; 0x0d
     ad6:	88 23       	and	r24, r24
     ad8:	41 f4       	brne	.+16     	; 0xaea <socket_cb+0x336>
     ada:	00 eb       	ldi	r16, 0xB0	; 176
     adc:	1a e0       	ldi	r17, 0x0A	; 10
     ade:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <pwm>
     ae2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <right_pwm_duty>
     ae6:	f8 01       	movw	r30, r16
     ae8:	85 87       	std	Z+13, r24	; 0x0d
     aea:	84 e8       	ldi	r24, 0x84	; 132
     aec:	9e e2       	ldi	r25, 0x2E	; 46
     aee:	89 2f       	mov	r24, r25
     af0:	8f 93       	push	r24
     af2:	84 e8       	ldi	r24, 0x84	; 132
     af4:	9e e2       	ldi	r25, 0x2E	; 46
     af6:	8f 93       	push	r24
     af8:	8a ef       	ldi	r24, 0xFA	; 250
     afa:	9d eb       	ldi	r25, 0xBD	; 189
     afc:	89 2f       	mov	r24, r25
     afe:	8f 93       	push	r24
     b00:	8a ef       	ldi	r24, 0xFA	; 250
     b02:	9d eb       	ldi	r25, 0xBD	; 189
     b04:	8f 93       	push	r24
     b06:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <printf>
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <tcp_client_socket>
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	48 e2       	ldi	r20, 0x28	; 40
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	60 e1       	ldi	r22, 0x10	; 16
     b20:	78 e2       	ldi	r23, 0x28	; 40
     b22:	0e 94 01 36 	call	0x6c02	; 0x6c02 <send>
     b26:	0b c0       	rjmp	.+22     	; 0xb3e <socket_cb+0x38a>
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	9e eb       	ldi	r25, 0xBE	; 190
     b2c:	0e 94 90 3b 	call	0x7720	; 0x7720 <puts>
     b30:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     b34:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <close>
     b38:	8f ef       	ldi	r24, 0xFF	; 255
     b3a:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <tcp_server_socket>
     b3e:	00 00       	nop
     b40:	00 00       	nop
     b42:	2c 96       	adiw	r28, 0x0c	; 12
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	08 95       	ret

00000b52 <wifi_cb>:
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	27 97       	sbiw	r28, 0x07	; 7
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	8d 83       	std	Y+5, r24	; 0x05
     b62:	6e 83       	std	Y+6, r22	; 0x06
     b64:	7f 83       	std	Y+7, r23	; 0x07
     b66:	8d 81       	ldd	r24, Y+5	; 0x05
     b68:	88 2f       	mov	r24, r24
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	8c 32       	cpi	r24, 0x2C	; 44
     b6e:	91 05       	cpc	r25, r1
     b70:	19 f0       	breq	.+6      	; 0xb78 <wifi_cb+0x26>
     b72:	c2 97       	sbiw	r24, 0x32	; 50
     b74:	e9 f0       	breq	.+58     	; 0xbb0 <wifi_cb+0x5e>
     b76:	5e c0       	rjmp	.+188    	; 0xc34 <wifi_cb+0xe2>
     b78:	8e 81       	ldd	r24, Y+6	; 0x06
     b7a:	9f 81       	ldd	r25, Y+7	; 0x07
     b7c:	89 83       	std	Y+1, r24	; 0x01
     b7e:	9a 83       	std	Y+2, r25	; 0x02
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	9a 81       	ldd	r25, Y+2	; 0x02
     b84:	fc 01       	movw	r30, r24
     b86:	80 81       	ld	r24, Z
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	21 f4       	brne	.+8      	; 0xb94 <wifi_cb+0x42>
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	80 93 48 28 	sts	0x2848, r24	; 0x802848 <wifi_connected>
     b92:	4f c0       	rjmp	.+158    	; 0xc32 <wifi_cb+0xe0>
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	fc 01       	movw	r30, r24
     b9a:	80 81       	ld	r24, Z
     b9c:	88 23       	and	r24, r24
     b9e:	09 f0       	breq	.+2      	; 0xba2 <wifi_cb+0x50>
     ba0:	48 c0       	rjmp	.+144    	; 0xc32 <wifi_cb+0xe0>
     ba2:	10 92 48 28 	sts	0x2848, r1	; 0x802848 <wifi_connected>
     ba6:	8a e1       	ldi	r24, 0x1A	; 26
     ba8:	9e eb       	ldi	r25, 0xBE	; 190
     baa:	0e 94 90 3b 	call	0x7720	; 0x7720 <puts>
     bae:	41 c0       	rjmp	.+130    	; 0xc32 <wifi_cb+0xe0>
     bb0:	8e 81       	ldd	r24, Y+6	; 0x06
     bb2:	9f 81       	ldd	r25, Y+7	; 0x07
     bb4:	8b 83       	std	Y+3, r24	; 0x03
     bb6:	9c 83       	std	Y+4, r25	; 0x04
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	80 93 48 28 	sts	0x2848, r24	; 0x802848 <wifi_connected>
     bbe:	80 e3       	ldi	r24, 0x30	; 48
     bc0:	9e eb       	ldi	r25, 0xBE	; 190
     bc2:	0e 94 90 3b 	call	0x7720	; 0x7720 <puts>
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	9c 81       	ldd	r25, Y+4	; 0x04
     bca:	03 96       	adiw	r24, 0x03	; 3
     bcc:	fc 01       	movw	r30, r24
     bce:	80 81       	ld	r24, Z
     bd0:	68 2f       	mov	r22, r24
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	9c 81       	ldd	r25, Y+4	; 0x04
     bd8:	02 96       	adiw	r24, 0x02	; 2
     bda:	fc 01       	movw	r30, r24
     bdc:	80 81       	ld	r24, Z
     bde:	48 2f       	mov	r20, r24
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	9c 81       	ldd	r25, Y+4	; 0x04
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	fc 01       	movw	r30, r24
     bea:	80 81       	ld	r24, Z
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	9c 81       	ldd	r25, Y+4	; 0x04
     bf4:	fc 01       	movw	r30, r24
     bf6:	80 81       	ld	r24, Z
     bf8:	88 2f       	mov	r24, r24
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	e7 2f       	mov	r30, r23
     bfe:	ef 93       	push	r30
     c00:	6f 93       	push	r22
     c02:	65 2f       	mov	r22, r21
     c04:	6f 93       	push	r22
     c06:	4f 93       	push	r20
     c08:	43 2f       	mov	r20, r19
     c0a:	4f 93       	push	r20
     c0c:	2f 93       	push	r18
     c0e:	29 2f       	mov	r18, r25
     c10:	2f 93       	push	r18
     c12:	8f 93       	push	r24
     c14:	83 e4       	ldi	r24, 0x43	; 67
     c16:	9e eb       	ldi	r25, 0xBE	; 190
     c18:	89 2f       	mov	r24, r25
     c1a:	8f 93       	push	r24
     c1c:	83 e4       	ldi	r24, 0x43	; 67
     c1e:	9e eb       	ldi	r25, 0xBE	; 190
     c20:	8f 93       	push	r24
     c22:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <printf>
     c26:	8d b7       	in	r24, 0x3d	; 61
     c28:	9e b7       	in	r25, 0x3e	; 62
     c2a:	0a 96       	adiw	r24, 0x0a	; 10
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	01 c0       	rjmp	.+2      	; 0xc34 <wifi_cb+0xe2>
     c32:	00 00       	nop
     c34:	00 00       	nop
     c36:	27 96       	adiw	r28, 0x07	; 7
     c38:	cd bf       	out	0x3d, r28	; 61
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	08 95       	ret

00000c42 <main>:




int main(void){
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	c7 5a       	subi	r28, 0xA7	; 167
     c50:	d1 09       	sbc	r29, r1
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	de bf       	out	0x3e, r29	; 62
	
	tstrWifiInitParam param;
	tstrM2MAPConfig   strM2MAPConfig;
	int8_t            ret = 0;
     c56:	19 82       	std	Y+1, r1	; 0x01
	struct sockaddr_in addr;
	
	// Redirect stream to Tera Term
	stdout = &mystdout;
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	98 e2       	ldi	r25, 0x28	; 40
     c5c:	80 93 2d 2f 	sts	0x2F2D, r24	; 0x802f2d <__iob+0x2>
     c60:	90 93 2e 2f 	sts	0x2F2E, r25	; 0x802f2e <__iob+0x3>
// 	/* Initializes MCU, drivers and middleware */
	
	atmel_start_init();
     c64:	0e 94 05 01 	call	0x20a	; 0x20a <atmel_start_init>
 	motor_dir_port_init();
     c68:	0e 94 0f 01 	call	0x21e	; 0x21e <motor_dir_port_init>
 	LEFT_WHEEL_TCB3_PWM_init();
     c6c:	0e 94 5f 01 	call	0x2be	; 0x2be <LEFT_WHEEL_TCB3_PWM_init>
	RIGHT_WHEEL_TCB1_PWM_init();
     c70:	0e 94 9d 01 	call	0x33a	; 0x33a <RIGHT_WHEEL_TCB1_PWM_init>
 	
	sei();
     c74:	78 94       	sei
 
 	/* Initialize BSP */
 	nm_bsp_init();
     c76:	0e 94 b5 10 	call	0x216a	; 0x216a <nm_bsp_init>
 
 
 	/* Initialize socket address structure */
 	addr.sin_family = AF_INET;
     c7a:	ce 01       	movw	r24, r28
     c7c:	88 56       	subi	r24, 0x68	; 104
     c7e:	9f 4f       	sbci	r25, 0xFF	; 255
     c80:	22 e0       	ldi	r18, 0x02	; 2
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	fc 01       	movw	r30, r24
     c86:	20 83       	st	Z, r18
     c88:	31 83       	std	Z+1, r19	; 0x01
 	addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
     c8a:	ce 01       	movw	r24, r28
     c8c:	88 56       	subi	r24, 0x68	; 104
     c8e:	9f 4f       	sbci	r25, 0xFF	; 255
     c90:	2a e1       	ldi	r18, 0x1A	; 26
     c92:	3a e0       	ldi	r19, 0x0A	; 10
     c94:	fc 01       	movw	r30, r24
     c96:	22 83       	std	Z+2, r18	; 0x02
     c98:	33 83       	std	Z+3, r19	; 0x03
	addr.sin_addr.s_addr = _htonl(MAIN_WIFI_M2M_SERVER_IP);
     c9a:	9e 01       	movw	r18, r28
     c9c:	28 56       	subi	r18, 0x68	; 104
     c9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	9f ef       	ldi	r25, 0xFF	; 255
     ca4:	dc 01       	movw	r26, r24
     ca6:	f9 01       	movw	r30, r18
     ca8:	84 83       	std	Z+4, r24	; 0x04
     caa:	95 83       	std	Z+5, r25	; 0x05
     cac:	a6 83       	std	Z+6, r26	; 0x06
     cae:	b7 83       	std	Z+7, r27	; 0x07




	/* Initialize Wi-Fi parameters structure. */
 	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
     cb0:	ce 01       	movw	r24, r28
     cb2:	02 96       	adiw	r24, 0x02	; 2
     cb4:	4e e0       	ldi	r20, 0x0E	; 14
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	0e 94 6a 3b 	call	0x76d4	; 0x76d4 <memset>
 
 	/* Initialize Wi-Fi driver with data and status callbacks. */
 	param.pfAppWifiCb = wifi_cb;
     cc0:	89 ea       	ldi	r24, 0xA9	; 169
     cc2:	95 e0       	ldi	r25, 0x05	; 5
     cc4:	8a 83       	std	Y+2, r24	; 0x02
     cc6:	9b 83       	std	Y+3, r25	; 0x03
 	wifi_init(&param);
     cc8:	ce 01       	movw	r24, r28
     cca:	02 96       	adiw	r24, 0x02	; 2
     ccc:	0e 94 1d 03 	call	0x63a	; 0x63a <wifi_init>



	/* Initialize socket module */
	socketInit();
     cd0:	0e 94 d5 33 	call	0x67aa	; 0x67aa <socketInit>
	registerSocketCallback(socket_cb, NULL);
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	8a ed       	ldi	r24, 0xDA	; 218
     cda:	93 e0       	ldi	r25, 0x03	; 3
     cdc:	0e 94 f6 33 	call	0x67ec	; 0x67ec <registerSocketCallback>

/* Connect to router. */
	m2m_wifi_connect(
     ce0:	0f ef       	ldi	r16, 0xFF	; 255
     ce2:	10 e0       	ldi	r17, 0x00	; 0
     ce4:	2f e5       	ldi	r18, 0x5F	; 95
     ce6:	3e eb       	ldi	r19, 0xBE	; 190
     ce8:	42 e0       	ldi	r20, 0x02	; 2
     cea:	69 e0       	ldi	r22, 0x09	; 9
     cec:	89 e6       	ldi	r24, 0x69	; 105
     cee:	9e eb       	ldi	r25, 0xBE	; 190
     cf0:	0e 94 b2 1c 	call	0x3964	; 0x3964 <m2m_wifi_connect>
		//PORTB.OUT ^= PIN5_bm;
	//_delay_ms(1000);	
	/* Handle pending events from network controller. */
	
	
	while (m2m_wifi_handle_events(NULL) == M2M_SUCCESS) {
     cf4:	23 c0       	rjmp	.+70     	; 0xd3c <main+0xfa>
		
		if (wifi_connected == M2M_WIFI_CONNECTED) {
     cf6:	80 91 48 28 	lds	r24, 0x2848	; 0x802848 <wifi_connected>
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	f9 f4       	brne	.+62     	; 0xd3c <main+0xfa>
			
			if (tcp_server_socket < 0) {
     cfe:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     d02:	88 23       	and	r24, r24
     d04:	dc f4       	brge	.+54     	; 0xd3c <main+0xfa>
				/* Open TCP server socket */
				if ((tcp_server_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	82 e0       	ldi	r24, 0x02	; 2
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 13 34 	call	0x6826	; 0x6826 <socket>
     d12:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <tcp_server_socket>
     d16:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <tcp_server_socket>
     d1a:	88 23       	and	r24, r24
     d1c:	2c f4       	brge	.+10     	; 0xd28 <main+0xe6>
					printf("main: failed to create TCP server socket error!\r\n");
     d1e:	82 e7       	ldi	r24, 0x72	; 114
     d20:	9e eb       	ldi	r25, 0xBE	; 190
     d22:	0e 94 90 3b 	call	0x7720	; 0x7720 <puts>
					
					continue;
     d26:	0a c0       	rjmp	.+20     	; 0xd3c <main+0xfa>
				}

				/* Bind service*/
				bind(tcp_server_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
     d28:	20 91 0e 28 	lds	r18, 0x280E	; 0x80280e <tcp_server_socket>
     d2c:	ce 01       	movw	r24, r28
     d2e:	88 56       	subi	r24, 0x68	; 104
     d30:	9f 4f       	sbci	r25, 0xFF	; 255
     d32:	40 e1       	ldi	r20, 0x10	; 16
     d34:	bc 01       	movw	r22, r24
     d36:	82 2f       	mov	r24, r18
     d38:	0e 94 f5 34 	call	0x69ea	; 0x69ea <bind>
		//PORTB.OUT ^= PIN5_bm;
	//_delay_ms(1000);	
	/* Handle pending events from network controller. */
	
	
	while (m2m_wifi_handle_events(NULL) == M2M_SUCCESS) {
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 a4 1c 	call	0x3948	; 0x3948 <m2m_wifi_handle_events>
     d44:	88 23       	and	r24, r24
     d46:	b9 f2       	breq	.-82     	; 0xcf6 <main+0xb4>



	}

}
     d48:	d5 cf       	rjmp	.-86     	; 0xcf4 <main+0xb2>

00000d4a <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
     d52:	80 e0       	ldi	r24, 0x00	; 0
}
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <ccp_write_io+0x6>
     d60:	1f 92       	push	r1
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	9a 83       	std	Y+2, r25	; 0x02
     d6a:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	4b 81       	ldd	r20, Y+3	; 0x03
     d72:	68 ed       	ldi	r22, 0xD8	; 216
     d74:	0e 94 14 0c 	call	0x1828	; 0x1828 <protected_write_io>
}
     d78:	00 00       	nop
     d7a:	23 96       	adiw	r28, 0x03	; 3
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	08 95       	ret

00000d86 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
	//		 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */
	//		 | 0 << CLKCTRL_SEL_bp /* Select: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.OSC20MCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLB),
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	81 e6       	ldi	r24, 0x61	; 97
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 ad 06 	call	0xd5a	; 0xd5a <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
     d98:	80 e0       	ldi	r24, 0x00	; 0
}
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	08 95       	ret

00000da0 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
     da8:	80 e0       	ldi	r24, 0x00	; 0
}
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <PORTA_set_pin_pull_mode>:
	PD6_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD6_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
}
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <PORTA_set_pin_pull_mode+0x6>
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <PORTA_set_pin_pull_mode+0x8>
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	8b 83       	std	Y+3, r24	; 0x03
     dbe:	6c 83       	std	Y+4, r22	; 0x04
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	88 2f       	mov	r24, r24
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	80 5f       	subi	r24, 0xF0	; 240
     dc8:	9b 4f       	sbci	r25, 0xFB	; 251
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	59 f4       	brne	.+22     	; 0xdea <PORTA_set_pin_pull_mode+0x3a>
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	fc 01       	movw	r30, r24
     dda:	80 81       	ld	r24, Z
     ddc:	28 2f       	mov	r18, r24
     dde:	28 60       	ori	r18, 0x08	; 8
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	9a 81       	ldd	r25, Y+2	; 0x02
     de4:	fc 01       	movw	r30, r24
     de6:	20 83       	st	Z, r18
     de8:	0d c0       	rjmp	.+26     	; 0xe04 <PORTA_set_pin_pull_mode+0x54>
     dea:	8c 81       	ldd	r24, Y+4	; 0x04
     dec:	88 23       	and	r24, r24
     dee:	51 f4       	brne	.+20     	; 0xe04 <PORTA_set_pin_pull_mode+0x54>
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	9a 81       	ldd	r25, Y+2	; 0x02
     df4:	fc 01       	movw	r30, r24
     df6:	80 81       	ld	r24, Z
     df8:	28 2f       	mov	r18, r24
     dfa:	27 7f       	andi	r18, 0xF7	; 247
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	9a 81       	ldd	r25, Y+2	; 0x02
     e00:	fc 01       	movw	r30, r24
     e02:	20 83       	st	Z, r18
     e04:	00 00       	nop
     e06:	24 96       	adiw	r28, 0x04	; 4
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	08 95       	ret

00000e12 <PORTA_set_pin_dir>:
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	00 d0       	rcall	.+0      	; 0xe18 <PORTA_set_pin_dir+0x6>
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	6a 83       	std	Y+2, r22	; 0x02
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	88 2f       	mov	r24, r24
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	91 05       	cpc	r25, r1
     e2a:	e1 f0       	breq	.+56     	; 0xe64 <PORTA_set_pin_dir+0x52>
     e2c:	82 30       	cpi	r24, 0x02	; 2
     e2e:	91 05       	cpc	r25, r1
     e30:	71 f1       	breq	.+92     	; 0xe8e <PORTA_set_pin_dir+0x7c>
     e32:	89 2b       	or	r24, r25
     e34:	09 f0       	breq	.+2      	; 0xe38 <PORTA_set_pin_dir+0x26>
     e36:	3b c0       	rjmp	.+118    	; 0xeae <PORTA_set_pin_dir+0x9c>
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	fc 01       	movw	r30, r24
     e42:	80 81       	ld	r24, Z
     e44:	68 2f       	mov	r22, r24
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	48 2f       	mov	r20, r24
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <PORTA_set_pin_dir+0x44>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	4a 95       	dec	r20
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <PORTA_set_pin_dir+0x40>
     e5a:	80 95       	com	r24
     e5c:	86 23       	and	r24, r22
     e5e:	f9 01       	movw	r30, r18
     e60:	80 83       	st	Z, r24
     e62:	25 c0       	rjmp	.+74     	; 0xeae <PORTA_set_pin_dir+0x9c>
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	fc 01       	movw	r30, r24
     e6e:	80 81       	ld	r24, Z
     e70:	68 2f       	mov	r22, r24
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	48 2f       	mov	r20, r24
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <PORTA_set_pin_dir+0x70>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	4a 95       	dec	r20
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <PORTA_set_pin_dir+0x6c>
     e86:	86 2b       	or	r24, r22
     e88:	f9 01       	movw	r30, r18
     e8a:	80 83       	st	Z, r24
     e8c:	10 c0       	rjmp	.+32     	; 0xeae <PORTA_set_pin_dir+0x9c>
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	80 5f       	subi	r24, 0xF0	; 240
     e96:	9b 4f       	sbci	r25, 0xFB	; 251
     e98:	29 81       	ldd	r18, Y+1	; 0x01
     e9a:	22 2f       	mov	r18, r18
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	20 5f       	subi	r18, 0xF0	; 240
     ea0:	3b 4f       	sbci	r19, 0xFB	; 251
     ea2:	f9 01       	movw	r30, r18
     ea4:	20 81       	ld	r18, Z
     ea6:	28 60       	ori	r18, 0x08	; 8
     ea8:	fc 01       	movw	r30, r24
     eaa:	20 83       	st	Z, r18
     eac:	00 00       	nop
     eae:	00 00       	nop
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <PORTA_set_pin_level>:
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <PORTA_set_pin_level+0x6>
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	6a 83       	std	Y+2, r22	; 0x02
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	88 23       	and	r24, r24
     ecc:	a9 f0       	breq	.+42     	; 0xef8 <PORTA_set_pin_level+0x3e>
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	fc 01       	movw	r30, r24
     ed8:	81 81       	ldd	r24, Z+1	; 0x01
     eda:	68 2f       	mov	r22, r24
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	48 2f       	mov	r20, r24
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <PORTA_set_pin_level+0x32>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	4a 95       	dec	r20
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <PORTA_set_pin_level+0x2e>
     ef0:	86 2b       	or	r24, r22
     ef2:	f9 01       	movw	r30, r18
     ef4:	81 83       	std	Z+1, r24	; 0x01
     ef6:	15 c0       	rjmp	.+42     	; 0xf22 <PORTA_set_pin_level+0x68>
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	fc 01       	movw	r30, r24
     f02:	81 81       	ldd	r24, Z+1	; 0x01
     f04:	68 2f       	mov	r22, r24
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	48 2f       	mov	r20, r24
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <PORTA_set_pin_level+0x5c>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	4a 95       	dec	r20
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <PORTA_set_pin_level+0x58>
     f1a:	80 95       	com	r24
     f1c:	86 23       	and	r24, r22
     f1e:	f9 01       	movw	r30, r18
     f20:	81 83       	std	Z+1, r24	; 0x01
     f22:	00 00       	nop
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	08 95       	ret

00000f2e <PORTB_set_pin_pull_mode>:
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	00 d0       	rcall	.+0      	; 0xf34 <PORTB_set_pin_pull_mode+0x6>
     f34:	00 d0       	rcall	.+0      	; 0xf36 <PORTB_set_pin_pull_mode+0x8>
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	8b 83       	std	Y+3, r24	; 0x03
     f3c:	6c 83       	std	Y+4, r22	; 0x04
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	80 5d       	subi	r24, 0xD0	; 208
     f46:	9b 4f       	sbci	r25, 0xFB	; 251
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	59 f4       	brne	.+22     	; 0xf68 <PORTB_set_pin_pull_mode+0x3a>
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	9a 81       	ldd	r25, Y+2	; 0x02
     f56:	fc 01       	movw	r30, r24
     f58:	80 81       	ld	r24, Z
     f5a:	28 2f       	mov	r18, r24
     f5c:	28 60       	ori	r18, 0x08	; 8
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	fc 01       	movw	r30, r24
     f64:	20 83       	st	Z, r18
     f66:	0d c0       	rjmp	.+26     	; 0xf82 <PORTB_set_pin_pull_mode+0x54>
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	88 23       	and	r24, r24
     f6c:	51 f4       	brne	.+20     	; 0xf82 <PORTB_set_pin_pull_mode+0x54>
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
     f72:	fc 01       	movw	r30, r24
     f74:	80 81       	ld	r24, Z
     f76:	28 2f       	mov	r18, r24
     f78:	27 7f       	andi	r18, 0xF7	; 247
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	fc 01       	movw	r30, r24
     f80:	20 83       	st	Z, r18
     f82:	00 00       	nop
     f84:	24 96       	adiw	r28, 0x04	; 4
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <PORTB_set_pin_dir>:
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	00 d0       	rcall	.+0      	; 0xf96 <PORTB_set_pin_dir+0x6>
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	89 83       	std	Y+1, r24	; 0x01
     f9c:	6a 83       	std	Y+2, r22	; 0x02
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	88 2f       	mov	r24, r24
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	91 05       	cpc	r25, r1
     fa8:	e1 f0       	breq	.+56     	; 0xfe2 <PORTB_set_pin_dir+0x52>
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	91 05       	cpc	r25, r1
     fae:	71 f1       	breq	.+92     	; 0x100c <PORTB_set_pin_dir+0x7c>
     fb0:	89 2b       	or	r24, r25
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <PORTB_set_pin_dir+0x26>
     fb4:	3b c0       	rjmp	.+118    	; 0x102c <PORTB_set_pin_dir+0x9c>
     fb6:	84 e0       	ldi	r24, 0x04	; 4
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	24 e0       	ldi	r18, 0x04	; 4
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	f9 01       	movw	r30, r18
     fc0:	20 81       	ld	r18, Z
     fc2:	62 2f       	mov	r22, r18
     fc4:	29 81       	ldd	r18, Y+1	; 0x01
     fc6:	42 2f       	mov	r20, r18
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	21 e0       	ldi	r18, 0x01	; 1
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <PORTB_set_pin_dir+0x44>
     fd0:	22 0f       	add	r18, r18
     fd2:	33 1f       	adc	r19, r19
     fd4:	4a 95       	dec	r20
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <PORTB_set_pin_dir+0x40>
     fd8:	20 95       	com	r18
     fda:	26 23       	and	r18, r22
     fdc:	fc 01       	movw	r30, r24
     fde:	20 83       	st	Z, r18
     fe0:	25 c0       	rjmp	.+74     	; 0x102c <PORTB_set_pin_dir+0x9c>
     fe2:	84 e0       	ldi	r24, 0x04	; 4
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	24 e0       	ldi	r18, 0x04	; 4
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	f9 01       	movw	r30, r18
     fec:	20 81       	ld	r18, Z
     fee:	62 2f       	mov	r22, r18
     ff0:	29 81       	ldd	r18, Y+1	; 0x01
     ff2:	42 2f       	mov	r20, r18
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	21 e0       	ldi	r18, 0x01	; 1
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <PORTB_set_pin_dir+0x70>
     ffc:	22 0f       	add	r18, r18
     ffe:	33 1f       	adc	r19, r19
    1000:	4a 95       	dec	r20
    1002:	e2 f7       	brpl	.-8      	; 0xffc <PORTB_set_pin_dir+0x6c>
    1004:	26 2b       	or	r18, r22
    1006:	fc 01       	movw	r30, r24
    1008:	20 83       	st	Z, r18
    100a:	10 c0       	rjmp	.+32     	; 0x102c <PORTB_set_pin_dir+0x9c>
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	80 5d       	subi	r24, 0xD0	; 208
    1014:	9b 4f       	sbci	r25, 0xFB	; 251
    1016:	29 81       	ldd	r18, Y+1	; 0x01
    1018:	22 2f       	mov	r18, r18
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	20 5d       	subi	r18, 0xD0	; 208
    101e:	3b 4f       	sbci	r19, 0xFB	; 251
    1020:	f9 01       	movw	r30, r18
    1022:	20 81       	ld	r18, Z
    1024:	28 60       	ori	r18, 0x08	; 8
    1026:	fc 01       	movw	r30, r24
    1028:	20 83       	st	Z, r18
    102a:	00 00       	nop
    102c:	00 00       	nop
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <PORTB_set_pin_level>:
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	00 d0       	rcall	.+0      	; 0x103e <PORTB_set_pin_level+0x6>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	6a 83       	std	Y+2, r22	; 0x02
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	88 23       	and	r24, r24
    104a:	a9 f0       	breq	.+42     	; 0x1076 <PORTB_set_pin_level+0x3e>
    104c:	84 e0       	ldi	r24, 0x04	; 4
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	24 e0       	ldi	r18, 0x04	; 4
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	f9 01       	movw	r30, r18
    1056:	21 81       	ldd	r18, Z+1	; 0x01
    1058:	62 2f       	mov	r22, r18
    105a:	29 81       	ldd	r18, Y+1	; 0x01
    105c:	42 2f       	mov	r20, r18
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	21 e0       	ldi	r18, 0x01	; 1
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <PORTB_set_pin_level+0x32>
    1066:	22 0f       	add	r18, r18
    1068:	33 1f       	adc	r19, r19
    106a:	4a 95       	dec	r20
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <PORTB_set_pin_level+0x2e>
    106e:	26 2b       	or	r18, r22
    1070:	fc 01       	movw	r30, r24
    1072:	21 83       	std	Z+1, r18	; 0x01
    1074:	15 c0       	rjmp	.+42     	; 0x10a0 <PORTB_set_pin_level+0x68>
    1076:	84 e0       	ldi	r24, 0x04	; 4
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	24 e0       	ldi	r18, 0x04	; 4
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	f9 01       	movw	r30, r18
    1080:	21 81       	ldd	r18, Z+1	; 0x01
    1082:	62 2f       	mov	r22, r18
    1084:	29 81       	ldd	r18, Y+1	; 0x01
    1086:	42 2f       	mov	r20, r18
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	21 e0       	ldi	r18, 0x01	; 1
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <PORTB_set_pin_level+0x5c>
    1090:	22 0f       	add	r18, r18
    1092:	33 1f       	adc	r19, r19
    1094:	4a 95       	dec	r20
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <PORTB_set_pin_level+0x58>
    1098:	20 95       	com	r18
    109a:	26 23       	and	r18, r22
    109c:	fc 01       	movw	r30, r24
    109e:	21 83       	std	Z+1, r18	; 0x01
    10a0:	00 00       	nop
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <PORTC_set_pin_pull_mode>:
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <PORTC_set_pin_pull_mode+0x6>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <PORTC_set_pin_pull_mode+0x8>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	8b 83       	std	Y+3, r24	; 0x03
    10ba:	6c 83       	std	Y+4, r22	; 0x04
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	80 5b       	subi	r24, 0xB0	; 176
    10c4:	9b 4f       	sbci	r25, 0xFB	; 251
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	9a 83       	std	Y+2, r25	; 0x02
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	59 f4       	brne	.+22     	; 0x10e6 <PORTC_set_pin_pull_mode+0x3a>
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	fc 01       	movw	r30, r24
    10d6:	80 81       	ld	r24, Z
    10d8:	28 2f       	mov	r18, r24
    10da:	28 60       	ori	r18, 0x08	; 8
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	9a 81       	ldd	r25, Y+2	; 0x02
    10e0:	fc 01       	movw	r30, r24
    10e2:	20 83       	st	Z, r18
    10e4:	0d c0       	rjmp	.+26     	; 0x1100 <PORTC_set_pin_pull_mode+0x54>
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	88 23       	and	r24, r24
    10ea:	51 f4       	brne	.+20     	; 0x1100 <PORTC_set_pin_pull_mode+0x54>
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	fc 01       	movw	r30, r24
    10f2:	80 81       	ld	r24, Z
    10f4:	28 2f       	mov	r18, r24
    10f6:	27 7f       	andi	r18, 0xF7	; 247
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	9a 81       	ldd	r25, Y+2	; 0x02
    10fc:	fc 01       	movw	r30, r24
    10fe:	20 83       	st	Z, r18
    1100:	00 00       	nop
    1102:	24 96       	adiw	r28, 0x04	; 4
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <PORTC_pin_set_inverted>:
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	00 d0       	rcall	.+0      	; 0x1114 <PORTC_pin_set_inverted+0x6>
    1114:	00 d0       	rcall	.+0      	; 0x1116 <PORTC_pin_set_inverted+0x8>
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	8b 83       	std	Y+3, r24	; 0x03
    111c:	6c 83       	std	Y+4, r22	; 0x04
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	80 5b       	subi	r24, 0xB0	; 176
    1126:	9b 4f       	sbci	r25, 0xFB	; 251
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	88 23       	and	r24, r24
    1130:	59 f0       	breq	.+22     	; 0x1148 <PORTC_pin_set_inverted+0x3a>
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	9a 81       	ldd	r25, Y+2	; 0x02
    1136:	fc 01       	movw	r30, r24
    1138:	80 81       	ld	r24, Z
    113a:	28 2f       	mov	r18, r24
    113c:	20 68       	ori	r18, 0x80	; 128
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	fc 01       	movw	r30, r24
    1144:	20 83       	st	Z, r18
    1146:	0a c0       	rjmp	.+20     	; 0x115c <PORTC_pin_set_inverted+0x4e>
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	fc 01       	movw	r30, r24
    114e:	80 81       	ld	r24, Z
    1150:	28 2f       	mov	r18, r24
    1152:	2f 77       	andi	r18, 0x7F	; 127
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	9a 81       	ldd	r25, Y+2	; 0x02
    1158:	fc 01       	movw	r30, r24
    115a:	20 83       	st	Z, r18
    115c:	00 00       	nop
    115e:	24 96       	adiw	r28, 0x04	; 4
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	08 95       	ret

0000116a <PORTC_pin_set_isc>:
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	00 d0       	rcall	.+0      	; 0x1170 <PORTC_pin_set_isc+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <PORTC_pin_set_isc+0x8>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	8b 83       	std	Y+3, r24	; 0x03
    1178:	6c 83       	std	Y+4, r22	; 0x04
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	80 5b       	subi	r24, 0xB0	; 176
    1182:	9b 4f       	sbci	r25, 0xFB	; 251
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	9a 83       	std	Y+2, r25	; 0x02
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	9a 81       	ldd	r25, Y+2	; 0x02
    118c:	fc 01       	movw	r30, r24
    118e:	80 81       	ld	r24, Z
    1190:	98 2f       	mov	r25, r24
    1192:	98 7f       	andi	r25, 0xF8	; 248
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	89 2b       	or	r24, r25
    1198:	28 2f       	mov	r18, r24
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	fc 01       	movw	r30, r24
    11a0:	20 83       	st	Z, r18
    11a2:	00 00       	nop
    11a4:	24 96       	adiw	r28, 0x04	; 4
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	08 95       	ret

000011b0 <PORTC_set_pin_dir>:
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <PORTC_set_pin_dir+0x6>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	6a 83       	std	Y+2, r22	; 0x02
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	91 05       	cpc	r25, r1
    11c8:	e1 f0       	breq	.+56     	; 0x1202 <PORTC_set_pin_dir+0x52>
    11ca:	82 30       	cpi	r24, 0x02	; 2
    11cc:	91 05       	cpc	r25, r1
    11ce:	71 f1       	breq	.+92     	; 0x122c <PORTC_set_pin_dir+0x7c>
    11d0:	89 2b       	or	r24, r25
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <PORTC_set_pin_dir+0x26>
    11d4:	3b c0       	rjmp	.+118    	; 0x124c <PORTC_set_pin_dir+0x9c>
    11d6:	88 e0       	ldi	r24, 0x08	; 8
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	28 e0       	ldi	r18, 0x08	; 8
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	f9 01       	movw	r30, r18
    11e0:	20 81       	ld	r18, Z
    11e2:	62 2f       	mov	r22, r18
    11e4:	29 81       	ldd	r18, Y+1	; 0x01
    11e6:	42 2f       	mov	r20, r18
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	21 e0       	ldi	r18, 0x01	; 1
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <PORTC_set_pin_dir+0x44>
    11f0:	22 0f       	add	r18, r18
    11f2:	33 1f       	adc	r19, r19
    11f4:	4a 95       	dec	r20
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <PORTC_set_pin_dir+0x40>
    11f8:	20 95       	com	r18
    11fa:	26 23       	and	r18, r22
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 83       	st	Z, r18
    1200:	25 c0       	rjmp	.+74     	; 0x124c <PORTC_set_pin_dir+0x9c>
    1202:	88 e0       	ldi	r24, 0x08	; 8
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	28 e0       	ldi	r18, 0x08	; 8
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	f9 01       	movw	r30, r18
    120c:	20 81       	ld	r18, Z
    120e:	62 2f       	mov	r22, r18
    1210:	29 81       	ldd	r18, Y+1	; 0x01
    1212:	42 2f       	mov	r20, r18
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	21 e0       	ldi	r18, 0x01	; 1
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <PORTC_set_pin_dir+0x70>
    121c:	22 0f       	add	r18, r18
    121e:	33 1f       	adc	r19, r19
    1220:	4a 95       	dec	r20
    1222:	e2 f7       	brpl	.-8      	; 0x121c <PORTC_set_pin_dir+0x6c>
    1224:	26 2b       	or	r18, r22
    1226:	fc 01       	movw	r30, r24
    1228:	20 83       	st	Z, r18
    122a:	10 c0       	rjmp	.+32     	; 0x124c <PORTC_set_pin_dir+0x9c>
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	80 5b       	subi	r24, 0xB0	; 176
    1234:	9b 4f       	sbci	r25, 0xFB	; 251
    1236:	29 81       	ldd	r18, Y+1	; 0x01
    1238:	22 2f       	mov	r18, r18
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	20 5b       	subi	r18, 0xB0	; 176
    123e:	3b 4f       	sbci	r19, 0xFB	; 251
    1240:	f9 01       	movw	r30, r18
    1242:	20 81       	ld	r18, Z
    1244:	28 60       	ori	r18, 0x08	; 8
    1246:	fc 01       	movw	r30, r24
    1248:	20 83       	st	Z, r18
    124a:	00 00       	nop
    124c:	00 00       	nop
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	08 95       	ret

00001258 <PORTC_set_pin_level>:
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	00 d0       	rcall	.+0      	; 0x125e <PORTC_set_pin_level+0x6>
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	6a 83       	std	Y+2, r22	; 0x02
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	88 23       	and	r24, r24
    126a:	a9 f0       	breq	.+42     	; 0x1296 <PORTC_set_pin_level+0x3e>
    126c:	88 e0       	ldi	r24, 0x08	; 8
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	28 e0       	ldi	r18, 0x08	; 8
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	f9 01       	movw	r30, r18
    1276:	21 81       	ldd	r18, Z+1	; 0x01
    1278:	62 2f       	mov	r22, r18
    127a:	29 81       	ldd	r18, Y+1	; 0x01
    127c:	42 2f       	mov	r20, r18
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	21 e0       	ldi	r18, 0x01	; 1
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	02 c0       	rjmp	.+4      	; 0x128a <PORTC_set_pin_level+0x32>
    1286:	22 0f       	add	r18, r18
    1288:	33 1f       	adc	r19, r19
    128a:	4a 95       	dec	r20
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <PORTC_set_pin_level+0x2e>
    128e:	26 2b       	or	r18, r22
    1290:	fc 01       	movw	r30, r24
    1292:	21 83       	std	Z+1, r18	; 0x01
    1294:	15 c0       	rjmp	.+42     	; 0x12c0 <PORTC_set_pin_level+0x68>
    1296:	88 e0       	ldi	r24, 0x08	; 8
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	28 e0       	ldi	r18, 0x08	; 8
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	f9 01       	movw	r30, r18
    12a0:	21 81       	ldd	r18, Z+1	; 0x01
    12a2:	62 2f       	mov	r22, r18
    12a4:	29 81       	ldd	r18, Y+1	; 0x01
    12a6:	42 2f       	mov	r20, r18
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	21 e0       	ldi	r18, 0x01	; 1
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <PORTC_set_pin_level+0x5c>
    12b0:	22 0f       	add	r18, r18
    12b2:	33 1f       	adc	r19, r19
    12b4:	4a 95       	dec	r20
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <PORTC_set_pin_level+0x58>
    12b8:	20 95       	com	r18
    12ba:	26 23       	and	r18, r22
    12bc:	fc 01       	movw	r30, r24
    12be:	21 83       	std	Z+1, r18	; 0x01
    12c0:	00 00       	nop
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	08 95       	ret

000012cc <CONF_WIFI_M2M_RESET_PIN_set_dir>:
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	1f 92       	push	r1
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	69 81       	ldd	r22, Y+1	; 0x01
    12da:	82 e0       	ldi	r24, 0x02	; 2
    12dc:	0e 94 09 07 	call	0xe12	; 0xe12 <PORTA_set_pin_dir>
    12e0:	00 00       	nop
    12e2:	0f 90       	pop	r0
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	08 95       	ret

000012ea <CONF_WIFI_M2M_RESET_PIN_set_level>:
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	1f 92       	push	r1
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	69 81       	ldd	r22, Y+1	; 0x01
    12f8:	82 e0       	ldi	r24, 0x02	; 2
    12fa:	0e 94 5d 07 	call	0xeba	; 0xeba <PORTA_set_pin_level>
    12fe:	00 00       	nop
    1300:	0f 90       	pop	r0
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret

00001308 <CONF_WIFI_M2M_WAKE_PIN_set_dir>:
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	1f 92       	push	r1
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	69 81       	ldd	r22, Y+1	; 0x01
    1316:	83 e0       	ldi	r24, 0x03	; 3
    1318:	0e 94 09 07 	call	0xe12	; 0xe12 <PORTA_set_pin_dir>
    131c:	00 00       	nop
    131e:	0f 90       	pop	r0
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	08 95       	ret

00001326 <CONF_WIFI_M2M_WAKE_PIN_set_level>:
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	1f 92       	push	r1
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	69 81       	ldd	r22, Y+1	; 0x01
    1334:	83 e0       	ldi	r24, 0x03	; 3
    1336:	0e 94 5d 07 	call	0xeba	; 0xeba <PORTA_set_pin_level>
    133a:	00 00       	nop
    133c:	0f 90       	pop	r0
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>:
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	1f 92       	push	r1
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	69 81       	ldd	r22, Y+1	; 0x01
    1352:	84 e0       	ldi	r24, 0x04	; 4
    1354:	0e 94 09 07 	call	0xe12	; 0xe12 <PORTA_set_pin_dir>
    1358:	00 00       	nop
    135a:	0f 90       	pop	r0
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	08 95       	ret

00001362 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>:
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	1f 92       	push	r1
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	69 81       	ldd	r22, Y+1	; 0x01
    1370:	84 e0       	ldi	r24, 0x04	; 4
    1372:	0e 94 5d 07 	call	0xeba	; 0xeba <PORTA_set_pin_level>
    1376:	00 00       	nop
    1378:	0f 90       	pop	r0
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <CONF_WIFI_M2M_SPI_MISO_PIN_set_pull_mode>:
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	1f 92       	push	r1
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	69 81       	ldd	r22, Y+1	; 0x01
    138e:	85 e0       	ldi	r24, 0x05	; 5
    1390:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <PORTA_set_pin_pull_mode>
    1394:	00 00       	nop
    1396:	0f 90       	pop	r0
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	08 95       	ret

0000139e <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>:
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	1f 92       	push	r1
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	69 81       	ldd	r22, Y+1	; 0x01
    13ac:	85 e0       	ldi	r24, 0x05	; 5
    13ae:	0e 94 09 07 	call	0xe12	; 0xe12 <PORTA_set_pin_dir>
    13b2:	00 00       	nop
    13b4:	0f 90       	pop	r0
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	08 95       	ret

000013bc <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>:
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	1f 92       	push	r1
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	69 81       	ldd	r22, Y+1	; 0x01
    13ca:	86 e0       	ldi	r24, 0x06	; 6
    13cc:	0e 94 09 07 	call	0xe12	; 0xe12 <PORTA_set_pin_dir>
    13d0:	00 00       	nop
    13d2:	0f 90       	pop	r0
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>:
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	1f 92       	push	r1
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	69 81       	ldd	r22, Y+1	; 0x01
    13e8:	86 e0       	ldi	r24, 0x06	; 6
    13ea:	0e 94 5d 07 	call	0xeba	; 0xeba <PORTA_set_pin_level>
    13ee:	00 00       	nop
    13f0:	0f 90       	pop	r0
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>:
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	1f 92       	push	r1
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	69 81       	ldd	r22, Y+1	; 0x01
    1406:	87 e0       	ldi	r24, 0x07	; 7
    1408:	0e 94 09 07 	call	0xe12	; 0xe12 <PORTA_set_pin_dir>
    140c:	00 00       	nop
    140e:	0f 90       	pop	r0
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	08 95       	ret

00001416 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>:
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	1f 92       	push	r1
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	69 81       	ldd	r22, Y+1	; 0x01
    1424:	87 e0       	ldi	r24, 0x07	; 7
    1426:	0e 94 5d 07 	call	0xeba	; 0xeba <PORTA_set_pin_level>
    142a:	00 00       	nop
    142c:	0f 90       	pop	r0
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	08 95       	ret

00001434 <SW0_set_pull_mode>:
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	1f 92       	push	r1
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	69 81       	ldd	r22, Y+1	; 0x01
    1442:	82 e0       	ldi	r24, 0x02	; 2
    1444:	0e 94 97 07 	call	0xf2e	; 0xf2e <PORTB_set_pin_pull_mode>
    1448:	00 00       	nop
    144a:	0f 90       	pop	r0
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <SW0_set_dir>:
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	1f 92       	push	r1
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	69 81       	ldd	r22, Y+1	; 0x01
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	0e 94 c8 07 	call	0xf90	; 0xf90 <PORTB_set_pin_dir>
    1466:	00 00       	nop
    1468:	0f 90       	pop	r0
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	08 95       	ret

00001470 <LED0_set_dir>:
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	1f 92       	push	r1
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	69 81       	ldd	r22, Y+1	; 0x01
    147e:	85 e0       	ldi	r24, 0x05	; 5
    1480:	0e 94 c8 07 	call	0xf90	; 0xf90 <PORTB_set_pin_dir>
    1484:	00 00       	nop
    1486:	0f 90       	pop	r0
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <LED0_set_level>:
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	1f 92       	push	r1
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	69 81       	ldd	r22, Y+1	; 0x01
    149c:	85 e0       	ldi	r24, 0x05	; 5
    149e:	0e 94 1c 08 	call	0x1038	; 0x1038 <PORTB_set_pin_level>
    14a2:	00 00       	nop
    14a4:	0f 90       	pop	r0
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	08 95       	ret

000014ac <PC0_set_dir>:
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	1f 92       	push	r1
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	69 81       	ldd	r22, Y+1	; 0x01
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <PORTC_set_pin_dir>
    14c0:	00 00       	nop
    14c2:	0f 90       	pop	r0
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	08 95       	ret

000014ca <PC0_set_level>:
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	1f 92       	push	r1
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	69 81       	ldd	r22, Y+1	; 0x01
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	0e 94 2c 09 	call	0x1258	; 0x1258 <PORTC_set_pin_level>
    14de:	00 00       	nop
    14e0:	0f 90       	pop	r0
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	08 95       	ret

000014e8 <PC1_set_pull_mode>:
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	1f 92       	push	r1
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	69 81       	ldd	r22, Y+1	; 0x01
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	0e 94 56 08 	call	0x10ac	; 0x10ac <PORTC_set_pin_pull_mode>
    14fc:	00 00       	nop
    14fe:	0f 90       	pop	r0
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	08 95       	ret

00001506 <PC1_set_dir>:
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	1f 92       	push	r1
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	69 81       	ldd	r22, Y+1	; 0x01
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <PORTC_set_pin_dir>
    151a:	00 00       	nop
    151c:	0f 90       	pop	r0
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	08 95       	ret

00001524 <CONF_WIFI_M2M_INT_PIN_set_pull_mode>:
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	1f 92       	push	r1
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	69 81       	ldd	r22, Y+1	; 0x01
    1532:	86 e0       	ldi	r24, 0x06	; 6
    1534:	0e 94 56 08 	call	0x10ac	; 0x10ac <PORTC_set_pin_pull_mode>
    1538:	00 00       	nop
    153a:	0f 90       	pop	r0
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	08 95       	ret

00001542 <CONF_WIFI_M2M_INT_PIN_set_dir>:
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	1f 92       	push	r1
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	69 81       	ldd	r22, Y+1	; 0x01
    1550:	86 e0       	ldi	r24, 0x06	; 6
    1552:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <PORTC_set_pin_dir>
    1556:	00 00       	nop
    1558:	0f 90       	pop	r0
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	08 95       	ret

00001560 <CONF_WIFI_M2M_INT_PIN_set_isc>:
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	1f 92       	push	r1
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	69 81       	ldd	r22, Y+1	; 0x01
    156e:	86 e0       	ldi	r24, 0x06	; 6
    1570:	0e 94 b5 08 	call	0x116a	; 0x116a <PORTC_pin_set_isc>
    1574:	00 00       	nop
    1576:	0f 90       	pop	r0
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <CONF_WIFI_M2M_INT_PIN_set_inverted>:
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	1f 92       	push	r1
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	69 81       	ldd	r22, Y+1	; 0x01
    158c:	86 e0       	ldi	r24, 0x06	; 6
    158e:	0e 94 87 08 	call	0x110e	; 0x110e <PORTC_pin_set_inverted>
    1592:	00 00       	nop
    1594:	0f 90       	pop	r0
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	08 95       	ret

0000159c <CONF_WIFI_M2M_INT_PIN_set_level>:
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	1f 92       	push	r1
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	69 81       	ldd	r22, Y+1	; 0x01
    15aa:	86 e0       	ldi	r24, 0x06	; 6
    15ac:	0e 94 2c 09 	call	0x1258	; 0x1258 <PORTC_set_pin_level>
    15b0:	00 00       	nop
    15b2:	0f 90       	pop	r0
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	08 95       	ret

000015ba <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>:
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	1f 92       	push	r1
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	69 81       	ldd	r22, Y+1	; 0x01
    15c8:	87 e0       	ldi	r24, 0x07	; 7
    15ca:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <PORTC_set_pin_dir>
    15ce:	00 00       	nop
    15d0:	0f 90       	pop	r0
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	08 95       	ret

000015d8 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>:
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	1f 92       	push	r1
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	69 81       	ldd	r22, Y+1	; 0x01
    15e6:	87 e0       	ldi	r24, 0x07	; 7
    15e8:	0e 94 2c 09 	call	0x1258	; 0x1258 <PORTC_set_pin_level>
    15ec:	00 00       	nop
    15ee:	0f 90       	pop	r0
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	08 95       	ret

000015f6 <mcu_init>:
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	26 97       	sbiw	r28, 0x06	; 6
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	19 82       	std	Y+1, r1	; 0x01
    1606:	12 c0       	rjmp	.+36     	; 0x162c <mcu_init+0x36>
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	80 5f       	subi	r24, 0xF0	; 240
    1610:	9b 4f       	sbci	r25, 0xFB	; 251
    1612:	29 81       	ldd	r18, Y+1	; 0x01
    1614:	22 2f       	mov	r18, r18
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	20 5f       	subi	r18, 0xF0	; 240
    161a:	3b 4f       	sbci	r19, 0xFB	; 251
    161c:	f9 01       	movw	r30, r18
    161e:	20 81       	ld	r18, Z
    1620:	28 60       	ori	r18, 0x08	; 8
    1622:	fc 01       	movw	r30, r24
    1624:	20 83       	st	Z, r18
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	88 30       	cpi	r24, 0x08	; 8
    1630:	58 f3       	brcs	.-42     	; 0x1608 <mcu_init+0x12>
    1632:	1a 82       	std	Y+2, r1	; 0x02
    1634:	12 c0       	rjmp	.+36     	; 0x165a <mcu_init+0x64>
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	80 5d       	subi	r24, 0xD0	; 208
    163e:	9b 4f       	sbci	r25, 0xFB	; 251
    1640:	2a 81       	ldd	r18, Y+2	; 0x02
    1642:	22 2f       	mov	r18, r18
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	20 5d       	subi	r18, 0xD0	; 208
    1648:	3b 4f       	sbci	r19, 0xFB	; 251
    164a:	f9 01       	movw	r30, r18
    164c:	20 81       	ld	r18, Z
    164e:	28 60       	ori	r18, 0x08	; 8
    1650:	fc 01       	movw	r30, r24
    1652:	20 83       	st	Z, r18
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	8f 5f       	subi	r24, 0xFF	; 255
    1658:	8a 83       	std	Y+2, r24	; 0x02
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	88 30       	cpi	r24, 0x08	; 8
    165e:	58 f3       	brcs	.-42     	; 0x1636 <mcu_init+0x40>
    1660:	1b 82       	std	Y+3, r1	; 0x03
    1662:	12 c0       	rjmp	.+36     	; 0x1688 <mcu_init+0x92>
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	80 5b       	subi	r24, 0xB0	; 176
    166c:	9b 4f       	sbci	r25, 0xFB	; 251
    166e:	2b 81       	ldd	r18, Y+3	; 0x03
    1670:	22 2f       	mov	r18, r18
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	20 5b       	subi	r18, 0xB0	; 176
    1676:	3b 4f       	sbci	r19, 0xFB	; 251
    1678:	f9 01       	movw	r30, r18
    167a:	20 81       	ld	r18, Z
    167c:	28 60       	ori	r18, 0x08	; 8
    167e:	fc 01       	movw	r30, r24
    1680:	20 83       	st	Z, r18
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	8f 5f       	subi	r24, 0xFF	; 255
    1686:	8b 83       	std	Y+3, r24	; 0x03
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	88 30       	cpi	r24, 0x08	; 8
    168c:	58 f3       	brcs	.-42     	; 0x1664 <mcu_init+0x6e>
    168e:	1c 82       	std	Y+4, r1	; 0x04
    1690:	12 c0       	rjmp	.+36     	; 0x16b6 <mcu_init+0xc0>
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	80 59       	subi	r24, 0x90	; 144
    169a:	9b 4f       	sbci	r25, 0xFB	; 251
    169c:	2c 81       	ldd	r18, Y+4	; 0x04
    169e:	22 2f       	mov	r18, r18
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	20 59       	subi	r18, 0x90	; 144
    16a4:	3b 4f       	sbci	r19, 0xFB	; 251
    16a6:	f9 01       	movw	r30, r18
    16a8:	20 81       	ld	r18, Z
    16aa:	28 60       	ori	r18, 0x08	; 8
    16ac:	fc 01       	movw	r30, r24
    16ae:	20 83       	st	Z, r18
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	8f 5f       	subi	r24, 0xFF	; 255
    16b4:	8c 83       	std	Y+4, r24	; 0x04
    16b6:	8c 81       	ldd	r24, Y+4	; 0x04
    16b8:	88 30       	cpi	r24, 0x08	; 8
    16ba:	58 f3       	brcs	.-42     	; 0x1692 <mcu_init+0x9c>
    16bc:	1d 82       	std	Y+5, r1	; 0x05
    16be:	12 c0       	rjmp	.+36     	; 0x16e4 <mcu_init+0xee>
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	80 57       	subi	r24, 0x70	; 112
    16c8:	9b 4f       	sbci	r25, 0xFB	; 251
    16ca:	2d 81       	ldd	r18, Y+5	; 0x05
    16cc:	22 2f       	mov	r18, r18
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	20 57       	subi	r18, 0x70	; 112
    16d2:	3b 4f       	sbci	r19, 0xFB	; 251
    16d4:	f9 01       	movw	r30, r18
    16d6:	20 81       	ld	r18, Z
    16d8:	28 60       	ori	r18, 0x08	; 8
    16da:	fc 01       	movw	r30, r24
    16dc:	20 83       	st	Z, r18
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	8f 5f       	subi	r24, 0xFF	; 255
    16e2:	8d 83       	std	Y+5, r24	; 0x05
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	88 30       	cpi	r24, 0x08	; 8
    16e8:	58 f3       	brcs	.-42     	; 0x16c0 <mcu_init+0xca>
    16ea:	1e 82       	std	Y+6, r1	; 0x06
    16ec:	12 c0       	rjmp	.+36     	; 0x1712 <mcu_init+0x11c>
    16ee:	8e 81       	ldd	r24, Y+6	; 0x06
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	80 55       	subi	r24, 0x50	; 80
    16f6:	9b 4f       	sbci	r25, 0xFB	; 251
    16f8:	2e 81       	ldd	r18, Y+6	; 0x06
    16fa:	22 2f       	mov	r18, r18
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	20 55       	subi	r18, 0x50	; 80
    1700:	3b 4f       	sbci	r19, 0xFB	; 251
    1702:	f9 01       	movw	r30, r18
    1704:	20 81       	ld	r18, Z
    1706:	28 60       	ori	r18, 0x08	; 8
    1708:	fc 01       	movw	r30, r24
    170a:	20 83       	st	Z, r18
    170c:	8e 81       	ldd	r24, Y+6	; 0x06
    170e:	8f 5f       	subi	r24, 0xFF	; 255
    1710:	8e 83       	std	Y+6, r24	; 0x06
    1712:	8e 81       	ldd	r24, Y+6	; 0x06
    1714:	88 30       	cpi	r24, 0x08	; 8
    1716:	58 f3       	brcs	.-42     	; 0x16ee <mcu_init+0xf8>
    1718:	00 00       	nop
    171a:	26 96       	adiw	r28, 0x06	; 6
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	08 95       	ret

00001726 <USART_0_initialization>:
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	0e 94 83 0a 	call	0x1506	; 0x1506 <PC1_set_dir>
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <PC1_set_pull_mode>
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <PC0_set_dir>
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	0e 94 65 0a 	call	0x14ca	; 0x14ca <PC0_set_level>
    1746:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <USART_0_init>
    174a:	00 00       	nop
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	08 95       	ret

00001752 <SPI_0_initialization>:
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	0e 94 cf 09 	call	0x139e	; 0x139e <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	0e 94 c0 09 	call	0x1380	; 0x1380 <CONF_WIFI_M2M_SPI_MISO_PIN_set_pull_mode>
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	0e 94 a2 09 	call	0x1344	; 0x1344 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	0e 94 b1 09 	call	0x1362	; 0x1362 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	0e 94 de 09 	call	0x13bc	; 0x13bc <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	0e 94 ed 09 	call	0x13da	; 0x13da <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>
    177e:	0e 94 21 0c 	call	0x1842	; 0x1842 <SPI_0_init>
    1782:	00 00       	nop
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	08 95       	ret

0000178a <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    1792:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <mcu_init>
//	ADC_0_initialization();


	CLKCTRL_init();
    1796:	0e 94 c3 06 	call	0xd86	; 0xd86 <CLKCTRL_init>

//	scheduler_timeout_init();

	USART_0_initialization();
    179a:	0e 94 93 0b 	call	0x1726	; 0x1726 <USART_0_initialization>
	//return;
	/* PORT setting on PA2 */

	// Set pin direction to output
	CONF_WIFI_M2M_RESET_PIN_set_dir(PORT_DIR_OUT);
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	0e 94 66 09 	call	0x12cc	; 0x12cc <CONF_WIFI_M2M_RESET_PIN_set_dir>

	CONF_WIFI_M2M_RESET_PIN_set_level(
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	0e 94 75 09 	call	0x12ea	; 0x12ea <CONF_WIFI_M2M_RESET_PIN_set_level>
	    false);

	/* PORT setting on PA3 */

	// Set pin direction to output
	CONF_WIFI_M2M_WAKE_PIN_set_dir(PORT_DIR_OUT);
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	0e 94 84 09 	call	0x1308	; 0x1308 <CONF_WIFI_M2M_WAKE_PIN_set_dir>

	CONF_WIFI_M2M_WAKE_PIN_set_level(
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	0e 94 93 09 	call	0x1326	; 0x1326 <CONF_WIFI_M2M_WAKE_PIN_set_level>
	    false);

	/* PORT setting on PA7 */

	// Set pin direction to output
	CONF_WIFI_M2M_SPI_CS_PIN_set_dir(PORT_DIR_OUT);
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>

	CONF_WIFI_M2M_SPI_CS_PIN_set_level(
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	0e 94 0b 0a 	call	0x1416	; 0x1416 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>
	    true);

	/* PORT setting on PB2 */

	// Set pin direction to input
	SW0_set_dir(PORT_DIR_IN);
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	0e 94 29 0a 	call	0x1452	; 0x1452 <SW0_set_dir>

	SW0_set_pull_mode(
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	0e 94 1a 0a 	call	0x1434	; 0x1434 <SW0_set_pull_mode>
	    PORT_PULL_UP);

	/* PORT setting on PB5 */

	// Set pin direction to output
	LED0_set_dir(PORT_DIR_OUT);
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	0e 94 38 0a 	call	0x1470	; 0x1470 <LED0_set_dir>

	LED0_set_level(
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	0e 94 47 0a 	call	0x148e	; 0x148e <LED0_set_level>
	    // <true"> High
	    false);

	/* PORT setting on PC6 */

	CONF_WIFI_M2M_INT_PIN_set_dir(
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	0e 94 a1 0a 	call	0x1542	; 0x1542 <CONF_WIFI_M2M_INT_PIN_set_dir>
	    // <PORT_DIR_OFF"> Off
	    // <PORT_DIR_IN"> In
	    // <PORT_DIR_OUT"> Out
	    PORT_DIR_IN);

	CONF_WIFI_M2M_INT_PIN_set_level(
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	0e 94 ce 0a 	call	0x159c	; 0x159c <CONF_WIFI_M2M_INT_PIN_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CONF_WIFI_M2M_INT_PIN_set_pull_mode(
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	0e 94 92 0a 	call	0x1524	; 0x1524 <CONF_WIFI_M2M_INT_PIN_set_pull_mode>
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_UP);

	CONF_WIFI_M2M_INT_PIN_set_inverted(
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	0e 94 bf 0a 	call	0x157e	; 0x157e <CONF_WIFI_M2M_INT_PIN_set_inverted>
	    // <id> pad_invert
	    // <false"> Not inverted
	    // <true"> Inverted
	    false);

	CONF_WIFI_M2M_INT_PIN_set_isc(
    17f2:	83 e0       	ldi	r24, 0x03	; 3
    17f4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <CONF_WIFI_M2M_INT_PIN_set_isc>
	    PORT_ISC_FALLING_gc);

	/* PORT setting on PC7 */

	// Set pin direction to output
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir(PORT_DIR_OUT);
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>

	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CLKCTRL_init();
    1804:	0e 94 c3 06 	call	0xd86	; 0xd86 <CLKCTRL_init>

	scheduler_timeout_init();
    1808:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <scheduler_timeout_init>

	USART_0_initialization();
    180c:	0e 94 93 0b 	call	0x1726	; 0x1726 <USART_0_initialization>

	SPI_0_initialization();
    1810:	0e 94 a9 0b 	call	0x1752	; 0x1752 <SPI_0_initialization>

	CPUINT_init();
    1814:	0e 94 d0 06 	call	0xda0	; 0xda0 <CPUINT_init>

	SLPCTRL_init();
    1818:	0e 94 19 0c 	call	0x1832	; 0x1832 <SLPCTRL_init>

	BOD_init();
    181c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <BOD_init>
}
    1820:	00 00       	nop
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	08 95       	ret

00001828 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    1828:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    182a:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    182c:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    182e:	40 83       	st	Z, r20
	ret                             // Return to caller
    1830:	08 95       	ret

00001832 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
    183a:	80 e0       	ldi	r24, 0x00	; 0
}
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	08 95       	ret

00001842 <SPI_0_init>:
 * \return Nothing
 */
void SPI_0_disable()
{
	SPI0.CTRLA &= ~SPI_ENABLE_bm;
}
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	80 ec       	ldi	r24, 0xC0	; 192
    184c:	98 e0       	ldi	r25, 0x08	; 8
    184e:	21 e3       	ldi	r18, 0x31	; 49
    1850:	fc 01       	movw	r30, r24
    1852:	20 83       	st	Z, r18
    1854:	10 92 fd 2d 	sts	0x2DFD, r1	; 0x802dfd <SPI_0_desc>
    1858:	00 00       	nop
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <SPI_0_enable>:
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	80 ec       	ldi	r24, 0xC0	; 192
    186a:	98 e0       	ldi	r25, 0x08	; 8
    186c:	20 ec       	ldi	r18, 0xC0	; 192
    186e:	38 e0       	ldi	r19, 0x08	; 8
    1870:	f9 01       	movw	r30, r18
    1872:	20 81       	ld	r18, Z
    1874:	21 60       	ori	r18, 0x01	; 1
    1876:	fc 01       	movw	r30, r24
    1878:	20 83       	st	Z, r18
    187a:	00 00       	nop
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <SPI_0_exchange_byte>:
 * \param[in] data The byte to transfer
 *
 * \return Received data byte.
 */
uint8_t SPI_0_exchange_byte(uint8_t data)
{
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	1f 92       	push	r1
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	89 83       	std	Y+1, r24	; 0x01
	// Blocking wait for SPI free makes the function work
	// seamlessly also with IRQ drivers.
	while (SPI_0_desc.status == SPI_BUSY)
    188e:	00 00       	nop
    1890:	80 91 fd 2d 	lds	r24, 0x2DFD	; 0x802dfd <SPI_0_desc>
    1894:	82 30       	cpi	r24, 0x02	; 2
    1896:	e1 f3       	breq	.-8      	; 0x1890 <SPI_0_exchange_byte+0xe>
		;
	SPI0.DATA = data;
    1898:	80 ec       	ldi	r24, 0xC0	; 192
    189a:	98 e0       	ldi	r25, 0x08	; 8
    189c:	29 81       	ldd	r18, Y+1	; 0x01
    189e:	fc 01       	movw	r30, r24
    18a0:	24 83       	std	Z+4, r18	; 0x04
	while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
    18a2:	00 00       	nop
    18a4:	80 ec       	ldi	r24, 0xC0	; 192
    18a6:	98 e0       	ldi	r25, 0x08	; 8
    18a8:	fc 01       	movw	r30, r24
    18aa:	83 81       	ldd	r24, Z+3	; 0x03
    18ac:	88 23       	and	r24, r24
    18ae:	d4 f7       	brge	.-12     	; 0x18a4 <SPI_0_exchange_byte+0x22>
		;
	return SPI0.DATA;
    18b0:	80 ec       	ldi	r24, 0xC0	; 192
    18b2:	98 e0       	ldi	r25, 0x08	; 8
    18b4:	fc 01       	movw	r30, r24
    18b6:	84 81       	ldd	r24, Z+4	; 0x04
}
    18b8:	0f 90       	pop	r0
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <scheduler_dummy_handler>:
		scheduler_start_timer_at_head();
	} else {
		if (scheduler_is_running)
			RTC.INTCTRL |= RTC_OVF_bm;
	}
}
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <scheduler_dummy_handler+0x6>
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	9a 83       	std	Y+2, r25	; 0x02
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	dc 01       	movw	r26, r24
    18d4:	bc 01       	movw	r22, r24
    18d6:	cd 01       	movw	r24, r26
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	08 95       	ret

000018e2 <scheduler_timeout_init>:
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	00 00       	nop
    18ec:	80 e4       	ldi	r24, 0x40	; 64
    18ee:	91 e0       	ldi	r25, 0x01	; 1
    18f0:	fc 01       	movw	r30, r24
    18f2:	81 81       	ldd	r24, Z+1	; 0x01
    18f4:	88 23       	and	r24, r24
    18f6:	d1 f7       	brne	.-12     	; 0x18ec <scheduler_timeout_init+0xa>
    18f8:	80 e4       	ldi	r24, 0x40	; 64
    18fa:	91 e0       	ldi	r25, 0x01	; 1
    18fc:	21 e0       	ldi	r18, 0x01	; 1
    18fe:	fc 01       	movw	r30, r24
    1900:	20 83       	st	Z, r18
    1902:	80 e4       	ldi	r24, 0x40	; 64
    1904:	91 e0       	ldi	r25, 0x01	; 1
    1906:	21 e0       	ldi	r18, 0x01	; 1
    1908:	fc 01       	movw	r30, r24
    190a:	27 83       	std	Z+7, r18	; 0x07
    190c:	80 e4       	ldi	r24, 0x40	; 64
    190e:	91 e0       	ldi	r25, 0x01	; 1
    1910:	21 e0       	ldi	r18, 0x01	; 1
    1912:	fc 01       	movw	r30, r24
    1914:	22 83       	std	Z+2, r18	; 0x02
    1916:	00 00       	nop
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	08 95       	ret

0000191e <scheduler_stop_timeouts>:
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	80 e4       	ldi	r24, 0x40	; 64
    1928:	91 e0       	ldi	r25, 0x01	; 1
    192a:	20 e4       	ldi	r18, 0x40	; 64
    192c:	31 e0       	ldi	r19, 0x01	; 1
    192e:	f9 01       	movw	r30, r18
    1930:	22 81       	ldd	r18, Z+2	; 0x02
    1932:	2e 7f       	andi	r18, 0xFE	; 254
    1934:	fc 01       	movw	r30, r24
    1936:	22 83       	std	Z+2, r18	; 0x02
    1938:	10 92 02 2e 	sts	0x2E02, r1	; 0x802e02 <scheduler_absolute_time_of_last_timeout>
    193c:	10 92 03 2e 	sts	0x2E03, r1	; 0x802e03 <scheduler_absolute_time_of_last_timeout+0x1>
    1940:	10 92 04 2e 	sts	0x2E04, r1	; 0x802e04 <scheduler_absolute_time_of_last_timeout+0x2>
    1944:	10 92 05 2e 	sts	0x2E05, r1	; 0x802e05 <scheduler_absolute_time_of_last_timeout+0x3>
    1948:	10 92 0a 2e 	sts	0x2E0A, r1	; 0x802e0a <scheduler_is_running>
    194c:	00 00       	nop
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	08 95       	ret

00001954 <scheduler_set_timer_duration>:
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	00 d0       	rcall	.+0      	; 0x1962 <scheduler_set_timer_duration+0xe>
    1962:	00 d0       	rcall	.+0      	; 0x1964 <scheduler_set_timer_duration+0x10>
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	69 83       	std	Y+1, r22	; 0x01
    196a:	7a 83       	std	Y+2, r23	; 0x02
    196c:	8b 83       	std	Y+3, r24	; 0x03
    196e:	9c 83       	std	Y+4, r25	; 0x04
    1970:	2f ef       	ldi	r18, 0xFF	; 255
    1972:	3f ef       	ldi	r19, 0xFF	; 255
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	50 e0       	ldi	r21, 0x00	; 0
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	9a 81       	ldd	r25, Y+2	; 0x02
    197c:	ab 81       	ldd	r26, Y+3	; 0x03
    197e:	bc 81       	ldd	r27, Y+4	; 0x04
    1980:	79 01       	movw	r14, r18
    1982:	8a 01       	movw	r16, r20
    1984:	e8 1a       	sub	r14, r24
    1986:	f9 0a       	sbc	r15, r25
    1988:	0a 0b       	sbc	r16, r26
    198a:	1b 0b       	sbc	r17, r27
    198c:	d8 01       	movw	r26, r16
    198e:	c7 01       	movw	r24, r14
    1990:	80 93 06 2e 	sts	0x2E06, r24	; 0x802e06 <scheduler_last_timer_load>
    1994:	90 93 07 2e 	sts	0x2E07, r25	; 0x802e07 <scheduler_last_timer_load+0x1>
    1998:	a0 93 08 2e 	sts	0x2E08, r26	; 0x802e08 <scheduler_last_timer_load+0x2>
    199c:	b0 93 09 2e 	sts	0x2E09, r27	; 0x802e09 <scheduler_last_timer_load+0x3>
    19a0:	20 e4       	ldi	r18, 0x40	; 64
    19a2:	31 e0       	ldi	r19, 0x01	; 1
    19a4:	80 91 06 2e 	lds	r24, 0x2E06	; 0x802e06 <scheduler_last_timer_load>
    19a8:	90 91 07 2e 	lds	r25, 0x2E07	; 0x802e07 <scheduler_last_timer_load+0x1>
    19ac:	a0 91 08 2e 	lds	r26, 0x2E08	; 0x802e08 <scheduler_last_timer_load+0x2>
    19b0:	b0 91 09 2e 	lds	r27, 0x2E09	; 0x802e09 <scheduler_last_timer_load+0x3>
    19b4:	f9 01       	movw	r30, r18
    19b6:	80 87       	std	Z+8, r24	; 0x08
    19b8:	91 87       	std	Z+9, r25	; 0x09
    19ba:	00 00       	nop
    19bc:	80 e4       	ldi	r24, 0x40	; 64
    19be:	91 e0       	ldi	r25, 0x01	; 1
    19c0:	fc 01       	movw	r30, r24
    19c2:	81 81       	ldd	r24, Z+1	; 0x01
    19c4:	88 2f       	mov	r24, r24
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	82 70       	andi	r24, 0x02	; 2
    19ca:	99 27       	eor	r25, r25
    19cc:	89 2b       	or	r24, r25
    19ce:	b1 f7       	brne	.-20     	; 0x19bc <scheduler_set_timer_duration+0x68>
    19d0:	00 00       	nop
    19d2:	24 96       	adiw	r28, 0x04	; 4
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	ff 90       	pop	r15
    19e2:	ef 90       	pop	r14
    19e4:	08 95       	ret

000019e6 <scheduler_start_timer_at_head>:
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <scheduler_start_timer_at_head+0x6>
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <scheduler_start_timer_at_head+0x8>
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	80 e4       	ldi	r24, 0x40	; 64
    19f4:	91 e0       	ldi	r25, 0x01	; 1
    19f6:	20 e4       	ldi	r18, 0x40	; 64
    19f8:	31 e0       	ldi	r19, 0x01	; 1
    19fa:	f9 01       	movw	r30, r18
    19fc:	22 81       	ldd	r18, Z+2	; 0x02
    19fe:	2e 7f       	andi	r18, 0xFE	; 254
    1a00:	fc 01       	movw	r30, r24
    1a02:	22 83       	std	Z+2, r18	; 0x02
    1a04:	80 91 fe 2d 	lds	r24, 0x2DFE	; 0x802dfe <scheduler_list_head>
    1a08:	90 91 ff 2d 	lds	r25, 0x2DFF	; 0x802dff <scheduler_list_head+0x1>
    1a0c:	89 2b       	or	r24, r25
    1a0e:	19 f4       	brne	.+6      	; 0x1a16 <scheduler_start_timer_at_head+0x30>
    1a10:	0e 94 8f 0c 	call	0x191e	; 0x191e <scheduler_stop_timeouts>
    1a14:	68 c0       	rjmp	.+208    	; 0x1ae6 <scheduler_start_timer_at_head+0x100>
    1a16:	80 91 fe 2d 	lds	r24, 0x2DFE	; 0x802dfe <scheduler_list_head>
    1a1a:	90 91 ff 2d 	lds	r25, 0x2DFF	; 0x802dff <scheduler_list_head+0x1>
    1a1e:	89 2b       	or	r24, r25
    1a20:	51 f0       	breq	.+20     	; 0x1a36 <scheduler_start_timer_at_head+0x50>
    1a22:	80 91 fe 2d 	lds	r24, 0x2DFE	; 0x802dfe <scheduler_list_head>
    1a26:	90 91 ff 2d 	lds	r25, 0x2DFF	; 0x802dff <scheduler_list_head+0x1>
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	86 81       	ldd	r24, Z+6	; 0x06
    1a2e:	97 81       	ldd	r25, Z+7	; 0x07
    1a30:	a0 85       	ldd	r26, Z+8	; 0x08
    1a32:	b1 85       	ldd	r27, Z+9	; 0x09
    1a34:	03 c0       	rjmp	.+6      	; 0x1a3c <scheduler_start_timer_at_head+0x56>
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	20 91 02 2e 	lds	r18, 0x2E02	; 0x802e02 <scheduler_absolute_time_of_last_timeout>
    1a40:	30 91 03 2e 	lds	r19, 0x2E03	; 0x802e03 <scheduler_absolute_time_of_last_timeout+0x1>
    1a44:	40 91 04 2e 	lds	r20, 0x2E04	; 0x802e04 <scheduler_absolute_time_of_last_timeout+0x2>
    1a48:	50 91 05 2e 	lds	r21, 0x2E05	; 0x802e05 <scheduler_absolute_time_of_last_timeout+0x3>
    1a4c:	82 1b       	sub	r24, r18
    1a4e:	93 0b       	sbc	r25, r19
    1a50:	a4 0b       	sbc	r26, r20
    1a52:	b5 0b       	sbc	r27, r21
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	ab 83       	std	Y+3, r26	; 0x03
    1a5a:	bc 83       	std	Y+4, r27	; 0x04
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a60:	ab 81       	ldd	r26, Y+3	; 0x03
    1a62:	bc 81       	ldd	r27, Y+4	; 0x04
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	a1 40       	sbci	r26, 0x01	; 1
    1a68:	b1 05       	cpc	r27, r1
    1a6a:	48 f1       	brcs	.+82     	; 0x1abe <scheduler_start_timer_at_head+0xd8>
    1a6c:	80 91 02 2e 	lds	r24, 0x2E02	; 0x802e02 <scheduler_absolute_time_of_last_timeout>
    1a70:	90 91 03 2e 	lds	r25, 0x2E03	; 0x802e03 <scheduler_absolute_time_of_last_timeout+0x1>
    1a74:	a0 91 04 2e 	lds	r26, 0x2E04	; 0x802e04 <scheduler_absolute_time_of_last_timeout+0x2>
    1a78:	b0 91 05 2e 	lds	r27, 0x2E05	; 0x802e05 <scheduler_absolute_time_of_last_timeout+0x3>
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	af 4f       	sbci	r26, 0xFF	; 255
    1a80:	bf 4f       	sbci	r27, 0xFF	; 255
    1a82:	80 93 3f 28 	sts	0x283F, r24	; 0x80283f <scheduler_dummy+0x6>
    1a86:	90 93 40 28 	sts	0x2840, r25	; 0x802840 <scheduler_dummy+0x7>
    1a8a:	a0 93 41 28 	sts	0x2841, r26	; 0x802841 <scheduler_dummy+0x8>
    1a8e:	b0 93 42 28 	sts	0x2842, r27	; 0x802842 <scheduler_dummy+0x9>
    1a92:	80 91 fe 2d 	lds	r24, 0x2DFE	; 0x802dfe <scheduler_list_head>
    1a96:	90 91 ff 2d 	lds	r25, 0x2DFF	; 0x802dff <scheduler_list_head+0x1>
    1a9a:	80 93 3d 28 	sts	0x283D, r24	; 0x80283d <scheduler_dummy+0x4>
    1a9e:	90 93 3e 28 	sts	0x283E, r25	; 0x80283e <scheduler_dummy+0x5>
    1aa2:	89 e3       	ldi	r24, 0x39	; 57
    1aa4:	98 e2       	ldi	r25, 0x28	; 40
    1aa6:	80 93 fe 2d 	sts	0x2DFE, r24	; 0x802dfe <scheduler_list_head>
    1aaa:	90 93 ff 2d 	sts	0x2DFF, r25	; 0x802dff <scheduler_list_head+0x1>
    1aae:	8f ef       	ldi	r24, 0xFF	; 255
    1ab0:	9f ef       	ldi	r25, 0xFF	; 255
    1ab2:	a0 e0       	ldi	r26, 0x00	; 0
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	ab 83       	std	Y+3, r26	; 0x03
    1abc:	bc 83       	std	Y+4, r27	; 0x04
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac2:	ab 81       	ldd	r26, Y+3	; 0x03
    1ac4:	bc 81       	ldd	r27, Y+4	; 0x04
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	0e 94 aa 0c 	call	0x1954	; 0x1954 <scheduler_set_timer_duration>
    1ace:	80 e4       	ldi	r24, 0x40	; 64
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	20 e4       	ldi	r18, 0x40	; 64
    1ad4:	31 e0       	ldi	r19, 0x01	; 1
    1ad6:	f9 01       	movw	r30, r18
    1ad8:	22 81       	ldd	r18, Z+2	; 0x02
    1ada:	21 60       	ori	r18, 0x01	; 1
    1adc:	fc 01       	movw	r30, r24
    1ade:	22 83       	std	Z+2, r18	; 0x02
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	80 93 0a 2e 	sts	0x2E0A, r24	; 0x802e0a <scheduler_is_running>
    1ae6:	24 96       	adiw	r28, 0x04	; 4
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	08 95       	ret

00001af2 <scheduler_enqueue_callback>:
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <scheduler_enqueue_callback+0x6>
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <scheduler_enqueue_callback+0x8>
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	8b 83       	std	Y+3, r24	; 0x03
    1b00:	9c 83       	std	Y+4, r25	; 0x04
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
    1b06:	fc 01       	movw	r30, r24
    1b08:	14 82       	std	Z+4, r1	; 0x04
    1b0a:	15 82       	std	Z+5, r1	; 0x05
    1b0c:	80 91 00 2e 	lds	r24, 0x2E00	; 0x802e00 <scheduler_execute_queue_head>
    1b10:	90 91 01 2e 	lds	r25, 0x2E01	; 0x802e01 <scheduler_execute_queue_head+0x1>
    1b14:	89 2b       	or	r24, r25
    1b16:	39 f4       	brne	.+14     	; 0x1b26 <scheduler_enqueue_callback+0x34>
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1c:	80 93 00 2e 	sts	0x2E00, r24	; 0x802e00 <scheduler_execute_queue_head>
    1b20:	90 93 01 2e 	sts	0x2E01, r25	; 0x802e01 <scheduler_execute_queue_head+0x1>
    1b24:	1c c0       	rjmp	.+56     	; 0x1b5e <scheduler_enqueue_callback+0x6c>
    1b26:	80 91 00 2e 	lds	r24, 0x2E00	; 0x802e00 <scheduler_execute_queue_head>
    1b2a:	90 91 01 2e 	lds	r25, 0x2E01	; 0x802e01 <scheduler_execute_queue_head+0x1>
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	07 c0       	rjmp	.+14     	; 0x1b42 <scheduler_enqueue_callback+0x50>
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	fc 01       	movw	r30, r24
    1b3a:	84 81       	ldd	r24, Z+4	; 0x04
    1b3c:	95 81       	ldd	r25, Z+5	; 0x05
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	9a 83       	std	Y+2, r25	; 0x02
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	9a 81       	ldd	r25, Y+2	; 0x02
    1b46:	fc 01       	movw	r30, r24
    1b48:	84 81       	ldd	r24, Z+4	; 0x04
    1b4a:	95 81       	ldd	r25, Z+5	; 0x05
    1b4c:	89 2b       	or	r24, r25
    1b4e:	91 f7       	brne	.-28     	; 0x1b34 <scheduler_enqueue_callback+0x42>
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	9a 81       	ldd	r25, Y+2	; 0x02
    1b54:	2b 81       	ldd	r18, Y+3	; 0x03
    1b56:	3c 81       	ldd	r19, Y+4	; 0x04
    1b58:	fc 01       	movw	r30, r24
    1b5a:	24 83       	std	Z+4, r18	; 0x04
    1b5c:	35 83       	std	Z+5, r19	; 0x05
    1b5e:	24 96       	adiw	r28, 0x04	; 4
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	08 95       	ret

00001b6a <__vector_3>:

// NOTE: assumes the callback completes before the next timer tick
ISR(RTC_CNT_vect)
{
    1b6a:	1f 92       	push	r1
    1b6c:	0f 92       	push	r0
    1b6e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1b72:	0f 92       	push	r0
    1b74:	11 24       	eor	r1, r1
    1b76:	2f 93       	push	r18
    1b78:	3f 93       	push	r19
    1b7a:	4f 93       	push	r20
    1b7c:	5f 93       	push	r21
    1b7e:	6f 93       	push	r22
    1b80:	7f 93       	push	r23
    1b82:	8f 93       	push	r24
    1b84:	9f 93       	push	r25
    1b86:	af 93       	push	r26
    1b88:	bf 93       	push	r27
    1b8a:	ef 93       	push	r30
    1b8c:	ff 93       	push	r31
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <__vector_3+0x2a>
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
	timer_struct_t *next                    = scheduler_list_head->next;
    1b98:	80 91 fe 2d 	lds	r24, 0x2DFE	; 0x802dfe <scheduler_list_head>
    1b9c:	90 91 ff 2d 	lds	r25, 0x2DFF	; 0x802dff <scheduler_list_head+0x1>
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	84 81       	ldd	r24, Z+4	; 0x04
    1ba4:	95 81       	ldd	r25, Z+5	; 0x05
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	9a 83       	std	Y+2, r25	; 0x02
	scheduler_absolute_time_of_last_timeout = scheduler_list_head->absolute_time;
    1baa:	80 91 fe 2d 	lds	r24, 0x2DFE	; 0x802dfe <scheduler_list_head>
    1bae:	90 91 ff 2d 	lds	r25, 0x2DFF	; 0x802dff <scheduler_list_head+0x1>
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	86 81       	ldd	r24, Z+6	; 0x06
    1bb6:	97 81       	ldd	r25, Z+7	; 0x07
    1bb8:	a0 85       	ldd	r26, Z+8	; 0x08
    1bba:	b1 85       	ldd	r27, Z+9	; 0x09
    1bbc:	80 93 02 2e 	sts	0x2E02, r24	; 0x802e02 <scheduler_absolute_time_of_last_timeout>
    1bc0:	90 93 03 2e 	sts	0x2E03, r25	; 0x802e03 <scheduler_absolute_time_of_last_timeout+0x1>
    1bc4:	a0 93 04 2e 	sts	0x2E04, r26	; 0x802e04 <scheduler_absolute_time_of_last_timeout+0x2>
    1bc8:	b0 93 05 2e 	sts	0x2E05, r27	; 0x802e05 <scheduler_absolute_time_of_last_timeout+0x3>
	scheduler_last_timer_load               = 0;
    1bcc:	10 92 06 2e 	sts	0x2E06, r1	; 0x802e06 <scheduler_last_timer_load>
    1bd0:	10 92 07 2e 	sts	0x2E07, r1	; 0x802e07 <scheduler_last_timer_load+0x1>
    1bd4:	10 92 08 2e 	sts	0x2E08, r1	; 0x802e08 <scheduler_last_timer_load+0x2>
    1bd8:	10 92 09 2e 	sts	0x2E09, r1	; 0x802e09 <scheduler_last_timer_load+0x3>

	if (scheduler_list_head != &scheduler_dummy)
    1bdc:	80 91 fe 2d 	lds	r24, 0x2DFE	; 0x802dfe <scheduler_list_head>
    1be0:	90 91 ff 2d 	lds	r25, 0x2DFF	; 0x802dff <scheduler_list_head+0x1>
    1be4:	89 53       	subi	r24, 0x39	; 57
    1be6:	98 42       	sbci	r25, 0x28	; 40
    1be8:	31 f0       	breq	.+12     	; 0x1bf6 <__vector_3+0x8c>
		scheduler_enqueue_callback(scheduler_list_head);
    1bea:	80 91 fe 2d 	lds	r24, 0x2DFE	; 0x802dfe <scheduler_list_head>
    1bee:	90 91 ff 2d 	lds	r25, 0x2DFF	; 0x802dff <scheduler_list_head+0x1>
    1bf2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <scheduler_enqueue_callback>

	// Remove expired timer for the list now (it is always the one at the head)
	scheduler_list_head = next;
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfa:	80 93 fe 2d 	sts	0x2DFE, r24	; 0x802dfe <scheduler_list_head>
    1bfe:	90 93 ff 2d 	sts	0x2DFF, r25	; 0x802dff <scheduler_list_head+0x1>

	scheduler_start_timer_at_head();
    1c02:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <scheduler_start_timer_at_head>

	RTC.INTFLAGS = RTC_OVF_bm;
    1c06:	80 e4       	ldi	r24, 0x40	; 64
    1c08:	91 e0       	ldi	r25, 0x01	; 1
    1c0a:	21 e0       	ldi	r18, 0x01	; 1
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	23 83       	std	Z+3, r18	; 0x03
}
    1c10:	00 00       	nop
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	ff 91       	pop	r31
    1c1c:	ef 91       	pop	r30
    1c1e:	bf 91       	pop	r27
    1c20:	af 91       	pop	r26
    1c22:	9f 91       	pop	r25
    1c24:	8f 91       	pop	r24
    1c26:	7f 91       	pop	r23
    1c28:	6f 91       	pop	r22
    1c2a:	5f 91       	pop	r21
    1c2c:	4f 91       	pop	r20
    1c2e:	3f 91       	pop	r19
    1c30:	2f 91       	pop	r18
    1c32:	0f 90       	pop	r0
    1c34:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1c38:	0f 90       	pop	r0
    1c3a:	1f 90       	pop	r1
    1c3c:	18 95       	reti

00001c3e <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART1.STATUS & USART_RXCIF_bm))
		;
	return USART1.RXDATAL;
}
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	80 e2       	ldi	r24, 0x20	; 32
    1c48:	98 e0       	ldi	r25, 0x08	; 8
    1c4a:	2c e2       	ldi	r18, 0x2C	; 44
    1c4c:	32 e0       	ldi	r19, 0x02	; 2
    1c4e:	fc 01       	movw	r30, r24
    1c50:	20 87       	std	Z+8, r18	; 0x08
    1c52:	31 87       	std	Z+9, r19	; 0x09
    1c54:	80 e2       	ldi	r24, 0x20	; 32
    1c56:	98 e0       	ldi	r25, 0x08	; 8
    1c58:	20 ec       	ldi	r18, 0xC0	; 192
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	26 83       	std	Z+6, r18	; 0x06
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	08 95       	ret

00001c66 <USART_1_write>:
 * \param[in] data The character to write to the USART
 *
 * \return Nothing
 */
void USART_1_write(const uint8_t data)
{
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	1f 92       	push	r1
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	89 83       	std	Y+1, r24	; 0x01
	while (!(USART1.STATUS & USART_DREIF_bm))
    1c72:	00 00       	nop
    1c74:	80 e2       	ldi	r24, 0x20	; 32
    1c76:	98 e0       	ldi	r25, 0x08	; 8
    1c78:	fc 01       	movw	r30, r24
    1c7a:	84 81       	ldd	r24, Z+4	; 0x04
    1c7c:	88 2f       	mov	r24, r24
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	80 72       	andi	r24, 0x20	; 32
    1c82:	99 27       	eor	r25, r25
    1c84:	89 2b       	or	r24, r25
    1c86:	b1 f3       	breq	.-20     	; 0x1c74 <USART_1_write+0xe>
		;
	USART1.TXDATAL = data;
    1c88:	80 e2       	ldi	r24, 0x20	; 32
    1c8a:	98 e0       	ldi	r25, 0x08	; 8
    1c8c:	29 81       	ldd	r18, Y+1	; 0x01
    1c8e:	fc 01       	movw	r30, r24
    1c90:	22 83       	std	Z+2, r18	; 0x02
}
    1c92:	00 00       	nop
    1c94:	0f 90       	pop	r0
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	08 95       	ret

00001c9c <PORTA_set_pin_dir>:
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_deinit(void)
{
	return M2M_SUCCESS;
}
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <PORTA_set_pin_dir+0x6>
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	6a 83       	std	Y+2, r22	; 0x02
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	88 2f       	mov	r24, r24
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	81 30       	cpi	r24, 0x01	; 1
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	e1 f0       	breq	.+56     	; 0x1cee <PORTA_set_pin_dir+0x52>
    1cb6:	82 30       	cpi	r24, 0x02	; 2
    1cb8:	91 05       	cpc	r25, r1
    1cba:	71 f1       	breq	.+92     	; 0x1d18 <PORTA_set_pin_dir+0x7c>
    1cbc:	89 2b       	or	r24, r25
    1cbe:	09 f0       	breq	.+2      	; 0x1cc2 <PORTA_set_pin_dir+0x26>
    1cc0:	3b c0       	rjmp	.+118    	; 0x1d38 <PORTA_set_pin_dir+0x9c>
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	fc 01       	movw	r30, r24
    1ccc:	80 81       	ld	r24, Z
    1cce:	68 2f       	mov	r22, r24
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	48 2f       	mov	r20, r24
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <PORTA_set_pin_dir+0x44>
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	4a 95       	dec	r20
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <PORTA_set_pin_dir+0x40>
    1ce4:	80 95       	com	r24
    1ce6:	86 23       	and	r24, r22
    1ce8:	f9 01       	movw	r30, r18
    1cea:	80 83       	st	Z, r24
    1cec:	25 c0       	rjmp	.+74     	; 0x1d38 <PORTA_set_pin_dir+0x9c>
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	80 81       	ld	r24, Z
    1cfa:	68 2f       	mov	r22, r24
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	48 2f       	mov	r20, r24
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <PORTA_set_pin_dir+0x70>
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	4a 95       	dec	r20
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <PORTA_set_pin_dir+0x6c>
    1d10:	86 2b       	or	r24, r22
    1d12:	f9 01       	movw	r30, r18
    1d14:	80 83       	st	Z, r24
    1d16:	10 c0       	rjmp	.+32     	; 0x1d38 <PORTA_set_pin_dir+0x9c>
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	88 2f       	mov	r24, r24
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	80 5f       	subi	r24, 0xF0	; 240
    1d20:	9b 4f       	sbci	r25, 0xFB	; 251
    1d22:	29 81       	ldd	r18, Y+1	; 0x01
    1d24:	22 2f       	mov	r18, r18
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	20 5f       	subi	r18, 0xF0	; 240
    1d2a:	3b 4f       	sbci	r19, 0xFB	; 251
    1d2c:	f9 01       	movw	r30, r18
    1d2e:	20 81       	ld	r18, Z
    1d30:	28 60       	ori	r18, 0x08	; 8
    1d32:	fc 01       	movw	r30, r24
    1d34:	20 83       	st	Z, r18
    1d36:	00 00       	nop
    1d38:	00 00       	nop
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	08 95       	ret

00001d44 <PORTA_set_pin_level>:
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <PORTA_set_pin_level+0x6>
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	6a 83       	std	Y+2, r22	; 0x02
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	88 23       	and	r24, r24
    1d56:	a9 f0       	breq	.+42     	; 0x1d82 <PORTA_set_pin_level+0x3e>
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	fc 01       	movw	r30, r24
    1d62:	81 81       	ldd	r24, Z+1	; 0x01
    1d64:	68 2f       	mov	r22, r24
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	48 2f       	mov	r20, r24
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <PORTA_set_pin_level+0x32>
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	4a 95       	dec	r20
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <PORTA_set_pin_level+0x2e>
    1d7a:	86 2b       	or	r24, r22
    1d7c:	f9 01       	movw	r30, r18
    1d7e:	81 83       	std	Z+1, r24	; 0x01
    1d80:	15 c0       	rjmp	.+42     	; 0x1dac <PORTA_set_pin_level+0x68>
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	81 81       	ldd	r24, Z+1	; 0x01
    1d8e:	68 2f       	mov	r22, r24
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	48 2f       	mov	r20, r24
    1d94:	50 e0       	ldi	r21, 0x00	; 0
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <PORTA_set_pin_level+0x5c>
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	4a 95       	dec	r20
    1da2:	e2 f7       	brpl	.-8      	; 0x1d9c <PORTA_set_pin_level+0x58>
    1da4:	80 95       	com	r24
    1da6:	86 23       	and	r24, r22
    1da8:	f9 01       	movw	r30, r18
    1daa:	81 83       	std	Z+1, r24	; 0x01
    1dac:	00 00       	nop
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	08 95       	ret

00001db8 <PORTC_set_pin_pull_mode>:
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <PORTC_set_pin_pull_mode+0x6>
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <PORTC_set_pin_pull_mode+0x8>
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	8b 83       	std	Y+3, r24	; 0x03
    1dc6:	6c 83       	std	Y+4, r22	; 0x04
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	80 5b       	subi	r24, 0xB0	; 176
    1dd0:	9b 4f       	sbci	r25, 0xFB	; 251
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	9a 83       	std	Y+2, r25	; 0x02
    1dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd8:	81 30       	cpi	r24, 0x01	; 1
    1dda:	59 f4       	brne	.+22     	; 0x1df2 <PORTC_set_pin_pull_mode+0x3a>
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	9a 81       	ldd	r25, Y+2	; 0x02
    1de0:	fc 01       	movw	r30, r24
    1de2:	80 81       	ld	r24, Z
    1de4:	28 2f       	mov	r18, r24
    1de6:	28 60       	ori	r18, 0x08	; 8
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	9a 81       	ldd	r25, Y+2	; 0x02
    1dec:	fc 01       	movw	r30, r24
    1dee:	20 83       	st	Z, r18
    1df0:	0d c0       	rjmp	.+26     	; 0x1e0c <PORTC_set_pin_pull_mode+0x54>
    1df2:	8c 81       	ldd	r24, Y+4	; 0x04
    1df4:	88 23       	and	r24, r24
    1df6:	51 f4       	brne	.+20     	; 0x1e0c <PORTC_set_pin_pull_mode+0x54>
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	80 81       	ld	r24, Z
    1e00:	28 2f       	mov	r18, r24
    1e02:	27 7f       	andi	r18, 0xF7	; 247
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	9a 81       	ldd	r25, Y+2	; 0x02
    1e08:	fc 01       	movw	r30, r24
    1e0a:	20 83       	st	Z, r18
    1e0c:	00 00       	nop
    1e0e:	24 96       	adiw	r28, 0x04	; 4
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	08 95       	ret

00001e1a <PORTC_pin_set_isc>:
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <PORTC_pin_set_isc+0x6>
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <PORTC_pin_set_isc+0x8>
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	8b 83       	std	Y+3, r24	; 0x03
    1e28:	6c 83       	std	Y+4, r22	; 0x04
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	88 2f       	mov	r24, r24
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	80 5b       	subi	r24, 0xB0	; 176
    1e32:	9b 4f       	sbci	r25, 0xFB	; 251
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	9a 83       	std	Y+2, r25	; 0x02
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	80 81       	ld	r24, Z
    1e40:	98 2f       	mov	r25, r24
    1e42:	98 7f       	andi	r25, 0xF8	; 248
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	89 2b       	or	r24, r25
    1e48:	28 2f       	mov	r18, r24
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4e:	fc 01       	movw	r30, r24
    1e50:	20 83       	st	Z, r18
    1e52:	00 00       	nop
    1e54:	24 96       	adiw	r28, 0x04	; 4
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	08 95       	ret

00001e60 <PORTC_set_pin_dir>:
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <PORTC_set_pin_dir+0x6>
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    1e6c:	6a 83       	std	Y+2, r22	; 0x02
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	88 2f       	mov	r24, r24
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	81 30       	cpi	r24, 0x01	; 1
    1e76:	91 05       	cpc	r25, r1
    1e78:	e1 f0       	breq	.+56     	; 0x1eb2 <PORTC_set_pin_dir+0x52>
    1e7a:	82 30       	cpi	r24, 0x02	; 2
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	71 f1       	breq	.+92     	; 0x1edc <PORTC_set_pin_dir+0x7c>
    1e80:	89 2b       	or	r24, r25
    1e82:	09 f0       	breq	.+2      	; 0x1e86 <PORTC_set_pin_dir+0x26>
    1e84:	3b c0       	rjmp	.+118    	; 0x1efc <PORTC_set_pin_dir+0x9c>
    1e86:	88 e0       	ldi	r24, 0x08	; 8
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	28 e0       	ldi	r18, 0x08	; 8
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	f9 01       	movw	r30, r18
    1e90:	20 81       	ld	r18, Z
    1e92:	62 2f       	mov	r22, r18
    1e94:	29 81       	ldd	r18, Y+1	; 0x01
    1e96:	42 2f       	mov	r20, r18
    1e98:	50 e0       	ldi	r21, 0x00	; 0
    1e9a:	21 e0       	ldi	r18, 0x01	; 1
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <PORTC_set_pin_dir+0x44>
    1ea0:	22 0f       	add	r18, r18
    1ea2:	33 1f       	adc	r19, r19
    1ea4:	4a 95       	dec	r20
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <PORTC_set_pin_dir+0x40>
    1ea8:	20 95       	com	r18
    1eaa:	26 23       	and	r18, r22
    1eac:	fc 01       	movw	r30, r24
    1eae:	20 83       	st	Z, r18
    1eb0:	25 c0       	rjmp	.+74     	; 0x1efc <PORTC_set_pin_dir+0x9c>
    1eb2:	88 e0       	ldi	r24, 0x08	; 8
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	28 e0       	ldi	r18, 0x08	; 8
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	f9 01       	movw	r30, r18
    1ebc:	20 81       	ld	r18, Z
    1ebe:	62 2f       	mov	r22, r18
    1ec0:	29 81       	ldd	r18, Y+1	; 0x01
    1ec2:	42 2f       	mov	r20, r18
    1ec4:	50 e0       	ldi	r21, 0x00	; 0
    1ec6:	21 e0       	ldi	r18, 0x01	; 1
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <PORTC_set_pin_dir+0x70>
    1ecc:	22 0f       	add	r18, r18
    1ece:	33 1f       	adc	r19, r19
    1ed0:	4a 95       	dec	r20
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <PORTC_set_pin_dir+0x6c>
    1ed4:	26 2b       	or	r18, r22
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	20 83       	st	Z, r18
    1eda:	10 c0       	rjmp	.+32     	; 0x1efc <PORTC_set_pin_dir+0x9c>
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	88 2f       	mov	r24, r24
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	80 5b       	subi	r24, 0xB0	; 176
    1ee4:	9b 4f       	sbci	r25, 0xFB	; 251
    1ee6:	29 81       	ldd	r18, Y+1	; 0x01
    1ee8:	22 2f       	mov	r18, r18
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	20 5b       	subi	r18, 0xB0	; 176
    1eee:	3b 4f       	sbci	r19, 0xFB	; 251
    1ef0:	f9 01       	movw	r30, r18
    1ef2:	20 81       	ld	r18, Z
    1ef4:	28 60       	ori	r18, 0x08	; 8
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	20 83       	st	Z, r18
    1efa:	00 00       	nop
    1efc:	00 00       	nop
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	08 95       	ret

00001f08 <PORTC_set_pin_level>:
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <PORTC_set_pin_level+0x6>
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	6a 83       	std	Y+2, r22	; 0x02
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	88 23       	and	r24, r24
    1f1a:	a9 f0       	breq	.+42     	; 0x1f46 <PORTC_set_pin_level+0x3e>
    1f1c:	88 e0       	ldi	r24, 0x08	; 8
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	28 e0       	ldi	r18, 0x08	; 8
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	f9 01       	movw	r30, r18
    1f26:	21 81       	ldd	r18, Z+1	; 0x01
    1f28:	62 2f       	mov	r22, r18
    1f2a:	29 81       	ldd	r18, Y+1	; 0x01
    1f2c:	42 2f       	mov	r20, r18
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	21 e0       	ldi	r18, 0x01	; 1
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <PORTC_set_pin_level+0x32>
    1f36:	22 0f       	add	r18, r18
    1f38:	33 1f       	adc	r19, r19
    1f3a:	4a 95       	dec	r20
    1f3c:	e2 f7       	brpl	.-8      	; 0x1f36 <PORTC_set_pin_level+0x2e>
    1f3e:	26 2b       	or	r18, r22
    1f40:	fc 01       	movw	r30, r24
    1f42:	21 83       	std	Z+1, r18	; 0x01
    1f44:	15 c0       	rjmp	.+42     	; 0x1f70 <PORTC_set_pin_level+0x68>
    1f46:	88 e0       	ldi	r24, 0x08	; 8
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	28 e0       	ldi	r18, 0x08	; 8
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	f9 01       	movw	r30, r18
    1f50:	21 81       	ldd	r18, Z+1	; 0x01
    1f52:	62 2f       	mov	r22, r18
    1f54:	29 81       	ldd	r18, Y+1	; 0x01
    1f56:	42 2f       	mov	r20, r18
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	21 e0       	ldi	r18, 0x01	; 1
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <PORTC_set_pin_level+0x5c>
    1f60:	22 0f       	add	r18, r18
    1f62:	33 1f       	adc	r19, r19
    1f64:	4a 95       	dec	r20
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <PORTC_set_pin_level+0x58>
    1f68:	20 95       	com	r18
    1f6a:	26 23       	and	r18, r22
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	21 83       	std	Z+1, r18	; 0x01
    1f70:	00 00       	nop
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	08 95       	ret

00001f7c <PORTC_get_pin_level>:
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	1f 92       	push	r1
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	88 e0       	ldi	r24, 0x08	; 8
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	48 2f       	mov	r20, r24
    1f98:	50 e0       	ldi	r21, 0x00	; 0
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <PORTC_get_pin_level+0x28>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	4a 95       	dec	r20
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <PORTC_get_pin_level+0x24>
    1fa8:	82 23       	and	r24, r18
    1faa:	93 23       	and	r25, r19
    1fac:	21 e0       	ldi	r18, 0x01	; 1
    1fae:	89 2b       	or	r24, r25
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <PORTC_get_pin_level+0x38>
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	82 2f       	mov	r24, r18
    1fb6:	0f 90       	pop	r0
    1fb8:	df 91       	pop	r29
    1fba:	cf 91       	pop	r28
    1fbc:	08 95       	ret

00001fbe <CONF_WIFI_M2M_RESET_PIN_set_dir>:
    1fbe:	cf 93       	push	r28
    1fc0:	df 93       	push	r29
    1fc2:	1f 92       	push	r1
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	69 81       	ldd	r22, Y+1	; 0x01
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <PORTA_set_pin_dir>
    1fd2:	00 00       	nop
    1fd4:	0f 90       	pop	r0
    1fd6:	df 91       	pop	r29
    1fd8:	cf 91       	pop	r28
    1fda:	08 95       	ret

00001fdc <CONF_WIFI_M2M_RESET_PIN_set_level>:
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	1f 92       	push	r1
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	69 81       	ldd	r22, Y+1	; 0x01
    1fea:	82 e0       	ldi	r24, 0x02	; 2
    1fec:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <PORTA_set_pin_level>
    1ff0:	00 00       	nop
    1ff2:	0f 90       	pop	r0
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	08 95       	ret

00001ffa <CONF_WIFI_M2M_WAKE_PIN_set_dir>:
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	1f 92       	push	r1
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	69 81       	ldd	r22, Y+1	; 0x01
    2008:	83 e0       	ldi	r24, 0x03	; 3
    200a:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <PORTA_set_pin_dir>
    200e:	00 00       	nop
    2010:	0f 90       	pop	r0
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	08 95       	ret

00002018 <CONF_WIFI_M2M_INT_PIN_set_pull_mode>:
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	1f 92       	push	r1
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	69 81       	ldd	r22, Y+1	; 0x01
    2026:	86 e0       	ldi	r24, 0x06	; 6
    2028:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <PORTC_set_pin_pull_mode>
    202c:	00 00       	nop
    202e:	0f 90       	pop	r0
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	08 95       	ret

00002036 <CONF_WIFI_M2M_INT_PIN_set_dir>:
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	1f 92       	push	r1
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	69 81       	ldd	r22, Y+1	; 0x01
    2044:	86 e0       	ldi	r24, 0x06	; 6
    2046:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <PORTC_set_pin_dir>
    204a:	00 00       	nop
    204c:	0f 90       	pop	r0
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	08 95       	ret

00002054 <CONF_WIFI_M2M_INT_PIN_set_isc>:
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	1f 92       	push	r1
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
    205e:	89 83       	std	Y+1, r24	; 0x01
    2060:	69 81       	ldd	r22, Y+1	; 0x01
    2062:	86 e0       	ldi	r24, 0x06	; 6
    2064:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <PORTC_pin_set_isc>
    2068:	00 00       	nop
    206a:	0f 90       	pop	r0
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	08 95       	ret

00002072 <CONF_WIFI_M2M_INT_PIN_get_level>:
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	86 e0       	ldi	r24, 0x06	; 6
    207c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <PORTC_get_pin_level>
    2080:	df 91       	pop	r29
    2082:	cf 91       	pop	r28
    2084:	08 95       	ret

00002086 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>:
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    208a:	1f 92       	push	r1
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	89 83       	std	Y+1, r24	; 0x01
    2092:	69 81       	ldd	r22, Y+1	; 0x01
    2094:	87 e0       	ldi	r24, 0x07	; 7
    2096:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <PORTC_set_pin_dir>
    209a:	00 00       	nop
    209c:	0f 90       	pop	r0
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	08 95       	ret

000020a4 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>:
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	1f 92       	push	r1
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	69 81       	ldd	r22, Y+1	; 0x01
    20b2:	87 e0       	ldi	r24, 0x07	; 7
    20b4:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <PORTC_set_pin_level>
    20b8:	00 00       	nop
    20ba:	0f 90       	pop	r0
    20bc:	df 91       	pop	r29
    20be:	cf 91       	pop	r28
    20c0:	08 95       	ret

000020c2 <__vector_24>:
    20c2:	1f 92       	push	r1
    20c4:	0f 92       	push	r0
    20c6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    20ca:	0f 92       	push	r0
    20cc:	11 24       	eor	r1, r1
    20ce:	2f 93       	push	r18
    20d0:	3f 93       	push	r19
    20d2:	4f 93       	push	r20
    20d4:	5f 93       	push	r21
    20d6:	6f 93       	push	r22
    20d8:	7f 93       	push	r23
    20da:	8f 93       	push	r24
    20dc:	9f 93       	push	r25
    20de:	af 93       	push	r26
    20e0:	bf 93       	push	r27
    20e2:	ef 93       	push	r30
    20e4:	ff 93       	push	r31
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	0e 94 39 10 	call	0x2072	; 0x2072 <CONF_WIFI_M2M_INT_PIN_get_level>
    20f2:	98 2f       	mov	r25, r24
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	89 27       	eor	r24, r25
    20f8:	88 23       	and	r24, r24
    20fa:	61 f0       	breq	.+24     	; 0x2114 <__vector_24+0x52>
    20fc:	80 91 0b 2e 	lds	r24, 0x2E0B	; 0x802e0b <gpfIsr>
    2100:	90 91 0c 2e 	lds	r25, 0x2E0C	; 0x802e0c <gpfIsr+0x1>
    2104:	89 2b       	or	r24, r25
    2106:	31 f0       	breq	.+12     	; 0x2114 <__vector_24+0x52>
    2108:	80 91 0b 2e 	lds	r24, 0x2E0B	; 0x802e0b <gpfIsr>
    210c:	90 91 0c 2e 	lds	r25, 0x2E0C	; 0x802e0c <gpfIsr+0x1>
    2110:	fc 01       	movw	r30, r24
    2112:	09 95       	icall
    2114:	8b e0       	ldi	r24, 0x0B	; 11
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	20 ec       	ldi	r18, 0xC0	; 192
    211a:	fc 01       	movw	r30, r24
    211c:	20 83       	st	Z, r18
    211e:	00 00       	nop
    2120:	df 91       	pop	r29
    2122:	cf 91       	pop	r28
    2124:	ff 91       	pop	r31
    2126:	ef 91       	pop	r30
    2128:	bf 91       	pop	r27
    212a:	af 91       	pop	r26
    212c:	9f 91       	pop	r25
    212e:	8f 91       	pop	r24
    2130:	7f 91       	pop	r23
    2132:	6f 91       	pop	r22
    2134:	5f 91       	pop	r21
    2136:	4f 91       	pop	r20
    2138:	3f 91       	pop	r19
    213a:	2f 91       	pop	r18
    213c:	0f 90       	pop	r0
    213e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2142:	0f 90       	pop	r0
    2144:	1f 90       	pop	r1
    2146:	18 95       	reti

00002148 <init_chip_pins>:
    2148:	cf 93       	push	r28
    214a:	df 93       	push	r29
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <CONF_WIFI_M2M_RESET_PIN_set_dir>
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	0e 94 43 10 	call	0x2086	; 0x2086 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_dir>
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <CONF_WIFI_M2M_WAKE_PIN_set_dir>
    2162:	00 00       	nop
    2164:	df 91       	pop	r29
    2166:	cf 91       	pop	r28
    2168:	08 95       	ret

0000216a <nm_bsp_init>:
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	10 92 0b 2e 	sts	0x2E0B, r1	; 0x802e0b <gpfIsr>
    2176:	10 92 0c 2e 	sts	0x2E0C, r1	; 0x802e0c <gpfIsr+0x1>
    217a:	0e 94 a4 10 	call	0x2148	; 0x2148 <init_chip_pins>
    217e:	0e 94 c6 10 	call	0x218c	; 0x218c <nm_bsp_reset>
    2182:	78 94       	sei
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	08 95       	ret

0000218c <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
	//ioport_set_pin_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, false);
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(false);
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	0e 94 52 10 	call	0x20a4	; 0x20a4 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>
	
	//ioport_set_pin_level(CONF_WIFI_M2M_RESET_PIN, false);
	CONF_WIFI_M2M_RESET_PIN_set_level(false);
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <CONF_WIFI_M2M_RESET_PIN_set_level>
	
// 	asm volatile ("nop");
// 	PORTB_set_pin_level(5,true);
	nm_bsp_sleep(1);
    21a0:	61 e0       	ldi	r22, 0x01	; 1
    21a2:	70 e0       	ldi	r23, 0x00	; 0
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	0e 94 e6 10 	call	0x21cc	; 0x21cc <nm_bsp_sleep>
// 	PORTB_set_pin_level(5,false);
// 	asm volatile ("nop");

	//ioport_set_pin_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, true);
	CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level(true);
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	0e 94 52 10 	call	0x20a4	; 0x20a4 <CONF_WIFI_M2M_CHIP_ENABLE_PIN_set_level>
	
	nm_bsp_sleep(10);
    21b2:	6a e0       	ldi	r22, 0x0A	; 10
    21b4:	70 e0       	ldi	r23, 0x00	; 0
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	0e 94 e6 10 	call	0x21cc	; 0x21cc <nm_bsp_sleep>

	//ioport_set_pin_level(CONF_WIFI_M2M_RESET_PIN, true);
	CONF_WIFI_M2M_RESET_PIN_set_level(true);
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <CONF_WIFI_M2M_RESET_PIN_set_level>
	
	//nm_bsp_sleep(100);
}
    21c4:	00 00       	nop
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	08 95       	ret

000021cc <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	62 97       	sbiw	r28, 0x12	; 18
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	6f 87       	std	Y+15, r22	; 0x0f
    21dc:	78 8b       	std	Y+16, r23	; 0x10
    21de:	89 8b       	std	Y+17, r24	; 0x11
    21e0:	9a 8b       	std	Y+18, r25	; 0x12
	while (u32TimeMsec--) {
    21e2:	72 c0       	rjmp	.+228    	; 0x22c8 <nm_bsp_sleep+0xfc>
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	a0 e8       	ldi	r26, 0x80	; 128
    21ea:	bf e3       	ldi	r27, 0x3F	; 63
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	9a 83       	std	Y+2, r25	; 0x02
    21f0:	ab 83       	std	Y+3, r26	; 0x03
    21f2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e4       	ldi	r19, 0x40	; 64
    21f8:	4c e1       	ldi	r20, 0x1C	; 28
    21fa:	55 e4       	ldi	r21, 0x45	; 69
    21fc:	69 81       	ldd	r22, Y+1	; 0x01
    21fe:	7a 81       	ldd	r23, Y+2	; 0x02
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	9c 81       	ldd	r25, Y+4	; 0x04
    2204:	0e 94 cf 3a 	call	0x759e	; 0x759e <__mulsf3>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	8d 83       	std	Y+5, r24	; 0x05
    220e:	9e 83       	std	Y+6, r25	; 0x06
    2210:	af 83       	std	Y+7, r26	; 0x07
    2212:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e8       	ldi	r20, 0x80	; 128
    221a:	5f e3       	ldi	r21, 0x3F	; 63
    221c:	6d 81       	ldd	r22, Y+5	; 0x05
    221e:	7e 81       	ldd	r23, Y+6	; 0x06
    2220:	8f 81       	ldd	r24, Y+7	; 0x07
    2222:	98 85       	ldd	r25, Y+8	; 0x08
    2224:	0e 94 6b 39 	call	0x72d6	; 0x72d6 <__cmpsf2>
    2228:	88 23       	and	r24, r24
    222a:	2c f4       	brge	.+10     	; 0x2236 <nm_bsp_sleep+0x6a>
		__ticks = 1;
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	89 87       	std	Y+9, r24	; 0x09
    2232:	9a 87       	std	Y+10, r25	; 0x0a
    2234:	3f c0       	rjmp	.+126    	; 0x22b4 <nm_bsp_sleep+0xe8>
	else if (__tmp > 65535)
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	3f ef       	ldi	r19, 0xFF	; 255
    223a:	4f e7       	ldi	r20, 0x7F	; 127
    223c:	57 e4       	ldi	r21, 0x47	; 71
    223e:	6d 81       	ldd	r22, Y+5	; 0x05
    2240:	7e 81       	ldd	r23, Y+6	; 0x06
    2242:	8f 81       	ldd	r24, Y+7	; 0x07
    2244:	98 85       	ldd	r25, Y+8	; 0x08
    2246:	0e 94 ca 3a 	call	0x7594	; 0x7594 <__gesf2>
    224a:	18 16       	cp	r1, r24
    224c:	4c f5       	brge	.+82     	; 0x22a0 <nm_bsp_sleep+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e2       	ldi	r20, 0x20	; 32
    2254:	51 e4       	ldi	r21, 0x41	; 65
    2256:	69 81       	ldd	r22, Y+1	; 0x01
    2258:	7a 81       	ldd	r23, Y+2	; 0x02
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	9c 81       	ldd	r25, Y+4	; 0x04
    225e:	0e 94 cf 3a 	call	0x759e	; 0x759e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	bc 01       	movw	r22, r24
    2268:	cd 01       	movw	r24, r26
    226a:	0e 94 e9 39 	call	0x73d2	; 0x73d2 <__fixunssfsi>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	89 87       	std	Y+9, r24	; 0x09
    2274:	9a 87       	std	Y+10, r25	; 0x0a
    2276:	0f c0       	rjmp	.+30     	; 0x2296 <nm_bsp_sleep+0xca>
    2278:	8a ef       	ldi	r24, 0xFA	; 250
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	8b 87       	std	Y+11, r24	; 0x0b
    227e:	9c 87       	std	Y+12, r25	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2280:	8b 85       	ldd	r24, Y+11	; 0x0b
    2282:	9c 85       	ldd	r25, Y+12	; 0x0c
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	f1 f7       	brne	.-4      	; 0x2284 <nm_bsp_sleep+0xb8>
    2288:	8b 87       	std	Y+11, r24	; 0x0b
    228a:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228c:	89 85       	ldd	r24, Y+9	; 0x09
    228e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	89 87       	std	Y+9, r24	; 0x09
    2294:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2296:	89 85       	ldd	r24, Y+9	; 0x09
    2298:	9a 85       	ldd	r25, Y+10	; 0x0a
    229a:	89 2b       	or	r24, r25
    229c:	69 f7       	brne	.-38     	; 0x2278 <nm_bsp_sleep+0xac>
    229e:	14 c0       	rjmp	.+40     	; 0x22c8 <nm_bsp_sleep+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a0:	6d 81       	ldd	r22, Y+5	; 0x05
    22a2:	7e 81       	ldd	r23, Y+6	; 0x06
    22a4:	8f 81       	ldd	r24, Y+7	; 0x07
    22a6:	98 85       	ldd	r25, Y+8	; 0x08
    22a8:	0e 94 e9 39 	call	0x73d2	; 0x73d2 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	89 87       	std	Y+9, r24	; 0x09
    22b2:	9a 87       	std	Y+10, r25	; 0x0a
    22b4:	89 85       	ldd	r24, Y+9	; 0x09
    22b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b8:	8d 87       	std	Y+13, r24	; 0x0d
    22ba:	9e 87       	std	Y+14, r25	; 0x0e
    22bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22be:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <nm_bsp_sleep+0xf4>
    22c4:	8d 87       	std	Y+13, r24	; 0x0d
    22c6:	9e 87       	std	Y+14, r25	; 0x0e
    22c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ca:	98 89       	ldd	r25, Y+16	; 0x10
    22cc:	a9 89       	ldd	r26, Y+17	; 0x11
    22ce:	ba 89       	ldd	r27, Y+18	; 0x12
    22d0:	9c 01       	movw	r18, r24
    22d2:	ad 01       	movw	r20, r26
    22d4:	21 50       	subi	r18, 0x01	; 1
    22d6:	31 09       	sbc	r19, r1
    22d8:	41 09       	sbc	r20, r1
    22da:	51 09       	sbc	r21, r1
    22dc:	2f 87       	std	Y+15, r18	; 0x0f
    22de:	38 8b       	std	Y+16, r19	; 0x10
    22e0:	49 8b       	std	Y+17, r20	; 0x11
    22e2:	5a 8b       	std	Y+18, r21	; 0x12
    22e4:	89 2b       	or	r24, r25
    22e6:	8a 2b       	or	r24, r26
    22e8:	8b 2b       	or	r24, r27
    22ea:	09 f0       	breq	.+2      	; 0x22ee <nm_bsp_sleep+0x122>
    22ec:	7b cf       	rjmp	.-266    	; 0x21e4 <nm_bsp_sleep+0x18>
		_delay_ms(1);
	}
}
    22ee:	00 00       	nop
    22f0:	62 96       	adiw	r28, 0x12	; 18
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	08 95       	ret

000022fc <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	00 d0       	rcall	.+0      	; 0x2302 <nm_bsp_register_isr+0x6>
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	9a 83       	std	Y+2, r25	; 0x02
	gpfIsr = pfIsr;
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	9a 81       	ldd	r25, Y+2	; 0x02
    230e:	80 93 0b 2e 	sts	0x2E0B, r24	; 0x802e0b <gpfIsr>
    2312:	90 93 0c 2e 	sts	0x2E0C, r25	; 0x802e0c <gpfIsr+0x1>

	//ioport_configure_pin(CONF_WIFI_M2M_INT_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	CONF_WIFI_M2M_INT_PIN_set_dir(PORT_DIR_IN);
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	0e 94 1b 10 	call	0x2036	; 0x2036 <CONF_WIFI_M2M_INT_PIN_set_dir>
	CONF_WIFI_M2M_INT_PIN_set_pull_mode(PORT_PULL_UP);
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	0e 94 0c 10 	call	0x2018	; 0x2018 <CONF_WIFI_M2M_INT_PIN_set_pull_mode>
	CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    2322:	83 e0       	ldi	r24, 0x03	; 3
    2324:	0e 94 2a 10 	call	0x2054	; 0x2054 <CONF_WIFI_M2M_INT_PIN_set_isc>
	
	/* Enable interrupt */
// 	CONF_WIFI_M2M_INT_INTMASK_reg = CONF_WIFI_M2M_INT_INTFLAG_Msk;
// 	CONF_WIFI_M2M_INT_INTCTRL_reg = CONF_WIFI_M2M_INT_INTCTRL_Msk;
	CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    2328:	83 e0       	ldi	r24, 0x03	; 3
    232a:	0e 94 2a 10 	call	0x2054	; 0x2054 <CONF_WIFI_M2M_INT_PIN_set_isc>
	//ENABLE_INTERRUPTS();
	sei();
    232e:	78 94       	sei
}
    2330:	00 00       	nop
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	08 95       	ret

0000233c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	1f 92       	push	r1
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	89 83       	std	Y+1, r24	; 0x01
	if (u8Enable)
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	88 23       	and	r24, r24
    234c:	21 f0       	breq	.+8      	; 0x2356 <nm_bsp_interrupt_ctrl+0x1a>
	{
		//CONF_WIFI_M2M_INT_INTMASK_reg |= CONF_WIFI_M2M_INT_INTFLAG_Msk;
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
    234e:	83 e0       	ldi	r24, 0x03	; 3
    2350:	0e 94 2a 10 	call	0x2054	; 0x2054 <CONF_WIFI_M2M_INT_PIN_set_isc>
	else
	{
		//CONF_WIFI_M2M_INT_INTMASK_reg &= ~CONF_WIFI_M2M_INT_INTFLAG_Msk;
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_INTDISABLE_gc);
	}
}
    2354:	03 c0       	rjmp	.+6      	; 0x235c <nm_bsp_interrupt_ctrl+0x20>
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_FALLING_gc);
	}
	else
	{
		//CONF_WIFI_M2M_INT_INTMASK_reg &= ~CONF_WIFI_M2M_INT_INTFLAG_Msk;
		CONF_WIFI_M2M_INT_PIN_set_isc(PORT_ISC_INTDISABLE_gc);
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	0e 94 2a 10 	call	0x2054	; 0x2054 <CONF_WIFI_M2M_INT_PIN_set_isc>
	}
}
    235c:	00 00       	nop
    235e:	0f 90       	pop	r0
    2360:	df 91       	pop	r29
    2362:	cf 91       	pop	r28
    2364:	08 95       	ret

00002366 <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	00 d0       	rcall	.+0      	; 0x236c <PORTA_set_pin_dir+0x6>
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
    2370:	89 83       	std	Y+1, r24	; 0x01
    2372:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    2374:	8a 81       	ldd	r24, Y+2	; 0x02
    2376:	88 2f       	mov	r24, r24
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	81 30       	cpi	r24, 0x01	; 1
    237c:	91 05       	cpc	r25, r1
    237e:	e1 f0       	breq	.+56     	; 0x23b8 <PORTA_set_pin_dir+0x52>
    2380:	82 30       	cpi	r24, 0x02	; 2
    2382:	91 05       	cpc	r25, r1
    2384:	71 f1       	breq	.+92     	; 0x23e2 <PORTA_set_pin_dir+0x7c>
    2386:	89 2b       	or	r24, r25
    2388:	09 f0       	breq	.+2      	; 0x238c <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    238a:	3b c0       	rjmp	.+118    	; 0x2402 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	fc 01       	movw	r30, r24
    2396:	80 81       	ld	r24, Z
    2398:	68 2f       	mov	r22, r24
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	48 2f       	mov	r20, r24
    239e:	50 e0       	ldi	r21, 0x00	; 0
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <PORTA_set_pin_dir+0x44>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	4a 95       	dec	r20
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <PORTA_set_pin_dir+0x40>
    23ae:	80 95       	com	r24
    23b0:	86 23       	and	r24, r22
    23b2:	f9 01       	movw	r30, r18
    23b4:	80 83       	st	Z, r24
		break;
    23b6:	25 c0       	rjmp	.+74     	; 0x2402 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	fc 01       	movw	r30, r24
    23c2:	80 81       	ld	r24, Z
    23c4:	68 2f       	mov	r22, r24
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	48 2f       	mov	r20, r24
    23ca:	50 e0       	ldi	r21, 0x00	; 0
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <PORTA_set_pin_dir+0x70>
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	4a 95       	dec	r20
    23d8:	e2 f7       	brpl	.-8      	; 0x23d2 <PORTA_set_pin_dir+0x6c>
    23da:	86 2b       	or	r24, r22
    23dc:	f9 01       	movw	r30, r18
    23de:	80 83       	st	Z, r24
		break;
    23e0:	10 c0       	rjmp	.+32     	; 0x2402 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	88 2f       	mov	r24, r24
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	80 5f       	subi	r24, 0xF0	; 240
    23ea:	9b 4f       	sbci	r25, 0xFB	; 251
    23ec:	29 81       	ldd	r18, Y+1	; 0x01
    23ee:	22 2f       	mov	r18, r18
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	20 5f       	subi	r18, 0xF0	; 240
    23f4:	3b 4f       	sbci	r19, 0xFB	; 251
    23f6:	f9 01       	movw	r30, r18
    23f8:	20 81       	ld	r18, Z
    23fa:	28 60       	ori	r18, 0x08	; 8
    23fc:	fc 01       	movw	r30, r24
    23fe:	20 83       	st	Z, r18
		break;
    2400:	00 00       	nop
	default:
		break;
	}
}
    2402:	00 00       	nop
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
    240c:	08 95       	ret

0000240e <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	00 d0       	rcall	.+0      	; 0x2414 <PORTA_set_pin_level+0x6>
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	88 23       	and	r24, r24
    2420:	a9 f0       	breq	.+42     	; 0x244c <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	fc 01       	movw	r30, r24
    242c:	81 81       	ldd	r24, Z+1	; 0x01
    242e:	68 2f       	mov	r22, r24
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	48 2f       	mov	r20, r24
    2434:	50 e0       	ldi	r21, 0x00	; 0
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <PORTA_set_pin_level+0x32>
    243c:	88 0f       	add	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	4a 95       	dec	r20
    2442:	e2 f7       	brpl	.-8      	; 0x243c <PORTA_set_pin_level+0x2e>
    2444:	86 2b       	or	r24, r22
    2446:	f9 01       	movw	r30, r18
    2448:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
    244a:	15 c0       	rjmp	.+42     	; 0x2476 <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	fc 01       	movw	r30, r24
    2456:	81 81       	ldd	r24, Z+1	; 0x01
    2458:	68 2f       	mov	r22, r24
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	48 2f       	mov	r20, r24
    245e:	50 e0       	ldi	r21, 0x00	; 0
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	02 c0       	rjmp	.+4      	; 0x246a <PORTA_set_pin_level+0x5c>
    2466:	88 0f       	add	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	4a 95       	dec	r20
    246c:	e2 f7       	brpl	.-8      	; 0x2466 <PORTA_set_pin_level+0x58>
    246e:	80 95       	com	r24
    2470:	86 23       	and	r24, r22
    2472:	f9 01       	movw	r30, r18
    2474:	81 83       	std	Z+1, r24	; 0x01
	}
}
    2476:	00 00       	nop
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	08 95       	ret

00002482 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir(const enum port_dir dir)
{
    2482:	cf 93       	push	r28
    2484:	df 93       	push	r29
    2486:	1f 92       	push	r1
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    248c:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(4, dir);
    248e:	69 81       	ldd	r22, Y+1	; 0x01
    2490:	84 e0       	ldi	r24, 0x04	; 4
    2492:	0e 94 b3 11 	call	0x2366	; 0x2366 <PORTA_set_pin_dir>
}
    2496:	00 00       	nop
    2498:	0f 90       	pop	r0
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	08 95       	ret

000024a0 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void CONF_WIFI_M2M_SPI_MOSI_PIN_set_level(const bool level)
{
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	1f 92       	push	r1
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(4, level);
    24ac:	69 81       	ldd	r22, Y+1	; 0x01
    24ae:	84 e0       	ldi	r24, 0x04	; 4
    24b0:	0e 94 07 12 	call	0x240e	; 0x240e <PORTA_set_pin_level>
}
    24b4:	00 00       	nop
    24b6:	0f 90       	pop	r0
    24b8:	df 91       	pop	r29
    24ba:	cf 91       	pop	r28
    24bc:	08 95       	ret

000024be <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_MISO_PIN_set_dir(const enum port_dir dir)
{
    24be:	cf 93       	push	r28
    24c0:	df 93       	push	r29
    24c2:	1f 92       	push	r1
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(5, dir);
    24ca:	69 81       	ldd	r22, Y+1	; 0x01
    24cc:	85 e0       	ldi	r24, 0x05	; 5
    24ce:	0e 94 b3 11 	call	0x2366	; 0x2366 <PORTA_set_pin_dir>
}
    24d2:	00 00       	nop
    24d4:	0f 90       	pop	r0
    24d6:	df 91       	pop	r29
    24d8:	cf 91       	pop	r28
    24da:	08 95       	ret

000024dc <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_SCK_PIN_set_dir(const enum port_dir dir)
{
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
    24e0:	1f 92       	push	r1
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(6, dir);
    24e8:	69 81       	ldd	r22, Y+1	; 0x01
    24ea:	86 e0       	ldi	r24, 0x06	; 6
    24ec:	0e 94 b3 11 	call	0x2366	; 0x2366 <PORTA_set_pin_dir>
}
    24f0:	00 00       	nop
    24f2:	0f 90       	pop	r0
    24f4:	df 91       	pop	r29
    24f6:	cf 91       	pop	r28
    24f8:	08 95       	ret

000024fa <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void CONF_WIFI_M2M_SPI_SCK_PIN_set_level(const bool level)
{
    24fa:	cf 93       	push	r28
    24fc:	df 93       	push	r29
    24fe:	1f 92       	push	r1
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(6, level);
    2506:	69 81       	ldd	r22, Y+1	; 0x01
    2508:	86 e0       	ldi	r24, 0x06	; 6
    250a:	0e 94 07 12 	call	0x240e	; 0x240e <PORTA_set_pin_level>
}
    250e:	00 00       	nop
    2510:	0f 90       	pop	r0
    2512:	df 91       	pop	r29
    2514:	cf 91       	pop	r28
    2516:	08 95       	ret

00002518 <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CONF_WIFI_M2M_SPI_CS_PIN_set_dir(const enum port_dir dir)
{
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29
    251c:	1f 92       	push	r1
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(7, dir);
    2524:	69 81       	ldd	r22, Y+1	; 0x01
    2526:	87 e0       	ldi	r24, 0x07	; 7
    2528:	0e 94 b3 11 	call	0x2366	; 0x2366 <PORTA_set_pin_dir>
}
    252c:	00 00       	nop
    252e:	0f 90       	pop	r0
    2530:	df 91       	pop	r29
    2532:	cf 91       	pop	r28
    2534:	08 95       	ret

00002536 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void CONF_WIFI_M2M_SPI_CS_PIN_set_level(const bool level)
{
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	1f 92       	push	r1
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(7, level);
    2542:	69 81       	ldd	r22, Y+1	; 0x01
    2544:	87 e0       	ldi	r24, 0x07	; 7
    2546:	0e 94 07 12 	call	0x240e	; 0x240e <PORTA_set_pin_level>
}
    254a:	00 00       	nop
    254c:	0f 90       	pop	r0
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	08 95       	ret

00002554 <spi_rw>:
}
#endif

#ifdef CONF_WINC_USE_SPI
static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	2d 97       	sbiw	r28, 0x0d	; 13
    255e:	cd bf       	out	0x3d, r28	; 61
    2560:	de bf       	out	0x3e, r29	; 62
    2562:	88 87       	std	Y+8, r24	; 0x08
    2564:	99 87       	std	Y+9, r25	; 0x09
    2566:	6a 87       	std	Y+10, r22	; 0x0a
    2568:	7b 87       	std	Y+11, r23	; 0x0b
    256a:	4c 87       	std	Y+12, r20	; 0x0c
    256c:	5d 87       	std	Y+13, r21	; 0x0d
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	uint8 u8Dummy = 0;
    256e:	1f 82       	std	Y+7, r1	; 0x07
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    2570:	19 82       	std	Y+1, r1	; 0x01
    2572:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t txd_data = 0;
    2574:	1b 82       	std	Y+3, r1	; 0x03
    2576:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t rxd_data = 0;
    2578:	1d 82       	std	Y+5, r1	; 0x05
    257a:	1e 82       	std	Y+6, r1	; 0x06

	if (!pu8Mosi) {
    257c:	88 85       	ldd	r24, Y+8	; 0x08
    257e:	99 85       	ldd	r25, Y+9	; 0x09
    2580:	89 2b       	or	r24, r25
    2582:	39 f4       	brne	.+14     	; 0x2592 <spi_rw+0x3e>
		pu8Mosi = &u8Dummy;
    2584:	ce 01       	movw	r24, r28
    2586:	07 96       	adiw	r24, 0x07	; 7
    2588:	88 87       	std	Y+8, r24	; 0x08
    258a:	99 87       	std	Y+9, r25	; 0x09
		u8SkipMosi = 1;
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	89 83       	std	Y+1, r24	; 0x01
    2590:	0d c0       	rjmp	.+26     	; 0x25ac <spi_rw+0x58>
	}
	else if(!pu8Miso) {
    2592:	8a 85       	ldd	r24, Y+10	; 0x0a
    2594:	9b 85       	ldd	r25, Y+11	; 0x0b
    2596:	89 2b       	or	r24, r25
    2598:	39 f4       	brne	.+14     	; 0x25a8 <spi_rw+0x54>
		pu8Miso = &u8Dummy;
    259a:	ce 01       	movw	r24, r28
    259c:	07 96       	adiw	r24, 0x07	; 7
    259e:	8a 87       	std	Y+10, r24	; 0x0a
    25a0:	9b 87       	std	Y+11, r25	; 0x0b
		u8SkipMiso = 1;
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	8a 83       	std	Y+2, r24	; 0x02
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <spi_rw+0x58>
	}
	else {
		return M2M_ERR_BUS_FAIL;
    25a8:	8a ef       	ldi	r24, 0xFA	; 250
    25aa:	34 c0       	rjmp	.+104    	; 0x2614 <spi_rw+0xc0>
	}

	//spi_select_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(false);
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	0e 94 9b 12 	call	0x2536	; 0x2536 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>
	
	while (u16Sz) {
    25b2:	28 c0       	rjmp	.+80     	; 0x2604 <spi_rw+0xb0>
		txd_data = *pu8Mosi;
    25b4:	88 85       	ldd	r24, Y+8	; 0x08
    25b6:	99 85       	ldd	r25, Y+9	; 0x09
    25b8:	fc 01       	movw	r30, r24
    25ba:	80 81       	ld	r24, Z
    25bc:	88 2f       	mov	r24, r24
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	8b 83       	std	Y+3, r24	; 0x03
    25c2:	9c 83       	std	Y+4, r25	; 0x04
//		spi_read_single((uint8_t*)(&rxd_data));
		//SPI_0_read_block((uint8_t*)(&rxd_data), 1);
		
		
		
		rxd_data = SPI_0_exchange_byte(txd_data);		
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	0e 94 41 0c 	call	0x1882	; 0x1882 <SPI_0_exchange_byte>
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	9e 83       	std	Y+6, r25	; 0x06
		
		*pu8Miso = rxd_data;
    25d0:	2d 81       	ldd	r18, Y+5	; 0x05
    25d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d6:	fc 01       	movw	r30, r24
    25d8:	20 83       	st	Z, r18

		u16Sz--;
    25da:	8c 85       	ldd	r24, Y+12	; 0x0c
    25dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	8c 87       	std	Y+12, r24	; 0x0c
    25e2:	9d 87       	std	Y+13, r25	; 0x0d
		if (!u8SkipMiso)
    25e4:	8a 81       	ldd	r24, Y+2	; 0x02
    25e6:	88 23       	and	r24, r24
    25e8:	29 f4       	brne	.+10     	; 0x25f4 <spi_rw+0xa0>
			pu8Miso++;
    25ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ee:	01 96       	adiw	r24, 0x01	; 1
    25f0:	8a 87       	std	Y+10, r24	; 0x0a
    25f2:	9b 87       	std	Y+11, r25	; 0x0b
		if (!u8SkipMosi)
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	88 23       	and	r24, r24
    25f8:	29 f4       	brne	.+10     	; 0x2604 <spi_rw+0xb0>
			pu8Mosi++;
    25fa:	88 85       	ldd	r24, Y+8	; 0x08
    25fc:	99 85       	ldd	r25, Y+9	; 0x09
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	88 87       	std	Y+8, r24	; 0x08
    2602:	99 87       	std	Y+9, r25	; 0x09
	}

	//spi_select_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(false);
	
	while (u16Sz) {
    2604:	8c 85       	ldd	r24, Y+12	; 0x0c
    2606:	9d 85       	ldd	r25, Y+13	; 0x0d
    2608:	89 2b       	or	r24, r25
    260a:	a1 f6       	brne	.-88     	; 0x25b4 <spi_rw+0x60>
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	//spi_deselect_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf);
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(true);
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	0e 94 9b 12 	call	0x2536	; 0x2536 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>

	return M2M_SUCCESS;
    2612:	80 e0       	ldi	r24, 0x00	; 0
}
    2614:	2d 96       	adiw	r28, 0x0d	; 13
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	08 95       	ret

00002620 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 volatile nm_bus_init(void *pvinit)
{
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	00 d0       	rcall	.+0      	; 0x2626 <nm_bus_init+0x6>
    2626:	1f 92       	push	r1
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	8a 83       	std	Y+2, r24	; 0x02
    262e:	9b 83       	std	Y+3, r25	; 0x03
	sint8 result = M2M_SUCCESS;
    2630:	19 82       	std	Y+1, r1	; 0x01
#ifdef CONF_WINC_USE_I2C
		/* Not implemented */
#elif defined CONF_WINC_USE_SPI
	/* Configure pins */
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_CS_PIN, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
	CONF_WIFI_M2M_SPI_CS_PIN_set_dir(PORT_DIR_OUT);
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	0e 94 8c 12 	call	0x2518	; 0x2518 <CONF_WIFI_M2M_SPI_CS_PIN_set_dir>
	CONF_WIFI_M2M_SPI_CS_PIN_set_level(true);
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	0e 94 9b 12 	call	0x2536	; 0x2536 <CONF_WIFI_M2M_SPI_CS_PIN_set_level>
	
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_MOSI_PIN, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
	CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir(PORT_DIR_OUT);
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	0e 94 41 12 	call	0x2482	; 0x2482 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_dir>
	CONF_WIFI_M2M_SPI_MOSI_PIN_set_level(true);
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	0e 94 50 12 	call	0x24a0	; 0x24a0 <CONF_WIFI_M2M_SPI_MOSI_PIN_set_level>
	
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_MISO_PIN, IOPORT_DIR_INPUT);
	CONF_WIFI_M2M_SPI_MISO_PIN_set_dir(PORT_DIR_IN);
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	0e 94 5f 12 	call	0x24be	; 0x24be <CONF_WIFI_M2M_SPI_MISO_PIN_set_dir>
	
	//ioport_configure_pin(CONF_WIFI_M2M_SPI_SCK_PIN, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	CONF_WIFI_M2M_SPI_SCK_PIN_set_dir(PORT_DIR_OUT);
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	0e 94 6e 12 	call	0x24dc	; 0x24dc <CONF_WIFI_M2M_SPI_SCK_PIN_set_dir>
	CONF_WIFI_M2M_SPI_SCK_PIN_set_level(false);
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	0e 94 7d 12 	call	0x24fa	; 0x24fa <CONF_WIFI_M2M_SPI_SCK_PIN_set_level>
	//struct spi_device spi_device_conf;
	//spi_device_conf.id = CONF_WIFI_M2M_SPI_CS_PIN;
	 
	/* Configure the SPI master. */
	//spi_master_init(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_init();
    265c:	0e 94 21 0c 	call	0x1842	; 0x1842 <SPI_0_init>
	
	//spi_master_setup_device(CONF_WIFI_M2M_SPI_MODULE, &spi_device_conf, SPI_MODE_0, CONF_WIFI_M2M_SPI_BAUDRATE, 0);
	
	/* Enable the SPI master. */
	//spi_enable(CONF_WIFI_M2M_SPI_MODULE);
	SPI_0_enable();
    2660:	0e 94 30 0c 	call	0x1860	; 0x1860 <SPI_0_enable>

	nm_bsp_reset();
    2664:	0e 94 c6 10 	call	0x218c	; 0x218c <nm_bsp_reset>
	nm_bsp_sleep(1);
    2668:	61 e0       	ldi	r22, 0x01	; 1
    266a:	70 e0       	ldi	r23, 0x00	; 0
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	0e 94 e6 10 	call	0x21cc	; 0x21cc <nm_bsp_sleep>
#endif
	return result;
    2674:	89 81       	ldd	r24, Y+1	; 0x01
}
    2676:	23 96       	adiw	r28, 0x03	; 3
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	df 91       	pop	r29
    267e:	cf 91       	pop	r28
    2680:	08 95       	ret

00002682 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	26 97       	sbiw	r28, 0x06	; 6
    268c:	cd bf       	out	0x3d, r28	; 61
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	8c 83       	std	Y+4, r24	; 0x04
    2692:	6d 83       	std	Y+5, r22	; 0x05
    2694:	7e 83       	std	Y+6, r23	; 0x06
	sint8 s8Ret = 0;
    2696:	19 82       	std	Y+1, r1	; 0x01
	switch(u8Cmd)
    2698:	8c 81       	ldd	r24, Y+4	; 0x04
    269a:	88 2f       	mov	r24, r24
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	03 97       	sbiw	r24, 0x03	; 3
    26a0:	c1 f4       	brne	.+48     	; 0x26d2 <nm_bus_ioctl+0x50>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    26a2:	8d 81       	ldd	r24, Y+5	; 0x05
    26a4:	9e 81       	ldd	r25, Y+6	; 0x06
    26a6:	8a 83       	std	Y+2, r24	; 0x02
    26a8:	9b 83       	std	Y+3, r25	; 0x03
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	9b 81       	ldd	r25, Y+3	; 0x03
    26ae:	fc 01       	movw	r30, r24
    26b0:	44 81       	ldd	r20, Z+4	; 0x04
    26b2:	55 81       	ldd	r21, Z+5	; 0x05
    26b4:	8a 81       	ldd	r24, Y+2	; 0x02
    26b6:	9b 81       	ldd	r25, Y+3	; 0x03
    26b8:	fc 01       	movw	r30, r24
    26ba:	22 81       	ldd	r18, Z+2	; 0x02
    26bc:	33 81       	ldd	r19, Z+3	; 0x03
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	9b 81       	ldd	r25, Y+3	; 0x03
    26c2:	fc 01       	movw	r30, r24
    26c4:	80 81       	ld	r24, Z
    26c6:	91 81       	ldd	r25, Z+1	; 0x01
    26c8:	b9 01       	movw	r22, r18
    26ca:	0e 94 aa 12 	call	0x2554	; 0x2554 <spi_rw>
    26ce:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    26d0:	03 c0       	rjmp	.+6      	; 0x26d8 <nm_bus_ioctl+0x56>
#endif
		default:
			s8Ret = -1;
    26d2:	8f ef       	ldi	r24, 0xFF	; 255
    26d4:	89 83       	std	Y+1, r24	; 0x01
			M2M_ERR("invalide ioclt cmd\n");
			break;
    26d6:	00 00       	nop
	}

	return s8Ret;
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    26da:	26 96       	adiw	r28, 0x06	; 6
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	08 95       	ret

000026e6 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
	return M2M_SUCCESS;
    26ee:	80 e0       	ldi	r24, 0x00	; 0
}
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	08 95       	ret

000026f6 <m2m_memcpy>:
		cs ^= *buf;
		buf++;
	}

	return cs;
}
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	28 97       	sbiw	r28, 0x08	; 8
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	89 83       	std	Y+1, r24	; 0x01
    2706:	9a 83       	std	Y+2, r25	; 0x02
    2708:	6b 83       	std	Y+3, r22	; 0x03
    270a:	7c 83       	std	Y+4, r23	; 0x04
    270c:	2d 83       	std	Y+5, r18	; 0x05
    270e:	3e 83       	std	Y+6, r19	; 0x06
    2710:	4f 83       	std	Y+7, r20	; 0x07
    2712:	58 87       	std	Y+8, r21	; 0x08
    2714:	8d 81       	ldd	r24, Y+5	; 0x05
    2716:	9e 81       	ldd	r25, Y+6	; 0x06
    2718:	af 81       	ldd	r26, Y+7	; 0x07
    271a:	b8 85       	ldd	r27, Y+8	; 0x08
    271c:	89 2b       	or	r24, r25
    271e:	8a 2b       	or	r24, r26
    2720:	8b 2b       	or	r24, r27
    2722:	31 f1       	breq	.+76     	; 0x2770 <m2m_memcpy+0x7a>
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	9c 81       	ldd	r25, Y+4	; 0x04
    2728:	fc 01       	movw	r30, r24
    272a:	20 81       	ld	r18, Z
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	9a 81       	ldd	r25, Y+2	; 0x02
    2730:	fc 01       	movw	r30, r24
    2732:	20 83       	st	Z, r18
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
    2738:	01 96       	adiw	r24, 0x01	; 1
    273a:	89 83       	std	Y+1, r24	; 0x01
    273c:	9a 83       	std	Y+2, r25	; 0x02
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	9c 81       	ldd	r25, Y+4	; 0x04
    2742:	01 96       	adiw	r24, 0x01	; 1
    2744:	8b 83       	std	Y+3, r24	; 0x03
    2746:	9c 83       	std	Y+4, r25	; 0x04
    2748:	8d 81       	ldd	r24, Y+5	; 0x05
    274a:	9e 81       	ldd	r25, Y+6	; 0x06
    274c:	af 81       	ldd	r26, Y+7	; 0x07
    274e:	b8 85       	ldd	r27, Y+8	; 0x08
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	a1 09       	sbc	r26, r1
    2754:	b1 09       	sbc	r27, r1
    2756:	8d 83       	std	Y+5, r24	; 0x05
    2758:	9e 83       	std	Y+6, r25	; 0x06
    275a:	af 83       	std	Y+7, r26	; 0x07
    275c:	b8 87       	std	Y+8, r27	; 0x08
    275e:	8d 81       	ldd	r24, Y+5	; 0x05
    2760:	9e 81       	ldd	r25, Y+6	; 0x06
    2762:	af 81       	ldd	r26, Y+7	; 0x07
    2764:	b8 85       	ldd	r27, Y+8	; 0x08
    2766:	89 2b       	or	r24, r25
    2768:	8a 2b       	or	r24, r26
    276a:	8b 2b       	or	r24, r27
    276c:	d9 f6       	brne	.-74     	; 0x2724 <m2m_memcpy+0x2e>
    276e:	01 c0       	rjmp	.+2      	; 0x2772 <m2m_memcpy+0x7c>
    2770:	00 00       	nop
    2772:	28 96       	adiw	r28, 0x08	; 8
    2774:	cd bf       	out	0x3d, r28	; 61
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	08 95       	ret

0000277e <m2m_memset>:

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    277e:	cf 93       	push	r28
    2780:	df 93       	push	r29
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	27 97       	sbiw	r28, 0x07	; 7
    2788:	cd bf       	out	0x3d, r28	; 61
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	89 83       	std	Y+1, r24	; 0x01
    278e:	9a 83       	std	Y+2, r25	; 0x02
    2790:	6b 83       	std	Y+3, r22	; 0x03
    2792:	2c 83       	std	Y+4, r18	; 0x04
    2794:	3d 83       	std	Y+5, r19	; 0x05
    2796:	4e 83       	std	Y+6, r20	; 0x06
    2798:	5f 83       	std	Y+7, r21	; 0x07
	if(sz == 0) return;
    279a:	8c 81       	ldd	r24, Y+4	; 0x04
    279c:	9d 81       	ldd	r25, Y+5	; 0x05
    279e:	ae 81       	ldd	r26, Y+6	; 0x06
    27a0:	bf 81       	ldd	r27, Y+7	; 0x07
    27a2:	89 2b       	or	r24, r25
    27a4:	8a 2b       	or	r24, r26
    27a6:	8b 2b       	or	r24, r27
    27a8:	f1 f0       	breq	.+60     	; 0x27e6 <m2m_memset+0x68>
	do
	{
		*pBuf = val;
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	9a 81       	ldd	r25, Y+2	; 0x02
    27ae:	2b 81       	ldd	r18, Y+3	; 0x03
    27b0:	fc 01       	movw	r30, r24
    27b2:	20 83       	st	Z, r18
		pBuf++;
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	9a 81       	ldd	r25, Y+2	; 0x02
    27b8:	01 96       	adiw	r24, 0x01	; 1
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	9a 83       	std	Y+2, r25	; 0x02
	}while(--sz);
    27be:	8c 81       	ldd	r24, Y+4	; 0x04
    27c0:	9d 81       	ldd	r25, Y+5	; 0x05
    27c2:	ae 81       	ldd	r26, Y+6	; 0x06
    27c4:	bf 81       	ldd	r27, Y+7	; 0x07
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	a1 09       	sbc	r26, r1
    27ca:	b1 09       	sbc	r27, r1
    27cc:	8c 83       	std	Y+4, r24	; 0x04
    27ce:	9d 83       	std	Y+5, r25	; 0x05
    27d0:	ae 83       	std	Y+6, r26	; 0x06
    27d2:	bf 83       	std	Y+7, r27	; 0x07
    27d4:	8c 81       	ldd	r24, Y+4	; 0x04
    27d6:	9d 81       	ldd	r25, Y+5	; 0x05
    27d8:	ae 81       	ldd	r26, Y+6	; 0x06
    27da:	bf 81       	ldd	r27, Y+7	; 0x07
    27dc:	89 2b       	or	r24, r25
    27de:	8a 2b       	or	r24, r26
    27e0:	8b 2b       	or	r24, r27
    27e2:	19 f7       	brne	.-58     	; 0x27aa <m2m_memset+0x2c>
    27e4:	01 c0       	rjmp	.+2      	; 0x27e8 <m2m_memset+0x6a>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    27e6:	00 00       	nop
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
    27e8:	27 96       	adiw	r28, 0x07	; 7
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	08 95       	ret

000027f4 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    27f4:	cf 93       	push	r28
    27f6:	df 93       	push	r29
    27f8:	00 d0       	rcall	.+0      	; 0x27fa <m2m_strlen+0x6>
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <m2m_strlen+0x8>
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	8b 83       	std	Y+3, r24	; 0x03
    2802:	9c 83       	std	Y+4, r25	; 0x04
	uint16	u16StrLen = 0;
    2804:	19 82       	std	Y+1, r1	; 0x01
    2806:	1a 82       	std	Y+2, r1	; 0x02
	while(*pcStr)
    2808:	0a c0       	rjmp	.+20     	; 0x281e <m2m_strlen+0x2a>
	{
		u16StrLen ++;
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	9a 81       	ldd	r25, Y+2	; 0x02
    280e:	01 96       	adiw	r24, 0x01	; 1
    2810:	89 83       	std	Y+1, r24	; 0x01
    2812:	9a 83       	std	Y+2, r25	; 0x02
		pcStr++;
    2814:	8b 81       	ldd	r24, Y+3	; 0x03
    2816:	9c 81       	ldd	r25, Y+4	; 0x04
    2818:	01 96       	adiw	r24, 0x01	; 1
    281a:	8b 83       	std	Y+3, r24	; 0x03
    281c:	9c 83       	std	Y+4, r25	; 0x04
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    281e:	8b 81       	ldd	r24, Y+3	; 0x03
    2820:	9c 81       	ldd	r25, Y+4	; 0x04
    2822:	fc 01       	movw	r30, r24
    2824:	80 81       	ld	r24, Z
    2826:	88 23       	and	r24, r24
    2828:	81 f7       	brne	.-32     	; 0x280a <m2m_strlen+0x16>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    282e:	24 96       	adiw	r28, 0x04	; 4
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	de bf       	out	0x3e, r29	; 62
    2834:	df 91       	pop	r29
    2836:	cf 91       	pop	r28
    2838:	08 95       	ret

0000283a <isr>:
{
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
	return ret;
}
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	80 91 91 2e 	lds	r24, 0x2E91	; 0x802e91 <gstrHifCxt+0x3>
    2846:	8f 5f       	subi	r24, 0xFF	; 255
    2848:	80 93 91 2e 	sts	0x2E91, r24	; 0x802e91 <gstrHifCxt+0x3>
    284c:	00 00       	nop
    284e:	df 91       	pop	r29
    2850:	cf 91       	pop	r28
    2852:	08 95       	ret

00002854 <hif_set_rx_done>:
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	25 97       	sbiw	r28, 0x05	; 5
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	19 82       	std	Y+1, r1	; 0x01
    2864:	10 92 90 2e 	sts	0x2E90, r1	; 0x802e90 <gstrHifCxt+0x2>
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	0e 94 9e 11 	call	0x233c	; 0x233c <nm_bsp_interrupt_ctrl>
    286e:	ce 01       	movw	r24, r28
    2870:	02 96       	adiw	r24, 0x02	; 2
    2872:	ac 01       	movw	r20, r24
    2874:	60 e7       	ldi	r22, 0x70	; 112
    2876:	70 e1       	ldi	r23, 0x10	; 16
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    2880:	89 83       	std	Y+1, r24	; 0x01
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	88 23       	and	r24, r24
    2886:	b9 f4       	brne	.+46     	; 0x28b6 <hif_set_rx_done+0x62>
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	9b 81       	ldd	r25, Y+3	; 0x03
    288c:	ac 81       	ldd	r26, Y+4	; 0x04
    288e:	bd 81       	ldd	r27, Y+5	; 0x05
    2890:	82 60       	ori	r24, 0x02	; 2
    2892:	8a 83       	std	Y+2, r24	; 0x02
    2894:	9b 83       	std	Y+3, r25	; 0x03
    2896:	ac 83       	std	Y+4, r26	; 0x04
    2898:	bd 83       	std	Y+5, r27	; 0x05
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	9b 81       	ldd	r25, Y+3	; 0x03
    289e:	ac 81       	ldd	r26, Y+4	; 0x04
    28a0:	bd 81       	ldd	r27, Y+5	; 0x05
    28a2:	9c 01       	movw	r18, r24
    28a4:	ad 01       	movw	r20, r26
    28a6:	60 e7       	ldi	r22, 0x70	; 112
    28a8:	70 e1       	ldi	r23, 0x10	; 16
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    28b2:	89 83       	std	Y+1, r24	; 0x01
    28b4:	01 c0       	rjmp	.+2      	; 0x28b8 <hif_set_rx_done+0x64>
    28b6:	00 00       	nop
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	25 96       	adiw	r28, 0x05	; 5
    28bc:	cd bf       	out	0x3d, r28	; 61
    28be:	de bf       	out	0x3e, r29	; 62
    28c0:	df 91       	pop	r29
    28c2:	cf 91       	pop	r28
    28c4:	08 95       	ret

000028c6 <m2m_hif_cb>:
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	27 97       	sbiw	r28, 0x07	; 7
    28d0:	cd bf       	out	0x3d, r28	; 61
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	89 83       	std	Y+1, r24	; 0x01
    28d6:	6a 83       	std	Y+2, r22	; 0x02
    28d8:	7b 83       	std	Y+3, r23	; 0x03
    28da:	2c 83       	std	Y+4, r18	; 0x04
    28dc:	3d 83       	std	Y+5, r19	; 0x05
    28de:	4e 83       	std	Y+6, r20	; 0x06
    28e0:	5f 83       	std	Y+7, r21	; 0x07
    28e2:	00 00       	nop
    28e4:	27 96       	adiw	r28, 0x07	; 7
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	df 91       	pop	r29
    28ec:	cf 91       	pop	r28
    28ee:	08 95       	ret

000028f0 <hif_chip_wake>:
    28f0:	cf 93       	push	r28
    28f2:	df 93       	push	r29
    28f4:	1f 92       	push	r1
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	19 82       	std	Y+1, r1	; 0x01
    28fc:	80 91 90 2e 	lds	r24, 0x2E90	; 0x802e90 <gstrHifCxt+0x2>
    2900:	88 23       	and	r24, r24
    2902:	11 f0       	breq	.+4      	; 0x2908 <hif_chip_wake+0x18>
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	16 c0       	rjmp	.+44     	; 0x2934 <hif_chip_wake+0x44>
    2908:	80 91 8f 2e 	lds	r24, 0x2E8F	; 0x802e8f <gstrHifCxt+0x1>
    290c:	88 23       	and	r24, r24
    290e:	51 f4       	brne	.+20     	; 0x2924 <hif_chip_wake+0x34>
    2910:	80 91 8e 2e 	lds	r24, 0x2E8E	; 0x802e8e <gstrHifCxt>
    2914:	88 23       	and	r24, r24
    2916:	31 f0       	breq	.+12     	; 0x2924 <hif_chip_wake+0x34>
    2918:	0e 94 27 21 	call	0x424e	; 0x424e <chip_wake>
    291c:	89 83       	std	Y+1, r24	; 0x01
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	88 23       	and	r24, r24
    2922:	31 f4       	brne	.+12     	; 0x2930 <hif_chip_wake+0x40>
    2924:	80 91 8f 2e 	lds	r24, 0x2E8F	; 0x802e8f <gstrHifCxt+0x1>
    2928:	8f 5f       	subi	r24, 0xFF	; 255
    292a:	80 93 8f 2e 	sts	0x2E8F, r24	; 0x802e8f <gstrHifCxt+0x1>
    292e:	01 c0       	rjmp	.+2      	; 0x2932 <hif_chip_wake+0x42>
    2930:	00 00       	nop
    2932:	89 81       	ldd	r24, Y+1	; 0x01
    2934:	0f 90       	pop	r0
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	08 95       	ret

0000293c <hif_chip_sleep_sc>:
    293c:	cf 93       	push	r28
    293e:	df 93       	push	r29
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    2944:	80 91 8f 2e 	lds	r24, 0x2E8F	; 0x802e8f <gstrHifCxt+0x1>
    2948:	88 23       	and	r24, r24
    294a:	29 f0       	breq	.+10     	; 0x2956 <hif_chip_sleep_sc+0x1a>
    294c:	80 91 8f 2e 	lds	r24, 0x2E8F	; 0x802e8f <gstrHifCxt+0x1>
    2950:	81 50       	subi	r24, 0x01	; 1
    2952:	80 93 8f 2e 	sts	0x2E8F, r24	; 0x802e8f <gstrHifCxt+0x1>
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	08 95       	ret

0000295e <hif_chip_sleep>:
    295e:	cf 93       	push	r28
    2960:	df 93       	push	r29
    2962:	1f 92       	push	r1
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	19 82       	std	Y+1, r1	; 0x01
    296a:	80 91 8f 2e 	lds	r24, 0x2E8F	; 0x802e8f <gstrHifCxt+0x1>
    296e:	88 23       	and	r24, r24
    2970:	29 f0       	breq	.+10     	; 0x297c <hif_chip_sleep+0x1e>
    2972:	80 91 8f 2e 	lds	r24, 0x2E8F	; 0x802e8f <gstrHifCxt+0x1>
    2976:	81 50       	subi	r24, 0x01	; 1
    2978:	80 93 8f 2e 	sts	0x2E8F, r24	; 0x802e8f <gstrHifCxt+0x1>
    297c:	80 91 8f 2e 	lds	r24, 0x2E8F	; 0x802e8f <gstrHifCxt+0x1>
    2980:	88 23       	and	r24, r24
    2982:	39 f4       	brne	.+14     	; 0x2992 <hif_chip_sleep+0x34>
    2984:	80 91 8e 2e 	lds	r24, 0x2E8E	; 0x802e8e <gstrHifCxt>
    2988:	88 23       	and	r24, r24
    298a:	19 f0       	breq	.+6      	; 0x2992 <hif_chip_sleep+0x34>
    298c:	0e 94 92 20 	call	0x4124	; 0x4124 <chip_sleep>
    2990:	89 83       	std	Y+1, r24	; 0x01
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	0f 90       	pop	r0
    2996:	df 91       	pop	r29
    2998:	cf 91       	pop	r28
    299a:	08 95       	ret

0000299c <hif_init>:
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <hif_init+0x6>
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	89 83       	std	Y+1, r24	; 0x01
    29a8:	9a 83       	std	Y+2, r25	; 0x02
    29aa:	2a e1       	ldi	r18, 0x1A	; 26
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e0       	ldi	r20, 0x00	; 0
    29b0:	50 e0       	ldi	r21, 0x00	; 0
    29b2:	60 e0       	ldi	r22, 0x00	; 0
    29b4:	8e e8       	ldi	r24, 0x8E	; 142
    29b6:	9e e2       	ldi	r25, 0x2E	; 46
    29b8:	0e 94 bf 13 	call	0x277e	; 0x277e <m2m_memset>
    29bc:	8d e1       	ldi	r24, 0x1D	; 29
    29be:	94 e1       	ldi	r25, 0x14	; 20
    29c0:	0e 94 7e 11 	call	0x22fc	; 0x22fc <nm_bsp_register_isr>
    29c4:	63 e6       	ldi	r22, 0x63	; 99
    29c6:	74 e1       	ldi	r23, 0x14	; 20
    29c8:	83 e0       	ldi	r24, 0x03	; 3
    29ca:	0e 94 61 19 	call	0x32c2	; 0x32c2 <hif_register_cb>
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	08 95       	ret

000029da <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    29da:	cf 92       	push	r12
    29dc:	df 92       	push	r13
    29de:	ef 92       	push	r14
    29e0:	ff 92       	push	r15
    29e2:	0f 93       	push	r16
    29e4:	1f 93       	push	r17
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
    29ee:	6f 97       	sbiw	r28, 0x1f	; 31
    29f0:	cd bf       	out	0x3d, r28	; 61
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	8c 8b       	std	Y+20, r24	; 0x14
    29f6:	6d 8b       	std	Y+21, r22	; 0x15
    29f8:	4e 8b       	std	Y+22, r20	; 0x16
    29fa:	5f 8b       	std	Y+23, r21	; 0x17
    29fc:	28 8f       	std	Y+24, r18	; 0x18
    29fe:	39 8f       	std	Y+25, r19	; 0x19
    2a00:	0a 8f       	std	Y+26, r16	; 0x1a
    2a02:	1b 8f       	std	Y+27, r17	; 0x1b
    2a04:	ec 8e       	std	Y+28, r14	; 0x1c
    2a06:	fd 8e       	std	Y+29, r15	; 0x1d
    2a08:	ce 8e       	std	Y+30, r12	; 0x1e
    2a0a:	df 8e       	std	Y+31, r13	; 0x1f
	sint8		ret = M2M_ERR_SEND;
    2a0c:	8f ef       	ldi	r24, 0xFF	; 255
    2a0e:	89 83       	std	Y+1, r24	; 0x01
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    2a10:	8d 89       	ldd	r24, Y+21	; 0x15
    2a12:	8f 77       	andi	r24, 0x7F	; 127
    2a14:	8b 83       	std	Y+3, r24	; 0x03
	strHif.u8Gid		= u8Gid;
    2a16:	8c 89       	ldd	r24, Y+20	; 0x14
    2a18:	8a 83       	std	Y+2, r24	; 0x02
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    2a1a:	88 e0       	ldi	r24, 0x08	; 8
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	8c 83       	std	Y+4, r24	; 0x04
    2a20:	9d 83       	std	Y+5, r25	; 0x05
	if(pu8DataBuf != NULL)
    2a22:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a24:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a26:	89 2b       	or	r24, r25
    2a28:	69 f0       	breq	.+26     	; 0x2a44 <hif_send+0x6a>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    2a2a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a2c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a2e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2a30:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2a32:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a34:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a36:	84 0f       	add	r24, r20
    2a38:	95 1f       	adc	r25, r21
    2a3a:	82 0f       	add	r24, r18
    2a3c:	93 1f       	adc	r25, r19
    2a3e:	8c 83       	std	Y+4, r24	; 0x04
    2a40:	9d 83       	std	Y+5, r25	; 0x05
    2a42:	08 c0       	rjmp	.+16     	; 0x2a54 <hif_send+0x7a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    2a44:	2c 81       	ldd	r18, Y+4	; 0x04
    2a46:	3d 81       	ldd	r19, Y+5	; 0x05
    2a48:	88 8d       	ldd	r24, Y+24	; 0x18
    2a4a:	99 8d       	ldd	r25, Y+25	; 0x19
    2a4c:	82 0f       	add	r24, r18
    2a4e:	93 1f       	adc	r25, r19
    2a50:	8c 83       	std	Y+4, r24	; 0x04
    2a52:	9d 83       	std	Y+5, r25	; 0x05
	}
	ret = hif_chip_wake();
    2a54:	0e 94 78 14 	call	0x28f0	; 0x28f0 <hif_chip_wake>
    2a58:	89 83       	std	Y+1, r24	; 0x01
	if(ret == M2M_SUCCESS)
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	88 23       	and	r24, r24
    2a5e:	09 f0       	breq	.+2      	; 0x2a62 <hif_send+0x88>
    2a60:	a6 c1       	rjmp	.+844    	; 0x2dae <hif_send+0x3d4>
	{
		volatile uint32 reg, dma_addr = 0;
    2a62:	1a 86       	std	Y+10, r1	; 0x0a
    2a64:	1b 86       	std	Y+11, r1	; 0x0b
    2a66:	1c 86       	std	Y+12, r1	; 0x0c
    2a68:	1d 86       	std	Y+13, r1	; 0x0d
		volatile uint16 cnt = 0;
    2a6a:	1e 86       	std	Y+14, r1	; 0x0e
    2a6c:	1f 86       	std	Y+15, r1	; 0x0f
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    2a6e:	1e 82       	std	Y+6, r1	; 0x06
    2a70:	1f 82       	std	Y+7, r1	; 0x07
    2a72:	18 86       	std	Y+8, r1	; 0x08
    2a74:	19 86       	std	Y+9, r1	; 0x09
		reg |= (uint32)u8Gid;
    2a76:	8c 89       	ldd	r24, Y+20	; 0x14
    2a78:	28 2f       	mov	r18, r24
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e0       	ldi	r20, 0x00	; 0
    2a7e:	50 e0       	ldi	r21, 0x00	; 0
    2a80:	8e 81       	ldd	r24, Y+6	; 0x06
    2a82:	9f 81       	ldd	r25, Y+7	; 0x07
    2a84:	a8 85       	ldd	r26, Y+8	; 0x08
    2a86:	b9 85       	ldd	r27, Y+9	; 0x09
    2a88:	82 2b       	or	r24, r18
    2a8a:	93 2b       	or	r25, r19
    2a8c:	a4 2b       	or	r26, r20
    2a8e:	b5 2b       	or	r27, r21
    2a90:	8e 83       	std	Y+6, r24	; 0x06
    2a92:	9f 83       	std	Y+7, r25	; 0x07
    2a94:	a8 87       	std	Y+8, r26	; 0x08
    2a96:	b9 87       	std	Y+9, r27	; 0x09
		reg |= ((uint32)u8Opcode<<8);
    2a98:	8d 89       	ldd	r24, Y+21	; 0x15
    2a9a:	88 2f       	mov	r24, r24
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	a0 e0       	ldi	r26, 0x00	; 0
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	22 27       	eor	r18, r18
    2aa4:	38 2f       	mov	r19, r24
    2aa6:	49 2f       	mov	r20, r25
    2aa8:	5a 2f       	mov	r21, r26
    2aaa:	8e 81       	ldd	r24, Y+6	; 0x06
    2aac:	9f 81       	ldd	r25, Y+7	; 0x07
    2aae:	a8 85       	ldd	r26, Y+8	; 0x08
    2ab0:	b9 85       	ldd	r27, Y+9	; 0x09
    2ab2:	82 2b       	or	r24, r18
    2ab4:	93 2b       	or	r25, r19
    2ab6:	a4 2b       	or	r26, r20
    2ab8:	b5 2b       	or	r27, r21
    2aba:	8e 83       	std	Y+6, r24	; 0x06
    2abc:	9f 83       	std	Y+7, r25	; 0x07
    2abe:	a8 87       	std	Y+8, r26	; 0x08
    2ac0:	b9 87       	std	Y+9, r27	; 0x09
		reg |= ((uint32)strHif.u16Length<<16);
    2ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ac6:	cc 01       	movw	r24, r24
    2ac8:	a0 e0       	ldi	r26, 0x00	; 0
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	ac 01       	movw	r20, r24
    2ace:	33 27       	eor	r19, r19
    2ad0:	22 27       	eor	r18, r18
    2ad2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ad6:	a8 85       	ldd	r26, Y+8	; 0x08
    2ad8:	b9 85       	ldd	r27, Y+9	; 0x09
    2ada:	82 2b       	or	r24, r18
    2adc:	93 2b       	or	r25, r19
    2ade:	a4 2b       	or	r26, r20
    2ae0:	b5 2b       	or	r27, r21
    2ae2:	8e 83       	std	Y+6, r24	; 0x06
    2ae4:	9f 83       	std	Y+7, r25	; 0x07
    2ae6:	a8 87       	std	Y+8, r26	; 0x08
    2ae8:	b9 87       	std	Y+9, r27	; 0x09
		ret = nm_write_reg(NMI_STATE_REG,reg);
    2aea:	8e 81       	ldd	r24, Y+6	; 0x06
    2aec:	9f 81       	ldd	r25, Y+7	; 0x07
    2aee:	a8 85       	ldd	r26, Y+8	; 0x08
    2af0:	b9 85       	ldd	r27, Y+9	; 0x09
    2af2:	9c 01       	movw	r18, r24
    2af4:	ad 01       	movw	r20, r26
    2af6:	6c e8       	ldi	r22, 0x8C	; 140
    2af8:	70 e1       	ldi	r23, 0x10	; 16
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    2b02:	89 83       	std	Y+1, r24	; 0x01
		if(M2M_SUCCESS != ret) goto ERR1;
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
    2b06:	88 23       	and	r24, r24
    2b08:	09 f0       	breq	.+2      	; 0x2b0c <hif_send+0x132>
    2b0a:	45 c1       	rjmp	.+650    	; 0x2d96 <hif_send+0x3bc>

		reg = 0UL;
    2b0c:	1e 82       	std	Y+6, r1	; 0x06
    2b0e:	1f 82       	std	Y+7, r1	; 0x07
    2b10:	18 86       	std	Y+8, r1	; 0x08
    2b12:	19 86       	std	Y+9, r1	; 0x09
		reg |= NBIT1;
    2b14:	8e 81       	ldd	r24, Y+6	; 0x06
    2b16:	9f 81       	ldd	r25, Y+7	; 0x07
    2b18:	a8 85       	ldd	r26, Y+8	; 0x08
    2b1a:	b9 85       	ldd	r27, Y+9	; 0x09
    2b1c:	82 60       	ori	r24, 0x02	; 2
    2b1e:	8e 83       	std	Y+6, r24	; 0x06
    2b20:	9f 83       	std	Y+7, r25	; 0x07
    2b22:	a8 87       	std	Y+8, r26	; 0x08
    2b24:	b9 87       	std	Y+9, r27	; 0x09
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    2b26:	8e 81       	ldd	r24, Y+6	; 0x06
    2b28:	9f 81       	ldd	r25, Y+7	; 0x07
    2b2a:	a8 85       	ldd	r26, Y+8	; 0x08
    2b2c:	b9 85       	ldd	r27, Y+9	; 0x09
    2b2e:	9c 01       	movw	r18, r24
    2b30:	ad 01       	movw	r20, r26
    2b32:	68 e7       	ldi	r22, 0x78	; 120
    2b34:	70 e1       	ldi	r23, 0x10	; 16
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    2b3e:	89 83       	std	Y+1, r24	; 0x01
		if(M2M_SUCCESS != ret) goto ERR1;
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	88 23       	and	r24, r24
    2b44:	09 f0       	breq	.+2      	; 0x2b48 <hif_send+0x16e>
    2b46:	29 c1       	rjmp	.+594    	; 0x2d9a <hif_send+0x3c0>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    2b48:	1a 86       	std	Y+10, r1	; 0x0a
    2b4a:	1b 86       	std	Y+11, r1	; 0x0b
    2b4c:	1c 86       	std	Y+12, r1	; 0x0c
    2b4e:	1d 86       	std	Y+13, r1	; 0x0d
		
		for(cnt = 0; cnt < 1000; cnt ++)
    2b50:	1e 86       	std	Y+14, r1	; 0x0e
    2b52:	1f 86       	std	Y+15, r1	; 0x0f
    2b54:	3d c0       	rjmp	.+122    	; 0x2bd0 <hif_send+0x1f6>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    2b56:	ce 01       	movw	r24, r28
    2b58:	06 96       	adiw	r24, 0x06	; 6
    2b5a:	ac 01       	movw	r20, r24
    2b5c:	68 e7       	ldi	r22, 0x78	; 120
    2b5e:	70 e1       	ldi	r23, 0x10	; 16
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    2b68:	89 83       	std	Y+1, r24	; 0x01
			if(ret != M2M_SUCCESS) break;
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	88 23       	and	r24, r24
    2b6e:	b9 f5       	brne	.+110    	; 0x2bde <hif_send+0x204>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    2b70:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b72:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b74:	84 3f       	cpi	r24, 0xF4	; 244
    2b76:	91 40       	sbci	r25, 0x01	; 1
    2b78:	40 f0       	brcs	.+16     	; 0x2b8a <hif_send+0x1b0>
				if(cnt < 501) {
    2b7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b7c:	9f 85       	ldd	r25, Y+15	; 0x0f
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    2b7e:	61 e0       	ldi	r22, 0x01	; 1
    2b80:	70 e0       	ldi	r23, 0x00	; 0
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	0e 94 e6 10 	call	0x21cc	; 0x21cc <nm_bsp_sleep>
			}
			if (!(reg & NBIT1))
    2b8a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b8c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b8e:	a8 85       	ldd	r26, Y+8	; 0x08
    2b90:	b9 85       	ldd	r27, Y+9	; 0x09
    2b92:	82 70       	andi	r24, 0x02	; 2
    2b94:	99 27       	eor	r25, r25
    2b96:	aa 27       	eor	r26, r26
    2b98:	bb 27       	eor	r27, r27
    2b9a:	89 2b       	or	r24, r25
    2b9c:	8a 2b       	or	r24, r26
    2b9e:	8b 2b       	or	r24, r27
    2ba0:	91 f4       	brne	.+36     	; 0x2bc6 <hif_send+0x1ec>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    2ba2:	ce 01       	movw	r24, r28
    2ba4:	0a 96       	adiw	r24, 0x0a	; 10
    2ba6:	ac 01       	movw	r20, r24
    2ba8:	60 e0       	ldi	r22, 0x00	; 0
    2baa:	74 e0       	ldi	r23, 0x04	; 4
    2bac:	85 e1       	ldi	r24, 0x15	; 21
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    2bb4:	89 83       	std	Y+1, r24	; 0x01
				if(ret != M2M_SUCCESS) {
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	88 23       	and	r24, r24
    2bba:	99 f0       	breq	.+38     	; 0x2be2 <hif_send+0x208>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    2bbc:	1a 86       	std	Y+10, r1	; 0x0a
    2bbe:	1b 86       	std	Y+11, r1	; 0x0b
    2bc0:	1c 86       	std	Y+12, r1	; 0x0c
    2bc2:	1d 86       	std	Y+13, r1	; 0x0d
					goto ERR1;
    2bc4:	f1 c0       	rjmp	.+482    	; 0x2da8 <hif_send+0x3ce>
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
		
		for(cnt = 0; cnt < 1000; cnt ++)
    2bc6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bc8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bca:	01 96       	adiw	r24, 0x01	; 1
    2bcc:	8e 87       	std	Y+14, r24	; 0x0e
    2bce:	9f 87       	std	Y+15, r25	; 0x0f
    2bd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bd2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bd4:	88 3e       	cpi	r24, 0xE8	; 232
    2bd6:	93 40       	sbci	r25, 0x03	; 3
    2bd8:	08 f4       	brcc	.+2      	; 0x2bdc <hif_send+0x202>
    2bda:	bd cf       	rjmp	.-134    	; 0x2b56 <hif_send+0x17c>
    2bdc:	03 c0       	rjmp	.+6      	; 0x2be4 <hif_send+0x20a>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
    2bde:	00 00       	nop
    2be0:	01 c0       	rjmp	.+2      	; 0x2be4 <hif_send+0x20a>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
					goto ERR1;
				}
				/*in case of success break */
				break;
    2be2:	00 00       	nop
			}
		}

		if (dma_addr != 0)
    2be4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2be6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2be8:	ac 85       	ldd	r26, Y+12	; 0x0c
    2bea:	bd 85       	ldd	r27, Y+13	; 0x0d
    2bec:	89 2b       	or	r24, r25
    2bee:	8a 2b       	or	r24, r26
    2bf0:	8b 2b       	or	r24, r27
    2bf2:	09 f4       	brne	.+2      	; 0x2bf6 <hif_send+0x21c>
    2bf4:	c5 c0       	rjmp	.+394    	; 0x2d80 <hif_send+0x3a6>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    2bf6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bf8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bfa:	ac 85       	ldd	r26, Y+12	; 0x0c
    2bfc:	bd 85       	ldd	r27, Y+13	; 0x0d
    2bfe:	88 8b       	std	Y+16, r24	; 0x10
    2c00:	99 8b       	std	Y+17, r25	; 0x11
    2c02:	aa 8b       	std	Y+18, r26	; 0x12
    2c04:	bb 8b       	std	Y+19, r27	; 0x13
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    2c06:	8c 81       	ldd	r24, Y+4	; 0x04
    2c08:	9d 81       	ldd	r25, Y+5	; 0x05
    2c0a:	8c 83       	std	Y+4, r24	; 0x04
    2c0c:	9d 83       	std	Y+5, r25	; 0x05
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    2c0e:	88 89       	ldd	r24, Y+16	; 0x10
    2c10:	99 89       	ldd	r25, Y+17	; 0x11
    2c12:	aa 89       	ldd	r26, Y+18	; 0x12
    2c14:	bb 89       	ldd	r27, Y+19	; 0x13
    2c16:	ae 01       	movw	r20, r28
    2c18:	4e 5f       	subi	r20, 0xFE	; 254
    2c1a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c1c:	08 e0       	ldi	r16, 0x08	; 8
    2c1e:	10 e0       	ldi	r17, 0x00	; 0
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	bc 01       	movw	r22, r24
    2c26:	cd 01       	movw	r24, r26
    2c28:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <nm_write_block>
    2c2c:	89 83       	std	Y+1, r24	; 0x01
			if(M2M_SUCCESS != ret) goto ERR1;
    2c2e:	89 81       	ldd	r24, Y+1	; 0x01
    2c30:	88 23       	and	r24, r24
    2c32:	09 f0       	breq	.+2      	; 0x2c36 <hif_send+0x25c>
    2c34:	b4 c0       	rjmp	.+360    	; 0x2d9e <hif_send+0x3c4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    2c36:	88 89       	ldd	r24, Y+16	; 0x10
    2c38:	99 89       	ldd	r25, Y+17	; 0x11
    2c3a:	aa 89       	ldd	r26, Y+18	; 0x12
    2c3c:	bb 89       	ldd	r27, Y+19	; 0x13
    2c3e:	08 96       	adiw	r24, 0x08	; 8
    2c40:	a1 1d       	adc	r26, r1
    2c42:	b1 1d       	adc	r27, r1
    2c44:	88 8b       	std	Y+16, r24	; 0x10
    2c46:	99 8b       	std	Y+17, r25	; 0x11
    2c48:	aa 8b       	std	Y+18, r26	; 0x12
    2c4a:	bb 8b       	std	Y+19, r27	; 0x13
			if(pu8CtrlBuf != NULL)
    2c4c:	8e 89       	ldd	r24, Y+22	; 0x16
    2c4e:	9f 89       	ldd	r25, Y+23	; 0x17
    2c50:	89 2b       	or	r24, r25
    2c52:	41 f1       	breq	.+80     	; 0x2ca4 <hif_send+0x2ca>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    2c54:	88 8d       	ldd	r24, Y+24	; 0x18
    2c56:	99 8d       	ldd	r25, Y+25	; 0x19
    2c58:	9c 01       	movw	r18, r24
    2c5a:	40 e0       	ldi	r20, 0x00	; 0
    2c5c:	50 e0       	ldi	r21, 0x00	; 0
    2c5e:	88 89       	ldd	r24, Y+16	; 0x10
    2c60:	99 89       	ldd	r25, Y+17	; 0x11
    2c62:	aa 89       	ldd	r26, Y+18	; 0x12
    2c64:	bb 89       	ldd	r27, Y+19	; 0x13
    2c66:	6e 89       	ldd	r22, Y+22	; 0x16
    2c68:	7f 89       	ldd	r23, Y+23	; 0x17
    2c6a:	89 01       	movw	r16, r18
    2c6c:	9a 01       	movw	r18, r20
    2c6e:	ab 01       	movw	r20, r22
    2c70:	bc 01       	movw	r22, r24
    2c72:	cd 01       	movw	r24, r26
    2c74:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <nm_write_block>
    2c78:	89 83       	std	Y+1, r24	; 0x01
				if(M2M_SUCCESS != ret) goto ERR1;
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	88 23       	and	r24, r24
    2c7e:	09 f0       	breq	.+2      	; 0x2c82 <hif_send+0x2a8>
    2c80:	90 c0       	rjmp	.+288    	; 0x2da2 <hif_send+0x3c8>
				u32CurrAddr += u16CtrlBufSize;
    2c82:	88 8d       	ldd	r24, Y+24	; 0x18
    2c84:	99 8d       	ldd	r25, Y+25	; 0x19
    2c86:	9c 01       	movw	r18, r24
    2c88:	40 e0       	ldi	r20, 0x00	; 0
    2c8a:	50 e0       	ldi	r21, 0x00	; 0
    2c8c:	88 89       	ldd	r24, Y+16	; 0x10
    2c8e:	99 89       	ldd	r25, Y+17	; 0x11
    2c90:	aa 89       	ldd	r26, Y+18	; 0x12
    2c92:	bb 89       	ldd	r27, Y+19	; 0x13
    2c94:	82 0f       	add	r24, r18
    2c96:	93 1f       	adc	r25, r19
    2c98:	a4 1f       	adc	r26, r20
    2c9a:	b5 1f       	adc	r27, r21
    2c9c:	88 8b       	std	Y+16, r24	; 0x10
    2c9e:	99 8b       	std	Y+17, r25	; 0x11
    2ca0:	aa 8b       	std	Y+18, r26	; 0x12
    2ca2:	bb 8b       	std	Y+19, r27	; 0x13
			}
			if(pu8DataBuf != NULL)
    2ca4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ca6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ca8:	89 2b       	or	r24, r25
    2caa:	09 f4       	brne	.+2      	; 0x2cae <hif_send+0x2d4>
    2cac:	3f c0       	rjmp	.+126    	; 0x2d2c <hif_send+0x352>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    2cae:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2cb0:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2cb2:	88 8d       	ldd	r24, Y+24	; 0x18
    2cb4:	99 8d       	ldd	r25, Y+25	; 0x19
    2cb6:	a9 01       	movw	r20, r18
    2cb8:	48 1b       	sub	r20, r24
    2cba:	59 0b       	sbc	r21, r25
    2cbc:	ca 01       	movw	r24, r20
    2cbe:	9c 01       	movw	r18, r24
    2cc0:	40 e0       	ldi	r20, 0x00	; 0
    2cc2:	50 e0       	ldi	r21, 0x00	; 0
    2cc4:	88 89       	ldd	r24, Y+16	; 0x10
    2cc6:	99 89       	ldd	r25, Y+17	; 0x11
    2cc8:	aa 89       	ldd	r26, Y+18	; 0x12
    2cca:	bb 89       	ldd	r27, Y+19	; 0x13
    2ccc:	82 0f       	add	r24, r18
    2cce:	93 1f       	adc	r25, r19
    2cd0:	a4 1f       	adc	r26, r20
    2cd2:	b5 1f       	adc	r27, r21
    2cd4:	88 8b       	std	Y+16, r24	; 0x10
    2cd6:	99 8b       	std	Y+17, r25	; 0x11
    2cd8:	aa 8b       	std	Y+18, r26	; 0x12
    2cda:	bb 8b       	std	Y+19, r27	; 0x13
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    2cdc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2cde:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ce0:	9c 01       	movw	r18, r24
    2ce2:	40 e0       	ldi	r20, 0x00	; 0
    2ce4:	50 e0       	ldi	r21, 0x00	; 0
    2ce6:	88 89       	ldd	r24, Y+16	; 0x10
    2ce8:	99 89       	ldd	r25, Y+17	; 0x11
    2cea:	aa 89       	ldd	r26, Y+18	; 0x12
    2cec:	bb 89       	ldd	r27, Y+19	; 0x13
    2cee:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2cf0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2cf2:	89 01       	movw	r16, r18
    2cf4:	9a 01       	movw	r18, r20
    2cf6:	ab 01       	movw	r20, r22
    2cf8:	bc 01       	movw	r22, r24
    2cfa:	cd 01       	movw	r24, r26
    2cfc:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <nm_write_block>
    2d00:	89 83       	std	Y+1, r24	; 0x01
				if(M2M_SUCCESS != ret) goto ERR1;
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	88 23       	and	r24, r24
    2d06:	09 f0       	breq	.+2      	; 0x2d0a <hif_send+0x330>
    2d08:	4e c0       	rjmp	.+156    	; 0x2da6 <hif_send+0x3cc>
				u32CurrAddr += u16DataSize;
    2d0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d0c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d0e:	9c 01       	movw	r18, r24
    2d10:	40 e0       	ldi	r20, 0x00	; 0
    2d12:	50 e0       	ldi	r21, 0x00	; 0
    2d14:	88 89       	ldd	r24, Y+16	; 0x10
    2d16:	99 89       	ldd	r25, Y+17	; 0x11
    2d18:	aa 89       	ldd	r26, Y+18	; 0x12
    2d1a:	bb 89       	ldd	r27, Y+19	; 0x13
    2d1c:	82 0f       	add	r24, r18
    2d1e:	93 1f       	adc	r25, r19
    2d20:	a4 1f       	adc	r26, r20
    2d22:	b5 1f       	adc	r27, r21
    2d24:	88 8b       	std	Y+16, r24	; 0x10
    2d26:	99 8b       	std	Y+17, r25	; 0x11
    2d28:	aa 8b       	std	Y+18, r26	; 0x12
    2d2a:	bb 8b       	std	Y+19, r27	; 0x13
			}

			reg = dma_addr << 2;
    2d2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d30:	ac 85       	ldd	r26, Y+12	; 0x0c
    2d32:	bd 85       	ldd	r27, Y+13	; 0x0d
    2d34:	88 0f       	add	r24, r24
    2d36:	99 1f       	adc	r25, r25
    2d38:	aa 1f       	adc	r26, r26
    2d3a:	bb 1f       	adc	r27, r27
    2d3c:	88 0f       	add	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	aa 1f       	adc	r26, r26
    2d42:	bb 1f       	adc	r27, r27
    2d44:	8e 83       	std	Y+6, r24	; 0x06
    2d46:	9f 83       	std	Y+7, r25	; 0x07
    2d48:	a8 87       	std	Y+8, r26	; 0x08
    2d4a:	b9 87       	std	Y+9, r27	; 0x09
			reg |= NBIT1;
    2d4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d4e:	9f 81       	ldd	r25, Y+7	; 0x07
    2d50:	a8 85       	ldd	r26, Y+8	; 0x08
    2d52:	b9 85       	ldd	r27, Y+9	; 0x09
    2d54:	82 60       	ori	r24, 0x02	; 2
    2d56:	8e 83       	std	Y+6, r24	; 0x06
    2d58:	9f 83       	std	Y+7, r25	; 0x07
    2d5a:	a8 87       	std	Y+8, r26	; 0x08
    2d5c:	b9 87       	std	Y+9, r27	; 0x09
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    2d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d60:	9f 81       	ldd	r25, Y+7	; 0x07
    2d62:	a8 85       	ldd	r26, Y+8	; 0x08
    2d64:	b9 85       	ldd	r27, Y+9	; 0x09
    2d66:	9c 01       	movw	r18, r24
    2d68:	ad 01       	movw	r20, r26
    2d6a:	6c e6       	ldi	r22, 0x6C	; 108
    2d6c:	70 e1       	ldi	r23, 0x10	; 16
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    2d76:	89 83       	std	Y+1, r24	; 0x01
			if(M2M_SUCCESS != ret) goto ERR1;
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	88 23       	and	r24, r24
    2d7c:	39 f0       	breq	.+14     	; 0x2d8c <hif_send+0x3b2>
    2d7e:	14 c0       	rjmp	.+40     	; 0x2da8 <hif_send+0x3ce>
		}
		else
		{
			ret = hif_chip_sleep();
    2d80:	0e 94 af 14 	call	0x295e	; 0x295e <hif_chip_sleep>
    2d84:	89 83       	std	Y+1, r24	; 0x01
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    2d86:	8d ef       	ldi	r24, 0xFD	; 253
    2d88:	89 83       	std	Y+1, r24	; 0x01
			goto ERR2;
    2d8a:	12 c0       	rjmp	.+36     	; 0x2db0 <hif_send+0x3d6>
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR2;
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    2d8c:	0e 94 af 14 	call	0x295e	; 0x295e <hif_chip_sleep>
    2d90:	89 83       	std	Y+1, r24	; 0x01
	return ret;
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	0e c0       	rjmp	.+28     	; 0x2db2 <hif_send+0x3d8>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    2d96:	00 00       	nop
    2d98:	07 c0       	rjmp	.+14     	; 0x2da8 <hif_send+0x3ce>

		reg = 0UL;
		reg |= NBIT1;
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    2d9a:	00 00       	nop
    2d9c:	05 c0       	rjmp	.+10     	; 0x2da8 <hif_send+0x3ce>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
			if(M2M_SUCCESS != ret) goto ERR1;
    2d9e:	00 00       	nop
    2da0:	03 c0       	rjmp	.+6      	; 0x2da8 <hif_send+0x3ce>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
			if(pu8CtrlBuf != NULL)
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
				if(M2M_SUCCESS != ret) goto ERR1;
    2da2:	00 00       	nop
    2da4:	01 c0       	rjmp	.+2      	; 0x2da8 <hif_send+0x3ce>
			}
			if(pu8DataBuf != NULL)
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
				if(M2M_SUCCESS != ret) goto ERR1;
    2da6:	00 00       	nop
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    2da8:	0e 94 9e 14 	call	0x293c	; 0x293c <hif_chip_sleep_sc>
    2dac:	01 c0       	rjmp	.+2      	; 0x2db0 <hif_send+0x3d6>

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR2;
    2dae:	00 00       	nop
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
ERR2:
	/*logical error*/
	return ret;
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2db2:	6f 96       	adiw	r28, 0x1f	; 31
    2db4:	cd bf       	out	0x3d, r28	; 61
    2db6:	de bf       	out	0x3e, r29	; 62
    2db8:	df 91       	pop	r29
    2dba:	cf 91       	pop	r28
    2dbc:	1f 91       	pop	r17
    2dbe:	0f 91       	pop	r16
    2dc0:	ff 90       	pop	r15
    2dc2:	ef 90       	pop	r14
    2dc4:	df 90       	pop	r13
    2dc6:	cf 90       	pop	r12
    2dc8:	08 95       	ret

00002dca <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    2dca:	0f 93       	push	r16
    2dcc:	1f 93       	push	r17
    2dce:	cf 93       	push	r28
    2dd0:	df 93       	push	r29
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
    2dd6:	2f 97       	sbiw	r28, 0x0f	; 15
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	de bf       	out	0x3e, r29	; 62
	sint8 ret = M2M_SUCCESS;
    2ddc:	19 82       	std	Y+1, r1	; 0x01
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    2dde:	ce 01       	movw	r24, r28
    2de0:	04 96       	adiw	r24, 0x04	; 4
    2de2:	ac 01       	movw	r20, r24
    2de4:	60 e7       	ldi	r22, 0x70	; 112
    2de6:	70 e1       	ldi	r23, 0x10	; 16
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    2df0:	89 83       	std	Y+1, r24	; 0x01
	if(M2M_SUCCESS == ret)
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
    2df4:	88 23       	and	r24, r24
    2df6:	09 f0       	breq	.+2      	; 0x2dfa <hif_isr+0x30>
    2df8:	70 c1       	rjmp	.+736    	; 0x30da <hif_isr+0x310>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    2dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2dfc:	9d 81       	ldd	r25, Y+5	; 0x05
    2dfe:	ae 81       	ldd	r26, Y+6	; 0x06
    2e00:	bf 81       	ldd	r27, Y+7	; 0x07
    2e02:	81 70       	andi	r24, 0x01	; 1
    2e04:	99 27       	eor	r25, r25
    2e06:	aa 27       	eor	r26, r26
    2e08:	bb 27       	eor	r27, r27
    2e0a:	89 2b       	or	r24, r25
    2e0c:	8a 2b       	or	r24, r26
    2e0e:	8b 2b       	or	r24, r27
    2e10:	09 f4       	brne	.+2      	; 0x2e14 <hif_isr+0x4a>
    2e12:	60 c1       	rjmp	.+704    	; 0x30d4 <hif_isr+0x30a>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	0e 94 9e 11 	call	0x233c	; 0x233c <nm_bsp_interrupt_ctrl>
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    2e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e1e:	ae 81       	ldd	r26, Y+6	; 0x06
    2e20:	bf 81       	ldd	r27, Y+7	; 0x07
    2e22:	8e 7f       	andi	r24, 0xFE	; 254
    2e24:	8c 83       	std	Y+4, r24	; 0x04
    2e26:	9d 83       	std	Y+5, r25	; 0x05
    2e28:	ae 83       	std	Y+6, r26	; 0x06
    2e2a:	bf 83       	std	Y+7, r27	; 0x07
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    2e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e30:	ae 81       	ldd	r26, Y+6	; 0x06
    2e32:	bf 81       	ldd	r27, Y+7	; 0x07
    2e34:	9c 01       	movw	r18, r24
    2e36:	ad 01       	movw	r20, r26
    2e38:	60 e7       	ldi	r22, 0x70	; 112
    2e3a:	70 e1       	ldi	r23, 0x10	; 16
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    2e44:	89 83       	std	Y+1, r24	; 0x01
			if(ret != M2M_SUCCESS)goto ERR1;
    2e46:	89 81       	ldd	r24, Y+1	; 0x01
    2e48:	88 23       	and	r24, r24
    2e4a:	09 f0       	breq	.+2      	; 0x2e4e <hif_isr+0x84>
    2e4c:	48 c1       	rjmp	.+656    	; 0x30de <hif_isr+0x314>
			gstrHifCxt.u8HifRXDone = 1;
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	80 93 90 2e 	sts	0x2E90, r24	; 0x802e90 <gstrHifCxt+0x2>
			size = (uint16)((reg >> 2) & 0xfff);
    2e54:	8c 81       	ldd	r24, Y+4	; 0x04
    2e56:	9d 81       	ldd	r25, Y+5	; 0x05
    2e58:	ae 81       	ldd	r26, Y+6	; 0x06
    2e5a:	bf 81       	ldd	r27, Y+7	; 0x07
    2e5c:	b6 95       	lsr	r27
    2e5e:	a7 95       	ror	r26
    2e60:	97 95       	ror	r25
    2e62:	87 95       	ror	r24
    2e64:	b6 95       	lsr	r27
    2e66:	a7 95       	ror	r26
    2e68:	97 95       	ror	r25
    2e6a:	87 95       	ror	r24
    2e6c:	9f 70       	andi	r25, 0x0F	; 15
    2e6e:	8a 83       	std	Y+2, r24	; 0x02
    2e70:	9b 83       	std	Y+3, r25	; 0x03
			if (size > 0) {
    2e72:	8a 81       	ldd	r24, Y+2	; 0x02
    2e74:	9b 81       	ldd	r25, Y+3	; 0x03
    2e76:	89 2b       	or	r24, r25
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <hif_isr+0xb2>
    2e7a:	29 c1       	rjmp	.+594    	; 0x30ce <hif_isr+0x304>
				uint32 address = 0;
    2e7c:	1c 86       	std	Y+12, r1	; 0x0c
    2e7e:	1d 86       	std	Y+13, r1	; 0x0d
    2e80:	1e 86       	std	Y+14, r1	; 0x0e
    2e82:	1f 86       	std	Y+15, r1	; 0x0f
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    2e84:	ce 01       	movw	r24, r28
    2e86:	0c 96       	adiw	r24, 0x0c	; 12
    2e88:	ac 01       	movw	r20, r24
    2e8a:	64 e8       	ldi	r22, 0x84	; 132
    2e8c:	70 e1       	ldi	r23, 0x10	; 16
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    2e96:	89 83       	std	Y+1, r24	; 0x01
				if(M2M_SUCCESS != ret)
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	88 23       	and	r24, r24
    2e9c:	21 f0       	breq	.+8      	; 0x2ea6 <hif_isr+0xdc>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
					nm_bsp_interrupt_ctrl(1);
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	0e 94 9e 11 	call	0x233c	; 0x233c <nm_bsp_interrupt_ctrl>
					goto ERR1;
    2ea4:	1d c1       	rjmp	.+570    	; 0x30e0 <hif_isr+0x316>
				}
				gstrHifCxt.u32RxAddr = address;
    2ea6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ea8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2eaa:	ae 85       	ldd	r26, Y+14	; 0x0e
    2eac:	bf 85       	ldd	r27, Y+15	; 0x0f
    2eae:	80 93 92 2e 	sts	0x2E92, r24	; 0x802e92 <gstrHifCxt+0x4>
    2eb2:	90 93 93 2e 	sts	0x2E93, r25	; 0x802e93 <gstrHifCxt+0x5>
    2eb6:	a0 93 94 2e 	sts	0x2E94, r26	; 0x802e94 <gstrHifCxt+0x6>
    2eba:	b0 93 95 2e 	sts	0x2E95, r27	; 0x802e95 <gstrHifCxt+0x7>
				gstrHifCxt.u32RxSize = size;
    2ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec2:	cc 01       	movw	r24, r24
    2ec4:	a0 e0       	ldi	r26, 0x00	; 0
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	80 93 96 2e 	sts	0x2E96, r24	; 0x802e96 <gstrHifCxt+0x8>
    2ecc:	90 93 97 2e 	sts	0x2E97, r25	; 0x802e97 <gstrHifCxt+0x9>
    2ed0:	a0 93 98 2e 	sts	0x2E98, r26	; 0x802e98 <gstrHifCxt+0xa>
    2ed4:	b0 93 99 2e 	sts	0x2E99, r27	; 0x802e99 <gstrHifCxt+0xb>
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    2ed8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2eda:	9d 85       	ldd	r25, Y+13	; 0x0d
    2edc:	ae 85       	ldd	r26, Y+14	; 0x0e
    2ede:	bf 85       	ldd	r27, Y+15	; 0x0f
    2ee0:	ae 01       	movw	r20, r28
    2ee2:	48 5f       	subi	r20, 0xF8	; 248
    2ee4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ee6:	04 e0       	ldi	r16, 0x04	; 4
    2ee8:	10 e0       	ldi	r17, 0x00	; 0
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	0e 94 58 24 	call	0x48b0	; 0x48b0 <nm_read_block>
    2ef6:	89 83       	std	Y+1, r24	; 0x01
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    2ef8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2efa:	9b 85       	ldd	r25, Y+11	; 0x0b
    2efc:	8a 87       	std	Y+10, r24	; 0x0a
    2efe:	9b 87       	std	Y+11, r25	; 0x0b
				if(M2M_SUCCESS != ret)
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
    2f02:	88 23       	and	r24, r24
    2f04:	21 f0       	breq	.+8      	; 0x2f0e <hif_isr+0x144>
				{
					M2M_ERR("(hif) address bus fail\n");
					nm_bsp_interrupt_ctrl(1);
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	0e 94 9e 11 	call	0x233c	; 0x233c <nm_bsp_interrupt_ctrl>
					goto ERR1;
    2f0c:	e9 c0       	rjmp	.+466    	; 0x30e0 <hif_isr+0x316>
				}
				if(strHif.u16Length != size)
    2f0e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2f10:	3b 85       	ldd	r19, Y+11	; 0x0b
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	9b 81       	ldd	r25, Y+3	; 0x03
    2f16:	28 17       	cp	r18, r24
    2f18:	39 07       	cpc	r19, r25
    2f1a:	81 f0       	breq	.+32     	; 0x2f3c <hif_isr+0x172>
				{
					if((size - strHif.u16Length) > 4)
    2f1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f20:	2a 81       	ldd	r18, Y+2	; 0x02
    2f22:	3b 81       	ldd	r19, Y+3	; 0x03
    2f24:	a9 01       	movw	r20, r18
    2f26:	48 1b       	sub	r20, r24
    2f28:	59 0b       	sbc	r21, r25
    2f2a:	ca 01       	movw	r24, r20
    2f2c:	05 97       	sbiw	r24, 0x05	; 5
    2f2e:	30 f0       	brcs	.+12     	; 0x2f3c <hif_isr+0x172>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	0e 94 9e 11 	call	0x233c	; 0x233c <nm_bsp_interrupt_ctrl>
						ret = M2M_ERR_BUS_FAIL;
    2f36:	8a ef       	ldi	r24, 0xFA	; 250
    2f38:	89 83       	std	Y+1, r24	; 0x01
						goto ERR1;
    2f3a:	d2 c0       	rjmp	.+420    	; 0x30e0 <hif_isr+0x316>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    2f3c:	88 85       	ldd	r24, Y+8	; 0x08
    2f3e:	81 30       	cpi	r24, 0x01	; 1
    2f40:	e9 f4       	brne	.+58     	; 0x2f7c <hif_isr+0x1b2>
				{
					if(gstrHifCxt.pfWifiCb)
    2f42:	80 91 9a 2e 	lds	r24, 0x2E9A	; 0x802e9a <gstrHifCxt+0xc>
    2f46:	90 91 9b 2e 	lds	r25, 0x2E9B	; 0x802e9b <gstrHifCxt+0xd>
    2f4a:	89 2b       	or	r24, r25
    2f4c:	09 f4       	brne	.+2      	; 0x2f50 <hif_isr+0x186>
    2f4e:	b7 c0       	rjmp	.+366    	; 0x30be <hif_isr+0x2f4>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2f50:	e0 91 9a 2e 	lds	r30, 0x2E9A	; 0x802e9a <gstrHifCxt+0xc>
    2f54:	f0 91 9b 2e 	lds	r31, 0x2E9B	; 0x802e9b <gstrHifCxt+0xd>
    2f58:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f5c:	ae 85       	ldd	r26, Y+14	; 0x0e
    2f5e:	bf 85       	ldd	r27, Y+15	; 0x0f
    2f60:	08 96       	adiw	r24, 0x08	; 8
    2f62:	a1 1d       	adc	r26, r1
    2f64:	b1 1d       	adc	r27, r1
    2f66:	2a 85       	ldd	r18, Y+10	; 0x0a
    2f68:	3b 85       	ldd	r19, Y+11	; 0x0b
    2f6a:	b9 01       	movw	r22, r18
    2f6c:	68 50       	subi	r22, 0x08	; 8
    2f6e:	71 09       	sbc	r23, r1
    2f70:	19 85       	ldd	r17, Y+9	; 0x09
    2f72:	9c 01       	movw	r18, r24
    2f74:	ad 01       	movw	r20, r26
    2f76:	81 2f       	mov	r24, r17
    2f78:	09 95       	icall
    2f7a:	a1 c0       	rjmp	.+322    	; 0x30be <hif_isr+0x2f4>
					else
						M2M_ERR("WIFI callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    2f7c:	88 85       	ldd	r24, Y+8	; 0x08
    2f7e:	82 30       	cpi	r24, 0x02	; 2
    2f80:	e9 f4       	brne	.+58     	; 0x2fbc <hif_isr+0x1f2>
				{
					if(gstrHifCxt.pfIpCb)
    2f82:	80 91 9c 2e 	lds	r24, 0x2E9C	; 0x802e9c <gstrHifCxt+0xe>
    2f86:	90 91 9d 2e 	lds	r25, 0x2E9D	; 0x802e9d <gstrHifCxt+0xf>
    2f8a:	89 2b       	or	r24, r25
    2f8c:	09 f4       	brne	.+2      	; 0x2f90 <hif_isr+0x1c6>
    2f8e:	97 c0       	rjmp	.+302    	; 0x30be <hif_isr+0x2f4>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2f90:	e0 91 9c 2e 	lds	r30, 0x2E9C	; 0x802e9c <gstrHifCxt+0xe>
    2f94:	f0 91 9d 2e 	lds	r31, 0x2E9D	; 0x802e9d <gstrHifCxt+0xf>
    2f98:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f9c:	ae 85       	ldd	r26, Y+14	; 0x0e
    2f9e:	bf 85       	ldd	r27, Y+15	; 0x0f
    2fa0:	08 96       	adiw	r24, 0x08	; 8
    2fa2:	a1 1d       	adc	r26, r1
    2fa4:	b1 1d       	adc	r27, r1
    2fa6:	2a 85       	ldd	r18, Y+10	; 0x0a
    2fa8:	3b 85       	ldd	r19, Y+11	; 0x0b
    2faa:	b9 01       	movw	r22, r18
    2fac:	68 50       	subi	r22, 0x08	; 8
    2fae:	71 09       	sbc	r23, r1
    2fb0:	19 85       	ldd	r17, Y+9	; 0x09
    2fb2:	9c 01       	movw	r18, r24
    2fb4:	ad 01       	movw	r20, r26
    2fb6:	81 2f       	mov	r24, r17
    2fb8:	09 95       	icall
    2fba:	81 c0       	rjmp	.+258    	; 0x30be <hif_isr+0x2f4>
					else
						M2M_ERR("Scoket callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    2fbc:	88 85       	ldd	r24, Y+8	; 0x08
    2fbe:	84 30       	cpi	r24, 0x04	; 4
    2fc0:	e9 f4       	brne	.+58     	; 0x2ffc <hif_isr+0x232>
				{
					if(gstrHifCxt.pfOtaCb)
    2fc2:	80 91 9e 2e 	lds	r24, 0x2E9E	; 0x802e9e <gstrHifCxt+0x10>
    2fc6:	90 91 9f 2e 	lds	r25, 0x2E9F	; 0x802e9f <gstrHifCxt+0x11>
    2fca:	89 2b       	or	r24, r25
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <hif_isr+0x206>
    2fce:	77 c0       	rjmp	.+238    	; 0x30be <hif_isr+0x2f4>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2fd0:	e0 91 9e 2e 	lds	r30, 0x2E9E	; 0x802e9e <gstrHifCxt+0x10>
    2fd4:	f0 91 9f 2e 	lds	r31, 0x2E9F	; 0x802e9f <gstrHifCxt+0x11>
    2fd8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fda:	9d 85       	ldd	r25, Y+13	; 0x0d
    2fdc:	ae 85       	ldd	r26, Y+14	; 0x0e
    2fde:	bf 85       	ldd	r27, Y+15	; 0x0f
    2fe0:	08 96       	adiw	r24, 0x08	; 8
    2fe2:	a1 1d       	adc	r26, r1
    2fe4:	b1 1d       	adc	r27, r1
    2fe6:	2a 85       	ldd	r18, Y+10	; 0x0a
    2fe8:	3b 85       	ldd	r19, Y+11	; 0x0b
    2fea:	b9 01       	movw	r22, r18
    2fec:	68 50       	subi	r22, 0x08	; 8
    2fee:	71 09       	sbc	r23, r1
    2ff0:	19 85       	ldd	r17, Y+9	; 0x09
    2ff2:	9c 01       	movw	r18, r24
    2ff4:	ad 01       	movw	r20, r26
    2ff6:	81 2f       	mov	r24, r17
    2ff8:	09 95       	icall
    2ffa:	61 c0       	rjmp	.+194    	; 0x30be <hif_isr+0x2f4>
					else
						M2M_ERR("Ota callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    2ffc:	88 85       	ldd	r24, Y+8	; 0x08
    2ffe:	86 30       	cpi	r24, 0x06	; 6
    3000:	e9 f4       	brne	.+58     	; 0x303c <hif_isr+0x272>
				{
					if(gstrHifCxt.pfCryptoCb)
    3002:	80 91 a4 2e 	lds	r24, 0x2EA4	; 0x802ea4 <gstrHifCxt+0x16>
    3006:	90 91 a5 2e 	lds	r25, 0x2EA5	; 0x802ea5 <gstrHifCxt+0x17>
    300a:	89 2b       	or	r24, r25
    300c:	09 f4       	brne	.+2      	; 0x3010 <hif_isr+0x246>
    300e:	57 c0       	rjmp	.+174    	; 0x30be <hif_isr+0x2f4>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3010:	e0 91 a4 2e 	lds	r30, 0x2EA4	; 0x802ea4 <gstrHifCxt+0x16>
    3014:	f0 91 a5 2e 	lds	r31, 0x2EA5	; 0x802ea5 <gstrHifCxt+0x17>
    3018:	8c 85       	ldd	r24, Y+12	; 0x0c
    301a:	9d 85       	ldd	r25, Y+13	; 0x0d
    301c:	ae 85       	ldd	r26, Y+14	; 0x0e
    301e:	bf 85       	ldd	r27, Y+15	; 0x0f
    3020:	08 96       	adiw	r24, 0x08	; 8
    3022:	a1 1d       	adc	r26, r1
    3024:	b1 1d       	adc	r27, r1
    3026:	2a 85       	ldd	r18, Y+10	; 0x0a
    3028:	3b 85       	ldd	r19, Y+11	; 0x0b
    302a:	b9 01       	movw	r22, r18
    302c:	68 50       	subi	r22, 0x08	; 8
    302e:	71 09       	sbc	r23, r1
    3030:	19 85       	ldd	r17, Y+9	; 0x09
    3032:	9c 01       	movw	r18, r24
    3034:	ad 01       	movw	r20, r26
    3036:	81 2f       	mov	r24, r17
    3038:	09 95       	icall
    303a:	41 c0       	rjmp	.+130    	; 0x30be <hif_isr+0x2f4>

					else
						M2M_ERR("Crypto callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    303c:	88 85       	ldd	r24, Y+8	; 0x08
    303e:	87 30       	cpi	r24, 0x07	; 7
    3040:	e1 f4       	brne	.+56     	; 0x307a <hif_isr+0x2b0>
				{
					if(gstrHifCxt.pfSigmaCb)
    3042:	80 91 a0 2e 	lds	r24, 0x2EA0	; 0x802ea0 <gstrHifCxt+0x12>
    3046:	90 91 a1 2e 	lds	r25, 0x2EA1	; 0x802ea1 <gstrHifCxt+0x13>
    304a:	89 2b       	or	r24, r25
    304c:	c1 f1       	breq	.+112    	; 0x30be <hif_isr+0x2f4>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    304e:	e0 91 a0 2e 	lds	r30, 0x2EA0	; 0x802ea0 <gstrHifCxt+0x12>
    3052:	f0 91 a1 2e 	lds	r31, 0x2EA1	; 0x802ea1 <gstrHifCxt+0x13>
    3056:	8c 85       	ldd	r24, Y+12	; 0x0c
    3058:	9d 85       	ldd	r25, Y+13	; 0x0d
    305a:	ae 85       	ldd	r26, Y+14	; 0x0e
    305c:	bf 85       	ldd	r27, Y+15	; 0x0f
    305e:	08 96       	adiw	r24, 0x08	; 8
    3060:	a1 1d       	adc	r26, r1
    3062:	b1 1d       	adc	r27, r1
    3064:	2a 85       	ldd	r18, Y+10	; 0x0a
    3066:	3b 85       	ldd	r19, Y+11	; 0x0b
    3068:	b9 01       	movw	r22, r18
    306a:	68 50       	subi	r22, 0x08	; 8
    306c:	71 09       	sbc	r23, r1
    306e:	19 85       	ldd	r17, Y+9	; 0x09
    3070:	9c 01       	movw	r18, r24
    3072:	ad 01       	movw	r20, r26
    3074:	81 2f       	mov	r24, r17
    3076:	09 95       	icall
    3078:	22 c0       	rjmp	.+68     	; 0x30be <hif_isr+0x2f4>
					else
						M2M_ERR("Sigma callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    307a:	88 85       	ldd	r24, Y+8	; 0x08
    307c:	85 30       	cpi	r24, 0x05	; 5
    307e:	e1 f4       	brne	.+56     	; 0x30b8 <hif_isr+0x2ee>
				{
				    if(gstrHifCxt.pfSslCb)
    3080:	80 91 a6 2e 	lds	r24, 0x2EA6	; 0x802ea6 <gstrHifCxt+0x18>
    3084:	90 91 a7 2e 	lds	r25, 0x2EA7	; 0x802ea7 <gstrHifCxt+0x19>
    3088:	89 2b       	or	r24, r25
    308a:	c9 f0       	breq	.+50     	; 0x30be <hif_isr+0x2f4>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    308c:	e0 91 a6 2e 	lds	r30, 0x2EA6	; 0x802ea6 <gstrHifCxt+0x18>
    3090:	f0 91 a7 2e 	lds	r31, 0x2EA7	; 0x802ea7 <gstrHifCxt+0x19>
    3094:	8c 85       	ldd	r24, Y+12	; 0x0c
    3096:	9d 85       	ldd	r25, Y+13	; 0x0d
    3098:	ae 85       	ldd	r26, Y+14	; 0x0e
    309a:	bf 85       	ldd	r27, Y+15	; 0x0f
    309c:	08 96       	adiw	r24, 0x08	; 8
    309e:	a1 1d       	adc	r26, r1
    30a0:	b1 1d       	adc	r27, r1
    30a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    30a4:	3b 85       	ldd	r19, Y+11	; 0x0b
    30a6:	b9 01       	movw	r22, r18
    30a8:	68 50       	subi	r22, 0x08	; 8
    30aa:	71 09       	sbc	r23, r1
    30ac:	19 85       	ldd	r17, Y+9	; 0x09
    30ae:	9c 01       	movw	r18, r24
    30b0:	ad 01       	movw	r20, r26
    30b2:	81 2f       	mov	r24, r17
    30b4:	09 95       	icall
    30b6:	03 c0       	rjmp	.+6      	; 0x30be <hif_isr+0x2f4>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
					ret = M2M_ERR_BUS_FAIL;
    30b8:	8a ef       	ldi	r24, 0xFA	; 250
    30ba:	89 83       	std	Y+1, r24	; 0x01
					goto ERR1;
    30bc:	11 c0       	rjmp	.+34     	; 0x30e0 <hif_isr+0x316>
				}
				if(gstrHifCxt.u8HifRXDone)
    30be:	80 91 90 2e 	lds	r24, 0x2E90	; 0x802e90 <gstrHifCxt+0x2>
    30c2:	88 23       	and	r24, r24
    30c4:	69 f0       	breq	.+26     	; 0x30e0 <hif_isr+0x316>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
					ret = hif_set_rx_done();
    30c6:	0e 94 2a 14 	call	0x2854	; 0x2854 <hif_set_rx_done>
    30ca:	89 83       	std	Y+1, r24	; 0x01
    30cc:	09 c0       	rjmp	.+18     	; 0x30e0 <hif_isr+0x316>
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
				ret = M2M_ERR_RCV;
    30ce:	8e ef       	ldi	r24, 0xFE	; 254
    30d0:	89 83       	std	Y+1, r24	; 0x01
				goto ERR1;
    30d2:	06 c0       	rjmp	.+12     	; 0x30e0 <hif_isr+0x316>
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
			ret = M2M_ERR_FAIL;
    30d4:	84 ef       	ldi	r24, 0xF4	; 244
    30d6:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    30d8:	03 c0       	rjmp	.+6      	; 0x30e0 <hif_isr+0x316>
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
		goto ERR1;
    30da:	00 00       	nop
    30dc:	01 c0       	rjmp	.+2      	; 0x30e0 <hif_isr+0x316>

			nm_bsp_interrupt_ctrl(0);
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
			if(ret != M2M_SUCCESS)goto ERR1;
    30de:	00 00       	nop
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
		goto ERR1;
	}

ERR1:
	return ret;
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    30e2:	2f 96       	adiw	r28, 0x0f	; 15
    30e4:	cd bf       	out	0x3d, r28	; 61
    30e6:	de bf       	out	0x3e, r29	; 62
    30e8:	df 91       	pop	r29
    30ea:	cf 91       	pop	r28
    30ec:	1f 91       	pop	r17
    30ee:	0f 91       	pop	r16
    30f0:	08 95       	ret

000030f2 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    30f2:	cf 93       	push	r28
    30f4:	df 93       	push	r29
    30f6:	1f 92       	push	r1
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
	sint8 ret = M2M_SUCCESS;	
    30fc:	19 82       	std	Y+1, r1	; 0x01
	while (gstrHifCxt.u8Interrupt) {
    30fe:	0b c0       	rjmp	.+22     	; 0x3116 <hif_handle_isr+0x24>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    3100:	80 91 91 2e 	lds	r24, 0x2E91	; 0x802e91 <gstrHifCxt+0x3>
    3104:	81 50       	subi	r24, 0x01	; 1
    3106:	80 93 91 2e 	sts	0x2E91, r24	; 0x802e91 <gstrHifCxt+0x3>
		while(1)
		{
			ret = hif_isr();
    310a:	0e 94 e5 16 	call	0x2dca	; 0x2dca <hif_isr>
    310e:	89 83       	std	Y+1, r24	; 0x01
			if(ret == M2M_SUCCESS) {
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	88 23       	and	r24, r24
    3114:	d1 f7       	brne	.-12     	; 0x310a <hif_handle_isr+0x18>
*/

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    3116:	80 91 91 2e 	lds	r24, 0x2E91	; 0x802e91 <gstrHifCxt+0x3>
    311a:	88 23       	and	r24, r24
    311c:	89 f7       	brne	.-30     	; 0x3100 <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    311e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3120:	0f 90       	pop	r0
    3122:	df 91       	pop	r29
    3124:	cf 91       	pop	r28
    3126:	08 95       	ret

00003128 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    3128:	ef 92       	push	r14
    312a:	ff 92       	push	r15
    312c:	0f 93       	push	r16
    312e:	1f 93       	push	r17
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	2a 97       	sbiw	r28, 0x0a	; 10
    313a:	cd bf       	out	0x3d, r28	; 61
    313c:	de bf       	out	0x3e, r29	; 62
    313e:	6a 83       	std	Y+2, r22	; 0x02
    3140:	7b 83       	std	Y+3, r23	; 0x03
    3142:	8c 83       	std	Y+4, r24	; 0x04
    3144:	9d 83       	std	Y+5, r25	; 0x05
    3146:	4e 83       	std	Y+6, r20	; 0x06
    3148:	5f 83       	std	Y+7, r21	; 0x07
    314a:	28 87       	std	Y+8, r18	; 0x08
    314c:	39 87       	std	Y+9, r19	; 0x09
    314e:	0a 87       	std	Y+10, r16	; 0x0a
	sint8 ret = M2M_SUCCESS;
    3150:	19 82       	std	Y+1, r1	; 0x01
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    3152:	8a 81       	ldd	r24, Y+2	; 0x02
    3154:	9b 81       	ldd	r25, Y+3	; 0x03
    3156:	ac 81       	ldd	r26, Y+4	; 0x04
    3158:	bd 81       	ldd	r27, Y+5	; 0x05
    315a:	89 2b       	or	r24, r25
    315c:	8a 2b       	or	r24, r26
    315e:	8b 2b       	or	r24, r27
    3160:	41 f0       	breq	.+16     	; 0x3172 <hif_receive+0x4a>
    3162:	8e 81       	ldd	r24, Y+6	; 0x06
    3164:	9f 81       	ldd	r25, Y+7	; 0x07
    3166:	89 2b       	or	r24, r25
    3168:	21 f0       	breq	.+8      	; 0x3172 <hif_receive+0x4a>
    316a:	88 85       	ldd	r24, Y+8	; 0x08
    316c:	99 85       	ldd	r25, Y+9	; 0x09
    316e:	89 2b       	or	r24, r25
    3170:	51 f4       	brne	.+20     	; 0x3186 <hif_receive+0x5e>
	{
		if(isDone)
    3172:	8a 85       	ldd	r24, Y+10	; 0x0a
    3174:	88 23       	and	r24, r24
    3176:	21 f0       	breq	.+8      	; 0x3180 <hif_receive+0x58>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    3178:	0e 94 2a 14 	call	0x2854	; 0x2854 <hif_set_rx_done>
    317c:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    317e:	96 c0       	rjmp	.+300    	; 0x32ac <hif_receive+0x184>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    3180:	84 ef       	ldi	r24, 0xF4	; 244
    3182:	89 83       	std	Y+1, r24	; 0x01
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    3184:	93 c0       	rjmp	.+294    	; 0x32ac <hif_receive+0x184>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    3186:	88 85       	ldd	r24, Y+8	; 0x08
    3188:	99 85       	ldd	r25, Y+9	; 0x09
    318a:	9c 01       	movw	r18, r24
    318c:	40 e0       	ldi	r20, 0x00	; 0
    318e:	50 e0       	ldi	r21, 0x00	; 0
    3190:	80 91 96 2e 	lds	r24, 0x2E96	; 0x802e96 <gstrHifCxt+0x8>
    3194:	90 91 97 2e 	lds	r25, 0x2E97	; 0x802e97 <gstrHifCxt+0x9>
    3198:	a0 91 98 2e 	lds	r26, 0x2E98	; 0x802e98 <gstrHifCxt+0xa>
    319c:	b0 91 99 2e 	lds	r27, 0x2E99	; 0x802e99 <gstrHifCxt+0xb>
    31a0:	82 17       	cp	r24, r18
    31a2:	93 07       	cpc	r25, r19
    31a4:	a4 07       	cpc	r26, r20
    31a6:	b5 07       	cpc	r27, r21
    31a8:	18 f4       	brcc	.+6      	; 0x31b0 <hif_receive+0x88>
	{
		ret = M2M_ERR_FAIL;
    31aa:	84 ef       	ldi	r24, 0xF4	; 244
    31ac:	89 83       	std	Y+1, r24	; 0x01
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
    31ae:	7e c0       	rjmp	.+252    	; 0x32ac <hif_receive+0x184>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    31b0:	20 91 92 2e 	lds	r18, 0x2E92	; 0x802e92 <gstrHifCxt+0x4>
    31b4:	30 91 93 2e 	lds	r19, 0x2E93	; 0x802e93 <gstrHifCxt+0x5>
    31b8:	40 91 94 2e 	lds	r20, 0x2E94	; 0x802e94 <gstrHifCxt+0x6>
    31bc:	50 91 95 2e 	lds	r21, 0x2E95	; 0x802e95 <gstrHifCxt+0x7>
    31c0:	8a 81       	ldd	r24, Y+2	; 0x02
    31c2:	9b 81       	ldd	r25, Y+3	; 0x03
    31c4:	ac 81       	ldd	r26, Y+4	; 0x04
    31c6:	bd 81       	ldd	r27, Y+5	; 0x05
    31c8:	82 17       	cp	r24, r18
    31ca:	93 07       	cpc	r25, r19
    31cc:	a4 07       	cpc	r26, r20
    31ce:	b5 07       	cpc	r27, r21
    31d0:	30 f1       	brcs	.+76     	; 0x321e <hif_receive+0xf6>
    31d2:	88 85       	ldd	r24, Y+8	; 0x08
    31d4:	99 85       	ldd	r25, Y+9	; 0x09
    31d6:	9c 01       	movw	r18, r24
    31d8:	40 e0       	ldi	r20, 0x00	; 0
    31da:	50 e0       	ldi	r21, 0x00	; 0
    31dc:	8a 81       	ldd	r24, Y+2	; 0x02
    31de:	9b 81       	ldd	r25, Y+3	; 0x03
    31e0:	ac 81       	ldd	r26, Y+4	; 0x04
    31e2:	bd 81       	ldd	r27, Y+5	; 0x05
    31e4:	28 0f       	add	r18, r24
    31e6:	39 1f       	adc	r19, r25
    31e8:	4a 1f       	adc	r20, r26
    31ea:	5b 1f       	adc	r21, r27
    31ec:	e0 90 92 2e 	lds	r14, 0x2E92	; 0x802e92 <gstrHifCxt+0x4>
    31f0:	f0 90 93 2e 	lds	r15, 0x2E93	; 0x802e93 <gstrHifCxt+0x5>
    31f4:	00 91 94 2e 	lds	r16, 0x2E94	; 0x802e94 <gstrHifCxt+0x6>
    31f8:	10 91 95 2e 	lds	r17, 0x2E95	; 0x802e95 <gstrHifCxt+0x7>
    31fc:	80 91 96 2e 	lds	r24, 0x2E96	; 0x802e96 <gstrHifCxt+0x8>
    3200:	90 91 97 2e 	lds	r25, 0x2E97	; 0x802e97 <gstrHifCxt+0x9>
    3204:	a0 91 98 2e 	lds	r26, 0x2E98	; 0x802e98 <gstrHifCxt+0xa>
    3208:	b0 91 99 2e 	lds	r27, 0x2E99	; 0x802e99 <gstrHifCxt+0xb>
    320c:	8e 0d       	add	r24, r14
    320e:	9f 1d       	adc	r25, r15
    3210:	a0 1f       	adc	r26, r16
    3212:	b1 1f       	adc	r27, r17
    3214:	82 17       	cp	r24, r18
    3216:	93 07       	cpc	r25, r19
    3218:	a4 07       	cpc	r26, r20
    321a:	b5 07       	cpc	r27, r21
    321c:	18 f4       	brcc	.+6      	; 0x3224 <hif_receive+0xfc>
	{
		ret = M2M_ERR_FAIL;
    321e:	84 ef       	ldi	r24, 0xF4	; 244
    3220:	89 83       	std	Y+1, r24	; 0x01
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
    3222:	44 c0       	rjmp	.+136    	; 0x32ac <hif_receive+0x184>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    3224:	88 85       	ldd	r24, Y+8	; 0x08
    3226:	99 85       	ldd	r25, Y+9	; 0x09
    3228:	9c 01       	movw	r18, r24
    322a:	40 e0       	ldi	r20, 0x00	; 0
    322c:	50 e0       	ldi	r21, 0x00	; 0
    322e:	6e 81       	ldd	r22, Y+6	; 0x06
    3230:	7f 81       	ldd	r23, Y+7	; 0x07
    3232:	8a 81       	ldd	r24, Y+2	; 0x02
    3234:	9b 81       	ldd	r25, Y+3	; 0x03
    3236:	ac 81       	ldd	r26, Y+4	; 0x04
    3238:	bd 81       	ldd	r27, Y+5	; 0x05
    323a:	89 01       	movw	r16, r18
    323c:	9a 01       	movw	r18, r20
    323e:	ab 01       	movw	r20, r22
    3240:	bc 01       	movw	r22, r24
    3242:	cd 01       	movw	r24, r26
    3244:	0e 94 58 24 	call	0x48b0	; 0x48b0 <nm_read_block>
    3248:	89 83       	std	Y+1, r24	; 0x01
	if(ret != M2M_SUCCESS)goto ERR1;
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	88 23       	and	r24, r24
    324e:	69 f5       	brne	.+90     	; 0x32aa <hif_receive+0x182>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    3250:	20 91 92 2e 	lds	r18, 0x2E92	; 0x802e92 <gstrHifCxt+0x4>
    3254:	30 91 93 2e 	lds	r19, 0x2E93	; 0x802e93 <gstrHifCxt+0x5>
    3258:	40 91 94 2e 	lds	r20, 0x2E94	; 0x802e94 <gstrHifCxt+0x6>
    325c:	50 91 95 2e 	lds	r21, 0x2E95	; 0x802e95 <gstrHifCxt+0x7>
    3260:	80 91 96 2e 	lds	r24, 0x2E96	; 0x802e96 <gstrHifCxt+0x8>
    3264:	90 91 97 2e 	lds	r25, 0x2E97	; 0x802e97 <gstrHifCxt+0x9>
    3268:	a0 91 98 2e 	lds	r26, 0x2E98	; 0x802e98 <gstrHifCxt+0xa>
    326c:	b0 91 99 2e 	lds	r27, 0x2E99	; 0x802e99 <gstrHifCxt+0xb>
    3270:	28 0f       	add	r18, r24
    3272:	39 1f       	adc	r19, r25
    3274:	4a 1f       	adc	r20, r26
    3276:	5b 1f       	adc	r21, r27
    3278:	88 85       	ldd	r24, Y+8	; 0x08
    327a:	99 85       	ldd	r25, Y+9	; 0x09
    327c:	7c 01       	movw	r14, r24
    327e:	00 e0       	ldi	r16, 0x00	; 0
    3280:	10 e0       	ldi	r17, 0x00	; 0
    3282:	8a 81       	ldd	r24, Y+2	; 0x02
    3284:	9b 81       	ldd	r25, Y+3	; 0x03
    3286:	ac 81       	ldd	r26, Y+4	; 0x04
    3288:	bd 81       	ldd	r27, Y+5	; 0x05
    328a:	8e 0d       	add	r24, r14
    328c:	9f 1d       	adc	r25, r15
    328e:	a0 1f       	adc	r26, r16
    3290:	b1 1f       	adc	r27, r17
    3292:	28 17       	cp	r18, r24
    3294:	39 07       	cpc	r19, r25
    3296:	4a 07       	cpc	r20, r26
    3298:	5b 07       	cpc	r21, r27
    329a:	19 f0       	breq	.+6      	; 0x32a2 <hif_receive+0x17a>
    329c:	8a 85       	ldd	r24, Y+10	; 0x0a
    329e:	88 23       	and	r24, r24
    32a0:	29 f0       	breq	.+10     	; 0x32ac <hif_receive+0x184>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    32a2:	0e 94 2a 14 	call	0x2854	; 0x2854 <hif_set_rx_done>
    32a6:	89 83       	std	Y+1, r24	; 0x01
    32a8:	01 c0       	rjmp	.+2      	; 0x32ac <hif_receive+0x184>
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;
    32aa:	00 00       	nop
		/* set RX done */
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
    32ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    32ae:	2a 96       	adiw	r28, 0x0a	; 10
    32b0:	cd bf       	out	0x3d, r28	; 61
    32b2:	de bf       	out	0x3e, r29	; 62
    32b4:	df 91       	pop	r29
    32b6:	cf 91       	pop	r28
    32b8:	1f 91       	pop	r17
    32ba:	0f 91       	pop	r16
    32bc:	ff 90       	pop	r15
    32be:	ef 90       	pop	r14
    32c0:	08 95       	ret

000032c2 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    32c2:	cf 93       	push	r28
    32c4:	df 93       	push	r29
    32c6:	00 d0       	rcall	.+0      	; 0x32c8 <hif_register_cb+0x6>
    32c8:	00 d0       	rcall	.+0      	; 0x32ca <hif_register_cb+0x8>
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
    32ce:	8a 83       	std	Y+2, r24	; 0x02
    32d0:	6b 83       	std	Y+3, r22	; 0x03
    32d2:	7c 83       	std	Y+4, r23	; 0x04
	sint8 ret = M2M_SUCCESS;
    32d4:	19 82       	std	Y+1, r1	; 0x01
	switch(u8Grp)
    32d6:	8a 81       	ldd	r24, Y+2	; 0x02
    32d8:	88 2f       	mov	r24, r24
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	09 2e       	mov	r0, r25
    32de:	00 0c       	add	r0, r0
    32e0:	aa 0b       	sbc	r26, r26
    32e2:	bb 0b       	sbc	r27, r27
    32e4:	41 e0       	ldi	r20, 0x01	; 1
    32e6:	50 e0       	ldi	r21, 0x00	; 0
    32e8:	26 e0       	ldi	r18, 0x06	; 6
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	84 1b       	sub	r24, r20
    32ee:	95 0b       	sbc	r25, r21
    32f0:	28 17       	cp	r18, r24
    32f2:	39 07       	cpc	r19, r25
    32f4:	b0 f1       	brcs	.+108    	; 0x3362 <hif_register_cb+0xa0>
    32f6:	80 5b       	subi	r24, 0xB0	; 176
    32f8:	9f 4f       	sbci	r25, 0xFF	; 255
    32fa:	fc 01       	movw	r30, r24
    32fc:	0c 94 50 3b 	jmp	0x76a0	; 0x76a0 <__tablejump2__>
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    3300:	8b 81       	ldd	r24, Y+3	; 0x03
    3302:	9c 81       	ldd	r25, Y+4	; 0x04
    3304:	80 93 9c 2e 	sts	0x2E9C, r24	; 0x802e9c <gstrHifCxt+0xe>
    3308:	90 93 9d 2e 	sts	0x2E9D, r25	; 0x802e9d <gstrHifCxt+0xf>
			break;
    330c:	2d c0       	rjmp	.+90     	; 0x3368 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    330e:	8b 81       	ldd	r24, Y+3	; 0x03
    3310:	9c 81       	ldd	r25, Y+4	; 0x04
    3312:	80 93 9a 2e 	sts	0x2E9A, r24	; 0x802e9a <gstrHifCxt+0xc>
    3316:	90 93 9b 2e 	sts	0x2E9B, r25	; 0x802e9b <gstrHifCxt+0xd>
			break;
    331a:	26 c0       	rjmp	.+76     	; 0x3368 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	9c 81       	ldd	r25, Y+4	; 0x04
    3320:	80 93 9e 2e 	sts	0x2E9E, r24	; 0x802e9e <gstrHifCxt+0x10>
    3324:	90 93 9f 2e 	sts	0x2E9F, r25	; 0x802e9f <gstrHifCxt+0x11>
			break;
    3328:	1f c0       	rjmp	.+62     	; 0x3368 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    332a:	8b 81       	ldd	r24, Y+3	; 0x03
    332c:	9c 81       	ldd	r25, Y+4	; 0x04
    332e:	80 93 a2 2e 	sts	0x2EA2, r24	; 0x802ea2 <gstrHifCxt+0x14>
    3332:	90 93 a3 2e 	sts	0x2EA3, r25	; 0x802ea3 <gstrHifCxt+0x15>
			break;
    3336:	18 c0       	rjmp	.+48     	; 0x3368 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    3338:	8b 81       	ldd	r24, Y+3	; 0x03
    333a:	9c 81       	ldd	r25, Y+4	; 0x04
    333c:	80 93 a4 2e 	sts	0x2EA4, r24	; 0x802ea4 <gstrHifCxt+0x16>
    3340:	90 93 a5 2e 	sts	0x2EA5, r25	; 0x802ea5 <gstrHifCxt+0x17>
			break;
    3344:	11 c0       	rjmp	.+34     	; 0x3368 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    3346:	8b 81       	ldd	r24, Y+3	; 0x03
    3348:	9c 81       	ldd	r25, Y+4	; 0x04
    334a:	80 93 a0 2e 	sts	0x2EA0, r24	; 0x802ea0 <gstrHifCxt+0x12>
    334e:	90 93 a1 2e 	sts	0x2EA1, r25	; 0x802ea1 <gstrHifCxt+0x13>
			break;
    3352:	0a c0       	rjmp	.+20     	; 0x3368 <hif_register_cb+0xa6>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    3354:	8b 81       	ldd	r24, Y+3	; 0x03
    3356:	9c 81       	ldd	r25, Y+4	; 0x04
    3358:	80 93 a6 2e 	sts	0x2EA6, r24	; 0x802ea6 <gstrHifCxt+0x18>
    335c:	90 93 a7 2e 	sts	0x2EA7, r25	; 0x802ea7 <gstrHifCxt+0x19>
			break;
    3360:	03 c0       	rjmp	.+6      	; 0x3368 <hif_register_cb+0xa6>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
    3362:	84 ef       	ldi	r24, 0xF4	; 244
    3364:	89 83       	std	Y+1, r24	; 0x01
			break;
    3366:	00 00       	nop
	}
	return ret;
    3368:	89 81       	ldd	r24, Y+1	; 0x01
}
    336a:	24 96       	adiw	r28, 0x04	; 4
    336c:	cd bf       	out	0x3d, r28	; 61
    336e:	de bf       	out	0x3e, r29	; 62
    3370:	df 91       	pop	r29
    3372:	cf 91       	pop	r28
    3374:	08 95       	ret

00003376 <m2m_wifi_cb>:
}

sint8 m2m_wifi_default_connect(void)
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}
    3376:	0f 93       	push	r16
    3378:	cf 93       	push	r28
    337a:	df 93       	push	r29
    337c:	cd b7       	in	r28, 0x3d	; 61
    337e:	de b7       	in	r29, 0x3e	; 62
    3380:	c5 5a       	subi	r28, 0xA5	; 165
    3382:	d1 09       	sbc	r29, r1
    3384:	cd bf       	out	0x3d, r28	; 61
    3386:	de bf       	out	0x3e, r29	; 62
    3388:	fe 01       	movw	r30, r28
    338a:	e1 56       	subi	r30, 0x61	; 97
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	80 83       	st	Z, r24
    3390:	ce 01       	movw	r24, r28
    3392:	80 56       	subi	r24, 0x60	; 96
    3394:	9f 4f       	sbci	r25, 0xFF	; 255
    3396:	fc 01       	movw	r30, r24
    3398:	60 83       	st	Z, r22
    339a:	71 83       	std	Z+1, r23	; 0x01
    339c:	ce 01       	movw	r24, r28
    339e:	8e 55       	subi	r24, 0x5E	; 94
    33a0:	9f 4f       	sbci	r25, 0xFF	; 255
    33a2:	fc 01       	movw	r30, r24
    33a4:	20 83       	st	Z, r18
    33a6:	31 83       	std	Z+1, r19	; 0x01
    33a8:	42 83       	std	Z+2, r20	; 0x02
    33aa:	53 83       	std	Z+3, r21	; 0x03
    33ac:	ce 01       	movw	r24, r28
    33ae:	81 56       	subi	r24, 0x61	; 97
    33b0:	9f 4f       	sbci	r25, 0xFF	; 255
    33b2:	fc 01       	movw	r30, r24
    33b4:	80 81       	ld	r24, Z
    33b6:	8c 32       	cpi	r24, 0x2C	; 44
    33b8:	39 f5       	brne	.+78     	; 0x3408 <m2m_wifi_cb+0x92>
    33ba:	ae 01       	movw	r20, r28
    33bc:	47 5f       	subi	r20, 0xF7	; 247
    33be:	5f 4f       	sbci	r21, 0xFF	; 255
    33c0:	ce 01       	movw	r24, r28
    33c2:	8e 55       	subi	r24, 0x5E	; 94
    33c4:	9f 4f       	sbci	r25, 0xFF	; 255
    33c6:	fc 01       	movw	r30, r24
    33c8:	80 81       	ld	r24, Z
    33ca:	91 81       	ldd	r25, Z+1	; 0x01
    33cc:	a2 81       	ldd	r26, Z+2	; 0x02
    33ce:	b3 81       	ldd	r27, Z+3	; 0x03
    33d0:	00 e0       	ldi	r16, 0x00	; 0
    33d2:	24 e0       	ldi	r18, 0x04	; 4
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	bc 01       	movw	r22, r24
    33d8:	cd 01       	movw	r24, r26
    33da:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    33de:	88 23       	and	r24, r24
    33e0:	09 f0       	breq	.+2      	; 0x33e4 <m2m_wifi_cb+0x6e>
    33e2:	62 c2       	rjmp	.+1220   	; 0x38a8 <m2m_wifi_cb+0x532>
    33e4:	80 91 0f 2e 	lds	r24, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    33e8:	90 91 10 2e 	lds	r25, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    33ec:	89 2b       	or	r24, r25
    33ee:	09 f4       	brne	.+2      	; 0x33f2 <m2m_wifi_cb+0x7c>
    33f0:	5b c2       	rjmp	.+1206   	; 0x38a8 <m2m_wifi_cb+0x532>
    33f2:	20 91 0f 2e 	lds	r18, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    33f6:	30 91 10 2e 	lds	r19, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    33fa:	ce 01       	movw	r24, r28
    33fc:	09 96       	adiw	r24, 0x09	; 9
    33fe:	bc 01       	movw	r22, r24
    3400:	8c e2       	ldi	r24, 0x2C	; 44
    3402:	f9 01       	movw	r30, r18
    3404:	09 95       	icall
    3406:	50 c2       	rjmp	.+1184   	; 0x38a8 <m2m_wifi_cb+0x532>
    3408:	ce 01       	movw	r24, r28
    340a:	81 56       	subi	r24, 0x61	; 97
    340c:	9f 4f       	sbci	r25, 0xFF	; 255
    340e:	fc 01       	movw	r30, r24
    3410:	80 81       	ld	r24, Z
    3412:	8b 31       	cpi	r24, 0x1B	; 27
    3414:	39 f5       	brne	.+78     	; 0x3464 <m2m_wifi_cb+0xee>
    3416:	ae 01       	movw	r20, r28
    3418:	43 5f       	subi	r20, 0xF3	; 243
    341a:	5f 4f       	sbci	r21, 0xFF	; 255
    341c:	ce 01       	movw	r24, r28
    341e:	8e 55       	subi	r24, 0x5E	; 94
    3420:	9f 4f       	sbci	r25, 0xFF	; 255
    3422:	fc 01       	movw	r30, r24
    3424:	80 81       	ld	r24, Z
    3426:	91 81       	ldd	r25, Z+1	; 0x01
    3428:	a2 81       	ldd	r26, Z+2	; 0x02
    342a:	b3 81       	ldd	r27, Z+3	; 0x03
    342c:	00 e0       	ldi	r16, 0x00	; 0
    342e:	28 e0       	ldi	r18, 0x08	; 8
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	bc 01       	movw	r22, r24
    3434:	cd 01       	movw	r24, r26
    3436:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    343a:	88 23       	and	r24, r24
    343c:	09 f0       	breq	.+2      	; 0x3440 <m2m_wifi_cb+0xca>
    343e:	34 c2       	rjmp	.+1128   	; 0x38a8 <m2m_wifi_cb+0x532>
    3440:	80 91 0f 2e 	lds	r24, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    3444:	90 91 10 2e 	lds	r25, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    3448:	89 2b       	or	r24, r25
    344a:	09 f4       	brne	.+2      	; 0x344e <m2m_wifi_cb+0xd8>
    344c:	2d c2       	rjmp	.+1114   	; 0x38a8 <m2m_wifi_cb+0x532>
    344e:	20 91 0f 2e 	lds	r18, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    3452:	30 91 10 2e 	lds	r19, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    3456:	ce 01       	movw	r24, r28
    3458:	0d 96       	adiw	r24, 0x0d	; 13
    345a:	bc 01       	movw	r22, r24
    345c:	8b e1       	ldi	r24, 0x1B	; 27
    345e:	f9 01       	movw	r30, r18
    3460:	09 95       	icall
    3462:	22 c2       	rjmp	.+1092   	; 0x38a8 <m2m_wifi_cb+0x532>
    3464:	ce 01       	movw	r24, r28
    3466:	81 56       	subi	r24, 0x61	; 97
    3468:	9f 4f       	sbci	r25, 0xFF	; 255
    346a:	fc 01       	movw	r30, r24
    346c:	80 81       	ld	r24, Z
    346e:	86 30       	cpi	r24, 0x06	; 6
    3470:	39 f5       	brne	.+78     	; 0x34c0 <m2m_wifi_cb+0x14a>
    3472:	ae 01       	movw	r20, r28
    3474:	45 5c       	subi	r20, 0xC5	; 197
    3476:	5f 4f       	sbci	r21, 0xFF	; 255
    3478:	ce 01       	movw	r24, r28
    347a:	8e 55       	subi	r24, 0x5E	; 94
    347c:	9f 4f       	sbci	r25, 0xFF	; 255
    347e:	fc 01       	movw	r30, r24
    3480:	80 81       	ld	r24, Z
    3482:	91 81       	ldd	r25, Z+1	; 0x01
    3484:	a2 81       	ldd	r26, Z+2	; 0x02
    3486:	b3 81       	ldd	r27, Z+3	; 0x03
    3488:	01 e0       	ldi	r16, 0x01	; 1
    348a:	20 e3       	ldi	r18, 0x30	; 48
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	bc 01       	movw	r22, r24
    3490:	cd 01       	movw	r24, r26
    3492:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    3496:	88 23       	and	r24, r24
    3498:	09 f0       	breq	.+2      	; 0x349c <m2m_wifi_cb+0x126>
    349a:	06 c2       	rjmp	.+1036   	; 0x38a8 <m2m_wifi_cb+0x532>
    349c:	80 91 0f 2e 	lds	r24, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    34a0:	90 91 10 2e 	lds	r25, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    34a4:	89 2b       	or	r24, r25
    34a6:	09 f4       	brne	.+2      	; 0x34aa <m2m_wifi_cb+0x134>
    34a8:	ff c1       	rjmp	.+1022   	; 0x38a8 <m2m_wifi_cb+0x532>
    34aa:	20 91 0f 2e 	lds	r18, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    34ae:	30 91 10 2e 	lds	r19, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    34b2:	ce 01       	movw	r24, r28
    34b4:	cb 96       	adiw	r24, 0x3b	; 59
    34b6:	bc 01       	movw	r22, r24
    34b8:	86 e0       	ldi	r24, 0x06	; 6
    34ba:	f9 01       	movw	r30, r18
    34bc:	09 95       	icall
    34be:	f4 c1       	rjmp	.+1000   	; 0x38a8 <m2m_wifi_cb+0x532>
    34c0:	ce 01       	movw	r24, r28
    34c2:	81 56       	subi	r24, 0x61	; 97
    34c4:	9f 4f       	sbci	r25, 0xFF	; 255
    34c6:	fc 01       	movw	r30, r24
    34c8:	80 81       	ld	r24, Z
    34ca:	8e 30       	cpi	r24, 0x0E	; 14
    34cc:	09 f4       	brne	.+2      	; 0x34d0 <m2m_wifi_cb+0x15a>
    34ce:	ec c1       	rjmp	.+984    	; 0x38a8 <m2m_wifi_cb+0x532>
    34d0:	ce 01       	movw	r24, r28
    34d2:	81 56       	subi	r24, 0x61	; 97
    34d4:	9f 4f       	sbci	r25, 0xFF	; 255
    34d6:	fc 01       	movw	r30, r24
    34d8:	80 81       	ld	r24, Z
    34da:	82 33       	cpi	r24, 0x32	; 50
    34dc:	39 f5       	brne	.+78     	; 0x352c <m2m_wifi_cb+0x1b6>
    34de:	ae 01       	movw	r20, r28
    34e0:	4b 5e       	subi	r20, 0xEB	; 235
    34e2:	5f 4f       	sbci	r21, 0xFF	; 255
    34e4:	ce 01       	movw	r24, r28
    34e6:	8e 55       	subi	r24, 0x5E	; 94
    34e8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ea:	fc 01       	movw	r30, r24
    34ec:	80 81       	ld	r24, Z
    34ee:	91 81       	ldd	r25, Z+1	; 0x01
    34f0:	a2 81       	ldd	r26, Z+2	; 0x02
    34f2:	b3 81       	ldd	r27, Z+3	; 0x03
    34f4:	00 e0       	ldi	r16, 0x00	; 0
    34f6:	24 e1       	ldi	r18, 0x14	; 20
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	bc 01       	movw	r22, r24
    34fc:	cd 01       	movw	r24, r26
    34fe:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    3502:	88 23       	and	r24, r24
    3504:	09 f0       	breq	.+2      	; 0x3508 <m2m_wifi_cb+0x192>
    3506:	d0 c1       	rjmp	.+928    	; 0x38a8 <m2m_wifi_cb+0x532>
    3508:	80 91 0f 2e 	lds	r24, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    350c:	90 91 10 2e 	lds	r25, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    3510:	89 2b       	or	r24, r25
    3512:	09 f4       	brne	.+2      	; 0x3516 <m2m_wifi_cb+0x1a0>
    3514:	c9 c1       	rjmp	.+914    	; 0x38a8 <m2m_wifi_cb+0x532>
    3516:	20 91 0f 2e 	lds	r18, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    351a:	30 91 10 2e 	lds	r19, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    351e:	ce 01       	movw	r24, r28
    3520:	45 96       	adiw	r24, 0x15	; 21
    3522:	bc 01       	movw	r22, r24
    3524:	82 e3       	ldi	r24, 0x32	; 50
    3526:	f9 01       	movw	r30, r18
    3528:	09 95       	icall
    352a:	be c1       	rjmp	.+892    	; 0x38a8 <m2m_wifi_cb+0x532>
    352c:	ce 01       	movw	r24, r28
    352e:	81 56       	subi	r24, 0x61	; 97
    3530:	9f 4f       	sbci	r25, 0xFF	; 255
    3532:	fc 01       	movw	r30, r24
    3534:	80 81       	ld	r24, Z
    3536:	8f 32       	cpi	r24, 0x2F	; 47
    3538:	81 f5       	brne	.+96     	; 0x359a <m2m_wifi_cb+0x224>
    353a:	ce 01       	movw	r24, r28
    353c:	cb 96       	adiw	r24, 0x3b	; 59
    353e:	24 e6       	ldi	r18, 0x64	; 100
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e0       	ldi	r20, 0x00	; 0
    3544:	50 e0       	ldi	r21, 0x00	; 0
    3546:	60 e0       	ldi	r22, 0x00	; 0
    3548:	0e 94 bf 13 	call	0x277e	; 0x277e <m2m_memset>
    354c:	ae 01       	movw	r20, r28
    354e:	45 5c       	subi	r20, 0xC5	; 197
    3550:	5f 4f       	sbci	r21, 0xFF	; 255
    3552:	ce 01       	movw	r24, r28
    3554:	8e 55       	subi	r24, 0x5E	; 94
    3556:	9f 4f       	sbci	r25, 0xFF	; 255
    3558:	fc 01       	movw	r30, r24
    355a:	80 81       	ld	r24, Z
    355c:	91 81       	ldd	r25, Z+1	; 0x01
    355e:	a2 81       	ldd	r26, Z+2	; 0x02
    3560:	b3 81       	ldd	r27, Z+3	; 0x03
    3562:	00 e0       	ldi	r16, 0x00	; 0
    3564:	24 e6       	ldi	r18, 0x64	; 100
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	bc 01       	movw	r22, r24
    356a:	cd 01       	movw	r24, r26
    356c:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    3570:	88 23       	and	r24, r24
    3572:	09 f0       	breq	.+2      	; 0x3576 <m2m_wifi_cb+0x200>
    3574:	99 c1       	rjmp	.+818    	; 0x38a8 <m2m_wifi_cb+0x532>
    3576:	80 91 0f 2e 	lds	r24, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    357a:	90 91 10 2e 	lds	r25, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    357e:	89 2b       	or	r24, r25
    3580:	09 f4       	brne	.+2      	; 0x3584 <m2m_wifi_cb+0x20e>
    3582:	92 c1       	rjmp	.+804    	; 0x38a8 <m2m_wifi_cb+0x532>
    3584:	20 91 0f 2e 	lds	r18, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    3588:	30 91 10 2e 	lds	r19, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    358c:	ce 01       	movw	r24, r28
    358e:	cb 96       	adiw	r24, 0x3b	; 59
    3590:	bc 01       	movw	r22, r24
    3592:	8f e2       	ldi	r24, 0x2F	; 47
    3594:	f9 01       	movw	r30, r18
    3596:	09 95       	icall
    3598:	87 c1       	rjmp	.+782    	; 0x38a8 <m2m_wifi_cb+0x532>
    359a:	ce 01       	movw	r24, r28
    359c:	81 56       	subi	r24, 0x61	; 97
    359e:	9f 4f       	sbci	r25, 0xFF	; 255
    35a0:	fc 01       	movw	r30, r24
    35a2:	80 81       	ld	r24, Z
    35a4:	84 33       	cpi	r24, 0x34	; 52
    35a6:	31 f5       	brne	.+76     	; 0x35f4 <m2m_wifi_cb+0x27e>
    35a8:	ae 01       	movw	r20, r28
    35aa:	47 5d       	subi	r20, 0xD7	; 215
    35ac:	5f 4f       	sbci	r21, 0xFF	; 255
    35ae:	ce 01       	movw	r24, r28
    35b0:	8e 55       	subi	r24, 0x5E	; 94
    35b2:	9f 4f       	sbci	r25, 0xFF	; 255
    35b4:	fc 01       	movw	r30, r24
    35b6:	80 81       	ld	r24, Z
    35b8:	91 81       	ldd	r25, Z+1	; 0x01
    35ba:	a2 81       	ldd	r26, Z+2	; 0x02
    35bc:	b3 81       	ldd	r27, Z+3	; 0x03
    35be:	00 e0       	ldi	r16, 0x00	; 0
    35c0:	24 e0       	ldi	r18, 0x04	; 4
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	bc 01       	movw	r22, r24
    35c6:	cd 01       	movw	r24, r26
    35c8:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    35cc:	88 23       	and	r24, r24
    35ce:	09 f0       	breq	.+2      	; 0x35d2 <m2m_wifi_cb+0x25c>
    35d0:	6b c1       	rjmp	.+726    	; 0x38a8 <m2m_wifi_cb+0x532>
    35d2:	80 91 0f 2e 	lds	r24, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    35d6:	90 91 10 2e 	lds	r25, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    35da:	89 2b       	or	r24, r25
    35dc:	09 f4       	brne	.+2      	; 0x35e0 <m2m_wifi_cb+0x26a>
    35de:	64 c1       	rjmp	.+712    	; 0x38a8 <m2m_wifi_cb+0x532>
    35e0:	20 91 0f 2e 	lds	r18, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    35e4:	30 91 10 2e 	lds	r19, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    35e8:	60 e0       	ldi	r22, 0x00	; 0
    35ea:	70 e0       	ldi	r23, 0x00	; 0
    35ec:	84 e3       	ldi	r24, 0x34	; 52
    35ee:	f9 01       	movw	r30, r18
    35f0:	09 95       	icall
    35f2:	5a c1       	rjmp	.+692    	; 0x38a8 <m2m_wifi_cb+0x532>
    35f4:	ce 01       	movw	r24, r28
    35f6:	81 56       	subi	r24, 0x61	; 97
    35f8:	9f 4f       	sbci	r25, 0xFF	; 255
    35fa:	fc 01       	movw	r30, r24
    35fc:	80 81       	ld	r24, Z
    35fe:	81 31       	cpi	r24, 0x11	; 17
    3600:	61 f5       	brne	.+88     	; 0x365a <m2m_wifi_cb+0x2e4>
    3602:	10 92 0e 2e 	sts	0x2E0E, r1	; 0x802e0e <gu8scanInProgress>
    3606:	ae 01       	movw	r20, r28
    3608:	43 5d       	subi	r20, 0xD3	; 211
    360a:	5f 4f       	sbci	r21, 0xFF	; 255
    360c:	ce 01       	movw	r24, r28
    360e:	8e 55       	subi	r24, 0x5E	; 94
    3610:	9f 4f       	sbci	r25, 0xFF	; 255
    3612:	fc 01       	movw	r30, r24
    3614:	80 81       	ld	r24, Z
    3616:	91 81       	ldd	r25, Z+1	; 0x01
    3618:	a2 81       	ldd	r26, Z+2	; 0x02
    361a:	b3 81       	ldd	r27, Z+3	; 0x03
    361c:	00 e0       	ldi	r16, 0x00	; 0
    361e:	24 e0       	ldi	r18, 0x04	; 4
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	bc 01       	movw	r22, r24
    3624:	cd 01       	movw	r24, r26
    3626:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    362a:	88 23       	and	r24, r24
    362c:	09 f0       	breq	.+2      	; 0x3630 <m2m_wifi_cb+0x2ba>
    362e:	3c c1       	rjmp	.+632    	; 0x38a8 <m2m_wifi_cb+0x532>
    3630:	8d a5       	ldd	r24, Y+45	; 0x2d
    3632:	80 93 0d 2e 	sts	0x2E0D, r24	; 0x802e0d <gu8ChNum>
    3636:	80 91 0f 2e 	lds	r24, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    363a:	90 91 10 2e 	lds	r25, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    363e:	89 2b       	or	r24, r25
    3640:	09 f4       	brne	.+2      	; 0x3644 <m2m_wifi_cb+0x2ce>
    3642:	32 c1       	rjmp	.+612    	; 0x38a8 <m2m_wifi_cb+0x532>
    3644:	20 91 0f 2e 	lds	r18, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    3648:	30 91 10 2e 	lds	r19, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    364c:	ce 01       	movw	r24, r28
    364e:	8d 96       	adiw	r24, 0x2d	; 45
    3650:	bc 01       	movw	r22, r24
    3652:	81 e1       	ldi	r24, 0x11	; 17
    3654:	f9 01       	movw	r30, r18
    3656:	09 95       	icall
    3658:	27 c1       	rjmp	.+590    	; 0x38a8 <m2m_wifi_cb+0x532>
    365a:	ce 01       	movw	r24, r28
    365c:	81 56       	subi	r24, 0x61	; 97
    365e:	9f 4f       	sbci	r25, 0xFF	; 255
    3660:	fc 01       	movw	r30, r24
    3662:	80 81       	ld	r24, Z
    3664:	83 31       	cpi	r24, 0x13	; 19
    3666:	39 f5       	brne	.+78     	; 0x36b6 <m2m_wifi_cb+0x340>
    3668:	ae 01       	movw	r20, r28
    366a:	45 5c       	subi	r20, 0xC5	; 197
    366c:	5f 4f       	sbci	r21, 0xFF	; 255
    366e:	ce 01       	movw	r24, r28
    3670:	8e 55       	subi	r24, 0x5E	; 94
    3672:	9f 4f       	sbci	r25, 0xFF	; 255
    3674:	fc 01       	movw	r30, r24
    3676:	80 81       	ld	r24, Z
    3678:	91 81       	ldd	r25, Z+1	; 0x01
    367a:	a2 81       	ldd	r26, Z+2	; 0x02
    367c:	b3 81       	ldd	r27, Z+3	; 0x03
    367e:	00 e0       	ldi	r16, 0x00	; 0
    3680:	2c e2       	ldi	r18, 0x2C	; 44
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	bc 01       	movw	r22, r24
    3686:	cd 01       	movw	r24, r26
    3688:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    368c:	88 23       	and	r24, r24
    368e:	09 f0       	breq	.+2      	; 0x3692 <m2m_wifi_cb+0x31c>
    3690:	0b c1       	rjmp	.+534    	; 0x38a8 <m2m_wifi_cb+0x532>
    3692:	80 91 0f 2e 	lds	r24, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    3696:	90 91 10 2e 	lds	r25, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    369a:	89 2b       	or	r24, r25
    369c:	09 f4       	brne	.+2      	; 0x36a0 <m2m_wifi_cb+0x32a>
    369e:	04 c1       	rjmp	.+520    	; 0x38a8 <m2m_wifi_cb+0x532>
    36a0:	20 91 0f 2e 	lds	r18, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    36a4:	30 91 10 2e 	lds	r19, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    36a8:	ce 01       	movw	r24, r28
    36aa:	cb 96       	adiw	r24, 0x3b	; 59
    36ac:	bc 01       	movw	r22, r24
    36ae:	83 e1       	ldi	r24, 0x13	; 19
    36b0:	f9 01       	movw	r30, r18
    36b2:	09 95       	icall
    36b4:	f9 c0       	rjmp	.+498    	; 0x38a8 <m2m_wifi_cb+0x532>
    36b6:	ce 01       	movw	r24, r28
    36b8:	81 56       	subi	r24, 0x61	; 97
    36ba:	9f 4f       	sbci	r25, 0xFF	; 255
    36bc:	fc 01       	movw	r30, r24
    36be:	80 81       	ld	r24, Z
    36c0:	84 30       	cpi	r24, 0x04	; 4
    36c2:	39 f5       	brne	.+78     	; 0x3712 <m2m_wifi_cb+0x39c>
    36c4:	ce 01       	movw	r24, r28
    36c6:	8e 55       	subi	r24, 0x5E	; 94
    36c8:	9f 4f       	sbci	r25, 0xFF	; 255
    36ca:	fc 01       	movw	r30, r24
    36cc:	80 81       	ld	r24, Z
    36ce:	91 81       	ldd	r25, Z+1	; 0x01
    36d0:	a2 81       	ldd	r26, Z+2	; 0x02
    36d2:	b3 81       	ldd	r27, Z+3	; 0x03
    36d4:	00 e0       	ldi	r16, 0x00	; 0
    36d6:	24 e0       	ldi	r18, 0x04	; 4
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	ae 01       	movw	r20, r28
    36dc:	4f 5f       	subi	r20, 0xFF	; 255
    36de:	5f 4f       	sbci	r21, 0xFF	; 255
    36e0:	bc 01       	movw	r22, r24
    36e2:	cd 01       	movw	r24, r26
    36e4:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    36e8:	88 23       	and	r24, r24
    36ea:	09 f0       	breq	.+2      	; 0x36ee <m2m_wifi_cb+0x378>
    36ec:	dd c0       	rjmp	.+442    	; 0x38a8 <m2m_wifi_cb+0x532>
    36ee:	80 91 0f 2e 	lds	r24, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    36f2:	90 91 10 2e 	lds	r25, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    36f6:	89 2b       	or	r24, r25
    36f8:	09 f4       	brne	.+2      	; 0x36fc <m2m_wifi_cb+0x386>
    36fa:	d6 c0       	rjmp	.+428    	; 0x38a8 <m2m_wifi_cb+0x532>
    36fc:	20 91 0f 2e 	lds	r18, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    3700:	30 91 10 2e 	lds	r19, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    3704:	ce 01       	movw	r24, r28
    3706:	01 96       	adiw	r24, 0x01	; 1
    3708:	bc 01       	movw	r22, r24
    370a:	84 e0       	ldi	r24, 0x04	; 4
    370c:	f9 01       	movw	r30, r18
    370e:	09 95       	icall
    3710:	cb c0       	rjmp	.+406    	; 0x38a8 <m2m_wifi_cb+0x532>
    3712:	ce 01       	movw	r24, r28
    3714:	81 56       	subi	r24, 0x61	; 97
    3716:	9f 4f       	sbci	r25, 0xFF	; 255
    3718:	fc 01       	movw	r30, r24
    371a:	80 81       	ld	r24, Z
    371c:	85 36       	cpi	r24, 0x65	; 101
    371e:	39 f5       	brne	.+78     	; 0x376e <m2m_wifi_cb+0x3f8>
    3720:	ce 01       	movw	r24, r28
    3722:	8e 55       	subi	r24, 0x5E	; 94
    3724:	9f 4f       	sbci	r25, 0xFF	; 255
    3726:	fc 01       	movw	r30, r24
    3728:	80 81       	ld	r24, Z
    372a:	91 81       	ldd	r25, Z+1	; 0x01
    372c:	a2 81       	ldd	r26, Z+2	; 0x02
    372e:	b3 81       	ldd	r27, Z+3	; 0x03
    3730:	00 e0       	ldi	r16, 0x00	; 0
    3732:	24 e0       	ldi	r18, 0x04	; 4
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	ae 01       	movw	r20, r28
    3738:	4f 5f       	subi	r20, 0xFF	; 255
    373a:	5f 4f       	sbci	r21, 0xFF	; 255
    373c:	bc 01       	movw	r22, r24
    373e:	cd 01       	movw	r24, r26
    3740:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    3744:	88 23       	and	r24, r24
    3746:	09 f0       	breq	.+2      	; 0x374a <m2m_wifi_cb+0x3d4>
    3748:	af c0       	rjmp	.+350    	; 0x38a8 <m2m_wifi_cb+0x532>
    374a:	80 91 0f 2e 	lds	r24, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    374e:	90 91 10 2e 	lds	r25, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    3752:	89 2b       	or	r24, r25
    3754:	09 f4       	brne	.+2      	; 0x3758 <m2m_wifi_cb+0x3e2>
    3756:	a8 c0       	rjmp	.+336    	; 0x38a8 <m2m_wifi_cb+0x532>
    3758:	20 91 0f 2e 	lds	r18, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    375c:	30 91 10 2e 	lds	r19, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    3760:	ce 01       	movw	r24, r28
    3762:	01 96       	adiw	r24, 0x01	; 1
    3764:	bc 01       	movw	r22, r24
    3766:	85 e6       	ldi	r24, 0x65	; 101
    3768:	f9 01       	movw	r30, r18
    376a:	09 95       	icall
    376c:	9d c0       	rjmp	.+314    	; 0x38a8 <m2m_wifi_cb+0x532>
    376e:	ce 01       	movw	r24, r28
    3770:	81 56       	subi	r24, 0x61	; 97
    3772:	9f 4f       	sbci	r25, 0xFF	; 255
    3774:	fc 01       	movw	r30, r24
    3776:	80 81       	ld	r24, Z
    3778:	89 30       	cpi	r24, 0x09	; 9
    377a:	39 f5       	brne	.+78     	; 0x37ca <m2m_wifi_cb+0x454>
    377c:	ae 01       	movw	r20, r28
    377e:	45 5c       	subi	r20, 0xC5	; 197
    3780:	5f 4f       	sbci	r21, 0xFF	; 255
    3782:	ce 01       	movw	r24, r28
    3784:	8e 55       	subi	r24, 0x5E	; 94
    3786:	9f 4f       	sbci	r25, 0xFF	; 255
    3788:	fc 01       	movw	r30, r24
    378a:	80 81       	ld	r24, Z
    378c:	91 81       	ldd	r25, Z+1	; 0x01
    378e:	a2 81       	ldd	r26, Z+2	; 0x02
    3790:	b3 81       	ldd	r27, Z+3	; 0x03
    3792:	01 e0       	ldi	r16, 0x01	; 1
    3794:	24 e6       	ldi	r18, 0x64	; 100
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	bc 01       	movw	r22, r24
    379a:	cd 01       	movw	r24, r26
    379c:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    37a0:	88 23       	and	r24, r24
    37a2:	09 f0       	breq	.+2      	; 0x37a6 <m2m_wifi_cb+0x430>
    37a4:	81 c0       	rjmp	.+258    	; 0x38a8 <m2m_wifi_cb+0x532>
    37a6:	80 91 0f 2e 	lds	r24, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    37aa:	90 91 10 2e 	lds	r25, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    37ae:	89 2b       	or	r24, r25
    37b0:	09 f4       	brne	.+2      	; 0x37b4 <m2m_wifi_cb+0x43e>
    37b2:	7a c0       	rjmp	.+244    	; 0x38a8 <m2m_wifi_cb+0x532>
    37b4:	20 91 0f 2e 	lds	r18, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    37b8:	30 91 10 2e 	lds	r19, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    37bc:	ce 01       	movw	r24, r28
    37be:	cb 96       	adiw	r24, 0x3b	; 59
    37c0:	bc 01       	movw	r22, r24
    37c2:	89 e0       	ldi	r24, 0x09	; 9
    37c4:	f9 01       	movw	r30, r18
    37c6:	09 95       	icall
    37c8:	6f c0       	rjmp	.+222    	; 0x38a8 <m2m_wifi_cb+0x532>
    37ca:	ce 01       	movw	r24, r28
    37cc:	81 56       	subi	r24, 0x61	; 97
    37ce:	9f 4f       	sbci	r25, 0xFF	; 255
    37d0:	fc 01       	movw	r30, r24
    37d2:	80 81       	ld	r24, Z
    37d4:	8a 32       	cpi	r24, 0x2A	; 42
    37d6:	39 f5       	brne	.+78     	; 0x3826 <m2m_wifi_cb+0x4b0>
    37d8:	ae 01       	movw	r20, r28
    37da:	4f 5c       	subi	r20, 0xCF	; 207
    37dc:	5f 4f       	sbci	r21, 0xFF	; 255
    37de:	ce 01       	movw	r24, r28
    37e0:	8e 55       	subi	r24, 0x5E	; 94
    37e2:	9f 4f       	sbci	r25, 0xFF	; 255
    37e4:	fc 01       	movw	r30, r24
    37e6:	80 81       	ld	r24, Z
    37e8:	91 81       	ldd	r25, Z+1	; 0x01
    37ea:	a2 81       	ldd	r26, Z+2	; 0x02
    37ec:	b3 81       	ldd	r27, Z+3	; 0x03
    37ee:	01 e0       	ldi	r16, 0x01	; 1
    37f0:	24 e0       	ldi	r18, 0x04	; 4
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	bc 01       	movw	r22, r24
    37f6:	cd 01       	movw	r24, r26
    37f8:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    37fc:	88 23       	and	r24, r24
    37fe:	09 f0       	breq	.+2      	; 0x3802 <m2m_wifi_cb+0x48c>
    3800:	53 c0       	rjmp	.+166    	; 0x38a8 <m2m_wifi_cb+0x532>
    3802:	80 91 0f 2e 	lds	r24, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    3806:	90 91 10 2e 	lds	r25, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    380a:	89 2b       	or	r24, r25
    380c:	09 f4       	brne	.+2      	; 0x3810 <m2m_wifi_cb+0x49a>
    380e:	4c c0       	rjmp	.+152    	; 0x38a8 <m2m_wifi_cb+0x532>
    3810:	20 91 0f 2e 	lds	r18, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    3814:	30 91 10 2e 	lds	r19, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    3818:	ce 01       	movw	r24, r28
    381a:	c1 96       	adiw	r24, 0x31	; 49
    381c:	bc 01       	movw	r22, r24
    381e:	8a e2       	ldi	r24, 0x2A	; 42
    3820:	f9 01       	movw	r30, r18
    3822:	09 95       	icall
    3824:	41 c0       	rjmp	.+130    	; 0x38a8 <m2m_wifi_cb+0x532>
    3826:	ce 01       	movw	r24, r28
    3828:	81 56       	subi	r24, 0x61	; 97
    382a:	9f 4f       	sbci	r25, 0xFF	; 255
    382c:	fc 01       	movw	r30, r24
    382e:	80 81       	ld	r24, Z
    3830:	80 32       	cpi	r24, 0x20	; 32
    3832:	d1 f5       	brne	.+116    	; 0x38a8 <m2m_wifi_cb+0x532>
    3834:	ae 01       	movw	r20, r28
    3836:	4b 5c       	subi	r20, 0xCB	; 203
    3838:	5f 4f       	sbci	r21, 0xFF	; 255
    383a:	ce 01       	movw	r24, r28
    383c:	8e 55       	subi	r24, 0x5E	; 94
    383e:	9f 4f       	sbci	r25, 0xFF	; 255
    3840:	fc 01       	movw	r30, r24
    3842:	80 81       	ld	r24, Z
    3844:	91 81       	ldd	r25, Z+1	; 0x01
    3846:	a2 81       	ldd	r26, Z+2	; 0x02
    3848:	b3 81       	ldd	r27, Z+3	; 0x03
    384a:	00 e0       	ldi	r16, 0x00	; 0
    384c:	26 e0       	ldi	r18, 0x06	; 6
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	bc 01       	movw	r22, r24
    3852:	cd 01       	movw	r24, r26
    3854:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    3858:	88 23       	and	r24, r24
    385a:	31 f5       	brne	.+76     	; 0x38a8 <m2m_wifi_cb+0x532>
    385c:	2f a9       	ldd	r18, Y+55	; 0x37
    385e:	38 ad       	ldd	r19, Y+56	; 0x38
    3860:	4d a9       	ldd	r20, Y+53	; 0x35
    3862:	5e a9       	ldd	r21, Y+54	; 0x36
    3864:	ce 01       	movw	r24, r28
    3866:	8e 55       	subi	r24, 0x5E	; 94
    3868:	9f 4f       	sbci	r25, 0xFF	; 255
    386a:	fc 01       	movw	r30, r24
    386c:	80 81       	ld	r24, Z
    386e:	91 81       	ldd	r25, Z+1	; 0x01
    3870:	a2 81       	ldd	r26, Z+2	; 0x02
    3872:	b3 81       	ldd	r27, Z+3	; 0x03
    3874:	06 96       	adiw	r24, 0x06	; 6
    3876:	a1 1d       	adc	r26, r1
    3878:	b1 1d       	adc	r27, r1
    387a:	01 e0       	ldi	r16, 0x01	; 1
    387c:	bc 01       	movw	r22, r24
    387e:	cd 01       	movw	r24, r26
    3880:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    3884:	88 23       	and	r24, r24
    3886:	81 f4       	brne	.+32     	; 0x38a8 <m2m_wifi_cb+0x532>
    3888:	80 91 0f 2e 	lds	r24, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    388c:	90 91 10 2e 	lds	r25, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    3890:	89 2b       	or	r24, r25
    3892:	51 f0       	breq	.+20     	; 0x38a8 <m2m_wifi_cb+0x532>
    3894:	20 91 0f 2e 	lds	r18, 0x2E0F	; 0x802e0f <gpfAppWifiCb>
    3898:	30 91 10 2e 	lds	r19, 0x2E10	; 0x802e10 <gpfAppWifiCb+0x1>
    389c:	ce 01       	movw	r24, r28
    389e:	c5 96       	adiw	r24, 0x35	; 53
    38a0:	bc 01       	movw	r22, r24
    38a2:	80 e2       	ldi	r24, 0x20	; 32
    38a4:	f9 01       	movw	r30, r18
    38a6:	09 95       	icall
    38a8:	00 00       	nop
    38aa:	cb 55       	subi	r28, 0x5B	; 91
    38ac:	df 4f       	sbci	r29, 0xFF	; 255
    38ae:	cd bf       	out	0x3d, r28	; 61
    38b0:	de bf       	out	0x3e, r29	; 62
    38b2:	df 91       	pop	r29
    38b4:	cf 91       	pop	r28
    38b6:	0f 91       	pop	r16
    38b8:	08 95       	ret

000038ba <m2m_wifi_init>:
    38ba:	cf 93       	push	r28
    38bc:	df 93       	push	r29
    38be:	cd b7       	in	r28, 0x3d	; 61
    38c0:	de b7       	in	r29, 0x3e	; 62
    38c2:	aa 97       	sbiw	r28, 0x2a	; 42
    38c4:	cd bf       	out	0x3d, r28	; 61
    38c6:	de bf       	out	0x3e, r29	; 62
    38c8:	89 a7       	std	Y+41, r24	; 0x29
    38ca:	9a a7       	std	Y+42, r25	; 0x2a
    38cc:	19 82       	std	Y+1, r1	; 0x01
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	88 a7       	std	Y+40, r24	; 0x28
    38d2:	89 a5       	ldd	r24, Y+41	; 0x29
    38d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    38d6:	89 2b       	or	r24, r25
    38d8:	19 f4       	brne	.+6      	; 0x38e0 <m2m_wifi_init+0x26>
    38da:	84 ef       	ldi	r24, 0xF4	; 244
    38dc:	89 83       	std	Y+1, r24	; 0x01
    38de:	2d c0       	rjmp	.+90     	; 0x393a <m2m_wifi_init+0x80>
    38e0:	89 a5       	ldd	r24, Y+41	; 0x29
    38e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    38e4:	fc 01       	movw	r30, r24
    38e6:	80 81       	ld	r24, Z
    38e8:	91 81       	ldd	r25, Z+1	; 0x01
    38ea:	80 93 0f 2e 	sts	0x2E0F, r24	; 0x802e0f <gpfAppWifiCb>
    38ee:	90 93 10 2e 	sts	0x2E10, r25	; 0x802e10 <gpfAppWifiCb+0x1>
    38f2:	10 92 0e 2e 	sts	0x2E0E, r1	; 0x802e0e <gu8scanInProgress>
    38f6:	ce 01       	movw	r24, r28
    38f8:	88 96       	adiw	r24, 0x28	; 40
    38fa:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <nm_drv_init>
    38fe:	89 83       	std	Y+1, r24	; 0x01
    3900:	89 81       	ldd	r24, Y+1	; 0x01
    3902:	88 23       	and	r24, r24
    3904:	c9 f4       	brne	.+50     	; 0x3938 <m2m_wifi_init+0x7e>
    3906:	80 e0       	ldi	r24, 0x00	; 0
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	0e 94 ce 14 	call	0x299c	; 0x299c <hif_init>
    390e:	89 83       	std	Y+1, r24	; 0x01
    3910:	89 81       	ldd	r24, Y+1	; 0x01
    3912:	88 23       	and	r24, r24
    3914:	59 f4       	brne	.+22     	; 0x392c <m2m_wifi_init+0x72>
    3916:	6b eb       	ldi	r22, 0xBB	; 187
    3918:	79 e1       	ldi	r23, 0x19	; 25
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	0e 94 61 19 	call	0x32c2	; 0x32c2 <hif_register_cb>
    3920:	ce 01       	movw	r24, r28
    3922:	02 96       	adiw	r24, 0x02	; 2
    3924:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <nm_get_firmware_full_info>
    3928:	89 83       	std	Y+1, r24	; 0x01
    392a:	07 c0       	rjmp	.+14     	; 0x393a <m2m_wifi_init+0x80>
    392c:	00 00       	nop
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <nm_drv_deinit>
    3936:	01 c0       	rjmp	.+2      	; 0x393a <m2m_wifi_init+0x80>
    3938:	00 00       	nop
    393a:	89 81       	ldd	r24, Y+1	; 0x01
    393c:	aa 96       	adiw	r28, 0x2a	; 42
    393e:	cd bf       	out	0x3d, r28	; 61
    3940:	de bf       	out	0x3e, r29	; 62
    3942:	df 91       	pop	r29
    3944:	cf 91       	pop	r28
    3946:	08 95       	ret

00003948 <m2m_wifi_handle_events>:
    3948:	cf 93       	push	r28
    394a:	df 93       	push	r29
    394c:	00 d0       	rcall	.+0      	; 0x394e <m2m_wifi_handle_events+0x6>
    394e:	cd b7       	in	r28, 0x3d	; 61
    3950:	de b7       	in	r29, 0x3e	; 62
    3952:	89 83       	std	Y+1, r24	; 0x01
    3954:	9a 83       	std	Y+2, r25	; 0x02
    3956:	0e 94 79 18 	call	0x30f2	; 0x30f2 <hif_handle_isr>
    395a:	0f 90       	pop	r0
    395c:	0f 90       	pop	r0
    395e:	df 91       	pop	r29
    3960:	cf 91       	pop	r28
    3962:	08 95       	ret

00003964 <m2m_wifi_connect>:

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    3964:	ef 92       	push	r14
    3966:	0f 93       	push	r16
    3968:	1f 93       	push	r17
    396a:	cf 93       	push	r28
    396c:	df 93       	push	r29
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	28 97       	sbiw	r28, 0x08	; 8
    3974:	cd bf       	out	0x3d, r28	; 61
    3976:	de bf       	out	0x3e, r29	; 62
    3978:	89 83       	std	Y+1, r24	; 0x01
    397a:	9a 83       	std	Y+2, r25	; 0x02
    397c:	6b 83       	std	Y+3, r22	; 0x03
    397e:	4c 83       	std	Y+4, r20	; 0x04
    3980:	2d 83       	std	Y+5, r18	; 0x05
    3982:	3e 83       	std	Y+6, r19	; 0x06
    3984:	0f 83       	std	Y+7, r16	; 0x07
    3986:	18 87       	std	Y+8, r17	; 0x08
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    3988:	4f 81       	ldd	r20, Y+7	; 0x07
    398a:	58 85       	ldd	r21, Y+8	; 0x08
    398c:	2d 81       	ldd	r18, Y+5	; 0x05
    398e:	3e 81       	ldd	r19, Y+6	; 0x06
    3990:	89 81       	ldd	r24, Y+1	; 0x01
    3992:	9a 81       	ldd	r25, Y+2	; 0x02
    3994:	e1 2c       	mov	r14, r1
    3996:	8a 01       	movw	r16, r20
    3998:	4c 81       	ldd	r20, Y+4	; 0x04
    399a:	6b 81       	ldd	r22, Y+3	; 0x03
    399c:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <m2m_wifi_connect_sc>
}
    39a0:	28 96       	adiw	r28, 0x08	; 8
    39a2:	cd bf       	out	0x3d, r28	; 61
    39a4:	de bf       	out	0x3e, r29	; 62
    39a6:	df 91       	pop	r29
    39a8:	cf 91       	pop	r28
    39aa:	1f 91       	pop	r17
    39ac:	0f 91       	pop	r16
    39ae:	ef 90       	pop	r14
    39b0:	08 95       	ret

000039b2 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    39b2:	cf 92       	push	r12
    39b4:	df 92       	push	r13
    39b6:	ef 92       	push	r14
    39b8:	ff 92       	push	r15
    39ba:	0f 93       	push	r16
    39bc:	1f 93       	push	r17
    39be:	cf 93       	push	r28
    39c0:	df 93       	push	r29
    39c2:	cd b7       	in	r28, 0x3d	; 61
    39c4:	de b7       	in	r29, 0x3e	; 62
    39c6:	c3 58       	subi	r28, 0x83	; 131
    39c8:	d1 09       	sbc	r29, r1
    39ca:	cd bf       	out	0x3d, r28	; 61
    39cc:	de bf       	out	0x3e, r29	; 62
    39ce:	fe 01       	movw	r30, r28
    39d0:	e7 58       	subi	r30, 0x87	; 135
    39d2:	ff 4f       	sbci	r31, 0xFF	; 255
    39d4:	80 83       	st	Z, r24
    39d6:	91 83       	std	Z+1, r25	; 0x01
    39d8:	ce 01       	movw	r24, r28
    39da:	85 58       	subi	r24, 0x85	; 133
    39dc:	9f 4f       	sbci	r25, 0xFF	; 255
    39de:	dc 01       	movw	r26, r24
    39e0:	6c 93       	st	X, r22
    39e2:	ce 01       	movw	r24, r28
    39e4:	84 58       	subi	r24, 0x84	; 132
    39e6:	9f 4f       	sbci	r25, 0xFF	; 255
    39e8:	fc 01       	movw	r30, r24
    39ea:	40 83       	st	Z, r20
    39ec:	ce 01       	movw	r24, r28
    39ee:	83 58       	subi	r24, 0x83	; 131
    39f0:	9f 4f       	sbci	r25, 0xFF	; 255
    39f2:	dc 01       	movw	r26, r24
    39f4:	2d 93       	st	X+, r18
    39f6:	3c 93       	st	X, r19
    39f8:	ce 01       	movw	r24, r28
    39fa:	81 58       	subi	r24, 0x81	; 129
    39fc:	9f 4f       	sbci	r25, 0xFF	; 255
    39fe:	fc 01       	movw	r30, r24
    3a00:	00 83       	st	Z, r16
    3a02:	11 83       	std	Z+1, r17	; 0x01
    3a04:	ce 01       	movw	r24, r28
    3a06:	8f 57       	subi	r24, 0x7F	; 127
    3a08:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	ec 92       	st	X, r14
	sint8				ret = M2M_SUCCESS;
    3a0e:	19 82       	std	Y+1, r1	; 0x01
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    3a10:	ce 01       	movw	r24, r28
    3a12:	84 58       	subi	r24, 0x84	; 132
    3a14:	9f 4f       	sbci	r25, 0xFF	; 255
    3a16:	fc 01       	movw	r30, r24
    3a18:	80 81       	ld	r24, Z
    3a1a:	81 30       	cpi	r24, 0x01	; 1
    3a1c:	09 f4       	brne	.+2      	; 0x3a20 <m2m_wifi_connect_sc+0x6e>
    3a1e:	75 c0       	rjmp	.+234    	; 0x3b0a <m2m_wifi_connect_sc+0x158>
	{
		if(pvAuthInfo == NULL)
    3a20:	ce 01       	movw	r24, r28
    3a22:	83 58       	subi	r24, 0x83	; 131
    3a24:	9f 4f       	sbci	r25, 0xFF	; 255
    3a26:	dc 01       	movw	r26, r24
    3a28:	8d 91       	ld	r24, X+
    3a2a:	9c 91       	ld	r25, X
    3a2c:	89 2b       	or	r24, r25
    3a2e:	19 f4       	brne	.+6      	; 0x3a36 <m2m_wifi_connect_sc+0x84>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
    3a30:	84 ef       	ldi	r24, 0xF4	; 244
    3a32:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    3a34:	bd c1       	rjmp	.+890    	; 0x3db0 <m2m_wifi_connect_sc+0x3fe>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    3a36:	ce 01       	movw	r24, r28
    3a38:	84 58       	subi	r24, 0x84	; 132
    3a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	80 81       	ld	r24, Z
    3a40:	82 30       	cpi	r24, 0x02	; 2
    3a42:	09 f0       	breq	.+2      	; 0x3a46 <m2m_wifi_connect_sc+0x94>
    3a44:	62 c0       	rjmp	.+196    	; 0x3b0a <m2m_wifi_connect_sc+0x158>
    3a46:	ce 01       	movw	r24, r28
    3a48:	83 58       	subi	r24, 0x83	; 131
    3a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	8d 91       	ld	r24, X+
    3a50:	9c 91       	ld	r25, X
    3a52:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <m2m_strlen>
    3a56:	80 34       	cpi	r24, 0x40	; 64
    3a58:	91 05       	cpc	r25, r1
    3a5a:	09 f0       	breq	.+2      	; 0x3a5e <m2m_wifi_connect_sc+0xac>
    3a5c:	56 c0       	rjmp	.+172    	; 0x3b0a <m2m_wifi_connect_sc+0x158>
		{
			uint8 i = 0;
    3a5e:	1a 82       	std	Y+2, r1	; 0x02
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    3a60:	ce 01       	movw	r24, r28
    3a62:	83 58       	subi	r24, 0x83	; 131
    3a64:	9f 4f       	sbci	r25, 0xFF	; 255
    3a66:	fc 01       	movw	r30, r24
    3a68:	80 81       	ld	r24, Z
    3a6a:	91 81       	ldd	r25, Z+1	; 0x01
    3a6c:	8b 83       	std	Y+3, r24	; 0x03
    3a6e:	9c 83       	std	Y+4, r25	; 0x04
			while(i < (M2M_MAX_PSK_LEN-1))
    3a70:	48 c0       	rjmp	.+144    	; 0x3b02 <m2m_wifi_connect_sc+0x150>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    3a72:	8a 81       	ldd	r24, Y+2	; 0x02
    3a74:	88 2f       	mov	r24, r24
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	2b 81       	ldd	r18, Y+3	; 0x03
    3a7a:	3c 81       	ldd	r19, Y+4	; 0x04
    3a7c:	82 0f       	add	r24, r18
    3a7e:	93 1f       	adc	r25, r19
    3a80:	dc 01       	movw	r26, r24
    3a82:	8c 91       	ld	r24, X
    3a84:	80 33       	cpi	r24, 0x30	; 48
    3a86:	b8 f1       	brcs	.+110    	; 0x3af6 <m2m_wifi_connect_sc+0x144>
    3a88:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8a:	88 2f       	mov	r24, r24
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	2b 81       	ldd	r18, Y+3	; 0x03
    3a90:	3c 81       	ldd	r19, Y+4	; 0x04
    3a92:	82 0f       	add	r24, r18
    3a94:	93 1f       	adc	r25, r19
    3a96:	fc 01       	movw	r30, r24
    3a98:	80 81       	ld	r24, Z
    3a9a:	8a 33       	cpi	r24, 0x3A	; 58
    3a9c:	58 f0       	brcs	.+22     	; 0x3ab4 <m2m_wifi_connect_sc+0x102>
    3a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa0:	88 2f       	mov	r24, r24
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	2b 81       	ldd	r18, Y+3	; 0x03
    3aa6:	3c 81       	ldd	r19, Y+4	; 0x04
    3aa8:	82 0f       	add	r24, r18
    3aaa:	93 1f       	adc	r25, r19
    3aac:	dc 01       	movw	r26, r24
    3aae:	8c 91       	ld	r24, X
    3ab0:	81 34       	cpi	r24, 0x41	; 65
    3ab2:	08 f1       	brcs	.+66     	; 0x3af6 <m2m_wifi_connect_sc+0x144>
    3ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab6:	88 2f       	mov	r24, r24
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	2b 81       	ldd	r18, Y+3	; 0x03
    3abc:	3c 81       	ldd	r19, Y+4	; 0x04
    3abe:	82 0f       	add	r24, r18
    3ac0:	93 1f       	adc	r25, r19
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	80 81       	ld	r24, Z
    3ac6:	87 34       	cpi	r24, 0x47	; 71
    3ac8:	58 f0       	brcs	.+22     	; 0x3ae0 <m2m_wifi_connect_sc+0x12e>
    3aca:	8a 81       	ldd	r24, Y+2	; 0x02
    3acc:	88 2f       	mov	r24, r24
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	2b 81       	ldd	r18, Y+3	; 0x03
    3ad2:	3c 81       	ldd	r19, Y+4	; 0x04
    3ad4:	82 0f       	add	r24, r18
    3ad6:	93 1f       	adc	r25, r19
    3ad8:	dc 01       	movw	r26, r24
    3ada:	8c 91       	ld	r24, X
    3adc:	81 36       	cpi	r24, 0x61	; 97
    3ade:	58 f0       	brcs	.+22     	; 0x3af6 <m2m_wifi_connect_sc+0x144>
    3ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae2:	88 2f       	mov	r24, r24
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	2b 81       	ldd	r18, Y+3	; 0x03
    3ae8:	3c 81       	ldd	r19, Y+4	; 0x04
    3aea:	82 0f       	add	r24, r18
    3aec:	93 1f       	adc	r25, r19
    3aee:	fc 01       	movw	r30, r24
    3af0:	80 81       	ld	r24, Z
    3af2:	87 36       	cpi	r24, 0x67	; 103
    3af4:	18 f0       	brcs	.+6      	; 0x3afc <m2m_wifi_connect_sc+0x14a>
				{
					M2M_ERR("Invalid Key\n");
					ret = M2M_ERR_FAIL;
    3af6:	84 ef       	ldi	r24, 0xF4	; 244
    3af8:	89 83       	std	Y+1, r24	; 0x01
					goto ERR1;
    3afa:	5a c1       	rjmp	.+692    	; 0x3db0 <m2m_wifi_connect_sc+0x3fe>
				}
				i++;
    3afc:	8a 81       	ldd	r24, Y+2	; 0x02
    3afe:	8f 5f       	subi	r24, 0xFF	; 255
    3b00:	8a 83       	std	Y+2, r24	; 0x02
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    3b02:	8a 81       	ldd	r24, Y+2	; 0x02
    3b04:	80 34       	cpi	r24, 0x40	; 64
    3b06:	08 f4       	brcc	.+2      	; 0x3b0a <m2m_wifi_connect_sc+0x158>
    3b08:	b4 cf       	rjmp	.-152    	; 0x3a72 <m2m_wifi_connect_sc+0xc0>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    3b0a:	ce 01       	movw	r24, r28
    3b0c:	85 58       	subi	r24, 0x85	; 133
    3b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b10:	dc 01       	movw	r26, r24
    3b12:	8c 91       	ld	r24, X
    3b14:	88 23       	and	r24, r24
    3b16:	39 f0       	breq	.+14     	; 0x3b26 <m2m_wifi_connect_sc+0x174>
    3b18:	ce 01       	movw	r24, r28
    3b1a:	85 58       	subi	r24, 0x85	; 133
    3b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b1e:	fc 01       	movw	r30, r24
    3b20:	80 81       	ld	r24, Z
    3b22:	81 32       	cpi	r24, 0x21	; 33
    3b24:	18 f0       	brcs	.+6      	; 0x3b2c <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
    3b26:	84 ef       	ldi	r24, 0xF4	; 244
    3b28:	89 83       	std	Y+1, r24	; 0x01
		goto ERR1;
    3b2a:	42 c1       	rjmp	.+644    	; 0x3db0 <m2m_wifi_connect_sc+0x3fe>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    3b2c:	ce 01       	movw	r24, r28
    3b2e:	81 58       	subi	r24, 0x81	; 129
    3b30:	9f 4f       	sbci	r25, 0xFF	; 255
    3b32:	dc 01       	movw	r26, r24
    3b34:	8d 91       	ld	r24, X+
    3b36:	9c 91       	ld	r25, X
    3b38:	89 2b       	or	r24, r25
    3b3a:	41 f0       	breq	.+16     	; 0x3b4c <m2m_wifi_connect_sc+0x19a>
    3b3c:	ce 01       	movw	r24, r28
    3b3e:	81 58       	subi	r24, 0x81	; 129
    3b40:	9f 4f       	sbci	r25, 0xFF	; 255
    3b42:	fc 01       	movw	r30, r24
    3b44:	80 81       	ld	r24, Z
    3b46:	91 81       	ldd	r25, Z+1	; 0x01
    3b48:	0f 97       	sbiw	r24, 0x0f	; 15
    3b4a:	60 f0       	brcs	.+24     	; 0x3b64 <m2m_wifi_connect_sc+0x1b2>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    3b4c:	ce 01       	movw	r24, r28
    3b4e:	81 58       	subi	r24, 0x81	; 129
    3b50:	9f 4f       	sbci	r25, 0xFF	; 255
    3b52:	dc 01       	movw	r26, r24
    3b54:	8d 91       	ld	r24, X+
    3b56:	9c 91       	ld	r25, X
    3b58:	8f 3f       	cpi	r24, 0xFF	; 255
    3b5a:	91 05       	cpc	r25, r1
    3b5c:	19 f0       	breq	.+6      	; 0x3b64 <m2m_wifi_connect_sc+0x1b2>
		{
			M2M_ERR("CH INVALID\n");
			ret = M2M_ERR_FAIL;
    3b5e:	84 ef       	ldi	r24, 0xF4	; 244
    3b60:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    3b62:	26 c1       	rjmp	.+588    	; 0x3db0 <m2m_wifi_connect_sc+0x3fe>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    3b64:	ce 01       	movw	r24, r28
    3b66:	85 58       	subi	r24, 0x85	; 133
    3b68:	9f 4f       	sbci	r25, 0xFF	; 255
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	80 81       	ld	r24, Z
    3b6e:	88 2f       	mov	r24, r24
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	a0 e0       	ldi	r26, 0x00	; 0
    3b74:	b0 e0       	ldi	r27, 0x00	; 0
    3b76:	9e 01       	movw	r18, r28
    3b78:	27 58       	subi	r18, 0x87	; 135
    3b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b7c:	f9 01       	movw	r30, r18
    3b7e:	60 81       	ld	r22, Z
    3b80:	71 81       	ldd	r23, Z+1	; 0x01
    3b82:	9e 01       	movw	r18, r28
    3b84:	23 5f       	subi	r18, 0xF3	; 243
    3b86:	3f 4f       	sbci	r19, 0xFF	; 255
    3b88:	f9 01       	movw	r30, r18
    3b8a:	ea 5b       	subi	r30, 0xBA	; 186
    3b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8e:	9c 01       	movw	r18, r24
    3b90:	ad 01       	movw	r20, r26
    3b92:	cf 01       	movw	r24, r30
    3b94:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <m2m_memcpy>
	strConnect.au8SSID[u8SsidLen]	= 0;
    3b98:	ce 01       	movw	r24, r28
    3b9a:	85 58       	subi	r24, 0x85	; 133
    3b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	8c 91       	ld	r24, X
    3ba2:	88 2f       	mov	r24, r24
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	9e 01       	movw	r18, r28
    3ba8:	2d 5a       	subi	r18, 0xAD	; 173
    3baa:	3f 4f       	sbci	r19, 0xFF	; 255
    3bac:	82 0f       	add	r24, r18
    3bae:	93 1f       	adc	r25, r19
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	10 82       	st	Z, r1
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    3bb4:	ce 01       	movw	r24, r28
    3bb6:	8f 5a       	subi	r24, 0xAF	; 175
    3bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3bba:	9e 01       	movw	r18, r28
    3bbc:	21 58       	subi	r18, 0x81	; 129
    3bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    3bc0:	d9 01       	movw	r26, r18
    3bc2:	2d 91       	ld	r18, X+
    3bc4:	3c 91       	ld	r19, X
    3bc6:	fc 01       	movw	r30, r24
    3bc8:	20 83       	st	Z, r18
    3bca:	31 83       	std	Z+1, r19	; 0x01
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    3bcc:	ce 01       	movw	r24, r28
    3bce:	8f 57       	subi	r24, 0x7F	; 127
    3bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd2:	21 e0       	ldi	r18, 0x01	; 1
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	8c 91       	ld	r24, X
    3bd8:	88 23       	and	r24, r24
    3bda:	09 f4       	brne	.+2      	; 0x3bde <m2m_wifi_connect_sc+0x22c>
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	ce 01       	movw	r24, r28
    3be0:	8c 58       	subi	r24, 0x8C	; 140
    3be2:	9f 4f       	sbci	r25, 0xFF	; 255
    3be4:	fc 01       	movw	r30, r24
    3be6:	20 83       	st	Z, r18
	pstrAuthInfo = &strConnect.strSec;
    3be8:	ce 01       	movw	r24, r28
    3bea:	0d 96       	adiw	r24, 0x0d	; 13
    3bec:	8d 83       	std	Y+5, r24	; 0x05
    3bee:	9e 83       	std	Y+6, r25	; 0x06
	pstrAuthInfo->u8SecType		= u8SecType;
    3bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    3bf4:	8f 5b       	subi	r24, 0xBF	; 191
    3bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf8:	9e 01       	movw	r18, r28
    3bfa:	24 58       	subi	r18, 0x84	; 132
    3bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    3bfe:	d9 01       	movw	r26, r18
    3c00:	2c 91       	ld	r18, X
    3c02:	fc 01       	movw	r30, r24
    3c04:	20 83       	st	Z, r18

	if(u8SecType == M2M_WIFI_SEC_WEP)
    3c06:	ce 01       	movw	r24, r28
    3c08:	84 58       	subi	r24, 0x84	; 132
    3c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	8c 91       	ld	r24, X
    3c10:	83 30       	cpi	r24, 0x03	; 3
    3c12:	09 f0       	breq	.+2      	; 0x3c16 <m2m_wifi_connect_sc+0x264>
    3c14:	5f c0       	rjmp	.+190    	; 0x3cd4 <m2m_wifi_connect_sc+0x322>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    3c16:	ce 01       	movw	r24, r28
    3c18:	83 58       	subi	r24, 0x83	; 131
    3c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c1c:	fc 01       	movw	r30, r24
    3c1e:	80 81       	ld	r24, Z
    3c20:	91 81       	ldd	r25, Z+1	; 0x01
    3c22:	8f 83       	std	Y+7, r24	; 0x07
    3c24:	98 87       	std	Y+8, r25	; 0x08
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    3c26:	8d 81       	ldd	r24, Y+5	; 0x05
    3c28:	9e 81       	ldd	r25, Y+6	; 0x06
    3c2a:	89 87       	std	Y+9, r24	; 0x09
    3c2c:	9a 87       	std	Y+10, r25	; 0x0a
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    3c2e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c30:	98 85       	ldd	r25, Y+8	; 0x08
    3c32:	dc 01       	movw	r26, r24
    3c34:	8c 91       	ld	r24, X
    3c36:	2f ef       	ldi	r18, 0xFF	; 255
    3c38:	28 0f       	add	r18, r24
    3c3a:	89 85       	ldd	r24, Y+9	; 0x09
    3c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3e:	fc 01       	movw	r30, r24
    3c40:	20 83       	st	Z, r18

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    3c42:	89 85       	ldd	r24, Y+9	; 0x09
    3c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c46:	dc 01       	movw	r26, r24
    3c48:	8c 91       	ld	r24, X
    3c4a:	84 30       	cpi	r24, 0x04	; 4
    3c4c:	18 f0       	brcs	.+6      	; 0x3c54 <m2m_wifi_connect_sc+0x2a2>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
			ret = M2M_ERR_FAIL;
    3c4e:	84 ef       	ldi	r24, 0xF4	; 244
    3c50:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    3c52:	ae c0       	rjmp	.+348    	; 0x3db0 <m2m_wifi_connect_sc+0x3fe>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    3c54:	8f 81       	ldd	r24, Y+7	; 0x07
    3c56:	98 85       	ldd	r25, Y+8	; 0x08
    3c58:	fc 01       	movw	r30, r24
    3c5a:	81 81       	ldd	r24, Z+1	; 0x01
    3c5c:	2f ef       	ldi	r18, 0xFF	; 255
    3c5e:	28 0f       	add	r18, r24
    3c60:	89 85       	ldd	r24, Y+9	; 0x09
    3c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c64:	dc 01       	movw	r26, r24
    3c66:	11 96       	adiw	r26, 0x01	; 1
    3c68:	2c 93       	st	X, r18
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    3c6a:	89 85       	ldd	r24, Y+9	; 0x09
    3c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c6e:	fc 01       	movw	r30, r24
    3c70:	81 81       	ldd	r24, Z+1	; 0x01
    3c72:	8a 30       	cpi	r24, 0x0A	; 10
    3c74:	51 f0       	breq	.+20     	; 0x3c8a <m2m_wifi_connect_sc+0x2d8>
    3c76:	89 85       	ldd	r24, Y+9	; 0x09
    3c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c7a:	dc 01       	movw	r26, r24
    3c7c:	11 96       	adiw	r26, 0x01	; 1
    3c7e:	8c 91       	ld	r24, X
    3c80:	8a 31       	cpi	r24, 0x1A	; 26
    3c82:	19 f0       	breq	.+6      	; 0x3c8a <m2m_wifi_connect_sc+0x2d8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
			ret = M2M_ERR_FAIL;
    3c84:	84 ef       	ldi	r24, 0xF4	; 244
    3c86:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    3c88:	93 c0       	rjmp	.+294    	; 0x3db0 <m2m_wifi_connect_sc+0x3fe>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    3c8a:	8f 81       	ldd	r24, Y+7	; 0x07
    3c8c:	98 85       	ldd	r25, Y+8	; 0x08
    3c8e:	fc 01       	movw	r30, r24
    3c90:	81 81       	ldd	r24, Z+1	; 0x01
    3c92:	88 2f       	mov	r24, r24
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	a0 e0       	ldi	r26, 0x00	; 0
    3c98:	b0 e0       	ldi	r27, 0x00	; 0
    3c9a:	2f 81       	ldd	r18, Y+7	; 0x07
    3c9c:	38 85       	ldd	r19, Y+8	; 0x08
    3c9e:	b9 01       	movw	r22, r18
    3ca0:	6e 5f       	subi	r22, 0xFE	; 254
    3ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ca4:	29 85       	ldd	r18, Y+9	; 0x09
    3ca6:	3a 85       	ldd	r19, Y+10	; 0x0a
    3ca8:	f9 01       	movw	r30, r18
    3caa:	32 96       	adiw	r30, 0x02	; 2
    3cac:	9c 01       	movw	r18, r24
    3cae:	ad 01       	movw	r20, r26
    3cb0:	cf 01       	movw	r24, r30
    3cb2:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <m2m_memcpy>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    3cb6:	8f 81       	ldd	r24, Y+7	; 0x07
    3cb8:	98 85       	ldd	r25, Y+8	; 0x08
    3cba:	dc 01       	movw	r26, r24
    3cbc:	11 96       	adiw	r26, 0x01	; 1
    3cbe:	8c 91       	ld	r24, X
    3cc0:	88 2f       	mov	r24, r24
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	29 85       	ldd	r18, Y+9	; 0x09
    3cc6:	3a 85       	ldd	r19, Y+10	; 0x0a
    3cc8:	82 0f       	add	r24, r18
    3cca:	93 1f       	adc	r25, r19
    3ccc:	02 96       	adiw	r24, 0x02	; 2
    3cce:	fc 01       	movw	r30, r24
    3cd0:	10 82       	st	Z, r1
    3cd2:	5e c0       	rjmp	.+188    	; 0x3d90 <m2m_wifi_connect_sc+0x3de>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    3cd4:	ce 01       	movw	r24, r28
    3cd6:	84 58       	subi	r24, 0x84	; 132
    3cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cda:	dc 01       	movw	r26, r24
    3cdc:	8c 91       	ld	r24, X
    3cde:	82 30       	cpi	r24, 0x02	; 2
    3ce0:	a9 f5       	brne	.+106    	; 0x3d4c <m2m_wifi_connect_sc+0x39a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    3ce2:	ce 01       	movw	r24, r28
    3ce4:	83 58       	subi	r24, 0x83	; 131
    3ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce8:	fc 01       	movw	r30, r24
    3cea:	80 81       	ld	r24, Z
    3cec:	91 81       	ldd	r25, Z+1	; 0x01
    3cee:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <m2m_strlen>
    3cf2:	8b 87       	std	Y+11, r24	; 0x0b
    3cf4:	9c 87       	std	Y+12, r25	; 0x0c
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    3cf6:	8b 85       	ldd	r24, Y+11	; 0x0b
    3cf8:	9c 85       	ldd	r25, Y+12	; 0x0c
    3cfa:	89 2b       	or	r24, r25
    3cfc:	29 f0       	breq	.+10     	; 0x3d08 <m2m_wifi_connect_sc+0x356>
    3cfe:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d00:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d02:	81 34       	cpi	r24, 0x41	; 65
    3d04:	91 05       	cpc	r25, r1
    3d06:	18 f0       	brcs	.+6      	; 0x3d0e <m2m_wifi_connect_sc+0x35c>
		{
			M2M_ERR("Incorrect PSK key length\n");
			ret = M2M_ERR_FAIL;
    3d08:	84 ef       	ldi	r24, 0xF4	; 244
    3d0a:	89 83       	std	Y+1, r24	; 0x01
			goto ERR1;
    3d0c:	51 c0       	rjmp	.+162    	; 0x3db0 <m2m_wifi_connect_sc+0x3fe>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    3d0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d10:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d12:	01 96       	adiw	r24, 0x01	; 1
    3d14:	cc 01       	movw	r24, r24
    3d16:	a0 e0       	ldi	r26, 0x00	; 0
    3d18:	b0 e0       	ldi	r27, 0x00	; 0
    3d1a:	ed 81       	ldd	r30, Y+5	; 0x05
    3d1c:	fe 81       	ldd	r31, Y+6	; 0x06
    3d1e:	ce 57       	subi	r28, 0x7E	; 126
    3d20:	df 4f       	sbci	r29, 0xFF	; 255
    3d22:	e8 83       	st	Y, r30
    3d24:	f9 83       	std	Y+1, r31	; 0x01
    3d26:	c2 58       	subi	r28, 0x82	; 130
    3d28:	d0 40       	sbci	r29, 0x00	; 0
    3d2a:	9e 01       	movw	r18, r28
    3d2c:	23 58       	subi	r18, 0x83	; 131
    3d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d30:	f9 01       	movw	r30, r18
    3d32:	60 81       	ld	r22, Z
    3d34:	71 81       	ldd	r23, Z+1	; 0x01
    3d36:	9c 01       	movw	r18, r24
    3d38:	ad 01       	movw	r20, r26
    3d3a:	ce 57       	subi	r28, 0x7E	; 126
    3d3c:	df 4f       	sbci	r29, 0xFF	; 255
    3d3e:	88 81       	ld	r24, Y
    3d40:	99 81       	ldd	r25, Y+1	; 0x01
    3d42:	c2 58       	subi	r28, 0x82	; 130
    3d44:	d0 40       	sbci	r29, 0x00	; 0
    3d46:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <m2m_memcpy>
    3d4a:	22 c0       	rjmp	.+68     	; 0x3d90 <m2m_wifi_connect_sc+0x3de>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    3d4c:	ce 01       	movw	r24, r28
    3d4e:	84 58       	subi	r24, 0x84	; 132
    3d50:	9f 4f       	sbci	r25, 0xFF	; 255
    3d52:	dc 01       	movw	r26, r24
    3d54:	8c 91       	ld	r24, X
    3d56:	84 30       	cpi	r24, 0x04	; 4
    3d58:	89 f4       	brne	.+34     	; 0x3d7c <m2m_wifi_connect_sc+0x3ca>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    3d5a:	ed 81       	ldd	r30, Y+5	; 0x05
    3d5c:	fe 81       	ldd	r31, Y+6	; 0x06
    3d5e:	ce 01       	movw	r24, r28
    3d60:	83 58       	subi	r24, 0x83	; 131
    3d62:	9f 4f       	sbci	r25, 0xFF	; 255
    3d64:	dc 01       	movw	r26, r24
    3d66:	8d 91       	ld	r24, X+
    3d68:	9c 91       	ld	r25, X
    3d6a:	2e e3       	ldi	r18, 0x3E	; 62
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	40 e0       	ldi	r20, 0x00	; 0
    3d70:	50 e0       	ldi	r21, 0x00	; 0
    3d72:	bc 01       	movw	r22, r24
    3d74:	cf 01       	movw	r24, r30
    3d76:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <m2m_memcpy>
    3d7a:	0a c0       	rjmp	.+20     	; 0x3d90 <m2m_wifi_connect_sc+0x3de>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    3d7c:	ce 01       	movw	r24, r28
    3d7e:	84 58       	subi	r24, 0x84	; 132
    3d80:	9f 4f       	sbci	r25, 0xFF	; 255
    3d82:	fc 01       	movw	r30, r24
    3d84:	80 81       	ld	r24, Z
    3d86:	81 30       	cpi	r24, 0x01	; 1
    3d88:	19 f0       	breq	.+6      	; 0x3d90 <m2m_wifi_connect_sc+0x3de>

	}
	else
	{
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
    3d8a:	84 ef       	ldi	r24, 0xF4	; 244
    3d8c:	89 83       	std	Y+1, r24	; 0x01
		goto ERR1;
    3d8e:	10 c0       	rjmp	.+32     	; 0x3db0 <m2m_wifi_connect_sc+0x3fe>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    3d90:	ce 01       	movw	r24, r28
    3d92:	0d 96       	adiw	r24, 0x0d	; 13
    3d94:	c1 2c       	mov	r12, r1
    3d96:	d1 2c       	mov	r13, r1
    3d98:	e1 2c       	mov	r14, r1
    3d9a:	f1 2c       	mov	r15, r1
    3d9c:	00 e0       	ldi	r16, 0x00	; 0
    3d9e:	10 e0       	ldi	r17, 0x00	; 0
    3da0:	2c e6       	ldi	r18, 0x6C	; 108
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	ac 01       	movw	r20, r24
    3da6:	68 e2       	ldi	r22, 0x28	; 40
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	0e 94 ed 14 	call	0x29da	; 0x29da <hif_send>
    3dae:	89 83       	std	Y+1, r24	; 0x01

ERR1:
	return ret;
    3db0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3db2:	cd 57       	subi	r28, 0x7D	; 125
    3db4:	df 4f       	sbci	r29, 0xFF	; 255
    3db6:	cd bf       	out	0x3d, r28	; 61
    3db8:	de bf       	out	0x3e, r29	; 62
    3dba:	df 91       	pop	r29
    3dbc:	cf 91       	pop	r28
    3dbe:	1f 91       	pop	r17
    3dc0:	0f 91       	pop	r16
    3dc2:	ff 90       	pop	r15
    3dc4:	ef 90       	pop	r14
    3dc6:	df 90       	pop	r13
    3dc8:	cf 90       	pop	r12
    3dca:	08 95       	ret

00003dcc <chip_apply_conf>:
{
	sint8 ret = M2M_SUCCESS;
	ret = nm_write_reg(NMI_GLB_RESET_0, 0);
	nm_bsp_sleep(50);
	return ret;
}
    3dcc:	cf 93       	push	r28
    3dce:	df 93       	push	r29
    3dd0:	cd b7       	in	r28, 0x3d	; 61
    3dd2:	de b7       	in	r29, 0x3e	; 62
    3dd4:	2d 97       	sbiw	r28, 0x0d	; 13
    3dd6:	cd bf       	out	0x3d, r28	; 61
    3dd8:	de bf       	out	0x3e, r29	; 62
    3dda:	6a 87       	std	Y+10, r22	; 0x0a
    3ddc:	7b 87       	std	Y+11, r23	; 0x0b
    3dde:	8c 87       	std	Y+12, r24	; 0x0c
    3de0:	9d 87       	std	Y+13, r25	; 0x0d
    3de2:	19 82       	std	Y+1, r1	; 0x01
    3de4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3de6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3de8:	ac 85       	ldd	r26, Y+12	; 0x0c
    3dea:	bd 85       	ldd	r27, Y+13	; 0x0d
    3dec:	8a 83       	std	Y+2, r24	; 0x02
    3dee:	9b 83       	std	Y+3, r25	; 0x03
    3df0:	ac 83       	std	Y+4, r26	; 0x04
    3df2:	bd 83       	std	Y+5, r27	; 0x05
    3df4:	8a 81       	ldd	r24, Y+2	; 0x02
    3df6:	9b 81       	ldd	r25, Y+3	; 0x03
    3df8:	ac 81       	ldd	r26, Y+4	; 0x04
    3dfa:	bd 81       	ldd	r27, Y+5	; 0x05
    3dfc:	91 60       	ori	r25, 0x01	; 1
    3dfe:	8a 83       	std	Y+2, r24	; 0x02
    3e00:	9b 83       	std	Y+3, r25	; 0x03
    3e02:	ac 83       	std	Y+4, r26	; 0x04
    3e04:	bd 83       	std	Y+5, r27	; 0x05
    3e06:	8a 81       	ldd	r24, Y+2	; 0x02
    3e08:	9b 81       	ldd	r25, Y+3	; 0x03
    3e0a:	ac 81       	ldd	r26, Y+4	; 0x04
    3e0c:	bd 81       	ldd	r27, Y+5	; 0x05
    3e0e:	9c 01       	movw	r18, r24
    3e10:	ad 01       	movw	r20, r26
    3e12:	60 ea       	ldi	r22, 0xA0	; 160
    3e14:	74 e1       	ldi	r23, 0x14	; 20
    3e16:	80 e0       	ldi	r24, 0x00	; 0
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    3e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e20:	9b 81       	ldd	r25, Y+3	; 0x03
    3e22:	ac 81       	ldd	r26, Y+4	; 0x04
    3e24:	bd 81       	ldd	r27, Y+5	; 0x05
    3e26:	89 2b       	or	r24, r25
    3e28:	8a 2b       	or	r24, r26
    3e2a:	8b 2b       	or	r24, r27
    3e2c:	f9 f0       	breq	.+62     	; 0x3e6c <chip_apply_conf+0xa0>
    3e2e:	1e 82       	std	Y+6, r1	; 0x06
    3e30:	1f 82       	std	Y+7, r1	; 0x07
    3e32:	18 86       	std	Y+8, r1	; 0x08
    3e34:	19 86       	std	Y+9, r1	; 0x09
    3e36:	ce 01       	movw	r24, r28
    3e38:	06 96       	adiw	r24, 0x06	; 6
    3e3a:	ac 01       	movw	r20, r24
    3e3c:	60 ea       	ldi	r22, 0xA0	; 160
    3e3e:	74 e1       	ldi	r23, 0x14	; 20
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    3e48:	89 83       	std	Y+1, r24	; 0x01
    3e4a:	89 81       	ldd	r24, Y+1	; 0x01
    3e4c:	88 23       	and	r24, r24
    3e4e:	d9 f6       	brne	.-74     	; 0x3e06 <chip_apply_conf+0x3a>
    3e50:	2e 81       	ldd	r18, Y+6	; 0x06
    3e52:	3f 81       	ldd	r19, Y+7	; 0x07
    3e54:	48 85       	ldd	r20, Y+8	; 0x08
    3e56:	59 85       	ldd	r21, Y+9	; 0x09
    3e58:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e5c:	ac 81       	ldd	r26, Y+4	; 0x04
    3e5e:	bd 81       	ldd	r27, Y+5	; 0x05
    3e60:	28 17       	cp	r18, r24
    3e62:	39 07       	cpc	r19, r25
    3e64:	4a 07       	cpc	r20, r26
    3e66:	5b 07       	cpc	r21, r27
    3e68:	19 f0       	breq	.+6      	; 0x3e70 <chip_apply_conf+0xa4>
    3e6a:	cd cf       	rjmp	.-102    	; 0x3e06 <chip_apply_conf+0x3a>
    3e6c:	00 00       	nop
    3e6e:	01 c0       	rjmp	.+2      	; 0x3e72 <chip_apply_conf+0xa6>
    3e70:	00 00       	nop
    3e72:	80 e0       	ldi	r24, 0x00	; 0
    3e74:	2d 96       	adiw	r28, 0x0d	; 13
    3e76:	cd bf       	out	0x3d, r28	; 61
    3e78:	de bf       	out	0x3e, r29	; 62
    3e7a:	df 91       	pop	r29
    3e7c:	cf 91       	pop	r28
    3e7e:	08 95       	ret

00003e80 <enable_interrupts>:
    3e80:	cf 93       	push	r28
    3e82:	df 93       	push	r29
    3e84:	cd b7       	in	r28, 0x3d	; 61
    3e86:	de b7       	in	r29, 0x3e	; 62
    3e88:	25 97       	sbiw	r28, 0x05	; 5
    3e8a:	cd bf       	out	0x3d, r28	; 61
    3e8c:	de bf       	out	0x3e, r29	; 62
    3e8e:	1a 82       	std	Y+2, r1	; 0x02
    3e90:	1b 82       	std	Y+3, r1	; 0x03
    3e92:	1c 82       	std	Y+4, r1	; 0x04
    3e94:	1d 82       	std	Y+5, r1	; 0x05
    3e96:	19 82       	std	Y+1, r1	; 0x01
    3e98:	ce 01       	movw	r24, r28
    3e9a:	02 96       	adiw	r24, 0x02	; 2
    3e9c:	ac 01       	movw	r20, r24
    3e9e:	68 e0       	ldi	r22, 0x08	; 8
    3ea0:	74 e1       	ldi	r23, 0x14	; 20
    3ea2:	80 e0       	ldi	r24, 0x00	; 0
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    3eaa:	89 83       	std	Y+1, r24	; 0x01
    3eac:	89 81       	ldd	r24, Y+1	; 0x01
    3eae:	88 23       	and	r24, r24
    3eb0:	e9 f5       	brne	.+122    	; 0x3f2c <enable_interrupts+0xac>
    3eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    3eb6:	ac 81       	ldd	r26, Y+4	; 0x04
    3eb8:	bd 81       	ldd	r27, Y+5	; 0x05
    3eba:	91 60       	ori	r25, 0x01	; 1
    3ebc:	8a 83       	std	Y+2, r24	; 0x02
    3ebe:	9b 83       	std	Y+3, r25	; 0x03
    3ec0:	ac 83       	std	Y+4, r26	; 0x04
    3ec2:	bd 83       	std	Y+5, r27	; 0x05
    3ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ec8:	ac 81       	ldd	r26, Y+4	; 0x04
    3eca:	bd 81       	ldd	r27, Y+5	; 0x05
    3ecc:	9c 01       	movw	r18, r24
    3ece:	ad 01       	movw	r20, r26
    3ed0:	68 e0       	ldi	r22, 0x08	; 8
    3ed2:	74 e1       	ldi	r23, 0x14	; 20
    3ed4:	80 e0       	ldi	r24, 0x00	; 0
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    3edc:	89 83       	std	Y+1, r24	; 0x01
    3ede:	89 81       	ldd	r24, Y+1	; 0x01
    3ee0:	88 23       	and	r24, r24
    3ee2:	31 f5       	brne	.+76     	; 0x3f30 <enable_interrupts+0xb0>
    3ee4:	ce 01       	movw	r24, r28
    3ee6:	02 96       	adiw	r24, 0x02	; 2
    3ee8:	ac 01       	movw	r20, r24
    3eea:	60 e0       	ldi	r22, 0x00	; 0
    3eec:	7a e1       	ldi	r23, 0x1A	; 26
    3eee:	80 e0       	ldi	r24, 0x00	; 0
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    3ef6:	89 83       	std	Y+1, r24	; 0x01
    3ef8:	89 81       	ldd	r24, Y+1	; 0x01
    3efa:	88 23       	and	r24, r24
    3efc:	d9 f4       	brne	.+54     	; 0x3f34 <enable_interrupts+0xb4>
    3efe:	8a 81       	ldd	r24, Y+2	; 0x02
    3f00:	9b 81       	ldd	r25, Y+3	; 0x03
    3f02:	ac 81       	ldd	r26, Y+4	; 0x04
    3f04:	bd 81       	ldd	r27, Y+5	; 0x05
    3f06:	a1 60       	ori	r26, 0x01	; 1
    3f08:	8a 83       	std	Y+2, r24	; 0x02
    3f0a:	9b 83       	std	Y+3, r25	; 0x03
    3f0c:	ac 83       	std	Y+4, r26	; 0x04
    3f0e:	bd 83       	std	Y+5, r27	; 0x05
    3f10:	8a 81       	ldd	r24, Y+2	; 0x02
    3f12:	9b 81       	ldd	r25, Y+3	; 0x03
    3f14:	ac 81       	ldd	r26, Y+4	; 0x04
    3f16:	bd 81       	ldd	r27, Y+5	; 0x05
    3f18:	9c 01       	movw	r18, r24
    3f1a:	ad 01       	movw	r20, r26
    3f1c:	60 e0       	ldi	r22, 0x00	; 0
    3f1e:	7a e1       	ldi	r23, 0x1A	; 26
    3f20:	80 e0       	ldi	r24, 0x00	; 0
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    3f28:	89 83       	std	Y+1, r24	; 0x01
    3f2a:	05 c0       	rjmp	.+10     	; 0x3f36 <enable_interrupts+0xb6>
    3f2c:	00 00       	nop
    3f2e:	03 c0       	rjmp	.+6      	; 0x3f36 <enable_interrupts+0xb6>
    3f30:	00 00       	nop
    3f32:	01 c0       	rjmp	.+2      	; 0x3f36 <enable_interrupts+0xb6>
    3f34:	00 00       	nop
    3f36:	89 81       	ldd	r24, Y+1	; 0x01
    3f38:	25 96       	adiw	r28, 0x05	; 5
    3f3a:	cd bf       	out	0x3d, r28	; 61
    3f3c:	de bf       	out	0x3e, r29	; 62
    3f3e:	df 91       	pop	r29
    3f40:	cf 91       	pop	r28
    3f42:	08 95       	ret

00003f44 <nmi_get_chipid>:
    3f44:	cf 93       	push	r28
    3f46:	df 93       	push	r29
    3f48:	00 d0       	rcall	.+0      	; 0x3f4a <nmi_get_chipid+0x6>
    3f4a:	00 d0       	rcall	.+0      	; 0x3f4c <nmi_get_chipid+0x8>
    3f4c:	cd b7       	in	r28, 0x3d	; 61
    3f4e:	de b7       	in	r29, 0x3e	; 62
    3f50:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <chipid.2327>
    3f54:	90 91 12 2e 	lds	r25, 0x2E12	; 0x802e12 <chipid.2327+0x1>
    3f58:	a0 91 13 2e 	lds	r26, 0x2E13	; 0x802e13 <chipid.2327+0x2>
    3f5c:	b0 91 14 2e 	lds	r27, 0x2E14	; 0x802e14 <chipid.2327+0x3>
    3f60:	89 2b       	or	r24, r25
    3f62:	8a 2b       	or	r24, r26
    3f64:	8b 2b       	or	r24, r27
    3f66:	09 f0       	breq	.+2      	; 0x3f6a <nmi_get_chipid+0x26>
    3f68:	cd c0       	rjmp	.+410    	; 0x4104 <__RODATA_PM_OFFSET__+0x104>
    3f6a:	41 e1       	ldi	r20, 0x11	; 17
    3f6c:	5e e2       	ldi	r21, 0x2E	; 46
    3f6e:	60 e0       	ldi	r22, 0x00	; 0
    3f70:	70 e1       	ldi	r23, 0x10	; 16
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    3f7a:	88 23       	and	r24, r24
    3f7c:	61 f0       	breq	.+24     	; 0x3f96 <nmi_get_chipid+0x52>
    3f7e:	10 92 11 2e 	sts	0x2E11, r1	; 0x802e11 <chipid.2327>
    3f82:	10 92 12 2e 	sts	0x2E12, r1	; 0x802e12 <chipid.2327+0x1>
    3f86:	10 92 13 2e 	sts	0x2E13, r1	; 0x802e13 <chipid.2327+0x2>
    3f8a:	10 92 14 2e 	sts	0x2E14, r1	; 0x802e14 <chipid.2327+0x3>
    3f8e:	80 e0       	ldi	r24, 0x00	; 0
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	dc 01       	movw	r26, r24
    3f94:	bf c0       	rjmp	.+382    	; 0x4114 <__RODATA_PM_OFFSET__+0x114>
    3f96:	ce 01       	movw	r24, r28
    3f98:	01 96       	adiw	r24, 0x01	; 1
    3f9a:	ac 01       	movw	r20, r24
    3f9c:	64 ef       	ldi	r22, 0xF4	; 244
    3f9e:	73 e1       	ldi	r23, 0x13	; 19
    3fa0:	80 e0       	ldi	r24, 0x00	; 0
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    3fa8:	88 23       	and	r24, r24
    3faa:	61 f0       	breq	.+24     	; 0x3fc4 <nmi_get_chipid+0x80>
    3fac:	10 92 11 2e 	sts	0x2E11, r1	; 0x802e11 <chipid.2327>
    3fb0:	10 92 12 2e 	sts	0x2E12, r1	; 0x802e12 <chipid.2327+0x1>
    3fb4:	10 92 13 2e 	sts	0x2E13, r1	; 0x802e13 <chipid.2327+0x2>
    3fb8:	10 92 14 2e 	sts	0x2E14, r1	; 0x802e14 <chipid.2327+0x3>
    3fbc:	80 e0       	ldi	r24, 0x00	; 0
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	a8 c0       	rjmp	.+336    	; 0x4114 <__RODATA_PM_OFFSET__+0x114>
    3fc4:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <chipid.2327>
    3fc8:	90 91 12 2e 	lds	r25, 0x2E12	; 0x802e12 <chipid.2327+0x1>
    3fcc:	a0 91 13 2e 	lds	r26, 0x2E13	; 0x802e13 <chipid.2327+0x2>
    3fd0:	b0 91 14 2e 	lds	r27, 0x2E14	; 0x802e14 <chipid.2327+0x3>
    3fd4:	80 3a       	cpi	r24, 0xA0	; 160
    3fd6:	92 40       	sbci	r25, 0x02	; 2
    3fd8:	a0 41       	sbci	r26, 0x10	; 16
    3fda:	b1 05       	cpc	r27, r1
    3fdc:	b1 f4       	brne	.+44     	; 0x400a <__RODATA_PM_OFFSET__+0xa>
    3fde:	89 81       	ldd	r24, Y+1	; 0x01
    3fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe2:	ab 81       	ldd	r26, Y+3	; 0x03
    3fe4:	bc 81       	ldd	r27, Y+4	; 0x04
    3fe6:	01 97       	sbiw	r24, 0x01	; 1
    3fe8:	a1 05       	cpc	r26, r1
    3fea:	b1 05       	cpc	r27, r1
    3fec:	09 f4       	brne	.+2      	; 0x3ff0 <nmi_get_chipid+0xac>
    3fee:	68 c0       	rjmp	.+208    	; 0x40c0 <__RODATA_PM_OFFSET__+0xc0>
    3ff0:	81 ea       	ldi	r24, 0xA1	; 161
    3ff2:	92 e0       	ldi	r25, 0x02	; 2
    3ff4:	a0 e1       	ldi	r26, 0x10	; 16
    3ff6:	b0 e0       	ldi	r27, 0x00	; 0
    3ff8:	80 93 11 2e 	sts	0x2E11, r24	; 0x802e11 <chipid.2327>
    3ffc:	90 93 12 2e 	sts	0x2E12, r25	; 0x802e12 <chipid.2327+0x1>
    4000:	a0 93 13 2e 	sts	0x2E13, r26	; 0x802e13 <chipid.2327+0x2>
    4004:	b0 93 14 2e 	sts	0x2E14, r27	; 0x802e14 <chipid.2327+0x3>
    4008:	5b c0       	rjmp	.+182    	; 0x40c0 <__RODATA_PM_OFFSET__+0xc0>
    400a:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <chipid.2327>
    400e:	90 91 12 2e 	lds	r25, 0x2E12	; 0x802e12 <chipid.2327+0x1>
    4012:	a0 91 13 2e 	lds	r26, 0x2E13	; 0x802e13 <chipid.2327+0x2>
    4016:	b0 91 14 2e 	lds	r27, 0x2E14	; 0x802e14 <chipid.2327+0x3>
    401a:	80 3b       	cpi	r24, 0xB0	; 176
    401c:	92 40       	sbci	r25, 0x02	; 2
    401e:	a0 41       	sbci	r26, 0x10	; 16
    4020:	b1 05       	cpc	r27, r1
    4022:	59 f5       	brne	.+86     	; 0x407a <__RODATA_PM_OFFSET__+0x7a>
    4024:	89 81       	ldd	r24, Y+1	; 0x01
    4026:	9a 81       	ldd	r25, Y+2	; 0x02
    4028:	ab 81       	ldd	r26, Y+3	; 0x03
    402a:	bc 81       	ldd	r27, Y+4	; 0x04
    402c:	03 97       	sbiw	r24, 0x03	; 3
    402e:	a1 05       	cpc	r26, r1
    4030:	b1 05       	cpc	r27, r1
    4032:	09 f4       	brne	.+2      	; 0x4036 <__RODATA_PM_OFFSET__+0x36>
    4034:	45 c0       	rjmp	.+138    	; 0x40c0 <__RODATA_PM_OFFSET__+0xc0>
    4036:	89 81       	ldd	r24, Y+1	; 0x01
    4038:	9a 81       	ldd	r25, Y+2	; 0x02
    403a:	ab 81       	ldd	r26, Y+3	; 0x03
    403c:	bc 81       	ldd	r27, Y+4	; 0x04
    403e:	04 97       	sbiw	r24, 0x04	; 4
    4040:	a1 05       	cpc	r26, r1
    4042:	b1 05       	cpc	r27, r1
    4044:	69 f4       	brne	.+26     	; 0x4060 <__RODATA_PM_OFFSET__+0x60>
    4046:	81 eb       	ldi	r24, 0xB1	; 177
    4048:	92 e0       	ldi	r25, 0x02	; 2
    404a:	a0 e1       	ldi	r26, 0x10	; 16
    404c:	b0 e0       	ldi	r27, 0x00	; 0
    404e:	80 93 11 2e 	sts	0x2E11, r24	; 0x802e11 <chipid.2327>
    4052:	90 93 12 2e 	sts	0x2E12, r25	; 0x802e12 <chipid.2327+0x1>
    4056:	a0 93 13 2e 	sts	0x2E13, r26	; 0x802e13 <chipid.2327+0x2>
    405a:	b0 93 14 2e 	sts	0x2E14, r27	; 0x802e14 <chipid.2327+0x3>
    405e:	30 c0       	rjmp	.+96     	; 0x40c0 <__RODATA_PM_OFFSET__+0xc0>
    4060:	82 eb       	ldi	r24, 0xB2	; 178
    4062:	92 e0       	ldi	r25, 0x02	; 2
    4064:	a0 e1       	ldi	r26, 0x10	; 16
    4066:	b0 e0       	ldi	r27, 0x00	; 0
    4068:	80 93 11 2e 	sts	0x2E11, r24	; 0x802e11 <chipid.2327>
    406c:	90 93 12 2e 	sts	0x2E12, r25	; 0x802e12 <chipid.2327+0x1>
    4070:	a0 93 13 2e 	sts	0x2E13, r26	; 0x802e13 <chipid.2327+0x2>
    4074:	b0 93 14 2e 	sts	0x2E14, r27	; 0x802e14 <chipid.2327+0x3>
    4078:	23 c0       	rjmp	.+70     	; 0x40c0 <__RODATA_PM_OFFSET__+0xc0>
    407a:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <chipid.2327>
    407e:	90 91 12 2e 	lds	r25, 0x2E12	; 0x802e12 <chipid.2327+0x1>
    4082:	a0 91 13 2e 	lds	r26, 0x2E13	; 0x802e13 <chipid.2327+0x2>
    4086:	b0 91 14 2e 	lds	r27, 0x2E14	; 0x802e14 <chipid.2327+0x3>
    408a:	80 3f       	cpi	r24, 0xF0	; 240
    408c:	91 05       	cpc	r25, r1
    408e:	a0 41       	sbci	r26, 0x10	; 16
    4090:	b1 05       	cpc	r27, r1
    4092:	b1 f4       	brne	.+44     	; 0x40c0 <__RODATA_PM_OFFSET__+0xc0>
    4094:	41 e1       	ldi	r20, 0x11	; 17
    4096:	5e e2       	ldi	r21, 0x2E	; 46
    4098:	60 e0       	ldi	r22, 0x00	; 0
    409a:	70 e0       	ldi	r23, 0x00	; 0
    409c:	8b e3       	ldi	r24, 0x3B	; 59
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    40a4:	88 23       	and	r24, r24
    40a6:	61 f0       	breq	.+24     	; 0x40c0 <__RODATA_PM_OFFSET__+0xc0>
    40a8:	10 92 11 2e 	sts	0x2E11, r1	; 0x802e11 <chipid.2327>
    40ac:	10 92 12 2e 	sts	0x2E12, r1	; 0x802e12 <chipid.2327+0x1>
    40b0:	10 92 13 2e 	sts	0x2E13, r1	; 0x802e13 <chipid.2327+0x2>
    40b4:	10 92 14 2e 	sts	0x2E14, r1	; 0x802e14 <chipid.2327+0x3>
    40b8:	80 e0       	ldi	r24, 0x00	; 0
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	dc 01       	movw	r26, r24
    40be:	2a c0       	rjmp	.+84     	; 0x4114 <__RODATA_PM_OFFSET__+0x114>
    40c0:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <chipid.2327>
    40c4:	90 91 12 2e 	lds	r25, 0x2E12	; 0x802e12 <chipid.2327+0x1>
    40c8:	a0 91 13 2e 	lds	r26, 0x2E13	; 0x802e13 <chipid.2327+0x2>
    40cc:	b0 91 14 2e 	lds	r27, 0x2E14	; 0x802e14 <chipid.2327+0x3>
    40d0:	a0 7f       	andi	r26, 0xF0	; 240
    40d2:	80 93 11 2e 	sts	0x2E11, r24	; 0x802e11 <chipid.2327>
    40d6:	90 93 12 2e 	sts	0x2E12, r25	; 0x802e12 <chipid.2327+0x1>
    40da:	a0 93 13 2e 	sts	0x2E13, r26	; 0x802e13 <chipid.2327+0x2>
    40de:	b0 93 14 2e 	sts	0x2E14, r27	; 0x802e14 <chipid.2327+0x3>
    40e2:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <chipid.2327>
    40e6:	90 91 12 2e 	lds	r25, 0x2E12	; 0x802e12 <chipid.2327+0x1>
    40ea:	a0 91 13 2e 	lds	r26, 0x2E13	; 0x802e13 <chipid.2327+0x2>
    40ee:	b0 91 14 2e 	lds	r27, 0x2E14	; 0x802e14 <chipid.2327+0x3>
    40f2:	a5 60       	ori	r26, 0x05	; 5
    40f4:	80 93 11 2e 	sts	0x2E11, r24	; 0x802e11 <chipid.2327>
    40f8:	90 93 12 2e 	sts	0x2E12, r25	; 0x802e12 <chipid.2327+0x1>
    40fc:	a0 93 13 2e 	sts	0x2E13, r26	; 0x802e13 <chipid.2327+0x2>
    4100:	b0 93 14 2e 	sts	0x2E14, r27	; 0x802e14 <chipid.2327+0x3>
    4104:	80 91 11 2e 	lds	r24, 0x2E11	; 0x802e11 <chipid.2327>
    4108:	90 91 12 2e 	lds	r25, 0x2E12	; 0x802e12 <chipid.2327+0x1>
    410c:	a0 91 13 2e 	lds	r26, 0x2E13	; 0x802e13 <chipid.2327+0x2>
    4110:	b0 91 14 2e 	lds	r27, 0x2E14	; 0x802e14 <chipid.2327+0x3>
    4114:	bc 01       	movw	r22, r24
    4116:	cd 01       	movw	r24, r26
    4118:	24 96       	adiw	r28, 0x04	; 4
    411a:	cd bf       	out	0x3d, r28	; 61
    411c:	de bf       	out	0x3e, r29	; 62
    411e:	df 91       	pop	r29
    4120:	cf 91       	pop	r28
    4122:	08 95       	ret

00004124 <chip_sleep>:
    4124:	cf 93       	push	r28
    4126:	df 93       	push	r29
    4128:	cd b7       	in	r28, 0x3d	; 61
    412a:	de b7       	in	r29, 0x3e	; 62
    412c:	25 97       	sbiw	r28, 0x05	; 5
    412e:	cd bf       	out	0x3d, r28	; 61
    4130:	de bf       	out	0x3e, r29	; 62
    4132:	19 82       	std	Y+1, r1	; 0x01
    4134:	ce 01       	movw	r24, r28
    4136:	02 96       	adiw	r24, 0x02	; 2
    4138:	ac 01       	movw	r20, r24
    413a:	60 e1       	ldi	r22, 0x10	; 16
    413c:	70 e0       	ldi	r23, 0x00	; 0
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    4146:	89 83       	std	Y+1, r24	; 0x01
    4148:	89 81       	ldd	r24, Y+1	; 0x01
    414a:	88 23       	and	r24, r24
    414c:	09 f0       	breq	.+2      	; 0x4150 <chip_sleep+0x2c>
    414e:	71 c0       	rjmp	.+226    	; 0x4232 <chip_sleep+0x10e>
    4150:	8a 81       	ldd	r24, Y+2	; 0x02
    4152:	9b 81       	ldd	r25, Y+3	; 0x03
    4154:	ac 81       	ldd	r26, Y+4	; 0x04
    4156:	bd 81       	ldd	r27, Y+5	; 0x05
    4158:	81 70       	andi	r24, 0x01	; 1
    415a:	99 27       	eor	r25, r25
    415c:	aa 27       	eor	r26, r26
    415e:	bb 27       	eor	r27, r27
    4160:	89 2b       	or	r24, r25
    4162:	8a 2b       	or	r24, r26
    4164:	8b 2b       	or	r24, r27
    4166:	09 f0       	breq	.+2      	; 0x416a <chip_sleep+0x46>
    4168:	e5 cf       	rjmp	.-54     	; 0x4134 <chip_sleep+0x10>
    416a:	00 00       	nop
    416c:	ce 01       	movw	r24, r28
    416e:	02 96       	adiw	r24, 0x02	; 2
    4170:	ac 01       	movw	r20, r24
    4172:	61 e0       	ldi	r22, 0x01	; 1
    4174:	70 e0       	ldi	r23, 0x00	; 0
    4176:	80 e0       	ldi	r24, 0x00	; 0
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    417e:	89 83       	std	Y+1, r24	; 0x01
    4180:	89 81       	ldd	r24, Y+1	; 0x01
    4182:	88 23       	and	r24, r24
    4184:	09 f0       	breq	.+2      	; 0x4188 <chip_sleep+0x64>
    4186:	57 c0       	rjmp	.+174    	; 0x4236 <chip_sleep+0x112>
    4188:	8a 81       	ldd	r24, Y+2	; 0x02
    418a:	9b 81       	ldd	r25, Y+3	; 0x03
    418c:	ac 81       	ldd	r26, Y+4	; 0x04
    418e:	bd 81       	ldd	r27, Y+5	; 0x05
    4190:	82 70       	andi	r24, 0x02	; 2
    4192:	99 27       	eor	r25, r25
    4194:	aa 27       	eor	r26, r26
    4196:	bb 27       	eor	r27, r27
    4198:	89 2b       	or	r24, r25
    419a:	8a 2b       	or	r24, r26
    419c:	8b 2b       	or	r24, r27
    419e:	c9 f0       	breq	.+50     	; 0x41d2 <chip_sleep+0xae>
    41a0:	8a 81       	ldd	r24, Y+2	; 0x02
    41a2:	9b 81       	ldd	r25, Y+3	; 0x03
    41a4:	ac 81       	ldd	r26, Y+4	; 0x04
    41a6:	bd 81       	ldd	r27, Y+5	; 0x05
    41a8:	8d 7f       	andi	r24, 0xFD	; 253
    41aa:	8a 83       	std	Y+2, r24	; 0x02
    41ac:	9b 83       	std	Y+3, r25	; 0x03
    41ae:	ac 83       	std	Y+4, r26	; 0x04
    41b0:	bd 83       	std	Y+5, r27	; 0x05
    41b2:	8a 81       	ldd	r24, Y+2	; 0x02
    41b4:	9b 81       	ldd	r25, Y+3	; 0x03
    41b6:	ac 81       	ldd	r26, Y+4	; 0x04
    41b8:	bd 81       	ldd	r27, Y+5	; 0x05
    41ba:	9c 01       	movw	r18, r24
    41bc:	ad 01       	movw	r20, r26
    41be:	61 e0       	ldi	r22, 0x01	; 1
    41c0:	70 e0       	ldi	r23, 0x00	; 0
    41c2:	80 e0       	ldi	r24, 0x00	; 0
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    41ca:	89 83       	std	Y+1, r24	; 0x01
    41cc:	89 81       	ldd	r24, Y+1	; 0x01
    41ce:	88 23       	and	r24, r24
    41d0:	a1 f5       	brne	.+104    	; 0x423a <chip_sleep+0x116>
    41d2:	ce 01       	movw	r24, r28
    41d4:	02 96       	adiw	r24, 0x02	; 2
    41d6:	ac 01       	movw	r20, r24
    41d8:	6b e0       	ldi	r22, 0x0B	; 11
    41da:	70 e0       	ldi	r23, 0x00	; 0
    41dc:	80 e0       	ldi	r24, 0x00	; 0
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    41e4:	89 83       	std	Y+1, r24	; 0x01
    41e6:	89 81       	ldd	r24, Y+1	; 0x01
    41e8:	88 23       	and	r24, r24
    41ea:	49 f5       	brne	.+82     	; 0x423e <chip_sleep+0x11a>
    41ec:	8a 81       	ldd	r24, Y+2	; 0x02
    41ee:	9b 81       	ldd	r25, Y+3	; 0x03
    41f0:	ac 81       	ldd	r26, Y+4	; 0x04
    41f2:	bd 81       	ldd	r27, Y+5	; 0x05
    41f4:	81 70       	andi	r24, 0x01	; 1
    41f6:	99 27       	eor	r25, r25
    41f8:	aa 27       	eor	r26, r26
    41fa:	bb 27       	eor	r27, r27
    41fc:	89 2b       	or	r24, r25
    41fe:	8a 2b       	or	r24, r26
    4200:	8b 2b       	or	r24, r27
    4202:	f1 f0       	breq	.+60     	; 0x4240 <chip_sleep+0x11c>
    4204:	8a 81       	ldd	r24, Y+2	; 0x02
    4206:	9b 81       	ldd	r25, Y+3	; 0x03
    4208:	ac 81       	ldd	r26, Y+4	; 0x04
    420a:	bd 81       	ldd	r27, Y+5	; 0x05
    420c:	8e 7f       	andi	r24, 0xFE	; 254
    420e:	8a 83       	std	Y+2, r24	; 0x02
    4210:	9b 83       	std	Y+3, r25	; 0x03
    4212:	ac 83       	std	Y+4, r26	; 0x04
    4214:	bd 83       	std	Y+5, r27	; 0x05
    4216:	8a 81       	ldd	r24, Y+2	; 0x02
    4218:	9b 81       	ldd	r25, Y+3	; 0x03
    421a:	ac 81       	ldd	r26, Y+4	; 0x04
    421c:	bd 81       	ldd	r27, Y+5	; 0x05
    421e:	9c 01       	movw	r18, r24
    4220:	ad 01       	movw	r20, r26
    4222:	6b e0       	ldi	r22, 0x0B	; 11
    4224:	70 e0       	ldi	r23, 0x00	; 0
    4226:	80 e0       	ldi	r24, 0x00	; 0
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    422e:	89 83       	std	Y+1, r24	; 0x01
    4230:	07 c0       	rjmp	.+14     	; 0x4240 <chip_sleep+0x11c>
    4232:	00 00       	nop
    4234:	05 c0       	rjmp	.+10     	; 0x4240 <chip_sleep+0x11c>
    4236:	00 00       	nop
    4238:	03 c0       	rjmp	.+6      	; 0x4240 <chip_sleep+0x11c>
    423a:	00 00       	nop
    423c:	01 c0       	rjmp	.+2      	; 0x4240 <chip_sleep+0x11c>
    423e:	00 00       	nop
    4240:	89 81       	ldd	r24, Y+1	; 0x01
    4242:	25 96       	adiw	r28, 0x05	; 5
    4244:	cd bf       	out	0x3d, r28	; 61
    4246:	de bf       	out	0x3e, r29	; 62
    4248:	df 91       	pop	r29
    424a:	cf 91       	pop	r28
    424c:	08 95       	ret

0000424e <chip_wake>:
    424e:	cf 93       	push	r28
    4250:	df 93       	push	r29
    4252:	cd b7       	in	r28, 0x3d	; 61
    4254:	de b7       	in	r29, 0x3e	; 62
    4256:	2d 97       	sbiw	r28, 0x0d	; 13
    4258:	cd bf       	out	0x3d, r28	; 61
    425a:	de bf       	out	0x3e, r29	; 62
    425c:	19 82       	std	Y+1, r1	; 0x01
    425e:	1e 82       	std	Y+6, r1	; 0x06
    4260:	1f 82       	std	Y+7, r1	; 0x07
    4262:	18 86       	std	Y+8, r1	; 0x08
    4264:	19 86       	std	Y+9, r1	; 0x09
    4266:	1a 86       	std	Y+10, r1	; 0x0a
    4268:	1b 86       	std	Y+11, r1	; 0x0b
    426a:	1c 86       	std	Y+12, r1	; 0x0c
    426c:	1d 86       	std	Y+13, r1	; 0x0d
    426e:	1a 82       	std	Y+2, r1	; 0x02
    4270:	1b 82       	std	Y+3, r1	; 0x03
    4272:	1c 82       	std	Y+4, r1	; 0x04
    4274:	1d 82       	std	Y+5, r1	; 0x05
    4276:	ce 01       	movw	r24, r28
    4278:	06 96       	adiw	r24, 0x06	; 6
    427a:	ac 01       	movw	r20, r24
    427c:	6b e0       	ldi	r22, 0x0B	; 11
    427e:	70 e0       	ldi	r23, 0x00	; 0
    4280:	80 e0       	ldi	r24, 0x00	; 0
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    4288:	89 83       	std	Y+1, r24	; 0x01
    428a:	89 81       	ldd	r24, Y+1	; 0x01
    428c:	88 23       	and	r24, r24
    428e:	09 f0       	breq	.+2      	; 0x4292 <chip_wake+0x44>
    4290:	83 c0       	rjmp	.+262    	; 0x4398 <chip_wake+0x14a>
    4292:	8e 81       	ldd	r24, Y+6	; 0x06
    4294:	9f 81       	ldd	r25, Y+7	; 0x07
    4296:	a8 85       	ldd	r26, Y+8	; 0x08
    4298:	b9 85       	ldd	r27, Y+9	; 0x09
    429a:	81 70       	andi	r24, 0x01	; 1
    429c:	99 27       	eor	r25, r25
    429e:	aa 27       	eor	r26, r26
    42a0:	bb 27       	eor	r27, r27
    42a2:	89 2b       	or	r24, r25
    42a4:	8a 2b       	or	r24, r26
    42a6:	8b 2b       	or	r24, r27
    42a8:	91 f4       	brne	.+36     	; 0x42ce <chip_wake+0x80>
    42aa:	8e 81       	ldd	r24, Y+6	; 0x06
    42ac:	9f 81       	ldd	r25, Y+7	; 0x07
    42ae:	a8 85       	ldd	r26, Y+8	; 0x08
    42b0:	b9 85       	ldd	r27, Y+9	; 0x09
    42b2:	81 60       	ori	r24, 0x01	; 1
    42b4:	9c 01       	movw	r18, r24
    42b6:	ad 01       	movw	r20, r26
    42b8:	6b e0       	ldi	r22, 0x0B	; 11
    42ba:	70 e0       	ldi	r23, 0x00	; 0
    42bc:	80 e0       	ldi	r24, 0x00	; 0
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    42c4:	89 83       	std	Y+1, r24	; 0x01
    42c6:	89 81       	ldd	r24, Y+1	; 0x01
    42c8:	88 23       	and	r24, r24
    42ca:	09 f0       	breq	.+2      	; 0x42ce <chip_wake+0x80>
    42cc:	67 c0       	rjmp	.+206    	; 0x439c <chip_wake+0x14e>
    42ce:	ce 01       	movw	r24, r28
    42d0:	06 96       	adiw	r24, 0x06	; 6
    42d2:	ac 01       	movw	r20, r24
    42d4:	61 e0       	ldi	r22, 0x01	; 1
    42d6:	70 e0       	ldi	r23, 0x00	; 0
    42d8:	80 e0       	ldi	r24, 0x00	; 0
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    42e0:	89 83       	std	Y+1, r24	; 0x01
    42e2:	89 81       	ldd	r24, Y+1	; 0x01
    42e4:	88 23       	and	r24, r24
    42e6:	09 f0       	breq	.+2      	; 0x42ea <chip_wake+0x9c>
    42e8:	5b c0       	rjmp	.+182    	; 0x43a0 <chip_wake+0x152>
    42ea:	8e 81       	ldd	r24, Y+6	; 0x06
    42ec:	9f 81       	ldd	r25, Y+7	; 0x07
    42ee:	a8 85       	ldd	r26, Y+8	; 0x08
    42f0:	b9 85       	ldd	r27, Y+9	; 0x09
    42f2:	82 70       	andi	r24, 0x02	; 2
    42f4:	99 27       	eor	r25, r25
    42f6:	aa 27       	eor	r26, r26
    42f8:	bb 27       	eor	r27, r27
    42fa:	89 2b       	or	r24, r25
    42fc:	8a 2b       	or	r24, r26
    42fe:	8b 2b       	or	r24, r27
    4300:	91 f4       	brne	.+36     	; 0x4326 <chip_wake+0xd8>
    4302:	8e 81       	ldd	r24, Y+6	; 0x06
    4304:	9f 81       	ldd	r25, Y+7	; 0x07
    4306:	a8 85       	ldd	r26, Y+8	; 0x08
    4308:	b9 85       	ldd	r27, Y+9	; 0x09
    430a:	82 60       	ori	r24, 0x02	; 2
    430c:	9c 01       	movw	r18, r24
    430e:	ad 01       	movw	r20, r26
    4310:	61 e0       	ldi	r22, 0x01	; 1
    4312:	70 e0       	ldi	r23, 0x00	; 0
    4314:	80 e0       	ldi	r24, 0x00	; 0
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    431c:	89 83       	std	Y+1, r24	; 0x01
    431e:	89 81       	ldd	r24, Y+1	; 0x01
    4320:	88 23       	and	r24, r24
    4322:	09 f0       	breq	.+2      	; 0x4326 <chip_wake+0xd8>
    4324:	3f c0       	rjmp	.+126    	; 0x43a4 <chip_wake+0x156>
    4326:	ce 01       	movw	r24, r28
    4328:	0a 96       	adiw	r24, 0x0a	; 10
    432a:	ac 01       	movw	r20, r24
    432c:	6f e0       	ldi	r22, 0x0F	; 15
    432e:	70 e0       	ldi	r23, 0x00	; 0
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    4338:	89 83       	std	Y+1, r24	; 0x01
    433a:	89 81       	ldd	r24, Y+1	; 0x01
    433c:	88 23       	and	r24, r24
    433e:	a1 f5       	brne	.+104    	; 0x43a8 <chip_wake+0x15a>
    4340:	8a 85       	ldd	r24, Y+10	; 0x0a
    4342:	9b 85       	ldd	r25, Y+11	; 0x0b
    4344:	ac 85       	ldd	r26, Y+12	; 0x0c
    4346:	bd 85       	ldd	r27, Y+13	; 0x0d
    4348:	84 70       	andi	r24, 0x04	; 4
    434a:	99 27       	eor	r25, r25
    434c:	aa 27       	eor	r26, r26
    434e:	bb 27       	eor	r27, r27
    4350:	89 2b       	or	r24, r25
    4352:	8a 2b       	or	r24, r26
    4354:	8b 2b       	or	r24, r27
    4356:	e1 f4       	brne	.+56     	; 0x4390 <chip_wake+0x142>
    4358:	62 e0       	ldi	r22, 0x02	; 2
    435a:	70 e0       	ldi	r23, 0x00	; 0
    435c:	80 e0       	ldi	r24, 0x00	; 0
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	0e 94 e6 10 	call	0x21cc	; 0x21cc <nm_bsp_sleep>
    4364:	8a 81       	ldd	r24, Y+2	; 0x02
    4366:	9b 81       	ldd	r25, Y+3	; 0x03
    4368:	ac 81       	ldd	r26, Y+4	; 0x04
    436a:	bd 81       	ldd	r27, Y+5	; 0x05
    436c:	01 96       	adiw	r24, 0x01	; 1
    436e:	a1 1d       	adc	r26, r1
    4370:	b1 1d       	adc	r27, r1
    4372:	8a 83       	std	Y+2, r24	; 0x02
    4374:	9b 83       	std	Y+3, r25	; 0x03
    4376:	ac 83       	std	Y+4, r26	; 0x04
    4378:	bd 83       	std	Y+5, r27	; 0x05
    437a:	8a 81       	ldd	r24, Y+2	; 0x02
    437c:	9b 81       	ldd	r25, Y+3	; 0x03
    437e:	ac 81       	ldd	r26, Y+4	; 0x04
    4380:	bd 81       	ldd	r27, Y+5	; 0x05
    4382:	05 97       	sbiw	r24, 0x05	; 5
    4384:	a1 05       	cpc	r26, r1
    4386:	b1 05       	cpc	r27, r1
    4388:	70 f2       	brcs	.-100    	; 0x4326 <chip_wake+0xd8>
    438a:	8c ef       	ldi	r24, 0xFC	; 252
    438c:	89 83       	std	Y+1, r24	; 0x01
    438e:	0d c0       	rjmp	.+26     	; 0x43aa <chip_wake+0x15c>
    4390:	00 00       	nop
    4392:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <nm_bus_reset>
    4396:	09 c0       	rjmp	.+18     	; 0x43aa <chip_wake+0x15c>
    4398:	00 00       	nop
    439a:	07 c0       	rjmp	.+14     	; 0x43aa <chip_wake+0x15c>
    439c:	00 00       	nop
    439e:	05 c0       	rjmp	.+10     	; 0x43aa <chip_wake+0x15c>
    43a0:	00 00       	nop
    43a2:	03 c0       	rjmp	.+6      	; 0x43aa <chip_wake+0x15c>
    43a4:	00 00       	nop
    43a6:	01 c0       	rjmp	.+2      	; 0x43aa <chip_wake+0x15c>
    43a8:	00 00       	nop
    43aa:	89 81       	ldd	r24, Y+1	; 0x01
    43ac:	2d 96       	adiw	r28, 0x0d	; 13
    43ae:	cd bf       	out	0x3d, r28	; 61
    43b0:	de bf       	out	0x3e, r29	; 62
    43b2:	df 91       	pop	r29
    43b4:	cf 91       	pop	r28
    43b6:	08 95       	ret

000043b8 <wait_for_bootrom>:

sint8 wait_for_bootrom(uint8 arg)
{
    43b8:	cf 93       	push	r28
    43ba:	df 93       	push	r29
    43bc:	cd b7       	in	r28, 0x3d	; 61
    43be:	de b7       	in	r29, 0x3e	; 62
    43c0:	62 97       	sbiw	r28, 0x12	; 18
    43c2:	cd bf       	out	0x3d, r28	; 61
    43c4:	de bf       	out	0x3e, r29	; 62
    43c6:	8a 8b       	std	Y+18, r24	; 0x12
	sint8 ret = M2M_SUCCESS;
    43c8:	1d 86       	std	Y+13, r1	; 0x0d
	uint32 reg = 0, cnt = 0;
    43ca:	19 82       	std	Y+1, r1	; 0x01
    43cc:	1a 82       	std	Y+2, r1	; 0x02
    43ce:	1b 82       	std	Y+3, r1	; 0x03
    43d0:	1c 82       	std	Y+4, r1	; 0x04
    43d2:	1d 82       	std	Y+5, r1	; 0x05
    43d4:	1e 82       	std	Y+6, r1	; 0x06
    43d6:	1f 82       	std	Y+7, r1	; 0x07
    43d8:	18 86       	std	Y+8, r1	; 0x08
	uint32 u32GpReg1 = 0;
    43da:	19 86       	std	Y+9, r1	; 0x09
    43dc:	1a 86       	std	Y+10, r1	; 0x0a
    43de:	1b 86       	std	Y+11, r1	; 0x0b
    43e0:	1c 86       	std	Y+12, r1	; 0x0c
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    43e2:	82 e5       	ldi	r24, 0x52	; 82
    43e4:	93 e1       	ldi	r25, 0x13	; 19
    43e6:	dc 01       	movw	r26, r24
    43e8:	8e 87       	std	Y+14, r24	; 0x0e
    43ea:	9f 87       	std	Y+15, r25	; 0x0f
    43ec:	a8 8b       	std	Y+16, r26	; 0x10
    43ee:	b9 8b       	std	Y+17, r27	; 0x11
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    43f0:	19 82       	std	Y+1, r1	; 0x01
    43f2:	1a 82       	std	Y+2, r1	; 0x02
    43f4:	1b 82       	std	Y+3, r1	; 0x03
    43f6:	1c 82       	std	Y+4, r1	; 0x04
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    43f8:	64 e1       	ldi	r22, 0x14	; 20
    43fa:	70 e1       	ldi	r23, 0x10	; 16
    43fc:	80 e0       	ldi	r24, 0x00	; 0
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <nm_read_reg>
    4404:	dc 01       	movw	r26, r24
    4406:	cb 01       	movw	r24, r22
    4408:	89 83       	std	Y+1, r24	; 0x01
    440a:	9a 83       	std	Y+2, r25	; 0x02
    440c:	ab 83       	std	Y+3, r26	; 0x03
    440e:	bc 83       	std	Y+4, r27	; 0x04
		if (reg & 0x80000000) {
    4410:	89 81       	ldd	r24, Y+1	; 0x01
    4412:	9a 81       	ldd	r25, Y+2	; 0x02
    4414:	ab 81       	ldd	r26, Y+3	; 0x03
    4416:	bc 81       	ldd	r27, Y+4	; 0x04
    4418:	bb 23       	and	r27, r27
    441a:	3c f0       	brlt	.+14     	; 0x442a <wait_for_bootrom+0x72>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    441c:	61 e0       	ldi	r22, 0x01	; 1
    441e:	70 e0       	ldi	r23, 0x00	; 0
    4420:	80 e0       	ldi	r24, 0x00	; 0
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	0e 94 e6 10 	call	0x21cc	; 0x21cc <nm_bsp_sleep>
	}
    4428:	e7 cf       	rjmp	.-50     	; 0x43f8 <wait_for_bootrom+0x40>

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
    442a:	00 00       	nop
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    442c:	6c eb       	ldi	r22, 0xBC	; 188
    442e:	77 e0       	ldi	r23, 0x07	; 7
    4430:	82 e0       	ldi	r24, 0x02	; 2
    4432:	90 e0       	ldi	r25, 0x00	; 0
    4434:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <nm_read_reg>
    4438:	dc 01       	movw	r26, r24
    443a:	cb 01       	movw	r24, r22
    443c:	89 83       	std	Y+1, r24	; 0x01
    443e:	9a 83       	std	Y+2, r25	; 0x02
    4440:	ab 83       	std	Y+3, r26	; 0x03
    4442:	bc 83       	std	Y+4, r27	; 0x04
	reg &= 0x1;
    4444:	89 81       	ldd	r24, Y+1	; 0x01
    4446:	9a 81       	ldd	r25, Y+2	; 0x02
    4448:	ab 81       	ldd	r26, Y+3	; 0x03
    444a:	bc 81       	ldd	r27, Y+4	; 0x04
    444c:	81 70       	andi	r24, 0x01	; 1
    444e:	99 27       	eor	r25, r25
    4450:	aa 27       	eor	r26, r26
    4452:	bb 27       	eor	r27, r27
    4454:	89 83       	std	Y+1, r24	; 0x01
    4456:	9a 83       	std	Y+2, r25	; 0x02
    4458:	ab 83       	std	Y+3, r26	; 0x03
    445a:	bc 83       	std	Y+4, r27	; 0x04

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    445c:	89 81       	ldd	r24, Y+1	; 0x01
    445e:	9a 81       	ldd	r25, Y+2	; 0x02
    4460:	ab 81       	ldd	r26, Y+3	; 0x03
    4462:	bc 81       	ldd	r27, Y+4	; 0x04
    4464:	89 2b       	or	r24, r25
    4466:	8a 2b       	or	r24, r26
    4468:	8b 2b       	or	r24, r27
    446a:	51 f5       	brne	.+84     	; 0x44c0 <wait_for_bootrom+0x108>
	{
		reg = 0;
    446c:	19 82       	std	Y+1, r1	; 0x01
    446e:	1a 82       	std	Y+2, r1	; 0x02
    4470:	1b 82       	std	Y+3, r1	; 0x03
    4472:	1c 82       	std	Y+4, r1	; 0x04
		while(reg != M2M_FINISH_BOOT_ROM)
    4474:	1c c0       	rjmp	.+56     	; 0x44ae <wait_for_bootrom+0xf6>
		{
			nm_bsp_sleep(1);
    4476:	61 e0       	ldi	r22, 0x01	; 1
    4478:	70 e0       	ldi	r23, 0x00	; 0
    447a:	80 e0       	ldi	r24, 0x00	; 0
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
    4482:	6c e0       	ldi	r22, 0x0C	; 12
    4484:	70 e0       	ldi	r23, 0x00	; 0
    4486:	cb 01       	movw	r24, r22
    4488:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <nm_read_reg>
    448c:	dc 01       	movw	r26, r24
    448e:	cb 01       	movw	r24, r22
    4490:	89 83       	std	Y+1, r24	; 0x01
    4492:	9a 83       	std	Y+2, r25	; 0x02
    4494:	ab 83       	std	Y+3, r26	; 0x03
    4496:	bc 83       	std	Y+4, r27	; 0x04

			if(++cnt > TIMEOUT)
    4498:	8d 81       	ldd	r24, Y+5	; 0x05
    449a:	9e 81       	ldd	r25, Y+6	; 0x06
    449c:	af 81       	ldd	r26, Y+7	; 0x07
    449e:	b8 85       	ldd	r27, Y+8	; 0x08
    44a0:	01 96       	adiw	r24, 0x01	; 1
    44a2:	a1 1d       	adc	r26, r1
    44a4:	b1 1d       	adc	r27, r1
    44a6:	8d 83       	std	Y+5, r24	; 0x05
    44a8:	9e 83       	std	Y+6, r25	; 0x06
    44aa:	af 83       	std	Y+7, r26	; 0x07
    44ac:	b8 87       	std	Y+8, r27	; 0x08

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    44ae:	89 81       	ldd	r24, Y+1	; 0x01
    44b0:	9a 81       	ldd	r25, Y+2	; 0x02
    44b2:	ab 81       	ldd	r26, Y+3	; 0x03
    44b4:	bc 81       	ldd	r27, Y+4	; 0x04
    44b6:	8e 39       	cpi	r24, 0x9E	; 158
    44b8:	90 4d       	sbci	r25, 0xD0	; 208
    44ba:	ad 4a       	sbci	r26, 0xAD	; 173
    44bc:	b0 41       	sbci	r27, 0x10	; 16
    44be:	d9 f6       	brne	.-74     	; 0x4476 <wait_for_bootrom+0xbe>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    44c0:	8a 89       	ldd	r24, Y+18	; 0x12
    44c2:	82 30       	cpi	r24, 0x02	; 2
    44c4:	a9 f4       	brne	.+42     	; 0x44f0 <wait_for_bootrom+0x138>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    44c6:	2d e7       	ldi	r18, 0x7D	; 125
    44c8:	35 ed       	ldi	r19, 0xD5	; 213
    44ca:	4c e1       	ldi	r20, 0x1C	; 28
    44cc:	5c e3       	ldi	r21, 0x3C	; 60
    44ce:	6c ea       	ldi	r22, 0xAC	; 172
    44d0:	77 e0       	ldi	r23, 0x07	; 7
    44d2:	82 e0       	ldi	r24, 0x02	; 2
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
    44da:	20 e0       	ldi	r18, 0x00	; 0
    44dc:	30 e0       	ldi	r19, 0x00	; 0
    44de:	40 e1       	ldi	r20, 0x10	; 16
    44e0:	50 e0       	ldi	r21, 0x00	; 0
    44e2:	6c e8       	ldi	r22, 0x8C	; 140
    44e4:	70 e1       	ldi	r23, 0x10	; 16
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    44ee:	3b c0       	rjmp	.+118    	; 0x4566 <wait_for_bootrom+0x1ae>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    44f0:	8a 89       	ldd	r24, Y+18	; 0x12
    44f2:	83 30       	cpi	r24, 0x03	; 3
    44f4:	a1 f4       	brne	.+40     	; 0x451e <wait_for_bootrom+0x166>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    44f6:	2d e7       	ldi	r18, 0x7D	; 125
    44f8:	35 ed       	ldi	r19, 0xD5	; 213
    44fa:	4c e1       	ldi	r20, 0x1C	; 28
    44fc:	5c e3       	ldi	r21, 0x3C	; 60
    44fe:	6c ea       	ldi	r22, 0xAC	; 172
    4500:	77 e0       	ldi	r23, 0x07	; 7
    4502:	82 e0       	ldi	r24, 0x02	; 2
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
    450a:	20 e0       	ldi	r18, 0x00	; 0
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	a9 01       	movw	r20, r18
    4510:	6c e8       	ldi	r22, 0x8C	; 140
    4512:	70 e1       	ldi	r23, 0x10	; 16
    4514:	80 e0       	ldi	r24, 0x00	; 0
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    451c:	24 c0       	rjmp	.+72     	; 0x4566 <wait_for_bootrom+0x1ae>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    451e:	8a 89       	ldd	r24, Y+18	; 0x12
    4520:	84 30       	cpi	r24, 0x04	; 4
    4522:	a9 f4       	brne	.+42     	; 0x454e <wait_for_bootrom+0x196>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    4524:	80 e8       	ldi	r24, 0x80	; 128
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	a0 e0       	ldi	r26, 0x00	; 0
    452a:	b0 e0       	ldi	r27, 0x00	; 0
    452c:	89 87       	std	Y+9, r24	; 0x09
    452e:	9a 87       	std	Y+10, r25	; 0x0a
    4530:	ab 87       	std	Y+11, r26	; 0x0b
    4532:	bc 87       	std	Y+12, r27	; 0x0c
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    4534:	8e 85       	ldd	r24, Y+14	; 0x0e
    4536:	9f 85       	ldd	r25, Y+15	; 0x0f
    4538:	a8 89       	ldd	r26, Y+16	; 0x10
    453a:	b9 89       	ldd	r27, Y+17	; 0x11
    453c:	9c 01       	movw	r18, r24
    453e:	ad 01       	movw	r20, r26
    4540:	6c e8       	ldi	r22, 0x8C	; 140
    4542:	70 e1       	ldi	r23, 0x10	; 16
    4544:	80 e0       	ldi	r24, 0x00	; 0
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    454c:	0c c0       	rjmp	.+24     	; 0x4566 <wait_for_bootrom+0x1ae>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    454e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4550:	9f 85       	ldd	r25, Y+15	; 0x0f
    4552:	a8 89       	ldd	r26, Y+16	; 0x10
    4554:	b9 89       	ldd	r27, Y+17	; 0x11
    4556:	9c 01       	movw	r18, r24
    4558:	ad 01       	movw	r20, r26
    455a:	6c e8       	ldi	r22, 0x8C	; 140
    455c:	70 e1       	ldi	r23, 0x10	; 16
    455e:	80 e0       	ldi	r24, 0x00	; 0
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    4566:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <nmi_get_chipid>
    456a:	dc 01       	movw	r26, r24
    456c:	cb 01       	movw	r24, r22
    456e:	9f 70       	andi	r25, 0x0F	; 15
    4570:	aa 27       	eor	r26, r26
    4572:	bb 27       	eor	r27, r27
    4574:	80 3a       	cpi	r24, 0xA0	; 160
    4576:	93 40       	sbci	r25, 0x03	; 3
    4578:	a1 05       	cpc	r26, r1
    457a:	b1 05       	cpc	r27, r1
    457c:	50 f0       	brcs	.+20     	; 0x4592 <wait_for_bootrom+0x1da>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    457e:	89 85       	ldd	r24, Y+9	; 0x09
    4580:	9a 85       	ldd	r25, Y+10	; 0x0a
    4582:	ab 85       	ldd	r26, Y+11	; 0x0b
    4584:	bc 85       	ldd	r27, Y+12	; 0x0c
    4586:	82 60       	ori	r24, 0x02	; 2
    4588:	bc 01       	movw	r22, r24
    458a:	cd 01       	movw	r24, r26
    458c:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <chip_apply_conf>
    4590:	08 c0       	rjmp	.+16     	; 0x45a2 <wait_for_bootrom+0x1ea>
	} else {
		chip_apply_conf(u32GpReg1);
    4592:	89 85       	ldd	r24, Y+9	; 0x09
    4594:	9a 85       	ldd	r25, Y+10	; 0x0a
    4596:	ab 85       	ldd	r26, Y+11	; 0x0b
    4598:	bc 85       	ldd	r27, Y+12	; 0x0c
    459a:	bc 01       	movw	r22, r24
    459c:	cd 01       	movw	r24, r26
    459e:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <chip_apply_conf>
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    45a2:	21 e6       	ldi	r18, 0x61	; 97
    45a4:	3f e2       	ldi	r19, 0x2F	; 47
    45a6:	42 e5       	ldi	r20, 0x52	; 82
    45a8:	5f ee       	ldi	r21, 0xEF	; 239
    45aa:	6c e0       	ldi	r22, 0x0C	; 12
    45ac:	70 e0       	ldi	r23, 0x00	; 0
    45ae:	cb 01       	movw	r24, r22
    45b0:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    45b4:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    45b6:	62 96       	adiw	r28, 0x12	; 18
    45b8:	cd bf       	out	0x3d, r28	; 61
    45ba:	de bf       	out	0x3e, r29	; 62
    45bc:	df 91       	pop	r29
    45be:	cf 91       	pop	r28
    45c0:	08 95       	ret

000045c2 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    45c2:	cf 93       	push	r28
    45c4:	df 93       	push	r29
    45c6:	cd b7       	in	r28, 0x3d	; 61
    45c8:	de b7       	in	r29, 0x3e	; 62
    45ca:	66 97       	sbiw	r28, 0x16	; 22
    45cc:	cd bf       	out	0x3d, r28	; 61
    45ce:	de bf       	out	0x3e, r29	; 62
    45d0:	8e 8b       	std	Y+22, r24	; 0x16
	sint8 ret = M2M_SUCCESS;
    45d2:	19 82       	std	Y+1, r1	; 0x01
	uint32 reg = 0, cnt = 0;
    45d4:	1a 82       	std	Y+2, r1	; 0x02
    45d6:	1b 82       	std	Y+3, r1	; 0x03
    45d8:	1c 82       	std	Y+4, r1	; 0x04
    45da:	1d 82       	std	Y+5, r1	; 0x05
    45dc:	1e 82       	std	Y+6, r1	; 0x06
    45de:	1f 82       	std	Y+7, r1	; 0x07
    45e0:	18 86       	std	Y+8, r1	; 0x08
    45e2:	19 86       	std	Y+9, r1	; 0x09
	uint32 u32Timeout = TIMEOUT;
    45e4:	8f ef       	ldi	r24, 0xFF	; 255
    45e6:	9f ef       	ldi	r25, 0xFF	; 255
    45e8:	dc 01       	movw	r26, r24
    45ea:	8a 87       	std	Y+10, r24	; 0x0a
    45ec:	9b 87       	std	Y+11, r25	; 0x0b
    45ee:	ac 87       	std	Y+12, r26	; 0x0c
    45f0:	bd 87       	std	Y+13, r27	; 0x0d
	volatile uint32 regAddress = NMI_STATE_REG;
    45f2:	8c e8       	ldi	r24, 0x8C	; 140
    45f4:	90 e1       	ldi	r25, 0x10	; 16
    45f6:	a0 e0       	ldi	r26, 0x00	; 0
    45f8:	b0 e0       	ldi	r27, 0x00	; 0
    45fa:	8e 87       	std	Y+14, r24	; 0x0e
    45fc:	9f 87       	std	Y+15, r25	; 0x0f
    45fe:	a8 8b       	std	Y+16, r26	; 0x10
    4600:	b9 8b       	std	Y+17, r27	; 0x11
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    4602:	86 e3       	ldi	r24, 0x36	; 54
    4604:	96 e2       	ldi	r25, 0x26	; 38
    4606:	a3 e5       	ldi	r26, 0x53	; 83
    4608:	b2 e0       	ldi	r27, 0x02	; 2
    460a:	8a 8b       	std	Y+18, r24	; 0x12
    460c:	9b 8b       	std	Y+19, r25	; 0x13
    460e:	ac 8b       	std	Y+20, r26	; 0x14
    4610:	bd 8b       	std	Y+21, r27	; 0x15
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    4612:	8e 89       	ldd	r24, Y+22	; 0x16
    4614:	82 30       	cpi	r24, 0x02	; 2
    4616:	21 f0       	breq	.+8      	; 0x4620 <wait_for_firmware_start+0x5e>
    4618:	8e 89       	ldd	r24, Y+22	; 0x16
    461a:	83 30       	cpi	r24, 0x03	; 3
    461c:	09 f0       	breq	.+2      	; 0x4620 <wait_for_firmware_start+0x5e>
    461e:	40 c0       	rjmp	.+128    	; 0x46a0 <wait_for_firmware_start+0xde>
		regAddress = NMI_REV_REG;
    4620:	8c ea       	ldi	r24, 0xAC	; 172
    4622:	97 e0       	ldi	r25, 0x07	; 7
    4624:	a2 e0       	ldi	r26, 0x02	; 2
    4626:	b0 e0       	ldi	r27, 0x00	; 0
    4628:	8e 87       	std	Y+14, r24	; 0x0e
    462a:	9f 87       	std	Y+15, r25	; 0x0f
    462c:	a8 8b       	std	Y+16, r26	; 0x10
    462e:	b9 8b       	std	Y+17, r27	; 0x11
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    4630:	83 ec       	ldi	r24, 0xC3	; 195
    4632:	91 ec       	ldi	r25, 0xC1	; 193
    4634:	ad e5       	ldi	r26, 0x5D	; 93
    4636:	b7 ed       	ldi	r27, 0xD7	; 215
    4638:	8a 8b       	std	Y+18, r24	; 0x12
    463a:	9b 8b       	std	Y+19, r25	; 0x13
    463c:	ac 8b       	std	Y+20, r26	; 0x14
    463e:	bd 8b       	std	Y+21, r27	; 0x15
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    4640:	2f c0       	rjmp	.+94     	; 0x46a0 <wait_for_firmware_start+0xde>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    4642:	62 e0       	ldi	r22, 0x02	; 2
    4644:	70 e0       	ldi	r23, 0x00	; 0
    4646:	80 e0       	ldi	r24, 0x00	; 0
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    464e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4650:	9f 85       	ldd	r25, Y+15	; 0x0f
    4652:	a8 89       	ldd	r26, Y+16	; 0x10
    4654:	b9 89       	ldd	r27, Y+17	; 0x11
    4656:	bc 01       	movw	r22, r24
    4658:	cd 01       	movw	r24, r26
    465a:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <nm_read_reg>
    465e:	dc 01       	movw	r26, r24
    4660:	cb 01       	movw	r24, r22
    4662:	8a 83       	std	Y+2, r24	; 0x02
    4664:	9b 83       	std	Y+3, r25	; 0x03
    4666:	ac 83       	std	Y+4, r26	; 0x04
    4668:	bd 83       	std	Y+5, r27	; 0x05
		if(++cnt >= u32Timeout)
    466a:	8e 81       	ldd	r24, Y+6	; 0x06
    466c:	9f 81       	ldd	r25, Y+7	; 0x07
    466e:	a8 85       	ldd	r26, Y+8	; 0x08
    4670:	b9 85       	ldd	r27, Y+9	; 0x09
    4672:	01 96       	adiw	r24, 0x01	; 1
    4674:	a1 1d       	adc	r26, r1
    4676:	b1 1d       	adc	r27, r1
    4678:	8e 83       	std	Y+6, r24	; 0x06
    467a:	9f 83       	std	Y+7, r25	; 0x07
    467c:	a8 87       	std	Y+8, r26	; 0x08
    467e:	b9 87       	std	Y+9, r27	; 0x09
    4680:	2e 81       	ldd	r18, Y+6	; 0x06
    4682:	3f 81       	ldd	r19, Y+7	; 0x07
    4684:	48 85       	ldd	r20, Y+8	; 0x08
    4686:	59 85       	ldd	r21, Y+9	; 0x09
    4688:	8a 85       	ldd	r24, Y+10	; 0x0a
    468a:	9b 85       	ldd	r25, Y+11	; 0x0b
    468c:	ac 85       	ldd	r26, Y+12	; 0x0c
    468e:	bd 85       	ldd	r27, Y+13	; 0x0d
    4690:	28 17       	cp	r18, r24
    4692:	39 07       	cpc	r19, r25
    4694:	4a 07       	cpc	r20, r26
    4696:	5b 07       	cpc	r21, r27
    4698:	18 f0       	brcs	.+6      	; 0x46a0 <wait_for_firmware_start+0xde>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    469a:	8b ef       	ldi	r24, 0xFB	; 251
    469c:	89 83       	std	Y+1, r24	; 0x01
			goto ERR;
    469e:	1f c0       	rjmp	.+62     	; 0x46de <wait_for_firmware_start+0x11c>
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    46a0:	2a 89       	ldd	r18, Y+18	; 0x12
    46a2:	3b 89       	ldd	r19, Y+19	; 0x13
    46a4:	4c 89       	ldd	r20, Y+20	; 0x14
    46a6:	5d 89       	ldd	r21, Y+21	; 0x15
    46a8:	8a 81       	ldd	r24, Y+2	; 0x02
    46aa:	9b 81       	ldd	r25, Y+3	; 0x03
    46ac:	ac 81       	ldd	r26, Y+4	; 0x04
    46ae:	bd 81       	ldd	r27, Y+5	; 0x05
    46b0:	28 17       	cp	r18, r24
    46b2:	39 07       	cpc	r19, r25
    46b4:	4a 07       	cpc	r20, r26
    46b6:	5b 07       	cpc	r21, r27
    46b8:	21 f6       	brne	.-120    	; 0x4642 <wait_for_firmware_start+0x80>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    46ba:	8a 89       	ldd	r24, Y+18	; 0x12
    46bc:	9b 89       	ldd	r25, Y+19	; 0x13
    46be:	ac 89       	ldd	r26, Y+20	; 0x14
    46c0:	bd 89       	ldd	r27, Y+21	; 0x15
    46c2:	86 33       	cpi	r24, 0x36	; 54
    46c4:	96 42       	sbci	r25, 0x26	; 38
    46c6:	a3 45       	sbci	r26, 0x53	; 83
    46c8:	b2 40       	sbci	r27, 0x02	; 2
    46ca:	49 f4       	brne	.+18     	; 0x46de <wait_for_firmware_start+0x11c>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    46cc:	20 e0       	ldi	r18, 0x00	; 0
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	a9 01       	movw	r20, r18
    46d2:	6c e8       	ldi	r22, 0x8C	; 140
    46d4:	70 e1       	ldi	r23, 0x10	; 16
    46d6:	80 e0       	ldi	r24, 0x00	; 0
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
	}
ERR:
	return ret;
    46de:	89 81       	ldd	r24, Y+1	; 0x01
}
    46e0:	66 96       	adiw	r28, 0x16	; 22
    46e2:	cd bf       	out	0x3d, r28	; 61
    46e4:	de bf       	out	0x3e, r29	; 62
    46e6:	df 91       	pop	r29
    46e8:	cf 91       	pop	r28
    46ea:	08 95       	ret

000046ec <chip_deinit>:

sint8 chip_deinit(void)
{
    46ec:	cf 93       	push	r28
    46ee:	df 93       	push	r29
    46f0:	cd b7       	in	r28, 0x3d	; 61
    46f2:	de b7       	in	r29, 0x3e	; 62
    46f4:	25 97       	sbiw	r28, 0x05	; 5
    46f6:	cd bf       	out	0x3d, r28	; 61
    46f8:	de bf       	out	0x3e, r29	; 62
	uint32 reg = 0;
    46fa:	1a 82       	std	Y+2, r1	; 0x02
    46fc:	1b 82       	std	Y+3, r1	; 0x03
    46fe:	1c 82       	std	Y+4, r1	; 0x04
    4700:	1d 82       	std	Y+5, r1	; 0x05
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    4702:	ce 01       	movw	r24, r28
    4704:	02 96       	adiw	r24, 0x02	; 2
    4706:	ac 01       	movw	r20, r24
    4708:	60 e0       	ldi	r22, 0x00	; 0
    470a:	74 e1       	ldi	r23, 0x14	; 20
    470c:	80 e0       	ldi	r24, 0x00	; 0
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    4714:	89 83       	std	Y+1, r24	; 0x01
	if (ret != M2M_SUCCESS) {
    4716:	89 81       	ldd	r24, Y+1	; 0x01
    4718:	88 23       	and	r24, r24
    471a:	b9 f4       	brne	.+46     	; 0x474a <chip_deinit+0x5e>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    471c:	8a 81       	ldd	r24, Y+2	; 0x02
    471e:	9b 81       	ldd	r25, Y+3	; 0x03
    4720:	ac 81       	ldd	r26, Y+4	; 0x04
    4722:	bd 81       	ldd	r27, Y+5	; 0x05
    4724:	9b 7f       	andi	r25, 0xFB	; 251
    4726:	8a 83       	std	Y+2, r24	; 0x02
    4728:	9b 83       	std	Y+3, r25	; 0x03
    472a:	ac 83       	std	Y+4, r26	; 0x04
    472c:	bd 83       	std	Y+5, r27	; 0x05
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    472e:	8a 81       	ldd	r24, Y+2	; 0x02
    4730:	9b 81       	ldd	r25, Y+3	; 0x03
    4732:	ac 81       	ldd	r26, Y+4	; 0x04
    4734:	bd 81       	ldd	r27, Y+5	; 0x05
    4736:	9c 01       	movw	r18, r24
    4738:	ad 01       	movw	r20, r26
    473a:	60 e0       	ldi	r22, 0x00	; 0
    473c:	74 e1       	ldi	r23, 0x14	; 20
    473e:	80 e0       	ldi	r24, 0x00	; 0
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    4746:	89 83       	std	Y+1, r24	; 0x01
    4748:	01 c0       	rjmp	.+2      	; 0x474c <chip_deinit+0x60>
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
	if (ret != M2M_SUCCESS) {
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
    474a:	00 00       	nop
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}

ERR1:
	return ret;
    474c:	89 81       	ldd	r24, Y+1	; 0x01
}
    474e:	25 96       	adiw	r28, 0x05	; 5
    4750:	cd bf       	out	0x3d, r28	; 61
    4752:	de bf       	out	0x3e, r29	; 62
    4754:	df 91       	pop	r29
    4756:	cf 91       	pop	r28
    4758:	08 95       	ret

0000475a <nm_bus_iface_init>:
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
	ret = nm_uart_reconfigure(ptr);
#endif
	return ret;
}
    475a:	cf 93       	push	r28
    475c:	df 93       	push	r29
    475e:	00 d0       	rcall	.+0      	; 0x4760 <nm_bus_iface_init+0x6>
    4760:	1f 92       	push	r1
    4762:	cd b7       	in	r28, 0x3d	; 61
    4764:	de b7       	in	r29, 0x3e	; 62
    4766:	8a 83       	std	Y+2, r24	; 0x02
    4768:	9b 83       	std	Y+3, r25	; 0x03
    476a:	19 82       	std	Y+1, r1	; 0x01
    476c:	8a 81       	ldd	r24, Y+2	; 0x02
    476e:	9b 81       	ldd	r25, Y+3	; 0x03
    4770:	0e 94 10 13 	call	0x2620	; 0x2620 <nm_bus_init>
    4774:	89 83       	std	Y+1, r24	; 0x01
    4776:	89 81       	ldd	r24, Y+1	; 0x01
    4778:	23 96       	adiw	r28, 0x03	; 3
    477a:	cd bf       	out	0x3d, r28	; 61
    477c:	de bf       	out	0x3e, r29	; 62
    477e:	df 91       	pop	r29
    4780:	cf 91       	pop	r28
    4782:	08 95       	ret

00004784 <nm_bus_iface_deinit>:
    4784:	cf 93       	push	r28
    4786:	df 93       	push	r29
    4788:	1f 92       	push	r1
    478a:	cd b7       	in	r28, 0x3d	; 61
    478c:	de b7       	in	r29, 0x3e	; 62
    478e:	19 82       	std	Y+1, r1	; 0x01
    4790:	0e 94 73 13 	call	0x26e6	; 0x26e6 <nm_bus_deinit>
    4794:	89 83       	std	Y+1, r24	; 0x01
    4796:	89 81       	ldd	r24, Y+1	; 0x01
    4798:	0f 90       	pop	r0
    479a:	df 91       	pop	r29
    479c:	cf 91       	pop	r28
    479e:	08 95       	ret

000047a0 <nm_bus_reset>:
    47a0:	cf 93       	push	r28
    47a2:	df 93       	push	r29
    47a4:	1f 92       	push	r1
    47a6:	cd b7       	in	r28, 0x3d	; 61
    47a8:	de b7       	in	r29, 0x3e	; 62
    47aa:	19 82       	std	Y+1, r1	; 0x01
    47ac:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <nm_spi_reset>
    47b0:	0f 90       	pop	r0
    47b2:	df 91       	pop	r29
    47b4:	cf 91       	pop	r28
    47b6:	08 95       	ret

000047b8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    47b8:	cf 93       	push	r28
    47ba:	df 93       	push	r29
    47bc:	00 d0       	rcall	.+0      	; 0x47be <nm_read_reg+0x6>
    47be:	00 d0       	rcall	.+0      	; 0x47c0 <nm_read_reg+0x8>
    47c0:	cd b7       	in	r28, 0x3d	; 61
    47c2:	de b7       	in	r29, 0x3e	; 62
    47c4:	69 83       	std	Y+1, r22	; 0x01
    47c6:	7a 83       	std	Y+2, r23	; 0x02
    47c8:	8b 83       	std	Y+3, r24	; 0x03
    47ca:	9c 83       	std	Y+4, r25	; 0x04
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    47cc:	89 81       	ldd	r24, Y+1	; 0x01
    47ce:	9a 81       	ldd	r25, Y+2	; 0x02
    47d0:	ab 81       	ldd	r26, Y+3	; 0x03
    47d2:	bc 81       	ldd	r27, Y+4	; 0x04
    47d4:	bc 01       	movw	r22, r24
    47d6:	cd 01       	movw	r24, r26
    47d8:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <nm_spi_read_reg>
    47dc:	dc 01       	movw	r26, r24
    47de:	cb 01       	movw	r24, r22
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    47e0:	bc 01       	movw	r22, r24
    47e2:	cd 01       	movw	r24, r26
    47e4:	24 96       	adiw	r28, 0x04	; 4
    47e6:	cd bf       	out	0x3d, r28	; 61
    47e8:	de bf       	out	0x3e, r29	; 62
    47ea:	df 91       	pop	r29
    47ec:	cf 91       	pop	r28
    47ee:	08 95       	ret

000047f0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    47f0:	cf 93       	push	r28
    47f2:	df 93       	push	r29
    47f4:	cd b7       	in	r28, 0x3d	; 61
    47f6:	de b7       	in	r29, 0x3e	; 62
    47f8:	26 97       	sbiw	r28, 0x06	; 6
    47fa:	cd bf       	out	0x3d, r28	; 61
    47fc:	de bf       	out	0x3e, r29	; 62
    47fe:	69 83       	std	Y+1, r22	; 0x01
    4800:	7a 83       	std	Y+2, r23	; 0x02
    4802:	8b 83       	std	Y+3, r24	; 0x03
    4804:	9c 83       	std	Y+4, r25	; 0x04
    4806:	4d 83       	std	Y+5, r20	; 0x05
    4808:	5e 83       	std	Y+6, r21	; 0x06
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    480a:	2d 81       	ldd	r18, Y+5	; 0x05
    480c:	3e 81       	ldd	r19, Y+6	; 0x06
    480e:	89 81       	ldd	r24, Y+1	; 0x01
    4810:	9a 81       	ldd	r25, Y+2	; 0x02
    4812:	ab 81       	ldd	r26, Y+3	; 0x03
    4814:	bc 81       	ldd	r27, Y+4	; 0x04
    4816:	a9 01       	movw	r20, r18
    4818:	bc 01       	movw	r22, r24
    481a:	cd 01       	movw	r24, r26
    481c:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <nm_spi_read_reg_with_ret>
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    4820:	26 96       	adiw	r28, 0x06	; 6
    4822:	cd bf       	out	0x3d, r28	; 61
    4824:	de bf       	out	0x3e, r29	; 62
    4826:	df 91       	pop	r29
    4828:	cf 91       	pop	r28
    482a:	08 95       	ret

0000482c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    482c:	cf 93       	push	r28
    482e:	df 93       	push	r29
    4830:	cd b7       	in	r28, 0x3d	; 61
    4832:	de b7       	in	r29, 0x3e	; 62
    4834:	28 97       	sbiw	r28, 0x08	; 8
    4836:	cd bf       	out	0x3d, r28	; 61
    4838:	de bf       	out	0x3e, r29	; 62
    483a:	69 83       	std	Y+1, r22	; 0x01
    483c:	7a 83       	std	Y+2, r23	; 0x02
    483e:	8b 83       	std	Y+3, r24	; 0x03
    4840:	9c 83       	std	Y+4, r25	; 0x04
    4842:	2d 83       	std	Y+5, r18	; 0x05
    4844:	3e 83       	std	Y+6, r19	; 0x06
    4846:	4f 83       	std	Y+7, r20	; 0x07
    4848:	58 87       	std	Y+8, r21	; 0x08
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    484a:	2d 81       	ldd	r18, Y+5	; 0x05
    484c:	3e 81       	ldd	r19, Y+6	; 0x06
    484e:	4f 81       	ldd	r20, Y+7	; 0x07
    4850:	58 85       	ldd	r21, Y+8	; 0x08
    4852:	89 81       	ldd	r24, Y+1	; 0x01
    4854:	9a 81       	ldd	r25, Y+2	; 0x02
    4856:	ab 81       	ldd	r26, Y+3	; 0x03
    4858:	bc 81       	ldd	r27, Y+4	; 0x04
    485a:	bc 01       	movw	r22, r24
    485c:	cd 01       	movw	r24, r26
    485e:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <nm_spi_write_reg>
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    4862:	28 96       	adiw	r28, 0x08	; 8
    4864:	cd bf       	out	0x3d, r28	; 61
    4866:	de bf       	out	0x3e, r29	; 62
    4868:	df 91       	pop	r29
    486a:	cf 91       	pop	r28
    486c:	08 95       	ret

0000486e <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    486e:	cf 93       	push	r28
    4870:	df 93       	push	r29
    4872:	cd b7       	in	r28, 0x3d	; 61
    4874:	de b7       	in	r29, 0x3e	; 62
    4876:	28 97       	sbiw	r28, 0x08	; 8
    4878:	cd bf       	out	0x3d, r28	; 61
    487a:	de bf       	out	0x3e, r29	; 62
    487c:	69 83       	std	Y+1, r22	; 0x01
    487e:	7a 83       	std	Y+2, r23	; 0x02
    4880:	8b 83       	std	Y+3, r24	; 0x03
    4882:	9c 83       	std	Y+4, r25	; 0x04
    4884:	4d 83       	std	Y+5, r20	; 0x05
    4886:	5e 83       	std	Y+6, r21	; 0x06
    4888:	2f 83       	std	Y+7, r18	; 0x07
    488a:	38 87       	std	Y+8, r19	; 0x08
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    488c:	2f 81       	ldd	r18, Y+7	; 0x07
    488e:	38 85       	ldd	r19, Y+8	; 0x08
    4890:	4d 81       	ldd	r20, Y+5	; 0x05
    4892:	5e 81       	ldd	r21, Y+6	; 0x06
    4894:	89 81       	ldd	r24, Y+1	; 0x01
    4896:	9a 81       	ldd	r25, Y+2	; 0x02
    4898:	ab 81       	ldd	r26, Y+3	; 0x03
    489a:	bc 81       	ldd	r27, Y+4	; 0x04
    489c:	bc 01       	movw	r22, r24
    489e:	cd 01       	movw	r24, r26
    48a0:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <nm_spi_read_block>
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    48a4:	28 96       	adiw	r28, 0x08	; 8
    48a6:	cd bf       	out	0x3d, r28	; 61
    48a8:	de bf       	out	0x3e, r29	; 62
    48aa:	df 91       	pop	r29
    48ac:	cf 91       	pop	r28
    48ae:	08 95       	ret

000048b0 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    48b0:	ef 92       	push	r14
    48b2:	ff 92       	push	r15
    48b4:	0f 93       	push	r16
    48b6:	1f 93       	push	r17
    48b8:	cf 93       	push	r28
    48ba:	df 93       	push	r29
    48bc:	cd b7       	in	r28, 0x3d	; 61
    48be:	de b7       	in	r29, 0x3e	; 62
    48c0:	61 97       	sbiw	r28, 0x11	; 17
    48c2:	cd bf       	out	0x3d, r28	; 61
    48c4:	de bf       	out	0x3e, r29	; 62
    48c6:	68 87       	std	Y+8, r22	; 0x08
    48c8:	79 87       	std	Y+9, r23	; 0x09
    48ca:	8a 87       	std	Y+10, r24	; 0x0a
    48cc:	9b 87       	std	Y+11, r25	; 0x0b
    48ce:	4c 87       	std	Y+12, r20	; 0x0c
    48d0:	5d 87       	std	Y+13, r21	; 0x0d
    48d2:	0e 87       	std	Y+14, r16	; 0x0e
    48d4:	1f 87       	std	Y+15, r17	; 0x0f
    48d6:	28 8b       	std	Y+16, r18	; 0x10
    48d8:	39 8b       	std	Y+17, r19	; 0x11
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    48da:	80 91 43 28 	lds	r24, 0x2843	; 0x802843 <egstrNmBusCapabilities>
    48de:	90 91 44 28 	lds	r25, 0x2844	; 0x802844 <egstrNmBusCapabilities+0x1>
    48e2:	08 97       	sbiw	r24, 0x08	; 8
    48e4:	8e 83       	std	Y+6, r24	; 0x06
    48e6:	9f 83       	std	Y+7, r25	; 0x07
	uint32 off = 0;
    48e8:	19 82       	std	Y+1, r1	; 0x01
    48ea:	1a 82       	std	Y+2, r1	; 0x02
    48ec:	1b 82       	std	Y+3, r1	; 0x03
    48ee:	1c 82       	std	Y+4, r1	; 0x04
	sint8 s8Ret = M2M_SUCCESS;
    48f0:	1d 82       	std	Y+5, r1	; 0x05

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    48f2:	8e 81       	ldd	r24, Y+6	; 0x06
    48f4:	9f 81       	ldd	r25, Y+7	; 0x07
    48f6:	9c 01       	movw	r18, r24
    48f8:	40 e0       	ldi	r20, 0x00	; 0
    48fa:	50 e0       	ldi	r21, 0x00	; 0
    48fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    48fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    4900:	a8 89       	ldd	r26, Y+16	; 0x10
    4902:	b9 89       	ldd	r27, Y+17	; 0x11
    4904:	28 17       	cp	r18, r24
    4906:	39 07       	cpc	r19, r25
    4908:	4a 07       	cpc	r20, r26
    490a:	5b 07       	cpc	r21, r27
    490c:	b8 f0       	brcs	.+46     	; 0x493c <nm_read_block+0x8c>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    490e:	6e 85       	ldd	r22, Y+14	; 0x0e
    4910:	7f 85       	ldd	r23, Y+15	; 0x0f
    4912:	89 81       	ldd	r24, Y+1	; 0x01
    4914:	9a 81       	ldd	r25, Y+2	; 0x02
    4916:	2c 85       	ldd	r18, Y+12	; 0x0c
    4918:	3d 85       	ldd	r19, Y+13	; 0x0d
    491a:	a9 01       	movw	r20, r18
    491c:	48 0f       	add	r20, r24
    491e:	59 1f       	adc	r21, r25
    4920:	88 85       	ldd	r24, Y+8	; 0x08
    4922:	99 85       	ldd	r25, Y+9	; 0x09
    4924:	aa 85       	ldd	r26, Y+10	; 0x0a
    4926:	bb 85       	ldd	r27, Y+11	; 0x0b
    4928:	9b 01       	movw	r18, r22
    492a:	bc 01       	movw	r22, r24
    492c:	cd 01       	movw	r24, r26
    492e:	0e 94 37 24 	call	0x486e	; 0x486e <p_nm_read_block>
    4932:	98 2f       	mov	r25, r24
    4934:	8d 81       	ldd	r24, Y+5	; 0x05
    4936:	89 0f       	add	r24, r25
    4938:	8d 83       	std	Y+5, r24	; 0x05
			break;
    493a:	51 c0       	rjmp	.+162    	; 0x49de <nm_read_block+0x12e>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    493c:	89 81       	ldd	r24, Y+1	; 0x01
    493e:	9a 81       	ldd	r25, Y+2	; 0x02
    4940:	2c 85       	ldd	r18, Y+12	; 0x0c
    4942:	3d 85       	ldd	r19, Y+13	; 0x0d
    4944:	a9 01       	movw	r20, r18
    4946:	48 0f       	add	r20, r24
    4948:	59 1f       	adc	r21, r25
    494a:	2e 81       	ldd	r18, Y+6	; 0x06
    494c:	3f 81       	ldd	r19, Y+7	; 0x07
    494e:	88 85       	ldd	r24, Y+8	; 0x08
    4950:	99 85       	ldd	r25, Y+9	; 0x09
    4952:	aa 85       	ldd	r26, Y+10	; 0x0a
    4954:	bb 85       	ldd	r27, Y+11	; 0x0b
    4956:	bc 01       	movw	r22, r24
    4958:	cd 01       	movw	r24, r26
    495a:	0e 94 37 24 	call	0x486e	; 0x486e <p_nm_read_block>
    495e:	98 2f       	mov	r25, r24
    4960:	8d 81       	ldd	r24, Y+5	; 0x05
    4962:	89 0f       	add	r24, r25
    4964:	8d 83       	std	Y+5, r24	; 0x05
			if(M2M_SUCCESS != s8Ret) break;
    4966:	8d 81       	ldd	r24, Y+5	; 0x05
    4968:	88 23       	and	r24, r24
    496a:	c1 f5       	brne	.+112    	; 0x49dc <nm_read_block+0x12c>
			u32Sz -= u16MaxTrxSz;
    496c:	8e 81       	ldd	r24, Y+6	; 0x06
    496e:	9f 81       	ldd	r25, Y+7	; 0x07
    4970:	cc 01       	movw	r24, r24
    4972:	a0 e0       	ldi	r26, 0x00	; 0
    4974:	b0 e0       	ldi	r27, 0x00	; 0
    4976:	2e 85       	ldd	r18, Y+14	; 0x0e
    4978:	3f 85       	ldd	r19, Y+15	; 0x0f
    497a:	48 89       	ldd	r20, Y+16	; 0x10
    497c:	59 89       	ldd	r21, Y+17	; 0x11
    497e:	79 01       	movw	r14, r18
    4980:	8a 01       	movw	r16, r20
    4982:	e8 1a       	sub	r14, r24
    4984:	f9 0a       	sbc	r15, r25
    4986:	0a 0b       	sbc	r16, r26
    4988:	1b 0b       	sbc	r17, r27
    498a:	d8 01       	movw	r26, r16
    498c:	c7 01       	movw	r24, r14
    498e:	8e 87       	std	Y+14, r24	; 0x0e
    4990:	9f 87       	std	Y+15, r25	; 0x0f
    4992:	a8 8b       	std	Y+16, r26	; 0x10
    4994:	b9 8b       	std	Y+17, r27	; 0x11
			off += u16MaxTrxSz;
    4996:	8e 81       	ldd	r24, Y+6	; 0x06
    4998:	9f 81       	ldd	r25, Y+7	; 0x07
    499a:	cc 01       	movw	r24, r24
    499c:	a0 e0       	ldi	r26, 0x00	; 0
    499e:	b0 e0       	ldi	r27, 0x00	; 0
    49a0:	29 81       	ldd	r18, Y+1	; 0x01
    49a2:	3a 81       	ldd	r19, Y+2	; 0x02
    49a4:	4b 81       	ldd	r20, Y+3	; 0x03
    49a6:	5c 81       	ldd	r21, Y+4	; 0x04
    49a8:	82 0f       	add	r24, r18
    49aa:	93 1f       	adc	r25, r19
    49ac:	a4 1f       	adc	r26, r20
    49ae:	b5 1f       	adc	r27, r21
    49b0:	89 83       	std	Y+1, r24	; 0x01
    49b2:	9a 83       	std	Y+2, r25	; 0x02
    49b4:	ab 83       	std	Y+3, r26	; 0x03
    49b6:	bc 83       	std	Y+4, r27	; 0x04
			u32Addr += u16MaxTrxSz;
    49b8:	8e 81       	ldd	r24, Y+6	; 0x06
    49ba:	9f 81       	ldd	r25, Y+7	; 0x07
    49bc:	cc 01       	movw	r24, r24
    49be:	a0 e0       	ldi	r26, 0x00	; 0
    49c0:	b0 e0       	ldi	r27, 0x00	; 0
    49c2:	28 85       	ldd	r18, Y+8	; 0x08
    49c4:	39 85       	ldd	r19, Y+9	; 0x09
    49c6:	4a 85       	ldd	r20, Y+10	; 0x0a
    49c8:	5b 85       	ldd	r21, Y+11	; 0x0b
    49ca:	82 0f       	add	r24, r18
    49cc:	93 1f       	adc	r25, r19
    49ce:	a4 1f       	adc	r26, r20
    49d0:	b5 1f       	adc	r27, r21
    49d2:	88 87       	std	Y+8, r24	; 0x08
    49d4:	99 87       	std	Y+9, r25	; 0x09
    49d6:	aa 87       	std	Y+10, r26	; 0x0a
    49d8:	bb 87       	std	Y+11, r27	; 0x0b
		}
	}
    49da:	8b cf       	rjmp	.-234    	; 0x48f2 <nm_read_block+0x42>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    49dc:	00 00       	nop
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    49de:	8d 81       	ldd	r24, Y+5	; 0x05
}
    49e0:	61 96       	adiw	r28, 0x11	; 17
    49e2:	cd bf       	out	0x3d, r28	; 61
    49e4:	de bf       	out	0x3e, r29	; 62
    49e6:	df 91       	pop	r29
    49e8:	cf 91       	pop	r28
    49ea:	1f 91       	pop	r17
    49ec:	0f 91       	pop	r16
    49ee:	ff 90       	pop	r15
    49f0:	ef 90       	pop	r14
    49f2:	08 95       	ret

000049f4 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    49f4:	cf 93       	push	r28
    49f6:	df 93       	push	r29
    49f8:	cd b7       	in	r28, 0x3d	; 61
    49fa:	de b7       	in	r29, 0x3e	; 62
    49fc:	28 97       	sbiw	r28, 0x08	; 8
    49fe:	cd bf       	out	0x3d, r28	; 61
    4a00:	de bf       	out	0x3e, r29	; 62
    4a02:	69 83       	std	Y+1, r22	; 0x01
    4a04:	7a 83       	std	Y+2, r23	; 0x02
    4a06:	8b 83       	std	Y+3, r24	; 0x03
    4a08:	9c 83       	std	Y+4, r25	; 0x04
    4a0a:	4d 83       	std	Y+5, r20	; 0x05
    4a0c:	5e 83       	std	Y+6, r21	; 0x06
    4a0e:	2f 83       	std	Y+7, r18	; 0x07
    4a10:	38 87       	std	Y+8, r19	; 0x08
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    4a12:	2f 81       	ldd	r18, Y+7	; 0x07
    4a14:	38 85       	ldd	r19, Y+8	; 0x08
    4a16:	4d 81       	ldd	r20, Y+5	; 0x05
    4a18:	5e 81       	ldd	r21, Y+6	; 0x06
    4a1a:	89 81       	ldd	r24, Y+1	; 0x01
    4a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a1e:	ab 81       	ldd	r26, Y+3	; 0x03
    4a20:	bc 81       	ldd	r27, Y+4	; 0x04
    4a22:	bc 01       	movw	r22, r24
    4a24:	cd 01       	movw	r24, r26
    4a26:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <nm_spi_write_block>
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    4a2a:	28 96       	adiw	r28, 0x08	; 8
    4a2c:	cd bf       	out	0x3d, r28	; 61
    4a2e:	de bf       	out	0x3e, r29	; 62
    4a30:	df 91       	pop	r29
    4a32:	cf 91       	pop	r28
    4a34:	08 95       	ret

00004a36 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    4a36:	ef 92       	push	r14
    4a38:	ff 92       	push	r15
    4a3a:	0f 93       	push	r16
    4a3c:	1f 93       	push	r17
    4a3e:	cf 93       	push	r28
    4a40:	df 93       	push	r29
    4a42:	cd b7       	in	r28, 0x3d	; 61
    4a44:	de b7       	in	r29, 0x3e	; 62
    4a46:	61 97       	sbiw	r28, 0x11	; 17
    4a48:	cd bf       	out	0x3d, r28	; 61
    4a4a:	de bf       	out	0x3e, r29	; 62
    4a4c:	68 87       	std	Y+8, r22	; 0x08
    4a4e:	79 87       	std	Y+9, r23	; 0x09
    4a50:	8a 87       	std	Y+10, r24	; 0x0a
    4a52:	9b 87       	std	Y+11, r25	; 0x0b
    4a54:	4c 87       	std	Y+12, r20	; 0x0c
    4a56:	5d 87       	std	Y+13, r21	; 0x0d
    4a58:	0e 87       	std	Y+14, r16	; 0x0e
    4a5a:	1f 87       	std	Y+15, r17	; 0x0f
    4a5c:	28 8b       	std	Y+16, r18	; 0x10
    4a5e:	39 8b       	std	Y+17, r19	; 0x11
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    4a60:	80 91 43 28 	lds	r24, 0x2843	; 0x802843 <egstrNmBusCapabilities>
    4a64:	90 91 44 28 	lds	r25, 0x2844	; 0x802844 <egstrNmBusCapabilities+0x1>
    4a68:	08 97       	sbiw	r24, 0x08	; 8
    4a6a:	8e 83       	std	Y+6, r24	; 0x06
    4a6c:	9f 83       	std	Y+7, r25	; 0x07
	uint32 off = 0;
    4a6e:	19 82       	std	Y+1, r1	; 0x01
    4a70:	1a 82       	std	Y+2, r1	; 0x02
    4a72:	1b 82       	std	Y+3, r1	; 0x03
    4a74:	1c 82       	std	Y+4, r1	; 0x04
	sint8 s8Ret = M2M_SUCCESS;
    4a76:	1d 82       	std	Y+5, r1	; 0x05

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    4a78:	8e 81       	ldd	r24, Y+6	; 0x06
    4a7a:	9f 81       	ldd	r25, Y+7	; 0x07
    4a7c:	9c 01       	movw	r18, r24
    4a7e:	40 e0       	ldi	r20, 0x00	; 0
    4a80:	50 e0       	ldi	r21, 0x00	; 0
    4a82:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a84:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a86:	a8 89       	ldd	r26, Y+16	; 0x10
    4a88:	b9 89       	ldd	r27, Y+17	; 0x11
    4a8a:	28 17       	cp	r18, r24
    4a8c:	39 07       	cpc	r19, r25
    4a8e:	4a 07       	cpc	r20, r26
    4a90:	5b 07       	cpc	r21, r27
    4a92:	b8 f0       	brcs	.+46     	; 0x4ac2 <nm_write_block+0x8c>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    4a94:	6e 85       	ldd	r22, Y+14	; 0x0e
    4a96:	7f 85       	ldd	r23, Y+15	; 0x0f
    4a98:	89 81       	ldd	r24, Y+1	; 0x01
    4a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    4a9e:	3d 85       	ldd	r19, Y+13	; 0x0d
    4aa0:	a9 01       	movw	r20, r18
    4aa2:	48 0f       	add	r20, r24
    4aa4:	59 1f       	adc	r21, r25
    4aa6:	88 85       	ldd	r24, Y+8	; 0x08
    4aa8:	99 85       	ldd	r25, Y+9	; 0x09
    4aaa:	aa 85       	ldd	r26, Y+10	; 0x0a
    4aac:	bb 85       	ldd	r27, Y+11	; 0x0b
    4aae:	9b 01       	movw	r18, r22
    4ab0:	bc 01       	movw	r22, r24
    4ab2:	cd 01       	movw	r24, r26
    4ab4:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <p_nm_write_block>
    4ab8:	98 2f       	mov	r25, r24
    4aba:	8d 81       	ldd	r24, Y+5	; 0x05
    4abc:	89 0f       	add	r24, r25
    4abe:	8d 83       	std	Y+5, r24	; 0x05
			break;
    4ac0:	51 c0       	rjmp	.+162    	; 0x4b64 <nm_write_block+0x12e>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    4ac2:	89 81       	ldd	r24, Y+1	; 0x01
    4ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ac6:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ac8:	3d 85       	ldd	r19, Y+13	; 0x0d
    4aca:	a9 01       	movw	r20, r18
    4acc:	48 0f       	add	r20, r24
    4ace:	59 1f       	adc	r21, r25
    4ad0:	2e 81       	ldd	r18, Y+6	; 0x06
    4ad2:	3f 81       	ldd	r19, Y+7	; 0x07
    4ad4:	88 85       	ldd	r24, Y+8	; 0x08
    4ad6:	99 85       	ldd	r25, Y+9	; 0x09
    4ad8:	aa 85       	ldd	r26, Y+10	; 0x0a
    4ada:	bb 85       	ldd	r27, Y+11	; 0x0b
    4adc:	bc 01       	movw	r22, r24
    4ade:	cd 01       	movw	r24, r26
    4ae0:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <p_nm_write_block>
    4ae4:	98 2f       	mov	r25, r24
    4ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae8:	89 0f       	add	r24, r25
    4aea:	8d 83       	std	Y+5, r24	; 0x05
			if(M2M_SUCCESS != s8Ret) break;
    4aec:	8d 81       	ldd	r24, Y+5	; 0x05
    4aee:	88 23       	and	r24, r24
    4af0:	c1 f5       	brne	.+112    	; 0x4b62 <nm_write_block+0x12c>
			u32Sz -= u16MaxTrxSz;
    4af2:	8e 81       	ldd	r24, Y+6	; 0x06
    4af4:	9f 81       	ldd	r25, Y+7	; 0x07
    4af6:	cc 01       	movw	r24, r24
    4af8:	a0 e0       	ldi	r26, 0x00	; 0
    4afa:	b0 e0       	ldi	r27, 0x00	; 0
    4afc:	2e 85       	ldd	r18, Y+14	; 0x0e
    4afe:	3f 85       	ldd	r19, Y+15	; 0x0f
    4b00:	48 89       	ldd	r20, Y+16	; 0x10
    4b02:	59 89       	ldd	r21, Y+17	; 0x11
    4b04:	79 01       	movw	r14, r18
    4b06:	8a 01       	movw	r16, r20
    4b08:	e8 1a       	sub	r14, r24
    4b0a:	f9 0a       	sbc	r15, r25
    4b0c:	0a 0b       	sbc	r16, r26
    4b0e:	1b 0b       	sbc	r17, r27
    4b10:	d8 01       	movw	r26, r16
    4b12:	c7 01       	movw	r24, r14
    4b14:	8e 87       	std	Y+14, r24	; 0x0e
    4b16:	9f 87       	std	Y+15, r25	; 0x0f
    4b18:	a8 8b       	std	Y+16, r26	; 0x10
    4b1a:	b9 8b       	std	Y+17, r27	; 0x11
			off += u16MaxTrxSz;
    4b1c:	8e 81       	ldd	r24, Y+6	; 0x06
    4b1e:	9f 81       	ldd	r25, Y+7	; 0x07
    4b20:	cc 01       	movw	r24, r24
    4b22:	a0 e0       	ldi	r26, 0x00	; 0
    4b24:	b0 e0       	ldi	r27, 0x00	; 0
    4b26:	29 81       	ldd	r18, Y+1	; 0x01
    4b28:	3a 81       	ldd	r19, Y+2	; 0x02
    4b2a:	4b 81       	ldd	r20, Y+3	; 0x03
    4b2c:	5c 81       	ldd	r21, Y+4	; 0x04
    4b2e:	82 0f       	add	r24, r18
    4b30:	93 1f       	adc	r25, r19
    4b32:	a4 1f       	adc	r26, r20
    4b34:	b5 1f       	adc	r27, r21
    4b36:	89 83       	std	Y+1, r24	; 0x01
    4b38:	9a 83       	std	Y+2, r25	; 0x02
    4b3a:	ab 83       	std	Y+3, r26	; 0x03
    4b3c:	bc 83       	std	Y+4, r27	; 0x04
			u32Addr += u16MaxTrxSz;
    4b3e:	8e 81       	ldd	r24, Y+6	; 0x06
    4b40:	9f 81       	ldd	r25, Y+7	; 0x07
    4b42:	cc 01       	movw	r24, r24
    4b44:	a0 e0       	ldi	r26, 0x00	; 0
    4b46:	b0 e0       	ldi	r27, 0x00	; 0
    4b48:	28 85       	ldd	r18, Y+8	; 0x08
    4b4a:	39 85       	ldd	r19, Y+9	; 0x09
    4b4c:	4a 85       	ldd	r20, Y+10	; 0x0a
    4b4e:	5b 85       	ldd	r21, Y+11	; 0x0b
    4b50:	82 0f       	add	r24, r18
    4b52:	93 1f       	adc	r25, r19
    4b54:	a4 1f       	adc	r26, r20
    4b56:	b5 1f       	adc	r27, r21
    4b58:	88 87       	std	Y+8, r24	; 0x08
    4b5a:	99 87       	std	Y+9, r25	; 0x09
    4b5c:	aa 87       	std	Y+10, r26	; 0x0a
    4b5e:	bb 87       	std	Y+11, r27	; 0x0b
		}
	}
    4b60:	8b cf       	rjmp	.-234    	; 0x4a78 <nm_write_block+0x42>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    4b62:	00 00       	nop
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    4b64:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4b66:	61 96       	adiw	r28, 0x11	; 17
    4b68:	cd bf       	out	0x3d, r28	; 61
    4b6a:	de bf       	out	0x3e, r29	; 62
    4b6c:	df 91       	pop	r29
    4b6e:	cf 91       	pop	r28
    4b70:	1f 91       	pop	r17
    4b72:	0f 91       	pop	r16
    4b74:	ff 90       	pop	r15
    4b76:	ef 90       	pop	r14
    4b78:	08 95       	ret

00004b7a <nm_get_firmware_full_info>:
	/*disable all interrupt in ROM (to disable uart) in 2b0 chip*/
	nm_write_reg(0x20300,0);

ERR1:
	return ret;
}
    4b7a:	0f 93       	push	r16
    4b7c:	1f 93       	push	r17
    4b7e:	cf 93       	push	r28
    4b80:	df 93       	push	r29
    4b82:	cd b7       	in	r28, 0x3d	; 61
    4b84:	de b7       	in	r29, 0x3e	; 62
    4b86:	65 97       	sbiw	r28, 0x15	; 21
    4b88:	cd bf       	out	0x3d, r28	; 61
    4b8a:	de bf       	out	0x3e, r29	; 62
    4b8c:	8c 8b       	std	Y+20, r24	; 0x14
    4b8e:	9d 8b       	std	Y+21, r25	; 0x15
    4b90:	18 86       	std	Y+8, r1	; 0x08
    4b92:	19 86       	std	Y+9, r1	; 0x09
    4b94:	1a 86       	std	Y+10, r1	; 0x0a
    4b96:	1b 86       	std	Y+11, r1	; 0x0b
    4b98:	19 82       	std	Y+1, r1	; 0x01
    4b9a:	28 e0       	ldi	r18, 0x08	; 8
    4b9c:	ce 01       	movw	r24, r28
    4b9e:	0c 96       	adiw	r24, 0x0c	; 12
    4ba0:	fc 01       	movw	r30, r24
    4ba2:	32 2f       	mov	r19, r18
    4ba4:	11 92       	st	Z+, r1
    4ba6:	3a 95       	dec	r19
    4ba8:	e9 f7       	brne	.-6      	; 0x4ba4 <nm_get_firmware_full_info+0x2a>
    4baa:	8c 89       	ldd	r24, Y+20	; 0x14
    4bac:	9d 89       	ldd	r25, Y+21	; 0x15
    4bae:	89 2b       	or	r24, r25
    4bb0:	09 f4       	brne	.+2      	; 0x4bb4 <nm_get_firmware_full_info+0x3a>
    4bb2:	d6 c0       	rjmp	.+428    	; 0x4d60 <nm_get_firmware_full_info+0x1e6>
    4bb4:	8c 89       	ldd	r24, Y+20	; 0x14
    4bb6:	9d 89       	ldd	r25, Y+21	; 0x15
    4bb8:	26 e2       	ldi	r18, 0x26	; 38
    4bba:	30 e0       	ldi	r19, 0x00	; 0
    4bbc:	40 e0       	ldi	r20, 0x00	; 0
    4bbe:	50 e0       	ldi	r21, 0x00	; 0
    4bc0:	60 e0       	ldi	r22, 0x00	; 0
    4bc2:	0e 94 bf 13 	call	0x277e	; 0x277e <m2m_memset>
    4bc6:	ce 01       	movw	r24, r28
    4bc8:	08 96       	adiw	r24, 0x08	; 8
    4bca:	ac 01       	movw	r20, r24
    4bcc:	68 e0       	ldi	r22, 0x08	; 8
    4bce:	70 e0       	ldi	r23, 0x00	; 0
    4bd0:	8c e0       	ldi	r24, 0x0C	; 12
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    4bd8:	89 83       	std	Y+1, r24	; 0x01
    4bda:	89 81       	ldd	r24, Y+1	; 0x01
    4bdc:	88 23       	and	r24, r24
    4bde:	09 f0       	breq	.+2      	; 0x4be2 <nm_get_firmware_full_info+0x68>
    4be0:	bf c0       	rjmp	.+382    	; 0x4d60 <nm_get_firmware_full_info+0x1e6>
    4be2:	88 85       	ldd	r24, Y+8	; 0x08
    4be4:	99 85       	ldd	r25, Y+9	; 0x09
    4be6:	aa 85       	ldd	r26, Y+10	; 0x0a
    4be8:	bb 85       	ldd	r27, Y+11	; 0x0b
    4bea:	89 2b       	or	r24, r25
    4bec:	8a 2b       	or	r24, r26
    4bee:	8b 2b       	or	r24, r27
    4bf0:	09 f4       	brne	.+2      	; 0x4bf4 <nm_get_firmware_full_info+0x7a>
    4bf2:	b4 c0       	rjmp	.+360    	; 0x4d5c <nm_get_firmware_full_info+0x1e2>
    4bf4:	88 85       	ldd	r24, Y+8	; 0x08
    4bf6:	99 85       	ldd	r25, Y+9	; 0x09
    4bf8:	aa 85       	ldd	r26, Y+10	; 0x0a
    4bfa:	bb 85       	ldd	r27, Y+11	; 0x0b
    4bfc:	a3 60       	ori	r26, 0x03	; 3
    4bfe:	ae 01       	movw	r20, r28
    4c00:	44 5f       	subi	r20, 0xF4	; 244
    4c02:	5f 4f       	sbci	r21, 0xFF	; 255
    4c04:	08 e0       	ldi	r16, 0x08	; 8
    4c06:	10 e0       	ldi	r17, 0x00	; 0
    4c08:	20 e0       	ldi	r18, 0x00	; 0
    4c0a:	30 e0       	ldi	r19, 0x00	; 0
    4c0c:	bc 01       	movw	r22, r24
    4c0e:	cd 01       	movw	r24, r26
    4c10:	0e 94 58 24 	call	0x48b0	; 0x48b0 <nm_read_block>
    4c14:	89 83       	std	Y+1, r24	; 0x01
    4c16:	89 81       	ldd	r24, Y+1	; 0x01
    4c18:	88 23       	and	r24, r24
    4c1a:	09 f0       	breq	.+2      	; 0x4c1e <nm_get_firmware_full_info+0xa4>
    4c1c:	a1 c0       	rjmp	.+322    	; 0x4d60 <nm_get_firmware_full_info+0x1e6>
    4c1e:	88 89       	ldd	r24, Y+16	; 0x10
    4c20:	99 89       	ldd	r25, Y+17	; 0x11
    4c22:	aa 89       	ldd	r26, Y+18	; 0x12
    4c24:	bb 89       	ldd	r27, Y+19	; 0x13
    4c26:	88 87       	std	Y+8, r24	; 0x08
    4c28:	99 87       	std	Y+9, r25	; 0x09
    4c2a:	aa 87       	std	Y+10, r26	; 0x0a
    4c2c:	bb 87       	std	Y+11, r27	; 0x0b
    4c2e:	88 85       	ldd	r24, Y+8	; 0x08
    4c30:	99 85       	ldd	r25, Y+9	; 0x09
    4c32:	aa 85       	ldd	r26, Y+10	; 0x0a
    4c34:	bb 85       	ldd	r27, Y+11	; 0x0b
    4c36:	aa 27       	eor	r26, r26
    4c38:	bb 27       	eor	r27, r27
    4c3a:	88 87       	std	Y+8, r24	; 0x08
    4c3c:	99 87       	std	Y+9, r25	; 0x09
    4c3e:	aa 87       	std	Y+10, r26	; 0x0a
    4c40:	bb 87       	std	Y+11, r27	; 0x0b
    4c42:	88 85       	ldd	r24, Y+8	; 0x08
    4c44:	99 85       	ldd	r25, Y+9	; 0x09
    4c46:	aa 85       	ldd	r26, Y+10	; 0x0a
    4c48:	bb 85       	ldd	r27, Y+11	; 0x0b
    4c4a:	89 2b       	or	r24, r25
    4c4c:	8a 2b       	or	r24, r26
    4c4e:	8b 2b       	or	r24, r27
    4c50:	09 f4       	brne	.+2      	; 0x4c54 <nm_get_firmware_full_info+0xda>
    4c52:	81 c0       	rjmp	.+258    	; 0x4d56 <nm_get_firmware_full_info+0x1dc>
    4c54:	88 85       	ldd	r24, Y+8	; 0x08
    4c56:	99 85       	ldd	r25, Y+9	; 0x09
    4c58:	aa 85       	ldd	r26, Y+10	; 0x0a
    4c5a:	bb 85       	ldd	r27, Y+11	; 0x0b
    4c5c:	a3 60       	ori	r26, 0x03	; 3
    4c5e:	4c 89       	ldd	r20, Y+20	; 0x14
    4c60:	5d 89       	ldd	r21, Y+21	; 0x15
    4c62:	06 e2       	ldi	r16, 0x26	; 38
    4c64:	10 e0       	ldi	r17, 0x00	; 0
    4c66:	20 e0       	ldi	r18, 0x00	; 0
    4c68:	30 e0       	ldi	r19, 0x00	; 0
    4c6a:	bc 01       	movw	r22, r24
    4c6c:	cd 01       	movw	r24, r26
    4c6e:	0e 94 58 24 	call	0x48b0	; 0x48b0 <nm_read_block>
    4c72:	89 83       	std	Y+1, r24	; 0x01
    4c74:	89 81       	ldd	r24, Y+1	; 0x01
    4c76:	88 23       	and	r24, r24
    4c78:	09 f0       	breq	.+2      	; 0x4c7c <nm_get_firmware_full_info+0x102>
    4c7a:	72 c0       	rjmp	.+228    	; 0x4d60 <nm_get_firmware_full_info+0x1e6>
    4c7c:	8c 89       	ldd	r24, Y+20	; 0x14
    4c7e:	9d 89       	ldd	r25, Y+21	; 0x15
    4c80:	fc 01       	movw	r30, r24
    4c82:	84 81       	ldd	r24, Z+4	; 0x04
    4c84:	88 2f       	mov	r24, r24
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	38 2f       	mov	r19, r24
    4c8a:	22 27       	eor	r18, r18
    4c8c:	8c 89       	ldd	r24, Y+20	; 0x14
    4c8e:	9d 89       	ldd	r25, Y+21	; 0x15
    4c90:	fc 01       	movw	r30, r24
    4c92:	85 81       	ldd	r24, Z+5	; 0x05
    4c94:	88 2f       	mov	r24, r24
    4c96:	90 e0       	ldi	r25, 0x00	; 0
    4c98:	82 95       	swap	r24
    4c9a:	92 95       	swap	r25
    4c9c:	90 7f       	andi	r25, 0xF0	; 240
    4c9e:	98 27       	eor	r25, r24
    4ca0:	80 7f       	andi	r24, 0xF0	; 240
    4ca2:	98 27       	eor	r25, r24
    4ca4:	99 27       	eor	r25, r25
    4ca6:	28 2b       	or	r18, r24
    4ca8:	39 2b       	or	r19, r25
    4caa:	8c 89       	ldd	r24, Y+20	; 0x14
    4cac:	9d 89       	ldd	r25, Y+21	; 0x15
    4cae:	fc 01       	movw	r30, r24
    4cb0:	86 81       	ldd	r24, Z+6	; 0x06
    4cb2:	88 2f       	mov	r24, r24
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	8f 70       	andi	r24, 0x0F	; 15
    4cb8:	99 27       	eor	r25, r25
    4cba:	82 2b       	or	r24, r18
    4cbc:	93 2b       	or	r25, r19
    4cbe:	8a 83       	std	Y+2, r24	; 0x02
    4cc0:	9b 83       	std	Y+3, r25	; 0x03
    4cc2:	82 e5       	ldi	r24, 0x52	; 82
    4cc4:	93 e1       	ldi	r25, 0x13	; 19
    4cc6:	8c 83       	std	Y+4, r24	; 0x04
    4cc8:	9d 83       	std	Y+5, r25	; 0x05
    4cca:	8c 89       	ldd	r24, Y+20	; 0x14
    4ccc:	9d 89       	ldd	r25, Y+21	; 0x15
    4cce:	fc 01       	movw	r30, r24
    4cd0:	87 81       	ldd	r24, Z+7	; 0x07
    4cd2:	88 2f       	mov	r24, r24
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	38 2f       	mov	r19, r24
    4cd8:	22 27       	eor	r18, r18
    4cda:	8c 89       	ldd	r24, Y+20	; 0x14
    4cdc:	9d 89       	ldd	r25, Y+21	; 0x15
    4cde:	fc 01       	movw	r30, r24
    4ce0:	80 85       	ldd	r24, Z+8	; 0x08
    4ce2:	88 2f       	mov	r24, r24
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	82 95       	swap	r24
    4ce8:	92 95       	swap	r25
    4cea:	90 7f       	andi	r25, 0xF0	; 240
    4cec:	98 27       	eor	r25, r24
    4cee:	80 7f       	andi	r24, 0xF0	; 240
    4cf0:	98 27       	eor	r25, r24
    4cf2:	99 27       	eor	r25, r25
    4cf4:	28 2b       	or	r18, r24
    4cf6:	39 2b       	or	r19, r25
    4cf8:	8c 89       	ldd	r24, Y+20	; 0x14
    4cfa:	9d 89       	ldd	r25, Y+21	; 0x15
    4cfc:	fc 01       	movw	r30, r24
    4cfe:	81 85       	ldd	r24, Z+9	; 0x09
    4d00:	88 2f       	mov	r24, r24
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	8f 70       	andi	r24, 0x0F	; 15
    4d06:	99 27       	eor	r25, r25
    4d08:	82 2b       	or	r24, r18
    4d0a:	93 2b       	or	r25, r19
    4d0c:	8e 83       	std	Y+6, r24	; 0x06
    4d0e:	9f 83       	std	Y+7, r25	; 0x07
    4d10:	8a 81       	ldd	r24, Y+2	; 0x02
    4d12:	9b 81       	ldd	r25, Y+3	; 0x03
    4d14:	89 2b       	or	r24, r25
    4d16:	41 f0       	breq	.+16     	; 0x4d28 <nm_get_firmware_full_info+0x1ae>
    4d18:	8e 81       	ldd	r24, Y+6	; 0x06
    4d1a:	9f 81       	ldd	r25, Y+7	; 0x07
    4d1c:	89 2b       	or	r24, r25
    4d1e:	21 f0       	breq	.+8      	; 0x4d28 <nm_get_firmware_full_info+0x1ae>
    4d20:	8e 81       	ldd	r24, Y+6	; 0x06
    4d22:	9f 81       	ldd	r25, Y+7	; 0x07
    4d24:	89 2b       	or	r24, r25
    4d26:	19 f4       	brne	.+6      	; 0x4d2e <nm_get_firmware_full_info+0x1b4>
    4d28:	84 ef       	ldi	r24, 0xF4	; 244
    4d2a:	89 83       	std	Y+1, r24	; 0x01
    4d2c:	19 c0       	rjmp	.+50     	; 0x4d60 <nm_get_firmware_full_info+0x1e6>
    4d2e:	2c 81       	ldd	r18, Y+4	; 0x04
    4d30:	3d 81       	ldd	r19, Y+5	; 0x05
    4d32:	8e 81       	ldd	r24, Y+6	; 0x06
    4d34:	9f 81       	ldd	r25, Y+7	; 0x07
    4d36:	28 17       	cp	r18, r24
    4d38:	39 07       	cpc	r19, r25
    4d3a:	18 f4       	brcc	.+6      	; 0x4d42 <nm_get_firmware_full_info+0x1c8>
    4d3c:	83 ef       	ldi	r24, 0xF3	; 243
    4d3e:	89 83       	std	Y+1, r24	; 0x01
    4d40:	0f c0       	rjmp	.+30     	; 0x4d60 <nm_get_firmware_full_info+0x1e6>
    4d42:	2c 81       	ldd	r18, Y+4	; 0x04
    4d44:	3d 81       	ldd	r19, Y+5	; 0x05
    4d46:	8a 81       	ldd	r24, Y+2	; 0x02
    4d48:	9b 81       	ldd	r25, Y+3	; 0x03
    4d4a:	82 17       	cp	r24, r18
    4d4c:	93 07       	cpc	r25, r19
    4d4e:	40 f4       	brcc	.+16     	; 0x4d60 <nm_get_firmware_full_info+0x1e6>
    4d50:	83 ef       	ldi	r24, 0xF3	; 243
    4d52:	89 83       	std	Y+1, r24	; 0x01
    4d54:	05 c0       	rjmp	.+10     	; 0x4d60 <nm_get_firmware_full_info+0x1e6>
    4d56:	84 ef       	ldi	r24, 0xF4	; 244
    4d58:	89 83       	std	Y+1, r24	; 0x01
    4d5a:	02 c0       	rjmp	.+4      	; 0x4d60 <nm_get_firmware_full_info+0x1e6>
    4d5c:	84 ef       	ldi	r24, 0xF4	; 244
    4d5e:	89 83       	std	Y+1, r24	; 0x01
    4d60:	89 81       	ldd	r24, Y+1	; 0x01
    4d62:	65 96       	adiw	r28, 0x15	; 21
    4d64:	cd bf       	out	0x3d, r28	; 61
    4d66:	de bf       	out	0x3e, r29	; 62
    4d68:	df 91       	pop	r29
    4d6a:	cf 91       	pop	r28
    4d6c:	1f 91       	pop	r17
    4d6e:	0f 91       	pop	r16
    4d70:	08 95       	ret

00004d72 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    4d72:	cf 93       	push	r28
    4d74:	df 93       	push	r29
    4d76:	00 d0       	rcall	.+0      	; 0x4d78 <nm_drv_init+0x6>
    4d78:	00 d0       	rcall	.+0      	; 0x4d7a <nm_drv_init+0x8>
    4d7a:	cd b7       	in	r28, 0x3d	; 61
    4d7c:	de b7       	in	r29, 0x3e	; 62
    4d7e:	8b 83       	std	Y+3, r24	; 0x03
    4d80:	9c 83       	std	Y+4, r25	; 0x04
	sint8 ret = M2M_SUCCESS;
    4d82:	19 82       	std	Y+1, r1	; 0x01
	uint8 u8Mode;
	
	if(NULL != arg) {
    4d84:	8b 81       	ldd	r24, Y+3	; 0x03
    4d86:	9c 81       	ldd	r25, Y+4	; 0x04
    4d88:	89 2b       	or	r24, r25
    4d8a:	71 f0       	breq	.+28     	; 0x4da8 <nm_drv_init+0x36>
		u8Mode = *((uint8 *)arg);
    4d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    4d90:	fc 01       	movw	r30, r24
    4d92:	80 81       	ld	r24, Z
    4d94:	8a 83       	std	Y+2, r24	; 0x02
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    4d96:	8a 81       	ldd	r24, Y+2	; 0x02
    4d98:	88 23       	and	r24, r24
    4d9a:	19 f0       	breq	.+6      	; 0x4da2 <nm_drv_init+0x30>
    4d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d9e:	85 30       	cpi	r24, 0x05	; 5
    4da0:	28 f0       	brcs	.+10     	; 0x4dac <nm_drv_init+0x3a>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    4da2:	81 e0       	ldi	r24, 0x01	; 1
    4da4:	8a 83       	std	Y+2, r24	; 0x02
    4da6:	02 c0       	rjmp	.+4      	; 0x4dac <nm_drv_init+0x3a>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    4da8:	81 e0       	ldi	r24, 0x01	; 1
    4daa:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	ret = nm_bus_iface_init(NULL);
    4dac:	80 e0       	ldi	r24, 0x00	; 0
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	0e 94 ad 23 	call	0x475a	; 0x475a <nm_bus_iface_init>
    4db4:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    4db6:	89 81       	ldd	r24, Y+1	; 0x01
    4db8:	88 23       	and	r24, r24
    4dba:	31 f5       	brne	.+76     	; 0x4e08 <nm_drv_init+0x96>
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    4dbc:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <nm_spi_init>
#endif
	ret = wait_for_bootrom(u8Mode);
    4dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    4dc2:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <wait_for_bootrom>
    4dc6:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    4dc8:	89 81       	ldd	r24, Y+1	; 0x01
    4dca:	88 23       	and	r24, r24
    4dcc:	a9 f4       	brne	.+42     	; 0x4df8 <nm_drv_init+0x86>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    4dce:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd0:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <wait_for_firmware_start>
    4dd4:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    4dd6:	89 81       	ldd	r24, Y+1	; 0x01
    4dd8:	88 23       	and	r24, r24
    4dda:	81 f4       	brne	.+32     	; 0x4dfc <nm_drv_init+0x8a>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    4ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    4dde:	82 30       	cpi	r24, 0x02	; 2
    4de0:	a1 f0       	breq	.+40     	; 0x4e0a <nm_drv_init+0x98>
    4de2:	8a 81       	ldd	r24, Y+2	; 0x02
    4de4:	83 30       	cpi	r24, 0x03	; 3
    4de6:	89 f0       	breq	.+34     	; 0x4e0a <nm_drv_init+0x98>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    4de8:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <enable_interrupts>
    4dec:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    4dee:	89 81       	ldd	r24, Y+1	; 0x01
    4df0:	88 23       	and	r24, r24
    4df2:	31 f4       	brne	.+12     	; 0x4e00 <nm_drv_init+0x8e>
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
    4df4:	89 81       	ldd	r24, Y+1	; 0x01
    4df6:	0a c0       	rjmp	.+20     	; 0x4e0c <nm_drv_init+0x9a>
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
#endif
	ret = wait_for_bootrom(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    4df8:	00 00       	nop
    4dfa:	03 c0       	rjmp	.+6      	; 0x4e02 <nm_drv_init+0x90>
	}
		
	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    4dfc:	00 00       	nop
    4dfe:	01 c0       	rjmp	.+2      	; 0x4e02 <nm_drv_init+0x90>
	}
	
	ret = enable_interrupts();
	if (M2M_SUCCESS != ret) {
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
    4e00:	00 00       	nop
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    4e02:	0e 94 c2 23 	call	0x4784	; 0x4784 <nm_bus_iface_deinit>
    4e06:	01 c0       	rjmp	.+2      	; 0x4e0a <nm_drv_init+0x98>
	}
	
	ret = nm_bus_iface_init(NULL);
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi start]: fail init bus\n");
		goto ERR1;
    4e08:	00 00       	nop
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
ERR1:
	return ret;
    4e0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e0c:	24 96       	adiw	r28, 0x04	; 4
    4e0e:	cd bf       	out	0x3d, r28	; 61
    4e10:	de bf       	out	0x3e, r29	; 62
    4e12:	df 91       	pop	r29
    4e14:	cf 91       	pop	r28
    4e16:	08 95       	ret

00004e18 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    4e18:	cf 93       	push	r28
    4e1a:	df 93       	push	r29
    4e1c:	00 d0       	rcall	.+0      	; 0x4e1e <nm_drv_deinit+0x6>
    4e1e:	1f 92       	push	r1
    4e20:	cd b7       	in	r28, 0x3d	; 61
    4e22:	de b7       	in	r29, 0x3e	; 62
    4e24:	8a 83       	std	Y+2, r24	; 0x02
    4e26:	9b 83       	std	Y+3, r25	; 0x03
	sint8 ret;

	ret = chip_deinit();
    4e28:	0e 94 76 23 	call	0x46ec	; 0x46ec <chip_deinit>
    4e2c:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    4e2e:	89 81       	ldd	r24, Y+1	; 0x01
    4e30:	88 23       	and	r24, r24
    4e32:	81 f4       	brne	.+32     	; 0x4e54 <nm_drv_deinit+0x3c>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    4e34:	80 e0       	ldi	r24, 0x00	; 0
    4e36:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <spi_flash_enable>
    4e3a:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    4e3c:	89 81       	ldd	r24, Y+1	; 0x01
    4e3e:	88 23       	and	r24, r24
    4e40:	59 f4       	brne	.+22     	; 0x4e58 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    4e42:	0e 94 c2 23 	call	0x4784	; 0x4784 <nm_bus_iface_deinit>
    4e46:	89 83       	std	Y+1, r24	; 0x01
	if (M2M_SUCCESS != ret) {
    4e48:	89 81       	ldd	r24, Y+1	; 0x01
    4e4a:	88 23       	and	r24, r24
    4e4c:	39 f4       	brne	.+14     	; 0x4e5c <nm_drv_deinit+0x44>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    4e4e:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <nm_spi_deinit>
    4e52:	05 c0       	rjmp	.+10     	; 0x4e5e <nm_drv_deinit+0x46>
	sint8 ret;

	ret = chip_deinit();
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
    4e54:	00 00       	nop
    4e56:	03 c0       	rjmp	.+6      	; 0x4e5e <nm_drv_deinit+0x46>
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
    4e58:	00 00       	nop
    4e5a:	01 c0       	rjmp	.+2      	; 0x4e5e <nm_drv_deinit+0x46>
	}

	ret = nm_bus_iface_deinit();
	if (M2M_SUCCESS != ret) {
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
    4e5c:	00 00       	nop
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
#endif

ERR1:
	return ret;
    4e5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e60:	23 96       	adiw	r28, 0x03	; 3
    4e62:	cd bf       	out	0x3d, r28	; 61
    4e64:	de bf       	out	0x3e, r29	; 62
    4e66:	df 91       	pop	r29
    4e68:	cf 91       	pop	r28
    4e6a:	08 95       	ret

00004e6c <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    4e6c:	cf 93       	push	r28
    4e6e:	df 93       	push	r29
    4e70:	cd b7       	in	r28, 0x3d	; 61
    4e72:	de b7       	in	r29, 0x3e	; 62
    4e74:	2a 97       	sbiw	r28, 0x0a	; 10
    4e76:	cd bf       	out	0x3d, r28	; 61
    4e78:	de bf       	out	0x3e, r29	; 62
    4e7a:	8f 83       	std	Y+7, r24	; 0x07
    4e7c:	98 87       	std	Y+8, r25	; 0x08
    4e7e:	69 87       	std	Y+9, r22	; 0x09
    4e80:	7a 87       	std	Y+10, r23	; 0x0a
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    4e82:	19 82       	std	Y+1, r1	; 0x01
    4e84:	1a 82       	std	Y+2, r1	; 0x02
	spi.pu8OutBuf = b;
    4e86:	8f 81       	ldd	r24, Y+7	; 0x07
    4e88:	98 85       	ldd	r25, Y+8	; 0x08
    4e8a:	8b 83       	std	Y+3, r24	; 0x03
    4e8c:	9c 83       	std	Y+4, r25	; 0x04
	spi.u16Sz = sz;
    4e8e:	89 85       	ldd	r24, Y+9	; 0x09
    4e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e92:	8d 83       	std	Y+5, r24	; 0x05
    4e94:	9e 83       	std	Y+6, r25	; 0x06
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    4e96:	ce 01       	movw	r24, r28
    4e98:	01 96       	adiw	r24, 0x01	; 1
    4e9a:	bc 01       	movw	r22, r24
    4e9c:	83 e0       	ldi	r24, 0x03	; 3
    4e9e:	0e 94 41 13 	call	0x2682	; 0x2682 <nm_bus_ioctl>
}
    4ea2:	2a 96       	adiw	r28, 0x0a	; 10
    4ea4:	cd bf       	out	0x3d, r28	; 61
    4ea6:	de bf       	out	0x3e, r29	; 62
    4ea8:	df 91       	pop	r29
    4eaa:	cf 91       	pop	r28
    4eac:	08 95       	ret

00004eae <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    4eae:	cf 93       	push	r28
    4eb0:	df 93       	push	r29
    4eb2:	cd b7       	in	r28, 0x3d	; 61
    4eb4:	de b7       	in	r29, 0x3e	; 62
    4eb6:	2a 97       	sbiw	r28, 0x0a	; 10
    4eb8:	cd bf       	out	0x3d, r28	; 61
    4eba:	de bf       	out	0x3e, r29	; 62
    4ebc:	8f 83       	std	Y+7, r24	; 0x07
    4ebe:	98 87       	std	Y+8, r25	; 0x08
    4ec0:	69 87       	std	Y+9, r22	; 0x09
    4ec2:	7a 87       	std	Y+10, r23	; 0x0a
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    4ec4:	8f 81       	ldd	r24, Y+7	; 0x07
    4ec6:	98 85       	ldd	r25, Y+8	; 0x08
    4ec8:	89 83       	std	Y+1, r24	; 0x01
    4eca:	9a 83       	std	Y+2, r25	; 0x02
	spi.pu8OutBuf = NULL;
    4ecc:	1b 82       	std	Y+3, r1	; 0x03
    4ece:	1c 82       	std	Y+4, r1	; 0x04
	spi.u16Sz = sz;
    4ed0:	89 85       	ldd	r24, Y+9	; 0x09
    4ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ed4:	8d 83       	std	Y+5, r24	; 0x05
    4ed6:	9e 83       	std	Y+6, r25	; 0x06
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    4ed8:	ce 01       	movw	r24, r28
    4eda:	01 96       	adiw	r24, 0x01	; 1
    4edc:	bc 01       	movw	r22, r24
    4ede:	83 e0       	ldi	r24, 0x03	; 3
    4ee0:	0e 94 41 13 	call	0x2682	; 0x2682 <nm_bus_ioctl>
}
    4ee4:	2a 96       	adiw	r28, 0x0a	; 10
    4ee6:	cd bf       	out	0x3d, r28	; 61
    4ee8:	de bf       	out	0x3e, r29	; 62
    4eea:	df 91       	pop	r29
    4eec:	cf 91       	pop	r28
    4eee:	08 95       	ret

00004ef0 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    4ef0:	cf 93       	push	r28
    4ef2:	df 93       	push	r29
    4ef4:	cd b7       	in	r28, 0x3d	; 61
    4ef6:	de b7       	in	r29, 0x3e	; 62
    4ef8:	25 97       	sbiw	r28, 0x05	; 5
    4efa:	cd bf       	out	0x3d, r28	; 61
    4efc:	de bf       	out	0x3e, r29	; 62
    4efe:	8c 83       	std	Y+4, r24	; 0x04
    4f00:	6d 83       	std	Y+5, r22	; 0x05
	return pgm_read_byte(&(crc7_syndrome_table[(crc << 1) ^ data]));
    4f02:	8c 81       	ldd	r24, Y+4	; 0x04
    4f04:	88 2f       	mov	r24, r24
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	9c 01       	movw	r18, r24
    4f0a:	22 0f       	add	r18, r18
    4f0c:	33 1f       	adc	r19, r19
    4f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f10:	88 2f       	mov	r24, r24
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	82 27       	eor	r24, r18
    4f16:	93 27       	eor	r25, r19
    4f18:	84 53       	subi	r24, 0x34	; 52
    4f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f1c:	89 83       	std	Y+1, r24	; 0x01
    4f1e:	9a 83       	std	Y+2, r25	; 0x02
    4f20:	89 81       	ldd	r24, Y+1	; 0x01
    4f22:	9a 81       	ldd	r25, Y+2	; 0x02
    4f24:	fc 01       	movw	r30, r24
    4f26:	84 91       	lpm	r24, Z
    4f28:	8b 83       	std	Y+3, r24	; 0x03
    4f2a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4f2c:	25 96       	adiw	r28, 0x05	; 5
    4f2e:	cd bf       	out	0x3d, r28	; 61
    4f30:	de bf       	out	0x3e, r29	; 62
    4f32:	df 91       	pop	r29
    4f34:	cf 91       	pop	r28
    4f36:	08 95       	ret

00004f38 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    4f38:	cf 93       	push	r28
    4f3a:	df 93       	push	r29
    4f3c:	cd b7       	in	r28, 0x3d	; 61
    4f3e:	de b7       	in	r29, 0x3e	; 62
    4f40:	27 97       	sbiw	r28, 0x07	; 7
    4f42:	cd bf       	out	0x3d, r28	; 61
    4f44:	de bf       	out	0x3e, r29	; 62
    4f46:	89 83       	std	Y+1, r24	; 0x01
    4f48:	6a 83       	std	Y+2, r22	; 0x02
    4f4a:	7b 83       	std	Y+3, r23	; 0x03
    4f4c:	2c 83       	std	Y+4, r18	; 0x04
    4f4e:	3d 83       	std	Y+5, r19	; 0x05
    4f50:	4e 83       	std	Y+6, r20	; 0x06
    4f52:	5f 83       	std	Y+7, r21	; 0x07
	while (len--)
    4f54:	0e c0       	rjmp	.+28     	; 0x4f72 <crc7+0x3a>
		crc = crc7_byte(crc, *buffer++);
    4f56:	8a 81       	ldd	r24, Y+2	; 0x02
    4f58:	9b 81       	ldd	r25, Y+3	; 0x03
    4f5a:	9c 01       	movw	r18, r24
    4f5c:	2f 5f       	subi	r18, 0xFF	; 255
    4f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f60:	2a 83       	std	Y+2, r18	; 0x02
    4f62:	3b 83       	std	Y+3, r19	; 0x03
    4f64:	fc 01       	movw	r30, r24
    4f66:	80 81       	ld	r24, Z
    4f68:	68 2f       	mov	r22, r24
    4f6a:	89 81       	ldd	r24, Y+1	; 0x01
    4f6c:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <crc7_byte>
    4f70:	89 83       	std	Y+1, r24	; 0x01
	return pgm_read_byte(&(crc7_syndrome_table[(crc << 1) ^ data]));
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    4f72:	8c 81       	ldd	r24, Y+4	; 0x04
    4f74:	9d 81       	ldd	r25, Y+5	; 0x05
    4f76:	ae 81       	ldd	r26, Y+6	; 0x06
    4f78:	bf 81       	ldd	r27, Y+7	; 0x07
    4f7a:	9c 01       	movw	r18, r24
    4f7c:	ad 01       	movw	r20, r26
    4f7e:	21 50       	subi	r18, 0x01	; 1
    4f80:	31 09       	sbc	r19, r1
    4f82:	41 09       	sbc	r20, r1
    4f84:	51 09       	sbc	r21, r1
    4f86:	2c 83       	std	Y+4, r18	; 0x04
    4f88:	3d 83       	std	Y+5, r19	; 0x05
    4f8a:	4e 83       	std	Y+6, r20	; 0x06
    4f8c:	5f 83       	std	Y+7, r21	; 0x07
    4f8e:	89 2b       	or	r24, r25
    4f90:	8a 2b       	or	r24, r26
    4f92:	8b 2b       	or	r24, r27
    4f94:	01 f7       	brne	.-64     	; 0x4f56 <crc7+0x1e>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    4f96:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f98:	27 96       	adiw	r28, 0x07	; 7
    4f9a:	cd bf       	out	0x3d, r28	; 61
    4f9c:	de bf       	out	0x3e, r29	; 62
    4f9e:	df 91       	pop	r29
    4fa0:	cf 91       	pop	r28
    4fa2:	08 95       	ret

00004fa4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    4fa4:	af 92       	push	r10
    4fa6:	cf 92       	push	r12
    4fa8:	df 92       	push	r13
    4faa:	ef 92       	push	r14
    4fac:	ff 92       	push	r15
    4fae:	0f 93       	push	r16
    4fb0:	1f 93       	push	r17
    4fb2:	cf 93       	push	r28
    4fb4:	df 93       	push	r29
    4fb6:	cd b7       	in	r28, 0x3d	; 61
    4fb8:	de b7       	in	r29, 0x3e	; 62
    4fba:	69 97       	sbiw	r28, 0x19	; 25
    4fbc:	cd bf       	out	0x3d, r28	; 61
    4fbe:	de bf       	out	0x3e, r29	; 62
    4fc0:	8c 87       	std	Y+12, r24	; 0x0c
    4fc2:	4d 87       	std	Y+13, r20	; 0x0d
    4fc4:	5e 87       	std	Y+14, r21	; 0x0e
    4fc6:	6f 87       	std	Y+15, r22	; 0x0f
    4fc8:	78 8b       	std	Y+16, r23	; 0x10
    4fca:	09 8b       	std	Y+17, r16	; 0x11
    4fcc:	1a 8b       	std	Y+18, r17	; 0x12
    4fce:	2b 8b       	std	Y+19, r18	; 0x13
    4fd0:	3c 8b       	std	Y+20, r19	; 0x14
    4fd2:	cd 8a       	std	Y+21, r12	; 0x15
    4fd4:	de 8a       	std	Y+22, r13	; 0x16
    4fd6:	ef 8a       	std	Y+23, r14	; 0x17
    4fd8:	f8 8e       	std	Y+24, r15	; 0x18
    4fda:	a9 8e       	std	Y+25, r10	; 0x19
	uint8 bc[9];
	uint8 len = 5;
    4fdc:	85 e0       	ldi	r24, 0x05	; 5
    4fde:	89 83       	std	Y+1, r24	; 0x01
	sint8 result = N_OK;
    4fe0:	81 e0       	ldi	r24, 0x01	; 1
    4fe2:	8a 83       	std	Y+2, r24	; 0x02

	bc[0] = cmd;
    4fe4:	8c 85       	ldd	r24, Y+12	; 0x0c
    4fe6:	8b 83       	std	Y+3, r24	; 0x03
	switch (cmd) {
    4fe8:	8c 85       	ldd	r24, Y+12	; 0x0c
    4fea:	88 2f       	mov	r24, r24
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	09 2e       	mov	r0, r25
    4ff0:	00 0c       	add	r0, r0
    4ff2:	aa 0b       	sbc	r26, r26
    4ff4:	bb 0b       	sbc	r27, r27
    4ff6:	41 ec       	ldi	r20, 0xC1	; 193
    4ff8:	50 e0       	ldi	r21, 0x00	; 0
    4ffa:	2e e0       	ldi	r18, 0x0E	; 14
    4ffc:	30 e0       	ldi	r19, 0x00	; 0
    4ffe:	84 1b       	sub	r24, r20
    5000:	95 0b       	sbc	r25, r21
    5002:	28 17       	cp	r18, r24
    5004:	39 07       	cpc	r19, r25
    5006:	08 f4       	brcc	.+2      	; 0x500a <spi_cmd+0x66>
    5008:	f1 c0       	rjmp	.+482    	; 0x51ec <spi_cmd+0x248>
    500a:	89 5a       	subi	r24, 0xA9	; 169
    500c:	9f 4f       	sbci	r25, 0xFF	; 255
    500e:	fc 01       	movw	r30, r24
    5010:	0c 94 50 3b 	jmp	0x76a0	; 0x76a0 <__tablejump2__>
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    5014:	8d 85       	ldd	r24, Y+13	; 0x0d
    5016:	9e 85       	ldd	r25, Y+14	; 0x0e
    5018:	af 85       	ldd	r26, Y+15	; 0x0f
    501a:	b8 89       	ldd	r27, Y+16	; 0x10
    501c:	cd 01       	movw	r24, r26
    501e:	aa 27       	eor	r26, r26
    5020:	bb 27       	eor	r27, r27
    5022:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    5024:	8d 85       	ldd	r24, Y+13	; 0x0d
    5026:	9e 85       	ldd	r25, Y+14	; 0x0e
    5028:	af 85       	ldd	r26, Y+15	; 0x0f
    502a:	b8 89       	ldd	r27, Y+16	; 0x10
    502c:	89 2f       	mov	r24, r25
    502e:	9a 2f       	mov	r25, r26
    5030:	ab 2f       	mov	r26, r27
    5032:	bb 27       	eor	r27, r27
    5034:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)adr;
    5036:	8d 85       	ldd	r24, Y+13	; 0x0d
    5038:	8e 83       	std	Y+6, r24	; 0x06
		len = 5;
    503a:	85 e0       	ldi	r24, 0x05	; 5
    503c:	89 83       	std	Y+1, r24	; 0x01
		break;
    503e:	d8 c0       	rjmp	.+432    	; 0x51f0 <spi_cmd+0x24c>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    5040:	8d 85       	ldd	r24, Y+13	; 0x0d
    5042:	9e 85       	ldd	r25, Y+14	; 0x0e
    5044:	af 85       	ldd	r26, Y+15	; 0x0f
    5046:	b8 89       	ldd	r27, Y+16	; 0x10
    5048:	89 2f       	mov	r24, r25
    504a:	9a 2f       	mov	r25, r26
    504c:	ab 2f       	mov	r26, r27
    504e:	bb 27       	eor	r27, r27
    5050:	8c 83       	std	Y+4, r24	; 0x04
		if(clockless)  bc[1] |= (1 << 7);
    5052:	89 8d       	ldd	r24, Y+25	; 0x19
    5054:	88 23       	and	r24, r24
    5056:	19 f0       	breq	.+6      	; 0x505e <spi_cmd+0xba>
    5058:	8c 81       	ldd	r24, Y+4	; 0x04
    505a:	80 68       	ori	r24, 0x80	; 128
    505c:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)adr;
    505e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5060:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = 0x00;
    5062:	1e 82       	std	Y+6, r1	; 0x06
		len = 5;
    5064:	85 e0       	ldi	r24, 0x05	; 5
    5066:	89 83       	std	Y+1, r24	; 0x01
		break;
    5068:	c3 c0       	rjmp	.+390    	; 0x51f0 <spi_cmd+0x24c>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    506a:	1c 82       	std	Y+4, r1	; 0x04
		bc[2] = 0x00;
    506c:	1d 82       	std	Y+5, r1	; 0x05
		bc[3] = 0x00;
    506e:	1e 82       	std	Y+6, r1	; 0x06
		len = 5;
    5070:	85 e0       	ldi	r24, 0x05	; 5
    5072:	89 83       	std	Y+1, r24	; 0x01
		break;
    5074:	bd c0       	rjmp	.+378    	; 0x51f0 <spi_cmd+0x24c>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    5076:	1c 82       	std	Y+4, r1	; 0x04
		bc[2] = 0x00;
    5078:	1d 82       	std	Y+5, r1	; 0x05
		bc[3] = 0x00;
    507a:	1e 82       	std	Y+6, r1	; 0x06
		len = 5;
    507c:	85 e0       	ldi	r24, 0x05	; 5
    507e:	89 83       	std	Y+1, r24	; 0x01
		break;
    5080:	b7 c0       	rjmp	.+366    	; 0x51f0 <spi_cmd+0x24c>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    5082:	8f ef       	ldi	r24, 0xFF	; 255
    5084:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = 0xff;
    5086:	8f ef       	ldi	r24, 0xFF	; 255
    5088:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = 0xff;
    508a:	8f ef       	ldi	r24, 0xFF	; 255
    508c:	8e 83       	std	Y+6, r24	; 0x06
		len = 5;
    508e:	85 e0       	ldi	r24, 0x05	; 5
    5090:	89 83       	std	Y+1, r24	; 0x01
		break;
    5092:	ae c0       	rjmp	.+348    	; 0x51f0 <spi_cmd+0x24c>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    5094:	8d 85       	ldd	r24, Y+13	; 0x0d
    5096:	9e 85       	ldd	r25, Y+14	; 0x0e
    5098:	af 85       	ldd	r26, Y+15	; 0x0f
    509a:	b8 89       	ldd	r27, Y+16	; 0x10
    509c:	cd 01       	movw	r24, r26
    509e:	aa 27       	eor	r26, r26
    50a0:	bb 27       	eor	r27, r27
    50a2:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    50a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    50a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    50a8:	af 85       	ldd	r26, Y+15	; 0x0f
    50aa:	b8 89       	ldd	r27, Y+16	; 0x10
    50ac:	89 2f       	mov	r24, r25
    50ae:	9a 2f       	mov	r25, r26
    50b0:	ab 2f       	mov	r26, r27
    50b2:	bb 27       	eor	r27, r27
    50b4:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)adr;
    50b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    50b8:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(sz >> 8);
    50ba:	8d 89       	ldd	r24, Y+21	; 0x15
    50bc:	9e 89       	ldd	r25, Y+22	; 0x16
    50be:	af 89       	ldd	r26, Y+23	; 0x17
    50c0:	b8 8d       	ldd	r27, Y+24	; 0x18
    50c2:	89 2f       	mov	r24, r25
    50c4:	9a 2f       	mov	r25, r26
    50c6:	ab 2f       	mov	r26, r27
    50c8:	bb 27       	eor	r27, r27
    50ca:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(sz);
    50cc:	8d 89       	ldd	r24, Y+21	; 0x15
    50ce:	88 87       	std	Y+8, r24	; 0x08
		len = 7;
    50d0:	87 e0       	ldi	r24, 0x07	; 7
    50d2:	89 83       	std	Y+1, r24	; 0x01
		break;
    50d4:	8d c0       	rjmp	.+282    	; 0x51f0 <spi_cmd+0x24c>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    50d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    50d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    50da:	af 85       	ldd	r26, Y+15	; 0x0f
    50dc:	b8 89       	ldd	r27, Y+16	; 0x10
    50de:	cd 01       	movw	r24, r26
    50e0:	aa 27       	eor	r26, r26
    50e2:	bb 27       	eor	r27, r27
    50e4:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    50e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    50e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    50ea:	af 85       	ldd	r26, Y+15	; 0x0f
    50ec:	b8 89       	ldd	r27, Y+16	; 0x10
    50ee:	89 2f       	mov	r24, r25
    50f0:	9a 2f       	mov	r25, r26
    50f2:	ab 2f       	mov	r26, r27
    50f4:	bb 27       	eor	r27, r27
    50f6:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)adr;
    50f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    50fa:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(sz >> 16);
    50fc:	8d 89       	ldd	r24, Y+21	; 0x15
    50fe:	9e 89       	ldd	r25, Y+22	; 0x16
    5100:	af 89       	ldd	r26, Y+23	; 0x17
    5102:	b8 8d       	ldd	r27, Y+24	; 0x18
    5104:	cd 01       	movw	r24, r26
    5106:	aa 27       	eor	r26, r26
    5108:	bb 27       	eor	r27, r27
    510a:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(sz >> 8);
    510c:	8d 89       	ldd	r24, Y+21	; 0x15
    510e:	9e 89       	ldd	r25, Y+22	; 0x16
    5110:	af 89       	ldd	r26, Y+23	; 0x17
    5112:	b8 8d       	ldd	r27, Y+24	; 0x18
    5114:	89 2f       	mov	r24, r25
    5116:	9a 2f       	mov	r25, r26
    5118:	ab 2f       	mov	r26, r27
    511a:	bb 27       	eor	r27, r27
    511c:	88 87       	std	Y+8, r24	; 0x08
		bc[6] = (uint8)(sz);
    511e:	8d 89       	ldd	r24, Y+21	; 0x15
    5120:	89 87       	std	Y+9, r24	; 0x09
		len = 8;
    5122:	88 e0       	ldi	r24, 0x08	; 8
    5124:	89 83       	std	Y+1, r24	; 0x01
		break;
    5126:	64 c0       	rjmp	.+200    	; 0x51f0 <spi_cmd+0x24c>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    5128:	8d 85       	ldd	r24, Y+13	; 0x0d
    512a:	9e 85       	ldd	r25, Y+14	; 0x0e
    512c:	af 85       	ldd	r26, Y+15	; 0x0f
    512e:	b8 89       	ldd	r27, Y+16	; 0x10
    5130:	89 2f       	mov	r24, r25
    5132:	9a 2f       	mov	r25, r26
    5134:	ab 2f       	mov	r26, r27
    5136:	bb 27       	eor	r27, r27
    5138:	8c 83       	std	Y+4, r24	; 0x04
		if(clockless)  bc[1] |= (1 << 7);
    513a:	89 8d       	ldd	r24, Y+25	; 0x19
    513c:	88 23       	and	r24, r24
    513e:	19 f0       	breq	.+6      	; 0x5146 <spi_cmd+0x1a2>
    5140:	8c 81       	ldd	r24, Y+4	; 0x04
    5142:	80 68       	ori	r24, 0x80	; 128
    5144:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr);
    5146:	8d 85       	ldd	r24, Y+13	; 0x0d
    5148:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)(u32data >> 24);
    514a:	89 89       	ldd	r24, Y+17	; 0x11
    514c:	9a 89       	ldd	r25, Y+18	; 0x12
    514e:	ab 89       	ldd	r26, Y+19	; 0x13
    5150:	bc 89       	ldd	r27, Y+20	; 0x14
    5152:	8b 2f       	mov	r24, r27
    5154:	99 27       	eor	r25, r25
    5156:	aa 27       	eor	r26, r26
    5158:	bb 27       	eor	r27, r27
    515a:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(u32data >> 16);
    515c:	89 89       	ldd	r24, Y+17	; 0x11
    515e:	9a 89       	ldd	r25, Y+18	; 0x12
    5160:	ab 89       	ldd	r26, Y+19	; 0x13
    5162:	bc 89       	ldd	r27, Y+20	; 0x14
    5164:	cd 01       	movw	r24, r26
    5166:	aa 27       	eor	r26, r26
    5168:	bb 27       	eor	r27, r27
    516a:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(u32data >> 8);
    516c:	89 89       	ldd	r24, Y+17	; 0x11
    516e:	9a 89       	ldd	r25, Y+18	; 0x12
    5170:	ab 89       	ldd	r26, Y+19	; 0x13
    5172:	bc 89       	ldd	r27, Y+20	; 0x14
    5174:	89 2f       	mov	r24, r25
    5176:	9a 2f       	mov	r25, r26
    5178:	ab 2f       	mov	r26, r27
    517a:	bb 27       	eor	r27, r27
    517c:	88 87       	std	Y+8, r24	; 0x08
		bc[6] = (uint8)(u32data);
    517e:	89 89       	ldd	r24, Y+17	; 0x11
    5180:	89 87       	std	Y+9, r24	; 0x09
		len = 8;
    5182:	88 e0       	ldi	r24, 0x08	; 8
    5184:	89 83       	std	Y+1, r24	; 0x01
		break;
    5186:	34 c0       	rjmp	.+104    	; 0x51f0 <spi_cmd+0x24c>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    5188:	8d 85       	ldd	r24, Y+13	; 0x0d
    518a:	9e 85       	ldd	r25, Y+14	; 0x0e
    518c:	af 85       	ldd	r26, Y+15	; 0x0f
    518e:	b8 89       	ldd	r27, Y+16	; 0x10
    5190:	cd 01       	movw	r24, r26
    5192:	aa 27       	eor	r26, r26
    5194:	bb 27       	eor	r27, r27
    5196:	8c 83       	std	Y+4, r24	; 0x04
		bc[2] = (uint8)(adr >> 8);
    5198:	8d 85       	ldd	r24, Y+13	; 0x0d
    519a:	9e 85       	ldd	r25, Y+14	; 0x0e
    519c:	af 85       	ldd	r26, Y+15	; 0x0f
    519e:	b8 89       	ldd	r27, Y+16	; 0x10
    51a0:	89 2f       	mov	r24, r25
    51a2:	9a 2f       	mov	r25, r26
    51a4:	ab 2f       	mov	r26, r27
    51a6:	bb 27       	eor	r27, r27
    51a8:	8d 83       	std	Y+5, r24	; 0x05
		bc[3] = (uint8)(adr);
    51aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    51ac:	8e 83       	std	Y+6, r24	; 0x06
		bc[4] = (uint8)(u32data >> 24);
    51ae:	89 89       	ldd	r24, Y+17	; 0x11
    51b0:	9a 89       	ldd	r25, Y+18	; 0x12
    51b2:	ab 89       	ldd	r26, Y+19	; 0x13
    51b4:	bc 89       	ldd	r27, Y+20	; 0x14
    51b6:	8b 2f       	mov	r24, r27
    51b8:	99 27       	eor	r25, r25
    51ba:	aa 27       	eor	r26, r26
    51bc:	bb 27       	eor	r27, r27
    51be:	8f 83       	std	Y+7, r24	; 0x07
		bc[5] = (uint8)(u32data >> 16);
    51c0:	89 89       	ldd	r24, Y+17	; 0x11
    51c2:	9a 89       	ldd	r25, Y+18	; 0x12
    51c4:	ab 89       	ldd	r26, Y+19	; 0x13
    51c6:	bc 89       	ldd	r27, Y+20	; 0x14
    51c8:	cd 01       	movw	r24, r26
    51ca:	aa 27       	eor	r26, r26
    51cc:	bb 27       	eor	r27, r27
    51ce:	88 87       	std	Y+8, r24	; 0x08
		bc[6] = (uint8)(u32data >> 8);
    51d0:	89 89       	ldd	r24, Y+17	; 0x11
    51d2:	9a 89       	ldd	r25, Y+18	; 0x12
    51d4:	ab 89       	ldd	r26, Y+19	; 0x13
    51d6:	bc 89       	ldd	r27, Y+20	; 0x14
    51d8:	89 2f       	mov	r24, r25
    51da:	9a 2f       	mov	r25, r26
    51dc:	ab 2f       	mov	r26, r27
    51de:	bb 27       	eor	r27, r27
    51e0:	89 87       	std	Y+9, r24	; 0x09
		bc[7] = (uint8)(u32data);
    51e2:	89 89       	ldd	r24, Y+17	; 0x11
    51e4:	8a 87       	std	Y+10, r24	; 0x0a
		len = 9;
    51e6:	89 e0       	ldi	r24, 0x09	; 9
    51e8:	89 83       	std	Y+1, r24	; 0x01
		break;
    51ea:	02 c0       	rjmp	.+4      	; 0x51f0 <spi_cmd+0x24c>
	default:
		result = N_FAIL;
    51ec:	1a 82       	std	Y+2, r1	; 0x02
		break;
    51ee:	00 00       	nop
	}

	if (result) {
    51f0:	8a 81       	ldd	r24, Y+2	; 0x02
    51f2:	88 23       	and	r24, r24
    51f4:	89 f1       	breq	.+98     	; 0x5258 <spi_cmd+0x2b4>
		if (!gu8Crc_off)
    51f6:	80 91 15 2e 	lds	r24, 0x2E15	; 0x802e15 <gu8Crc_off>
    51fa:	88 23       	and	r24, r24
    51fc:	f9 f4       	brne	.+62     	; 0x523c <spi_cmd+0x298>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    51fe:	89 81       	ldd	r24, Y+1	; 0x01
    5200:	88 2f       	mov	r24, r24
    5202:	90 e0       	ldi	r25, 0x00	; 0
    5204:	8c 01       	movw	r16, r24
    5206:	01 50       	subi	r16, 0x01	; 1
    5208:	11 09       	sbc	r17, r1
    520a:	89 81       	ldd	r24, Y+1	; 0x01
    520c:	88 2f       	mov	r24, r24
    520e:	90 e0       	ldi	r25, 0x00	; 0
    5210:	01 97       	sbiw	r24, 0x01	; 1
    5212:	09 2e       	mov	r0, r25
    5214:	00 0c       	add	r0, r0
    5216:	aa 0b       	sbc	r26, r26
    5218:	bb 0b       	sbc	r27, r27
    521a:	be 01       	movw	r22, r28
    521c:	6d 5f       	subi	r22, 0xFD	; 253
    521e:	7f 4f       	sbci	r23, 0xFF	; 255
    5220:	9c 01       	movw	r18, r24
    5222:	ad 01       	movw	r20, r26
    5224:	8f e7       	ldi	r24, 0x7F	; 127
    5226:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <crc7>
    522a:	28 2f       	mov	r18, r24
    522c:	22 0f       	add	r18, r18
    522e:	ce 01       	movw	r24, r28
    5230:	03 96       	adiw	r24, 0x03	; 3
    5232:	80 0f       	add	r24, r16
    5234:	91 1f       	adc	r25, r17
    5236:	fc 01       	movw	r30, r24
    5238:	20 83       	st	Z, r18
    523a:	03 c0       	rjmp	.+6      	; 0x5242 <spi_cmd+0x29e>
		else
			len-=1;
    523c:	89 81       	ldd	r24, Y+1	; 0x01
    523e:	81 50       	subi	r24, 0x01	; 1
    5240:	89 83       	std	Y+1, r24	; 0x01

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    5242:	89 81       	ldd	r24, Y+1	; 0x01
    5244:	28 2f       	mov	r18, r24
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	ce 01       	movw	r24, r28
    524a:	03 96       	adiw	r24, 0x03	; 3
    524c:	b9 01       	movw	r22, r18
    524e:	0e 94 57 27 	call	0x4eae	; 0x4eae <nmi_spi_write>
    5252:	88 23       	and	r24, r24
    5254:	09 f0       	breq	.+2      	; 0x5258 <spi_cmd+0x2b4>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
    5256:	1a 82       	std	Y+2, r1	; 0x02
		}
	}

	return result;
    5258:	8a 81       	ldd	r24, Y+2	; 0x02
}
    525a:	69 96       	adiw	r28, 0x19	; 25
    525c:	cd bf       	out	0x3d, r28	; 61
    525e:	de bf       	out	0x3e, r29	; 62
    5260:	df 91       	pop	r29
    5262:	cf 91       	pop	r28
    5264:	1f 91       	pop	r17
    5266:	0f 91       	pop	r16
    5268:	ff 90       	pop	r15
    526a:	ef 90       	pop	r14
    526c:	df 90       	pop	r13
    526e:	cf 90       	pop	r12
    5270:	af 90       	pop	r10
    5272:	08 95       	ret

00005274 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    5274:	cf 93       	push	r28
    5276:	df 93       	push	r29
    5278:	cd b7       	in	r28, 0x3d	; 61
    527a:	de b7       	in	r29, 0x3e	; 62
    527c:	26 97       	sbiw	r28, 0x06	; 6
    527e:	cd bf       	out	0x3d, r28	; 61
    5280:	de bf       	out	0x3e, r29	; 62
    5282:	8e 83       	std	Y+6, r24	; 0x06
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    5284:	81 e0       	ldi	r24, 0x01	; 1
    5286:	8a 83       	std	Y+2, r24	; 0x02

    if (!gu8Crc_off)
    5288:	80 91 15 2e 	lds	r24, 0x2E15	; 0x802e15 <gu8Crc_off>
    528c:	88 23       	and	r24, r24
    528e:	19 f4       	brne	.+6      	; 0x5296 <spi_data_rsp+0x22>
		len = 2;
    5290:	82 e0       	ldi	r24, 0x02	; 2
    5292:	89 83       	std	Y+1, r24	; 0x01
    5294:	02 c0       	rjmp	.+4      	; 0x529a <spi_data_rsp+0x26>
	else
		len = 3;
    5296:	83 e0       	ldi	r24, 0x03	; 3
    5298:	89 83       	std	Y+1, r24	; 0x01

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    529a:	89 81       	ldd	r24, Y+1	; 0x01
    529c:	28 2f       	mov	r18, r24
    529e:	30 e0       	ldi	r19, 0x00	; 0
    52a0:	ce 01       	movw	r24, r28
    52a2:	03 96       	adiw	r24, 0x03	; 3
    52a4:	b9 01       	movw	r22, r18
    52a6:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <nmi_spi_read>
    52aa:	88 23       	and	r24, r24
    52ac:	11 f0       	breq	.+4      	; 0x52b2 <spi_data_rsp+0x3e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
		result = N_FAIL;
    52ae:	1a 82       	std	Y+2, r1	; 0x02
		goto _fail_;
    52b0:	1c c0       	rjmp	.+56     	; 0x52ea <spi_data_rsp+0x76>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    52b2:	89 81       	ldd	r24, Y+1	; 0x01
    52b4:	88 2f       	mov	r24, r24
    52b6:	90 e0       	ldi	r25, 0x00	; 0
    52b8:	01 97       	sbiw	r24, 0x01	; 1
    52ba:	9e 01       	movw	r18, r28
    52bc:	2d 5f       	subi	r18, 0xFD	; 253
    52be:	3f 4f       	sbci	r19, 0xFF	; 255
    52c0:	82 0f       	add	r24, r18
    52c2:	93 1f       	adc	r25, r19
    52c4:	fc 01       	movw	r30, r24
    52c6:	80 81       	ld	r24, Z
    52c8:	88 23       	and	r24, r24
    52ca:	69 f4       	brne	.+26     	; 0x52e6 <spi_data_rsp+0x72>
    52cc:	89 81       	ldd	r24, Y+1	; 0x01
    52ce:	88 2f       	mov	r24, r24
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	02 97       	sbiw	r24, 0x02	; 2
    52d4:	9e 01       	movw	r18, r28
    52d6:	2d 5f       	subi	r18, 0xFD	; 253
    52d8:	3f 4f       	sbci	r19, 0xFF	; 255
    52da:	82 0f       	add	r24, r18
    52dc:	93 1f       	adc	r25, r19
    52de:	fc 01       	movw	r30, r24
    52e0:	80 81       	ld	r24, Z
    52e2:	83 3c       	cpi	r24, 0xC3	; 195
    52e4:	11 f0       	breq	.+4      	; 0x52ea <spi_data_rsp+0x76>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
		result = N_FAIL;
    52e6:	1a 82       	std	Y+2, r1	; 0x02
		goto _fail_;
    52e8:	00 00       	nop
	}
_fail_:

	return result;
    52ea:	8a 81       	ldd	r24, Y+2	; 0x02
}
    52ec:	26 96       	adiw	r28, 0x06	; 6
    52ee:	cd bf       	out	0x3d, r28	; 61
    52f0:	de bf       	out	0x3e, r29	; 62
    52f2:	df 91       	pop	r29
    52f4:	cf 91       	pop	r28
    52f6:	08 95       	ret

000052f8 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    52f8:	cf 93       	push	r28
    52fa:	df 93       	push	r29
    52fc:	00 d0       	rcall	.+0      	; 0x52fe <spi_cmd_rsp+0x6>
    52fe:	00 d0       	rcall	.+0      	; 0x5300 <spi_cmd_rsp+0x8>
    5300:	cd b7       	in	r28, 0x3d	; 61
    5302:	de b7       	in	r29, 0x3e	; 62
    5304:	8c 83       	std	Y+4, r24	; 0x04
	uint8 rsp;
	sint8 result = N_OK;
    5306:	81 e0       	ldi	r24, 0x01	; 1
    5308:	89 83       	std	Y+1, r24	; 0x01
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    530a:	8c 81       	ldd	r24, Y+4	; 0x04
    530c:	8f 3c       	cpi	r24, 0xCF	; 207
    530e:	31 f0       	breq	.+12     	; 0x531c <spi_cmd_rsp+0x24>
    5310:	8c 81       	ldd	r24, Y+4	; 0x04
    5312:	85 3c       	cpi	r24, 0xC5	; 197
    5314:	19 f0       	breq	.+6      	; 0x531c <spi_cmd_rsp+0x24>
		 (cmd == CMD_TERMINATE) ||
    5316:	8c 81       	ldd	r24, Y+4	; 0x04
    5318:	86 3c       	cpi	r24, 0xC6	; 198
    531a:	51 f4       	brne	.+20     	; 0x5330 <spi_cmd_rsp+0x38>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    531c:	ce 01       	movw	r24, r28
    531e:	03 96       	adiw	r24, 0x03	; 3
    5320:	61 e0       	ldi	r22, 0x01	; 1
    5322:	70 e0       	ldi	r23, 0x00	; 0
    5324:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <nmi_spi_read>
    5328:	88 23       	and	r24, r24
    532a:	11 f0       	breq	.+4      	; 0x5330 <spi_cmd_rsp+0x38>
			result = N_FAIL;
    532c:	19 82       	std	Y+1, r1	; 0x01
			goto _fail_;
    532e:	2b c0       	rjmp	.+86     	; 0x5386 <spi_cmd_rsp+0x8e>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    5330:	8a e0       	ldi	r24, 0x0A	; 10
    5332:	8a 83       	std	Y+2, r24	; 0x02
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5334:	ce 01       	movw	r24, r28
    5336:	03 96       	adiw	r24, 0x03	; 3
    5338:	61 e0       	ldi	r22, 0x01	; 1
    533a:	70 e0       	ldi	r23, 0x00	; 0
    533c:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <nmi_spi_read>
    5340:	88 23       	and	r24, r24
    5342:	11 f0       	breq	.+4      	; 0x5348 <spi_cmd_rsp+0x50>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
    5344:	19 82       	std	Y+1, r1	; 0x01
			goto _fail_;
    5346:	1f c0       	rjmp	.+62     	; 0x5386 <spi_cmd_rsp+0x8e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    5348:	9b 81       	ldd	r25, Y+3	; 0x03
    534a:	8c 81       	ldd	r24, Y+4	; 0x04
    534c:	98 17       	cp	r25, r24
    534e:	31 f0       	breq	.+12     	; 0x535c <spi_cmd_rsp+0x64>
    5350:	8a 81       	ldd	r24, Y+2	; 0x02
    5352:	98 2f       	mov	r25, r24
    5354:	91 50       	subi	r25, 0x01	; 1
    5356:	9a 83       	std	Y+2, r25	; 0x02
    5358:	18 16       	cp	r1, r24
    535a:	64 f3       	brlt	.-40     	; 0x5334 <spi_cmd_rsp+0x3c>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    535c:	8a e0       	ldi	r24, 0x0A	; 10
    535e:	8a 83       	std	Y+2, r24	; 0x02
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5360:	ce 01       	movw	r24, r28
    5362:	03 96       	adiw	r24, 0x03	; 3
    5364:	61 e0       	ldi	r22, 0x01	; 1
    5366:	70 e0       	ldi	r23, 0x00	; 0
    5368:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <nmi_spi_read>
    536c:	88 23       	and	r24, r24
    536e:	11 f0       	breq	.+4      	; 0x5374 <spi_cmd_rsp+0x7c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
    5370:	19 82       	std	Y+1, r1	; 0x01
			goto _fail_;
    5372:	09 c0       	rjmp	.+18     	; 0x5386 <spi_cmd_rsp+0x8e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    5374:	8b 81       	ldd	r24, Y+3	; 0x03
    5376:	88 23       	and	r24, r24
    5378:	31 f0       	breq	.+12     	; 0x5386 <spi_cmd_rsp+0x8e>
    537a:	8a 81       	ldd	r24, Y+2	; 0x02
    537c:	98 2f       	mov	r25, r24
    537e:	91 50       	subi	r25, 0x01	; 1
    5380:	9a 83       	std	Y+2, r25	; 0x02
    5382:	18 16       	cp	r1, r24
    5384:	6c f3       	brlt	.-38     	; 0x5360 <spi_cmd_rsp+0x68>

_fail_:

	return result;
    5386:	89 81       	ldd	r24, Y+1	; 0x01
}
    5388:	24 96       	adiw	r28, 0x04	; 4
    538a:	cd bf       	out	0x3d, r28	; 61
    538c:	de bf       	out	0x3e, r29	; 62
    538e:	df 91       	pop	r29
    5390:	cf 91       	pop	r28
    5392:	08 95       	ret

00005394 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    5394:	cf 93       	push	r28
    5396:	df 93       	push	r29
    5398:	cd b7       	in	r28, 0x3d	; 61
    539a:	de b7       	in	r29, 0x3e	; 62
    539c:	2f 97       	sbiw	r28, 0x0f	; 15
    539e:	cd bf       	out	0x3d, r28	; 61
    53a0:	de bf       	out	0x3e, r29	; 62
    53a2:	8b 87       	std	Y+11, r24	; 0x0b
    53a4:	9c 87       	std	Y+12, r25	; 0x0c
    53a6:	6d 87       	std	Y+13, r22	; 0x0d
    53a8:	7e 87       	std	Y+14, r23	; 0x0e
    53aa:	4f 87       	std	Y+15, r20	; 0x0f
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    53ac:	81 e0       	ldi	r24, 0x01	; 1
    53ae:	8f 83       	std	Y+7, r24	; 0x07
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    53b0:	1b 82       	std	Y+3, r1	; 0x03
    53b2:	1c 82       	std	Y+4, r1	; 0x04
	do {
		if (sz <= DATA_PKT_SZ)
    53b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    53b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    53b8:	81 30       	cpi	r24, 0x01	; 1
    53ba:	90 42       	sbci	r25, 0x20	; 32
    53bc:	28 f4       	brcc	.+10     	; 0x53c8 <spi_data_read+0x34>
			nbytes = sz;
    53be:	8d 85       	ldd	r24, Y+13	; 0x0d
    53c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    53c2:	8d 83       	std	Y+5, r24	; 0x05
    53c4:	9e 83       	std	Y+6, r25	; 0x06
    53c6:	04 c0       	rjmp	.+8      	; 0x53d0 <spi_data_read+0x3c>
		else
			nbytes = DATA_PKT_SZ;
    53c8:	80 e0       	ldi	r24, 0x00	; 0
    53ca:	90 e2       	ldi	r25, 0x20	; 32
    53cc:	8d 83       	std	Y+5, r24	; 0x05
    53ce:	9e 83       	std	Y+6, r25	; 0x06

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    53d0:	8a e0       	ldi	r24, 0x0A	; 10
    53d2:	90 e0       	ldi	r25, 0x00	; 0
    53d4:	89 83       	std	Y+1, r24	; 0x01
    53d6:	9a 83       	std	Y+2, r25	; 0x02
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    53d8:	ce 01       	movw	r24, r28
    53da:	0a 96       	adiw	r24, 0x0a	; 10
    53dc:	61 e0       	ldi	r22, 0x01	; 1
    53de:	70 e0       	ldi	r23, 0x00	; 0
    53e0:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <nmi_spi_read>
    53e4:	88 23       	and	r24, r24
    53e6:	11 f0       	breq	.+4      	; 0x53ec <spi_data_read+0x58>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
    53e8:	1f 82       	std	Y+7, r1	; 0x07
				break;
    53ea:	14 c0       	rjmp	.+40     	; 0x5414 <spi_data_read+0x80>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    53ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    53ee:	82 95       	swap	r24
    53f0:	8f 70       	andi	r24, 0x0F	; 15
    53f2:	88 2f       	mov	r24, r24
    53f4:	90 e0       	ldi	r25, 0x00	; 0
    53f6:	8f 70       	andi	r24, 0x0F	; 15
    53f8:	99 27       	eor	r25, r25
    53fa:	0f 97       	sbiw	r24, 0x0f	; 15
    53fc:	51 f0       	breq	.+20     	; 0x5412 <spi_data_read+0x7e>
				break;
		} while (retry--);
    53fe:	89 81       	ldd	r24, Y+1	; 0x01
    5400:	9a 81       	ldd	r25, Y+2	; 0x02
    5402:	9c 01       	movw	r18, r24
    5404:	21 50       	subi	r18, 0x01	; 1
    5406:	31 09       	sbc	r19, r1
    5408:	29 83       	std	Y+1, r18	; 0x01
    540a:	3a 83       	std	Y+2, r19	; 0x02
    540c:	89 2b       	or	r24, r25
    540e:	21 f7       	brne	.-56     	; 0x53d8 <spi_data_read+0x44>
    5410:	01 c0       	rjmp	.+2      	; 0x5414 <spi_data_read+0x80>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    5412:	00 00       	nop
		} while (retry--);

		if (result == N_FAIL)
    5414:	8f 81       	ldd	r24, Y+7	; 0x07
    5416:	88 23       	and	r24, r24
    5418:	09 f4       	brne	.+2      	; 0x541c <spi_data_read+0x88>
    541a:	3f c0       	rjmp	.+126    	; 0x549a <spi_data_read+0x106>
			break;

		if (retry <= 0) {
    541c:	89 81       	ldd	r24, Y+1	; 0x01
    541e:	9a 81       	ldd	r25, Y+2	; 0x02
    5420:	18 16       	cp	r1, r24
    5422:	19 06       	cpc	r1, r25
    5424:	14 f0       	brlt	.+4      	; 0x542a <spi_data_read+0x96>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
    5426:	1f 82       	std	Y+7, r1	; 0x07
			break;
    5428:	39 c0       	rjmp	.+114    	; 0x549c <spi_data_read+0x108>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    542a:	4d 81       	ldd	r20, Y+5	; 0x05
    542c:	5e 81       	ldd	r21, Y+6	; 0x06
    542e:	8b 81       	ldd	r24, Y+3	; 0x03
    5430:	9c 81       	ldd	r25, Y+4	; 0x04
    5432:	2b 85       	ldd	r18, Y+11	; 0x0b
    5434:	3c 85       	ldd	r19, Y+12	; 0x0c
    5436:	82 0f       	add	r24, r18
    5438:	93 1f       	adc	r25, r19
    543a:	ba 01       	movw	r22, r20
    543c:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <nmi_spi_read>
    5440:	88 23       	and	r24, r24
    5442:	11 f0       	breq	.+4      	; 0x5448 <spi_data_read+0xb4>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
    5444:	1f 82       	std	Y+7, r1	; 0x07
			break;
    5446:	2a c0       	rjmp	.+84     	; 0x549c <spi_data_read+0x108>
		}
		if(!clockless)
    5448:	8f 85       	ldd	r24, Y+15	; 0x0f
    544a:	88 23       	and	r24, r24
    544c:	71 f4       	brne	.+28     	; 0x546a <spi_data_read+0xd6>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    544e:	80 91 15 2e 	lds	r24, 0x2E15	; 0x802e15 <gu8Crc_off>
    5452:	88 23       	and	r24, r24
    5454:	51 f4       	brne	.+20     	; 0x546a <spi_data_read+0xd6>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    5456:	ce 01       	movw	r24, r28
    5458:	08 96       	adiw	r24, 0x08	; 8
    545a:	62 e0       	ldi	r22, 0x02	; 2
    545c:	70 e0       	ldi	r23, 0x00	; 0
    545e:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <nmi_spi_read>
    5462:	88 23       	and	r24, r24
    5464:	11 f0       	breq	.+4      	; 0x546a <spi_data_read+0xd6>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
					result = N_FAIL;
    5466:	1f 82       	std	Y+7, r1	; 0x07
					break;
    5468:	19 c0       	rjmp	.+50     	; 0x549c <spi_data_read+0x108>
				}
			}
		}
		ix += nbytes;
    546a:	2b 81       	ldd	r18, Y+3	; 0x03
    546c:	3c 81       	ldd	r19, Y+4	; 0x04
    546e:	8d 81       	ldd	r24, Y+5	; 0x05
    5470:	9e 81       	ldd	r25, Y+6	; 0x06
    5472:	82 0f       	add	r24, r18
    5474:	93 1f       	adc	r25, r19
    5476:	8b 83       	std	Y+3, r24	; 0x03
    5478:	9c 83       	std	Y+4, r25	; 0x04
		sz -= nbytes;
    547a:	8d 81       	ldd	r24, Y+5	; 0x05
    547c:	9e 81       	ldd	r25, Y+6	; 0x06
    547e:	2d 85       	ldd	r18, Y+13	; 0x0d
    5480:	3e 85       	ldd	r19, Y+14	; 0x0e
    5482:	a9 01       	movw	r20, r18
    5484:	48 1b       	sub	r20, r24
    5486:	59 0b       	sbc	r21, r25
    5488:	ca 01       	movw	r24, r20
    548a:	8d 87       	std	Y+13, r24	; 0x0d
    548c:	9e 87       	std	Y+14, r25	; 0x0e

	} while (sz);
    548e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5490:	9e 85       	ldd	r25, Y+14	; 0x0e
    5492:	89 2b       	or	r24, r25
    5494:	09 f0       	breq	.+2      	; 0x5498 <spi_data_read+0x104>
    5496:	8e cf       	rjmp	.-228    	; 0x53b4 <spi_data_read+0x20>
    5498:	01 c0       	rjmp	.+2      	; 0x549c <spi_data_read+0x108>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    549a:	00 00       	nop
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    549c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    549e:	2f 96       	adiw	r28, 0x0f	; 15
    54a0:	cd bf       	out	0x3d, r28	; 61
    54a2:	de bf       	out	0x3e, r29	; 62
    54a4:	df 91       	pop	r29
    54a6:	cf 91       	pop	r28
    54a8:	08 95       	ret

000054aa <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    54aa:	cf 93       	push	r28
    54ac:	df 93       	push	r29
    54ae:	cd b7       	in	r28, 0x3d	; 61
    54b0:	de b7       	in	r29, 0x3e	; 62
    54b2:	2d 97       	sbiw	r28, 0x0d	; 13
    54b4:	cd bf       	out	0x3d, r28	; 61
    54b6:	de bf       	out	0x3e, r29	; 62
    54b8:	8a 87       	std	Y+10, r24	; 0x0a
    54ba:	9b 87       	std	Y+11, r25	; 0x0b
    54bc:	6c 87       	std	Y+12, r22	; 0x0c
    54be:	7d 87       	std	Y+13, r23	; 0x0d
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    54c0:	81 e0       	ldi	r24, 0x01	; 1
    54c2:	8d 83       	std	Y+5, r24	; 0x05
	uint8 cmd, order, crc[2] = {0};
    54c4:	18 86       	std	Y+8, r1	; 0x08
    54c6:	19 86       	std	Y+9, r1	; 0x09
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    54c8:	19 82       	std	Y+1, r1	; 0x01
    54ca:	1a 82       	std	Y+2, r1	; 0x02
	do {
		if (sz <= DATA_PKT_SZ)
    54cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    54ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    54d0:	81 30       	cpi	r24, 0x01	; 1
    54d2:	90 42       	sbci	r25, 0x20	; 32
    54d4:	28 f4       	brcc	.+10     	; 0x54e0 <spi_data_write+0x36>
			nbytes = sz;
    54d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    54d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    54da:	8b 83       	std	Y+3, r24	; 0x03
    54dc:	9c 83       	std	Y+4, r25	; 0x04
    54de:	04 c0       	rjmp	.+8      	; 0x54e8 <spi_data_write+0x3e>
		else
			nbytes = DATA_PKT_SZ;
    54e0:	80 e0       	ldi	r24, 0x00	; 0
    54e2:	90 e2       	ldi	r25, 0x20	; 32
    54e4:	8b 83       	std	Y+3, r24	; 0x03
    54e6:	9c 83       	std	Y+4, r25	; 0x04

		/**
			Write command
		**/
		cmd = 0xf0;
    54e8:	80 ef       	ldi	r24, 0xF0	; 240
    54ea:	8f 83       	std	Y+7, r24	; 0x07
		if (ix == 0)  {
    54ec:	89 81       	ldd	r24, Y+1	; 0x01
    54ee:	9a 81       	ldd	r25, Y+2	; 0x02
    54f0:	89 2b       	or	r24, r25
    54f2:	59 f4       	brne	.+22     	; 0x550a <spi_data_write+0x60>
			if (sz <= DATA_PKT_SZ)
    54f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    54f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    54f8:	81 30       	cpi	r24, 0x01	; 1
    54fa:	90 42       	sbci	r25, 0x20	; 32
    54fc:	18 f4       	brcc	.+6      	; 0x5504 <spi_data_write+0x5a>
				order = 0x3;
    54fe:	83 e0       	ldi	r24, 0x03	; 3
    5500:	8e 83       	std	Y+6, r24	; 0x06
    5502:	0d c0       	rjmp	.+26     	; 0x551e <spi_data_write+0x74>
			else
				order = 0x1;
    5504:	81 e0       	ldi	r24, 0x01	; 1
    5506:	8e 83       	std	Y+6, r24	; 0x06
    5508:	0a c0       	rjmp	.+20     	; 0x551e <spi_data_write+0x74>
		} else {
			if (sz <= DATA_PKT_SZ)
    550a:	8c 85       	ldd	r24, Y+12	; 0x0c
    550c:	9d 85       	ldd	r25, Y+13	; 0x0d
    550e:	81 30       	cpi	r24, 0x01	; 1
    5510:	90 42       	sbci	r25, 0x20	; 32
    5512:	18 f4       	brcc	.+6      	; 0x551a <spi_data_write+0x70>
				order = 0x3;
    5514:	83 e0       	ldi	r24, 0x03	; 3
    5516:	8e 83       	std	Y+6, r24	; 0x06
    5518:	02 c0       	rjmp	.+4      	; 0x551e <spi_data_write+0x74>
			else
				order = 0x2;
    551a:	82 e0       	ldi	r24, 0x02	; 2
    551c:	8e 83       	std	Y+6, r24	; 0x06
		}
		cmd |= order;
    551e:	9f 81       	ldd	r25, Y+7	; 0x07
    5520:	8e 81       	ldd	r24, Y+6	; 0x06
    5522:	89 2b       	or	r24, r25
    5524:	8f 83       	std	Y+7, r24	; 0x07
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    5526:	ce 01       	movw	r24, r28
    5528:	07 96       	adiw	r24, 0x07	; 7
    552a:	61 e0       	ldi	r22, 0x01	; 1
    552c:	70 e0       	ldi	r23, 0x00	; 0
    552e:	0e 94 57 27 	call	0x4eae	; 0x4eae <nmi_spi_write>
    5532:	88 23       	and	r24, r24
    5534:	11 f0       	breq	.+4      	; 0x553a <spi_data_write+0x90>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
			result = N_FAIL;
    5536:	1d 82       	std	Y+5, r1	; 0x05
			break;
    5538:	34 c0       	rjmp	.+104    	; 0x55a2 <spi_data_write+0xf8>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    553a:	89 81       	ldd	r24, Y+1	; 0x01
    553c:	9a 81       	ldd	r25, Y+2	; 0x02
    553e:	2a 85       	ldd	r18, Y+10	; 0x0a
    5540:	3b 85       	ldd	r19, Y+11	; 0x0b
    5542:	82 0f       	add	r24, r18
    5544:	93 1f       	adc	r25, r19
    5546:	2b 81       	ldd	r18, Y+3	; 0x03
    5548:	3c 81       	ldd	r19, Y+4	; 0x04
    554a:	b9 01       	movw	r22, r18
    554c:	0e 94 57 27 	call	0x4eae	; 0x4eae <nmi_spi_write>
    5550:	88 23       	and	r24, r24
    5552:	11 f0       	breq	.+4      	; 0x5558 <spi_data_write+0xae>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
			result = N_FAIL;
    5554:	1d 82       	std	Y+5, r1	; 0x05
			break;
    5556:	25 c0       	rjmp	.+74     	; 0x55a2 <spi_data_write+0xf8>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    5558:	80 91 15 2e 	lds	r24, 0x2E15	; 0x802e15 <gu8Crc_off>
    555c:	88 23       	and	r24, r24
    555e:	51 f4       	brne	.+20     	; 0x5574 <spi_data_write+0xca>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    5560:	ce 01       	movw	r24, r28
    5562:	08 96       	adiw	r24, 0x08	; 8
    5564:	62 e0       	ldi	r22, 0x02	; 2
    5566:	70 e0       	ldi	r23, 0x00	; 0
    5568:	0e 94 57 27 	call	0x4eae	; 0x4eae <nmi_spi_write>
    556c:	88 23       	and	r24, r24
    556e:	11 f0       	breq	.+4      	; 0x5574 <spi_data_write+0xca>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
				result = N_FAIL;
    5570:	1d 82       	std	Y+5, r1	; 0x05
				break;
    5572:	17 c0       	rjmp	.+46     	; 0x55a2 <spi_data_write+0xf8>
			}
		}

		ix += nbytes;
    5574:	29 81       	ldd	r18, Y+1	; 0x01
    5576:	3a 81       	ldd	r19, Y+2	; 0x02
    5578:	8b 81       	ldd	r24, Y+3	; 0x03
    557a:	9c 81       	ldd	r25, Y+4	; 0x04
    557c:	82 0f       	add	r24, r18
    557e:	93 1f       	adc	r25, r19
    5580:	89 83       	std	Y+1, r24	; 0x01
    5582:	9a 83       	std	Y+2, r25	; 0x02
		sz -= nbytes;
    5584:	2c 85       	ldd	r18, Y+12	; 0x0c
    5586:	3d 85       	ldd	r19, Y+13	; 0x0d
    5588:	8b 81       	ldd	r24, Y+3	; 0x03
    558a:	9c 81       	ldd	r25, Y+4	; 0x04
    558c:	a9 01       	movw	r20, r18
    558e:	48 1b       	sub	r20, r24
    5590:	59 0b       	sbc	r21, r25
    5592:	ca 01       	movw	r24, r20
    5594:	8c 87       	std	Y+12, r24	; 0x0c
    5596:	9d 87       	std	Y+13, r25	; 0x0d
	} while (sz);
    5598:	8c 85       	ldd	r24, Y+12	; 0x0c
    559a:	9d 85       	ldd	r25, Y+13	; 0x0d
    559c:	89 2b       	or	r24, r25
    559e:	09 f0       	breq	.+2      	; 0x55a2 <spi_data_write+0xf8>
    55a0:	95 cf       	rjmp	.-214    	; 0x54cc <spi_data_write+0x22>


	return result;
    55a2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    55a4:	2d 96       	adiw	r28, 0x0d	; 13
    55a6:	cd bf       	out	0x3d, r28	; 61
    55a8:	de bf       	out	0x3e, r29	; 62
    55aa:	df 91       	pop	r29
    55ac:	cf 91       	pop	r28
    55ae:	08 95       	ret

000055b0 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    55b0:	af 92       	push	r10
    55b2:	cf 92       	push	r12
    55b4:	df 92       	push	r13
    55b6:	ef 92       	push	r14
    55b8:	ff 92       	push	r15
    55ba:	0f 93       	push	r16
    55bc:	1f 93       	push	r17
    55be:	cf 93       	push	r28
    55c0:	df 93       	push	r29
    55c2:	cd b7       	in	r28, 0x3d	; 61
    55c4:	de b7       	in	r29, 0x3e	; 62
    55c6:	2c 97       	sbiw	r28, 0x0c	; 12
    55c8:	cd bf       	out	0x3d, r28	; 61
    55ca:	de bf       	out	0x3e, r29	; 62
    55cc:	6d 83       	std	Y+5, r22	; 0x05
    55ce:	7e 83       	std	Y+6, r23	; 0x06
    55d0:	8f 83       	std	Y+7, r24	; 0x07
    55d2:	98 87       	std	Y+8, r25	; 0x08
    55d4:	29 87       	std	Y+9, r18	; 0x09
    55d6:	3a 87       	std	Y+10, r19	; 0x0a
    55d8:	4b 87       	std	Y+11, r20	; 0x0b
    55da:	5c 87       	std	Y+12, r21	; 0x0c
	uint8 retry = SPI_RETRY_COUNT;
    55dc:	8a e0       	ldi	r24, 0x0A	; 10
    55de:	89 83       	std	Y+1, r24	; 0x01
	sint8 result = N_OK;
    55e0:	81 e0       	ldi	r24, 0x01	; 1
    55e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 cmd = CMD_SINGLE_WRITE;
    55e4:	89 ec       	ldi	r24, 0xC9	; 201
    55e6:	8b 83       	std	Y+3, r24	; 0x03
	uint8 clockless = 0;
    55e8:	1c 82       	std	Y+4, r1	; 0x04
	
_RETRY_:	
	if (addr <= 0x30)
    55ea:	8d 81       	ldd	r24, Y+5	; 0x05
    55ec:	9e 81       	ldd	r25, Y+6	; 0x06
    55ee:	af 81       	ldd	r26, Y+7	; 0x07
    55f0:	b8 85       	ldd	r27, Y+8	; 0x08
    55f2:	c1 97       	sbiw	r24, 0x31	; 49
    55f4:	a1 05       	cpc	r26, r1
    55f6:	b1 05       	cpc	r27, r1
    55f8:	28 f4       	brcc	.+10     	; 0x5604 <spi_write_reg+0x54>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    55fa:	83 ec       	ldi	r24, 0xC3	; 195
    55fc:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 1;
    55fe:	81 e0       	ldi	r24, 0x01	; 1
    5600:	8c 83       	std	Y+4, r24	; 0x04
    5602:	03 c0       	rjmp	.+6      	; 0x560a <spi_write_reg+0x5a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    5604:	89 ec       	ldi	r24, 0xC9	; 201
    5606:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 0;
    5608:	1c 82       	std	Y+4, r1	; 0x04
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    560a:	29 85       	ldd	r18, Y+9	; 0x09
    560c:	3a 85       	ldd	r19, Y+10	; 0x0a
    560e:	4b 85       	ldd	r20, Y+11	; 0x0b
    5610:	5c 85       	ldd	r21, Y+12	; 0x0c
    5612:	8d 81       	ldd	r24, Y+5	; 0x05
    5614:	9e 81       	ldd	r25, Y+6	; 0x06
    5616:	af 81       	ldd	r26, Y+7	; 0x07
    5618:	b8 85       	ldd	r27, Y+8	; 0x08
    561a:	ac 80       	ldd	r10, Y+4	; 0x04
    561c:	c1 2c       	mov	r12, r1
    561e:	d1 2c       	mov	r13, r1
    5620:	76 01       	movw	r14, r12
    5622:	68 94       	set
    5624:	c2 f8       	bld	r12, 2
    5626:	89 01       	movw	r16, r18
    5628:	9a 01       	movw	r18, r20
    562a:	ac 01       	movw	r20, r24
    562c:	bd 01       	movw	r22, r26
    562e:	8b 81       	ldd	r24, Y+3	; 0x03
    5630:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_cmd>
    5634:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    5636:	8a 81       	ldd	r24, Y+2	; 0x02
    5638:	81 30       	cpi	r24, 0x01	; 1
    563a:	29 f4       	brne	.+10     	; 0x5646 <spi_write_reg+0x96>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    563c:	8b 81       	ldd	r24, Y+3	; 0x03
    563e:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <spi_cmd_rsp>
    5642:	8a 83       	std	Y+2, r24	; 0x02
    5644:	01 c0       	rjmp	.+2      	; 0x5648 <spi_write_reg+0x98>

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5646:	00 00       	nop
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    5648:	8a 81       	ldd	r24, Y+2	; 0x02
    564a:	81 30       	cpi	r24, 0x01	; 1
    564c:	19 f1       	breq	.+70     	; 0x5694 <spi_write_reg+0xe4>
	{
		nm_bsp_sleep(1);
    564e:	61 e0       	ldi	r22, 0x01	; 1
    5650:	70 e0       	ldi	r23, 0x00	; 0
    5652:	80 e0       	ldi	r24, 0x00	; 0
    5654:	90 e0       	ldi	r25, 0x00	; 0
    5656:	0e 94 e6 10 	call	0x21cc	; 0x21cc <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    565a:	a1 2c       	mov	r10, r1
    565c:	c1 2c       	mov	r12, r1
    565e:	d1 2c       	mov	r13, r1
    5660:	76 01       	movw	r14, r12
    5662:	00 e0       	ldi	r16, 0x00	; 0
    5664:	10 e0       	ldi	r17, 0x00	; 0
    5666:	98 01       	movw	r18, r16
    5668:	40 e0       	ldi	r20, 0x00	; 0
    566a:	50 e0       	ldi	r21, 0x00	; 0
    566c:	ba 01       	movw	r22, r20
    566e:	8f ec       	ldi	r24, 0xCF	; 207
    5670:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    5674:	8f ec       	ldi	r24, 0xCF	; 207
    5676:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
		nm_bsp_sleep(1);
    567a:	61 e0       	ldi	r22, 0x01	; 1
    567c:	70 e0       	ldi	r23, 0x00	; 0
    567e:	80 e0       	ldi	r24, 0x00	; 0
    5680:	90 e0       	ldi	r25, 0x00	; 0
    5682:	0e 94 e6 10 	call	0x21cc	; 0x21cc <nm_bsp_sleep>
		retry--;
    5686:	89 81       	ldd	r24, Y+1	; 0x01
    5688:	81 50       	subi	r24, 0x01	; 1
    568a:	89 83       	std	Y+1, r24	; 0x01
		if(retry) goto _RETRY_;
    568c:	89 81       	ldd	r24, Y+1	; 0x01
    568e:	88 23       	and	r24, r24
    5690:	09 f0       	breq	.+2      	; 0x5694 <spi_write_reg+0xe4>
    5692:	ab cf       	rjmp	.-170    	; 0x55ea <spi_write_reg+0x3a>
	}

	return result;
    5694:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5696:	2c 96       	adiw	r28, 0x0c	; 12
    5698:	cd bf       	out	0x3d, r28	; 61
    569a:	de bf       	out	0x3e, r29	; 62
    569c:	df 91       	pop	r29
    569e:	cf 91       	pop	r28
    56a0:	1f 91       	pop	r17
    56a2:	0f 91       	pop	r16
    56a4:	ff 90       	pop	r15
    56a6:	ef 90       	pop	r14
    56a8:	df 90       	pop	r13
    56aa:	cf 90       	pop	r12
    56ac:	af 90       	pop	r10
    56ae:	08 95       	ret

000056b0 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    56b0:	af 92       	push	r10
    56b2:	cf 92       	push	r12
    56b4:	df 92       	push	r13
    56b6:	ef 92       	push	r14
    56b8:	ff 92       	push	r15
    56ba:	0f 93       	push	r16
    56bc:	1f 93       	push	r17
    56be:	cf 93       	push	r28
    56c0:	df 93       	push	r29
    56c2:	cd b7       	in	r28, 0x3d	; 61
    56c4:	de b7       	in	r29, 0x3e	; 62
    56c6:	2b 97       	sbiw	r28, 0x0b	; 11
    56c8:	cd bf       	out	0x3d, r28	; 61
    56ca:	de bf       	out	0x3e, r29	; 62
    56cc:	6c 83       	std	Y+4, r22	; 0x04
    56ce:	7d 83       	std	Y+5, r23	; 0x05
    56d0:	8e 83       	std	Y+6, r24	; 0x06
    56d2:	9f 83       	std	Y+7, r25	; 0x07
    56d4:	48 87       	std	Y+8, r20	; 0x08
    56d6:	59 87       	std	Y+9, r21	; 0x09
    56d8:	2a 87       	std	Y+10, r18	; 0x0a
    56da:	3b 87       	std	Y+11, r19	; 0x0b
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    56dc:	8a e0       	ldi	r24, 0x0A	; 10
    56de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 cmd = CMD_DMA_EXT_WRITE;
    56e0:	87 ec       	ldi	r24, 0xC7	; 199
    56e2:	8b 83       	std	Y+3, r24	; 0x03
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    56e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    56e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    56e8:	01 97       	sbiw	r24, 0x01	; 1
    56ea:	21 f4       	brne	.+8      	; 0x56f4 <nm_spi_write+0x44>
		size = 2;
    56ec:	82 e0       	ldi	r24, 0x02	; 2
    56ee:	90 e0       	ldi	r25, 0x00	; 0
    56f0:	8a 87       	std	Y+10, r24	; 0x0a
    56f2:	9b 87       	std	Y+11, r25	; 0x0b

	result = spi_cmd(cmd, addr, 0, size,0);
    56f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    56f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    56f8:	9c 01       	movw	r18, r24
    56fa:	40 e0       	ldi	r20, 0x00	; 0
    56fc:	50 e0       	ldi	r21, 0x00	; 0
    56fe:	8c 81       	ldd	r24, Y+4	; 0x04
    5700:	9d 81       	ldd	r25, Y+5	; 0x05
    5702:	ae 81       	ldd	r26, Y+6	; 0x06
    5704:	bf 81       	ldd	r27, Y+7	; 0x07
    5706:	a1 2c       	mov	r10, r1
    5708:	69 01       	movw	r12, r18
    570a:	7a 01       	movw	r14, r20
    570c:	00 e0       	ldi	r16, 0x00	; 0
    570e:	10 e0       	ldi	r17, 0x00	; 0
    5710:	98 01       	movw	r18, r16
    5712:	ac 01       	movw	r20, r24
    5714:	bd 01       	movw	r22, r26
    5716:	8b 81       	ldd	r24, Y+3	; 0x03
    5718:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_cmd>
    571c:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    571e:	89 81       	ldd	r24, Y+1	; 0x01
    5720:	81 30       	cpi	r24, 0x01	; 1
    5722:	b9 f4       	brne	.+46     	; 0x5752 <nm_spi_write+0xa2>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    5724:	8b 81       	ldd	r24, Y+3	; 0x03
    5726:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <spi_cmd_rsp>
    572a:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    572c:	89 81       	ldd	r24, Y+1	; 0x01
    572e:	81 30       	cpi	r24, 0x01	; 1
    5730:	91 f4       	brne	.+36     	; 0x5756 <nm_spi_write+0xa6>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    5732:	2a 85       	ldd	r18, Y+10	; 0x0a
    5734:	3b 85       	ldd	r19, Y+11	; 0x0b
    5736:	88 85       	ldd	r24, Y+8	; 0x08
    5738:	99 85       	ldd	r25, Y+9	; 0x09
    573a:	b9 01       	movw	r22, r18
    573c:	0e 94 55 2a 	call	0x54aa	; 0x54aa <spi_data_write>
    5740:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    5742:	89 81       	ldd	r24, Y+1	; 0x01
    5744:	81 30       	cpi	r24, 0x01	; 1
    5746:	49 f4       	brne	.+18     	; 0x575a <nm_spi_write+0xaa>
		goto _FAIL_;
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    5748:	8b 81       	ldd	r24, Y+3	; 0x03
    574a:	0e 94 3a 29 	call	0x5274	; 0x5274 <spi_data_rsp>
    574e:	89 83       	std	Y+1, r24	; 0x01
    5750:	05 c0       	rjmp	.+10     	; 0x575c <nm_spi_write+0xac>
		size = 2;

	result = spi_cmd(cmd, addr, 0, size,0);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5752:	00 00       	nop
    5754:	03 c0       	rjmp	.+6      	; 0x575c <nm_spi_write+0xac>
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5756:	00 00       	nop
    5758:	01 c0       	rjmp	.+2      	; 0x575c <nm_spi_write+0xac>
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
    575a:	00 00       	nop
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
	}
	
_FAIL_:
	if(result != N_OK)
    575c:	89 81       	ldd	r24, Y+1	; 0x01
    575e:	81 30       	cpi	r24, 0x01	; 1
    5760:	19 f1       	breq	.+70     	; 0x57a8 <nm_spi_write+0xf8>
	{
		nm_bsp_sleep(1);
    5762:	61 e0       	ldi	r22, 0x01	; 1
    5764:	70 e0       	ldi	r23, 0x00	; 0
    5766:	80 e0       	ldi	r24, 0x00	; 0
    5768:	90 e0       	ldi	r25, 0x00	; 0
    576a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    576e:	a1 2c       	mov	r10, r1
    5770:	c1 2c       	mov	r12, r1
    5772:	d1 2c       	mov	r13, r1
    5774:	76 01       	movw	r14, r12
    5776:	00 e0       	ldi	r16, 0x00	; 0
    5778:	10 e0       	ldi	r17, 0x00	; 0
    577a:	98 01       	movw	r18, r16
    577c:	40 e0       	ldi	r20, 0x00	; 0
    577e:	50 e0       	ldi	r21, 0x00	; 0
    5780:	ba 01       	movw	r22, r20
    5782:	8f ec       	ldi	r24, 0xCF	; 207
    5784:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    5788:	8f ec       	ldi	r24, 0xCF	; 207
    578a:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
    578e:	61 e0       	ldi	r22, 0x01	; 1
    5790:	70 e0       	ldi	r23, 0x00	; 0
    5792:	80 e0       	ldi	r24, 0x00	; 0
    5794:	90 e0       	ldi	r25, 0x00	; 0
    5796:	0e 94 e6 10 	call	0x21cc	; 0x21cc <nm_bsp_sleep>
		retry--;
    579a:	8a 81       	ldd	r24, Y+2	; 0x02
    579c:	81 50       	subi	r24, 0x01	; 1
    579e:	8a 83       	std	Y+2, r24	; 0x02
		if(retry) goto _RETRY_;
    57a0:	8a 81       	ldd	r24, Y+2	; 0x02
    57a2:	88 23       	and	r24, r24
    57a4:	09 f0       	breq	.+2      	; 0x57a8 <nm_spi_write+0xf8>
    57a6:	9e cf       	rjmp	.-196    	; 0x56e4 <nm_spi_write+0x34>
	}


	return result;
    57a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    57aa:	2b 96       	adiw	r28, 0x0b	; 11
    57ac:	cd bf       	out	0x3d, r28	; 61
    57ae:	de bf       	out	0x3e, r29	; 62
    57b0:	df 91       	pop	r29
    57b2:	cf 91       	pop	r28
    57b4:	1f 91       	pop	r17
    57b6:	0f 91       	pop	r16
    57b8:	ff 90       	pop	r15
    57ba:	ef 90       	pop	r14
    57bc:	df 90       	pop	r13
    57be:	cf 90       	pop	r12
    57c0:	af 90       	pop	r10
    57c2:	08 95       	ret

000057c4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    57c4:	af 92       	push	r10
    57c6:	cf 92       	push	r12
    57c8:	df 92       	push	r13
    57ca:	ef 92       	push	r14
    57cc:	ff 92       	push	r15
    57ce:	0f 93       	push	r16
    57d0:	1f 93       	push	r17
    57d2:	cf 93       	push	r28
    57d4:	df 93       	push	r29
    57d6:	cd b7       	in	r28, 0x3d	; 61
    57d8:	de b7       	in	r29, 0x3e	; 62
    57da:	2e 97       	sbiw	r28, 0x0e	; 14
    57dc:	cd bf       	out	0x3d, r28	; 61
    57de:	de bf       	out	0x3e, r29	; 62
    57e0:	69 87       	std	Y+9, r22	; 0x09
    57e2:	7a 87       	std	Y+10, r23	; 0x0a
    57e4:	8b 87       	std	Y+11, r24	; 0x0b
    57e6:	9c 87       	std	Y+12, r25	; 0x0c
    57e8:	4d 87       	std	Y+13, r20	; 0x0d
    57ea:	5e 87       	std	Y+14, r21	; 0x0e
	uint8 retry = SPI_RETRY_COUNT;
    57ec:	8a e0       	ldi	r24, 0x0A	; 10
    57ee:	89 83       	std	Y+1, r24	; 0x01
	sint8 result = N_OK;
    57f0:	81 e0       	ldi	r24, 0x01	; 1
    57f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 cmd = CMD_SINGLE_READ;
    57f4:	8a ec       	ldi	r24, 0xCA	; 202
    57f6:	8b 83       	std	Y+3, r24	; 0x03
	uint8 tmp[4];
	uint8 clockless = 0;
    57f8:	1c 82       	std	Y+4, r1	; 0x04

_RETRY_:

	if (addr <= 0xff)
    57fa:	89 85       	ldd	r24, Y+9	; 0x09
    57fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    57fe:	ab 85       	ldd	r26, Y+11	; 0x0b
    5800:	bc 85       	ldd	r27, Y+12	; 0x0c
    5802:	8f 3f       	cpi	r24, 0xFF	; 255
    5804:	91 05       	cpc	r25, r1
    5806:	a1 05       	cpc	r26, r1
    5808:	b1 05       	cpc	r27, r1
    580a:	09 f0       	breq	.+2      	; 0x580e <spi_read_reg+0x4a>
    580c:	28 f4       	brcc	.+10     	; 0x5818 <spi_read_reg+0x54>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    580e:	84 ec       	ldi	r24, 0xC4	; 196
    5810:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 1;
    5812:	81 e0       	ldi	r24, 0x01	; 1
    5814:	8c 83       	std	Y+4, r24	; 0x04
    5816:	03 c0       	rjmp	.+6      	; 0x581e <spi_read_reg+0x5a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    5818:	8a ec       	ldi	r24, 0xCA	; 202
    581a:	8b 83       	std	Y+3, r24	; 0x03
		clockless = 0;
    581c:	1c 82       	std	Y+4, r1	; 0x04
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    581e:	89 85       	ldd	r24, Y+9	; 0x09
    5820:	9a 85       	ldd	r25, Y+10	; 0x0a
    5822:	ab 85       	ldd	r26, Y+11	; 0x0b
    5824:	bc 85       	ldd	r27, Y+12	; 0x0c
    5826:	ac 80       	ldd	r10, Y+4	; 0x04
    5828:	c1 2c       	mov	r12, r1
    582a:	d1 2c       	mov	r13, r1
    582c:	76 01       	movw	r14, r12
    582e:	68 94       	set
    5830:	c2 f8       	bld	r12, 2
    5832:	00 e0       	ldi	r16, 0x00	; 0
    5834:	10 e0       	ldi	r17, 0x00	; 0
    5836:	98 01       	movw	r18, r16
    5838:	ac 01       	movw	r20, r24
    583a:	bd 01       	movw	r22, r26
    583c:	8b 81       	ldd	r24, Y+3	; 0x03
    583e:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_cmd>
    5842:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    5844:	8a 81       	ldd	r24, Y+2	; 0x02
    5846:	81 30       	cpi	r24, 0x01	; 1
    5848:	09 f0       	breq	.+2      	; 0x584c <spi_read_reg+0x88>
    584a:	46 c0       	rjmp	.+140    	; 0x58d8 <spi_read_reg+0x114>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    584c:	8b 81       	ldd	r24, Y+3	; 0x03
    584e:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <spi_cmd_rsp>
    5852:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    5854:	8a 81       	ldd	r24, Y+2	; 0x02
    5856:	81 30       	cpi	r24, 0x01	; 1
    5858:	09 f0       	breq	.+2      	; 0x585c <spi_read_reg+0x98>
    585a:	40 c0       	rjmp	.+128    	; 0x58dc <spi_read_reg+0x118>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    585c:	ce 01       	movw	r24, r28
    585e:	05 96       	adiw	r24, 0x05	; 5
    5860:	4c 81       	ldd	r20, Y+4	; 0x04
    5862:	64 e0       	ldi	r22, 0x04	; 4
    5864:	70 e0       	ldi	r23, 0x00	; 0
    5866:	0e 94 ca 29 	call	0x5394	; 0x5394 <spi_data_read>
    586a:	8a 83       	std	Y+2, r24	; 0x02
	if (result != N_OK) {
    586c:	8a 81       	ldd	r24, Y+2	; 0x02
    586e:	81 30       	cpi	r24, 0x01	; 1
    5870:	b9 f5       	brne	.+110    	; 0x58e0 <spi_read_reg+0x11c>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    5872:	8d 81       	ldd	r24, Y+5	; 0x05
    5874:	28 2f       	mov	r18, r24
    5876:	30 e0       	ldi	r19, 0x00	; 0
    5878:	40 e0       	ldi	r20, 0x00	; 0
    587a:	50 e0       	ldi	r21, 0x00	; 0
		((uint32)tmp[1] << 8) |
    587c:	8e 81       	ldd	r24, Y+6	; 0x06
    587e:	88 2f       	mov	r24, r24
    5880:	90 e0       	ldi	r25, 0x00	; 0
    5882:	a0 e0       	ldi	r26, 0x00	; 0
    5884:	b0 e0       	ldi	r27, 0x00	; 0
    5886:	ba 2f       	mov	r27, r26
    5888:	a9 2f       	mov	r26, r25
    588a:	98 2f       	mov	r25, r24
    588c:	88 27       	eor	r24, r24
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    588e:	28 2b       	or	r18, r24
    5890:	39 2b       	or	r19, r25
    5892:	4a 2b       	or	r20, r26
    5894:	5b 2b       	or	r21, r27
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    5896:	8f 81       	ldd	r24, Y+7	; 0x07
    5898:	88 2f       	mov	r24, r24
    589a:	90 e0       	ldi	r25, 0x00	; 0
    589c:	a0 e0       	ldi	r26, 0x00	; 0
    589e:	b0 e0       	ldi	r27, 0x00	; 0
    58a0:	dc 01       	movw	r26, r24
    58a2:	99 27       	eor	r25, r25
    58a4:	88 27       	eor	r24, r24
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    58a6:	28 2b       	or	r18, r24
    58a8:	39 2b       	or	r19, r25
    58aa:	4a 2b       	or	r20, r26
    58ac:	5b 2b       	or	r21, r27
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    58ae:	88 85       	ldd	r24, Y+8	; 0x08
    58b0:	88 2f       	mov	r24, r24
    58b2:	90 e0       	ldi	r25, 0x00	; 0
    58b4:	a0 e0       	ldi	r26, 0x00	; 0
    58b6:	b0 e0       	ldi	r27, 0x00	; 0
    58b8:	b8 2f       	mov	r27, r24
    58ba:	aa 27       	eor	r26, r26
    58bc:	99 27       	eor	r25, r25
    58be:	88 27       	eor	r24, r24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    58c0:	82 2b       	or	r24, r18
    58c2:	93 2b       	or	r25, r19
    58c4:	a4 2b       	or	r26, r20
    58c6:	b5 2b       	or	r27, r21
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    58c8:	2d 85       	ldd	r18, Y+13	; 0x0d
    58ca:	3e 85       	ldd	r19, Y+14	; 0x0e
    58cc:	f9 01       	movw	r30, r18
    58ce:	80 83       	st	Z, r24
    58d0:	91 83       	std	Z+1, r25	; 0x01
    58d2:	a2 83       	std	Z+2, r26	; 0x02
    58d4:	b3 83       	std	Z+3, r27	; 0x03
    58d6:	05 c0       	rjmp	.+10     	; 0x58e2 <spi_read_reg+0x11e>

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    58d8:	00 00       	nop
    58da:	03 c0       	rjmp	.+6      	; 0x58e2 <spi_read_reg+0x11e>
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    58dc:	00 00       	nop
    58de:	01 c0       	rjmp	.+2      	; 0x58e2 <spi_read_reg+0x11e>

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
    58e0:	00 00       	nop
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
		
_FAIL_:
	if(result != N_OK)
    58e2:	8a 81       	ldd	r24, Y+2	; 0x02
    58e4:	81 30       	cpi	r24, 0x01	; 1
    58e6:	19 f1       	breq	.+70     	; 0x592e <spi_read_reg+0x16a>
	{
		
		nm_bsp_sleep(1);
    58e8:	61 e0       	ldi	r22, 0x01	; 1
    58ea:	70 e0       	ldi	r23, 0x00	; 0
    58ec:	80 e0       	ldi	r24, 0x00	; 0
    58ee:	90 e0       	ldi	r25, 0x00	; 0
    58f0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    58f4:	a1 2c       	mov	r10, r1
    58f6:	c1 2c       	mov	r12, r1
    58f8:	d1 2c       	mov	r13, r1
    58fa:	76 01       	movw	r14, r12
    58fc:	00 e0       	ldi	r16, 0x00	; 0
    58fe:	10 e0       	ldi	r17, 0x00	; 0
    5900:	98 01       	movw	r18, r16
    5902:	40 e0       	ldi	r20, 0x00	; 0
    5904:	50 e0       	ldi	r21, 0x00	; 0
    5906:	ba 01       	movw	r22, r20
    5908:	8f ec       	ldi	r24, 0xCF	; 207
    590a:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    590e:	8f ec       	ldi	r24, 0xCF	; 207
    5910:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
    5914:	61 e0       	ldi	r22, 0x01	; 1
    5916:	70 e0       	ldi	r23, 0x00	; 0
    5918:	80 e0       	ldi	r24, 0x00	; 0
    591a:	90 e0       	ldi	r25, 0x00	; 0
    591c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <nm_bsp_sleep>
		retry--;
    5920:	89 81       	ldd	r24, Y+1	; 0x01
    5922:	81 50       	subi	r24, 0x01	; 1
    5924:	89 83       	std	Y+1, r24	; 0x01
		if(retry) goto _RETRY_;
    5926:	89 81       	ldd	r24, Y+1	; 0x01
    5928:	88 23       	and	r24, r24
    592a:	09 f0       	breq	.+2      	; 0x592e <spi_read_reg+0x16a>
    592c:	66 cf       	rjmp	.-308    	; 0x57fa <spi_read_reg+0x36>
	}
		
	return result;
    592e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5930:	2e 96       	adiw	r28, 0x0e	; 14
    5932:	cd bf       	out	0x3d, r28	; 61
    5934:	de bf       	out	0x3e, r29	; 62
    5936:	df 91       	pop	r29
    5938:	cf 91       	pop	r28
    593a:	1f 91       	pop	r17
    593c:	0f 91       	pop	r16
    593e:	ff 90       	pop	r15
    5940:	ef 90       	pop	r14
    5942:	df 90       	pop	r13
    5944:	cf 90       	pop	r12
    5946:	af 90       	pop	r10
    5948:	08 95       	ret

0000594a <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    594a:	af 92       	push	r10
    594c:	cf 92       	push	r12
    594e:	df 92       	push	r13
    5950:	ef 92       	push	r14
    5952:	ff 92       	push	r15
    5954:	0f 93       	push	r16
    5956:	1f 93       	push	r17
    5958:	cf 93       	push	r28
    595a:	df 93       	push	r29
    595c:	cd b7       	in	r28, 0x3d	; 61
    595e:	de b7       	in	r29, 0x3e	; 62
    5960:	2e 97       	sbiw	r28, 0x0e	; 14
    5962:	cd bf       	out	0x3d, r28	; 61
    5964:	de bf       	out	0x3e, r29	; 62
    5966:	6f 83       	std	Y+7, r22	; 0x07
    5968:	78 87       	std	Y+8, r23	; 0x08
    596a:	89 87       	std	Y+9, r24	; 0x09
    596c:	9a 87       	std	Y+10, r25	; 0x0a
    596e:	4b 87       	std	Y+11, r20	; 0x0b
    5970:	5c 87       	std	Y+12, r21	; 0x0c
    5972:	2d 87       	std	Y+13, r18	; 0x0d
    5974:	3e 87       	std	Y+14, r19	; 0x0e
	uint8 cmd = CMD_DMA_EXT_READ;
    5976:	88 ec       	ldi	r24, 0xC8	; 200
    5978:	8c 83       	std	Y+4, r24	; 0x04
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    597a:	8a e0       	ldi	r24, 0x0A	; 10
    597c:	8a 83       	std	Y+2, r24	; 0x02
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    597e:	1b 82       	std	Y+3, r1	; 0x03

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    5980:	8d 85       	ldd	r24, Y+13	; 0x0d
    5982:	9e 85       	ldd	r25, Y+14	; 0x0e
    5984:	01 97       	sbiw	r24, 0x01	; 1
    5986:	31 f4       	brne	.+12     	; 0x5994 <nm_spi_read+0x4a>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    5988:	82 e0       	ldi	r24, 0x02	; 2
    598a:	90 e0       	ldi	r25, 0x00	; 0
    598c:	8d 87       	std	Y+13, r24	; 0x0d
    598e:	9e 87       	std	Y+14, r25	; 0x0e
		single_byte_workaround = 1;
    5990:	81 e0       	ldi	r24, 0x01	; 1
    5992:	8b 83       	std	Y+3, r24	; 0x03
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    5994:	8d 85       	ldd	r24, Y+13	; 0x0d
    5996:	9e 85       	ldd	r25, Y+14	; 0x0e
    5998:	9c 01       	movw	r18, r24
    599a:	40 e0       	ldi	r20, 0x00	; 0
    599c:	50 e0       	ldi	r21, 0x00	; 0
    599e:	8f 81       	ldd	r24, Y+7	; 0x07
    59a0:	98 85       	ldd	r25, Y+8	; 0x08
    59a2:	a9 85       	ldd	r26, Y+9	; 0x09
    59a4:	ba 85       	ldd	r27, Y+10	; 0x0a
    59a6:	a1 2c       	mov	r10, r1
    59a8:	69 01       	movw	r12, r18
    59aa:	7a 01       	movw	r14, r20
    59ac:	00 e0       	ldi	r16, 0x00	; 0
    59ae:	10 e0       	ldi	r17, 0x00	; 0
    59b0:	98 01       	movw	r18, r16
    59b2:	ac 01       	movw	r20, r24
    59b4:	bd 01       	movw	r22, r26
    59b6:	8c 81       	ldd	r24, Y+4	; 0x04
    59b8:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_cmd>
    59bc:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    59be:	89 81       	ldd	r24, Y+1	; 0x01
    59c0:	81 30       	cpi	r24, 0x01	; 1
    59c2:	19 f5       	brne	.+70     	; 0x5a0a <nm_spi_read+0xc0>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    59c4:	8c 81       	ldd	r24, Y+4	; 0x04
    59c6:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <spi_cmd_rsp>
    59ca:	89 83       	std	Y+1, r24	; 0x01
	if (result != N_OK) {
    59cc:	89 81       	ldd	r24, Y+1	; 0x01
    59ce:	81 30       	cpi	r24, 0x01	; 1
    59d0:	f1 f4       	brne	.+60     	; 0x5a0e <nm_spi_read+0xc4>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    59d2:	8b 81       	ldd	r24, Y+3	; 0x03
    59d4:	88 23       	and	r24, r24
    59d6:	79 f0       	breq	.+30     	; 0x59f6 <nm_spi_read+0xac>
	{
		result = spi_data_read(tmp, size,0);
    59d8:	2d 85       	ldd	r18, Y+13	; 0x0d
    59da:	3e 85       	ldd	r19, Y+14	; 0x0e
    59dc:	ce 01       	movw	r24, r28
    59de:	05 96       	adiw	r24, 0x05	; 5
    59e0:	40 e0       	ldi	r20, 0x00	; 0
    59e2:	b9 01       	movw	r22, r18
    59e4:	0e 94 ca 29 	call	0x5394	; 0x5394 <spi_data_read>
    59e8:	89 83       	std	Y+1, r24	; 0x01
		buf[0] = tmp[0];
    59ea:	2d 81       	ldd	r18, Y+5	; 0x05
    59ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    59ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    59f0:	fc 01       	movw	r30, r24
    59f2:	20 83       	st	Z, r18
    59f4:	0d c0       	rjmp	.+26     	; 0x5a10 <nm_spi_read+0xc6>
	}
	else
		result = spi_data_read(buf, size,0);
    59f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    59f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    59fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    59fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    59fe:	40 e0       	ldi	r20, 0x00	; 0
    5a00:	b9 01       	movw	r22, r18
    5a02:	0e 94 ca 29 	call	0x5394	; 0x5394 <spi_data_read>
    5a06:	89 83       	std	Y+1, r24	; 0x01
    5a08:	03 c0       	rjmp	.+6      	; 0x5a10 <nm_spi_read+0xc6>
		single_byte_workaround = 1;
	}
	result = spi_cmd(cmd, addr, 0, size,0);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5a0a:	00 00       	nop
    5a0c:	01 c0       	rjmp	.+2      	; 0x5a10 <nm_spi_read+0xc6>
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
    5a0e:	00 00       	nop
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    5a10:	89 81       	ldd	r24, Y+1	; 0x01
    5a12:	81 30       	cpi	r24, 0x01	; 1
    5a14:	19 f1       	breq	.+70     	; 0x5a5c <nm_spi_read+0x112>
	{
		nm_bsp_sleep(1);
    5a16:	61 e0       	ldi	r22, 0x01	; 1
    5a18:	70 e0       	ldi	r23, 0x00	; 0
    5a1a:	80 e0       	ldi	r24, 0x00	; 0
    5a1c:	90 e0       	ldi	r25, 0x00	; 0
    5a1e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5a22:	a1 2c       	mov	r10, r1
    5a24:	c1 2c       	mov	r12, r1
    5a26:	d1 2c       	mov	r13, r1
    5a28:	76 01       	movw	r14, r12
    5a2a:	00 e0       	ldi	r16, 0x00	; 0
    5a2c:	10 e0       	ldi	r17, 0x00	; 0
    5a2e:	98 01       	movw	r18, r16
    5a30:	40 e0       	ldi	r20, 0x00	; 0
    5a32:	50 e0       	ldi	r21, 0x00	; 0
    5a34:	ba 01       	movw	r22, r20
    5a36:	8f ec       	ldi	r24, 0xCF	; 207
    5a38:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    5a3c:	8f ec       	ldi	r24, 0xCF	; 207
    5a3e:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
    5a42:	61 e0       	ldi	r22, 0x01	; 1
    5a44:	70 e0       	ldi	r23, 0x00	; 0
    5a46:	80 e0       	ldi	r24, 0x00	; 0
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <nm_bsp_sleep>
		retry--;
    5a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a50:	81 50       	subi	r24, 0x01	; 1
    5a52:	8a 83       	std	Y+2, r24	; 0x02
		if(retry) goto _RETRY_;
    5a54:	8a 81       	ldd	r24, Y+2	; 0x02
    5a56:	88 23       	and	r24, r24
    5a58:	09 f0       	breq	.+2      	; 0x5a5c <nm_spi_read+0x112>
    5a5a:	92 cf       	rjmp	.-220    	; 0x5980 <nm_spi_read+0x36>
	}

	return result;
    5a5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    5a5e:	2e 96       	adiw	r28, 0x0e	; 14
    5a60:	cd bf       	out	0x3d, r28	; 61
    5a62:	de bf       	out	0x3e, r29	; 62
    5a64:	df 91       	pop	r29
    5a66:	cf 91       	pop	r28
    5a68:	1f 91       	pop	r17
    5a6a:	0f 91       	pop	r16
    5a6c:	ff 90       	pop	r15
    5a6e:	ef 90       	pop	r14
    5a70:	df 90       	pop	r13
    5a72:	cf 90       	pop	r12
    5a74:	af 90       	pop	r10
    5a76:	08 95       	ret

00005a78 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    5a78:	cf 93       	push	r28
    5a7a:	df 93       	push	r29
    5a7c:	00 d0       	rcall	.+0      	; 0x5a7e <spi_init_pkt_sz+0x6>
    5a7e:	00 d0       	rcall	.+0      	; 0x5a80 <spi_init_pkt_sz+0x8>
    5a80:	cd b7       	in	r28, 0x3d	; 61
    5a82:	de b7       	in	r29, 0x3e	; 62
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    5a84:	64 e2       	ldi	r22, 0x24	; 36
    5a86:	78 ee       	ldi	r23, 0xE8	; 232
    5a88:	80 e0       	ldi	r24, 0x00	; 0
    5a8a:	90 e0       	ldi	r25, 0x00	; 0
    5a8c:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <nm_spi_read_reg>
    5a90:	dc 01       	movw	r26, r24
    5a92:	cb 01       	movw	r24, r22
    5a94:	89 83       	std	Y+1, r24	; 0x01
    5a96:	9a 83       	std	Y+2, r25	; 0x02
    5a98:	ab 83       	std	Y+3, r26	; 0x03
    5a9a:	bc 83       	std	Y+4, r27	; 0x04
	val32 &= ~(0x7 << 4);
    5a9c:	89 81       	ldd	r24, Y+1	; 0x01
    5a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    5aa0:	ab 81       	ldd	r26, Y+3	; 0x03
    5aa2:	bc 81       	ldd	r27, Y+4	; 0x04
    5aa4:	8f 78       	andi	r24, 0x8F	; 143
    5aa6:	89 83       	std	Y+1, r24	; 0x01
    5aa8:	9a 83       	std	Y+2, r25	; 0x02
    5aaa:	ab 83       	std	Y+3, r26	; 0x03
    5aac:	bc 83       	std	Y+4, r27	; 0x04
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    5aae:	89 81       	ldd	r24, Y+1	; 0x01
    5ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ab2:	ab 81       	ldd	r26, Y+3	; 0x03
    5ab4:	bc 81       	ldd	r27, Y+4	; 0x04
    5ab6:	80 65       	ori	r24, 0x50	; 80
    5ab8:	89 83       	std	Y+1, r24	; 0x01
    5aba:	9a 83       	std	Y+2, r25	; 0x02
    5abc:	ab 83       	std	Y+3, r26	; 0x03
    5abe:	bc 83       	std	Y+4, r27	; 0x04
    5ac0:	00 00       	nop

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    5ac2:	89 81       	ldd	r24, Y+1	; 0x01
    5ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ac6:	ab 81       	ldd	r26, Y+3	; 0x03
    5ac8:	bc 81       	ldd	r27, Y+4	; 0x04
    5aca:	9c 01       	movw	r18, r24
    5acc:	ad 01       	movw	r20, r26
    5ace:	64 e2       	ldi	r22, 0x24	; 36
    5ad0:	78 ee       	ldi	r23, 0xE8	; 232
    5ad2:	80 e0       	ldi	r24, 0x00	; 0
    5ad4:	90 e0       	ldi	r25, 0x00	; 0
    5ad6:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <nm_spi_write_reg>
}
    5ada:	00 00       	nop
    5adc:	24 96       	adiw	r28, 0x04	; 4
    5ade:	cd bf       	out	0x3d, r28	; 61
    5ae0:	de bf       	out	0x3e, r29	; 62
    5ae2:	df 91       	pop	r29
    5ae4:	cf 91       	pop	r28
    5ae6:	08 95       	ret

00005ae8 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    5ae8:	af 92       	push	r10
    5aea:	cf 92       	push	r12
    5aec:	df 92       	push	r13
    5aee:	ef 92       	push	r14
    5af0:	ff 92       	push	r15
    5af2:	0f 93       	push	r16
    5af4:	1f 93       	push	r17
    5af6:	cf 93       	push	r28
    5af8:	df 93       	push	r29
    5afa:	cd b7       	in	r28, 0x3d	; 61
    5afc:	de b7       	in	r29, 0x3e	; 62
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5afe:	a1 2c       	mov	r10, r1
    5b00:	c1 2c       	mov	r12, r1
    5b02:	d1 2c       	mov	r13, r1
    5b04:	76 01       	movw	r14, r12
    5b06:	00 e0       	ldi	r16, 0x00	; 0
    5b08:	10 e0       	ldi	r17, 0x00	; 0
    5b0a:	98 01       	movw	r18, r16
    5b0c:	40 e0       	ldi	r20, 0x00	; 0
    5b0e:	50 e0       	ldi	r21, 0x00	; 0
    5b10:	ba 01       	movw	r22, r20
    5b12:	8f ec       	ldi	r24, 0xCF	; 207
    5b14:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
    5b18:	8f ec       	ldi	r24, 0xCF	; 207
    5b1a:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <spi_cmd_rsp>
	return M2M_SUCCESS;
    5b1e:	80 e0       	ldi	r24, 0x00	; 0
}
    5b20:	df 91       	pop	r29
    5b22:	cf 91       	pop	r28
    5b24:	1f 91       	pop	r17
    5b26:	0f 91       	pop	r16
    5b28:	ff 90       	pop	r15
    5b2a:	ef 90       	pop	r14
    5b2c:	df 90       	pop	r13
    5b2e:	cf 90       	pop	r12
    5b30:	af 90       	pop	r10
    5b32:	08 95       	ret

00005b34 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    5b34:	cf 93       	push	r28
    5b36:	df 93       	push	r29
    5b38:	cd b7       	in	r28, 0x3d	; 61
    5b3a:	de b7       	in	r29, 0x3e	; 62
    5b3c:	28 97       	sbiw	r28, 0x08	; 8
    5b3e:	cd bf       	out	0x3d, r28	; 61
    5b40:	de bf       	out	0x3e, r29	; 62
	uint32 chipid;
	uint32 reg = 0;
    5b42:	1d 82       	std	Y+5, r1	; 0x05
    5b44:	1e 82       	std	Y+6, r1	; 0x06
    5b46:	1f 82       	std	Y+7, r1	; 0x07
    5b48:	18 86       	std	Y+8, r1	; 0x08
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    5b4a:	10 92 15 2e 	sts	0x2E15, r1	; 0x802e15 <gu8Crc_off>

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    5b4e:	ce 01       	movw	r24, r28
    5b50:	05 96       	adiw	r24, 0x05	; 5
    5b52:	ac 01       	movw	r20, r24
    5b54:	64 e2       	ldi	r22, 0x24	; 36
    5b56:	78 ee       	ldi	r23, 0xE8	; 232
    5b58:	80 e0       	ldi	r24, 0x00	; 0
    5b5a:	90 e0       	ldi	r25, 0x00	; 0
    5b5c:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <spi_read_reg>
    5b60:	88 23       	and	r24, r24
    5b62:	81 f4       	brne	.+32     	; 0x5b84 <nm_spi_init+0x50>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    5b64:	81 e0       	ldi	r24, 0x01	; 1
    5b66:	80 93 15 2e 	sts	0x2E15, r24	; 0x802e15 <gu8Crc_off>
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    5b6a:	ce 01       	movw	r24, r28
    5b6c:	05 96       	adiw	r24, 0x05	; 5
    5b6e:	ac 01       	movw	r20, r24
    5b70:	64 e2       	ldi	r22, 0x24	; 36
    5b72:	78 ee       	ldi	r23, 0xE8	; 232
    5b74:	80 e0       	ldi	r24, 0x00	; 0
    5b76:	90 e0       	ldi	r25, 0x00	; 0
    5b78:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <spi_read_reg>
    5b7c:	88 23       	and	r24, r24
    5b7e:	11 f4       	brne	.+4      	; 0x5b84 <nm_spi_init+0x50>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
    5b80:	80 e0       	ldi	r24, 0x00	; 0
    5b82:	42 c0       	rjmp	.+132    	; 0x5c08 <nm_spi_init+0xd4>
		}
	}
	if(gu8Crc_off == 0)
    5b84:	80 91 15 2e 	lds	r24, 0x2E15	; 0x802e15 <gu8Crc_off>
    5b88:	88 23       	and	r24, r24
    5b8a:	71 f5       	brne	.+92     	; 0x5be8 <nm_spi_init+0xb4>
	{
		reg &= ~0xc;	/* disable crc checking */
    5b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    5b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    5b90:	af 81       	ldd	r26, Y+7	; 0x07
    5b92:	b8 85       	ldd	r27, Y+8	; 0x08
    5b94:	83 7f       	andi	r24, 0xF3	; 243
    5b96:	8d 83       	std	Y+5, r24	; 0x05
    5b98:	9e 83       	std	Y+6, r25	; 0x06
    5b9a:	af 83       	std	Y+7, r26	; 0x07
    5b9c:	b8 87       	std	Y+8, r27	; 0x08
		reg &= ~0x70;
    5b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    5ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    5ba2:	af 81       	ldd	r26, Y+7	; 0x07
    5ba4:	b8 85       	ldd	r27, Y+8	; 0x08
    5ba6:	8f 78       	andi	r24, 0x8F	; 143
    5ba8:	8d 83       	std	Y+5, r24	; 0x05
    5baa:	9e 83       	std	Y+6, r25	; 0x06
    5bac:	af 83       	std	Y+7, r26	; 0x07
    5bae:	b8 87       	std	Y+8, r27	; 0x08
		reg |= (0x5 << 4);
    5bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    5bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    5bb4:	af 81       	ldd	r26, Y+7	; 0x07
    5bb6:	b8 85       	ldd	r27, Y+8	; 0x08
    5bb8:	80 65       	ori	r24, 0x50	; 80
    5bba:	8d 83       	std	Y+5, r24	; 0x05
    5bbc:	9e 83       	std	Y+6, r25	; 0x06
    5bbe:	af 83       	std	Y+7, r26	; 0x07
    5bc0:	b8 87       	std	Y+8, r27	; 0x08
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    5bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    5bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    5bc6:	af 81       	ldd	r26, Y+7	; 0x07
    5bc8:	b8 85       	ldd	r27, Y+8	; 0x08
    5bca:	9c 01       	movw	r18, r24
    5bcc:	ad 01       	movw	r20, r26
    5bce:	64 e2       	ldi	r22, 0x24	; 36
    5bd0:	78 ee       	ldi	r23, 0xE8	; 232
    5bd2:	80 e0       	ldi	r24, 0x00	; 0
    5bd4:	90 e0       	ldi	r25, 0x00	; 0
    5bd6:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <spi_write_reg>
    5bda:	88 23       	and	r24, r24
    5bdc:	11 f4       	brne	.+4      	; 0x5be2 <nm_spi_init+0xae>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
    5bde:	80 e0       	ldi	r24, 0x00	; 0
    5be0:	13 c0       	rjmp	.+38     	; 0x5c08 <nm_spi_init+0xd4>
		}
		gu8Crc_off = 1;
    5be2:	81 e0       	ldi	r24, 0x01	; 1
    5be4:	80 93 15 2e 	sts	0x2E15, r24	; 0x802e15 <gu8Crc_off>
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    5be8:	ce 01       	movw	r24, r28
    5bea:	01 96       	adiw	r24, 0x01	; 1
    5bec:	ac 01       	movw	r20, r24
    5bee:	60 e0       	ldi	r22, 0x00	; 0
    5bf0:	70 e1       	ldi	r23, 0x10	; 16
    5bf2:	80 e0       	ldi	r24, 0x00	; 0
    5bf4:	90 e0       	ldi	r25, 0x00	; 0
    5bf6:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <spi_read_reg>
    5bfa:	88 23       	and	r24, r24
    5bfc:	11 f4       	brne	.+4      	; 0x5c02 <nm_spi_init+0xce>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
    5bfe:	8a ef       	ldi	r24, 0xFA	; 250
    5c00:	03 c0       	rjmp	.+6      	; 0x5c08 <nm_spi_init+0xd4>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    5c02:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <spi_init_pkt_sz>


	return M2M_SUCCESS;
    5c06:	80 e0       	ldi	r24, 0x00	; 0
}
    5c08:	28 96       	adiw	r28, 0x08	; 8
    5c0a:	cd bf       	out	0x3d, r28	; 61
    5c0c:	de bf       	out	0x3e, r29	; 62
    5c0e:	df 91       	pop	r29
    5c10:	cf 91       	pop	r28
    5c12:	08 95       	ret

00005c14 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    5c14:	cf 93       	push	r28
    5c16:	df 93       	push	r29
    5c18:	cd b7       	in	r28, 0x3d	; 61
    5c1a:	de b7       	in	r29, 0x3e	; 62
	gu8Crc_off = 0;
    5c1c:	10 92 15 2e 	sts	0x2E15, r1	; 0x802e15 <gu8Crc_off>
	return M2M_SUCCESS;
    5c20:	80 e0       	ldi	r24, 0x00	; 0
}
    5c22:	df 91       	pop	r29
    5c24:	cf 91       	pop	r28
    5c26:	08 95       	ret

00005c28 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    5c28:	cf 93       	push	r28
    5c2a:	df 93       	push	r29
    5c2c:	cd b7       	in	r28, 0x3d	; 61
    5c2e:	de b7       	in	r29, 0x3e	; 62
    5c30:	28 97       	sbiw	r28, 0x08	; 8
    5c32:	cd bf       	out	0x3d, r28	; 61
    5c34:	de bf       	out	0x3e, r29	; 62
    5c36:	6d 83       	std	Y+5, r22	; 0x05
    5c38:	7e 83       	std	Y+6, r23	; 0x06
    5c3a:	8f 83       	std	Y+7, r24	; 0x07
    5c3c:	98 87       	std	Y+8, r25	; 0x08
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    5c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    5c40:	9e 81       	ldd	r25, Y+6	; 0x06
    5c42:	af 81       	ldd	r26, Y+7	; 0x07
    5c44:	b8 85       	ldd	r27, Y+8	; 0x08
    5c46:	9e 01       	movw	r18, r28
    5c48:	2f 5f       	subi	r18, 0xFF	; 255
    5c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    5c4c:	a9 01       	movw	r20, r18
    5c4e:	bc 01       	movw	r22, r24
    5c50:	cd 01       	movw	r24, r26
    5c52:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <spi_read_reg>

	return u32Val;
    5c56:	89 81       	ldd	r24, Y+1	; 0x01
    5c58:	9a 81       	ldd	r25, Y+2	; 0x02
    5c5a:	ab 81       	ldd	r26, Y+3	; 0x03
    5c5c:	bc 81       	ldd	r27, Y+4	; 0x04
}
    5c5e:	bc 01       	movw	r22, r24
    5c60:	cd 01       	movw	r24, r26
    5c62:	28 96       	adiw	r28, 0x08	; 8
    5c64:	cd bf       	out	0x3d, r28	; 61
    5c66:	de bf       	out	0x3e, r29	; 62
    5c68:	df 91       	pop	r29
    5c6a:	cf 91       	pop	r28
    5c6c:	08 95       	ret

00005c6e <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    5c6e:	cf 93       	push	r28
    5c70:	df 93       	push	r29
    5c72:	cd b7       	in	r28, 0x3d	; 61
    5c74:	de b7       	in	r29, 0x3e	; 62
    5c76:	27 97       	sbiw	r28, 0x07	; 7
    5c78:	cd bf       	out	0x3d, r28	; 61
    5c7a:	de bf       	out	0x3e, r29	; 62
    5c7c:	6a 83       	std	Y+2, r22	; 0x02
    5c7e:	7b 83       	std	Y+3, r23	; 0x03
    5c80:	8c 83       	std	Y+4, r24	; 0x04
    5c82:	9d 83       	std	Y+5, r25	; 0x05
    5c84:	4e 83       	std	Y+6, r20	; 0x06
    5c86:	5f 83       	std	Y+7, r21	; 0x07
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    5c88:	2e 81       	ldd	r18, Y+6	; 0x06
    5c8a:	3f 81       	ldd	r19, Y+7	; 0x07
    5c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c8e:	9b 81       	ldd	r25, Y+3	; 0x03
    5c90:	ac 81       	ldd	r26, Y+4	; 0x04
    5c92:	bd 81       	ldd	r27, Y+5	; 0x05
    5c94:	a9 01       	movw	r20, r18
    5c96:	bc 01       	movw	r22, r24
    5c98:	cd 01       	movw	r24, r26
    5c9a:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <spi_read_reg>
    5c9e:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5ca0:	89 81       	ldd	r24, Y+1	; 0x01
    5ca2:	81 30       	cpi	r24, 0x01	; 1
    5ca4:	11 f4       	brne	.+4      	; 0x5caa <nm_spi_read_reg_with_ret+0x3c>
    5ca6:	19 82       	std	Y+1, r1	; 0x01
    5ca8:	02 c0       	rjmp	.+4      	; 0x5cae <nm_spi_read_reg_with_ret+0x40>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5caa:	8a ef       	ldi	r24, 0xFA	; 250
    5cac:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    5cae:	89 81       	ldd	r24, Y+1	; 0x01
}
    5cb0:	27 96       	adiw	r28, 0x07	; 7
    5cb2:	cd bf       	out	0x3d, r28	; 61
    5cb4:	de bf       	out	0x3e, r29	; 62
    5cb6:	df 91       	pop	r29
    5cb8:	cf 91       	pop	r28
    5cba:	08 95       	ret

00005cbc <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    5cbc:	cf 93       	push	r28
    5cbe:	df 93       	push	r29
    5cc0:	cd b7       	in	r28, 0x3d	; 61
    5cc2:	de b7       	in	r29, 0x3e	; 62
    5cc4:	29 97       	sbiw	r28, 0x09	; 9
    5cc6:	cd bf       	out	0x3d, r28	; 61
    5cc8:	de bf       	out	0x3e, r29	; 62
    5cca:	6a 83       	std	Y+2, r22	; 0x02
    5ccc:	7b 83       	std	Y+3, r23	; 0x03
    5cce:	8c 83       	std	Y+4, r24	; 0x04
    5cd0:	9d 83       	std	Y+5, r25	; 0x05
    5cd2:	2e 83       	std	Y+6, r18	; 0x06
    5cd4:	3f 83       	std	Y+7, r19	; 0x07
    5cd6:	48 87       	std	Y+8, r20	; 0x08
    5cd8:	59 87       	std	Y+9, r21	; 0x09
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    5cda:	2e 81       	ldd	r18, Y+6	; 0x06
    5cdc:	3f 81       	ldd	r19, Y+7	; 0x07
    5cde:	48 85       	ldd	r20, Y+8	; 0x08
    5ce0:	59 85       	ldd	r21, Y+9	; 0x09
    5ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ce4:	9b 81       	ldd	r25, Y+3	; 0x03
    5ce6:	ac 81       	ldd	r26, Y+4	; 0x04
    5ce8:	bd 81       	ldd	r27, Y+5	; 0x05
    5cea:	bc 01       	movw	r22, r24
    5cec:	cd 01       	movw	r24, r26
    5cee:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <spi_write_reg>
    5cf2:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5cf4:	89 81       	ldd	r24, Y+1	; 0x01
    5cf6:	81 30       	cpi	r24, 0x01	; 1
    5cf8:	11 f4       	brne	.+4      	; 0x5cfe <nm_spi_write_reg+0x42>
    5cfa:	19 82       	std	Y+1, r1	; 0x01
    5cfc:	02 c0       	rjmp	.+4      	; 0x5d02 <nm_spi_write_reg+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5cfe:	8a ef       	ldi	r24, 0xFA	; 250
    5d00:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    5d02:	89 81       	ldd	r24, Y+1	; 0x01
}
    5d04:	29 96       	adiw	r28, 0x09	; 9
    5d06:	cd bf       	out	0x3d, r28	; 61
    5d08:	de bf       	out	0x3e, r29	; 62
    5d0a:	df 91       	pop	r29
    5d0c:	cf 91       	pop	r28
    5d0e:	08 95       	ret

00005d10 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    5d10:	cf 93       	push	r28
    5d12:	df 93       	push	r29
    5d14:	cd b7       	in	r28, 0x3d	; 61
    5d16:	de b7       	in	r29, 0x3e	; 62
    5d18:	29 97       	sbiw	r28, 0x09	; 9
    5d1a:	cd bf       	out	0x3d, r28	; 61
    5d1c:	de bf       	out	0x3e, r29	; 62
    5d1e:	6a 83       	std	Y+2, r22	; 0x02
    5d20:	7b 83       	std	Y+3, r23	; 0x03
    5d22:	8c 83       	std	Y+4, r24	; 0x04
    5d24:	9d 83       	std	Y+5, r25	; 0x05
    5d26:	4e 83       	std	Y+6, r20	; 0x06
    5d28:	5f 83       	std	Y+7, r21	; 0x07
    5d2a:	28 87       	std	Y+8, r18	; 0x08
    5d2c:	39 87       	std	Y+9, r19	; 0x09
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    5d2e:	28 85       	ldd	r18, Y+8	; 0x08
    5d30:	39 85       	ldd	r19, Y+9	; 0x09
    5d32:	4e 81       	ldd	r20, Y+6	; 0x06
    5d34:	5f 81       	ldd	r21, Y+7	; 0x07
    5d36:	8a 81       	ldd	r24, Y+2	; 0x02
    5d38:	9b 81       	ldd	r25, Y+3	; 0x03
    5d3a:	ac 81       	ldd	r26, Y+4	; 0x04
    5d3c:	bd 81       	ldd	r27, Y+5	; 0x05
    5d3e:	bc 01       	movw	r22, r24
    5d40:	cd 01       	movw	r24, r26
    5d42:	0e 94 a5 2c 	call	0x594a	; 0x594a <nm_spi_read>
    5d46:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5d48:	89 81       	ldd	r24, Y+1	; 0x01
    5d4a:	81 30       	cpi	r24, 0x01	; 1
    5d4c:	11 f4       	brne	.+4      	; 0x5d52 <nm_spi_read_block+0x42>
    5d4e:	19 82       	std	Y+1, r1	; 0x01
    5d50:	02 c0       	rjmp	.+4      	; 0x5d56 <nm_spi_read_block+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5d52:	8a ef       	ldi	r24, 0xFA	; 250
    5d54:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    5d56:	89 81       	ldd	r24, Y+1	; 0x01
}
    5d58:	29 96       	adiw	r28, 0x09	; 9
    5d5a:	cd bf       	out	0x3d, r28	; 61
    5d5c:	de bf       	out	0x3e, r29	; 62
    5d5e:	df 91       	pop	r29
    5d60:	cf 91       	pop	r28
    5d62:	08 95       	ret

00005d64 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    5d64:	cf 93       	push	r28
    5d66:	df 93       	push	r29
    5d68:	cd b7       	in	r28, 0x3d	; 61
    5d6a:	de b7       	in	r29, 0x3e	; 62
    5d6c:	29 97       	sbiw	r28, 0x09	; 9
    5d6e:	cd bf       	out	0x3d, r28	; 61
    5d70:	de bf       	out	0x3e, r29	; 62
    5d72:	6a 83       	std	Y+2, r22	; 0x02
    5d74:	7b 83       	std	Y+3, r23	; 0x03
    5d76:	8c 83       	std	Y+4, r24	; 0x04
    5d78:	9d 83       	std	Y+5, r25	; 0x05
    5d7a:	4e 83       	std	Y+6, r20	; 0x06
    5d7c:	5f 83       	std	Y+7, r21	; 0x07
    5d7e:	28 87       	std	Y+8, r18	; 0x08
    5d80:	39 87       	std	Y+9, r19	; 0x09
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    5d82:	28 85       	ldd	r18, Y+8	; 0x08
    5d84:	39 85       	ldd	r19, Y+9	; 0x09
    5d86:	4e 81       	ldd	r20, Y+6	; 0x06
    5d88:	5f 81       	ldd	r21, Y+7	; 0x07
    5d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    5d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    5d8e:	ac 81       	ldd	r26, Y+4	; 0x04
    5d90:	bd 81       	ldd	r27, Y+5	; 0x05
    5d92:	bc 01       	movw	r22, r24
    5d94:	cd 01       	movw	r24, r26
    5d96:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <nm_spi_write>
    5d9a:	89 83       	std	Y+1, r24	; 0x01

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5d9c:	89 81       	ldd	r24, Y+1	; 0x01
    5d9e:	81 30       	cpi	r24, 0x01	; 1
    5da0:	11 f4       	brne	.+4      	; 0x5da6 <nm_spi_write_block+0x42>
    5da2:	19 82       	std	Y+1, r1	; 0x01
    5da4:	02 c0       	rjmp	.+4      	; 0x5daa <nm_spi_write_block+0x46>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5da6:	8a ef       	ldi	r24, 0xFA	; 250
    5da8:	89 83       	std	Y+1, r24	; 0x01

	return s8Ret;
    5daa:	89 81       	ldd	r24, Y+1	; 0x01
}
    5dac:	29 96       	adiw	r28, 0x09	; 9
    5dae:	cd bf       	out	0x3d, r28	; 61
    5db0:	de bf       	out	0x3e, r29	; 62
    5db2:	df 91       	pop	r29
    5db4:	cf 91       	pop	r28
    5db6:	08 95       	ret

00005db8 <Socket_ReadSocketData>:
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
    5db8:	ef 92       	push	r14
    5dba:	ff 92       	push	r15
    5dbc:	0f 93       	push	r16
    5dbe:	1f 93       	push	r17
    5dc0:	cf 93       	push	r28
    5dc2:	df 93       	push	r29
    5dc4:	cd b7       	in	r28, 0x3d	; 61
    5dc6:	de b7       	in	r29, 0x3e	; 62
    5dc8:	63 97       	sbiw	r28, 0x13	; 19
    5dca:	cd bf       	out	0x3d, r28	; 61
    5dcc:	de bf       	out	0x3e, r29	; 62
    5dce:	8a 87       	std	Y+10, r24	; 0x0a
    5dd0:	6b 87       	std	Y+11, r22	; 0x0b
    5dd2:	7c 87       	std	Y+12, r23	; 0x0c
    5dd4:	4d 87       	std	Y+13, r20	; 0x0d
    5dd6:	0e 87       	std	Y+14, r16	; 0x0e
    5dd8:	1f 87       	std	Y+15, r17	; 0x0f
    5dda:	28 8b       	std	Y+16, r18	; 0x10
    5ddc:	39 8b       	std	Y+17, r19	; 0x11
    5dde:	ea 8a       	std	Y+18, r14	; 0x12
    5de0:	fb 8a       	std	Y+19, r15	; 0x13
    5de2:	8a 89       	ldd	r24, Y+18	; 0x12
    5de4:	9b 89       	ldd	r25, Y+19	; 0x13
    5de6:	89 2b       	or	r24, r25
    5de8:	09 f4       	brne	.+2      	; 0x5dec <Socket_ReadSocketData+0x34>
    5dea:	10 c1       	rjmp	.+544    	; 0x600c <Socket_ReadSocketData+0x254>
    5dec:	8a 85       	ldd	r24, Y+10	; 0x0a
    5dee:	28 2f       	mov	r18, r24
    5df0:	88 0f       	add	r24, r24
    5df2:	33 0b       	sbc	r19, r19
    5df4:	4b e0       	ldi	r20, 0x0B	; 11
    5df6:	42 9f       	mul	r20, r18
    5df8:	c0 01       	movw	r24, r0
    5dfa:	43 9f       	mul	r20, r19
    5dfc:	90 0d       	add	r25, r0
    5dfe:	11 24       	eor	r1, r1
    5e00:	84 55       	subi	r24, 0x54	; 84
    5e02:	91 4d       	sbci	r25, 0xD1	; 209
    5e04:	fc 01       	movw	r30, r24
    5e06:	80 81       	ld	r24, Z
    5e08:	91 81       	ldd	r25, Z+1	; 0x01
    5e0a:	89 2b       	or	r24, r25
    5e0c:	09 f4       	brne	.+2      	; 0x5e10 <Socket_ReadSocketData+0x58>
    5e0e:	fe c0       	rjmp	.+508    	; 0x600c <Socket_ReadSocketData+0x254>
    5e10:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e12:	28 2f       	mov	r18, r24
    5e14:	88 0f       	add	r24, r24
    5e16:	33 0b       	sbc	r19, r19
    5e18:	4b e0       	ldi	r20, 0x0B	; 11
    5e1a:	42 9f       	mul	r20, r18
    5e1c:	c0 01       	movw	r24, r0
    5e1e:	43 9f       	mul	r20, r19
    5e20:	90 0d       	add	r25, r0
    5e22:	11 24       	eor	r1, r1
    5e24:	82 55       	subi	r24, 0x52	; 82
    5e26:	91 4d       	sbci	r25, 0xD1	; 209
    5e28:	fc 01       	movw	r30, r24
    5e2a:	80 81       	ld	r24, Z
    5e2c:	91 81       	ldd	r25, Z+1	; 0x01
    5e2e:	89 2b       	or	r24, r25
    5e30:	09 f4       	brne	.+2      	; 0x5e34 <Socket_ReadSocketData+0x7c>
    5e32:	ec c0       	rjmp	.+472    	; 0x600c <Socket_ReadSocketData+0x254>
    5e34:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e36:	28 2f       	mov	r18, r24
    5e38:	88 0f       	add	r24, r24
    5e3a:	33 0b       	sbc	r19, r19
    5e3c:	4b e0       	ldi	r20, 0x0B	; 11
    5e3e:	42 9f       	mul	r20, r18
    5e40:	c0 01       	movw	r24, r0
    5e42:	43 9f       	mul	r20, r19
    5e44:	90 0d       	add	r25, r0
    5e46:	11 24       	eor	r1, r1
    5e48:	8c 54       	subi	r24, 0x4C	; 76
    5e4a:	91 4d       	sbci	r25, 0xD1	; 209
    5e4c:	fc 01       	movw	r30, r24
    5e4e:	80 81       	ld	r24, Z
    5e50:	81 30       	cpi	r24, 0x01	; 1
    5e52:	09 f0       	breq	.+2      	; 0x5e56 <Socket_ReadSocketData+0x9e>
    5e54:	db c0       	rjmp	.+438    	; 0x600c <Socket_ReadSocketData+0x254>
    5e56:	8e 85       	ldd	r24, Y+14	; 0x0e
    5e58:	9f 85       	ldd	r25, Y+15	; 0x0f
    5e5a:	a8 89       	ldd	r26, Y+16	; 0x10
    5e5c:	b9 89       	ldd	r27, Y+17	; 0x11
    5e5e:	89 83       	std	Y+1, r24	; 0x01
    5e60:	9a 83       	std	Y+2, r25	; 0x02
    5e62:	ab 83       	std	Y+3, r26	; 0x03
    5e64:	bc 83       	std	Y+4, r27	; 0x04
    5e66:	8b 85       	ldd	r24, Y+11	; 0x0b
    5e68:	9c 85       	ldd	r25, Y+12	; 0x0c
    5e6a:	2a 89       	ldd	r18, Y+18	; 0x12
    5e6c:	3b 89       	ldd	r19, Y+19	; 0x13
    5e6e:	fc 01       	movw	r30, r24
    5e70:	24 83       	std	Z+4, r18	; 0x04
    5e72:	35 83       	std	Z+5, r19	; 0x05
    5e74:	81 e0       	ldi	r24, 0x01	; 1
    5e76:	8f 83       	std	Y+7, r24	; 0x07
    5e78:	8a 89       	ldd	r24, Y+18	; 0x12
    5e7a:	9b 89       	ldd	r25, Y+19	; 0x13
    5e7c:	8d 83       	std	Y+5, r24	; 0x05
    5e7e:	9e 83       	std	Y+6, r25	; 0x06
    5e80:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e82:	28 2f       	mov	r18, r24
    5e84:	88 0f       	add	r24, r24
    5e86:	33 0b       	sbc	r19, r19
    5e88:	4b e0       	ldi	r20, 0x0B	; 11
    5e8a:	42 9f       	mul	r20, r18
    5e8c:	c0 01       	movw	r24, r0
    5e8e:	43 9f       	mul	r20, r19
    5e90:	90 0d       	add	r25, r0
    5e92:	11 24       	eor	r1, r1
    5e94:	82 55       	subi	r24, 0x52	; 82
    5e96:	91 4d       	sbci	r25, 0xD1	; 209
    5e98:	fc 01       	movw	r30, r24
    5e9a:	80 81       	ld	r24, Z
    5e9c:	91 81       	ldd	r25, Z+1	; 0x01
    5e9e:	2d 81       	ldd	r18, Y+5	; 0x05
    5ea0:	3e 81       	ldd	r19, Y+6	; 0x06
    5ea2:	a9 01       	movw	r20, r18
    5ea4:	48 1b       	sub	r20, r24
    5ea6:	59 0b       	sbc	r21, r25
    5ea8:	ca 01       	movw	r24, r20
    5eaa:	88 87       	std	Y+8, r24	; 0x08
    5eac:	99 87       	std	Y+9, r25	; 0x09
    5eae:	88 85       	ldd	r24, Y+8	; 0x08
    5eb0:	99 85       	ldd	r25, Y+9	; 0x09
    5eb2:	18 16       	cp	r1, r24
    5eb4:	19 06       	cpc	r1, r25
    5eb6:	94 f4       	brge	.+36     	; 0x5edc <Socket_ReadSocketData+0x124>
    5eb8:	1f 82       	std	Y+7, r1	; 0x07
    5eba:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ebc:	28 2f       	mov	r18, r24
    5ebe:	88 0f       	add	r24, r24
    5ec0:	33 0b       	sbc	r19, r19
    5ec2:	4b e0       	ldi	r20, 0x0B	; 11
    5ec4:	42 9f       	mul	r20, r18
    5ec6:	c0 01       	movw	r24, r0
    5ec8:	43 9f       	mul	r20, r19
    5eca:	90 0d       	add	r25, r0
    5ecc:	11 24       	eor	r1, r1
    5ece:	82 55       	subi	r24, 0x52	; 82
    5ed0:	91 4d       	sbci	r25, 0xD1	; 209
    5ed2:	fc 01       	movw	r30, r24
    5ed4:	80 81       	ld	r24, Z
    5ed6:	91 81       	ldd	r25, Z+1	; 0x01
    5ed8:	8d 83       	std	Y+5, r24	; 0x05
    5eda:	9e 83       	std	Y+6, r25	; 0x06
    5edc:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ede:	28 2f       	mov	r18, r24
    5ee0:	88 0f       	add	r24, r24
    5ee2:	33 0b       	sbc	r19, r19
    5ee4:	4b e0       	ldi	r20, 0x0B	; 11
    5ee6:	42 9f       	mul	r20, r18
    5ee8:	c0 01       	movw	r24, r0
    5eea:	43 9f       	mul	r20, r19
    5eec:	90 0d       	add	r25, r0
    5eee:	11 24       	eor	r1, r1
    5ef0:	84 55       	subi	r24, 0x54	; 84
    5ef2:	91 4d       	sbci	r25, 0xD1	; 209
    5ef4:	fc 01       	movw	r30, r24
    5ef6:	40 81       	ld	r20, Z
    5ef8:	51 81       	ldd	r21, Z+1	; 0x01
    5efa:	2d 81       	ldd	r18, Y+5	; 0x05
    5efc:	3e 81       	ldd	r19, Y+6	; 0x06
    5efe:	89 81       	ldd	r24, Y+1	; 0x01
    5f00:	9a 81       	ldd	r25, Y+2	; 0x02
    5f02:	ab 81       	ldd	r26, Y+3	; 0x03
    5f04:	bc 81       	ldd	r27, Y+4	; 0x04
    5f06:	0f 81       	ldd	r16, Y+7	; 0x07
    5f08:	bc 01       	movw	r22, r24
    5f0a:	cd 01       	movw	r24, r26
    5f0c:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    5f10:	88 23       	and	r24, r24
    5f12:	09 f0       	breq	.+2      	; 0x5f16 <Socket_ReadSocketData+0x15e>
    5f14:	7a c0       	rjmp	.+244    	; 0x600a <Socket_ReadSocketData+0x252>
    5f16:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f18:	28 2f       	mov	r18, r24
    5f1a:	88 0f       	add	r24, r24
    5f1c:	33 0b       	sbc	r19, r19
    5f1e:	4b e0       	ldi	r20, 0x0B	; 11
    5f20:	42 9f       	mul	r20, r18
    5f22:	c0 01       	movw	r24, r0
    5f24:	43 9f       	mul	r20, r19
    5f26:	90 0d       	add	r25, r0
    5f28:	11 24       	eor	r1, r1
    5f2a:	84 55       	subi	r24, 0x54	; 84
    5f2c:	91 4d       	sbci	r25, 0xD1	; 209
    5f2e:	fc 01       	movw	r30, r24
    5f30:	20 81       	ld	r18, Z
    5f32:	31 81       	ldd	r19, Z+1	; 0x01
    5f34:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f36:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f38:	fc 01       	movw	r30, r24
    5f3a:	20 83       	st	Z, r18
    5f3c:	31 83       	std	Z+1, r19	; 0x01
    5f3e:	2d 81       	ldd	r18, Y+5	; 0x05
    5f40:	3e 81       	ldd	r19, Y+6	; 0x06
    5f42:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f44:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f46:	fc 01       	movw	r30, r24
    5f48:	22 83       	std	Z+2, r18	; 0x02
    5f4a:	33 83       	std	Z+3, r19	; 0x03
    5f4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f50:	fc 01       	movw	r30, r24
    5f52:	24 81       	ldd	r18, Z+4	; 0x04
    5f54:	35 81       	ldd	r19, Z+5	; 0x05
    5f56:	8d 81       	ldd	r24, Y+5	; 0x05
    5f58:	9e 81       	ldd	r25, Y+6	; 0x06
    5f5a:	28 1b       	sub	r18, r24
    5f5c:	39 0b       	sbc	r19, r25
    5f5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f60:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f62:	fc 01       	movw	r30, r24
    5f64:	24 83       	std	Z+4, r18	; 0x04
    5f66:	35 83       	std	Z+5, r19	; 0x05
    5f68:	80 91 25 2f 	lds	r24, 0x2F25	; 0x802f25 <gpfAppSocketCb>
    5f6c:	90 91 26 2f 	lds	r25, 0x2F26	; 0x802f26 <gpfAppSocketCb+0x1>
    5f70:	89 2b       	or	r24, r25
    5f72:	59 f0       	breq	.+22     	; 0x5f8a <Socket_ReadSocketData+0x1d2>
    5f74:	20 91 25 2f 	lds	r18, 0x2F25	; 0x802f25 <gpfAppSocketCb>
    5f78:	30 91 26 2f 	lds	r19, 0x2F26	; 0x802f26 <gpfAppSocketCb+0x1>
    5f7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f80:	ac 01       	movw	r20, r24
    5f82:	6d 85       	ldd	r22, Y+13	; 0x0d
    5f84:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f86:	f9 01       	movw	r30, r18
    5f88:	09 95       	icall
    5f8a:	2a 89       	ldd	r18, Y+18	; 0x12
    5f8c:	3b 89       	ldd	r19, Y+19	; 0x13
    5f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    5f90:	9e 81       	ldd	r25, Y+6	; 0x06
    5f92:	a9 01       	movw	r20, r18
    5f94:	48 1b       	sub	r20, r24
    5f96:	59 0b       	sbc	r21, r25
    5f98:	ca 01       	movw	r24, r20
    5f9a:	8a 8b       	std	Y+18, r24	; 0x12
    5f9c:	9b 8b       	std	Y+19, r25	; 0x13
    5f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    5fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    5fa2:	cc 01       	movw	r24, r24
    5fa4:	a0 e0       	ldi	r26, 0x00	; 0
    5fa6:	b0 e0       	ldi	r27, 0x00	; 0
    5fa8:	29 81       	ldd	r18, Y+1	; 0x01
    5faa:	3a 81       	ldd	r19, Y+2	; 0x02
    5fac:	4b 81       	ldd	r20, Y+3	; 0x03
    5fae:	5c 81       	ldd	r21, Y+4	; 0x04
    5fb0:	82 0f       	add	r24, r18
    5fb2:	93 1f       	adc	r25, r19
    5fb4:	a4 1f       	adc	r26, r20
    5fb6:	b5 1f       	adc	r27, r21
    5fb8:	89 83       	std	Y+1, r24	; 0x01
    5fba:	9a 83       	std	Y+2, r25	; 0x02
    5fbc:	ab 83       	std	Y+3, r26	; 0x03
    5fbe:	bc 83       	std	Y+4, r27	; 0x04
    5fc0:	8a 85       	ldd	r24, Y+10	; 0x0a
    5fc2:	28 2f       	mov	r18, r24
    5fc4:	88 0f       	add	r24, r24
    5fc6:	33 0b       	sbc	r19, r19
    5fc8:	4b e0       	ldi	r20, 0x0B	; 11
    5fca:	42 9f       	mul	r20, r18
    5fcc:	c0 01       	movw	r24, r0
    5fce:	43 9f       	mul	r20, r19
    5fd0:	90 0d       	add	r25, r0
    5fd2:	11 24       	eor	r1, r1
    5fd4:	8c 54       	subi	r24, 0x4C	; 76
    5fd6:	91 4d       	sbci	r25, 0xD1	; 209
    5fd8:	fc 01       	movw	r30, r24
    5fda:	80 81       	ld	r24, Z
    5fdc:	88 23       	and	r24, r24
    5fde:	79 f4       	brne	.+30     	; 0x5ffe <Socket_ReadSocketData+0x246>
    5fe0:	8a 89       	ldd	r24, Y+18	; 0x12
    5fe2:	9b 89       	ldd	r25, Y+19	; 0x13
    5fe4:	89 2b       	or	r24, r25
    5fe6:	59 f0       	breq	.+22     	; 0x5ffe <Socket_ReadSocketData+0x246>
    5fe8:	01 e0       	ldi	r16, 0x01	; 1
    5fea:	20 e0       	ldi	r18, 0x00	; 0
    5fec:	30 e0       	ldi	r19, 0x00	; 0
    5fee:	40 e0       	ldi	r20, 0x00	; 0
    5ff0:	50 e0       	ldi	r21, 0x00	; 0
    5ff2:	60 e0       	ldi	r22, 0x00	; 0
    5ff4:	70 e0       	ldi	r23, 0x00	; 0
    5ff6:	cb 01       	movw	r24, r22
    5ff8:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    5ffc:	07 c0       	rjmp	.+14     	; 0x600c <Socket_ReadSocketData+0x254>
    5ffe:	8a 89       	ldd	r24, Y+18	; 0x12
    6000:	9b 89       	ldd	r25, Y+19	; 0x13
    6002:	89 2b       	or	r24, r25
    6004:	09 f0       	breq	.+2      	; 0x6008 <Socket_ReadSocketData+0x250>
    6006:	36 cf       	rjmp	.-404    	; 0x5e74 <Socket_ReadSocketData+0xbc>
    6008:	01 c0       	rjmp	.+2      	; 0x600c <Socket_ReadSocketData+0x254>
    600a:	00 00       	nop
    600c:	00 00       	nop
    600e:	63 96       	adiw	r28, 0x13	; 19
    6010:	cd bf       	out	0x3d, r28	; 61
    6012:	de bf       	out	0x3e, r29	; 62
    6014:	df 91       	pop	r29
    6016:	cf 91       	pop	r28
    6018:	1f 91       	pop	r17
    601a:	0f 91       	pop	r16
    601c:	ff 90       	pop	r15
    601e:	ef 90       	pop	r14
    6020:	08 95       	ret

00006022 <m2m_ip_cb>:
    6022:	ef 92       	push	r14
    6024:	ff 92       	push	r15
    6026:	0f 93       	push	r16
    6028:	1f 93       	push	r17
    602a:	cf 93       	push	r28
    602c:	df 93       	push	r29
    602e:	cd b7       	in	r28, 0x3d	; 61
    6030:	de b7       	in	r29, 0x3e	; 62
    6032:	cc 5c       	subi	r28, 0xCC	; 204
    6034:	d1 09       	sbc	r29, r1
    6036:	cd bf       	out	0x3d, r28	; 61
    6038:	de bf       	out	0x3e, r29	; 62
    603a:	fe 01       	movw	r30, r28
    603c:	ec 53       	subi	r30, 0x3C	; 60
    603e:	ff 4f       	sbci	r31, 0xFF	; 255
    6040:	80 83       	st	Z, r24
    6042:	ce 01       	movw	r24, r28
    6044:	8b 53       	subi	r24, 0x3B	; 59
    6046:	9f 4f       	sbci	r25, 0xFF	; 255
    6048:	dc 01       	movw	r26, r24
    604a:	6d 93       	st	X+, r22
    604c:	7c 93       	st	X, r23
    604e:	ce 01       	movw	r24, r28
    6050:	89 53       	subi	r24, 0x39	; 57
    6052:	9f 4f       	sbci	r25, 0xFF	; 255
    6054:	fc 01       	movw	r30, r24
    6056:	20 83       	st	Z, r18
    6058:	31 83       	std	Z+1, r19	; 0x01
    605a:	42 83       	std	Z+2, r20	; 0x02
    605c:	53 83       	std	Z+3, r21	; 0x03
    605e:	ce 01       	movw	r24, r28
    6060:	8c 53       	subi	r24, 0x3C	; 60
    6062:	9f 4f       	sbci	r25, 0xFF	; 255
    6064:	dc 01       	movw	r26, r24
    6066:	8c 91       	ld	r24, X
    6068:	81 34       	cpi	r24, 0x41	; 65
    606a:	39 f0       	breq	.+14     	; 0x607a <m2m_ip_cb+0x58>
    606c:	ce 01       	movw	r24, r28
    606e:	8c 53       	subi	r24, 0x3C	; 60
    6070:	9f 4f       	sbci	r25, 0xFF	; 255
    6072:	fc 01       	movw	r30, r24
    6074:	80 81       	ld	r24, Z
    6076:	84 35       	cpi	r24, 0x54	; 84
    6078:	59 f5       	brne	.+86     	; 0x60d0 <m2m_ip_cb+0xae>
    607a:	ae 01       	movw	r20, r28
    607c:	41 5f       	subi	r20, 0xF1	; 241
    607e:	5f 4f       	sbci	r21, 0xFF	; 255
    6080:	ce 01       	movw	r24, r28
    6082:	89 53       	subi	r24, 0x39	; 57
    6084:	9f 4f       	sbci	r25, 0xFF	; 255
    6086:	fc 01       	movw	r30, r24
    6088:	80 81       	ld	r24, Z
    608a:	91 81       	ldd	r25, Z+1	; 0x01
    608c:	a2 81       	ldd	r26, Z+2	; 0x02
    608e:	b3 81       	ldd	r27, Z+3	; 0x03
    6090:	00 e0       	ldi	r16, 0x00	; 0
    6092:	24 e0       	ldi	r18, 0x04	; 4
    6094:	30 e0       	ldi	r19, 0x00	; 0
    6096:	bc 01       	movw	r22, r24
    6098:	cd 01       	movw	r24, r26
    609a:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    609e:	88 23       	and	r24, r24
    60a0:	09 f0       	breq	.+2      	; 0x60a4 <m2m_ip_cb+0x82>
    60a2:	70 c3       	rjmp	.+1760   	; 0x6784 <m2m_ip_cb+0x762>
    60a4:	88 89       	ldd	r24, Y+16	; 0x10
    60a6:	8b 8b       	std	Y+19, r24	; 0x13
    60a8:	80 91 25 2f 	lds	r24, 0x2F25	; 0x802f25 <gpfAppSocketCb>
    60ac:	90 91 26 2f 	lds	r25, 0x2F26	; 0x802f26 <gpfAppSocketCb+0x1>
    60b0:	89 2b       	or	r24, r25
    60b2:	09 f4       	brne	.+2      	; 0x60b6 <m2m_ip_cb+0x94>
    60b4:	67 c3       	rjmp	.+1742   	; 0x6784 <m2m_ip_cb+0x762>
    60b6:	20 91 25 2f 	lds	r18, 0x2F25	; 0x802f25 <gpfAppSocketCb>
    60ba:	30 91 26 2f 	lds	r19, 0x2F26	; 0x802f26 <gpfAppSocketCb+0x1>
    60be:	7f 85       	ldd	r23, Y+15	; 0x0f
    60c0:	ce 01       	movw	r24, r28
    60c2:	43 96       	adiw	r24, 0x13	; 19
    60c4:	ac 01       	movw	r20, r24
    60c6:	61 e0       	ldi	r22, 0x01	; 1
    60c8:	87 2f       	mov	r24, r23
    60ca:	f9 01       	movw	r30, r18
    60cc:	09 95       	icall
    60ce:	5a c3       	rjmp	.+1716   	; 0x6784 <m2m_ip_cb+0x762>
    60d0:	ce 01       	movw	r24, r28
    60d2:	8c 53       	subi	r24, 0x3C	; 60
    60d4:	9f 4f       	sbci	r25, 0xFF	; 255
    60d6:	dc 01       	movw	r26, r24
    60d8:	8c 91       	ld	r24, X
    60da:	82 34       	cpi	r24, 0x42	; 66
    60dc:	59 f5       	brne	.+86     	; 0x6134 <m2m_ip_cb+0x112>
    60de:	ae 01       	movw	r20, r28
    60e0:	4c 5e       	subi	r20, 0xEC	; 236
    60e2:	5f 4f       	sbci	r21, 0xFF	; 255
    60e4:	ce 01       	movw	r24, r28
    60e6:	89 53       	subi	r24, 0x39	; 57
    60e8:	9f 4f       	sbci	r25, 0xFF	; 255
    60ea:	fc 01       	movw	r30, r24
    60ec:	80 81       	ld	r24, Z
    60ee:	91 81       	ldd	r25, Z+1	; 0x01
    60f0:	a2 81       	ldd	r26, Z+2	; 0x02
    60f2:	b3 81       	ldd	r27, Z+3	; 0x03
    60f4:	00 e0       	ldi	r16, 0x00	; 0
    60f6:	24 e0       	ldi	r18, 0x04	; 4
    60f8:	30 e0       	ldi	r19, 0x00	; 0
    60fa:	bc 01       	movw	r22, r24
    60fc:	cd 01       	movw	r24, r26
    60fe:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    6102:	88 23       	and	r24, r24
    6104:	09 f0       	breq	.+2      	; 0x6108 <m2m_ip_cb+0xe6>
    6106:	45 c3       	rjmp	.+1674   	; 0x6792 <m2m_ip_cb+0x770>
    6108:	8d 89       	ldd	r24, Y+21	; 0x15
    610a:	88 8f       	std	Y+24, r24	; 0x18
    610c:	80 91 25 2f 	lds	r24, 0x2F25	; 0x802f25 <gpfAppSocketCb>
    6110:	90 91 26 2f 	lds	r25, 0x2F26	; 0x802f26 <gpfAppSocketCb+0x1>
    6114:	89 2b       	or	r24, r25
    6116:	09 f4       	brne	.+2      	; 0x611a <m2m_ip_cb+0xf8>
    6118:	3c c3       	rjmp	.+1656   	; 0x6792 <m2m_ip_cb+0x770>
    611a:	20 91 25 2f 	lds	r18, 0x2F25	; 0x802f25 <gpfAppSocketCb>
    611e:	30 91 26 2f 	lds	r19, 0x2F26	; 0x802f26 <gpfAppSocketCb+0x1>
    6122:	7c 89       	ldd	r23, Y+20	; 0x14
    6124:	ce 01       	movw	r24, r28
    6126:	48 96       	adiw	r24, 0x18	; 24
    6128:	ac 01       	movw	r20, r24
    612a:	62 e0       	ldi	r22, 0x02	; 2
    612c:	87 2f       	mov	r24, r23
    612e:	f9 01       	movw	r30, r18
    6130:	09 95       	icall
    6132:	2f c3       	rjmp	.+1630   	; 0x6792 <m2m_ip_cb+0x770>
    6134:	ce 01       	movw	r24, r28
    6136:	8c 53       	subi	r24, 0x3C	; 60
    6138:	9f 4f       	sbci	r25, 0xFF	; 255
    613a:	dc 01       	movw	r26, r24
    613c:	8c 91       	ld	r24, X
    613e:	83 34       	cpi	r24, 0x43	; 67
    6140:	09 f0       	breq	.+2      	; 0x6144 <m2m_ip_cb+0x122>
    6142:	a9 c0       	rjmp	.+338    	; 0x6296 <m2m_ip_cb+0x274>
    6144:	ae 01       	movw	r20, r28
    6146:	47 5e       	subi	r20, 0xE7	; 231
    6148:	5f 4f       	sbci	r21, 0xFF	; 255
    614a:	ce 01       	movw	r24, r28
    614c:	89 53       	subi	r24, 0x39	; 57
    614e:	9f 4f       	sbci	r25, 0xFF	; 255
    6150:	fc 01       	movw	r30, r24
    6152:	80 81       	ld	r24, Z
    6154:	91 81       	ldd	r25, Z+1	; 0x01
    6156:	a2 81       	ldd	r26, Z+2	; 0x02
    6158:	b3 81       	ldd	r27, Z+3	; 0x03
    615a:	00 e0       	ldi	r16, 0x00	; 0
    615c:	2c e0       	ldi	r18, 0x0C	; 12
    615e:	30 e0       	ldi	r19, 0x00	; 0
    6160:	bc 01       	movw	r22, r24
    6162:	cd 01       	movw	r24, r26
    6164:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    6168:	88 23       	and	r24, r24
    616a:	09 f0       	breq	.+2      	; 0x616e <m2m_ip_cb+0x14c>
    616c:	12 c3       	rjmp	.+1572   	; 0x6792 <m2m_ip_cb+0x770>
    616e:	8a a1       	ldd	r24, Y+34	; 0x22
    6170:	88 23       	and	r24, r24
    6172:	0c f4       	brge	.+2      	; 0x6176 <m2m_ip_cb+0x154>
    6174:	6a c0       	rjmp	.+212    	; 0x624a <m2m_ip_cb+0x228>
    6176:	8a a1       	ldd	r24, Y+34	; 0x22
    6178:	28 2f       	mov	r18, r24
    617a:	88 0f       	add	r24, r24
    617c:	33 0b       	sbc	r19, r19
    617e:	89 a1       	ldd	r24, Y+33	; 0x21
    6180:	48 2f       	mov	r20, r24
    6182:	88 0f       	add	r24, r24
    6184:	55 0b       	sbc	r21, r21
    6186:	6b e0       	ldi	r22, 0x0B	; 11
    6188:	64 9f       	mul	r22, r20
    618a:	c0 01       	movw	r24, r0
    618c:	65 9f       	mul	r22, r21
    618e:	90 0d       	add	r25, r0
    6190:	11 24       	eor	r1, r1
    6192:	8b 54       	subi	r24, 0x4B	; 75
    6194:	91 4d       	sbci	r25, 0xD1	; 209
    6196:	dc 01       	movw	r26, r24
    6198:	4c 91       	ld	r20, X
    619a:	5b e0       	ldi	r21, 0x0B	; 11
    619c:	52 9f       	mul	r21, r18
    619e:	c0 01       	movw	r24, r0
    61a0:	53 9f       	mul	r21, r19
    61a2:	90 0d       	add	r25, r0
    61a4:	11 24       	eor	r1, r1
    61a6:	8b 54       	subi	r24, 0x4B	; 75
    61a8:	91 4d       	sbci	r25, 0xD1	; 209
    61aa:	fc 01       	movw	r30, r24
    61ac:	40 83       	st	Z, r20
    61ae:	8a a1       	ldd	r24, Y+34	; 0x22
    61b0:	28 2f       	mov	r18, r24
    61b2:	88 0f       	add	r24, r24
    61b4:	33 0b       	sbc	r19, r19
    61b6:	4b e0       	ldi	r20, 0x0B	; 11
    61b8:	42 9f       	mul	r20, r18
    61ba:	c0 01       	movw	r24, r0
    61bc:	43 9f       	mul	r20, r19
    61be:	90 0d       	add	r25, r0
    61c0:	11 24       	eor	r1, r1
    61c2:	8c 54       	subi	r24, 0x4C	; 76
    61c4:	91 4d       	sbci	r25, 0xD1	; 209
    61c6:	21 e0       	ldi	r18, 0x01	; 1
    61c8:	dc 01       	movw	r26, r24
    61ca:	2c 93       	st	X, r18
    61cc:	8a a1       	ldd	r24, Y+34	; 0x22
    61ce:	48 2f       	mov	r20, r24
    61d0:	88 0f       	add	r24, r24
    61d2:	55 0b       	sbc	r21, r21
    61d4:	8b a1       	ldd	r24, Y+35	; 0x23
    61d6:	9c a1       	ldd	r25, Y+36	; 0x24
    61d8:	9c 01       	movw	r18, r24
    61da:	28 50       	subi	r18, 0x08	; 8
    61dc:	31 09       	sbc	r19, r1
    61de:	6b e0       	ldi	r22, 0x0B	; 11
    61e0:	64 9f       	mul	r22, r20
    61e2:	c0 01       	movw	r24, r0
    61e4:	65 9f       	mul	r22, r21
    61e6:	90 0d       	add	r25, r0
    61e8:	11 24       	eor	r1, r1
    61ea:	8e 54       	subi	r24, 0x4E	; 78
    61ec:	91 4d       	sbci	r25, 0xD1	; 209
    61ee:	fc 01       	movw	r30, r24
    61f0:	20 83       	st	Z, r18
    61f2:	31 83       	std	Z+1, r19	; 0x01
    61f4:	80 91 16 2e 	lds	r24, 0x2E16	; 0x802e16 <gu16SessionID>
    61f8:	90 91 17 2e 	lds	r25, 0x2E17	; 0x802e17 <gu16SessionID+0x1>
    61fc:	01 96       	adiw	r24, 0x01	; 1
    61fe:	80 93 16 2e 	sts	0x2E16, r24	; 0x802e16 <gu16SessionID>
    6202:	90 93 17 2e 	sts	0x2E17, r25	; 0x802e17 <gu16SessionID+0x1>
    6206:	80 91 16 2e 	lds	r24, 0x2E16	; 0x802e16 <gu16SessionID>
    620a:	90 91 17 2e 	lds	r25, 0x2E17	; 0x802e17 <gu16SessionID+0x1>
    620e:	89 2b       	or	r24, r25
    6210:	49 f4       	brne	.+18     	; 0x6224 <m2m_ip_cb+0x202>
    6212:	80 91 16 2e 	lds	r24, 0x2E16	; 0x802e16 <gu16SessionID>
    6216:	90 91 17 2e 	lds	r25, 0x2E17	; 0x802e17 <gu16SessionID+0x1>
    621a:	01 96       	adiw	r24, 0x01	; 1
    621c:	80 93 16 2e 	sts	0x2E16, r24	; 0x802e16 <gu16SessionID>
    6220:	90 93 17 2e 	sts	0x2E17, r25	; 0x802e17 <gu16SessionID+0x1>
    6224:	8a a1       	ldd	r24, Y+34	; 0x22
    6226:	48 2f       	mov	r20, r24
    6228:	88 0f       	add	r24, r24
    622a:	55 0b       	sbc	r21, r21
    622c:	20 91 16 2e 	lds	r18, 0x2E16	; 0x802e16 <gu16SessionID>
    6230:	30 91 17 2e 	lds	r19, 0x2E17	; 0x802e17 <gu16SessionID+0x1>
    6234:	6b e0       	ldi	r22, 0x0B	; 11
    6236:	64 9f       	mul	r22, r20
    6238:	c0 01       	movw	r24, r0
    623a:	65 9f       	mul	r22, r21
    623c:	90 0d       	add	r25, r0
    623e:	11 24       	eor	r1, r1
    6240:	80 55       	subi	r24, 0x50	; 80
    6242:	91 4d       	sbci	r25, 0xD1	; 209
    6244:	dc 01       	movw	r26, r24
    6246:	2d 93       	st	X+, r18
    6248:	3c 93       	st	X, r19
    624a:	8a a1       	ldd	r24, Y+34	; 0x22
    624c:	8d a3       	std	Y+37, r24	; 0x25
    624e:	82 e0       	ldi	r24, 0x02	; 2
    6250:	90 e0       	ldi	r25, 0x00	; 0
    6252:	8e a3       	std	Y+38, r24	; 0x26
    6254:	9f a3       	std	Y+39, r25	; 0x27
    6256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    625a:	88 a7       	std	Y+40, r24	; 0x28
    625c:	99 a7       	std	Y+41, r25	; 0x29
    625e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6260:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6262:	af 8d       	ldd	r26, Y+31	; 0x1f
    6264:	b8 a1       	ldd	r27, Y+32	; 0x20
    6266:	8a a7       	std	Y+42, r24	; 0x2a
    6268:	9b a7       	std	Y+43, r25	; 0x2b
    626a:	ac a7       	std	Y+44, r26	; 0x2c
    626c:	bd a7       	std	Y+45, r27	; 0x2d
    626e:	80 91 25 2f 	lds	r24, 0x2F25	; 0x802f25 <gpfAppSocketCb>
    6272:	90 91 26 2f 	lds	r25, 0x2F26	; 0x802f26 <gpfAppSocketCb+0x1>
    6276:	89 2b       	or	r24, r25
    6278:	09 f4       	brne	.+2      	; 0x627c <m2m_ip_cb+0x25a>
    627a:	8b c2       	rjmp	.+1302   	; 0x6792 <m2m_ip_cb+0x770>
    627c:	20 91 25 2f 	lds	r18, 0x2F25	; 0x802f25 <gpfAppSocketCb>
    6280:	30 91 26 2f 	lds	r19, 0x2F26	; 0x802f26 <gpfAppSocketCb+0x1>
    6284:	79 a1       	ldd	r23, Y+33	; 0x21
    6286:	ce 01       	movw	r24, r28
    6288:	85 96       	adiw	r24, 0x25	; 37
    628a:	ac 01       	movw	r20, r24
    628c:	64 e0       	ldi	r22, 0x04	; 4
    628e:	87 2f       	mov	r24, r23
    6290:	f9 01       	movw	r30, r18
    6292:	09 95       	icall
    6294:	7e c2       	rjmp	.+1276   	; 0x6792 <m2m_ip_cb+0x770>
    6296:	ce 01       	movw	r24, r28
    6298:	8c 53       	subi	r24, 0x3C	; 60
    629a:	9f 4f       	sbci	r25, 0xFF	; 255
    629c:	dc 01       	movw	r26, r24
    629e:	8c 91       	ld	r24, X
    62a0:	84 34       	cpi	r24, 0x44	; 68
    62a2:	41 f0       	breq	.+16     	; 0x62b4 <m2m_ip_cb+0x292>
    62a4:	ce 01       	movw	r24, r28
    62a6:	8c 53       	subi	r24, 0x3C	; 60
    62a8:	9f 4f       	sbci	r25, 0xFF	; 255
    62aa:	fc 01       	movw	r30, r24
    62ac:	80 81       	ld	r24, Z
    62ae:	8b 34       	cpi	r24, 0x4B	; 75
    62b0:	09 f0       	breq	.+2      	; 0x62b4 <m2m_ip_cb+0x292>
    62b2:	44 c0       	rjmp	.+136    	; 0x633c <m2m_ip_cb+0x31a>
    62b4:	ae 01       	movw	r20, r28
    62b6:	4a 5c       	subi	r20, 0xCA	; 202
    62b8:	5f 4f       	sbci	r21, 0xFF	; 255
    62ba:	ce 01       	movw	r24, r28
    62bc:	89 53       	subi	r24, 0x39	; 57
    62be:	9f 4f       	sbci	r25, 0xFF	; 255
    62c0:	fc 01       	movw	r30, r24
    62c2:	80 81       	ld	r24, Z
    62c4:	91 81       	ldd	r25, Z+1	; 0x01
    62c6:	a2 81       	ldd	r26, Z+2	; 0x02
    62c8:	b3 81       	ldd	r27, Z+3	; 0x03
    62ca:	00 e0       	ldi	r16, 0x00	; 0
    62cc:	24 e0       	ldi	r18, 0x04	; 4
    62ce:	30 e0       	ldi	r19, 0x00	; 0
    62d0:	bc 01       	movw	r22, r24
    62d2:	cd 01       	movw	r24, r26
    62d4:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    62d8:	88 23       	and	r24, r24
    62da:	09 f0       	breq	.+2      	; 0x62de <m2m_ip_cb+0x2bc>
    62dc:	55 c2       	rjmp	.+1194   	; 0x6788 <m2m_ip_cb+0x766>
    62de:	8e a9       	ldd	r24, Y+54	; 0x36
    62e0:	8a af       	std	Y+58, r24	; 0x3a
    62e2:	8f a9       	ldd	r24, Y+55	; 0x37
    62e4:	8b af       	std	Y+59, r24	; 0x3b
    62e6:	8f a9       	ldd	r24, Y+55	; 0x37
    62e8:	88 23       	and	r24, r24
    62ea:	a1 f4       	brne	.+40     	; 0x6314 <m2m_ip_cb+0x2f2>
    62ec:	8e a9       	ldd	r24, Y+54	; 0x36
    62ee:	48 2f       	mov	r20, r24
    62f0:	88 0f       	add	r24, r24
    62f2:	55 0b       	sbc	r21, r21
    62f4:	88 ad       	ldd	r24, Y+56	; 0x38
    62f6:	99 ad       	ldd	r25, Y+57	; 0x39
    62f8:	9c 01       	movw	r18, r24
    62fa:	28 50       	subi	r18, 0x08	; 8
    62fc:	31 09       	sbc	r19, r1
    62fe:	6b e0       	ldi	r22, 0x0B	; 11
    6300:	64 9f       	mul	r22, r20
    6302:	c0 01       	movw	r24, r0
    6304:	65 9f       	mul	r22, r21
    6306:	90 0d       	add	r25, r0
    6308:	11 24       	eor	r1, r1
    630a:	8e 54       	subi	r24, 0x4E	; 78
    630c:	91 4d       	sbci	r25, 0xD1	; 209
    630e:	dc 01       	movw	r26, r24
    6310:	2d 93       	st	X+, r18
    6312:	3c 93       	st	X, r19
    6314:	80 91 25 2f 	lds	r24, 0x2F25	; 0x802f25 <gpfAppSocketCb>
    6318:	90 91 26 2f 	lds	r25, 0x2F26	; 0x802f26 <gpfAppSocketCb+0x1>
    631c:	89 2b       	or	r24, r25
    631e:	09 f4       	brne	.+2      	; 0x6322 <m2m_ip_cb+0x300>
    6320:	33 c2       	rjmp	.+1126   	; 0x6788 <m2m_ip_cb+0x766>
    6322:	20 91 25 2f 	lds	r18, 0x2F25	; 0x802f25 <gpfAppSocketCb>
    6326:	30 91 26 2f 	lds	r19, 0x2F26	; 0x802f26 <gpfAppSocketCb+0x1>
    632a:	7e a9       	ldd	r23, Y+54	; 0x36
    632c:	ce 01       	movw	r24, r28
    632e:	ca 96       	adiw	r24, 0x3a	; 58
    6330:	ac 01       	movw	r20, r24
    6332:	65 e0       	ldi	r22, 0x05	; 5
    6334:	87 2f       	mov	r24, r23
    6336:	f9 01       	movw	r30, r18
    6338:	09 95       	icall
    633a:	26 c2       	rjmp	.+1100   	; 0x6788 <m2m_ip_cb+0x766>
    633c:	ce 01       	movw	r24, r28
    633e:	8c 53       	subi	r24, 0x3C	; 60
    6340:	9f 4f       	sbci	r25, 0xFF	; 255
    6342:	dc 01       	movw	r26, r24
    6344:	8c 91       	ld	r24, X
    6346:	8a 34       	cpi	r24, 0x4A	; 74
    6348:	99 f5       	brne	.+102    	; 0x63b0 <m2m_ip_cb+0x38e>
    634a:	ae 01       	movw	r20, r28
    634c:	40 58       	subi	r20, 0x80	; 128
    634e:	5f 4f       	sbci	r21, 0xFF	; 255
    6350:	ce 01       	movw	r24, r28
    6352:	89 53       	subi	r24, 0x39	; 57
    6354:	9f 4f       	sbci	r25, 0xFF	; 255
    6356:	fc 01       	movw	r30, r24
    6358:	80 81       	ld	r24, Z
    635a:	91 81       	ldd	r25, Z+1	; 0x01
    635c:	a2 81       	ldd	r26, Z+2	; 0x02
    635e:	b3 81       	ldd	r27, Z+3	; 0x03
    6360:	00 e0       	ldi	r16, 0x00	; 0
    6362:	24 e4       	ldi	r18, 0x44	; 68
    6364:	30 e0       	ldi	r19, 0x00	; 0
    6366:	bc 01       	movw	r22, r24
    6368:	cd 01       	movw	r24, r26
    636a:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    636e:	88 23       	and	r24, r24
    6370:	09 f0       	breq	.+2      	; 0x6374 <m2m_ip_cb+0x352>
    6372:	0f c2       	rjmp	.+1054   	; 0x6792 <m2m_ip_cb+0x770>
    6374:	80 91 29 2f 	lds	r24, 0x2F29	; 0x802f29 <gpfAppResolveCb>
    6378:	90 91 2a 2f 	lds	r25, 0x2F2A	; 0x802f2a <gpfAppResolveCb+0x1>
    637c:	89 2b       	or	r24, r25
    637e:	09 f4       	brne	.+2      	; 0x6382 <m2m_ip_cb+0x360>
    6380:	08 c2       	rjmp	.+1040   	; 0x6792 <m2m_ip_cb+0x770>
    6382:	20 91 29 2f 	lds	r18, 0x2F29	; 0x802f29 <gpfAppResolveCb>
    6386:	30 91 2a 2f 	lds	r19, 0x2F2A	; 0x802f2a <gpfAppResolveCb+0x1>
    638a:	ce 01       	movw	r24, r28
    638c:	80 58       	subi	r24, 0x80	; 128
    638e:	9f 4f       	sbci	r25, 0xFF	; 255
    6390:	80 5c       	subi	r24, 0xC0	; 192
    6392:	9f 4f       	sbci	r25, 0xFF	; 255
    6394:	fc 01       	movw	r30, r24
    6396:	80 81       	ld	r24, Z
    6398:	91 81       	ldd	r25, Z+1	; 0x01
    639a:	a2 81       	ldd	r26, Z+2	; 0x02
    639c:	b3 81       	ldd	r27, Z+3	; 0x03
    639e:	fe 01       	movw	r30, r28
    63a0:	e0 58       	subi	r30, 0x80	; 128
    63a2:	ff 4f       	sbci	r31, 0xFF	; 255
    63a4:	ac 01       	movw	r20, r24
    63a6:	bd 01       	movw	r22, r26
    63a8:	cf 01       	movw	r24, r30
    63aa:	f9 01       	movw	r30, r18
    63ac:	09 95       	icall
    63ae:	f1 c1       	rjmp	.+994    	; 0x6792 <m2m_ip_cb+0x770>
    63b0:	ce 01       	movw	r24, r28
    63b2:	8c 53       	subi	r24, 0x3C	; 60
    63b4:	9f 4f       	sbci	r25, 0xFF	; 255
    63b6:	dc 01       	movw	r26, r24
    63b8:	8c 91       	ld	r24, X
    63ba:	86 34       	cpi	r24, 0x46	; 70
    63bc:	79 f0       	breq	.+30     	; 0x63dc <m2m_ip_cb+0x3ba>
    63be:	ce 01       	movw	r24, r28
    63c0:	8c 53       	subi	r24, 0x3C	; 60
    63c2:	9f 4f       	sbci	r25, 0xFF	; 255
    63c4:	fc 01       	movw	r30, r24
    63c6:	80 81       	ld	r24, Z
    63c8:	88 34       	cpi	r24, 0x48	; 72
    63ca:	41 f0       	breq	.+16     	; 0x63dc <m2m_ip_cb+0x3ba>
    63cc:	ce 01       	movw	r24, r28
    63ce:	8c 53       	subi	r24, 0x3C	; 60
    63d0:	9f 4f       	sbci	r25, 0xFF	; 255
    63d2:	dc 01       	movw	r26, r24
    63d4:	8c 91       	ld	r24, X
    63d6:	8d 34       	cpi	r24, 0x4D	; 77
    63d8:	09 f0       	breq	.+2      	; 0x63dc <m2m_ip_cb+0x3ba>
    63da:	fc c0       	rjmp	.+504    	; 0x65d4 <m2m_ip_cb+0x5b2>
    63dc:	86 e0       	ldi	r24, 0x06	; 6
    63de:	89 83       	std	Y+1, r24	; 0x01
    63e0:	ce 01       	movw	r24, r28
    63e2:	8c 53       	subi	r24, 0x3C	; 60
    63e4:	9f 4f       	sbci	r25, 0xFF	; 255
    63e6:	fc 01       	movw	r30, r24
    63e8:	80 81       	ld	r24, Z
    63ea:	88 34       	cpi	r24, 0x48	; 72
    63ec:	11 f4       	brne	.+4      	; 0x63f2 <m2m_ip_cb+0x3d0>
    63ee:	89 e0       	ldi	r24, 0x09	; 9
    63f0:	89 83       	std	Y+1, r24	; 0x01
    63f2:	80 e1       	ldi	r24, 0x10	; 16
    63f4:	90 e0       	ldi	r25, 0x00	; 0
    63f6:	8e 83       	std	Y+6, r24	; 0x06
    63f8:	9f 83       	std	Y+7, r25	; 0x07
    63fa:	2e 81       	ldd	r18, Y+6	; 0x06
    63fc:	3f 81       	ldd	r19, Y+7	; 0x07
    63fe:	ae 01       	movw	r20, r28
    6400:	44 5c       	subi	r20, 0xC4	; 196
    6402:	5f 4f       	sbci	r21, 0xFF	; 255
    6404:	ce 01       	movw	r24, r28
    6406:	89 53       	subi	r24, 0x39	; 57
    6408:	9f 4f       	sbci	r25, 0xFF	; 255
    640a:	fc 01       	movw	r30, r24
    640c:	80 81       	ld	r24, Z
    640e:	91 81       	ldd	r25, Z+1	; 0x01
    6410:	a2 81       	ldd	r26, Z+2	; 0x02
    6412:	b3 81       	ldd	r27, Z+3	; 0x03
    6414:	00 e0       	ldi	r16, 0x00	; 0
    6416:	bc 01       	movw	r22, r24
    6418:	cd 01       	movw	r24, r26
    641a:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    641e:	88 23       	and	r24, r24
    6420:	09 f0       	breq	.+2      	; 0x6424 <m2m_ip_cb+0x402>
    6422:	b4 c1       	rjmp	.+872    	; 0x678c <m2m_ip_cb+0x76a>
    6424:	18 86       	std	Y+8, r1	; 0x08
    6426:	19 86       	std	Y+9, r1	; 0x09
    6428:	ce 01       	movw	r24, r28
    642a:	88 5b       	subi	r24, 0xB8	; 184
    642c:	9f 4f       	sbci	r25, 0xFF	; 255
    642e:	dc 01       	movw	r26, r24
    6430:	8c 91       	ld	r24, X
    6432:	8a 87       	std	Y+10, r24	; 0x0a
    6434:	ce 01       	movw	r24, r28
    6436:	86 5b       	subi	r24, 0xB6	; 182
    6438:	9f 4f       	sbci	r25, 0xFF	; 255
    643a:	fc 01       	movw	r30, r24
    643c:	80 81       	ld	r24, Z
    643e:	91 81       	ldd	r25, Z+1	; 0x01
    6440:	88 87       	std	Y+8, r24	; 0x08
    6442:	99 87       	std	Y+9, r25	; 0x09
    6444:	8a 85       	ldd	r24, Y+10	; 0x0a
    6446:	28 2f       	mov	r18, r24
    6448:	88 0f       	add	r24, r24
    644a:	33 0b       	sbc	r19, r19
    644c:	4b e0       	ldi	r20, 0x0B	; 11
    644e:	42 9f       	mul	r20, r18
    6450:	c0 01       	movw	r24, r0
    6452:	43 9f       	mul	r20, r19
    6454:	90 0d       	add	r25, r0
    6456:	11 24       	eor	r1, r1
    6458:	8a 54       	subi	r24, 0x4A	; 74
    645a:	91 4d       	sbci	r25, 0xD1	; 209
    645c:	dc 01       	movw	r26, r24
    645e:	1c 92       	st	X, r1
    6460:	ce 01       	movw	r24, r28
    6462:	8c 5b       	subi	r24, 0xBC	; 188
    6464:	9f 4f       	sbci	r25, 0xFF	; 255
    6466:	fc 01       	movw	r30, r24
    6468:	80 81       	ld	r24, Z
    646a:	91 81       	ldd	r25, Z+1	; 0x01
    646c:	8b 87       	std	Y+11, r24	; 0x0b
    646e:	9c 87       	std	Y+12, r25	; 0x0c
    6470:	ce 01       	movw	r24, r28
    6472:	8a 5b       	subi	r24, 0xBA	; 186
    6474:	9f 4f       	sbci	r25, 0xFF	; 255
    6476:	dc 01       	movw	r26, r24
    6478:	8d 91       	ld	r24, X+
    647a:	9c 91       	ld	r25, X
    647c:	8d 87       	std	Y+13, r24	; 0x0d
    647e:	9e 87       	std	Y+14, r25	; 0x0e
    6480:	2e ad       	ldd	r18, Y+62	; 0x3e
    6482:	3f ad       	ldd	r19, Y+63	; 0x3f
    6484:	ce 01       	movw	r24, r28
    6486:	84 5b       	subi	r24, 0xB4	; 180
    6488:	9f 4f       	sbci	r25, 0xFF	; 255
    648a:	fc 01       	movw	r30, r24
    648c:	20 87       	std	Z+8, r18	; 0x08
    648e:	31 87       	std	Z+9, r19	; 0x09
    6490:	ce 01       	movw	r24, r28
    6492:	80 5c       	subi	r24, 0xC0	; 192
    6494:	9f 4f       	sbci	r25, 0xFF	; 255
    6496:	fc 01       	movw	r30, r24
    6498:	80 81       	ld	r24, Z
    649a:	91 81       	ldd	r25, Z+1	; 0x01
    649c:	a2 81       	ldd	r26, Z+2	; 0x02
    649e:	b3 81       	ldd	r27, Z+3	; 0x03
    64a0:	9e 01       	movw	r18, r28
    64a2:	24 5b       	subi	r18, 0xB4	; 180
    64a4:	3f 4f       	sbci	r19, 0xFF	; 255
    64a6:	f9 01       	movw	r30, r18
    64a8:	82 87       	std	Z+10, r24	; 0x0a
    64aa:	93 87       	std	Z+11, r25	; 0x0b
    64ac:	a4 87       	std	Z+12, r26	; 0x0c
    64ae:	b5 87       	std	Z+13, r27	; 0x0d
    64b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    64b2:	28 2f       	mov	r18, r24
    64b4:	88 0f       	add	r24, r24
    64b6:	33 0b       	sbc	r19, r19
    64b8:	4b e0       	ldi	r20, 0x0B	; 11
    64ba:	42 9f       	mul	r20, r18
    64bc:	c0 01       	movw	r24, r0
    64be:	43 9f       	mul	r20, r19
    64c0:	90 0d       	add	r25, r0
    64c2:	11 24       	eor	r1, r1
    64c4:	80 55       	subi	r24, 0x50	; 80
    64c6:	91 4d       	sbci	r25, 0xD1	; 209
    64c8:	dc 01       	movw	r26, r24
    64ca:	2d 91       	ld	r18, X+
    64cc:	3c 91       	ld	r19, X
    64ce:	88 85       	ldd	r24, Y+8	; 0x08
    64d0:	99 85       	ldd	r25, Y+9	; 0x09
    64d2:	28 17       	cp	r18, r24
    64d4:	39 07       	cpc	r19, r25
    64d6:	09 f0       	breq	.+2      	; 0x64da <m2m_ip_cb+0x4b8>
    64d8:	66 c0       	rjmp	.+204    	; 0x65a6 <m2m_ip_cb+0x584>
    64da:	8b 85       	ldd	r24, Y+11	; 0x0b
    64dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    64de:	18 16       	cp	r1, r24
    64e0:	19 06       	cpc	r1, r25
    64e2:	ec f5       	brge	.+122    	; 0x655e <m2m_ip_cb+0x53c>
    64e4:	2b 85       	ldd	r18, Y+11	; 0x0b
    64e6:	3c 85       	ldd	r19, Y+12	; 0x0c
    64e8:	ce 01       	movw	r24, r28
    64ea:	8b 53       	subi	r24, 0x3B	; 59
    64ec:	9f 4f       	sbci	r25, 0xFF	; 255
    64ee:	fc 01       	movw	r30, r24
    64f0:	80 81       	ld	r24, Z
    64f2:	91 81       	ldd	r25, Z+1	; 0x01
    64f4:	28 17       	cp	r18, r24
    64f6:	39 07       	cpc	r19, r25
    64f8:	90 f5       	brcc	.+100    	; 0x655e <m2m_ip_cb+0x53c>
    64fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    64fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    64fe:	9c 01       	movw	r18, r24
    6500:	40 e0       	ldi	r20, 0x00	; 0
    6502:	50 e0       	ldi	r21, 0x00	; 0
    6504:	be 01       	movw	r22, r28
    6506:	69 53       	subi	r22, 0x39	; 57
    6508:	7f 4f       	sbci	r23, 0xFF	; 255
    650a:	ce 01       	movw	r24, r28
    650c:	89 53       	subi	r24, 0x39	; 57
    650e:	9f 4f       	sbci	r25, 0xFF	; 255
    6510:	fc 01       	movw	r30, r24
    6512:	80 81       	ld	r24, Z
    6514:	91 81       	ldd	r25, Z+1	; 0x01
    6516:	a2 81       	ldd	r26, Z+2	; 0x02
    6518:	b3 81       	ldd	r27, Z+3	; 0x03
    651a:	82 0f       	add	r24, r18
    651c:	93 1f       	adc	r25, r19
    651e:	a4 1f       	adc	r26, r20
    6520:	b5 1f       	adc	r27, r21
    6522:	fb 01       	movw	r30, r22
    6524:	80 83       	st	Z, r24
    6526:	91 83       	std	Z+1, r25	; 0x01
    6528:	a2 83       	std	Z+2, r26	; 0x02
    652a:	b3 83       	std	Z+3, r27	; 0x03
    652c:	8b 85       	ldd	r24, Y+11	; 0x0b
    652e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6530:	8e 83       	std	Y+6, r24	; 0x06
    6532:	9f 83       	std	Y+7, r25	; 0x07
    6534:	2e 81       	ldd	r18, Y+6	; 0x06
    6536:	3f 81       	ldd	r19, Y+7	; 0x07
    6538:	ce 01       	movw	r24, r28
    653a:	89 53       	subi	r24, 0x39	; 57
    653c:	9f 4f       	sbci	r25, 0xFF	; 255
    653e:	fc 01       	movw	r30, r24
    6540:	80 81       	ld	r24, Z
    6542:	91 81       	ldd	r25, Z+1	; 0x01
    6544:	a2 81       	ldd	r26, Z+2	; 0x02
    6546:	b3 81       	ldd	r27, Z+3	; 0x03
    6548:	be 01       	movw	r22, r28
    654a:	64 5b       	subi	r22, 0xB4	; 180
    654c:	7f 4f       	sbci	r23, 0xFF	; 255
    654e:	79 01       	movw	r14, r18
    6550:	8c 01       	movw	r16, r24
    6552:	9d 01       	movw	r18, r26
    6554:	49 81       	ldd	r20, Y+1	; 0x01
    6556:	8a 85       	ldd	r24, Y+10	; 0x0a
    6558:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <Socket_ReadSocketData>
    655c:	17 c1       	rjmp	.+558    	; 0x678c <m2m_ip_cb+0x76a>
    655e:	ce 01       	movw	r24, r28
    6560:	84 5b       	subi	r24, 0xB4	; 180
    6562:	9f 4f       	sbci	r25, 0xFF	; 255
    6564:	2b 85       	ldd	r18, Y+11	; 0x0b
    6566:	3c 85       	ldd	r19, Y+12	; 0x0c
    6568:	dc 01       	movw	r26, r24
    656a:	12 96       	adiw	r26, 0x02	; 2
    656c:	2d 93       	st	X+, r18
    656e:	3c 93       	st	X, r19
    6570:	13 97       	sbiw	r26, 0x03	; 3
    6572:	ce 01       	movw	r24, r28
    6574:	84 5b       	subi	r24, 0xB4	; 180
    6576:	9f 4f       	sbci	r25, 0xFF	; 255
    6578:	fc 01       	movw	r30, r24
    657a:	10 82       	st	Z, r1
    657c:	11 82       	std	Z+1, r1	; 0x01
    657e:	80 91 25 2f 	lds	r24, 0x2F25	; 0x802f25 <gpfAppSocketCb>
    6582:	90 91 26 2f 	lds	r25, 0x2F26	; 0x802f26 <gpfAppSocketCb+0x1>
    6586:	89 2b       	or	r24, r25
    6588:	09 f4       	brne	.+2      	; 0x658c <m2m_ip_cb+0x56a>
    658a:	00 c1       	rjmp	.+512    	; 0x678c <m2m_ip_cb+0x76a>
    658c:	20 91 25 2f 	lds	r18, 0x2F25	; 0x802f25 <gpfAppSocketCb>
    6590:	30 91 26 2f 	lds	r19, 0x2F26	; 0x802f26 <gpfAppSocketCb+0x1>
    6594:	ce 01       	movw	r24, r28
    6596:	84 5b       	subi	r24, 0xB4	; 180
    6598:	9f 4f       	sbci	r25, 0xFF	; 255
    659a:	ac 01       	movw	r20, r24
    659c:	69 81       	ldd	r22, Y+1	; 0x01
    659e:	8a 85       	ldd	r24, Y+10	; 0x0a
    65a0:	f9 01       	movw	r30, r18
    65a2:	09 95       	icall
    65a4:	f3 c0       	rjmp	.+486    	; 0x678c <m2m_ip_cb+0x76a>
    65a6:	ce 01       	movw	r24, r28
    65a8:	8b 53       	subi	r24, 0x3B	; 59
    65aa:	9f 4f       	sbci	r25, 0xFF	; 255
    65ac:	2e 81       	ldd	r18, Y+6	; 0x06
    65ae:	3f 81       	ldd	r19, Y+7	; 0x07
    65b0:	dc 01       	movw	r26, r24
    65b2:	8d 91       	ld	r24, X+
    65b4:	9c 91       	ld	r25, X
    65b6:	28 17       	cp	r18, r24
    65b8:	39 07       	cpc	r19, r25
    65ba:	08 f0       	brcs	.+2      	; 0x65be <m2m_ip_cb+0x59c>
    65bc:	e7 c0       	rjmp	.+462    	; 0x678c <m2m_ip_cb+0x76a>
    65be:	01 e0       	ldi	r16, 0x01	; 1
    65c0:	20 e0       	ldi	r18, 0x00	; 0
    65c2:	30 e0       	ldi	r19, 0x00	; 0
    65c4:	40 e0       	ldi	r20, 0x00	; 0
    65c6:	50 e0       	ldi	r21, 0x00	; 0
    65c8:	60 e0       	ldi	r22, 0x00	; 0
    65ca:	70 e0       	ldi	r23, 0x00	; 0
    65cc:	cb 01       	movw	r24, r22
    65ce:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    65d2:	dc c0       	rjmp	.+440    	; 0x678c <m2m_ip_cb+0x76a>
    65d4:	ce 01       	movw	r24, r28
    65d6:	8c 53       	subi	r24, 0x3C	; 60
    65d8:	9f 4f       	sbci	r25, 0xFF	; 255
    65da:	fc 01       	movw	r30, r24
    65dc:	80 81       	ld	r24, Z
    65de:	85 34       	cpi	r24, 0x45	; 69
    65e0:	79 f0       	breq	.+30     	; 0x6600 <m2m_ip_cb+0x5de>
    65e2:	ce 01       	movw	r24, r28
    65e4:	8c 53       	subi	r24, 0x3C	; 60
    65e6:	9f 4f       	sbci	r25, 0xFF	; 255
    65e8:	dc 01       	movw	r26, r24
    65ea:	8c 91       	ld	r24, X
    65ec:	87 34       	cpi	r24, 0x47	; 71
    65ee:	41 f0       	breq	.+16     	; 0x6600 <m2m_ip_cb+0x5de>
    65f0:	ce 01       	movw	r24, r28
    65f2:	8c 53       	subi	r24, 0x3C	; 60
    65f4:	9f 4f       	sbci	r25, 0xFF	; 255
    65f6:	fc 01       	movw	r30, r24
    65f8:	80 81       	ld	r24, Z
    65fa:	8c 34       	cpi	r24, 0x4C	; 76
    65fc:	09 f0       	breq	.+2      	; 0x6600 <m2m_ip_cb+0x5de>
    65fe:	67 c0       	rjmp	.+206    	; 0x66ce <m2m_ip_cb+0x6ac>
    6600:	87 e0       	ldi	r24, 0x07	; 7
    6602:	8a 83       	std	Y+2, r24	; 0x02
    6604:	ce 01       	movw	r24, r28
    6606:	8c 53       	subi	r24, 0x3C	; 60
    6608:	9f 4f       	sbci	r25, 0xFF	; 255
    660a:	dc 01       	movw	r26, r24
    660c:	8c 91       	ld	r24, X
    660e:	87 34       	cpi	r24, 0x47	; 71
    6610:	11 f4       	brne	.+4      	; 0x6616 <m2m_ip_cb+0x5f4>
    6612:	88 e0       	ldi	r24, 0x08	; 8
    6614:	8a 83       	std	Y+2, r24	; 0x02
    6616:	ae 01       	movw	r20, r28
    6618:	4c 59       	subi	r20, 0x9C	; 156
    661a:	5f 4f       	sbci	r21, 0xFF	; 255
    661c:	ce 01       	movw	r24, r28
    661e:	89 53       	subi	r24, 0x39	; 57
    6620:	9f 4f       	sbci	r25, 0xFF	; 255
    6622:	fc 01       	movw	r30, r24
    6624:	80 81       	ld	r24, Z
    6626:	91 81       	ldd	r25, Z+1	; 0x01
    6628:	a2 81       	ldd	r26, Z+2	; 0x02
    662a:	b3 81       	ldd	r27, Z+3	; 0x03
    662c:	00 e0       	ldi	r16, 0x00	; 0
    662e:	28 e0       	ldi	r18, 0x08	; 8
    6630:	30 e0       	ldi	r19, 0x00	; 0
    6632:	bc 01       	movw	r22, r24
    6634:	cd 01       	movw	r24, r26
    6636:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    663a:	88 23       	and	r24, r24
    663c:	09 f0       	breq	.+2      	; 0x6640 <m2m_ip_cb+0x61e>
    663e:	a8 c0       	rjmp	.+336    	; 0x6790 <m2m_ip_cb+0x76e>
    6640:	1b 82       	std	Y+3, r1	; 0x03
    6642:	1c 82       	std	Y+4, r1	; 0x04
    6644:	ce 01       	movw	r24, r28
    6646:	8c 59       	subi	r24, 0x9C	; 156
    6648:	9f 4f       	sbci	r25, 0xFF	; 255
    664a:	dc 01       	movw	r26, r24
    664c:	8c 91       	ld	r24, X
    664e:	8d 83       	std	Y+5, r24	; 0x05
    6650:	ce 01       	movw	r24, r28
    6652:	8c 59       	subi	r24, 0x9C	; 156
    6654:	9f 4f       	sbci	r25, 0xFF	; 255
    6656:	fc 01       	movw	r30, r24
    6658:	84 81       	ldd	r24, Z+4	; 0x04
    665a:	95 81       	ldd	r25, Z+5	; 0x05
    665c:	8b 83       	std	Y+3, r24	; 0x03
    665e:	9c 83       	std	Y+4, r25	; 0x04
    6660:	ce 01       	movw	r24, r28
    6662:	8c 59       	subi	r24, 0x9C	; 156
    6664:	9f 4f       	sbci	r25, 0xFF	; 255
    6666:	dc 01       	movw	r26, r24
    6668:	12 96       	adiw	r26, 0x02	; 2
    666a:	2d 91       	ld	r18, X+
    666c:	3c 91       	ld	r19, X
    666e:	13 97       	sbiw	r26, 0x03	; 3
    6670:	ce 01       	movw	r24, r28
    6672:	8e 59       	subi	r24, 0x9E	; 158
    6674:	9f 4f       	sbci	r25, 0xFF	; 255
    6676:	fc 01       	movw	r30, r24
    6678:	20 83       	st	Z, r18
    667a:	31 83       	std	Z+1, r19	; 0x01
    667c:	8d 81       	ldd	r24, Y+5	; 0x05
    667e:	28 2f       	mov	r18, r24
    6680:	88 0f       	add	r24, r24
    6682:	33 0b       	sbc	r19, r19
    6684:	4b e0       	ldi	r20, 0x0B	; 11
    6686:	42 9f       	mul	r20, r18
    6688:	c0 01       	movw	r24, r0
    668a:	43 9f       	mul	r20, r19
    668c:	90 0d       	add	r25, r0
    668e:	11 24       	eor	r1, r1
    6690:	80 55       	subi	r24, 0x50	; 80
    6692:	91 4d       	sbci	r25, 0xD1	; 209
    6694:	dc 01       	movw	r26, r24
    6696:	2d 91       	ld	r18, X+
    6698:	3c 91       	ld	r19, X
    669a:	8b 81       	ldd	r24, Y+3	; 0x03
    669c:	9c 81       	ldd	r25, Y+4	; 0x04
    669e:	28 17       	cp	r18, r24
    66a0:	39 07       	cpc	r19, r25
    66a2:	09 f0       	breq	.+2      	; 0x66a6 <m2m_ip_cb+0x684>
    66a4:	75 c0       	rjmp	.+234    	; 0x6790 <m2m_ip_cb+0x76e>
    66a6:	80 91 25 2f 	lds	r24, 0x2F25	; 0x802f25 <gpfAppSocketCb>
    66aa:	90 91 26 2f 	lds	r25, 0x2F26	; 0x802f26 <gpfAppSocketCb+0x1>
    66ae:	89 2b       	or	r24, r25
    66b0:	09 f4       	brne	.+2      	; 0x66b4 <m2m_ip_cb+0x692>
    66b2:	6e c0       	rjmp	.+220    	; 0x6790 <m2m_ip_cb+0x76e>
    66b4:	20 91 25 2f 	lds	r18, 0x2F25	; 0x802f25 <gpfAppSocketCb>
    66b8:	30 91 26 2f 	lds	r19, 0x2F26	; 0x802f26 <gpfAppSocketCb+0x1>
    66bc:	ce 01       	movw	r24, r28
    66be:	8e 59       	subi	r24, 0x9E	; 158
    66c0:	9f 4f       	sbci	r25, 0xFF	; 255
    66c2:	ac 01       	movw	r20, r24
    66c4:	6a 81       	ldd	r22, Y+2	; 0x02
    66c6:	8d 81       	ldd	r24, Y+5	; 0x05
    66c8:	f9 01       	movw	r30, r18
    66ca:	09 95       	icall
    66cc:	61 c0       	rjmp	.+194    	; 0x6790 <m2m_ip_cb+0x76e>
    66ce:	ce 01       	movw	r24, r28
    66d0:	8c 53       	subi	r24, 0x3C	; 60
    66d2:	9f 4f       	sbci	r25, 0xFF	; 255
    66d4:	dc 01       	movw	r26, r24
    66d6:	8c 91       	ld	r24, X
    66d8:	82 35       	cpi	r24, 0x52	; 82
    66da:	09 f0       	breq	.+2      	; 0x66de <m2m_ip_cb+0x6bc>
    66dc:	5a c0       	rjmp	.+180    	; 0x6792 <m2m_ip_cb+0x770>
    66de:	ae 01       	movw	r20, r28
    66e0:	44 59       	subi	r20, 0x94	; 148
    66e2:	5f 4f       	sbci	r21, 0xFF	; 255
    66e4:	ce 01       	movw	r24, r28
    66e6:	89 53       	subi	r24, 0x39	; 57
    66e8:	9f 4f       	sbci	r25, 0xFF	; 255
    66ea:	fc 01       	movw	r30, r24
    66ec:	80 81       	ld	r24, Z
    66ee:	91 81       	ldd	r25, Z+1	; 0x01
    66f0:	a2 81       	ldd	r26, Z+2	; 0x02
    66f2:	b3 81       	ldd	r27, Z+3	; 0x03
    66f4:	01 e0       	ldi	r16, 0x01	; 1
    66f6:	24 e1       	ldi	r18, 0x14	; 20
    66f8:	30 e0       	ldi	r19, 0x00	; 0
    66fa:	bc 01       	movw	r22, r24
    66fc:	cd 01       	movw	r24, r26
    66fe:	0e 94 94 18 	call	0x3128	; 0x3128 <hif_receive>
    6702:	88 23       	and	r24, r24
    6704:	09 f0       	breq	.+2      	; 0x6708 <m2m_ip_cb+0x6e6>
    6706:	45 c0       	rjmp	.+138    	; 0x6792 <m2m_ip_cb+0x770>
    6708:	ce 01       	movw	r24, r28
    670a:	84 59       	subi	r24, 0x94	; 148
    670c:	9f 4f       	sbci	r25, 0xFF	; 255
    670e:	fc 01       	movw	r30, r24
    6710:	84 81       	ldd	r24, Z+4	; 0x04
    6712:	95 81       	ldd	r25, Z+5	; 0x05
    6714:	a6 81       	ldd	r26, Z+6	; 0x06
    6716:	b7 81       	ldd	r27, Z+7	; 0x07
    6718:	80 93 27 2f 	sts	0x2F27, r24	; 0x802f27 <gfpPingCb>
    671c:	90 93 28 2f 	sts	0x2F28, r25	; 0x802f28 <gfpPingCb+0x1>
    6720:	80 91 27 2f 	lds	r24, 0x2F27	; 0x802f27 <gfpPingCb>
    6724:	90 91 28 2f 	lds	r25, 0x2F28	; 0x802f28 <gfpPingCb+0x1>
    6728:	89 2b       	or	r24, r25
    672a:	99 f1       	breq	.+102    	; 0x6792 <m2m_ip_cb+0x770>
    672c:	a0 91 27 2f 	lds	r26, 0x2F27	; 0x802f27 <gfpPingCb>
    6730:	b0 91 28 2f 	lds	r27, 0x2F28	; 0x802f28 <gfpPingCb+0x1>
    6734:	c5 53       	subi	r28, 0x35	; 53
    6736:	df 4f       	sbci	r29, 0xFF	; 255
    6738:	a8 83       	st	Y, r26
    673a:	b9 83       	std	Y+1, r27	; 0x01
    673c:	cb 5c       	subi	r28, 0xCB	; 203
    673e:	d0 40       	sbci	r29, 0x00	; 0
    6740:	ce 01       	movw	r24, r28
    6742:	84 59       	subi	r24, 0x94	; 148
    6744:	9f 4f       	sbci	r25, 0xFF	; 255
    6746:	fc 01       	movw	r30, r24
    6748:	60 89       	ldd	r22, Z+16	; 0x10
    674a:	ce 01       	movw	r24, r28
    674c:	84 59       	subi	r24, 0x94	; 148
    674e:	9f 4f       	sbci	r25, 0xFF	; 255
    6750:	dc 01       	movw	r26, r24
    6752:	18 96       	adiw	r26, 0x08	; 8
    6754:	2d 91       	ld	r18, X+
    6756:	3d 91       	ld	r19, X+
    6758:	4d 91       	ld	r20, X+
    675a:	5c 91       	ld	r21, X
    675c:	1b 97       	sbiw	r26, 0x0b	; 11
    675e:	ce 01       	movw	r24, r28
    6760:	84 59       	subi	r24, 0x94	; 148
    6762:	9f 4f       	sbci	r25, 0xFF	; 255
    6764:	fc 01       	movw	r30, r24
    6766:	80 81       	ld	r24, Z
    6768:	91 81       	ldd	r25, Z+1	; 0x01
    676a:	a2 81       	ldd	r26, Z+2	; 0x02
    676c:	b3 81       	ldd	r27, Z+3	; 0x03
    676e:	06 2f       	mov	r16, r22
    6770:	bc 01       	movw	r22, r24
    6772:	cd 01       	movw	r24, r26
    6774:	c5 53       	subi	r28, 0x35	; 53
    6776:	df 4f       	sbci	r29, 0xFF	; 255
    6778:	e8 81       	ld	r30, Y
    677a:	f9 81       	ldd	r31, Y+1	; 0x01
    677c:	cb 5c       	subi	r28, 0xCB	; 203
    677e:	d0 40       	sbci	r29, 0x00	; 0
    6780:	09 95       	icall
    6782:	07 c0       	rjmp	.+14     	; 0x6792 <m2m_ip_cb+0x770>
    6784:	00 00       	nop
    6786:	05 c0       	rjmp	.+10     	; 0x6792 <m2m_ip_cb+0x770>
    6788:	00 00       	nop
    678a:	03 c0       	rjmp	.+6      	; 0x6792 <m2m_ip_cb+0x770>
    678c:	00 00       	nop
    678e:	01 c0       	rjmp	.+2      	; 0x6792 <m2m_ip_cb+0x770>
    6790:	00 00       	nop
    6792:	00 00       	nop
    6794:	c4 53       	subi	r28, 0x34	; 52
    6796:	df 4f       	sbci	r29, 0xFF	; 255
    6798:	cd bf       	out	0x3d, r28	; 61
    679a:	de bf       	out	0x3e, r29	; 62
    679c:	df 91       	pop	r29
    679e:	cf 91       	pop	r28
    67a0:	1f 91       	pop	r17
    67a2:	0f 91       	pop	r16
    67a4:	ff 90       	pop	r15
    67a6:	ef 90       	pop	r14
    67a8:	08 95       	ret

000067aa <socketInit>:
    67aa:	cf 93       	push	r28
    67ac:	df 93       	push	r29
    67ae:	cd b7       	in	r28, 0x3d	; 61
    67b0:	de b7       	in	r29, 0x3e	; 62
    67b2:	80 91 18 2e 	lds	r24, 0x2E18	; 0x802e18 <gbSocketInit>
    67b6:	88 23       	and	r24, r24
    67b8:	a9 f4       	brne	.+42     	; 0x67e4 <socketInit+0x3a>
    67ba:	29 e7       	ldi	r18, 0x79	; 121
    67bc:	30 e0       	ldi	r19, 0x00	; 0
    67be:	40 e0       	ldi	r20, 0x00	; 0
    67c0:	50 e0       	ldi	r21, 0x00	; 0
    67c2:	60 e0       	ldi	r22, 0x00	; 0
    67c4:	8c ea       	ldi	r24, 0xAC	; 172
    67c6:	9e e2       	ldi	r25, 0x2E	; 46
    67c8:	0e 94 bf 13 	call	0x277e	; 0x277e <m2m_memset>
    67cc:	61 e1       	ldi	r22, 0x11	; 17
    67ce:	70 e3       	ldi	r23, 0x30	; 48
    67d0:	82 e0       	ldi	r24, 0x02	; 2
    67d2:	0e 94 61 19 	call	0x32c2	; 0x32c2 <hif_register_cb>
    67d6:	81 e0       	ldi	r24, 0x01	; 1
    67d8:	80 93 18 2e 	sts	0x2E18, r24	; 0x802e18 <gbSocketInit>
    67dc:	10 92 16 2e 	sts	0x2E16, r1	; 0x802e16 <gu16SessionID>
    67e0:	10 92 17 2e 	sts	0x2E17, r1	; 0x802e17 <gu16SessionID+0x1>
    67e4:	00 00       	nop
    67e6:	df 91       	pop	r29
    67e8:	cf 91       	pop	r28
    67ea:	08 95       	ret

000067ec <registerSocketCallback>:
    67ec:	cf 93       	push	r28
    67ee:	df 93       	push	r29
    67f0:	00 d0       	rcall	.+0      	; 0x67f2 <registerSocketCallback+0x6>
    67f2:	00 d0       	rcall	.+0      	; 0x67f4 <registerSocketCallback+0x8>
    67f4:	cd b7       	in	r28, 0x3d	; 61
    67f6:	de b7       	in	r29, 0x3e	; 62
    67f8:	89 83       	std	Y+1, r24	; 0x01
    67fa:	9a 83       	std	Y+2, r25	; 0x02
    67fc:	6b 83       	std	Y+3, r22	; 0x03
    67fe:	7c 83       	std	Y+4, r23	; 0x04
    6800:	89 81       	ldd	r24, Y+1	; 0x01
    6802:	9a 81       	ldd	r25, Y+2	; 0x02
    6804:	80 93 25 2f 	sts	0x2F25, r24	; 0x802f25 <gpfAppSocketCb>
    6808:	90 93 26 2f 	sts	0x2F26, r25	; 0x802f26 <gpfAppSocketCb+0x1>
    680c:	8b 81       	ldd	r24, Y+3	; 0x03
    680e:	9c 81       	ldd	r25, Y+4	; 0x04
    6810:	80 93 29 2f 	sts	0x2F29, r24	; 0x802f29 <gpfAppResolveCb>
    6814:	90 93 2a 2f 	sts	0x2F2A, r25	; 0x802f2a <gpfAppResolveCb+0x1>
    6818:	00 00       	nop
    681a:	24 96       	adiw	r28, 0x04	; 4
    681c:	cd bf       	out	0x3d, r28	; 61
    681e:	de bf       	out	0x3e, r29	; 62
    6820:	df 91       	pop	r29
    6822:	cf 91       	pop	r28
    6824:	08 95       	ret

00006826 <socket>:
    6826:	cf 92       	push	r12
    6828:	df 92       	push	r13
    682a:	ef 92       	push	r14
    682c:	ff 92       	push	r15
    682e:	0f 93       	push	r16
    6830:	1f 93       	push	r17
    6832:	cf 93       	push	r28
    6834:	df 93       	push	r29
    6836:	cd b7       	in	r28, 0x3d	; 61
    6838:	de b7       	in	r29, 0x3e	; 62
    683a:	2f 97       	sbiw	r28, 0x0f	; 15
    683c:	cd bf       	out	0x3d, r28	; 61
    683e:	de bf       	out	0x3e, r29	; 62
    6840:	8c 87       	std	Y+12, r24	; 0x0c
    6842:	9d 87       	std	Y+13, r25	; 0x0d
    6844:	6e 87       	std	Y+14, r22	; 0x0e
    6846:	4f 87       	std	Y+15, r20	; 0x0f
    6848:	8f ef       	ldi	r24, 0xFF	; 255
    684a:	89 83       	std	Y+1, r24	; 0x01
    684c:	8c 85       	ldd	r24, Y+12	; 0x0c
    684e:	9d 85       	ldd	r25, Y+13	; 0x0d
    6850:	02 97       	sbiw	r24, 0x02	; 2
    6852:	09 f0       	breq	.+2      	; 0x6856 <socket+0x30>
    6854:	bd c0       	rjmp	.+378    	; 0x69d0 <socket+0x1aa>
    6856:	8e 85       	ldd	r24, Y+14	; 0x0e
    6858:	81 30       	cpi	r24, 0x01	; 1
    685a:	79 f5       	brne	.+94     	; 0x68ba <socket+0x94>
    685c:	1a 82       	std	Y+2, r1	; 0x02
    685e:	29 c0       	rjmp	.+82     	; 0x68b2 <socket+0x8c>
    6860:	80 91 19 2e 	lds	r24, 0x2E19	; 0x802e19 <u8NextTcpSock.2561>
    6864:	8d 83       	std	Y+5, r24	; 0x05
    6866:	80 91 19 2e 	lds	r24, 0x2E19	; 0x802e19 <u8NextTcpSock.2561>
    686a:	28 2f       	mov	r18, r24
    686c:	30 e0       	ldi	r19, 0x00	; 0
    686e:	4b e0       	ldi	r20, 0x0B	; 11
    6870:	42 9f       	mul	r20, r18
    6872:	c0 01       	movw	r24, r0
    6874:	43 9f       	mul	r20, r19
    6876:	90 0d       	add	r25, r0
    6878:	11 24       	eor	r1, r1
    687a:	84 55       	subi	r24, 0x54	; 84
    687c:	91 4d       	sbci	r25, 0xD1	; 209
    687e:	8b 83       	std	Y+3, r24	; 0x03
    6880:	9c 83       	std	Y+4, r25	; 0x04
    6882:	80 91 19 2e 	lds	r24, 0x2E19	; 0x802e19 <u8NextTcpSock.2561>
    6886:	88 2f       	mov	r24, r24
    6888:	90 e0       	ldi	r25, 0x00	; 0
    688a:	01 96       	adiw	r24, 0x01	; 1
    688c:	27 e0       	ldi	r18, 0x07	; 7
    688e:	30 e0       	ldi	r19, 0x00	; 0
    6890:	b9 01       	movw	r22, r18
    6892:	0e 94 3c 3b 	call	0x7678	; 0x7678 <__divmodhi4>
    6896:	80 93 19 2e 	sts	0x2E19, r24	; 0x802e19 <u8NextTcpSock.2561>
    689a:	8b 81       	ldd	r24, Y+3	; 0x03
    689c:	9c 81       	ldd	r25, Y+4	; 0x04
    689e:	fc 01       	movw	r30, r24
    68a0:	80 85       	ldd	r24, Z+8	; 0x08
    68a2:	88 23       	and	r24, r24
    68a4:	19 f4       	brne	.+6      	; 0x68ac <socket+0x86>
    68a6:	8d 81       	ldd	r24, Y+5	; 0x05
    68a8:	89 83       	std	Y+1, r24	; 0x01
    68aa:	42 c0       	rjmp	.+132    	; 0x6930 <socket+0x10a>
    68ac:	8a 81       	ldd	r24, Y+2	; 0x02
    68ae:	8f 5f       	subi	r24, 0xFF	; 255
    68b0:	8a 83       	std	Y+2, r24	; 0x02
    68b2:	8a 81       	ldd	r24, Y+2	; 0x02
    68b4:	87 30       	cpi	r24, 0x07	; 7
    68b6:	a0 f2       	brcs	.-88     	; 0x6860 <socket+0x3a>
    68b8:	3b c0       	rjmp	.+118    	; 0x6930 <socket+0x10a>
    68ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    68bc:	82 30       	cpi	r24, 0x02	; 2
    68be:	c1 f5       	brne	.+112    	; 0x6930 <socket+0x10a>
    68c0:	89 ef       	ldi	r24, 0xF9	; 249
    68c2:	9e e2       	ldi	r25, 0x2E	; 46
    68c4:	8e 83       	std	Y+6, r24	; 0x06
    68c6:	9f 83       	std	Y+7, r25	; 0x07
    68c8:	1a 82       	std	Y+2, r1	; 0x02
    68ca:	2f c0       	rjmp	.+94     	; 0x692a <socket+0x104>
    68cc:	80 91 1a 2e 	lds	r24, 0x2E1A	; 0x802e1a <u8NextUdpSock.2562>
    68d0:	8d 83       	std	Y+5, r24	; 0x05
    68d2:	80 91 1a 2e 	lds	r24, 0x2E1A	; 0x802e1a <u8NextUdpSock.2562>
    68d6:	28 2f       	mov	r18, r24
    68d8:	30 e0       	ldi	r19, 0x00	; 0
    68da:	4b e0       	ldi	r20, 0x0B	; 11
    68dc:	42 9f       	mul	r20, r18
    68de:	c0 01       	movw	r24, r0
    68e0:	43 9f       	mul	r20, r19
    68e2:	90 0d       	add	r25, r0
    68e4:	11 24       	eor	r1, r1
    68e6:	2e 81       	ldd	r18, Y+6	; 0x06
    68e8:	3f 81       	ldd	r19, Y+7	; 0x07
    68ea:	82 0f       	add	r24, r18
    68ec:	93 1f       	adc	r25, r19
    68ee:	8b 83       	std	Y+3, r24	; 0x03
    68f0:	9c 83       	std	Y+4, r25	; 0x04
    68f2:	80 91 1a 2e 	lds	r24, 0x2E1A	; 0x802e1a <u8NextUdpSock.2562>
    68f6:	88 2f       	mov	r24, r24
    68f8:	90 e0       	ldi	r25, 0x00	; 0
    68fa:	01 96       	adiw	r24, 0x01	; 1
    68fc:	83 70       	andi	r24, 0x03	; 3
    68fe:	90 78       	andi	r25, 0x80	; 128
    6900:	99 23       	and	r25, r25
    6902:	24 f4       	brge	.+8      	; 0x690c <socket+0xe6>
    6904:	01 97       	sbiw	r24, 0x01	; 1
    6906:	8c 6f       	ori	r24, 0xFC	; 252
    6908:	9f 6f       	ori	r25, 0xFF	; 255
    690a:	01 96       	adiw	r24, 0x01	; 1
    690c:	80 93 1a 2e 	sts	0x2E1A, r24	; 0x802e1a <u8NextUdpSock.2562>
    6910:	8b 81       	ldd	r24, Y+3	; 0x03
    6912:	9c 81       	ldd	r25, Y+4	; 0x04
    6914:	fc 01       	movw	r30, r24
    6916:	80 85       	ldd	r24, Z+8	; 0x08
    6918:	88 23       	and	r24, r24
    691a:	21 f4       	brne	.+8      	; 0x6924 <socket+0xfe>
    691c:	8d 81       	ldd	r24, Y+5	; 0x05
    691e:	89 5f       	subi	r24, 0xF9	; 249
    6920:	89 83       	std	Y+1, r24	; 0x01
    6922:	06 c0       	rjmp	.+12     	; 0x6930 <socket+0x10a>
    6924:	8a 81       	ldd	r24, Y+2	; 0x02
    6926:	8f 5f       	subi	r24, 0xFF	; 255
    6928:	8a 83       	std	Y+2, r24	; 0x02
    692a:	8a 81       	ldd	r24, Y+2	; 0x02
    692c:	84 30       	cpi	r24, 0x04	; 4
    692e:	70 f2       	brcs	.-100    	; 0x68cc <socket+0xa6>
    6930:	89 81       	ldd	r24, Y+1	; 0x01
    6932:	88 23       	and	r24, r24
    6934:	0c f4       	brge	.+2      	; 0x6938 <socket+0x112>
    6936:	4c c0       	rjmp	.+152    	; 0x69d0 <socket+0x1aa>
    6938:	8b 81       	ldd	r24, Y+3	; 0x03
    693a:	9c 81       	ldd	r25, Y+4	; 0x04
    693c:	2b e0       	ldi	r18, 0x0B	; 11
    693e:	30 e0       	ldi	r19, 0x00	; 0
    6940:	40 e0       	ldi	r20, 0x00	; 0
    6942:	50 e0       	ldi	r21, 0x00	; 0
    6944:	60 e0       	ldi	r22, 0x00	; 0
    6946:	0e 94 bf 13 	call	0x277e	; 0x277e <m2m_memset>
    694a:	8b 81       	ldd	r24, Y+3	; 0x03
    694c:	9c 81       	ldd	r25, Y+4	; 0x04
    694e:	21 e0       	ldi	r18, 0x01	; 1
    6950:	fc 01       	movw	r30, r24
    6952:	20 87       	std	Z+8, r18	; 0x08
    6954:	80 91 16 2e 	lds	r24, 0x2E16	; 0x802e16 <gu16SessionID>
    6958:	90 91 17 2e 	lds	r25, 0x2E17	; 0x802e17 <gu16SessionID+0x1>
    695c:	01 96       	adiw	r24, 0x01	; 1
    695e:	80 93 16 2e 	sts	0x2E16, r24	; 0x802e16 <gu16SessionID>
    6962:	90 93 17 2e 	sts	0x2E17, r25	; 0x802e17 <gu16SessionID+0x1>
    6966:	80 91 16 2e 	lds	r24, 0x2E16	; 0x802e16 <gu16SessionID>
    696a:	90 91 17 2e 	lds	r25, 0x2E17	; 0x802e17 <gu16SessionID+0x1>
    696e:	89 2b       	or	r24, r25
    6970:	49 f4       	brne	.+18     	; 0x6984 <socket+0x15e>
    6972:	80 91 16 2e 	lds	r24, 0x2E16	; 0x802e16 <gu16SessionID>
    6976:	90 91 17 2e 	lds	r25, 0x2E17	; 0x802e17 <gu16SessionID+0x1>
    697a:	01 96       	adiw	r24, 0x01	; 1
    697c:	80 93 16 2e 	sts	0x2E16, r24	; 0x802e16 <gu16SessionID>
    6980:	90 93 17 2e 	sts	0x2E17, r25	; 0x802e17 <gu16SessionID+0x1>
    6984:	20 91 16 2e 	lds	r18, 0x2E16	; 0x802e16 <gu16SessionID>
    6988:	30 91 17 2e 	lds	r19, 0x2E17	; 0x802e17 <gu16SessionID+0x1>
    698c:	8b 81       	ldd	r24, Y+3	; 0x03
    698e:	9c 81       	ldd	r25, Y+4	; 0x04
    6990:	fc 01       	movw	r30, r24
    6992:	24 83       	std	Z+4, r18	; 0x04
    6994:	35 83       	std	Z+5, r19	; 0x05
    6996:	8f 85       	ldd	r24, Y+15	; 0x0f
    6998:	88 2f       	mov	r24, r24
    699a:	90 e0       	ldi	r25, 0x00	; 0
    699c:	81 70       	andi	r24, 0x01	; 1
    699e:	99 27       	eor	r25, r25
    69a0:	89 2b       	or	r24, r25
    69a2:	b1 f0       	breq	.+44     	; 0x69d0 <socket+0x1aa>
    69a4:	89 81       	ldd	r24, Y+1	; 0x01
    69a6:	88 87       	std	Y+8, r24	; 0x08
    69a8:	8b 81       	ldd	r24, Y+3	; 0x03
    69aa:	9c 81       	ldd	r25, Y+4	; 0x04
    69ac:	21 e2       	ldi	r18, 0x21	; 33
    69ae:	fc 01       	movw	r30, r24
    69b0:	21 87       	std	Z+9, r18	; 0x09
    69b2:	ce 01       	movw	r24, r28
    69b4:	08 96       	adiw	r24, 0x08	; 8
    69b6:	c1 2c       	mov	r12, r1
    69b8:	d1 2c       	mov	r13, r1
    69ba:	e1 2c       	mov	r14, r1
    69bc:	f1 2c       	mov	r15, r1
    69be:	00 e0       	ldi	r16, 0x00	; 0
    69c0:	10 e0       	ldi	r17, 0x00	; 0
    69c2:	24 e0       	ldi	r18, 0x04	; 4
    69c4:	30 e0       	ldi	r19, 0x00	; 0
    69c6:	ac 01       	movw	r20, r24
    69c8:	60 e5       	ldi	r22, 0x50	; 80
    69ca:	82 e0       	ldi	r24, 0x02	; 2
    69cc:	0e 94 ed 14 	call	0x29da	; 0x29da <hif_send>
    69d0:	89 81       	ldd	r24, Y+1	; 0x01
    69d2:	2f 96       	adiw	r28, 0x0f	; 15
    69d4:	cd bf       	out	0x3d, r28	; 61
    69d6:	de bf       	out	0x3e, r29	; 62
    69d8:	df 91       	pop	r29
    69da:	cf 91       	pop	r28
    69dc:	1f 91       	pop	r17
    69de:	0f 91       	pop	r16
    69e0:	ff 90       	pop	r15
    69e2:	ef 90       	pop	r14
    69e4:	df 90       	pop	r13
    69e6:	cf 90       	pop	r12
    69e8:	08 95       	ret

000069ea <bind>:
    69ea:	cf 92       	push	r12
    69ec:	df 92       	push	r13
    69ee:	ef 92       	push	r14
    69f0:	ff 92       	push	r15
    69f2:	0f 93       	push	r16
    69f4:	1f 93       	push	r17
    69f6:	cf 93       	push	r28
    69f8:	df 93       	push	r29
    69fa:	cd b7       	in	r28, 0x3d	; 61
    69fc:	de b7       	in	r29, 0x3e	; 62
    69fe:	62 97       	sbiw	r28, 0x12	; 18
    6a00:	cd bf       	out	0x3d, r28	; 61
    6a02:	de bf       	out	0x3e, r29	; 62
    6a04:	8f 87       	std	Y+15, r24	; 0x0f
    6a06:	68 8b       	std	Y+16, r22	; 0x10
    6a08:	79 8b       	std	Y+17, r23	; 0x11
    6a0a:	4a 8b       	std	Y+18, r20	; 0x12
    6a0c:	8a ef       	ldi	r24, 0xFA	; 250
    6a0e:	89 83       	std	Y+1, r24	; 0x01
    6a10:	88 89       	ldd	r24, Y+16	; 0x10
    6a12:	99 89       	ldd	r25, Y+17	; 0x11
    6a14:	89 2b       	or	r24, r25
    6a16:	09 f4       	brne	.+2      	; 0x6a1a <bind+0x30>
    6a18:	63 c0       	rjmp	.+198    	; 0x6ae0 <bind+0xf6>
    6a1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a1c:	88 23       	and	r24, r24
    6a1e:	0c f4       	brge	.+2      	; 0x6a22 <bind+0x38>
    6a20:	5f c0       	rjmp	.+190    	; 0x6ae0 <bind+0xf6>
    6a22:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a24:	28 2f       	mov	r18, r24
    6a26:	88 0f       	add	r24, r24
    6a28:	33 0b       	sbc	r19, r19
    6a2a:	4b e0       	ldi	r20, 0x0B	; 11
    6a2c:	42 9f       	mul	r20, r18
    6a2e:	c0 01       	movw	r24, r0
    6a30:	43 9f       	mul	r20, r19
    6a32:	90 0d       	add	r25, r0
    6a34:	11 24       	eor	r1, r1
    6a36:	8c 54       	subi	r24, 0x4C	; 76
    6a38:	91 4d       	sbci	r25, 0xD1	; 209
    6a3a:	fc 01       	movw	r30, r24
    6a3c:	80 81       	ld	r24, Z
    6a3e:	81 30       	cpi	r24, 0x01	; 1
    6a40:	09 f0       	breq	.+2      	; 0x6a44 <bind+0x5a>
    6a42:	4e c0       	rjmp	.+156    	; 0x6ae0 <bind+0xf6>
    6a44:	8a 89       	ldd	r24, Y+18	; 0x12
    6a46:	88 23       	and	r24, r24
    6a48:	09 f4       	brne	.+2      	; 0x6a4c <bind+0x62>
    6a4a:	4a c0       	rjmp	.+148    	; 0x6ae0 <bind+0xf6>
    6a4c:	81 e4       	ldi	r24, 0x41	; 65
    6a4e:	8a 83       	std	Y+2, r24	; 0x02
    6a50:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a52:	28 2f       	mov	r18, r24
    6a54:	88 0f       	add	r24, r24
    6a56:	33 0b       	sbc	r19, r19
    6a58:	4b e0       	ldi	r20, 0x0B	; 11
    6a5a:	42 9f       	mul	r20, r18
    6a5c:	c0 01       	movw	r24, r0
    6a5e:	43 9f       	mul	r20, r19
    6a60:	90 0d       	add	r25, r0
    6a62:	11 24       	eor	r1, r1
    6a64:	8b 54       	subi	r24, 0x4B	; 75
    6a66:	91 4d       	sbci	r25, 0xD1	; 209
    6a68:	fc 01       	movw	r30, r24
    6a6a:	80 81       	ld	r24, Z
    6a6c:	88 2f       	mov	r24, r24
    6a6e:	90 e0       	ldi	r25, 0x00	; 0
    6a70:	81 70       	andi	r24, 0x01	; 1
    6a72:	99 27       	eor	r25, r25
    6a74:	89 2b       	or	r24, r25
    6a76:	11 f0       	breq	.+4      	; 0x6a7c <bind+0x92>
    6a78:	84 e5       	ldi	r24, 0x54	; 84
    6a7a:	8a 83       	std	Y+2, r24	; 0x02
    6a7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a7e:	8b 87       	std	Y+11, r24	; 0x0b
    6a80:	68 89       	ldd	r22, Y+16	; 0x10
    6a82:	79 89       	ldd	r23, Y+17	; 0x11
    6a84:	ce 01       	movw	r24, r28
    6a86:	03 96       	adiw	r24, 0x03	; 3
    6a88:	28 e0       	ldi	r18, 0x08	; 8
    6a8a:	30 e0       	ldi	r19, 0x00	; 0
    6a8c:	40 e0       	ldi	r20, 0x00	; 0
    6a8e:	50 e0       	ldi	r21, 0x00	; 0
    6a90:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <m2m_memcpy>
    6a94:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a96:	28 2f       	mov	r18, r24
    6a98:	88 0f       	add	r24, r24
    6a9a:	33 0b       	sbc	r19, r19
    6a9c:	4b e0       	ldi	r20, 0x0B	; 11
    6a9e:	42 9f       	mul	r20, r18
    6aa0:	c0 01       	movw	r24, r0
    6aa2:	43 9f       	mul	r20, r19
    6aa4:	90 0d       	add	r25, r0
    6aa6:	11 24       	eor	r1, r1
    6aa8:	80 55       	subi	r24, 0x50	; 80
    6aaa:	91 4d       	sbci	r25, 0xD1	; 209
    6aac:	fc 01       	movw	r30, r24
    6aae:	80 81       	ld	r24, Z
    6ab0:	91 81       	ldd	r25, Z+1	; 0x01
    6ab2:	8d 87       	std	Y+13, r24	; 0x0d
    6ab4:	9e 87       	std	Y+14, r25	; 0x0e
    6ab6:	ce 01       	movw	r24, r28
    6ab8:	03 96       	adiw	r24, 0x03	; 3
    6aba:	c1 2c       	mov	r12, r1
    6abc:	d1 2c       	mov	r13, r1
    6abe:	e1 2c       	mov	r14, r1
    6ac0:	f1 2c       	mov	r15, r1
    6ac2:	00 e0       	ldi	r16, 0x00	; 0
    6ac4:	10 e0       	ldi	r17, 0x00	; 0
    6ac6:	2c e0       	ldi	r18, 0x0C	; 12
    6ac8:	30 e0       	ldi	r19, 0x00	; 0
    6aca:	ac 01       	movw	r20, r24
    6acc:	6a 81       	ldd	r22, Y+2	; 0x02
    6ace:	82 e0       	ldi	r24, 0x02	; 2
    6ad0:	0e 94 ed 14 	call	0x29da	; 0x29da <hif_send>
    6ad4:	89 83       	std	Y+1, r24	; 0x01
    6ad6:	89 81       	ldd	r24, Y+1	; 0x01
    6ad8:	88 23       	and	r24, r24
    6ada:	11 f0       	breq	.+4      	; 0x6ae0 <bind+0xf6>
    6adc:	87 ef       	ldi	r24, 0xF7	; 247
    6ade:	89 83       	std	Y+1, r24	; 0x01
    6ae0:	89 81       	ldd	r24, Y+1	; 0x01
    6ae2:	62 96       	adiw	r28, 0x12	; 18
    6ae4:	cd bf       	out	0x3d, r28	; 61
    6ae6:	de bf       	out	0x3e, r29	; 62
    6ae8:	df 91       	pop	r29
    6aea:	cf 91       	pop	r28
    6aec:	1f 91       	pop	r17
    6aee:	0f 91       	pop	r16
    6af0:	ff 90       	pop	r15
    6af2:	ef 90       	pop	r14
    6af4:	df 90       	pop	r13
    6af6:	cf 90       	pop	r12
    6af8:	08 95       	ret

00006afa <listen>:
    6afa:	cf 92       	push	r12
    6afc:	df 92       	push	r13
    6afe:	ef 92       	push	r14
    6b00:	ff 92       	push	r15
    6b02:	0f 93       	push	r16
    6b04:	1f 93       	push	r17
    6b06:	cf 93       	push	r28
    6b08:	df 93       	push	r29
    6b0a:	cd b7       	in	r28, 0x3d	; 61
    6b0c:	de b7       	in	r29, 0x3e	; 62
    6b0e:	27 97       	sbiw	r28, 0x07	; 7
    6b10:	cd bf       	out	0x3d, r28	; 61
    6b12:	de bf       	out	0x3e, r29	; 62
    6b14:	8e 83       	std	Y+6, r24	; 0x06
    6b16:	6f 83       	std	Y+7, r22	; 0x07
    6b18:	8a ef       	ldi	r24, 0xFA	; 250
    6b1a:	89 83       	std	Y+1, r24	; 0x01
    6b1c:	8e 81       	ldd	r24, Y+6	; 0x06
    6b1e:	88 23       	and	r24, r24
    6b20:	d4 f1       	brlt	.+116    	; 0x6b96 <listen+0x9c>
    6b22:	8e 81       	ldd	r24, Y+6	; 0x06
    6b24:	28 2f       	mov	r18, r24
    6b26:	88 0f       	add	r24, r24
    6b28:	33 0b       	sbc	r19, r19
    6b2a:	4b e0       	ldi	r20, 0x0B	; 11
    6b2c:	42 9f       	mul	r20, r18
    6b2e:	c0 01       	movw	r24, r0
    6b30:	43 9f       	mul	r20, r19
    6b32:	90 0d       	add	r25, r0
    6b34:	11 24       	eor	r1, r1
    6b36:	8c 54       	subi	r24, 0x4C	; 76
    6b38:	91 4d       	sbci	r25, 0xD1	; 209
    6b3a:	fc 01       	movw	r30, r24
    6b3c:	80 81       	ld	r24, Z
    6b3e:	81 30       	cpi	r24, 0x01	; 1
    6b40:	51 f5       	brne	.+84     	; 0x6b96 <listen+0x9c>
    6b42:	8e 81       	ldd	r24, Y+6	; 0x06
    6b44:	8a 83       	std	Y+2, r24	; 0x02
    6b46:	8f 81       	ldd	r24, Y+7	; 0x07
    6b48:	8b 83       	std	Y+3, r24	; 0x03
    6b4a:	8e 81       	ldd	r24, Y+6	; 0x06
    6b4c:	28 2f       	mov	r18, r24
    6b4e:	88 0f       	add	r24, r24
    6b50:	33 0b       	sbc	r19, r19
    6b52:	4b e0       	ldi	r20, 0x0B	; 11
    6b54:	42 9f       	mul	r20, r18
    6b56:	c0 01       	movw	r24, r0
    6b58:	43 9f       	mul	r20, r19
    6b5a:	90 0d       	add	r25, r0
    6b5c:	11 24       	eor	r1, r1
    6b5e:	80 55       	subi	r24, 0x50	; 80
    6b60:	91 4d       	sbci	r25, 0xD1	; 209
    6b62:	fc 01       	movw	r30, r24
    6b64:	80 81       	ld	r24, Z
    6b66:	91 81       	ldd	r25, Z+1	; 0x01
    6b68:	8c 83       	std	Y+4, r24	; 0x04
    6b6a:	9d 83       	std	Y+5, r25	; 0x05
    6b6c:	ce 01       	movw	r24, r28
    6b6e:	02 96       	adiw	r24, 0x02	; 2
    6b70:	c1 2c       	mov	r12, r1
    6b72:	d1 2c       	mov	r13, r1
    6b74:	e1 2c       	mov	r14, r1
    6b76:	f1 2c       	mov	r15, r1
    6b78:	00 e0       	ldi	r16, 0x00	; 0
    6b7a:	10 e0       	ldi	r17, 0x00	; 0
    6b7c:	24 e0       	ldi	r18, 0x04	; 4
    6b7e:	30 e0       	ldi	r19, 0x00	; 0
    6b80:	ac 01       	movw	r20, r24
    6b82:	62 e4       	ldi	r22, 0x42	; 66
    6b84:	82 e0       	ldi	r24, 0x02	; 2
    6b86:	0e 94 ed 14 	call	0x29da	; 0x29da <hif_send>
    6b8a:	89 83       	std	Y+1, r24	; 0x01
    6b8c:	89 81       	ldd	r24, Y+1	; 0x01
    6b8e:	88 23       	and	r24, r24
    6b90:	11 f0       	breq	.+4      	; 0x6b96 <listen+0x9c>
    6b92:	87 ef       	ldi	r24, 0xF7	; 247
    6b94:	89 83       	std	Y+1, r24	; 0x01
    6b96:	89 81       	ldd	r24, Y+1	; 0x01
    6b98:	27 96       	adiw	r28, 0x07	; 7
    6b9a:	cd bf       	out	0x3d, r28	; 61
    6b9c:	de bf       	out	0x3e, r29	; 62
    6b9e:	df 91       	pop	r29
    6ba0:	cf 91       	pop	r28
    6ba2:	1f 91       	pop	r17
    6ba4:	0f 91       	pop	r16
    6ba6:	ff 90       	pop	r15
    6ba8:	ef 90       	pop	r14
    6baa:	df 90       	pop	r13
    6bac:	cf 90       	pop	r12
    6bae:	08 95       	ret

00006bb0 <accept>:
    6bb0:	cf 93       	push	r28
    6bb2:	df 93       	push	r29
    6bb4:	cd b7       	in	r28, 0x3d	; 61
    6bb6:	de b7       	in	r29, 0x3e	; 62
    6bb8:	26 97       	sbiw	r28, 0x06	; 6
    6bba:	cd bf       	out	0x3d, r28	; 61
    6bbc:	de bf       	out	0x3e, r29	; 62
    6bbe:	8a 83       	std	Y+2, r24	; 0x02
    6bc0:	6b 83       	std	Y+3, r22	; 0x03
    6bc2:	7c 83       	std	Y+4, r23	; 0x04
    6bc4:	4d 83       	std	Y+5, r20	; 0x05
    6bc6:	5e 83       	std	Y+6, r21	; 0x06
    6bc8:	8a ef       	ldi	r24, 0xFA	; 250
    6bca:	89 83       	std	Y+1, r24	; 0x01
    6bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    6bce:	88 23       	and	r24, r24
    6bd0:	8c f0       	brlt	.+34     	; 0x6bf4 <accept+0x44>
    6bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    6bd4:	28 2f       	mov	r18, r24
    6bd6:	88 0f       	add	r24, r24
    6bd8:	33 0b       	sbc	r19, r19
    6bda:	4b e0       	ldi	r20, 0x0B	; 11
    6bdc:	42 9f       	mul	r20, r18
    6bde:	c0 01       	movw	r24, r0
    6be0:	43 9f       	mul	r20, r19
    6be2:	90 0d       	add	r25, r0
    6be4:	11 24       	eor	r1, r1
    6be6:	8c 54       	subi	r24, 0x4C	; 76
    6be8:	91 4d       	sbci	r25, 0xD1	; 209
    6bea:	fc 01       	movw	r30, r24
    6bec:	80 81       	ld	r24, Z
    6bee:	81 30       	cpi	r24, 0x01	; 1
    6bf0:	09 f4       	brne	.+2      	; 0x6bf4 <accept+0x44>
    6bf2:	19 82       	std	Y+1, r1	; 0x01
    6bf4:	89 81       	ldd	r24, Y+1	; 0x01
    6bf6:	26 96       	adiw	r28, 0x06	; 6
    6bf8:	cd bf       	out	0x3d, r28	; 61
    6bfa:	de bf       	out	0x3e, r29	; 62
    6bfc:	df 91       	pop	r29
    6bfe:	cf 91       	pop	r28
    6c00:	08 95       	ret

00006c02 <send>:
    6c02:	cf 92       	push	r12
    6c04:	df 92       	push	r13
    6c06:	ef 92       	push	r14
    6c08:	ff 92       	push	r15
    6c0a:	0f 93       	push	r16
    6c0c:	1f 93       	push	r17
    6c0e:	cf 93       	push	r28
    6c10:	df 93       	push	r29
    6c12:	cd b7       	in	r28, 0x3d	; 61
    6c14:	de b7       	in	r29, 0x3e	; 62
    6c16:	6c 97       	sbiw	r28, 0x1c	; 28
    6c18:	cd bf       	out	0x3d, r28	; 61
    6c1a:	de bf       	out	0x3e, r29	; 62
    6c1c:	8e 8b       	std	Y+22, r24	; 0x16
    6c1e:	6f 8b       	std	Y+23, r22	; 0x17
    6c20:	78 8f       	std	Y+24, r23	; 0x18
    6c22:	49 8f       	std	Y+25, r20	; 0x19
    6c24:	5a 8f       	std	Y+26, r21	; 0x1a
    6c26:	2b 8f       	std	Y+27, r18	; 0x1b
    6c28:	3c 8f       	std	Y+28, r19	; 0x1c
    6c2a:	8a ef       	ldi	r24, 0xFA	; 250
    6c2c:	9f ef       	ldi	r25, 0xFF	; 255
    6c2e:	89 83       	std	Y+1, r24	; 0x01
    6c30:	9a 83       	std	Y+2, r25	; 0x02
    6c32:	8e 89       	ldd	r24, Y+22	; 0x16
    6c34:	88 23       	and	r24, r24
    6c36:	0c f4       	brge	.+2      	; 0x6c3a <send+0x38>
    6c38:	89 c0       	rjmp	.+274    	; 0x6d4c <send+0x14a>
    6c3a:	8f 89       	ldd	r24, Y+23	; 0x17
    6c3c:	98 8d       	ldd	r25, Y+24	; 0x18
    6c3e:	89 2b       	or	r24, r25
    6c40:	09 f4       	brne	.+2      	; 0x6c44 <send+0x42>
    6c42:	84 c0       	rjmp	.+264    	; 0x6d4c <send+0x14a>
    6c44:	89 8d       	ldd	r24, Y+25	; 0x19
    6c46:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6c48:	89 37       	cpi	r24, 0x79	; 121
    6c4a:	95 40       	sbci	r25, 0x05	; 5
    6c4c:	08 f0       	brcs	.+2      	; 0x6c50 <send+0x4e>
    6c4e:	7e c0       	rjmp	.+252    	; 0x6d4c <send+0x14a>
    6c50:	8e 89       	ldd	r24, Y+22	; 0x16
    6c52:	28 2f       	mov	r18, r24
    6c54:	88 0f       	add	r24, r24
    6c56:	33 0b       	sbc	r19, r19
    6c58:	4b e0       	ldi	r20, 0x0B	; 11
    6c5a:	42 9f       	mul	r20, r18
    6c5c:	c0 01       	movw	r24, r0
    6c5e:	43 9f       	mul	r20, r19
    6c60:	90 0d       	add	r25, r0
    6c62:	11 24       	eor	r1, r1
    6c64:	8c 54       	subi	r24, 0x4C	; 76
    6c66:	91 4d       	sbci	r25, 0xD1	; 209
    6c68:	fc 01       	movw	r30, r24
    6c6a:	80 81       	ld	r24, Z
    6c6c:	81 30       	cpi	r24, 0x01	; 1
    6c6e:	09 f0       	breq	.+2      	; 0x6c72 <send+0x70>
    6c70:	6d c0       	rjmp	.+218    	; 0x6d4c <send+0x14a>
    6c72:	85 e4       	ldi	r24, 0x45	; 69
    6c74:	8d 83       	std	Y+5, r24	; 0x05
    6c76:	80 e5       	ldi	r24, 0x50	; 80
    6c78:	90 e0       	ldi	r25, 0x00	; 0
    6c7a:	8b 83       	std	Y+3, r24	; 0x03
    6c7c:	9c 83       	std	Y+4, r25	; 0x04
    6c7e:	8e 89       	ldd	r24, Y+22	; 0x16
    6c80:	8e 83       	std	Y+6, r24	; 0x06
    6c82:	89 8d       	ldd	r24, Y+25	; 0x19
    6c84:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6c86:	88 87       	std	Y+8, r24	; 0x08
    6c88:	99 87       	std	Y+9, r25	; 0x09
    6c8a:	8e 89       	ldd	r24, Y+22	; 0x16
    6c8c:	28 2f       	mov	r18, r24
    6c8e:	88 0f       	add	r24, r24
    6c90:	33 0b       	sbc	r19, r19
    6c92:	4b e0       	ldi	r20, 0x0B	; 11
    6c94:	42 9f       	mul	r20, r18
    6c96:	c0 01       	movw	r24, r0
    6c98:	43 9f       	mul	r20, r19
    6c9a:	90 0d       	add	r25, r0
    6c9c:	11 24       	eor	r1, r1
    6c9e:	80 55       	subi	r24, 0x50	; 80
    6ca0:	91 4d       	sbci	r25, 0xD1	; 209
    6ca2:	fc 01       	movw	r30, r24
    6ca4:	80 81       	ld	r24, Z
    6ca6:	91 81       	ldd	r25, Z+1	; 0x01
    6ca8:	8a 8b       	std	Y+18, r24	; 0x12
    6caa:	9b 8b       	std	Y+19, r25	; 0x13
    6cac:	8e 89       	ldd	r24, Y+22	; 0x16
    6cae:	87 30       	cpi	r24, 0x07	; 7
    6cb0:	24 f0       	brlt	.+8      	; 0x6cba <send+0xb8>
    6cb2:	84 e4       	ldi	r24, 0x44	; 68
    6cb4:	90 e0       	ldi	r25, 0x00	; 0
    6cb6:	8b 83       	std	Y+3, r24	; 0x03
    6cb8:	9c 83       	std	Y+4, r25	; 0x04
    6cba:	8e 89       	ldd	r24, Y+22	; 0x16
    6cbc:	28 2f       	mov	r18, r24
    6cbe:	88 0f       	add	r24, r24
    6cc0:	33 0b       	sbc	r19, r19
    6cc2:	4b e0       	ldi	r20, 0x0B	; 11
    6cc4:	42 9f       	mul	r20, r18
    6cc6:	c0 01       	movw	r24, r0
    6cc8:	43 9f       	mul	r20, r19
    6cca:	90 0d       	add	r25, r0
    6ccc:	11 24       	eor	r1, r1
    6cce:	8b 54       	subi	r24, 0x4B	; 75
    6cd0:	91 4d       	sbci	r25, 0xD1	; 209
    6cd2:	fc 01       	movw	r30, r24
    6cd4:	80 81       	ld	r24, Z
    6cd6:	88 2f       	mov	r24, r24
    6cd8:	90 e0       	ldi	r25, 0x00	; 0
    6cda:	81 70       	andi	r24, 0x01	; 1
    6cdc:	99 27       	eor	r25, r25
    6cde:	89 2b       	or	r24, r25
    6ce0:	99 f0       	breq	.+38     	; 0x6d08 <send+0x106>
    6ce2:	8c e4       	ldi	r24, 0x4C	; 76
    6ce4:	8d 83       	std	Y+5, r24	; 0x05
    6ce6:	8e 89       	ldd	r24, Y+22	; 0x16
    6ce8:	28 2f       	mov	r18, r24
    6cea:	88 0f       	add	r24, r24
    6cec:	33 0b       	sbc	r19, r19
    6cee:	4b e0       	ldi	r20, 0x0B	; 11
    6cf0:	42 9f       	mul	r20, r18
    6cf2:	c0 01       	movw	r24, r0
    6cf4:	43 9f       	mul	r20, r19
    6cf6:	90 0d       	add	r25, r0
    6cf8:	11 24       	eor	r1, r1
    6cfa:	8e 54       	subi	r24, 0x4E	; 78
    6cfc:	91 4d       	sbci	r25, 0xD1	; 209
    6cfe:	fc 01       	movw	r30, r24
    6d00:	80 81       	ld	r24, Z
    6d02:	91 81       	ldd	r25, Z+1	; 0x01
    6d04:	8b 83       	std	Y+3, r24	; 0x03
    6d06:	9c 83       	std	Y+4, r25	; 0x04
    6d08:	8d 81       	ldd	r24, Y+5	; 0x05
    6d0a:	e8 2f       	mov	r30, r24
    6d0c:	e0 68       	ori	r30, 0x80	; 128
    6d0e:	6b 81       	ldd	r22, Y+3	; 0x03
    6d10:	7c 81       	ldd	r23, Y+4	; 0x04
    6d12:	49 8d       	ldd	r20, Y+25	; 0x19
    6d14:	5a 8d       	ldd	r21, Y+26	; 0x1a
    6d16:	2f 89       	ldd	r18, Y+23	; 0x17
    6d18:	38 8d       	ldd	r19, Y+24	; 0x18
    6d1a:	ce 01       	movw	r24, r28
    6d1c:	06 96       	adiw	r24, 0x06	; 6
    6d1e:	6b 01       	movw	r12, r22
    6d20:	7a 01       	movw	r14, r20
    6d22:	89 01       	movw	r16, r18
    6d24:	20 e1       	ldi	r18, 0x10	; 16
    6d26:	30 e0       	ldi	r19, 0x00	; 0
    6d28:	ac 01       	movw	r20, r24
    6d2a:	6e 2f       	mov	r22, r30
    6d2c:	82 e0       	ldi	r24, 0x02	; 2
    6d2e:	0e 94 ed 14 	call	0x29da	; 0x29da <hif_send>
    6d32:	08 2e       	mov	r0, r24
    6d34:	00 0c       	add	r0, r0
    6d36:	99 0b       	sbc	r25, r25
    6d38:	89 83       	std	Y+1, r24	; 0x01
    6d3a:	9a 83       	std	Y+2, r25	; 0x02
    6d3c:	89 81       	ldd	r24, Y+1	; 0x01
    6d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    6d40:	89 2b       	or	r24, r25
    6d42:	21 f0       	breq	.+8      	; 0x6d4c <send+0x14a>
    6d44:	82 ef       	ldi	r24, 0xF2	; 242
    6d46:	9f ef       	ldi	r25, 0xFF	; 255
    6d48:	89 83       	std	Y+1, r24	; 0x01
    6d4a:	9a 83       	std	Y+2, r25	; 0x02
    6d4c:	89 81       	ldd	r24, Y+1	; 0x01
    6d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    6d50:	6c 96       	adiw	r28, 0x1c	; 28
    6d52:	cd bf       	out	0x3d, r28	; 61
    6d54:	de bf       	out	0x3e, r29	; 62
    6d56:	df 91       	pop	r29
    6d58:	cf 91       	pop	r28
    6d5a:	1f 91       	pop	r17
    6d5c:	0f 91       	pop	r16
    6d5e:	ff 90       	pop	r15
    6d60:	ef 90       	pop	r14
    6d62:	df 90       	pop	r13
    6d64:	cf 90       	pop	r12
    6d66:	08 95       	ret

00006d68 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    6d68:	cf 92       	push	r12
    6d6a:	df 92       	push	r13
    6d6c:	ef 92       	push	r14
    6d6e:	ff 92       	push	r15
    6d70:	0f 93       	push	r16
    6d72:	1f 93       	push	r17
    6d74:	cf 93       	push	r28
    6d76:	df 93       	push	r29
    6d78:	cd b7       	in	r28, 0x3d	; 61
    6d7a:	de b7       	in	r29, 0x3e	; 62
    6d7c:	64 97       	sbiw	r28, 0x14	; 20
    6d7e:	cd bf       	out	0x3d, r28	; 61
    6d80:	de bf       	out	0x3e, r29	; 62
    6d82:	8c 87       	std	Y+12, r24	; 0x0c
    6d84:	6d 87       	std	Y+13, r22	; 0x0d
    6d86:	7e 87       	std	Y+14, r23	; 0x0e
    6d88:	4f 87       	std	Y+15, r20	; 0x0f
    6d8a:	58 8b       	std	Y+16, r21	; 0x10
    6d8c:	09 8b       	std	Y+17, r16	; 0x11
    6d8e:	1a 8b       	std	Y+18, r17	; 0x12
    6d90:	2b 8b       	std	Y+19, r18	; 0x13
    6d92:	3c 8b       	std	Y+20, r19	; 0x14
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    6d94:	8a ef       	ldi	r24, 0xFA	; 250
    6d96:	9f ef       	ldi	r25, 0xFF	; 255
    6d98:	89 83       	std	Y+1, r24	; 0x01
    6d9a:	9a 83       	std	Y+2, r25	; 0x02
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    6d9c:	8c 85       	ldd	r24, Y+12	; 0x0c
    6d9e:	88 23       	and	r24, r24
    6da0:	0c f4       	brge	.+2      	; 0x6da4 <recv+0x3c>
    6da2:	be c0       	rjmp	.+380    	; 0x6f20 <recv+0x1b8>
    6da4:	8d 85       	ldd	r24, Y+13	; 0x0d
    6da6:	9e 85       	ldd	r25, Y+14	; 0x0e
    6da8:	89 2b       	or	r24, r25
    6daa:	09 f4       	brne	.+2      	; 0x6dae <recv+0x46>
    6dac:	b9 c0       	rjmp	.+370    	; 0x6f20 <recv+0x1b8>
    6dae:	8f 85       	ldd	r24, Y+15	; 0x0f
    6db0:	98 89       	ldd	r25, Y+16	; 0x10
    6db2:	89 2b       	or	r24, r25
    6db4:	09 f4       	brne	.+2      	; 0x6db8 <recv+0x50>
    6db6:	b4 c0       	rjmp	.+360    	; 0x6f20 <recv+0x1b8>
    6db8:	8c 85       	ldd	r24, Y+12	; 0x0c
    6dba:	28 2f       	mov	r18, r24
    6dbc:	88 0f       	add	r24, r24
    6dbe:	33 0b       	sbc	r19, r19
    6dc0:	4b e0       	ldi	r20, 0x0B	; 11
    6dc2:	42 9f       	mul	r20, r18
    6dc4:	c0 01       	movw	r24, r0
    6dc6:	43 9f       	mul	r20, r19
    6dc8:	90 0d       	add	r25, r0
    6dca:	11 24       	eor	r1, r1
    6dcc:	8c 54       	subi	r24, 0x4C	; 76
    6dce:	91 4d       	sbci	r25, 0xD1	; 209
    6dd0:	fc 01       	movw	r30, r24
    6dd2:	80 81       	ld	r24, Z
    6dd4:	81 30       	cpi	r24, 0x01	; 1
    6dd6:	09 f0       	breq	.+2      	; 0x6dda <recv+0x72>
    6dd8:	a3 c0       	rjmp	.+326    	; 0x6f20 <recv+0x1b8>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    6dda:	19 82       	std	Y+1, r1	; 0x01
    6ddc:	1a 82       	std	Y+2, r1	; 0x02
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    6dde:	8c 85       	ldd	r24, Y+12	; 0x0c
    6de0:	28 2f       	mov	r18, r24
    6de2:	88 0f       	add	r24, r24
    6de4:	33 0b       	sbc	r19, r19
    6de6:	4b e0       	ldi	r20, 0x0B	; 11
    6de8:	42 9f       	mul	r20, r18
    6dea:	c0 01       	movw	r24, r0
    6dec:	43 9f       	mul	r20, r19
    6dee:	90 0d       	add	r25, r0
    6df0:	11 24       	eor	r1, r1
    6df2:	84 55       	subi	r24, 0x54	; 84
    6df4:	91 4d       	sbci	r25, 0xD1	; 209
    6df6:	2d 85       	ldd	r18, Y+13	; 0x0d
    6df8:	3e 85       	ldd	r19, Y+14	; 0x0e
    6dfa:	fc 01       	movw	r30, r24
    6dfc:	20 83       	st	Z, r18
    6dfe:	31 83       	std	Z+1, r19	; 0x01
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    6e00:	8c 85       	ldd	r24, Y+12	; 0x0c
    6e02:	28 2f       	mov	r18, r24
    6e04:	88 0f       	add	r24, r24
    6e06:	33 0b       	sbc	r19, r19
    6e08:	4b e0       	ldi	r20, 0x0B	; 11
    6e0a:	42 9f       	mul	r20, r18
    6e0c:	c0 01       	movw	r24, r0
    6e0e:	43 9f       	mul	r20, r19
    6e10:	90 0d       	add	r25, r0
    6e12:	11 24       	eor	r1, r1
    6e14:	82 55       	subi	r24, 0x52	; 82
    6e16:	91 4d       	sbci	r25, 0xD1	; 209
    6e18:	2f 85       	ldd	r18, Y+15	; 0x0f
    6e1a:	38 89       	ldd	r19, Y+16	; 0x10
    6e1c:	fc 01       	movw	r30, r24
    6e1e:	20 83       	st	Z, r18
    6e20:	31 83       	std	Z+1, r19	; 0x01

		if(!gastrSockets[sock].bIsRecvPending)
    6e22:	8c 85       	ldd	r24, Y+12	; 0x0c
    6e24:	28 2f       	mov	r18, r24
    6e26:	88 0f       	add	r24, r24
    6e28:	33 0b       	sbc	r19, r19
    6e2a:	4b e0       	ldi	r20, 0x0B	; 11
    6e2c:	42 9f       	mul	r20, r18
    6e2e:	c0 01       	movw	r24, r0
    6e30:	43 9f       	mul	r20, r19
    6e32:	90 0d       	add	r25, r0
    6e34:	11 24       	eor	r1, r1
    6e36:	8a 54       	subi	r24, 0x4A	; 74
    6e38:	91 4d       	sbci	r25, 0xD1	; 209
    6e3a:	fc 01       	movw	r30, r24
    6e3c:	80 81       	ld	r24, Z
    6e3e:	88 23       	and	r24, r24
    6e40:	09 f0       	breq	.+2      	; 0x6e44 <recv+0xdc>
    6e42:	6e c0       	rjmp	.+220    	; 0x6f20 <recv+0x1b8>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    6e44:	86 e4       	ldi	r24, 0x46	; 70
    6e46:	8b 83       	std	Y+3, r24	; 0x03

			gastrSockets[sock].bIsRecvPending = 1;
    6e48:	8c 85       	ldd	r24, Y+12	; 0x0c
    6e4a:	28 2f       	mov	r18, r24
    6e4c:	88 0f       	add	r24, r24
    6e4e:	33 0b       	sbc	r19, r19
    6e50:	4b e0       	ldi	r20, 0x0B	; 11
    6e52:	42 9f       	mul	r20, r18
    6e54:	c0 01       	movw	r24, r0
    6e56:	43 9f       	mul	r20, r19
    6e58:	90 0d       	add	r25, r0
    6e5a:	11 24       	eor	r1, r1
    6e5c:	8a 54       	subi	r24, 0x4A	; 74
    6e5e:	91 4d       	sbci	r25, 0xD1	; 209
    6e60:	21 e0       	ldi	r18, 0x01	; 1
    6e62:	fc 01       	movw	r30, r24
    6e64:	20 83       	st	Z, r18
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    6e66:	8c 85       	ldd	r24, Y+12	; 0x0c
    6e68:	28 2f       	mov	r18, r24
    6e6a:	88 0f       	add	r24, r24
    6e6c:	33 0b       	sbc	r19, r19
    6e6e:	4b e0       	ldi	r20, 0x0B	; 11
    6e70:	42 9f       	mul	r20, r18
    6e72:	c0 01       	movw	r24, r0
    6e74:	43 9f       	mul	r20, r19
    6e76:	90 0d       	add	r25, r0
    6e78:	11 24       	eor	r1, r1
    6e7a:	8b 54       	subi	r24, 0x4B	; 75
    6e7c:	91 4d       	sbci	r25, 0xD1	; 209
    6e7e:	fc 01       	movw	r30, r24
    6e80:	80 81       	ld	r24, Z
    6e82:	88 2f       	mov	r24, r24
    6e84:	90 e0       	ldi	r25, 0x00	; 0
    6e86:	81 70       	andi	r24, 0x01	; 1
    6e88:	99 27       	eor	r25, r25
    6e8a:	89 2b       	or	r24, r25
    6e8c:	11 f0       	breq	.+4      	; 0x6e92 <recv+0x12a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    6e8e:	8d e4       	ldi	r24, 0x4D	; 77
    6e90:	8b 83       	std	Y+3, r24	; 0x03
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    6e92:	89 89       	ldd	r24, Y+17	; 0x11
    6e94:	9a 89       	ldd	r25, Y+18	; 0x12
    6e96:	ab 89       	ldd	r26, Y+19	; 0x13
    6e98:	bc 89       	ldd	r27, Y+20	; 0x14
    6e9a:	89 2b       	or	r24, r25
    6e9c:	8a 2b       	or	r24, r26
    6e9e:	8b 2b       	or	r24, r27
    6ea0:	41 f4       	brne	.+16     	; 0x6eb2 <recv+0x14a>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    6ea2:	8f ef       	ldi	r24, 0xFF	; 255
    6ea4:	9f ef       	ldi	r25, 0xFF	; 255
    6ea6:	dc 01       	movw	r26, r24
    6ea8:	8c 83       	std	Y+4, r24	; 0x04
    6eaa:	9d 83       	std	Y+5, r25	; 0x05
    6eac:	ae 83       	std	Y+6, r26	; 0x06
    6eae:	bf 83       	std	Y+7, r27	; 0x07
    6eb0:	08 c0       	rjmp	.+16     	; 0x6ec2 <recv+0x15a>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    6eb2:	89 89       	ldd	r24, Y+17	; 0x11
    6eb4:	9a 89       	ldd	r25, Y+18	; 0x12
    6eb6:	ab 89       	ldd	r26, Y+19	; 0x13
    6eb8:	bc 89       	ldd	r27, Y+20	; 0x14
    6eba:	8c 83       	std	Y+4, r24	; 0x04
    6ebc:	9d 83       	std	Y+5, r25	; 0x05
    6ebe:	ae 83       	std	Y+6, r26	; 0x06
    6ec0:	bf 83       	std	Y+7, r27	; 0x07
			strRecv.sock = sock;
    6ec2:	8c 85       	ldd	r24, Y+12	; 0x0c
    6ec4:	88 87       	std	Y+8, r24	; 0x08
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    6ec6:	8c 85       	ldd	r24, Y+12	; 0x0c
    6ec8:	28 2f       	mov	r18, r24
    6eca:	88 0f       	add	r24, r24
    6ecc:	33 0b       	sbc	r19, r19
    6ece:	4b e0       	ldi	r20, 0x0B	; 11
    6ed0:	42 9f       	mul	r20, r18
    6ed2:	c0 01       	movw	r24, r0
    6ed4:	43 9f       	mul	r20, r19
    6ed6:	90 0d       	add	r25, r0
    6ed8:	11 24       	eor	r1, r1
    6eda:	80 55       	subi	r24, 0x50	; 80
    6edc:	91 4d       	sbci	r25, 0xD1	; 209
    6ede:	fc 01       	movw	r30, r24
    6ee0:	80 81       	ld	r24, Z
    6ee2:	91 81       	ldd	r25, Z+1	; 0x01
    6ee4:	8a 87       	std	Y+10, r24	; 0x0a
    6ee6:	9b 87       	std	Y+11, r25	; 0x0b
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    6ee8:	ce 01       	movw	r24, r28
    6eea:	04 96       	adiw	r24, 0x04	; 4
    6eec:	c1 2c       	mov	r12, r1
    6eee:	d1 2c       	mov	r13, r1
    6ef0:	e1 2c       	mov	r14, r1
    6ef2:	f1 2c       	mov	r15, r1
    6ef4:	00 e0       	ldi	r16, 0x00	; 0
    6ef6:	10 e0       	ldi	r17, 0x00	; 0
    6ef8:	28 e0       	ldi	r18, 0x08	; 8
    6efa:	30 e0       	ldi	r19, 0x00	; 0
    6efc:	ac 01       	movw	r20, r24
    6efe:	6b 81       	ldd	r22, Y+3	; 0x03
    6f00:	82 e0       	ldi	r24, 0x02	; 2
    6f02:	0e 94 ed 14 	call	0x29da	; 0x29da <hif_send>
    6f06:	08 2e       	mov	r0, r24
    6f08:	00 0c       	add	r0, r0
    6f0a:	99 0b       	sbc	r25, r25
    6f0c:	89 83       	std	Y+1, r24	; 0x01
    6f0e:	9a 83       	std	Y+2, r25	; 0x02
			if(s16Ret != SOCK_ERR_NO_ERROR)
    6f10:	89 81       	ldd	r24, Y+1	; 0x01
    6f12:	9a 81       	ldd	r25, Y+2	; 0x02
    6f14:	89 2b       	or	r24, r25
    6f16:	21 f0       	breq	.+8      	; 0x6f20 <recv+0x1b8>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    6f18:	82 ef       	ldi	r24, 0xF2	; 242
    6f1a:	9f ef       	ldi	r25, 0xFF	; 255
    6f1c:	89 83       	std	Y+1, r24	; 0x01
    6f1e:	9a 83       	std	Y+2, r25	; 0x02
			}
		}
	}
	return s16Ret;
    6f20:	89 81       	ldd	r24, Y+1	; 0x01
    6f22:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6f24:	64 96       	adiw	r28, 0x14	; 20
    6f26:	cd bf       	out	0x3d, r28	; 61
    6f28:	de bf       	out	0x3e, r29	; 62
    6f2a:	df 91       	pop	r29
    6f2c:	cf 91       	pop	r28
    6f2e:	1f 91       	pop	r17
    6f30:	0f 91       	pop	r16
    6f32:	ff 90       	pop	r15
    6f34:	ef 90       	pop	r14
    6f36:	df 90       	pop	r13
    6f38:	cf 90       	pop	r12
    6f3a:	08 95       	ret

00006f3c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    6f3c:	cf 92       	push	r12
    6f3e:	df 92       	push	r13
    6f40:	ef 92       	push	r14
    6f42:	ff 92       	push	r15
    6f44:	0f 93       	push	r16
    6f46:	1f 93       	push	r17
    6f48:	cf 93       	push	r28
    6f4a:	df 93       	push	r29
    6f4c:	cd b7       	in	r28, 0x3d	; 61
    6f4e:	de b7       	in	r29, 0x3e	; 62
    6f50:	27 97       	sbiw	r28, 0x07	; 7
    6f52:	cd bf       	out	0x3d, r28	; 61
    6f54:	de bf       	out	0x3e, r29	; 62
    6f56:	8f 83       	std	Y+7, r24	; 0x07
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    6f58:	8a ef       	ldi	r24, 0xFA	; 250
    6f5a:	89 83       	std	Y+1, r24	; 0x01
    M2M_INFO("Sock to delete <%d>\n", sock);
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    6f5c:	8f 81       	ldd	r24, Y+7	; 0x07
    6f5e:	88 23       	and	r24, r24
    6f60:	0c f4       	brge	.+2      	; 0x6f64 <close+0x28>
    6f62:	81 c0       	rjmp	.+258    	; 0x7066 <close+0x12a>
    6f64:	8f 81       	ldd	r24, Y+7	; 0x07
    6f66:	28 2f       	mov	r18, r24
    6f68:	88 0f       	add	r24, r24
    6f6a:	33 0b       	sbc	r19, r19
    6f6c:	4b e0       	ldi	r20, 0x0B	; 11
    6f6e:	42 9f       	mul	r20, r18
    6f70:	c0 01       	movw	r24, r0
    6f72:	43 9f       	mul	r20, r19
    6f74:	90 0d       	add	r25, r0
    6f76:	11 24       	eor	r1, r1
    6f78:	8c 54       	subi	r24, 0x4C	; 76
    6f7a:	91 4d       	sbci	r25, 0xD1	; 209
    6f7c:	fc 01       	movw	r30, r24
    6f7e:	80 81       	ld	r24, Z
    6f80:	81 30       	cpi	r24, 0x01	; 1
    6f82:	09 f0       	breq	.+2      	; 0x6f86 <close+0x4a>
    6f84:	70 c0       	rjmp	.+224    	; 0x7066 <close+0x12a>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    6f86:	89 e4       	ldi	r24, 0x49	; 73
    6f88:	8a 83       	std	Y+2, r24	; 0x02
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    6f8a:	8f 81       	ldd	r24, Y+7	; 0x07
    6f8c:	8b 83       	std	Y+3, r24	; 0x03
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    6f8e:	8f 81       	ldd	r24, Y+7	; 0x07
    6f90:	28 2f       	mov	r18, r24
    6f92:	88 0f       	add	r24, r24
    6f94:	33 0b       	sbc	r19, r19
    6f96:	4b e0       	ldi	r20, 0x0B	; 11
    6f98:	42 9f       	mul	r20, r18
    6f9a:	c0 01       	movw	r24, r0
    6f9c:	43 9f       	mul	r20, r19
    6f9e:	90 0d       	add	r25, r0
    6fa0:	11 24       	eor	r1, r1
    6fa2:	80 55       	subi	r24, 0x50	; 80
    6fa4:	91 4d       	sbci	r25, 0xD1	; 209
    6fa6:	fc 01       	movw	r30, r24
    6fa8:	80 81       	ld	r24, Z
    6faa:	91 81       	ldd	r25, Z+1	; 0x01
    6fac:	8d 83       	std	Y+5, r24	; 0x05
    6fae:	9e 83       	std	Y+6, r25	; 0x06
		
		gastrSockets[sock].bIsUsed = 0;
    6fb0:	8f 81       	ldd	r24, Y+7	; 0x07
    6fb2:	28 2f       	mov	r18, r24
    6fb4:	88 0f       	add	r24, r24
    6fb6:	33 0b       	sbc	r19, r19
    6fb8:	4b e0       	ldi	r20, 0x0B	; 11
    6fba:	42 9f       	mul	r20, r18
    6fbc:	c0 01       	movw	r24, r0
    6fbe:	43 9f       	mul	r20, r19
    6fc0:	90 0d       	add	r25, r0
    6fc2:	11 24       	eor	r1, r1
    6fc4:	8c 54       	subi	r24, 0x4C	; 76
    6fc6:	91 4d       	sbci	r25, 0xD1	; 209
    6fc8:	fc 01       	movw	r30, r24
    6fca:	10 82       	st	Z, r1
		gastrSockets[sock].u16SessionID =0;
    6fcc:	8f 81       	ldd	r24, Y+7	; 0x07
    6fce:	28 2f       	mov	r18, r24
    6fd0:	88 0f       	add	r24, r24
    6fd2:	33 0b       	sbc	r19, r19
    6fd4:	4b e0       	ldi	r20, 0x0B	; 11
    6fd6:	42 9f       	mul	r20, r18
    6fd8:	c0 01       	movw	r24, r0
    6fda:	43 9f       	mul	r20, r19
    6fdc:	90 0d       	add	r25, r0
    6fde:	11 24       	eor	r1, r1
    6fe0:	80 55       	subi	r24, 0x50	; 80
    6fe2:	91 4d       	sbci	r25, 0xD1	; 209
    6fe4:	fc 01       	movw	r30, r24
    6fe6:	10 82       	st	Z, r1
    6fe8:	11 82       	std	Z+1, r1	; 0x01
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    6fea:	8f 81       	ldd	r24, Y+7	; 0x07
    6fec:	28 2f       	mov	r18, r24
    6fee:	88 0f       	add	r24, r24
    6ff0:	33 0b       	sbc	r19, r19
    6ff2:	4b e0       	ldi	r20, 0x0B	; 11
    6ff4:	42 9f       	mul	r20, r18
    6ff6:	c0 01       	movw	r24, r0
    6ff8:	43 9f       	mul	r20, r19
    6ffa:	90 0d       	add	r25, r0
    6ffc:	11 24       	eor	r1, r1
    6ffe:	8b 54       	subi	r24, 0x4B	; 75
    7000:	91 4d       	sbci	r25, 0xD1	; 209
    7002:	fc 01       	movw	r30, r24
    7004:	80 81       	ld	r24, Z
    7006:	88 2f       	mov	r24, r24
    7008:	90 e0       	ldi	r25, 0x00	; 0
    700a:	81 70       	andi	r24, 0x01	; 1
    700c:	99 27       	eor	r25, r25
    700e:	89 2b       	or	r24, r25
    7010:	11 f0       	breq	.+4      	; 0x7016 <close+0xda>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    7012:	8e e4       	ldi	r24, 0x4E	; 78
    7014:	8a 83       	std	Y+2, r24	; 0x02
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    7016:	ce 01       	movw	r24, r28
    7018:	03 96       	adiw	r24, 0x03	; 3
    701a:	c1 2c       	mov	r12, r1
    701c:	d1 2c       	mov	r13, r1
    701e:	e1 2c       	mov	r14, r1
    7020:	f1 2c       	mov	r15, r1
    7022:	00 e0       	ldi	r16, 0x00	; 0
    7024:	10 e0       	ldi	r17, 0x00	; 0
    7026:	24 e0       	ldi	r18, 0x04	; 4
    7028:	30 e0       	ldi	r19, 0x00	; 0
    702a:	ac 01       	movw	r20, r24
    702c:	6a 81       	ldd	r22, Y+2	; 0x02
    702e:	82 e0       	ldi	r24, 0x02	; 2
    7030:	0e 94 ed 14 	call	0x29da	; 0x29da <hif_send>
    7034:	89 83       	std	Y+1, r24	; 0x01
		if(s8Ret != SOCK_ERR_NO_ERROR)
    7036:	89 81       	ldd	r24, Y+1	; 0x01
    7038:	88 23       	and	r24, r24
    703a:	11 f0       	breq	.+4      	; 0x7040 <close+0x104>
		{
			s8Ret = SOCK_ERR_INVALID;
    703c:	87 ef       	ldi	r24, 0xF7	; 247
    703e:	89 83       	std	Y+1, r24	; 0x01
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    7040:	8f 81       	ldd	r24, Y+7	; 0x07
    7042:	28 2f       	mov	r18, r24
    7044:	88 0f       	add	r24, r24
    7046:	33 0b       	sbc	r19, r19
    7048:	4b e0       	ldi	r20, 0x0B	; 11
    704a:	42 9f       	mul	r20, r18
    704c:	c0 01       	movw	r24, r0
    704e:	43 9f       	mul	r20, r19
    7050:	90 0d       	add	r25, r0
    7052:	11 24       	eor	r1, r1
    7054:	84 55       	subi	r24, 0x54	; 84
    7056:	91 4d       	sbci	r25, 0xD1	; 209
    7058:	2b e0       	ldi	r18, 0x0B	; 11
    705a:	30 e0       	ldi	r19, 0x00	; 0
    705c:	40 e0       	ldi	r20, 0x00	; 0
    705e:	50 e0       	ldi	r21, 0x00	; 0
    7060:	60 e0       	ldi	r22, 0x00	; 0
    7062:	0e 94 bf 13 	call	0x277e	; 0x277e <m2m_memset>
	}
	return s8Ret;
    7066:	89 81       	ldd	r24, Y+1	; 0x01
}
    7068:	27 96       	adiw	r28, 0x07	; 7
    706a:	cd bf       	out	0x3d, r28	; 61
    706c:	de bf       	out	0x3e, r29	; 62
    706e:	df 91       	pop	r29
    7070:	cf 91       	pop	r28
    7072:	1f 91       	pop	r17
    7074:	0f 91       	pop	r16
    7076:	ff 90       	pop	r15
    7078:	ef 90       	pop	r14
    707a:	df 90       	pop	r13
    707c:	cf 90       	pop	r12
    707e:	08 95       	ret

00007080 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    7080:	cf 93       	push	r28
    7082:	df 93       	push	r29
    7084:	cd b7       	in	r28, 0x3d	; 61
    7086:	de b7       	in	r29, 0x3e	; 62
    7088:	26 97       	sbiw	r28, 0x06	; 6
    708a:	cd bf       	out	0x3d, r28	; 61
    708c:	de bf       	out	0x3e, r29	; 62
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    708e:	ce 01       	movw	r24, r28
    7090:	03 96       	adiw	r24, 0x03	; 3
    7092:	89 83       	std	Y+1, r24	; 0x01
    7094:	9a 83       	std	Y+2, r25	; 0x02

	cmd[0] = 0xb9;
    7096:	89 81       	ldd	r24, Y+1	; 0x01
    7098:	9a 81       	ldd	r25, Y+2	; 0x02
    709a:	29 eb       	ldi	r18, 0xB9	; 185
    709c:	fc 01       	movw	r30, r24
    709e:	20 83       	st	Z, r18

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    70a0:	20 e0       	ldi	r18, 0x00	; 0
    70a2:	30 e0       	ldi	r19, 0x00	; 0
    70a4:	a9 01       	movw	r20, r18
    70a6:	68 e0       	ldi	r22, 0x08	; 8
    70a8:	72 e0       	ldi	r23, 0x02	; 2
    70aa:	81 e0       	ldi	r24, 0x01	; 1
    70ac:	90 e0       	ldi	r25, 0x00	; 0
    70ae:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    70b2:	89 81       	ldd	r24, Y+1	; 0x01
    70b4:	9a 81       	ldd	r25, Y+2	; 0x02
    70b6:	fc 01       	movw	r30, r24
    70b8:	80 81       	ld	r24, Z
    70ba:	88 2f       	mov	r24, r24
    70bc:	90 e0       	ldi	r25, 0x00	; 0
    70be:	a0 e0       	ldi	r26, 0x00	; 0
    70c0:	b0 e0       	ldi	r27, 0x00	; 0
    70c2:	9c 01       	movw	r18, r24
    70c4:	ad 01       	movw	r20, r26
    70c6:	6c e0       	ldi	r22, 0x0C	; 12
    70c8:	72 e0       	ldi	r23, 0x02	; 2
    70ca:	81 e0       	ldi	r24, 0x01	; 1
    70cc:	90 e0       	ldi	r25, 0x00	; 0
    70ce:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    70d2:	21 e0       	ldi	r18, 0x01	; 1
    70d4:	30 e0       	ldi	r19, 0x00	; 0
    70d6:	40 e0       	ldi	r20, 0x00	; 0
    70d8:	50 e0       	ldi	r21, 0x00	; 0
    70da:	64 e1       	ldi	r22, 0x14	; 20
    70dc:	72 e0       	ldi	r23, 0x02	; 2
    70de:	81 e0       	ldi	r24, 0x01	; 1
    70e0:	90 e0       	ldi	r25, 0x00	; 0
    70e2:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    70e6:	20 e0       	ldi	r18, 0x00	; 0
    70e8:	30 e0       	ldi	r19, 0x00	; 0
    70ea:	a9 01       	movw	r20, r18
    70ec:	6c e1       	ldi	r22, 0x1C	; 28
    70ee:	72 e0       	ldi	r23, 0x02	; 2
    70f0:	81 e0       	ldi	r24, 0x01	; 1
    70f2:	90 e0       	ldi	r25, 0x00	; 0
    70f4:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    70f8:	21 e8       	ldi	r18, 0x81	; 129
    70fa:	30 e0       	ldi	r19, 0x00	; 0
    70fc:	40 e0       	ldi	r20, 0x00	; 0
    70fe:	50 e0       	ldi	r21, 0x00	; 0
    7100:	64 e0       	ldi	r22, 0x04	; 4
    7102:	72 e0       	ldi	r23, 0x02	; 2
    7104:	81 e0       	ldi	r24, 0x01	; 1
    7106:	90 e0       	ldi	r25, 0x00	; 0
    7108:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    710c:	00 00       	nop
    710e:	68 e1       	ldi	r22, 0x18	; 24
    7110:	72 e0       	ldi	r23, 0x02	; 2
    7112:	81 e0       	ldi	r24, 0x01	; 1
    7114:	90 e0       	ldi	r25, 0x00	; 0
    7116:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <nm_read_reg>
    711a:	dc 01       	movw	r26, r24
    711c:	cb 01       	movw	r24, r22
    711e:	01 97       	sbiw	r24, 0x01	; 1
    7120:	a1 05       	cpc	r26, r1
    7122:	b1 05       	cpc	r27, r1
    7124:	a1 f7       	brne	.-24     	; 0x710e <spi_flash_enter_low_power_mode+0x8e>
}
    7126:	00 00       	nop
    7128:	26 96       	adiw	r28, 0x06	; 6
    712a:	cd bf       	out	0x3d, r28	; 61
    712c:	de bf       	out	0x3e, r29	; 62
    712e:	df 91       	pop	r29
    7130:	cf 91       	pop	r28
    7132:	08 95       	ret

00007134 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    7134:	cf 93       	push	r28
    7136:	df 93       	push	r29
    7138:	cd b7       	in	r28, 0x3d	; 61
    713a:	de b7       	in	r29, 0x3e	; 62
    713c:	26 97       	sbiw	r28, 0x06	; 6
    713e:	cd bf       	out	0x3d, r28	; 61
    7140:	de bf       	out	0x3e, r29	; 62
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    7142:	ce 01       	movw	r24, r28
    7144:	03 96       	adiw	r24, 0x03	; 3
    7146:	89 83       	std	Y+1, r24	; 0x01
    7148:	9a 83       	std	Y+2, r25	; 0x02

	cmd[0] = 0xab;
    714a:	89 81       	ldd	r24, Y+1	; 0x01
    714c:	9a 81       	ldd	r25, Y+2	; 0x02
    714e:	2b ea       	ldi	r18, 0xAB	; 171
    7150:	fc 01       	movw	r30, r24
    7152:	20 83       	st	Z, r18

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    7154:	20 e0       	ldi	r18, 0x00	; 0
    7156:	30 e0       	ldi	r19, 0x00	; 0
    7158:	a9 01       	movw	r20, r18
    715a:	68 e0       	ldi	r22, 0x08	; 8
    715c:	72 e0       	ldi	r23, 0x02	; 2
    715e:	81 e0       	ldi	r24, 0x01	; 1
    7160:	90 e0       	ldi	r25, 0x00	; 0
    7162:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    7166:	89 81       	ldd	r24, Y+1	; 0x01
    7168:	9a 81       	ldd	r25, Y+2	; 0x02
    716a:	fc 01       	movw	r30, r24
    716c:	80 81       	ld	r24, Z
    716e:	88 2f       	mov	r24, r24
    7170:	90 e0       	ldi	r25, 0x00	; 0
    7172:	a0 e0       	ldi	r26, 0x00	; 0
    7174:	b0 e0       	ldi	r27, 0x00	; 0
    7176:	9c 01       	movw	r18, r24
    7178:	ad 01       	movw	r20, r26
    717a:	6c e0       	ldi	r22, 0x0C	; 12
    717c:	72 e0       	ldi	r23, 0x02	; 2
    717e:	81 e0       	ldi	r24, 0x01	; 1
    7180:	90 e0       	ldi	r25, 0x00	; 0
    7182:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    7186:	21 e0       	ldi	r18, 0x01	; 1
    7188:	30 e0       	ldi	r19, 0x00	; 0
    718a:	40 e0       	ldi	r20, 0x00	; 0
    718c:	50 e0       	ldi	r21, 0x00	; 0
    718e:	64 e1       	ldi	r22, 0x14	; 20
    7190:	72 e0       	ldi	r23, 0x02	; 2
    7192:	81 e0       	ldi	r24, 0x01	; 1
    7194:	90 e0       	ldi	r25, 0x00	; 0
    7196:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    719a:	20 e0       	ldi	r18, 0x00	; 0
    719c:	30 e0       	ldi	r19, 0x00	; 0
    719e:	a9 01       	movw	r20, r18
    71a0:	6c e1       	ldi	r22, 0x1C	; 28
    71a2:	72 e0       	ldi	r23, 0x02	; 2
    71a4:	81 e0       	ldi	r24, 0x01	; 1
    71a6:	90 e0       	ldi	r25, 0x00	; 0
    71a8:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    71ac:	21 e8       	ldi	r18, 0x81	; 129
    71ae:	30 e0       	ldi	r19, 0x00	; 0
    71b0:	40 e0       	ldi	r20, 0x00	; 0
    71b2:	50 e0       	ldi	r21, 0x00	; 0
    71b4:	64 e0       	ldi	r22, 0x04	; 4
    71b6:	72 e0       	ldi	r23, 0x02	; 2
    71b8:	81 e0       	ldi	r24, 0x01	; 1
    71ba:	90 e0       	ldi	r25, 0x00	; 0
    71bc:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    71c0:	00 00       	nop
    71c2:	68 e1       	ldi	r22, 0x18	; 24
    71c4:	72 e0       	ldi	r23, 0x02	; 2
    71c6:	81 e0       	ldi	r24, 0x01	; 1
    71c8:	90 e0       	ldi	r25, 0x00	; 0
    71ca:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <nm_read_reg>
    71ce:	dc 01       	movw	r26, r24
    71d0:	cb 01       	movw	r24, r22
    71d2:	01 97       	sbiw	r24, 0x01	; 1
    71d4:	a1 05       	cpc	r26, r1
    71d6:	b1 05       	cpc	r27, r1
    71d8:	a1 f7       	brne	.-24     	; 0x71c2 <spi_flash_leave_low_power_mode+0x8e>
}
    71da:	00 00       	nop
    71dc:	26 96       	adiw	r28, 0x06	; 6
    71de:	cd bf       	out	0x3d, r28	; 61
    71e0:	de bf       	out	0x3e, r29	; 62
    71e2:	df 91       	pop	r29
    71e4:	cf 91       	pop	r28
    71e6:	08 95       	ret

000071e8 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    71e8:	cf 93       	push	r28
    71ea:	df 93       	push	r29
    71ec:	cd b7       	in	r28, 0x3d	; 61
    71ee:	de b7       	in	r29, 0x3e	; 62
    71f0:	26 97       	sbiw	r28, 0x06	; 6
    71f2:	cd bf       	out	0x3d, r28	; 61
    71f4:	de bf       	out	0x3e, r29	; 62
    71f6:	8e 83       	std	Y+6, r24	; 0x06
	sint8 s8Ret = M2M_SUCCESS;
    71f8:	19 82       	std	Y+1, r1	; 0x01
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    71fa:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <nmi_get_chipid>
    71fe:	dc 01       	movw	r26, r24
    7200:	cb 01       	movw	r24, r22
    7202:	9f 70       	andi	r25, 0x0F	; 15
    7204:	aa 27       	eor	r26, r26
    7206:	bb 27       	eor	r27, r27
    7208:	80 3a       	cpi	r24, 0xA0	; 160
    720a:	93 40       	sbci	r25, 0x03	; 3
    720c:	a1 05       	cpc	r26, r1
    720e:	b1 05       	cpc	r27, r1
    7210:	08 f4       	brcc	.+2      	; 0x7214 <spi_flash_enable+0x2c>
    7212:	5a c0       	rjmp	.+180    	; 0x72c8 <spi_flash_enable+0xe0>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    7214:	ce 01       	movw	r24, r28
    7216:	02 96       	adiw	r24, 0x02	; 2
    7218:	ac 01       	movw	r20, r24
    721a:	60 e1       	ldi	r22, 0x10	; 16
    721c:	74 e1       	ldi	r23, 0x14	; 20
    721e:	80 e0       	ldi	r24, 0x00	; 0
    7220:	90 e0       	ldi	r25, 0x00	; 0
    7222:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <nm_read_reg_with_ret>
    7226:	89 83       	std	Y+1, r24	; 0x01
		if(s8Ret != M2M_SUCCESS) {
    7228:	89 81       	ldd	r24, Y+1	; 0x01
    722a:	88 23       	and	r24, r24
    722c:	09 f0       	breq	.+2      	; 0x7230 <spi_flash_enable+0x48>
    722e:	4b c0       	rjmp	.+150    	; 0x72c6 <spi_flash_enable+0xde>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    7230:	8a 81       	ldd	r24, Y+2	; 0x02
    7232:	9b 81       	ldd	r25, Y+3	; 0x03
    7234:	ac 81       	ldd	r26, Y+4	; 0x04
    7236:	bd 81       	ldd	r27, Y+5	; 0x05
    7238:	9f 78       	andi	r25, 0x8F	; 143
    723a:	a8 78       	andi	r26, 0x88	; 136
    723c:	b8 7f       	andi	r27, 0xF8	; 248
    723e:	8a 83       	std	Y+2, r24	; 0x02
    7240:	9b 83       	std	Y+3, r25	; 0x03
    7242:	ac 83       	std	Y+4, r26	; 0x04
    7244:	bd 83       	std	Y+5, r27	; 0x05
		u32Val |= ((0x1111ul) << 12);
    7246:	8a 81       	ldd	r24, Y+2	; 0x02
    7248:	9b 81       	ldd	r25, Y+3	; 0x03
    724a:	ac 81       	ldd	r26, Y+4	; 0x04
    724c:	bd 81       	ldd	r27, Y+5	; 0x05
    724e:	90 61       	ori	r25, 0x10	; 16
    7250:	a1 61       	ori	r26, 0x11	; 17
    7252:	b1 60       	ori	r27, 0x01	; 1
    7254:	8a 83       	std	Y+2, r24	; 0x02
    7256:	9b 83       	std	Y+3, r25	; 0x03
    7258:	ac 83       	std	Y+4, r26	; 0x04
    725a:	bd 83       	std	Y+5, r27	; 0x05
		nm_write_reg(0x1410, u32Val);
    725c:	8a 81       	ldd	r24, Y+2	; 0x02
    725e:	9b 81       	ldd	r25, Y+3	; 0x03
    7260:	ac 81       	ldd	r26, Y+4	; 0x04
    7262:	bd 81       	ldd	r27, Y+5	; 0x05
    7264:	9c 01       	movw	r18, r24
    7266:	ad 01       	movw	r20, r26
    7268:	60 e1       	ldi	r22, 0x10	; 16
    726a:	74 e1       	ldi	r23, 0x14	; 20
    726c:	80 e0       	ldi	r24, 0x00	; 0
    726e:	90 e0       	ldi	r25, 0x00	; 0
    7270:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
		if(enable) {
    7274:	8e 81       	ldd	r24, Y+6	; 0x06
    7276:	88 23       	and	r24, r24
    7278:	19 f0       	breq	.+6      	; 0x7280 <spi_flash_enable+0x98>
			spi_flash_leave_low_power_mode();
    727a:	0e 94 9a 38 	call	0x7134	; 0x7134 <spi_flash_leave_low_power_mode>
    727e:	02 c0       	rjmp	.+4      	; 0x7284 <spi_flash_enable+0x9c>
		} else {
			spi_flash_enter_low_power_mode();
    7280:	0e 94 40 38 	call	0x7080	; 0x7080 <spi_flash_enter_low_power_mode>
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    7284:	8a 81       	ldd	r24, Y+2	; 0x02
    7286:	9b 81       	ldd	r25, Y+3	; 0x03
    7288:	ac 81       	ldd	r26, Y+4	; 0x04
    728a:	bd 81       	ldd	r27, Y+5	; 0x05
    728c:	9f 78       	andi	r25, 0x8F	; 143
    728e:	a8 78       	andi	r26, 0x88	; 136
    7290:	b8 7f       	andi	r27, 0xF8	; 248
    7292:	8a 83       	std	Y+2, r24	; 0x02
    7294:	9b 83       	std	Y+3, r25	; 0x03
    7296:	ac 83       	std	Y+4, r26	; 0x04
    7298:	bd 83       	std	Y+5, r27	; 0x05
		u32Val |= ((0x0010ul) << 12);
    729a:	8a 81       	ldd	r24, Y+2	; 0x02
    729c:	9b 81       	ldd	r25, Y+3	; 0x03
    729e:	ac 81       	ldd	r26, Y+4	; 0x04
    72a0:	bd 81       	ldd	r27, Y+5	; 0x05
    72a2:	a1 60       	ori	r26, 0x01	; 1
    72a4:	8a 83       	std	Y+2, r24	; 0x02
    72a6:	9b 83       	std	Y+3, r25	; 0x03
    72a8:	ac 83       	std	Y+4, r26	; 0x04
    72aa:	bd 83       	std	Y+5, r27	; 0x05
		nm_write_reg(0x1410, u32Val);
    72ac:	8a 81       	ldd	r24, Y+2	; 0x02
    72ae:	9b 81       	ldd	r25, Y+3	; 0x03
    72b0:	ac 81       	ldd	r26, Y+4	; 0x04
    72b2:	bd 81       	ldd	r27, Y+5	; 0x05
    72b4:	9c 01       	movw	r18, r24
    72b6:	ad 01       	movw	r20, r26
    72b8:	60 e1       	ldi	r22, 0x10	; 16
    72ba:	74 e1       	ldi	r23, 0x14	; 20
    72bc:	80 e0       	ldi	r24, 0x00	; 0
    72be:	90 e0       	ldi	r25, 0x00	; 0
    72c0:	0e 94 16 24 	call	0x482c	; 0x482c <nm_write_reg>
    72c4:	01 c0       	rjmp	.+2      	; 0x72c8 <spi_flash_enable+0xe0>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
		if(s8Ret != M2M_SUCCESS) {
			goto ERR1;
    72c6:	00 00       	nop
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
    72c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    72ca:	26 96       	adiw	r28, 0x06	; 6
    72cc:	cd bf       	out	0x3d, r28	; 61
    72ce:	de bf       	out	0x3e, r29	; 62
    72d0:	df 91       	pop	r29
    72d2:	cf 91       	pop	r28
    72d4:	08 95       	ret

000072d6 <__cmpsf2>:
    72d6:	0e 94 55 3a 	call	0x74aa	; 0x74aa <__fp_cmp>
    72da:	08 f4       	brcc	.+2      	; 0x72de <__cmpsf2+0x8>
    72dc:	81 e0       	ldi	r24, 0x01	; 1
    72de:	08 95       	ret

000072e0 <__divsf3>:
    72e0:	0e 94 84 39 	call	0x7308	; 0x7308 <__divsf3x>
    72e4:	0c 94 90 3a 	jmp	0x7520	; 0x7520 <__fp_round>
    72e8:	0e 94 89 3a 	call	0x7512	; 0x7512 <__fp_pscB>
    72ec:	58 f0       	brcs	.+22     	; 0x7304 <__divsf3+0x24>
    72ee:	0e 94 82 3a 	call	0x7504	; 0x7504 <__fp_pscA>
    72f2:	40 f0       	brcs	.+16     	; 0x7304 <__divsf3+0x24>
    72f4:	29 f4       	brne	.+10     	; 0x7300 <__divsf3+0x20>
    72f6:	5f 3f       	cpi	r21, 0xFF	; 255
    72f8:	29 f0       	breq	.+10     	; 0x7304 <__divsf3+0x24>
    72fa:	0c 94 79 3a 	jmp	0x74f2	; 0x74f2 <__fp_inf>
    72fe:	51 11       	cpse	r21, r1
    7300:	0c 94 c4 3a 	jmp	0x7588	; 0x7588 <__fp_szero>
    7304:	0c 94 7f 3a 	jmp	0x74fe	; 0x74fe <__fp_nan>

00007308 <__divsf3x>:
    7308:	0e 94 a1 3a 	call	0x7542	; 0x7542 <__fp_split3>
    730c:	68 f3       	brcs	.-38     	; 0x72e8 <__divsf3+0x8>

0000730e <__divsf3_pse>:
    730e:	99 23       	and	r25, r25
    7310:	b1 f3       	breq	.-20     	; 0x72fe <__divsf3+0x1e>
    7312:	55 23       	and	r21, r21
    7314:	91 f3       	breq	.-28     	; 0x72fa <__divsf3+0x1a>
    7316:	95 1b       	sub	r25, r21
    7318:	55 0b       	sbc	r21, r21
    731a:	bb 27       	eor	r27, r27
    731c:	aa 27       	eor	r26, r26
    731e:	62 17       	cp	r22, r18
    7320:	73 07       	cpc	r23, r19
    7322:	84 07       	cpc	r24, r20
    7324:	38 f0       	brcs	.+14     	; 0x7334 <__divsf3_pse+0x26>
    7326:	9f 5f       	subi	r25, 0xFF	; 255
    7328:	5f 4f       	sbci	r21, 0xFF	; 255
    732a:	22 0f       	add	r18, r18
    732c:	33 1f       	adc	r19, r19
    732e:	44 1f       	adc	r20, r20
    7330:	aa 1f       	adc	r26, r26
    7332:	a9 f3       	breq	.-22     	; 0x731e <__divsf3_pse+0x10>
    7334:	35 d0       	rcall	.+106    	; 0x73a0 <__divsf3_pse+0x92>
    7336:	0e 2e       	mov	r0, r30
    7338:	3a f0       	brmi	.+14     	; 0x7348 <__divsf3_pse+0x3a>
    733a:	e0 e8       	ldi	r30, 0x80	; 128
    733c:	32 d0       	rcall	.+100    	; 0x73a2 <__divsf3_pse+0x94>
    733e:	91 50       	subi	r25, 0x01	; 1
    7340:	50 40       	sbci	r21, 0x00	; 0
    7342:	e6 95       	lsr	r30
    7344:	00 1c       	adc	r0, r0
    7346:	ca f7       	brpl	.-14     	; 0x733a <__divsf3_pse+0x2c>
    7348:	2b d0       	rcall	.+86     	; 0x73a0 <__divsf3_pse+0x92>
    734a:	fe 2f       	mov	r31, r30
    734c:	29 d0       	rcall	.+82     	; 0x73a0 <__divsf3_pse+0x92>
    734e:	66 0f       	add	r22, r22
    7350:	77 1f       	adc	r23, r23
    7352:	88 1f       	adc	r24, r24
    7354:	bb 1f       	adc	r27, r27
    7356:	26 17       	cp	r18, r22
    7358:	37 07       	cpc	r19, r23
    735a:	48 07       	cpc	r20, r24
    735c:	ab 07       	cpc	r26, r27
    735e:	b0 e8       	ldi	r27, 0x80	; 128
    7360:	09 f0       	breq	.+2      	; 0x7364 <__divsf3_pse+0x56>
    7362:	bb 0b       	sbc	r27, r27
    7364:	80 2d       	mov	r24, r0
    7366:	bf 01       	movw	r22, r30
    7368:	ff 27       	eor	r31, r31
    736a:	93 58       	subi	r25, 0x83	; 131
    736c:	5f 4f       	sbci	r21, 0xFF	; 255
    736e:	3a f0       	brmi	.+14     	; 0x737e <__divsf3_pse+0x70>
    7370:	9e 3f       	cpi	r25, 0xFE	; 254
    7372:	51 05       	cpc	r21, r1
    7374:	78 f0       	brcs	.+30     	; 0x7394 <__divsf3_pse+0x86>
    7376:	0c 94 79 3a 	jmp	0x74f2	; 0x74f2 <__fp_inf>
    737a:	0c 94 c4 3a 	jmp	0x7588	; 0x7588 <__fp_szero>
    737e:	5f 3f       	cpi	r21, 0xFF	; 255
    7380:	e4 f3       	brlt	.-8      	; 0x737a <__divsf3_pse+0x6c>
    7382:	98 3e       	cpi	r25, 0xE8	; 232
    7384:	d4 f3       	brlt	.-12     	; 0x737a <__divsf3_pse+0x6c>
    7386:	86 95       	lsr	r24
    7388:	77 95       	ror	r23
    738a:	67 95       	ror	r22
    738c:	b7 95       	ror	r27
    738e:	f7 95       	ror	r31
    7390:	9f 5f       	subi	r25, 0xFF	; 255
    7392:	c9 f7       	brne	.-14     	; 0x7386 <__divsf3_pse+0x78>
    7394:	88 0f       	add	r24, r24
    7396:	91 1d       	adc	r25, r1
    7398:	96 95       	lsr	r25
    739a:	87 95       	ror	r24
    739c:	97 f9       	bld	r25, 7
    739e:	08 95       	ret
    73a0:	e1 e0       	ldi	r30, 0x01	; 1
    73a2:	66 0f       	add	r22, r22
    73a4:	77 1f       	adc	r23, r23
    73a6:	88 1f       	adc	r24, r24
    73a8:	bb 1f       	adc	r27, r27
    73aa:	62 17       	cp	r22, r18
    73ac:	73 07       	cpc	r23, r19
    73ae:	84 07       	cpc	r24, r20
    73b0:	ba 07       	cpc	r27, r26
    73b2:	20 f0       	brcs	.+8      	; 0x73bc <__divsf3_pse+0xae>
    73b4:	62 1b       	sub	r22, r18
    73b6:	73 0b       	sbc	r23, r19
    73b8:	84 0b       	sbc	r24, r20
    73ba:	ba 0b       	sbc	r27, r26
    73bc:	ee 1f       	adc	r30, r30
    73be:	88 f7       	brcc	.-30     	; 0x73a2 <__divsf3_pse+0x94>
    73c0:	e0 95       	com	r30
    73c2:	08 95       	ret

000073c4 <__fixsfsi>:
    73c4:	0e 94 e9 39 	call	0x73d2	; 0x73d2 <__fixunssfsi>
    73c8:	68 94       	set
    73ca:	b1 11       	cpse	r27, r1
    73cc:	0c 94 c4 3a 	jmp	0x7588	; 0x7588 <__fp_szero>
    73d0:	08 95       	ret

000073d2 <__fixunssfsi>:
    73d2:	0e 94 a9 3a 	call	0x7552	; 0x7552 <__fp_splitA>
    73d6:	88 f0       	brcs	.+34     	; 0x73fa <__fixunssfsi+0x28>
    73d8:	9f 57       	subi	r25, 0x7F	; 127
    73da:	98 f0       	brcs	.+38     	; 0x7402 <__fixunssfsi+0x30>
    73dc:	b9 2f       	mov	r27, r25
    73de:	99 27       	eor	r25, r25
    73e0:	b7 51       	subi	r27, 0x17	; 23
    73e2:	b0 f0       	brcs	.+44     	; 0x7410 <__fixunssfsi+0x3e>
    73e4:	e1 f0       	breq	.+56     	; 0x741e <__fixunssfsi+0x4c>
    73e6:	66 0f       	add	r22, r22
    73e8:	77 1f       	adc	r23, r23
    73ea:	88 1f       	adc	r24, r24
    73ec:	99 1f       	adc	r25, r25
    73ee:	1a f0       	brmi	.+6      	; 0x73f6 <__fixunssfsi+0x24>
    73f0:	ba 95       	dec	r27
    73f2:	c9 f7       	brne	.-14     	; 0x73e6 <__fixunssfsi+0x14>
    73f4:	14 c0       	rjmp	.+40     	; 0x741e <__fixunssfsi+0x4c>
    73f6:	b1 30       	cpi	r27, 0x01	; 1
    73f8:	91 f0       	breq	.+36     	; 0x741e <__fixunssfsi+0x4c>
    73fa:	0e 94 c3 3a 	call	0x7586	; 0x7586 <__fp_zero>
    73fe:	b1 e0       	ldi	r27, 0x01	; 1
    7400:	08 95       	ret
    7402:	0c 94 c3 3a 	jmp	0x7586	; 0x7586 <__fp_zero>
    7406:	67 2f       	mov	r22, r23
    7408:	78 2f       	mov	r23, r24
    740a:	88 27       	eor	r24, r24
    740c:	b8 5f       	subi	r27, 0xF8	; 248
    740e:	39 f0       	breq	.+14     	; 0x741e <__fixunssfsi+0x4c>
    7410:	b9 3f       	cpi	r27, 0xF9	; 249
    7412:	cc f3       	brlt	.-14     	; 0x7406 <__fixunssfsi+0x34>
    7414:	86 95       	lsr	r24
    7416:	77 95       	ror	r23
    7418:	67 95       	ror	r22
    741a:	b3 95       	inc	r27
    741c:	d9 f7       	brne	.-10     	; 0x7414 <__fixunssfsi+0x42>
    741e:	3e f4       	brtc	.+14     	; 0x742e <__fixunssfsi+0x5c>
    7420:	90 95       	com	r25
    7422:	80 95       	com	r24
    7424:	70 95       	com	r23
    7426:	61 95       	neg	r22
    7428:	7f 4f       	sbci	r23, 0xFF	; 255
    742a:	8f 4f       	sbci	r24, 0xFF	; 255
    742c:	9f 4f       	sbci	r25, 0xFF	; 255
    742e:	08 95       	ret

00007430 <__floatunsisf>:
    7430:	e8 94       	clt
    7432:	09 c0       	rjmp	.+18     	; 0x7446 <__floatsisf+0x12>

00007434 <__floatsisf>:
    7434:	97 fb       	bst	r25, 7
    7436:	3e f4       	brtc	.+14     	; 0x7446 <__floatsisf+0x12>
    7438:	90 95       	com	r25
    743a:	80 95       	com	r24
    743c:	70 95       	com	r23
    743e:	61 95       	neg	r22
    7440:	7f 4f       	sbci	r23, 0xFF	; 255
    7442:	8f 4f       	sbci	r24, 0xFF	; 255
    7444:	9f 4f       	sbci	r25, 0xFF	; 255
    7446:	99 23       	and	r25, r25
    7448:	a9 f0       	breq	.+42     	; 0x7474 <__floatsisf+0x40>
    744a:	f9 2f       	mov	r31, r25
    744c:	96 e9       	ldi	r25, 0x96	; 150
    744e:	bb 27       	eor	r27, r27
    7450:	93 95       	inc	r25
    7452:	f6 95       	lsr	r31
    7454:	87 95       	ror	r24
    7456:	77 95       	ror	r23
    7458:	67 95       	ror	r22
    745a:	b7 95       	ror	r27
    745c:	f1 11       	cpse	r31, r1
    745e:	f8 cf       	rjmp	.-16     	; 0x7450 <__floatsisf+0x1c>
    7460:	fa f4       	brpl	.+62     	; 0x74a0 <__floatsisf+0x6c>
    7462:	bb 0f       	add	r27, r27
    7464:	11 f4       	brne	.+4      	; 0x746a <__floatsisf+0x36>
    7466:	60 ff       	sbrs	r22, 0
    7468:	1b c0       	rjmp	.+54     	; 0x74a0 <__floatsisf+0x6c>
    746a:	6f 5f       	subi	r22, 0xFF	; 255
    746c:	7f 4f       	sbci	r23, 0xFF	; 255
    746e:	8f 4f       	sbci	r24, 0xFF	; 255
    7470:	9f 4f       	sbci	r25, 0xFF	; 255
    7472:	16 c0       	rjmp	.+44     	; 0x74a0 <__floatsisf+0x6c>
    7474:	88 23       	and	r24, r24
    7476:	11 f0       	breq	.+4      	; 0x747c <__floatsisf+0x48>
    7478:	96 e9       	ldi	r25, 0x96	; 150
    747a:	11 c0       	rjmp	.+34     	; 0x749e <__floatsisf+0x6a>
    747c:	77 23       	and	r23, r23
    747e:	21 f0       	breq	.+8      	; 0x7488 <__floatsisf+0x54>
    7480:	9e e8       	ldi	r25, 0x8E	; 142
    7482:	87 2f       	mov	r24, r23
    7484:	76 2f       	mov	r23, r22
    7486:	05 c0       	rjmp	.+10     	; 0x7492 <__floatsisf+0x5e>
    7488:	66 23       	and	r22, r22
    748a:	71 f0       	breq	.+28     	; 0x74a8 <__floatsisf+0x74>
    748c:	96 e8       	ldi	r25, 0x86	; 134
    748e:	86 2f       	mov	r24, r22
    7490:	70 e0       	ldi	r23, 0x00	; 0
    7492:	60 e0       	ldi	r22, 0x00	; 0
    7494:	2a f0       	brmi	.+10     	; 0x74a0 <__floatsisf+0x6c>
    7496:	9a 95       	dec	r25
    7498:	66 0f       	add	r22, r22
    749a:	77 1f       	adc	r23, r23
    749c:	88 1f       	adc	r24, r24
    749e:	da f7       	brpl	.-10     	; 0x7496 <__floatsisf+0x62>
    74a0:	88 0f       	add	r24, r24
    74a2:	96 95       	lsr	r25
    74a4:	87 95       	ror	r24
    74a6:	97 f9       	bld	r25, 7
    74a8:	08 95       	ret

000074aa <__fp_cmp>:
    74aa:	99 0f       	add	r25, r25
    74ac:	00 08       	sbc	r0, r0
    74ae:	55 0f       	add	r21, r21
    74b0:	aa 0b       	sbc	r26, r26
    74b2:	e0 e8       	ldi	r30, 0x80	; 128
    74b4:	fe ef       	ldi	r31, 0xFE	; 254
    74b6:	16 16       	cp	r1, r22
    74b8:	17 06       	cpc	r1, r23
    74ba:	e8 07       	cpc	r30, r24
    74bc:	f9 07       	cpc	r31, r25
    74be:	c0 f0       	brcs	.+48     	; 0x74f0 <__fp_cmp+0x46>
    74c0:	12 16       	cp	r1, r18
    74c2:	13 06       	cpc	r1, r19
    74c4:	e4 07       	cpc	r30, r20
    74c6:	f5 07       	cpc	r31, r21
    74c8:	98 f0       	brcs	.+38     	; 0x74f0 <__fp_cmp+0x46>
    74ca:	62 1b       	sub	r22, r18
    74cc:	73 0b       	sbc	r23, r19
    74ce:	84 0b       	sbc	r24, r20
    74d0:	95 0b       	sbc	r25, r21
    74d2:	39 f4       	brne	.+14     	; 0x74e2 <__fp_cmp+0x38>
    74d4:	0a 26       	eor	r0, r26
    74d6:	61 f0       	breq	.+24     	; 0x74f0 <__fp_cmp+0x46>
    74d8:	23 2b       	or	r18, r19
    74da:	24 2b       	or	r18, r20
    74dc:	25 2b       	or	r18, r21
    74de:	21 f4       	brne	.+8      	; 0x74e8 <__fp_cmp+0x3e>
    74e0:	08 95       	ret
    74e2:	0a 26       	eor	r0, r26
    74e4:	09 f4       	brne	.+2      	; 0x74e8 <__fp_cmp+0x3e>
    74e6:	a1 40       	sbci	r26, 0x01	; 1
    74e8:	a6 95       	lsr	r26
    74ea:	8f ef       	ldi	r24, 0xFF	; 255
    74ec:	81 1d       	adc	r24, r1
    74ee:	81 1d       	adc	r24, r1
    74f0:	08 95       	ret

000074f2 <__fp_inf>:
    74f2:	97 f9       	bld	r25, 7
    74f4:	9f 67       	ori	r25, 0x7F	; 127
    74f6:	80 e8       	ldi	r24, 0x80	; 128
    74f8:	70 e0       	ldi	r23, 0x00	; 0
    74fa:	60 e0       	ldi	r22, 0x00	; 0
    74fc:	08 95       	ret

000074fe <__fp_nan>:
    74fe:	9f ef       	ldi	r25, 0xFF	; 255
    7500:	80 ec       	ldi	r24, 0xC0	; 192
    7502:	08 95       	ret

00007504 <__fp_pscA>:
    7504:	00 24       	eor	r0, r0
    7506:	0a 94       	dec	r0
    7508:	16 16       	cp	r1, r22
    750a:	17 06       	cpc	r1, r23
    750c:	18 06       	cpc	r1, r24
    750e:	09 06       	cpc	r0, r25
    7510:	08 95       	ret

00007512 <__fp_pscB>:
    7512:	00 24       	eor	r0, r0
    7514:	0a 94       	dec	r0
    7516:	12 16       	cp	r1, r18
    7518:	13 06       	cpc	r1, r19
    751a:	14 06       	cpc	r1, r20
    751c:	05 06       	cpc	r0, r21
    751e:	08 95       	ret

00007520 <__fp_round>:
    7520:	09 2e       	mov	r0, r25
    7522:	03 94       	inc	r0
    7524:	00 0c       	add	r0, r0
    7526:	11 f4       	brne	.+4      	; 0x752c <__fp_round+0xc>
    7528:	88 23       	and	r24, r24
    752a:	52 f0       	brmi	.+20     	; 0x7540 <__fp_round+0x20>
    752c:	bb 0f       	add	r27, r27
    752e:	40 f4       	brcc	.+16     	; 0x7540 <__fp_round+0x20>
    7530:	bf 2b       	or	r27, r31
    7532:	11 f4       	brne	.+4      	; 0x7538 <__fp_round+0x18>
    7534:	60 ff       	sbrs	r22, 0
    7536:	04 c0       	rjmp	.+8      	; 0x7540 <__fp_round+0x20>
    7538:	6f 5f       	subi	r22, 0xFF	; 255
    753a:	7f 4f       	sbci	r23, 0xFF	; 255
    753c:	8f 4f       	sbci	r24, 0xFF	; 255
    753e:	9f 4f       	sbci	r25, 0xFF	; 255
    7540:	08 95       	ret

00007542 <__fp_split3>:
    7542:	57 fd       	sbrc	r21, 7
    7544:	90 58       	subi	r25, 0x80	; 128
    7546:	44 0f       	add	r20, r20
    7548:	55 1f       	adc	r21, r21
    754a:	59 f0       	breq	.+22     	; 0x7562 <__fp_splitA+0x10>
    754c:	5f 3f       	cpi	r21, 0xFF	; 255
    754e:	71 f0       	breq	.+28     	; 0x756c <__fp_splitA+0x1a>
    7550:	47 95       	ror	r20

00007552 <__fp_splitA>:
    7552:	88 0f       	add	r24, r24
    7554:	97 fb       	bst	r25, 7
    7556:	99 1f       	adc	r25, r25
    7558:	61 f0       	breq	.+24     	; 0x7572 <__fp_splitA+0x20>
    755a:	9f 3f       	cpi	r25, 0xFF	; 255
    755c:	79 f0       	breq	.+30     	; 0x757c <__fp_splitA+0x2a>
    755e:	87 95       	ror	r24
    7560:	08 95       	ret
    7562:	12 16       	cp	r1, r18
    7564:	13 06       	cpc	r1, r19
    7566:	14 06       	cpc	r1, r20
    7568:	55 1f       	adc	r21, r21
    756a:	f2 cf       	rjmp	.-28     	; 0x7550 <__fp_split3+0xe>
    756c:	46 95       	lsr	r20
    756e:	f1 df       	rcall	.-30     	; 0x7552 <__fp_splitA>
    7570:	08 c0       	rjmp	.+16     	; 0x7582 <__fp_splitA+0x30>
    7572:	16 16       	cp	r1, r22
    7574:	17 06       	cpc	r1, r23
    7576:	18 06       	cpc	r1, r24
    7578:	99 1f       	adc	r25, r25
    757a:	f1 cf       	rjmp	.-30     	; 0x755e <__fp_splitA+0xc>
    757c:	86 95       	lsr	r24
    757e:	71 05       	cpc	r23, r1
    7580:	61 05       	cpc	r22, r1
    7582:	08 94       	sec
    7584:	08 95       	ret

00007586 <__fp_zero>:
    7586:	e8 94       	clt

00007588 <__fp_szero>:
    7588:	bb 27       	eor	r27, r27
    758a:	66 27       	eor	r22, r22
    758c:	77 27       	eor	r23, r23
    758e:	cb 01       	movw	r24, r22
    7590:	97 f9       	bld	r25, 7
    7592:	08 95       	ret

00007594 <__gesf2>:
    7594:	0e 94 55 3a 	call	0x74aa	; 0x74aa <__fp_cmp>
    7598:	08 f4       	brcc	.+2      	; 0x759c <__gesf2+0x8>
    759a:	8f ef       	ldi	r24, 0xFF	; 255
    759c:	08 95       	ret

0000759e <__mulsf3>:
    759e:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <__mulsf3x>
    75a2:	0c 94 90 3a 	jmp	0x7520	; 0x7520 <__fp_round>
    75a6:	0e 94 82 3a 	call	0x7504	; 0x7504 <__fp_pscA>
    75aa:	38 f0       	brcs	.+14     	; 0x75ba <__mulsf3+0x1c>
    75ac:	0e 94 89 3a 	call	0x7512	; 0x7512 <__fp_pscB>
    75b0:	20 f0       	brcs	.+8      	; 0x75ba <__mulsf3+0x1c>
    75b2:	95 23       	and	r25, r21
    75b4:	11 f0       	breq	.+4      	; 0x75ba <__mulsf3+0x1c>
    75b6:	0c 94 79 3a 	jmp	0x74f2	; 0x74f2 <__fp_inf>
    75ba:	0c 94 7f 3a 	jmp	0x74fe	; 0x74fe <__fp_nan>
    75be:	11 24       	eor	r1, r1
    75c0:	0c 94 c4 3a 	jmp	0x7588	; 0x7588 <__fp_szero>

000075c4 <__mulsf3x>:
    75c4:	0e 94 a1 3a 	call	0x7542	; 0x7542 <__fp_split3>
    75c8:	70 f3       	brcs	.-36     	; 0x75a6 <__mulsf3+0x8>

000075ca <__mulsf3_pse>:
    75ca:	95 9f       	mul	r25, r21
    75cc:	c1 f3       	breq	.-16     	; 0x75be <__mulsf3+0x20>
    75ce:	95 0f       	add	r25, r21
    75d0:	50 e0       	ldi	r21, 0x00	; 0
    75d2:	55 1f       	adc	r21, r21
    75d4:	62 9f       	mul	r22, r18
    75d6:	f0 01       	movw	r30, r0
    75d8:	72 9f       	mul	r23, r18
    75da:	bb 27       	eor	r27, r27
    75dc:	f0 0d       	add	r31, r0
    75de:	b1 1d       	adc	r27, r1
    75e0:	63 9f       	mul	r22, r19
    75e2:	aa 27       	eor	r26, r26
    75e4:	f0 0d       	add	r31, r0
    75e6:	b1 1d       	adc	r27, r1
    75e8:	aa 1f       	adc	r26, r26
    75ea:	64 9f       	mul	r22, r20
    75ec:	66 27       	eor	r22, r22
    75ee:	b0 0d       	add	r27, r0
    75f0:	a1 1d       	adc	r26, r1
    75f2:	66 1f       	adc	r22, r22
    75f4:	82 9f       	mul	r24, r18
    75f6:	22 27       	eor	r18, r18
    75f8:	b0 0d       	add	r27, r0
    75fa:	a1 1d       	adc	r26, r1
    75fc:	62 1f       	adc	r22, r18
    75fe:	73 9f       	mul	r23, r19
    7600:	b0 0d       	add	r27, r0
    7602:	a1 1d       	adc	r26, r1
    7604:	62 1f       	adc	r22, r18
    7606:	83 9f       	mul	r24, r19
    7608:	a0 0d       	add	r26, r0
    760a:	61 1d       	adc	r22, r1
    760c:	22 1f       	adc	r18, r18
    760e:	74 9f       	mul	r23, r20
    7610:	33 27       	eor	r19, r19
    7612:	a0 0d       	add	r26, r0
    7614:	61 1d       	adc	r22, r1
    7616:	23 1f       	adc	r18, r19
    7618:	84 9f       	mul	r24, r20
    761a:	60 0d       	add	r22, r0
    761c:	21 1d       	adc	r18, r1
    761e:	82 2f       	mov	r24, r18
    7620:	76 2f       	mov	r23, r22
    7622:	6a 2f       	mov	r22, r26
    7624:	11 24       	eor	r1, r1
    7626:	9f 57       	subi	r25, 0x7F	; 127
    7628:	50 40       	sbci	r21, 0x00	; 0
    762a:	9a f0       	brmi	.+38     	; 0x7652 <__mulsf3_pse+0x88>
    762c:	f1 f0       	breq	.+60     	; 0x766a <__mulsf3_pse+0xa0>
    762e:	88 23       	and	r24, r24
    7630:	4a f0       	brmi	.+18     	; 0x7644 <__mulsf3_pse+0x7a>
    7632:	ee 0f       	add	r30, r30
    7634:	ff 1f       	adc	r31, r31
    7636:	bb 1f       	adc	r27, r27
    7638:	66 1f       	adc	r22, r22
    763a:	77 1f       	adc	r23, r23
    763c:	88 1f       	adc	r24, r24
    763e:	91 50       	subi	r25, 0x01	; 1
    7640:	50 40       	sbci	r21, 0x00	; 0
    7642:	a9 f7       	brne	.-22     	; 0x762e <__mulsf3_pse+0x64>
    7644:	9e 3f       	cpi	r25, 0xFE	; 254
    7646:	51 05       	cpc	r21, r1
    7648:	80 f0       	brcs	.+32     	; 0x766a <__mulsf3_pse+0xa0>
    764a:	0c 94 79 3a 	jmp	0x74f2	; 0x74f2 <__fp_inf>
    764e:	0c 94 c4 3a 	jmp	0x7588	; 0x7588 <__fp_szero>
    7652:	5f 3f       	cpi	r21, 0xFF	; 255
    7654:	e4 f3       	brlt	.-8      	; 0x764e <__mulsf3_pse+0x84>
    7656:	98 3e       	cpi	r25, 0xE8	; 232
    7658:	d4 f3       	brlt	.-12     	; 0x764e <__mulsf3_pse+0x84>
    765a:	86 95       	lsr	r24
    765c:	77 95       	ror	r23
    765e:	67 95       	ror	r22
    7660:	b7 95       	ror	r27
    7662:	f7 95       	ror	r31
    7664:	e7 95       	ror	r30
    7666:	9f 5f       	subi	r25, 0xFF	; 255
    7668:	c1 f7       	brne	.-16     	; 0x765a <__mulsf3_pse+0x90>
    766a:	fe 2b       	or	r31, r30
    766c:	88 0f       	add	r24, r24
    766e:	91 1d       	adc	r25, r1
    7670:	96 95       	lsr	r25
    7672:	87 95       	ror	r24
    7674:	97 f9       	bld	r25, 7
    7676:	08 95       	ret

00007678 <__divmodhi4>:
    7678:	97 fb       	bst	r25, 7
    767a:	07 2e       	mov	r0, r23
    767c:	16 f4       	brtc	.+4      	; 0x7682 <__divmodhi4+0xa>
    767e:	00 94       	com	r0
    7680:	07 d0       	rcall	.+14     	; 0x7690 <__divmodhi4_neg1>
    7682:	77 fd       	sbrc	r23, 7
    7684:	09 d0       	rcall	.+18     	; 0x7698 <__divmodhi4_neg2>
    7686:	0e 94 56 3b 	call	0x76ac	; 0x76ac <__udivmodhi4>
    768a:	07 fc       	sbrc	r0, 7
    768c:	05 d0       	rcall	.+10     	; 0x7698 <__divmodhi4_neg2>
    768e:	3e f4       	brtc	.+14     	; 0x769e <__divmodhi4_exit>

00007690 <__divmodhi4_neg1>:
    7690:	90 95       	com	r25
    7692:	81 95       	neg	r24
    7694:	9f 4f       	sbci	r25, 0xFF	; 255
    7696:	08 95       	ret

00007698 <__divmodhi4_neg2>:
    7698:	70 95       	com	r23
    769a:	61 95       	neg	r22
    769c:	7f 4f       	sbci	r23, 0xFF	; 255

0000769e <__divmodhi4_exit>:
    769e:	08 95       	ret

000076a0 <__tablejump2__>:
    76a0:	ee 0f       	add	r30, r30
    76a2:	ff 1f       	adc	r31, r31
    76a4:	05 90       	lpm	r0, Z+
    76a6:	f4 91       	lpm	r31, Z
    76a8:	e0 2d       	mov	r30, r0
    76aa:	09 94       	ijmp

000076ac <__udivmodhi4>:
    76ac:	aa 1b       	sub	r26, r26
    76ae:	bb 1b       	sub	r27, r27
    76b0:	51 e1       	ldi	r21, 0x11	; 17
    76b2:	07 c0       	rjmp	.+14     	; 0x76c2 <__udivmodhi4_ep>

000076b4 <__udivmodhi4_loop>:
    76b4:	aa 1f       	adc	r26, r26
    76b6:	bb 1f       	adc	r27, r27
    76b8:	a6 17       	cp	r26, r22
    76ba:	b7 07       	cpc	r27, r23
    76bc:	10 f0       	brcs	.+4      	; 0x76c2 <__udivmodhi4_ep>
    76be:	a6 1b       	sub	r26, r22
    76c0:	b7 0b       	sbc	r27, r23

000076c2 <__udivmodhi4_ep>:
    76c2:	88 1f       	adc	r24, r24
    76c4:	99 1f       	adc	r25, r25
    76c6:	5a 95       	dec	r21
    76c8:	a9 f7       	brne	.-22     	; 0x76b4 <__udivmodhi4_loop>
    76ca:	80 95       	com	r24
    76cc:	90 95       	com	r25
    76ce:	bc 01       	movw	r22, r24
    76d0:	cd 01       	movw	r24, r26
    76d2:	08 95       	ret

000076d4 <memset>:
    76d4:	dc 01       	movw	r26, r24
    76d6:	01 c0       	rjmp	.+2      	; 0x76da <memset+0x6>
    76d8:	6d 93       	st	X+, r22
    76da:	41 50       	subi	r20, 0x01	; 1
    76dc:	50 40       	sbci	r21, 0x00	; 0
    76de:	e0 f7       	brcc	.-8      	; 0x76d8 <memset+0x4>
    76e0:	08 95       	ret

000076e2 <strcmp>:
    76e2:	fb 01       	movw	r30, r22
    76e4:	dc 01       	movw	r26, r24
    76e6:	8d 91       	ld	r24, X+
    76e8:	01 90       	ld	r0, Z+
    76ea:	80 19       	sub	r24, r0
    76ec:	01 10       	cpse	r0, r1
    76ee:	d9 f3       	breq	.-10     	; 0x76e6 <strcmp+0x4>
    76f0:	99 0b       	sbc	r25, r25
    76f2:	08 95       	ret

000076f4 <printf>:
    76f4:	a0 e0       	ldi	r26, 0x00	; 0
    76f6:	b0 e0       	ldi	r27, 0x00	; 0
    76f8:	e0 e8       	ldi	r30, 0x80	; 128
    76fa:	fb e3       	ldi	r31, 0x3B	; 59
    76fc:	0c 94 61 3e 	jmp	0x7cc2	; 0x7cc2 <__prologue_saves__+0x20>
    7700:	ae 01       	movw	r20, r28
    7702:	4b 5f       	subi	r20, 0xFB	; 251
    7704:	5f 4f       	sbci	r21, 0xFF	; 255
    7706:	fa 01       	movw	r30, r20
    7708:	61 91       	ld	r22, Z+
    770a:	71 91       	ld	r23, Z+
    770c:	af 01       	movw	r20, r30
    770e:	80 91 2d 2f 	lds	r24, 0x2F2D	; 0x802f2d <__iob+0x2>
    7712:	90 91 2e 2f 	lds	r25, 0x2F2E	; 0x802f2e <__iob+0x3>
    7716:	0e 94 c0 3b 	call	0x7780	; 0x7780 <vfprintf>
    771a:	e2 e0       	ldi	r30, 0x02	; 2
    771c:	0c 94 7a 3e 	jmp	0x7cf4	; 0x7cf4 <__epilogue_restores__+0x20>

00007720 <puts>:
    7720:	0f 93       	push	r16
    7722:	1f 93       	push	r17
    7724:	cf 93       	push	r28
    7726:	df 93       	push	r29
    7728:	e0 91 2d 2f 	lds	r30, 0x2F2D	; 0x802f2d <__iob+0x2>
    772c:	f0 91 2e 2f 	lds	r31, 0x2F2E	; 0x802f2e <__iob+0x3>
    7730:	23 81       	ldd	r18, Z+3	; 0x03
    7732:	21 ff       	sbrs	r18, 1
    7734:	1b c0       	rjmp	.+54     	; 0x776c <puts+0x4c>
    7736:	8c 01       	movw	r16, r24
    7738:	d0 e0       	ldi	r29, 0x00	; 0
    773a:	c0 e0       	ldi	r28, 0x00	; 0
    773c:	f8 01       	movw	r30, r16
    773e:	81 91       	ld	r24, Z+
    7740:	8f 01       	movw	r16, r30
    7742:	60 91 2d 2f 	lds	r22, 0x2F2D	; 0x802f2d <__iob+0x2>
    7746:	70 91 2e 2f 	lds	r23, 0x2F2E	; 0x802f2e <__iob+0x3>
    774a:	db 01       	movw	r26, r22
    774c:	18 96       	adiw	r26, 0x08	; 8
    774e:	ed 91       	ld	r30, X+
    7750:	fc 91       	ld	r31, X
    7752:	19 97       	sbiw	r26, 0x09	; 9
    7754:	88 23       	and	r24, r24
    7756:	31 f0       	breq	.+12     	; 0x7764 <puts+0x44>
    7758:	09 95       	icall
    775a:	89 2b       	or	r24, r25
    775c:	79 f3       	breq	.-34     	; 0x773c <puts+0x1c>
    775e:	df ef       	ldi	r29, 0xFF	; 255
    7760:	cf ef       	ldi	r28, 0xFF	; 255
    7762:	ec cf       	rjmp	.-40     	; 0x773c <puts+0x1c>
    7764:	8a e0       	ldi	r24, 0x0A	; 10
    7766:	09 95       	icall
    7768:	89 2b       	or	r24, r25
    776a:	19 f0       	breq	.+6      	; 0x7772 <puts+0x52>
    776c:	8f ef       	ldi	r24, 0xFF	; 255
    776e:	9f ef       	ldi	r25, 0xFF	; 255
    7770:	02 c0       	rjmp	.+4      	; 0x7776 <puts+0x56>
    7772:	8d 2f       	mov	r24, r29
    7774:	9c 2f       	mov	r25, r28
    7776:	df 91       	pop	r29
    7778:	cf 91       	pop	r28
    777a:	1f 91       	pop	r17
    777c:	0f 91       	pop	r16
    777e:	08 95       	ret

00007780 <vfprintf>:
    7780:	ab e0       	ldi	r26, 0x0B	; 11
    7782:	b0 e0       	ldi	r27, 0x00	; 0
    7784:	e6 ec       	ldi	r30, 0xC6	; 198
    7786:	fb e3       	ldi	r31, 0x3B	; 59
    7788:	0c 94 51 3e 	jmp	0x7ca2	; 0x7ca2 <__prologue_saves__>
    778c:	6c 01       	movw	r12, r24
    778e:	7b 01       	movw	r14, r22
    7790:	8a 01       	movw	r16, r20
    7792:	fc 01       	movw	r30, r24
    7794:	16 82       	std	Z+6, r1	; 0x06
    7796:	17 82       	std	Z+7, r1	; 0x07
    7798:	83 81       	ldd	r24, Z+3	; 0x03
    779a:	81 ff       	sbrs	r24, 1
    779c:	cc c1       	rjmp	.+920    	; 0x7b36 <vfprintf+0x3b6>
    779e:	ce 01       	movw	r24, r28
    77a0:	01 96       	adiw	r24, 0x01	; 1
    77a2:	3c 01       	movw	r6, r24
    77a4:	f6 01       	movw	r30, r12
    77a6:	93 81       	ldd	r25, Z+3	; 0x03
    77a8:	f7 01       	movw	r30, r14
    77aa:	93 fd       	sbrc	r25, 3
    77ac:	85 91       	lpm	r24, Z+
    77ae:	93 ff       	sbrs	r25, 3
    77b0:	81 91       	ld	r24, Z+
    77b2:	7f 01       	movw	r14, r30
    77b4:	88 23       	and	r24, r24
    77b6:	09 f4       	brne	.+2      	; 0x77ba <vfprintf+0x3a>
    77b8:	ba c1       	rjmp	.+884    	; 0x7b2e <vfprintf+0x3ae>
    77ba:	85 32       	cpi	r24, 0x25	; 37
    77bc:	39 f4       	brne	.+14     	; 0x77cc <vfprintf+0x4c>
    77be:	93 fd       	sbrc	r25, 3
    77c0:	85 91       	lpm	r24, Z+
    77c2:	93 ff       	sbrs	r25, 3
    77c4:	81 91       	ld	r24, Z+
    77c6:	7f 01       	movw	r14, r30
    77c8:	85 32       	cpi	r24, 0x25	; 37
    77ca:	29 f4       	brne	.+10     	; 0x77d6 <vfprintf+0x56>
    77cc:	b6 01       	movw	r22, r12
    77ce:	90 e0       	ldi	r25, 0x00	; 0
    77d0:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <fputc>
    77d4:	e7 cf       	rjmp	.-50     	; 0x77a4 <vfprintf+0x24>
    77d6:	91 2c       	mov	r9, r1
    77d8:	21 2c       	mov	r2, r1
    77da:	31 2c       	mov	r3, r1
    77dc:	ff e1       	ldi	r31, 0x1F	; 31
    77de:	f3 15       	cp	r31, r3
    77e0:	d8 f0       	brcs	.+54     	; 0x7818 <vfprintf+0x98>
    77e2:	8b 32       	cpi	r24, 0x2B	; 43
    77e4:	79 f0       	breq	.+30     	; 0x7804 <vfprintf+0x84>
    77e6:	38 f4       	brcc	.+14     	; 0x77f6 <vfprintf+0x76>
    77e8:	80 32       	cpi	r24, 0x20	; 32
    77ea:	79 f0       	breq	.+30     	; 0x780a <vfprintf+0x8a>
    77ec:	83 32       	cpi	r24, 0x23	; 35
    77ee:	a1 f4       	brne	.+40     	; 0x7818 <vfprintf+0x98>
    77f0:	23 2d       	mov	r18, r3
    77f2:	20 61       	ori	r18, 0x10	; 16
    77f4:	1d c0       	rjmp	.+58     	; 0x7830 <vfprintf+0xb0>
    77f6:	8d 32       	cpi	r24, 0x2D	; 45
    77f8:	61 f0       	breq	.+24     	; 0x7812 <vfprintf+0x92>
    77fa:	80 33       	cpi	r24, 0x30	; 48
    77fc:	69 f4       	brne	.+26     	; 0x7818 <vfprintf+0x98>
    77fe:	23 2d       	mov	r18, r3
    7800:	21 60       	ori	r18, 0x01	; 1
    7802:	16 c0       	rjmp	.+44     	; 0x7830 <vfprintf+0xb0>
    7804:	83 2d       	mov	r24, r3
    7806:	82 60       	ori	r24, 0x02	; 2
    7808:	38 2e       	mov	r3, r24
    780a:	e3 2d       	mov	r30, r3
    780c:	e4 60       	ori	r30, 0x04	; 4
    780e:	3e 2e       	mov	r3, r30
    7810:	2a c0       	rjmp	.+84     	; 0x7866 <vfprintf+0xe6>
    7812:	f3 2d       	mov	r31, r3
    7814:	f8 60       	ori	r31, 0x08	; 8
    7816:	1d c0       	rjmp	.+58     	; 0x7852 <vfprintf+0xd2>
    7818:	37 fc       	sbrc	r3, 7
    781a:	2d c0       	rjmp	.+90     	; 0x7876 <vfprintf+0xf6>
    781c:	20 ed       	ldi	r18, 0xD0	; 208
    781e:	28 0f       	add	r18, r24
    7820:	2a 30       	cpi	r18, 0x0A	; 10
    7822:	40 f0       	brcs	.+16     	; 0x7834 <vfprintf+0xb4>
    7824:	8e 32       	cpi	r24, 0x2E	; 46
    7826:	b9 f4       	brne	.+46     	; 0x7856 <vfprintf+0xd6>
    7828:	36 fc       	sbrc	r3, 6
    782a:	81 c1       	rjmp	.+770    	; 0x7b2e <vfprintf+0x3ae>
    782c:	23 2d       	mov	r18, r3
    782e:	20 64       	ori	r18, 0x40	; 64
    7830:	32 2e       	mov	r3, r18
    7832:	19 c0       	rjmp	.+50     	; 0x7866 <vfprintf+0xe6>
    7834:	36 fe       	sbrs	r3, 6
    7836:	06 c0       	rjmp	.+12     	; 0x7844 <vfprintf+0xc4>
    7838:	8a e0       	ldi	r24, 0x0A	; 10
    783a:	98 9e       	mul	r9, r24
    783c:	20 0d       	add	r18, r0
    783e:	11 24       	eor	r1, r1
    7840:	92 2e       	mov	r9, r18
    7842:	11 c0       	rjmp	.+34     	; 0x7866 <vfprintf+0xe6>
    7844:	ea e0       	ldi	r30, 0x0A	; 10
    7846:	2e 9e       	mul	r2, r30
    7848:	20 0d       	add	r18, r0
    784a:	11 24       	eor	r1, r1
    784c:	22 2e       	mov	r2, r18
    784e:	f3 2d       	mov	r31, r3
    7850:	f0 62       	ori	r31, 0x20	; 32
    7852:	3f 2e       	mov	r3, r31
    7854:	08 c0       	rjmp	.+16     	; 0x7866 <vfprintf+0xe6>
    7856:	8c 36       	cpi	r24, 0x6C	; 108
    7858:	21 f4       	brne	.+8      	; 0x7862 <vfprintf+0xe2>
    785a:	83 2d       	mov	r24, r3
    785c:	80 68       	ori	r24, 0x80	; 128
    785e:	38 2e       	mov	r3, r24
    7860:	02 c0       	rjmp	.+4      	; 0x7866 <vfprintf+0xe6>
    7862:	88 36       	cpi	r24, 0x68	; 104
    7864:	41 f4       	brne	.+16     	; 0x7876 <vfprintf+0xf6>
    7866:	f7 01       	movw	r30, r14
    7868:	93 fd       	sbrc	r25, 3
    786a:	85 91       	lpm	r24, Z+
    786c:	93 ff       	sbrs	r25, 3
    786e:	81 91       	ld	r24, Z+
    7870:	7f 01       	movw	r14, r30
    7872:	81 11       	cpse	r24, r1
    7874:	b3 cf       	rjmp	.-154    	; 0x77dc <vfprintf+0x5c>
    7876:	98 2f       	mov	r25, r24
    7878:	9f 7d       	andi	r25, 0xDF	; 223
    787a:	95 54       	subi	r25, 0x45	; 69
    787c:	93 30       	cpi	r25, 0x03	; 3
    787e:	28 f4       	brcc	.+10     	; 0x788a <vfprintf+0x10a>
    7880:	0c 5f       	subi	r16, 0xFC	; 252
    7882:	1f 4f       	sbci	r17, 0xFF	; 255
    7884:	9f e3       	ldi	r25, 0x3F	; 63
    7886:	99 83       	std	Y+1, r25	; 0x01
    7888:	0d c0       	rjmp	.+26     	; 0x78a4 <vfprintf+0x124>
    788a:	83 36       	cpi	r24, 0x63	; 99
    788c:	31 f0       	breq	.+12     	; 0x789a <vfprintf+0x11a>
    788e:	83 37       	cpi	r24, 0x73	; 115
    7890:	71 f0       	breq	.+28     	; 0x78ae <vfprintf+0x12e>
    7892:	83 35       	cpi	r24, 0x53	; 83
    7894:	09 f0       	breq	.+2      	; 0x7898 <vfprintf+0x118>
    7896:	59 c0       	rjmp	.+178    	; 0x794a <vfprintf+0x1ca>
    7898:	21 c0       	rjmp	.+66     	; 0x78dc <vfprintf+0x15c>
    789a:	f8 01       	movw	r30, r16
    789c:	80 81       	ld	r24, Z
    789e:	89 83       	std	Y+1, r24	; 0x01
    78a0:	0e 5f       	subi	r16, 0xFE	; 254
    78a2:	1f 4f       	sbci	r17, 0xFF	; 255
    78a4:	88 24       	eor	r8, r8
    78a6:	83 94       	inc	r8
    78a8:	91 2c       	mov	r9, r1
    78aa:	53 01       	movw	r10, r6
    78ac:	13 c0       	rjmp	.+38     	; 0x78d4 <vfprintf+0x154>
    78ae:	28 01       	movw	r4, r16
    78b0:	f2 e0       	ldi	r31, 0x02	; 2
    78b2:	4f 0e       	add	r4, r31
    78b4:	51 1c       	adc	r5, r1
    78b6:	f8 01       	movw	r30, r16
    78b8:	a0 80       	ld	r10, Z
    78ba:	b1 80       	ldd	r11, Z+1	; 0x01
    78bc:	36 fe       	sbrs	r3, 6
    78be:	03 c0       	rjmp	.+6      	; 0x78c6 <vfprintf+0x146>
    78c0:	69 2d       	mov	r22, r9
    78c2:	70 e0       	ldi	r23, 0x00	; 0
    78c4:	02 c0       	rjmp	.+4      	; 0x78ca <vfprintf+0x14a>
    78c6:	6f ef       	ldi	r22, 0xFF	; 255
    78c8:	7f ef       	ldi	r23, 0xFF	; 255
    78ca:	c5 01       	movw	r24, r10
    78cc:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <strnlen>
    78d0:	4c 01       	movw	r8, r24
    78d2:	82 01       	movw	r16, r4
    78d4:	f3 2d       	mov	r31, r3
    78d6:	ff 77       	andi	r31, 0x7F	; 127
    78d8:	3f 2e       	mov	r3, r31
    78da:	16 c0       	rjmp	.+44     	; 0x7908 <vfprintf+0x188>
    78dc:	28 01       	movw	r4, r16
    78de:	22 e0       	ldi	r18, 0x02	; 2
    78e0:	42 0e       	add	r4, r18
    78e2:	51 1c       	adc	r5, r1
    78e4:	f8 01       	movw	r30, r16
    78e6:	a0 80       	ld	r10, Z
    78e8:	b1 80       	ldd	r11, Z+1	; 0x01
    78ea:	36 fe       	sbrs	r3, 6
    78ec:	03 c0       	rjmp	.+6      	; 0x78f4 <vfprintf+0x174>
    78ee:	69 2d       	mov	r22, r9
    78f0:	70 e0       	ldi	r23, 0x00	; 0
    78f2:	02 c0       	rjmp	.+4      	; 0x78f8 <vfprintf+0x178>
    78f4:	6f ef       	ldi	r22, 0xFF	; 255
    78f6:	7f ef       	ldi	r23, 0xFF	; 255
    78f8:	c5 01       	movw	r24, r10
    78fa:	0e 94 a1 3d 	call	0x7b42	; 0x7b42 <strnlen_P>
    78fe:	4c 01       	movw	r8, r24
    7900:	f3 2d       	mov	r31, r3
    7902:	f0 68       	ori	r31, 0x80	; 128
    7904:	3f 2e       	mov	r3, r31
    7906:	82 01       	movw	r16, r4
    7908:	33 fc       	sbrc	r3, 3
    790a:	1b c0       	rjmp	.+54     	; 0x7942 <vfprintf+0x1c2>
    790c:	82 2d       	mov	r24, r2
    790e:	90 e0       	ldi	r25, 0x00	; 0
    7910:	88 16       	cp	r8, r24
    7912:	99 06       	cpc	r9, r25
    7914:	b0 f4       	brcc	.+44     	; 0x7942 <vfprintf+0x1c2>
    7916:	b6 01       	movw	r22, r12
    7918:	80 e2       	ldi	r24, 0x20	; 32
    791a:	90 e0       	ldi	r25, 0x00	; 0
    791c:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <fputc>
    7920:	2a 94       	dec	r2
    7922:	f4 cf       	rjmp	.-24     	; 0x790c <vfprintf+0x18c>
    7924:	f5 01       	movw	r30, r10
    7926:	37 fc       	sbrc	r3, 7
    7928:	85 91       	lpm	r24, Z+
    792a:	37 fe       	sbrs	r3, 7
    792c:	81 91       	ld	r24, Z+
    792e:	5f 01       	movw	r10, r30
    7930:	b6 01       	movw	r22, r12
    7932:	90 e0       	ldi	r25, 0x00	; 0
    7934:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <fputc>
    7938:	21 10       	cpse	r2, r1
    793a:	2a 94       	dec	r2
    793c:	21 e0       	ldi	r18, 0x01	; 1
    793e:	82 1a       	sub	r8, r18
    7940:	91 08       	sbc	r9, r1
    7942:	81 14       	cp	r8, r1
    7944:	91 04       	cpc	r9, r1
    7946:	71 f7       	brne	.-36     	; 0x7924 <vfprintf+0x1a4>
    7948:	e8 c0       	rjmp	.+464    	; 0x7b1a <vfprintf+0x39a>
    794a:	84 36       	cpi	r24, 0x64	; 100
    794c:	11 f0       	breq	.+4      	; 0x7952 <vfprintf+0x1d2>
    794e:	89 36       	cpi	r24, 0x69	; 105
    7950:	41 f5       	brne	.+80     	; 0x79a2 <vfprintf+0x222>
    7952:	f8 01       	movw	r30, r16
    7954:	37 fe       	sbrs	r3, 7
    7956:	07 c0       	rjmp	.+14     	; 0x7966 <vfprintf+0x1e6>
    7958:	60 81       	ld	r22, Z
    795a:	71 81       	ldd	r23, Z+1	; 0x01
    795c:	82 81       	ldd	r24, Z+2	; 0x02
    795e:	93 81       	ldd	r25, Z+3	; 0x03
    7960:	0c 5f       	subi	r16, 0xFC	; 252
    7962:	1f 4f       	sbci	r17, 0xFF	; 255
    7964:	08 c0       	rjmp	.+16     	; 0x7976 <vfprintf+0x1f6>
    7966:	60 81       	ld	r22, Z
    7968:	71 81       	ldd	r23, Z+1	; 0x01
    796a:	07 2e       	mov	r0, r23
    796c:	00 0c       	add	r0, r0
    796e:	88 0b       	sbc	r24, r24
    7970:	99 0b       	sbc	r25, r25
    7972:	0e 5f       	subi	r16, 0xFE	; 254
    7974:	1f 4f       	sbci	r17, 0xFF	; 255
    7976:	f3 2d       	mov	r31, r3
    7978:	ff 76       	andi	r31, 0x6F	; 111
    797a:	3f 2e       	mov	r3, r31
    797c:	97 ff       	sbrs	r25, 7
    797e:	09 c0       	rjmp	.+18     	; 0x7992 <vfprintf+0x212>
    7980:	90 95       	com	r25
    7982:	80 95       	com	r24
    7984:	70 95       	com	r23
    7986:	61 95       	neg	r22
    7988:	7f 4f       	sbci	r23, 0xFF	; 255
    798a:	8f 4f       	sbci	r24, 0xFF	; 255
    798c:	9f 4f       	sbci	r25, 0xFF	; 255
    798e:	f0 68       	ori	r31, 0x80	; 128
    7990:	3f 2e       	mov	r3, r31
    7992:	2a e0       	ldi	r18, 0x0A	; 10
    7994:	30 e0       	ldi	r19, 0x00	; 0
    7996:	a3 01       	movw	r20, r6
    7998:	0e 94 f3 3d 	call	0x7be6	; 0x7be6 <__ultoa_invert>
    799c:	88 2e       	mov	r8, r24
    799e:	86 18       	sub	r8, r6
    79a0:	45 c0       	rjmp	.+138    	; 0x7a2c <vfprintf+0x2ac>
    79a2:	85 37       	cpi	r24, 0x75	; 117
    79a4:	31 f4       	brne	.+12     	; 0x79b2 <vfprintf+0x232>
    79a6:	23 2d       	mov	r18, r3
    79a8:	2f 7e       	andi	r18, 0xEF	; 239
    79aa:	b2 2e       	mov	r11, r18
    79ac:	2a e0       	ldi	r18, 0x0A	; 10
    79ae:	30 e0       	ldi	r19, 0x00	; 0
    79b0:	25 c0       	rjmp	.+74     	; 0x79fc <vfprintf+0x27c>
    79b2:	93 2d       	mov	r25, r3
    79b4:	99 7f       	andi	r25, 0xF9	; 249
    79b6:	b9 2e       	mov	r11, r25
    79b8:	8f 36       	cpi	r24, 0x6F	; 111
    79ba:	c1 f0       	breq	.+48     	; 0x79ec <vfprintf+0x26c>
    79bc:	18 f4       	brcc	.+6      	; 0x79c4 <vfprintf+0x244>
    79be:	88 35       	cpi	r24, 0x58	; 88
    79c0:	79 f0       	breq	.+30     	; 0x79e0 <vfprintf+0x260>
    79c2:	b5 c0       	rjmp	.+362    	; 0x7b2e <vfprintf+0x3ae>
    79c4:	80 37       	cpi	r24, 0x70	; 112
    79c6:	19 f0       	breq	.+6      	; 0x79ce <vfprintf+0x24e>
    79c8:	88 37       	cpi	r24, 0x78	; 120
    79ca:	21 f0       	breq	.+8      	; 0x79d4 <vfprintf+0x254>
    79cc:	b0 c0       	rjmp	.+352    	; 0x7b2e <vfprintf+0x3ae>
    79ce:	e9 2f       	mov	r30, r25
    79d0:	e0 61       	ori	r30, 0x10	; 16
    79d2:	be 2e       	mov	r11, r30
    79d4:	b4 fe       	sbrs	r11, 4
    79d6:	0d c0       	rjmp	.+26     	; 0x79f2 <vfprintf+0x272>
    79d8:	fb 2d       	mov	r31, r11
    79da:	f4 60       	ori	r31, 0x04	; 4
    79dc:	bf 2e       	mov	r11, r31
    79de:	09 c0       	rjmp	.+18     	; 0x79f2 <vfprintf+0x272>
    79e0:	34 fe       	sbrs	r3, 4
    79e2:	0a c0       	rjmp	.+20     	; 0x79f8 <vfprintf+0x278>
    79e4:	29 2f       	mov	r18, r25
    79e6:	26 60       	ori	r18, 0x06	; 6
    79e8:	b2 2e       	mov	r11, r18
    79ea:	06 c0       	rjmp	.+12     	; 0x79f8 <vfprintf+0x278>
    79ec:	28 e0       	ldi	r18, 0x08	; 8
    79ee:	30 e0       	ldi	r19, 0x00	; 0
    79f0:	05 c0       	rjmp	.+10     	; 0x79fc <vfprintf+0x27c>
    79f2:	20 e1       	ldi	r18, 0x10	; 16
    79f4:	30 e0       	ldi	r19, 0x00	; 0
    79f6:	02 c0       	rjmp	.+4      	; 0x79fc <vfprintf+0x27c>
    79f8:	20 e1       	ldi	r18, 0x10	; 16
    79fa:	32 e0       	ldi	r19, 0x02	; 2
    79fc:	f8 01       	movw	r30, r16
    79fe:	b7 fe       	sbrs	r11, 7
    7a00:	07 c0       	rjmp	.+14     	; 0x7a10 <vfprintf+0x290>
    7a02:	60 81       	ld	r22, Z
    7a04:	71 81       	ldd	r23, Z+1	; 0x01
    7a06:	82 81       	ldd	r24, Z+2	; 0x02
    7a08:	93 81       	ldd	r25, Z+3	; 0x03
    7a0a:	0c 5f       	subi	r16, 0xFC	; 252
    7a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    7a0e:	06 c0       	rjmp	.+12     	; 0x7a1c <vfprintf+0x29c>
    7a10:	60 81       	ld	r22, Z
    7a12:	71 81       	ldd	r23, Z+1	; 0x01
    7a14:	80 e0       	ldi	r24, 0x00	; 0
    7a16:	90 e0       	ldi	r25, 0x00	; 0
    7a18:	0e 5f       	subi	r16, 0xFE	; 254
    7a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    7a1c:	a3 01       	movw	r20, r6
    7a1e:	0e 94 f3 3d 	call	0x7be6	; 0x7be6 <__ultoa_invert>
    7a22:	88 2e       	mov	r8, r24
    7a24:	86 18       	sub	r8, r6
    7a26:	fb 2d       	mov	r31, r11
    7a28:	ff 77       	andi	r31, 0x7F	; 127
    7a2a:	3f 2e       	mov	r3, r31
    7a2c:	36 fe       	sbrs	r3, 6
    7a2e:	0d c0       	rjmp	.+26     	; 0x7a4a <vfprintf+0x2ca>
    7a30:	23 2d       	mov	r18, r3
    7a32:	2e 7f       	andi	r18, 0xFE	; 254
    7a34:	a2 2e       	mov	r10, r18
    7a36:	89 14       	cp	r8, r9
    7a38:	58 f4       	brcc	.+22     	; 0x7a50 <vfprintf+0x2d0>
    7a3a:	34 fe       	sbrs	r3, 4
    7a3c:	0b c0       	rjmp	.+22     	; 0x7a54 <vfprintf+0x2d4>
    7a3e:	32 fc       	sbrc	r3, 2
    7a40:	09 c0       	rjmp	.+18     	; 0x7a54 <vfprintf+0x2d4>
    7a42:	83 2d       	mov	r24, r3
    7a44:	8e 7e       	andi	r24, 0xEE	; 238
    7a46:	a8 2e       	mov	r10, r24
    7a48:	05 c0       	rjmp	.+10     	; 0x7a54 <vfprintf+0x2d4>
    7a4a:	b8 2c       	mov	r11, r8
    7a4c:	a3 2c       	mov	r10, r3
    7a4e:	03 c0       	rjmp	.+6      	; 0x7a56 <vfprintf+0x2d6>
    7a50:	b8 2c       	mov	r11, r8
    7a52:	01 c0       	rjmp	.+2      	; 0x7a56 <vfprintf+0x2d6>
    7a54:	b9 2c       	mov	r11, r9
    7a56:	a4 fe       	sbrs	r10, 4
    7a58:	0f c0       	rjmp	.+30     	; 0x7a78 <vfprintf+0x2f8>
    7a5a:	fe 01       	movw	r30, r28
    7a5c:	e8 0d       	add	r30, r8
    7a5e:	f1 1d       	adc	r31, r1
    7a60:	80 81       	ld	r24, Z
    7a62:	80 33       	cpi	r24, 0x30	; 48
    7a64:	21 f4       	brne	.+8      	; 0x7a6e <vfprintf+0x2ee>
    7a66:	9a 2d       	mov	r25, r10
    7a68:	99 7e       	andi	r25, 0xE9	; 233
    7a6a:	a9 2e       	mov	r10, r25
    7a6c:	09 c0       	rjmp	.+18     	; 0x7a80 <vfprintf+0x300>
    7a6e:	a2 fe       	sbrs	r10, 2
    7a70:	06 c0       	rjmp	.+12     	; 0x7a7e <vfprintf+0x2fe>
    7a72:	b3 94       	inc	r11
    7a74:	b3 94       	inc	r11
    7a76:	04 c0       	rjmp	.+8      	; 0x7a80 <vfprintf+0x300>
    7a78:	8a 2d       	mov	r24, r10
    7a7a:	86 78       	andi	r24, 0x86	; 134
    7a7c:	09 f0       	breq	.+2      	; 0x7a80 <vfprintf+0x300>
    7a7e:	b3 94       	inc	r11
    7a80:	a3 fc       	sbrc	r10, 3
    7a82:	11 c0       	rjmp	.+34     	; 0x7aa6 <vfprintf+0x326>
    7a84:	a0 fe       	sbrs	r10, 0
    7a86:	06 c0       	rjmp	.+12     	; 0x7a94 <vfprintf+0x314>
    7a88:	b2 14       	cp	r11, r2
    7a8a:	88 f4       	brcc	.+34     	; 0x7aae <vfprintf+0x32e>
    7a8c:	28 0c       	add	r2, r8
    7a8e:	92 2c       	mov	r9, r2
    7a90:	9b 18       	sub	r9, r11
    7a92:	0e c0       	rjmp	.+28     	; 0x7ab0 <vfprintf+0x330>
    7a94:	b2 14       	cp	r11, r2
    7a96:	60 f4       	brcc	.+24     	; 0x7ab0 <vfprintf+0x330>
    7a98:	b6 01       	movw	r22, r12
    7a9a:	80 e2       	ldi	r24, 0x20	; 32
    7a9c:	90 e0       	ldi	r25, 0x00	; 0
    7a9e:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <fputc>
    7aa2:	b3 94       	inc	r11
    7aa4:	f7 cf       	rjmp	.-18     	; 0x7a94 <vfprintf+0x314>
    7aa6:	b2 14       	cp	r11, r2
    7aa8:	18 f4       	brcc	.+6      	; 0x7ab0 <vfprintf+0x330>
    7aaa:	2b 18       	sub	r2, r11
    7aac:	02 c0       	rjmp	.+4      	; 0x7ab2 <vfprintf+0x332>
    7aae:	98 2c       	mov	r9, r8
    7ab0:	21 2c       	mov	r2, r1
    7ab2:	a4 fe       	sbrs	r10, 4
    7ab4:	10 c0       	rjmp	.+32     	; 0x7ad6 <vfprintf+0x356>
    7ab6:	b6 01       	movw	r22, r12
    7ab8:	80 e3       	ldi	r24, 0x30	; 48
    7aba:	90 e0       	ldi	r25, 0x00	; 0
    7abc:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <fputc>
    7ac0:	a2 fe       	sbrs	r10, 2
    7ac2:	17 c0       	rjmp	.+46     	; 0x7af2 <vfprintf+0x372>
    7ac4:	a1 fc       	sbrc	r10, 1
    7ac6:	03 c0       	rjmp	.+6      	; 0x7ace <vfprintf+0x34e>
    7ac8:	88 e7       	ldi	r24, 0x78	; 120
    7aca:	90 e0       	ldi	r25, 0x00	; 0
    7acc:	02 c0       	rjmp	.+4      	; 0x7ad2 <vfprintf+0x352>
    7ace:	88 e5       	ldi	r24, 0x58	; 88
    7ad0:	90 e0       	ldi	r25, 0x00	; 0
    7ad2:	b6 01       	movw	r22, r12
    7ad4:	0c c0       	rjmp	.+24     	; 0x7aee <vfprintf+0x36e>
    7ad6:	8a 2d       	mov	r24, r10
    7ad8:	86 78       	andi	r24, 0x86	; 134
    7ada:	59 f0       	breq	.+22     	; 0x7af2 <vfprintf+0x372>
    7adc:	a1 fe       	sbrs	r10, 1
    7ade:	02 c0       	rjmp	.+4      	; 0x7ae4 <vfprintf+0x364>
    7ae0:	8b e2       	ldi	r24, 0x2B	; 43
    7ae2:	01 c0       	rjmp	.+2      	; 0x7ae6 <vfprintf+0x366>
    7ae4:	80 e2       	ldi	r24, 0x20	; 32
    7ae6:	a7 fc       	sbrc	r10, 7
    7ae8:	8d e2       	ldi	r24, 0x2D	; 45
    7aea:	b6 01       	movw	r22, r12
    7aec:	90 e0       	ldi	r25, 0x00	; 0
    7aee:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <fputc>
    7af2:	89 14       	cp	r8, r9
    7af4:	38 f4       	brcc	.+14     	; 0x7b04 <vfprintf+0x384>
    7af6:	b6 01       	movw	r22, r12
    7af8:	80 e3       	ldi	r24, 0x30	; 48
    7afa:	90 e0       	ldi	r25, 0x00	; 0
    7afc:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <fputc>
    7b00:	9a 94       	dec	r9
    7b02:	f7 cf       	rjmp	.-18     	; 0x7af2 <vfprintf+0x372>
    7b04:	8a 94       	dec	r8
    7b06:	f3 01       	movw	r30, r6
    7b08:	e8 0d       	add	r30, r8
    7b0a:	f1 1d       	adc	r31, r1
    7b0c:	80 81       	ld	r24, Z
    7b0e:	b6 01       	movw	r22, r12
    7b10:	90 e0       	ldi	r25, 0x00	; 0
    7b12:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <fputc>
    7b16:	81 10       	cpse	r8, r1
    7b18:	f5 cf       	rjmp	.-22     	; 0x7b04 <vfprintf+0x384>
    7b1a:	22 20       	and	r2, r2
    7b1c:	09 f4       	brne	.+2      	; 0x7b20 <vfprintf+0x3a0>
    7b1e:	42 ce       	rjmp	.-892    	; 0x77a4 <vfprintf+0x24>
    7b20:	b6 01       	movw	r22, r12
    7b22:	80 e2       	ldi	r24, 0x20	; 32
    7b24:	90 e0       	ldi	r25, 0x00	; 0
    7b26:	0e 94 b7 3d 	call	0x7b6e	; 0x7b6e <fputc>
    7b2a:	2a 94       	dec	r2
    7b2c:	f6 cf       	rjmp	.-20     	; 0x7b1a <vfprintf+0x39a>
    7b2e:	f6 01       	movw	r30, r12
    7b30:	86 81       	ldd	r24, Z+6	; 0x06
    7b32:	97 81       	ldd	r25, Z+7	; 0x07
    7b34:	02 c0       	rjmp	.+4      	; 0x7b3a <vfprintf+0x3ba>
    7b36:	8f ef       	ldi	r24, 0xFF	; 255
    7b38:	9f ef       	ldi	r25, 0xFF	; 255
    7b3a:	2b 96       	adiw	r28, 0x0b	; 11
    7b3c:	e2 e1       	ldi	r30, 0x12	; 18
    7b3e:	0c 94 6a 3e 	jmp	0x7cd4	; 0x7cd4 <__epilogue_restores__>

00007b42 <strnlen_P>:
    7b42:	fc 01       	movw	r30, r24
    7b44:	05 90       	lpm	r0, Z+
    7b46:	61 50       	subi	r22, 0x01	; 1
    7b48:	70 40       	sbci	r23, 0x00	; 0
    7b4a:	01 10       	cpse	r0, r1
    7b4c:	d8 f7       	brcc	.-10     	; 0x7b44 <strnlen_P+0x2>
    7b4e:	80 95       	com	r24
    7b50:	90 95       	com	r25
    7b52:	8e 0f       	add	r24, r30
    7b54:	9f 1f       	adc	r25, r31
    7b56:	08 95       	ret

00007b58 <strnlen>:
    7b58:	fc 01       	movw	r30, r24
    7b5a:	61 50       	subi	r22, 0x01	; 1
    7b5c:	70 40       	sbci	r23, 0x00	; 0
    7b5e:	01 90       	ld	r0, Z+
    7b60:	01 10       	cpse	r0, r1
    7b62:	d8 f7       	brcc	.-10     	; 0x7b5a <strnlen+0x2>
    7b64:	80 95       	com	r24
    7b66:	90 95       	com	r25
    7b68:	8e 0f       	add	r24, r30
    7b6a:	9f 1f       	adc	r25, r31
    7b6c:	08 95       	ret

00007b6e <fputc>:
    7b6e:	0f 93       	push	r16
    7b70:	1f 93       	push	r17
    7b72:	cf 93       	push	r28
    7b74:	df 93       	push	r29
    7b76:	fb 01       	movw	r30, r22
    7b78:	23 81       	ldd	r18, Z+3	; 0x03
    7b7a:	21 fd       	sbrc	r18, 1
    7b7c:	03 c0       	rjmp	.+6      	; 0x7b84 <fputc+0x16>
    7b7e:	8f ef       	ldi	r24, 0xFF	; 255
    7b80:	9f ef       	ldi	r25, 0xFF	; 255
    7b82:	2c c0       	rjmp	.+88     	; 0x7bdc <fputc+0x6e>
    7b84:	22 ff       	sbrs	r18, 2
    7b86:	16 c0       	rjmp	.+44     	; 0x7bb4 <fputc+0x46>
    7b88:	46 81       	ldd	r20, Z+6	; 0x06
    7b8a:	57 81       	ldd	r21, Z+7	; 0x07
    7b8c:	24 81       	ldd	r18, Z+4	; 0x04
    7b8e:	35 81       	ldd	r19, Z+5	; 0x05
    7b90:	42 17       	cp	r20, r18
    7b92:	53 07       	cpc	r21, r19
    7b94:	44 f4       	brge	.+16     	; 0x7ba6 <fputc+0x38>
    7b96:	a0 81       	ld	r26, Z
    7b98:	b1 81       	ldd	r27, Z+1	; 0x01
    7b9a:	9d 01       	movw	r18, r26
    7b9c:	2f 5f       	subi	r18, 0xFF	; 255
    7b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    7ba0:	20 83       	st	Z, r18
    7ba2:	31 83       	std	Z+1, r19	; 0x01
    7ba4:	8c 93       	st	X, r24
    7ba6:	26 81       	ldd	r18, Z+6	; 0x06
    7ba8:	37 81       	ldd	r19, Z+7	; 0x07
    7baa:	2f 5f       	subi	r18, 0xFF	; 255
    7bac:	3f 4f       	sbci	r19, 0xFF	; 255
    7bae:	26 83       	std	Z+6, r18	; 0x06
    7bb0:	37 83       	std	Z+7, r19	; 0x07
    7bb2:	14 c0       	rjmp	.+40     	; 0x7bdc <fputc+0x6e>
    7bb4:	8b 01       	movw	r16, r22
    7bb6:	ec 01       	movw	r28, r24
    7bb8:	fb 01       	movw	r30, r22
    7bba:	00 84       	ldd	r0, Z+8	; 0x08
    7bbc:	f1 85       	ldd	r31, Z+9	; 0x09
    7bbe:	e0 2d       	mov	r30, r0
    7bc0:	09 95       	icall
    7bc2:	89 2b       	or	r24, r25
    7bc4:	e1 f6       	brne	.-72     	; 0x7b7e <fputc+0x10>
    7bc6:	d8 01       	movw	r26, r16
    7bc8:	16 96       	adiw	r26, 0x06	; 6
    7bca:	8d 91       	ld	r24, X+
    7bcc:	9c 91       	ld	r25, X
    7bce:	17 97       	sbiw	r26, 0x07	; 7
    7bd0:	01 96       	adiw	r24, 0x01	; 1
    7bd2:	16 96       	adiw	r26, 0x06	; 6
    7bd4:	8d 93       	st	X+, r24
    7bd6:	9c 93       	st	X, r25
    7bd8:	17 97       	sbiw	r26, 0x07	; 7
    7bda:	ce 01       	movw	r24, r28
    7bdc:	df 91       	pop	r29
    7bde:	cf 91       	pop	r28
    7be0:	1f 91       	pop	r17
    7be2:	0f 91       	pop	r16
    7be4:	08 95       	ret

00007be6 <__ultoa_invert>:
    7be6:	fa 01       	movw	r30, r20
    7be8:	aa 27       	eor	r26, r26
    7bea:	28 30       	cpi	r18, 0x08	; 8
    7bec:	51 f1       	breq	.+84     	; 0x7c42 <__ultoa_invert+0x5c>
    7bee:	20 31       	cpi	r18, 0x10	; 16
    7bf0:	81 f1       	breq	.+96     	; 0x7c52 <__ultoa_invert+0x6c>
    7bf2:	e8 94       	clt
    7bf4:	6f 93       	push	r22
    7bf6:	6e 7f       	andi	r22, 0xFE	; 254
    7bf8:	6e 5f       	subi	r22, 0xFE	; 254
    7bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    7bfc:	8f 4f       	sbci	r24, 0xFF	; 255
    7bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    7c00:	af 4f       	sbci	r26, 0xFF	; 255
    7c02:	b1 e0       	ldi	r27, 0x01	; 1
    7c04:	3e d0       	rcall	.+124    	; 0x7c82 <__ultoa_invert+0x9c>
    7c06:	b4 e0       	ldi	r27, 0x04	; 4
    7c08:	3c d0       	rcall	.+120    	; 0x7c82 <__ultoa_invert+0x9c>
    7c0a:	67 0f       	add	r22, r23
    7c0c:	78 1f       	adc	r23, r24
    7c0e:	89 1f       	adc	r24, r25
    7c10:	9a 1f       	adc	r25, r26
    7c12:	a1 1d       	adc	r26, r1
    7c14:	68 0f       	add	r22, r24
    7c16:	79 1f       	adc	r23, r25
    7c18:	8a 1f       	adc	r24, r26
    7c1a:	91 1d       	adc	r25, r1
    7c1c:	a1 1d       	adc	r26, r1
    7c1e:	6a 0f       	add	r22, r26
    7c20:	71 1d       	adc	r23, r1
    7c22:	81 1d       	adc	r24, r1
    7c24:	91 1d       	adc	r25, r1
    7c26:	a1 1d       	adc	r26, r1
    7c28:	20 d0       	rcall	.+64     	; 0x7c6a <__ultoa_invert+0x84>
    7c2a:	09 f4       	brne	.+2      	; 0x7c2e <__ultoa_invert+0x48>
    7c2c:	68 94       	set
    7c2e:	3f 91       	pop	r19
    7c30:	2a e0       	ldi	r18, 0x0A	; 10
    7c32:	26 9f       	mul	r18, r22
    7c34:	11 24       	eor	r1, r1
    7c36:	30 19       	sub	r19, r0
    7c38:	30 5d       	subi	r19, 0xD0	; 208
    7c3a:	31 93       	st	Z+, r19
    7c3c:	de f6       	brtc	.-74     	; 0x7bf4 <__ultoa_invert+0xe>
    7c3e:	cf 01       	movw	r24, r30
    7c40:	08 95       	ret
    7c42:	46 2f       	mov	r20, r22
    7c44:	47 70       	andi	r20, 0x07	; 7
    7c46:	40 5d       	subi	r20, 0xD0	; 208
    7c48:	41 93       	st	Z+, r20
    7c4a:	b3 e0       	ldi	r27, 0x03	; 3
    7c4c:	0f d0       	rcall	.+30     	; 0x7c6c <__ultoa_invert+0x86>
    7c4e:	c9 f7       	brne	.-14     	; 0x7c42 <__ultoa_invert+0x5c>
    7c50:	f6 cf       	rjmp	.-20     	; 0x7c3e <__ultoa_invert+0x58>
    7c52:	46 2f       	mov	r20, r22
    7c54:	4f 70       	andi	r20, 0x0F	; 15
    7c56:	40 5d       	subi	r20, 0xD0	; 208
    7c58:	4a 33       	cpi	r20, 0x3A	; 58
    7c5a:	18 f0       	brcs	.+6      	; 0x7c62 <__ultoa_invert+0x7c>
    7c5c:	49 5d       	subi	r20, 0xD9	; 217
    7c5e:	31 fd       	sbrc	r19, 1
    7c60:	40 52       	subi	r20, 0x20	; 32
    7c62:	41 93       	st	Z+, r20
    7c64:	02 d0       	rcall	.+4      	; 0x7c6a <__ultoa_invert+0x84>
    7c66:	a9 f7       	brne	.-22     	; 0x7c52 <__ultoa_invert+0x6c>
    7c68:	ea cf       	rjmp	.-44     	; 0x7c3e <__ultoa_invert+0x58>
    7c6a:	b4 e0       	ldi	r27, 0x04	; 4
    7c6c:	a6 95       	lsr	r26
    7c6e:	97 95       	ror	r25
    7c70:	87 95       	ror	r24
    7c72:	77 95       	ror	r23
    7c74:	67 95       	ror	r22
    7c76:	ba 95       	dec	r27
    7c78:	c9 f7       	brne	.-14     	; 0x7c6c <__ultoa_invert+0x86>
    7c7a:	00 97       	sbiw	r24, 0x00	; 0
    7c7c:	61 05       	cpc	r22, r1
    7c7e:	71 05       	cpc	r23, r1
    7c80:	08 95       	ret
    7c82:	9b 01       	movw	r18, r22
    7c84:	ac 01       	movw	r20, r24
    7c86:	0a 2e       	mov	r0, r26
    7c88:	06 94       	lsr	r0
    7c8a:	57 95       	ror	r21
    7c8c:	47 95       	ror	r20
    7c8e:	37 95       	ror	r19
    7c90:	27 95       	ror	r18
    7c92:	ba 95       	dec	r27
    7c94:	c9 f7       	brne	.-14     	; 0x7c88 <__ultoa_invert+0xa2>
    7c96:	62 0f       	add	r22, r18
    7c98:	73 1f       	adc	r23, r19
    7c9a:	84 1f       	adc	r24, r20
    7c9c:	95 1f       	adc	r25, r21
    7c9e:	a0 1d       	adc	r26, r0
    7ca0:	08 95       	ret

00007ca2 <__prologue_saves__>:
    7ca2:	2f 92       	push	r2
    7ca4:	3f 92       	push	r3
    7ca6:	4f 92       	push	r4
    7ca8:	5f 92       	push	r5
    7caa:	6f 92       	push	r6
    7cac:	7f 92       	push	r7
    7cae:	8f 92       	push	r8
    7cb0:	9f 92       	push	r9
    7cb2:	af 92       	push	r10
    7cb4:	bf 92       	push	r11
    7cb6:	cf 92       	push	r12
    7cb8:	df 92       	push	r13
    7cba:	ef 92       	push	r14
    7cbc:	ff 92       	push	r15
    7cbe:	0f 93       	push	r16
    7cc0:	1f 93       	push	r17
    7cc2:	cf 93       	push	r28
    7cc4:	df 93       	push	r29
    7cc6:	cd b7       	in	r28, 0x3d	; 61
    7cc8:	de b7       	in	r29, 0x3e	; 62
    7cca:	ca 1b       	sub	r28, r26
    7ccc:	db 0b       	sbc	r29, r27
    7cce:	cd bf       	out	0x3d, r28	; 61
    7cd0:	de bf       	out	0x3e, r29	; 62
    7cd2:	09 94       	ijmp

00007cd4 <__epilogue_restores__>:
    7cd4:	2a 88       	ldd	r2, Y+18	; 0x12
    7cd6:	39 88       	ldd	r3, Y+17	; 0x11
    7cd8:	48 88       	ldd	r4, Y+16	; 0x10
    7cda:	5f 84       	ldd	r5, Y+15	; 0x0f
    7cdc:	6e 84       	ldd	r6, Y+14	; 0x0e
    7cde:	7d 84       	ldd	r7, Y+13	; 0x0d
    7ce0:	8c 84       	ldd	r8, Y+12	; 0x0c
    7ce2:	9b 84       	ldd	r9, Y+11	; 0x0b
    7ce4:	aa 84       	ldd	r10, Y+10	; 0x0a
    7ce6:	b9 84       	ldd	r11, Y+9	; 0x09
    7ce8:	c8 84       	ldd	r12, Y+8	; 0x08
    7cea:	df 80       	ldd	r13, Y+7	; 0x07
    7cec:	ee 80       	ldd	r14, Y+6	; 0x06
    7cee:	fd 80       	ldd	r15, Y+5	; 0x05
    7cf0:	0c 81       	ldd	r16, Y+4	; 0x04
    7cf2:	1b 81       	ldd	r17, Y+3	; 0x03
    7cf4:	aa 81       	ldd	r26, Y+2	; 0x02
    7cf6:	b9 81       	ldd	r27, Y+1	; 0x01
    7cf8:	ce 0f       	add	r28, r30
    7cfa:	d1 1d       	adc	r29, r1
    7cfc:	cd bf       	out	0x3d, r28	; 61
    7cfe:	de bf       	out	0x3e, r29	; 62
    7d00:	ed 01       	movw	r28, r26
    7d02:	08 95       	ret

00007d04 <_exit>:
    7d04:	f8 94       	cli

00007d06 <__stop_program>:
    7d06:	ff cf       	rjmp	.-2      	; 0x7d06 <__stop_program>
